/*=========================================================
*Copyright(c) 2017 CyberLogitec
*@FileName : SpacecontrolinquiryDBDAOExcelDownSpaceUtilizationLaneListRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2017.01.23
*@LastModifier : Arie
*@LastVersion : 1.0
* 2017.01.23 Arie
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esm.spc.spacecontrolinquiry.spacecontrolinquiry.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author Arie
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class SpacecontrolinquiryDBDAOExcelDownSpaceUtilizationLaneListRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * Excel Dwon List 조회 합니다.
	  * 2013.11.25 신자영 [CHM-201327083-01] IPC Sector 판매 활성화 Tool 개발 - Space Utilization 화면 신규 개발
	  * 2014.01.13 김시몬 [선반영] BKG CMPB계산시 BKG_VVD의 Trunk VVD기준 pol, pod를 이용하여 구한다.
	  * 2014.01.16 김시몬 [선반영] BKG CMPB계산시 Office Profit기준 CM(RA_CM_COST_AMT)를 이용하여 구한다.
	  * 2014.01.21 김시몬 [선반영] 조회 순서 변경-H/H, First Loading Date
	  * 2015.07.16 Arie [CHM-201537094] MAS CMB 산출 로직 변경 적용 - dem/det 추가 CM = REV+DEM/DET-COST TTL
	  * 2016.05.18 최성민 Double Callling Route(Port/Tmnl)에 대한 물량집계 및 병목상 Logic 보완 사항 요청
	  * 2017.1.23 SM상선 전환에 따른 소스변경
	  * </pre>
	  */
	public SpacecontrolinquiryDBDAOExcelDownSpaceUtilizationLaneListRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("eDate",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("sDate",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("lane",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esm.spc.spacecontrolinquiry.spacecontrolinquiry.integration").append("\n"); 
		query.append("FileName : SpacecontrolinquiryDBDAOExcelDownSpaceUtilizationLaneListRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("WITH VSL_PORT AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("  SELECT  DISTINCT		" ).append("\n"); 
		query.append("          VP.VSL_CD" ).append("\n"); 
		query.append("        , VP.SKD_VOY_NO" ).append("\n"); 
		query.append("		, VP.SKD_DIR_CD" ).append("\n"); 
		query.append("        , MV.RLANE_CD" ).append("\n"); 
		query.append("        , MV.N1ST_LODG_PORT_ETD_DT" ).append("\n"); 
		query.append("   FROM (" ).append("\n"); 
		query.append("            SELECT  T1.VSL_CD,  T1.SKD_VOY_NO, T1.SKD_DIR_CD,T1.VSL_SLAN_CD, T2.VPS_ETA_DT POL_ETA  " ).append("\n"); 
		query.append("            FROM    VSK_VSL_SKD T1, VSK_VSL_PORT_SKD T2, MDM_VSL_CNTR T3" ).append("\n"); 
		query.append("            WHERE   T1.VSL_CD       = T2.VSL_CD" ).append("\n"); 
		query.append("            AND     T1.SKD_VOY_NO   = T2.SKD_VOY_NO" ).append("\n"); 
		query.append("            AND     T1.SKD_DIR_CD   = T2.SKD_DIR_CD" ).append("\n"); 
		query.append("            AND     T1.VSL_CD       = T3.VSL_CD" ).append("\n"); 
		query.append("            AND     T1.VSL_SLAN_CD  = SUBSTR(@[lane],1,3)    -- argument값" ).append("\n"); 
		query.append("			AND EXISTS (SELECT 'X' " ).append("\n"); 
		query.append("                         FROM VSK_VSL_PORT_SKD VP" ).append("\n"); 
		query.append("                        WHERE VP.VSL_CD            = T1.VSL_CD" ).append("\n"); 
		query.append("                          AND VP.SKD_VOY_NO        = T1.SKD_VOY_NO" ).append("\n"); 
		query.append("                          AND VP.SKD_DIR_CD        = T1.SKD_DIR_CD" ).append("\n"); 
		query.append("                          AND T1.VSL_SLAN_CD       = SUBSTR(@[lane],1,3)     --LANE만 입력 시" ).append("\n"); 
		query.append("                          AND VP.TURN_PORT_IND_CD IN ('Y', 'N')" ).append("\n"); 
		query.append("                          AND NVL(VP.SKD_CNG_STS_CD, 'X') <> 'S'" ).append("\n"); 
		query.append("                          AND VP.CLPT_SEQ = (SELECT MIN(VP2.CLPT_SEQ)" ).append("\n"); 
		query.append("                                               FROM VSK_VSL_PORT_SKD VP2" ).append("\n"); 
		query.append("                                              WHERE VP2.VSL_CD            = VP.VSL_CD" ).append("\n"); 
		query.append("                                                AND VP2.SKD_VOY_NO        = VP.SKD_VOY_NO" ).append("\n"); 
		query.append("                                                AND VP2.SKD_DIR_CD        = VP.SKD_DIR_CD" ).append("\n"); 
		query.append("                                                AND VP2.SLAN_CD           = VP.SLAN_CD" ).append("\n"); 
		query.append("                                                AND VP2.TURN_PORT_IND_CD IN ('Y', 'N')" ).append("\n"); 
		query.append("                                                AND NVL(VP2.SKD_CNG_STS_CD, 'X') <> 'S'" ).append("\n"); 
		query.append("                                            )" ).append("\n"); 
		query.append("                         AND VP.VPS_ETA_DT BETWEEN TO_DATE(@[sDate], 'YYYY-MM-DD') AND  TO_DATE(@[eDate], 'YYYY-MM-DD') + 0.99999" ).append("\n"); 
		query.append("                       )" ).append("\n"); 
		query.append("            AND     NVL(T2.SKD_CNG_STS_CD, 'X') <> 'S'" ).append("\n"); 
		query.append("        ) VP" ).append("\n"); 
		query.append("        , MAS_MON_VVD  MV" ).append("\n"); 
		query.append("        , MDM_REV_LANE RL  " ).append("\n"); 
		query.append("  WHERE 1 = 1" ).append("\n"); 
		query.append("    AND MV.RLANE_CD    = @[lane]   -- argument값" ).append("\n"); 
		query.append("    AND VP.VSL_CD      = MV.VSL_CD" ).append("\n"); 
		query.append("    AND VP.SKD_VOY_NO  = MV.SKD_VOY_NO" ).append("\n"); 
		query.append("    AND VP.SKD_DIR_CD  = MV.DIR_CD" ).append("\n"); 
		query.append("    AND VP.VSL_SLAN_CD = MV.SLAN_CD" ).append("\n"); 
		query.append("    AND MV.DELT_FLG    = 'N'" ).append("\n"); 
		query.append("    AND MV.RLANE_CD    = RL.RLANE_CD" ).append("\n"); 
		query.append("    AND SPC_GET_REP_TRD_FNC (MV.RLANE_CD) = RL.REP_TRD_CD" ).append("\n"); 
		query.append("    AND RL.VSL_TP_CD   = 'C' " ).append("\n"); 
		query.append("    AND MV.RLANE_CD IS NOT NULL" ).append("\n"); 
		query.append("  ORDER BY VP.VSL_CD,  VP.SKD_VOY_NO, VP.SKD_DIR_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", PARAMS AS (" ).append("\n"); 
		query.append("    SELECT RLANE_CD  ," ).append("\n"); 
		query.append("           VSL_CD    ," ).append("\n"); 
		query.append("           SKD_VOY_NO," ).append("\n"); 
		query.append("           SKD_DIR_CD," ).append("\n"); 
		query.append("           '1'          AS STS       ," ).append("\n"); 
		query.append("           '1'          AS QTY_TP    ,  -- argument값" ).append("\n"); 
		query.append("           'N'          AS VOID_FLG  ,  -- argument값" ).append("\n"); 
		query.append("           N1ST_LODG_PORT_ETD_DT" ).append("\n"); 
		query.append("      FROM VSL_PORT" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", CUR_PORTS AS (" ).append("\n"); 
		query.append("    SELECT RLANE_CD       ," ).append("\n"); 
		query.append("           VSL_CD         ," ).append("\n"); 
		query.append("           SKD_VOY_NO     ," ).append("\n"); 
		query.append("           SKD_DIR_CD     ," ).append("\n"); 
		query.append("           VSL_CD || SKD_VOY_NO || SKD_DIR_CD AS BASE_VVD," ).append("\n"); 
		query.append("           PORT_CD        ," ).append("\n"); 
		query.append("           YD_CD          ," ).append("\n"); 
		query.append("           CLPT_SEQ       ," ).append("\n"); 
		query.append("           CLPT_IND_SEQ   ," ).append("\n"); 
		query.append("           TURN_SKD_VOY_NO," ).append("\n"); 
		query.append("           TURN_SKD_DIR_CD," ).append("\n"); 
		query.append("           TURN_CLPT_IND_SEQ   ," ).append("\n"); 
		query.append("           FLG            ," ).append("\n"); 
		query.append("           BSA            ," ).append("\n"); 
		query.append("           STS" ).append("\n"); 
		query.append("      FROM (" ).append("\n"); 
		query.append("              SELECT P.RLANE_CD   ," ).append("\n"); 
		query.append("                     S1.VSL_CD    ," ).append("\n"); 
		query.append("                     S1.SKD_VOY_NO," ).append("\n"); 
		query.append("                     S1.SKD_DIR_CD," ).append("\n"); 
		query.append("                     S1.VPS_PORT_CD AS PORT_CD," ).append("\n"); 
		query.append("                     S1.YD_CD     ," ).append("\n"); 
		query.append("                     S1.CLPT_SEQ           AS CLPT_SEQ," ).append("\n"); 
		query.append("                     S1.CLPT_IND_SEQ       AS CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     S1.TURN_SKD_VOY_NO," ).append("\n"); 
		query.append("                     S1.TURN_SKD_DIR_CD," ).append("\n"); 
		query.append("                     S1.TURN_CLPT_IND_SEQ       AS TURN_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                       CASE " ).append("\n"); 
		query.append("                            WHEN TRIM(S1.TURN_SKD_VOY_NO) IS NULL  THEN 2" ).append("\n"); 
		query.append("                            WHEN S1.TURN_PORT_IND_CD IN ('Y', 'N') THEN 1" ).append("\n"); 
		query.append("                                                                   ELSE 3" ).append("\n"); 
		query.append("                        END" ).append("\n"); 
		query.append("                     ) AS FLG," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT (" ).append("\n"); 
		query.append("                                  SELECT NVL(MAX(DECODE(B.STUP_FLG, 'Y', DECODE(A.PORT_BSA_CAPA, 0, NULL, A.PORT_BSA_CAPA))), C.CRR_BSA_CAPA) BSA" ).append("\n"); 
		query.append("                                    FROM BSA_VVD_PORT_DWN A," ).append("\n"); 
		query.append("                                         MAS_LANE_RGST    B" ).append("\n"); 
		query.append("                                   WHERE B.RLANE_CD        = C.RLANE_CD" ).append("\n"); 
		query.append("                                     AND B.TRD_CD          = C.TRD_CD" ).append("\n"); 
		query.append("                                     AND B.DIR_CD          = C.SKD_DIR_CD" ).append("\n"); 
		query.append("                                     AND A.TRD_CD      (+) = C.TRD_CD" ).append("\n"); 
		query.append("                                     AND A.RLANE_CD    (+) = C.RLANE_CD" ).append("\n"); 
		query.append("                                     AND A.VSL_CD      (+) = C.VSL_CD" ).append("\n"); 
		query.append("                                     AND A.SKD_VOY_NO  (+) = C.SKD_VOY_NO" ).append("\n"); 
		query.append("                                     AND A.SKD_DIR_CD  (+) = C.SKD_DIR_CD" ).append("\n"); 
		query.append("                                     AND A.BSA_OP_JB_CD(+) = DECODE(P.QTY_TP, '1', '007', '016') -- Port별 Weight 정보" ).append("\n"); 
		query.append("                                     AND A.CRR_CD      (+) = C.CRR_CD" ).append("\n"); 
		query.append("                                     AND A.PORT_CD     (+) = NVL(SUBSTR(S1.YD_CD, 1, 5), S1.VPS_PORT_CD)" ).append("\n"); 
		query.append("                               ) AS BSA" ).append("\n"); 
		query.append("                          FROM BSA_VVD_OTR_CRR C" ).append("\n"); 
		query.append("                         WHERE C.RLANE_CD     = P.RLANE_CD" ).append("\n"); 
		query.append("                           AND C.VSL_CD       = P.VSL_CD" ).append("\n"); 
		query.append("                           AND C.SKD_VOY_NO   = P.SKD_VOY_NO" ).append("\n"); 
		query.append("                           AND C.SKD_DIR_CD   = P.SKD_DIR_CD" ).append("\n"); 
		query.append("                           AND C.BSA_OP_JB_CD = DECODE(P.QTY_TP, '1', '007', '009')" ).append("\n"); 
		query.append("                           AND C.CRR_CD       = 'SML' " ).append("\n"); 
		query.append("                     ) AS BSA," ).append("\n"); 
		query.append("                     P.STS" ).append("\n"); 
		query.append("                FROM VSK_VSL_PORT_SKD S1," ).append("\n"); 
		query.append("                     PARAMS           P" ).append("\n"); 
		query.append("               WHERE (S1.SKD_CNG_STS_CD IS NULL OR S1.SKD_CNG_STS_CD <> 'S')" ).append("\n"); 
		query.append("                 AND S1.VSL_CD     = P.VSL_CD" ).append("\n"); 
		query.append("                 AND S1.SKD_VOY_NO = P.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND S1.SKD_DIR_CD = P.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND S1.VPS_PORT_CD NOT IN ('EGSUZ')" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", VVD_BASE AS (" ).append("\n"); 
		query.append("    SELECT RLANE_CD  ," ).append("\n"); 
		query.append("           VSL_CD    ," ).append("\n"); 
		query.append("           SKD_VOY_NO," ).append("\n"); 
		query.append("           SKD_DIR_CD," ).append("\n"); 
		query.append("           BASE_VVD," ).append("\n"); 
		query.append("           MAX(STS) AS STS," ).append("\n"); 
		query.append("           MIN(DECODE(FLG, '1', TURN_SKD_VOY_NO)) AS PRE_SKD_VOY_NO," ).append("\n"); 
		query.append("           MIN(DECODE(FLG, '1', TURN_SKD_DIR_CD)) AS PRE_SKD_DIR_CD," ).append("\n"); 
		query.append("           MIN(DECODE(FLG, '3', TURN_SKD_VOY_NO)) AS PST_SKD_VOY_NO," ).append("\n"); 
		query.append("           MIN(DECODE(FLG, '3', TURN_SKD_DIR_CD)) AS PST_SKD_DIR_CD" ).append("\n"); 
		query.append("      FROM (" ).append("\n"); 
		query.append("              SELECT S1.RLANE_CD       ," ).append("\n"); 
		query.append("                     BASE_VVD," ).append("\n"); 
		query.append("                     S1.VSL_CD         ," ).append("\n"); 
		query.append("                     S1.SKD_VOY_NO     ," ).append("\n"); 
		query.append("                     S1.SKD_DIR_CD     ," ).append("\n"); 
		query.append("                     S1.TURN_SKD_VOY_NO," ).append("\n"); 
		query.append("                     S1.TURN_SKD_DIR_CD," ).append("\n"); 
		query.append("                     DECODE(S2.SKD_VOY_NO, NULL, '', S1.FLG) AS FLG," ).append("\n"); 
		query.append("                     S1.STS" ).append("\n"); 
		query.append("                FROM CUR_PORTS        S1," ).append("\n"); 
		query.append("                     VSK_VSL_PORT_SKD S2" ).append("\n"); 
		query.append("               WHERE S1.VSL_CD          = S2.VSL_CD    (+)" ).append("\n"); 
		query.append("                 AND S1.TURN_SKD_VOY_NO = S2.SKD_VOY_NO(+)" ).append("\n"); 
		query.append("                 AND S1.TURN_SKD_DIR_CD = S2.SKD_DIR_CD(+)" ).append("\n"); 
		query.append("                 AND S1.YD_CD           = S2.YD_CD     (+)" ).append("\n"); 
		query.append("           )" ).append("\n"); 
		query.append("  GROUP BY RLANE_CD  ," ).append("\n"); 
		query.append("           VSL_CD    ," ).append("\n"); 
		query.append("           SKD_VOY_NO," ).append("\n"); 
		query.append("           SKD_DIR_CD," ).append("\n"); 
		query.append("           BASE_VVD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", PORT_SKD AS (" ).append("\n"); 
		query.append("    SELECT B.RLANE_CD," ).append("\n"); 
		query.append("           B.BASE_VVD," ).append("\n"); 
		query.append("           (" ).append("\n"); 
		query.append("             DECODE(S1.SKD_VOY_NO||S1.SKD_DIR_CD, B.PRE_SKD_VOY_NO||B.PRE_SKD_DIR_CD, '1'," ).append("\n"); 
		query.append("                                                  B.SKD_VOY_NO||B.SKD_DIR_CD        , '2'," ).append("\n"); 
		query.append("                                                  B.PST_SKD_VOY_NO||B.PST_SKD_DIR_CD, '3'  )" ).append("\n"); 
		query.append("           ) AS TP," ).append("\n"); 
		query.append("           S1.VSL_CD||S1.SKD_VOY_NO||S1.SKD_DIR_CD AS VVD," ).append("\n"); 
		query.append("           S1.VSL_CD     ," ).append("\n"); 
		query.append("           S1.SKD_VOY_NO ," ).append("\n"); 
		query.append("           S1.SKD_DIR_CD ," ).append("\n"); 
		query.append("           S1.VPS_PORT_CD," ).append("\n"); 
		query.append("           S1.YD_CD      ," ).append("\n"); 
		query.append("           S1.CALL_YD_IND_SEQ," ).append("\n"); 
		query.append("           S1.CLPT_SEQ   ," ).append("\n"); 
		query.append("           S1.CLPT_IND_SEQ," ).append("\n"); 
		query.append("           S1.TURN_CLPT_IND_SEQ,     " ).append("\n"); 
		query.append("           SPC_CONTI_CONV_FNC(LOC.CONTI_CD, B.RLANE_CD) AS PORT_CONTI," ).append("\n"); 
		query.append("           S1.TURN_PORT_IND_CD," ).append("\n"); 
		query.append("           NVL(S1.SKD_CNG_STS_CD, ' ') AS CNG_STS_CD," ).append("\n"); 
		query.append("           S1.TURN_SKD_VOY_NO," ).append("\n"); 
		query.append("           S1.TURN_SKD_DIR_CD," ).append("\n"); 
		query.append("           S1.VSL_CD||S1.TURN_SKD_VOY_NO||S1.TURN_SKD_DIR_CD AS TURN_VVD," ).append("\n"); 
		query.append("           B.PRE_SKD_VOY_NO," ).append("\n"); 
		query.append("           B.PRE_SKD_DIR_CD," ).append("\n"); 
		query.append("           B.PST_SKD_VOY_NO," ).append("\n"); 
		query.append("           B.PST_SKD_DIR_CD," ).append("\n"); 
		query.append("           (" ).append("\n"); 
		query.append("             SELECT PRD.COST_YR||LPAD(CEIL((TO_CHAR(S1.VPS_ETD_DT, 'DDD') + 7 - TO_CHAR(TO_DATE(PRD.SLS_TO_DT, 'YYYYMMDD'), 'DDD')) / 7), 2, '0')" ).append("\n"); 
		query.append("               FROM MAS_WK_PRD PRD" ).append("\n"); 
		query.append("              WHERE PRD.COST_YR = TO_CHAR(S1.VPS_ETD_DT, 'YYYY')" ).append("\n"); 
		query.append("                AND PRD.COST_WK = '01'" ).append("\n"); 
		query.append("           ) AS COST_YRWK," ).append("\n"); 
		query.append("           MAX(S1.CLPT_SEQ) OVER (PARTITION BY S1.VSL_CD||S1.SKD_VOY_NO||S1.SKD_DIR_CD||S1.YD_CD) AS MAX_SEQ," ).append("\n"); 
		query.append("           MIN(S1.CLPT_SEQ) OVER (PARTITION BY S1.VSL_CD||S1.SKD_VOY_NO||S1.SKD_DIR_CD||S1.YD_CD) AS MIN_SEQ," ).append("\n"); 
		query.append("           B.STS          " ).append("\n"); 
		query.append("      FROM MDM_LOCATION     LOC," ).append("\n"); 
		query.append("           VSK_VSL_PORT_SKD S1 ," ).append("\n"); 
		query.append("           VVD_BASE         B" ).append("\n"); 
		query.append("     WHERE LOC.LOC_CD = S1.VPS_PORT_CD" ).append("\n"); 
		query.append("       AND S1.VSL_CD  = B.VSL_CD" ).append("\n"); 
		query.append("       AND ((S1.SKD_VOY_NO, S1.SKD_DIR_CD) IN ((B.SKD_VOY_NO, B.SKD_DIR_CD), (B.PRE_SKD_VOY_NO, B.PRE_SKD_DIR_CD), (B.PST_SKD_VOY_NO, B.PST_SKD_DIR_CD)))" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", PORT_SEQ AS (" ).append("\n"); 
		query.append("    SELECT TP        ," ).append("\n"); 
		query.append("           VVD       ," ).append("\n"); 
		query.append("           BASE_VVD  ," ).append("\n"); 
		query.append("           RLANE_CD  ," ).append("\n"); 
		query.append("           VSL_CD    ," ).append("\n"); 
		query.append("           SKD_VOY_NO," ).append("\n"); 
		query.append("           SKD_DIR_CD," ).append("\n"); 
		query.append("           POL_CD," ).append("\n"); 
		query.append("           POD_CD," ).append("\n"); 
		query.append("           POL_SEQ  ," ).append("\n"); 
		query.append("           POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("           POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           POD_SEQ  ," ).append("\n"); 
		query.append("           POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("           POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           POL_CONTI," ).append("\n"); 
		query.append("           POD_CONTI," ).append("\n"); 
		query.append("           POL_YRWK ," ).append("\n"); 
		query.append("           POD_YRWK ,        " ).append("\n"); 
		query.append("		   -- [CHM-201114098] POL 기준으로 PAST 여부 판단" ).append("\n"); 
		query.append("           (SELECT " ).append("\n"); 
		query.append("                 (" ).append("\n"); 
		query.append("                   DECODE(S1.STS, '1', CASE WHEN VPS_ETD_DT < GLOBALDATE_PKG.TIME_CONV_FNC('GMT', SYS_EXTRACT_UTC(SYSTIMESTAMP), VPS_PORT_CD ) THEN 'Y'" ).append("\n"); 
		query.append("                                                                                                                                               ELSE 'N'" ).append("\n"); 
		query.append("                                       END, '2', 'N', '3', 'Y')" ).append("\n"); 
		query.append("                 )" ).append("\n"); 
		query.append("             FROM VSK_VSL_PORT_SKD" ).append("\n"); 
		query.append("             WHERE VSL_CD = S1.VSL_CD" ).append("\n"); 
		query.append("             AND SKD_VOY_NO = S1.SKD_VOY_NO" ).append("\n"); 
		query.append("             AND SKD_DIR_CD = S1.SKD_DIR_CD" ).append("\n"); 
		query.append("             AND CLPT_SEQ = S1.CLPT_SEQ ) AS PAST," ).append("\n"); 
		query.append("             POL_YD_SEQ," ).append("\n"); 
		query.append("             POD_YD_SEQ," ).append("\n"); 
		query.append("             PL_VPS_PORT_CD," ).append("\n"); 
		query.append("             PD_VPS_PORT_CD," ).append("\n"); 
		query.append("             PL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("             PD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("             MAX(POL_YD_SEQ) OVER (PARTITION BY VVD, POL_CD) AS MAX_POL_PORT_SEQ," ).append("\n"); 
		query.append("             MAX(POD_YD_SEQ) OVER (PARTITION BY VVD, POD_CD) AS MAX_POD_PORT_SEQ" ).append("\n"); 
		query.append("      FROM (" ).append("\n"); 
		query.append("            SELECT S1.TP        ," ).append("\n"); 
		query.append("                   S1.VVD       ," ).append("\n"); 
		query.append("                   S1.BASE_VVD  ," ).append("\n"); 
		query.append("                   S1.RLANE_CD  ," ).append("\n"); 
		query.append("                   S1.VSL_CD    ," ).append("\n"); 
		query.append("                   S1.SKD_VOY_NO," ).append("\n"); 
		query.append("                   S1.SKD_DIR_CD," ).append("\n"); 
		query.append("                   S1.CLPT_SEQ  ," ).append("\n"); 
		query.append("                   S1.STS       ," ).append("\n"); 
		query.append("                   NVL(S1.YD_CD, S1.VPS_PORT_CD) AS POL_CD," ).append("\n"); 
		query.append("                   NVL(S2.YD_CD, S2.VPS_PORT_CD) AS POD_CD," ).append("\n"); 
		query.append("                   S1.CLPT_SEQ   AS POL_SEQ  ," ).append("\n"); 
		query.append("                   S1.TURN_PORT_IND_CD," ).append("\n"); 
		query.append("                   S1.CLPT_IND_SEQ AS POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                   DECODE(S1.BASE_VVD, S1.TURN_VVD, S1.TURN_CLPT_IND_SEQ, S1.CLPT_IND_SEQ) AS POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("                   S2.CLPT_SEQ   AS POD_SEQ  ," ).append("\n"); 
		query.append("                   S2.TURN_PORT_IND_CD," ).append("\n"); 
		query.append("                   S2.CLPT_IND_SEQ AS POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                   DECODE(S2.BASE_VVD, S2.TURN_VVD, S2.TURN_CLPT_IND_SEQ, S2.CLPT_IND_SEQ) AS POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("                   S1.PORT_CONTI AS POL_CONTI," ).append("\n"); 
		query.append("                   S2.PORT_CONTI AS POD_CONTI," ).append("\n"); 
		query.append("                   S1.COST_YRWK  AS POL_YRWK ," ).append("\n"); 
		query.append("                   S2.COST_YRWK  AS POD_YRWK ," ).append("\n"); 
		query.append("                   S1.CALL_YD_IND_SEQ AS POL_YD_SEQ," ).append("\n"); 
		query.append("                   S2.CALL_YD_IND_SEQ AS POD_YD_SEQ," ).append("\n"); 
		query.append("                   S1.VPS_PORT_CD     AS PL_VPS_PORT_CD," ).append("\n"); 
		query.append("                   S2.VPS_PORT_CD     AS PD_VPS_PORT_CD," ).append("\n"); 
		query.append("                   S1.CLPT_IND_SEQ    AS PL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                   S2.CLPT_IND_SEQ    AS PD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("              FROM PORT_SKD S1," ).append("\n"); 
		query.append("                   PORT_SKD S2" ).append("\n"); 
		query.append("             WHERE S1.VSL_CD     = S2.VSL_CD" ).append("\n"); 
		query.append("               AND S1.SKD_VOY_NO = S2.SKD_VOY_NO" ).append("\n"); 
		query.append("               AND S1.SKD_DIR_CD = S2.SKD_DIR_CD" ).append("\n"); 
		query.append("               AND S1.CLPT_SEQ   < S2.CLPT_SEQ" ).append("\n"); 
		query.append("               AND S1.TURN_PORT_IND_CD IN ('Y', 'N')" ).append("\n"); 
		query.append("               AND S1.CNG_STS_CD <> 'S'" ).append("\n"); 
		query.append("               AND ( S1.CLPT_SEQ = DECODE(S1.PORT_CONTI, S2.PORT_CONTI, S1.MIN_SEQ, S1.MAX_SEQ) " ).append("\n"); 
		query.append("                  OR S2.CLPT_SEQ < S1.MAX_SEQ )" ).append("\n"); 
		query.append("               AND DECODE(S1.TP, 1, S2.TURN_VVD, 2, S1.VVD, 3, S1.TURN_VVD) = S1.BASE_VVD" ).append("\n"); 
		query.append("               AND S1.BASE_VVD = S2.BASE_VVD" ).append("\n"); 
		query.append("               AND S1.RLANE_CD = S2.RLANE_CD" ).append("\n"); 
		query.append("        )    S1       " ).append("\n"); 
		query.append("  ORDER BY BASE_VVD  ," ).append("\n"); 
		query.append("           RLANE_CD  ," ).append("\n"); 
		query.append("           TP     ," ).append("\n"); 
		query.append("           POL_SEQ," ).append("\n"); 
		query.append("           POD_SEQ" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", VVD_LD_PORT AS (" ).append("\n"); 
		query.append("    SELECT S1.BASE_VVD  ," ).append("\n"); 
		query.append("           S1.VSL_CD    ," ).append("\n"); 
		query.append("           S1.SKD_VOY_NO," ).append("\n"); 
		query.append("           S1.SKD_DIR_CD," ).append("\n"); 
		query.append("           SUBSTR(MAX(LTRIM(TO_CHAR(S1.POD_SEQ, 'FM000'))|| S1.POD_CD), 4) AS LD_PORT" ).append("\n"); 
		query.append("      FROM PORT_SEQ S1" ).append("\n"); 
		query.append("  GROUP BY S1.BASE_VVD  ," ).append("\n"); 
		query.append("           S1.VSL_CD    ," ).append("\n"); 
		query.append("           S1.SKD_VOY_NO," ).append("\n"); 
		query.append("           S1.SKD_DIR_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", COPY AS (" ).append("\n"); 
		query.append("    SELECT LEVEL SEQ" ).append("\n"); 
		query.append("      FROM DUAL" ).append("\n"); 
		query.append("CONNECT BY LEVEL <= 5" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", BKG_DATA_ALL AS (" ).append("\n"); 
		query.append("    SELECT 2 AS SRC       ," ).append("\n"); 
		query.append("           Z.BASE_VVD     ," ).append("\n"); 
		query.append("           Z.TP           ," ).append("\n"); 
		query.append("           Z.POL_CD       ," ).append("\n"); 
		query.append("           Z.POL_SEQ      ," ).append("\n"); 
		query.append("           Z.POL_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("           Z.POD_CD       ," ).append("\n"); 
		query.append("           Z.POD_SEQ      ," ).append("\n"); 
		query.append("           Z.POD_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("           Z.IOC_CD       ," ).append("\n"); 
		query.append("           Z.BKG_CGO_TP_CD," ).append("\n"); 
		query.append("           Z.QTY_TTL ," ).append("\n"); 
		query.append("           Z.QTY_HC_TTL," ).append("\n"); 
		query.append("           Z.QTY_45_TTL," ).append("\n"); 
		query.append("           Z.BKG_POL_NOD_CD," ).append("\n"); 
		query.append("           Z.BKG_POD_NOD_CD" ).append("\n"); 
		query.append("      FROM (" ).append("\n"); 
		query.append("            SELECT Z.BASE_VVD     ," ).append("\n"); 
		query.append("                   Z.TP           ," ).append("\n"); 
		query.append("                   Z.POL_CD       ," ).append("\n"); 
		query.append("                   Z.POL_SEQ      ," ).append("\n"); 
		query.append("                   Z.POL_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("                   Z.POD_CD       ," ).append("\n"); 
		query.append("                   Z.POD_SEQ      ," ).append("\n"); 
		query.append("                   Z.POD_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("                   Z.IOC_CD       ," ).append("\n"); 
		query.append("                   Z.BKG_CGO_TP_CD," ).append("\n"); 
		query.append("                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', SUBSTR(Z.VAL, 1, 14), SUBSTR(Z.VAL, 15)), 0))) AS QTY_TTL," ).append("\n"); 
		query.append("                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', DECODE(Z.VOID_FLG, 'Y',SUBSTR(Z.VAL_HC, 1, 14),0),0), 0))) AS QTY_HC_TTL, --20130807" ).append("\n"); 
		query.append("                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', DECODE(Z.VOID_FLG, 'Y',SUBSTR(Z.VAL_45, 1, 14),0),0), 0))) AS QTY_45_TTL, --20130807" ).append("\n"); 
		query.append("                   Z.BKG_POL_NOD_CD," ).append("\n"); 
		query.append("                   Z.BKG_POD_NOD_CD" ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("              FROM (" ).append("\n"); 
		query.append("                      SELECT B.TP    ," ).append("\n"); 
		query.append("                             B.BASE_VVD  ," ).append("\n"); 
		query.append("                             B.POL_CD," ).append("\n"); 
		query.append("                             B.POL_SEQ," ).append("\n"); 
		query.append("                             B.POL_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("                             B.POD_CD," ).append("\n"); 
		query.append("                             B.POD_SEQ," ).append("\n"); 
		query.append("                             B.POD_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("                             DECODE(BK.BKG_CGO_TP_CD, 'P', 'M', 'F') AS BKG_CGO_TP_CD," ).append("\n"); 
		query.append("                             DECODE(BV.VSL_PRE_PST_CD, 'T', DECODE(B.POL_CONTI, B.POD_CONTI, 2, 1), 3) AS IOC_CD," ).append("\n"); 
		query.append("                             (" ).append("\n"); 
		query.append("                               SELECT    TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', 1, 2) * Q.OP_CNTR_QTY), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                      || TO_CHAR((MAX(D.ACT_WGT) * DECODE(MAX(D.WGT_UT_CD), 'LBS', 0.00045, 0.001)) + SUM(Q.OP_CNTR_QTY * ( SELECT TS.CNTR_TPSZ_TARE_WGT" ).append("\n"); 
		query.append("                                                                                                                                              FROM MDM_CNTR_TP_SZ TS" ).append("\n"); 
		query.append("                                                                                                                                             WHERE TS.CNTR_TPSZ_CD = Q.CNTR_TPSZ_CD)) * 0.001, 'FM0000000000.000')" ).append("\n"); 
		query.append("                                 FROM BKG_QUANTITY Q" ).append("\n"); 
		query.append("                                WHERE BK.BKG_NO     = Q.BKG_NO" ).append("\n"); 
		query.append("                                  AND Q.OP_CNTR_QTY > 0" ).append("\n"); 
		query.append("                            ) AS VAL," ).append("\n"); 
		query.append("                            P.QTY_TP,                  " ).append("\n"); 
		query.append("                            (" ).append("\n"); 
		query.append("                               SELECT TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD),'5',Q.OP_CNTR_QTY,'8',Q.OP_CNTR_QTY,'9',Q.OP_CNTR_QTY,0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                 FROM BKG_QUANTITY Q" ).append("\n"); 
		query.append("                                WHERE BK.BKG_NO     = Q.BKG_NO" ).append("\n"); 
		query.append("                                  AND Q.OP_CNTR_QTY > 0" ).append("\n"); 
		query.append("                                  AND SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD) IN ('5','8','9')" ).append("\n"); 
		query.append("                            ) AS VAL_HC, --20130807" ).append("\n"); 
		query.append("                            (" ).append("\n"); 
		query.append("                               SELECT TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD),'7',Q.OP_CNTR_QTY,0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                 FROM BKG_QUANTITY Q" ).append("\n"); 
		query.append("                                WHERE BK.BKG_NO     = Q.BKG_NO" ).append("\n"); 
		query.append("                                  AND Q.OP_CNTR_QTY > 0" ).append("\n"); 
		query.append("                                  AND SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD) = '7'" ).append("\n"); 
		query.append("                            ) AS VAL_45, --20130807                            " ).append("\n"); 
		query.append("                            P.VOID_FLG,    --20130807" ).append("\n"); 
		query.append("                            BK.POL_NOD_CD AS BKG_POL_NOD_CD," ).append("\n"); 
		query.append("                            BK.POD_NOD_CD AS BKG_POD_NOD_CD" ).append("\n"); 
		query.append("                       FROM BKG_BOOKING BK," ).append("\n"); 
		query.append("                            BKG_VVD     BV," ).append("\n"); 
		query.append("                            PORT_SEQ    B ," ).append("\n"); 
		query.append("                            PARAMS      P ," ).append("\n"); 
		query.append("                            VVD_LD_PORT LD," ).append("\n"); 
		query.append("                            BKG_BL_DOC  D" ).append("\n"); 
		query.append("                      WHERE BV.VSL_CD     = B.VSL_CD" ).append("\n"); 
		query.append("                        AND BV.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                        AND BV.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("                        AND BV.VSL_CD     = LD.VSL_CD" ).append("\n"); 
		query.append("                        AND BV.SKD_VOY_NO = LD.SKD_VOY_NO" ).append("\n"); 
		query.append("                        AND BV.SKD_DIR_CD = LD.SKD_DIR_CD" ).append("\n"); 
		query.append("                        AND B.BASE_VVD    = LD.BASE_VVD" ).append("\n"); 
		query.append("                        AND B.BASE_VVD    = P.VSL_CD||P.SKD_VOY_NO||P.SKD_DIR_CD" ).append("\n"); 
		query.append("                        AND ((BV.POL_CD = B.PL_VPS_PORT_CD AND BV.POL_CLPT_IND_SEQ = B.PL_CLPT_IND_SEQ) OR (BV.POL_YD_CD = B.POL_CD AND BV.POL_CLPT_IND_SEQ > 1 AND B.MAX_POL_PORT_SEQ = 1))" ).append("\n"); 
		query.append("                        AND ((BV.POD_CD = B.PD_VPS_PORT_CD AND BV.POD_CLPT_IND_SEQ = B.PD_CLPT_IND_SEQ) OR (BV.POD_YD_CD = B.POD_CD AND BV.POD_CLPT_IND_SEQ > 1 AND B.MAX_POD_PORT_SEQ = 1))" ).append("\n"); 
		query.append("                        AND BK.BKG_NO      = BV.BKG_NO" ).append("\n"); 
		query.append("                        AND BK.BKG_STS_CD IN ('F', 'W')" ).append("\n"); 
		query.append("                        AND BK.BKG_NO      = D.BKG_NO" ).append("\n"); 
		query.append("                   ) Z" ).append("\n"); 
		query.append("          GROUP BY Z.TP    ," ).append("\n"); 
		query.append("                   Z.BASE_VVD     ," ).append("\n"); 
		query.append("                   Z.POL_CD       ," ).append("\n"); 
		query.append("                   Z.POL_SEQ      ," ).append("\n"); 
		query.append("                   Z.POL_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("                   Z.POD_CD       ," ).append("\n"); 
		query.append("                   Z.POD_SEQ      ," ).append("\n"); 
		query.append("                   Z.POD_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("                   Z.IOC_CD," ).append("\n"); 
		query.append("                   Z.BKG_CGO_TP_CD," ).append("\n"); 
		query.append("                   Z.BKG_POL_NOD_CD," ).append("\n"); 
		query.append("                   Z.BKG_POD_NOD_CD" ).append("\n"); 
		query.append("        ) Z                  " ).append("\n"); 
		query.append("  ORDER BY Z.TP    ," ).append("\n"); 
		query.append("           Z.BASE_VVD     ," ).append("\n"); 
		query.append("           Z.POL_CD," ).append("\n"); 
		query.append("           Z.POL_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("           Z.POD_CD       ," ).append("\n"); 
		query.append("           Z.POD_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("           Z.IOC_CD," ).append("\n"); 
		query.append("           Z.BKG_CGO_TP_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(",BKG_DATA AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("    SELECT 2  AS SRC          ," ).append("\n"); 
		query.append("           BASE_VVD     ," ).append("\n"); 
		query.append("           TP           ," ).append("\n"); 
		query.append("           POL_CD       ," ).append("\n"); 
		query.append("           POL_SEQ      ," ).append("\n"); 
		query.append("           POL_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("           POD_CD       ," ).append("\n"); 
		query.append("           POD_SEQ      ," ).append("\n"); 
		query.append("           POD_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("           IOC_CD       ," ).append("\n"); 
		query.append("           BKG_CGO_TP_CD," ).append("\n"); 
		query.append("           SUM(QTY_TTL)    AS QTY_TTL ," ).append("\n"); 
		query.append("           SUM(QTY_HC_TTL) AS QTY_HC_TTL," ).append("\n"); 
		query.append("           SUM(QTY_45_TTL) AS QTY_45_TTL " ).append("\n"); 
		query.append("      FROM BKG_DATA_ALL" ).append("\n"); 
		query.append("     GROUP BY BASE_VVD     ," ).append("\n"); 
		query.append("           TP           ," ).append("\n"); 
		query.append("           POL_CD       ," ).append("\n"); 
		query.append("           POL_SEQ      ," ).append("\n"); 
		query.append("           POL_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("           POD_CD       ," ).append("\n"); 
		query.append("           POD_SEQ      ," ).append("\n"); 
		query.append("           POD_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("           IOC_CD       ," ).append("\n"); 
		query.append("           BKG_CGO_TP_CD" ).append("\n"); 
		query.append(")    " ).append("\n"); 
		query.append(", ALC_DATA AS (" ).append("\n"); 
		query.append("    SELECT 1 AS SRC," ).append("\n"); 
		query.append("           B.BASE_VVD ," ).append("\n"); 
		query.append("           B.TP    ," ).append("\n"); 
		query.append("           B.POL_CD," ).append("\n"); 
		query.append("           B.POL_SEQ," ).append("\n"); 
		query.append("           B.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("           B.POD_CD," ).append("\n"); 
		query.append("           B.POD_SEQ," ).append("\n"); 
		query.append("           B.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("           DECODE(M.TS_FLG, 'Y', 3, DECODE(M.IOC_CD, 'I', 2, 'O', 1, 5)) AS IOC_CD ," ).append("\n"); 
		query.append("           SUM(DECODE(P.QTY_TP, '1', M.ASGN_TTL_QTY, M.ASGN_TTL_WGT))    AS QTY_TTL" ).append("\n"); 
		query.append("      FROM SPC_ALOC_POL_POD M," ).append("\n"); 
		query.append("           PORT_SEQ         B," ).append("\n"); 
		query.append("           PARAMS           P" ).append("\n"); 
		query.append("     WHERE M.VSL_CD     = B.VSL_CD" ).append("\n"); 
		query.append("       AND M.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("       AND M.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("       AND M.POL_YD_CD = B.POL_CD" ).append("\n"); 
		query.append("       AND M.POD_YD_CD = B.POD_CD" ).append("\n"); 
		query.append("       AND M.POL_YD_IND_SEQ = B.POL_YD_SEQ" ).append("\n"); 
		query.append("       AND M.POD_YD_IND_SEQ = B.POD_YD_SEQ" ).append("\n"); 
		query.append("       AND M.RLANE_CD   LIKE DECODE(SUBSTR(P.RLANE_CD, 1, 3), 'PSG', 'PSG', P.RLANE_CD)||'%'	-- R.Lane 조건 추가" ).append("\n"); 
		query.append("       AND (M.TS_FLG = 'N' OR M.SLS_RHQ_CD = 'SHARC' OR M.SLS_RHQ_CD = 'SINRS' OR M.SLS_RGN_OFC_CD IS NULL)" ).append("\n"); 
		query.append("       AND B.BASE_VVD = P.VSL_CD||P.SKD_VOY_NO||P.SKD_DIR_CD" ).append("\n"); 
		query.append("  GROUP BY B.TP    ," ).append("\n"); 
		query.append("           B.BASE_VVD ," ).append("\n"); 
		query.append("           B.POL_CD," ).append("\n"); 
		query.append("           B.POL_SEQ," ).append("\n"); 
		query.append("           B.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("           B.POD_CD," ).append("\n"); 
		query.append("           B.POD_SEQ," ).append("\n"); 
		query.append("           B.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("           DECODE(M.TS_FLG, 'Y', 3, DECODE(M.IOC_CD, 'I', 2, 'O', 1, 5))" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", MT_DATA AS (" ).append("\n"); 
		query.append("    SELECT T.SEQ SRC," ).append("\n"); 
		query.append("           Z.BASE_VVD ," ).append("\n"); 
		query.append("           Z.TP     ," ).append("\n"); 
		query.append("           Z.POL_CD," ).append("\n"); 
		query.append("           Z.POL_SEQ," ).append("\n"); 
		query.append("           Z.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("           Z.POD_CD," ).append("\n"); 
		query.append("           Z.POD_SEQ," ).append("\n"); 
		query.append("           Z.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("           Z.IOC_CD ," ).append("\n"); 
		query.append("           SUM(Z.QTY_TTL) AS QTY_TTL," ).append("\n"); 
		query.append("           SUM(Z.QTY_HC_TTL) AS QTY_HC_TTL," ).append("\n"); 
		query.append("           SUM(Z.QTY_45_TTL) AS QTY_45_TTL" ).append("\n"); 
		query.append("      FROM (" ).append("\n"); 
		query.append("              SELECT TP         ," ).append("\n"); 
		query.append("                     BASE_VVD ," ).append("\n"); 
		query.append("                     POL_CD     ," ).append("\n"); 
		query.append("                     POL_SEQ    ," ).append("\n"); 
		query.append("                     POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     POD_CD     ," ).append("\n"); 
		query.append("                     POD_SEQ    ," ).append("\n"); 
		query.append("                     POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     4 AS IOC_CD," ).append("\n"); 
		query.append("                     QTY_TTL," ).append("\n"); 
		query.append("                     QTY_HC_TTL," ).append("\n"); 
		query.append("                     QTY_45_TTL" ).append("\n"); 
		query.append("                FROM BKG_DATA" ).append("\n"); 
		query.append("               WHERE BKG_CGO_TP_CD = 'M'" ).append("\n"); 
		query.append("           ) Z," ).append("\n"); 
		query.append("           COPY T" ).append("\n"); 
		query.append("     WHERE T.SEQ <= 2" ).append("\n"); 
		query.append("  GROUP BY T.SEQ   ," ).append("\n"); 
		query.append("           Z.BASE_VVD ," ).append("\n"); 
		query.append("           Z.TP    ," ).append("\n"); 
		query.append("           Z.POL_CD," ).append("\n"); 
		query.append("           Z.POL_SEQ," ).append("\n"); 
		query.append("           Z.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("           Z.POD_CD," ).append("\n"); 
		query.append("           Z.POD_SEQ," ).append("\n"); 
		query.append("           Z.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("           Z.IOC_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", ALL_DATA AS (" ).append("\n"); 
		query.append("    SELECT 1 AS SRC," ).append("\n"); 
		query.append("           Z.BASE_VVD ," ).append("\n"); 
		query.append("           Z.TP    ," ).append("\n"); 
		query.append("           Z.POL_CD," ).append("\n"); 
		query.append("           Z.POL_SEQ," ).append("\n"); 
		query.append("           P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.POD_CD," ).append("\n"); 
		query.append("           Z.POD_SEQ," ).append("\n"); 
		query.append("           P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.IOC_CD," ).append("\n"); 
		query.append("           --SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_TTL), DECODE(Z.SRC, 1, Z.QTY_TTL))) AS QTY_TTL" ).append("\n"); 
		query.append("           -- 이미 지난경우는 BKG물량 사용, 나머지의 경우 OCEAN이고 이전항차와 겹치면 BKG물량, 나머지의 경우 ALLOCATION 물량" ).append("\n"); 
		query.append("           (" ).append("\n"); 
		query.append("             CASE" ).append("\n"); 
		query.append("                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량" ).append("\n"); 
		query.append("                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_TTL, 0))))" ).append("\n"); 
		query.append("                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_TTL), DECODE(Z.SRC, 1, Z.QTY_TTL)))" ).append("\n"); 
		query.append("              END" ).append("\n"); 
		query.append("           ) AS QTY_TTL," ).append("\n"); 
		query.append("           (" ).append("\n"); 
		query.append("             CASE" ).append("\n"); 
		query.append("                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량" ).append("\n"); 
		query.append("                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_HC_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_HC_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_HC_TTL, 0))))" ).append("\n"); 
		query.append("                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_HC_TTL), DECODE(Z.SRC, 1, Z.QTY_HC_TTL)))" ).append("\n"); 
		query.append("              END" ).append("\n"); 
		query.append("           ) AS QTY_HC_TTL," ).append("\n"); 
		query.append("           (" ).append("\n"); 
		query.append("             CASE" ).append("\n"); 
		query.append("                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량" ).append("\n"); 
		query.append("                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_45_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_45_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_45_TTL, 0))))" ).append("\n"); 
		query.append("                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_45_TTL), DECODE(Z.SRC, 1, Z.QTY_45_TTL)))" ).append("\n"); 
		query.append("              END" ).append("\n"); 
		query.append("           ) AS QTY_45_TTL,           " ).append("\n"); 
		query.append("           MAX(P.PAST) AS PAST" ).append("\n"); 
		query.append("      FROM (" ).append("\n"); 
		query.append("              SELECT SRC   ," ).append("\n"); 
		query.append("                     BASE_VVD ," ).append("\n"); 
		query.append("                     TP    ," ).append("\n"); 
		query.append("                     POL_CD," ).append("\n"); 
		query.append("                     POL_SEQ," ).append("\n"); 
		query.append("                     POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     POD_CD ," ).append("\n"); 
		query.append("                     POD_SEQ," ).append("\n"); 
		query.append("                     POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     IOC_CD," ).append("\n"); 
		query.append("                     QTY_TTL," ).append("\n"); 
		query.append("                     0 AS QTY_HC_TTL," ).append("\n"); 
		query.append("                     0 AS QTY_45_TTL" ).append("\n"); 
		query.append("                FROM ALC_DATA" ).append("\n"); 
		query.append("              UNION ALL" ).append("\n"); 
		query.append("              SELECT SRC   ," ).append("\n"); 
		query.append("                     BASE_VVD ," ).append("\n"); 
		query.append("                     TP    ," ).append("\n"); 
		query.append("                     POL_CD," ).append("\n"); 
		query.append("                     POL_SEQ," ).append("\n"); 
		query.append("                     POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     POD_CD ," ).append("\n"); 
		query.append("                     POD_SEQ," ).append("\n"); 
		query.append("                     POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     IOC_CD," ).append("\n"); 
		query.append("                     QTY_TTL," ).append("\n"); 
		query.append("                     QTY_HC_TTL AS QTY_HC_TTL," ).append("\n"); 
		query.append("                     QTY_45_TTL AS QTY_45_TTL" ).append("\n"); 
		query.append("                FROM BKG_DATA" ).append("\n"); 
		query.append("               WHERE BKG_CGO_TP_CD = 'F'" ).append("\n"); 
		query.append("           ) Z," ).append("\n"); 
		query.append("           PORT_SEQ P" ).append("\n"); 
		query.append("     WHERE P.TP       = Z.TP" ).append("\n"); 
		query.append("       AND P.POL_CD   = Z.POL_CD" ).append("\n"); 
		query.append("       AND P.BASE_VVD = Z.BASE_VVD" ).append("\n"); 
		query.append("       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("       AND P.POD_CD = Z.POD_CD" ).append("\n"); 
		query.append("       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("  GROUP BY Z.TP    ," ).append("\n"); 
		query.append("           Z.BASE_VVD," ).append("\n"); 
		query.append("           Z.POL_CD," ).append("\n"); 
		query.append("           Z.POL_SEQ," ).append("\n"); 
		query.append("           P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.POD_CD," ).append("\n"); 
		query.append("           Z.POD_SEQ," ).append("\n"); 
		query.append("           P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.IOC_CD" ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    SELECT Z.SRC   ," ).append("\n"); 
		query.append("           Z.BASE_VVD," ).append("\n"); 
		query.append("           Z.TP    ," ).append("\n"); 
		query.append("           Z.POL_CD," ).append("\n"); 
		query.append("           Z.POL_SEQ," ).append("\n"); 
		query.append("           P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.POD_CD," ).append("\n"); 
		query.append("           Z.POD_SEQ," ).append("\n"); 
		query.append("           P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.IOC_CD," ).append("\n"); 
		query.append("           SUM(Z.QTY_TTL) AS QTY_TTL," ).append("\n"); 
		query.append("           SUM(Z.QTY_HC_TTL) AS QTY_HC_TTL," ).append("\n"); 
		query.append("           SUM(Z.QTY_45_TTL) AS QTY_45_TTL," ).append("\n"); 
		query.append("           MAX(P.PAST) AS PAST" ).append("\n"); 
		query.append("      FROM BKG_DATA Z," ).append("\n"); 
		query.append("           PORT_SEQ P" ).append("\n"); 
		query.append("     WHERE Z.BKG_CGO_TP_CD = 'F'" ).append("\n"); 
		query.append("       AND P.BASE_VVD = Z.BASE_VVD" ).append("\n"); 
		query.append("       AND P.TP       = Z.TP" ).append("\n"); 
		query.append("       AND P.POL_CD   = Z.POL_CD" ).append("\n"); 
		query.append("       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("       AND P.POD_CD = Z.POD_CD" ).append("\n"); 
		query.append("       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("  GROUP BY Z.SRC   ," ).append("\n"); 
		query.append("           Z.BASE_VVD," ).append("\n"); 
		query.append("           Z.TP    ," ).append("\n"); 
		query.append("           Z.POL_CD," ).append("\n"); 
		query.append("           Z.POL_SEQ," ).append("\n"); 
		query.append("           P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.POD_CD," ).append("\n"); 
		query.append("           Z.POD_SEQ," ).append("\n"); 
		query.append("           P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.IOC_CD" ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    SELECT Z.SRC    ," ).append("\n"); 
		query.append("           Z.BASE_VVD," ).append("\n"); 
		query.append("           Z.TP     ," ).append("\n"); 
		query.append("           Z.POL_CD," ).append("\n"); 
		query.append("           Z.POL_SEQ," ).append("\n"); 
		query.append("           P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.POD_CD," ).append("\n"); 
		query.append("           Z.POD_SEQ," ).append("\n"); 
		query.append("           P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.IOC_CD ," ).append("\n"); 
		query.append("           SUM(Z.QTY_TTL) AS QTY_TTL ," ).append("\n"); 
		query.append("           SUM(Z.QTY_HC_TTL) AS QTY_HC_TTL ," ).append("\n"); 
		query.append("           SUM(Z.QTY_45_TTL) AS QTY_45_TTL ," ).append("\n"); 
		query.append("           MAX(P.PAST) AS PAST" ).append("\n"); 
		query.append("      FROM MT_DATA Z," ).append("\n"); 
		query.append("           PORT_SEQ P" ).append("\n"); 
		query.append("     WHERE P.TP       = Z.TP" ).append("\n"); 
		query.append("       AND P.POL_CD   = Z.POL_CD" ).append("\n"); 
		query.append("       AND P.BASE_VVD = Z.BASE_VVD" ).append("\n"); 
		query.append("       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("       AND P.POD_CD   = Z.POD_CD" ).append("\n"); 
		query.append("       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("  GROUP BY Z.SRC   ," ).append("\n"); 
		query.append("           Z.BASE_VVD," ).append("\n"); 
		query.append("           Z.TP    ," ).append("\n"); 
		query.append("           Z.POL_CD," ).append("\n"); 
		query.append("           Z.POL_SEQ," ).append("\n"); 
		query.append("           P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.POD_CD," ).append("\n"); 
		query.append("           Z.POD_SEQ," ).append("\n"); 
		query.append("           P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("           Z.IOC_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", PORT_MAP AS (" ).append("\n"); 
		query.append("    SELECT DISTINCT" ).append("\n"); 
		query.append("           P.BASE_VVD," ).append("\n"); 
		query.append("           C1.SEQ AS SRC   ," ).append("\n"); 
		query.append("           C2.SEQ AS IOC_SEQ," ).append("\n"); 
		query.append("           C2.SEQ AS IOC_CD," ).append("\n"); 
		query.append("           P.PORT_CD ," ).append("\n"); 
		query.append("           P.YD_CD   ," ).append("\n"); 
		query.append("           P.CLPT_SEQ," ).append("\n"); 
		query.append("           P.CLPT_IND_SEQ," ).append("\n"); 
		query.append("           --P.FLG     ," ).append("\n"); 
		query.append("           --P.PAST    ," ).append("\n"); 
		query.append("           P.BSA" ).append("\n"); 
		query.append("      FROM CUR_PORTS P ," ).append("\n"); 
		query.append("           COPY      C1," ).append("\n"); 
		query.append("           COPY      C2" ).append("\n"); 
		query.append("     WHERE C1.SEQ <= 2" ).append("\n"); 
		query.append("       AND C2.SEQ <= 5" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", POD_PORT_MAP AS (" ).append("\n"); 
		query.append("    SELECT DISTINCT " ).append("\n"); 
		query.append("           P.BASE_VVD,           " ).append("\n"); 
		query.append("           P.YD_CD    AS POD_CD," ).append("\n"); 
		query.append("           P.CLPT_SEQ AS POD_SEQ," ).append("\n"); 
		query.append("           P.BSA" ).append("\n"); 
		query.append("      FROM CUR_PORTS P" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", POL_POD_PORT_SEQ AS (" ).append("\n"); 
		query.append("SELECT BASE_VVD, " ).append("\n"); 
		query.append("       DECODE(SRC, 1, 'A', 2, 'B', 3, 'F', 4, 'M') AS SRC,   " ).append("\n"); 
		query.append("       IOC_CD," ).append("\n"); 
		query.append("       POL_CD ," ).append("\n"); 
		query.append("       POL_SEQ," ).append("\n"); 
		query.append("       DECODE(IOC_CD,'TOTAL',POD_CD,NVL(POD_CD,'TTL')) AS POD_CD," ).append("\n"); 
		query.append("       POD_SEQ," ).append("\n"); 
		query.append("       BSA," ).append("\n"); 
		query.append("       IOC_SEQ," ).append("\n"); 
		query.append("       N1ST_LODG_PORT_ETD_DT" ).append("\n"); 
		query.append("  FROM (" ).append("\n"); 
		query.append("        SELECT BASE_VVD," ).append("\n"); 
		query.append("               SRC,    " ).append("\n"); 
		query.append("               IOC_CD," ).append("\n"); 
		query.append("               POL_CD ," ).append("\n"); 
		query.append("               POL_SEQ," ).append("\n"); 
		query.append("               POD_CD," ).append("\n"); 
		query.append("               POD_SEQ," ).append("\n"); 
		query.append("               BSA," ).append("\n"); 
		query.append("               IOC_SEQ" ).append("\n"); 
		query.append("          FROM (" ).append("\n"); 
		query.append("                SELECT DISTINCT" ).append("\n"); 
		query.append("                       POL.BASE_VVD, " ).append("\n"); 
		query.append("                       POL.SRC,   " ).append("\n"); 
		query.append("                       DECODE(POL.IOC_CD, 1, 'OCN', 2, 'IPC', 3, 'T/S', 4, 'MT', 5, 'TOTAL') AS IOC_CD," ).append("\n"); 
		query.append("                       POL.YD_CD    AS POL_CD ," ).append("\n"); 
		query.append("                       POL.CLPT_SEQ AS POL_SEQ," ).append("\n"); 
		query.append("                       DECODE(POL.IOC_SEQ,5,'',POD.POD_CD) AS POD_CD," ).append("\n"); 
		query.append("                       DECODE(POL.IOC_SEQ,5,30,POD.POD_SEQ) AS POD_SEQ," ).append("\n"); 
		query.append("                       POL.BSA," ).append("\n"); 
		query.append("                       POL.IOC_SEQ" ).append("\n"); 
		query.append("                  FROM PORT_MAP     POL ," ).append("\n"); 
		query.append("                       POD_PORT_MAP POD" ).append("\n"); 
		query.append("                 WHERE POL.BASE_VVD  = POD.BASE_VVD" ).append("\n"); 
		query.append("                   AND POL.CLPT_SEQ  < POD.POD_SEQ   " ).append("\n"); 
		query.append("                ) " ).append("\n"); 
		query.append("         GROUP BY GROUPING SETS ( " ).append("\n"); 
		query.append("                                 (BASE_VVD, SRC, IOC_CD, POL_CD, POL_SEQ, POD_CD, POD_SEQ, BSA,IOC_SEQ)," ).append("\n"); 
		query.append("                                 (BASE_VVD, SRC, IOC_CD, POL_CD, POL_SEQ, BSA,IOC_SEQ)" ).append("\n"); 
		query.append("                                ) " ).append("\n"); 
		query.append("       ) A, PARAMS      P " ).append("\n"); 
		query.append(" WHERE NOT(IOC_SEQ = 5 AND POD_SEQ IS NULL)" ).append("\n"); 
		query.append("   AND A.BASE_VVD = P.VSL_CD||P.SKD_VOY_NO||P.SKD_DIR_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", PORT_CM AS (" ).append("\n"); 
		query.append("            SELECT Z.BASE_VVD," ).append("\n"); 
		query.append("                   Z.BKG_POL_NOD_CD," ).append("\n"); 
		query.append("                   Z.BKG_POD_NOD_CD," ).append("\n"); 
		query.append("                   DECODE(Z.IOC_CD, 1, 'OCN', 2, 'IPC', 3, 'T/S', 4, 'MT', 5, 'TOTAL') AS IOC_CD," ).append("\n"); 
		query.append("                   SUM(Z.CM_QTY) AS CM_QTY ," ).append("\n"); 
		query.append("                   SUM(Z.CM_COST) AS CM_COST," ).append("\n"); 
		query.append("                   ROUND(SUM(Z.CM_COST)  / SUM(Z.CM_QTY)) AS AVG_CM" ).append("\n"); 
		query.append("              FROM (" ).append("\n"); 
		query.append("                      SELECT B.TP    ," ).append("\n"); 
		query.append("                             B.BASE_VVD  ," ).append("\n"); 
		query.append("                             B.POL_CD," ).append("\n"); 
		query.append("                             B.POL_SEQ," ).append("\n"); 
		query.append("                             B.POL_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("                             B.POD_CD," ).append("\n"); 
		query.append("                             B.POD_SEQ," ).append("\n"); 
		query.append("                             B.POD_CLPT_IND_SEQ, " ).append("\n"); 
		query.append("                             DECODE(BK.BKG_CGO_TP_CD, 'P', 'M', 'F') AS BKG_CGO_TP_CD," ).append("\n"); 
		query.append("                             DECODE(BV.VSL_PRE_PST_CD, 'T', DECODE(B.POL_CONTI, B.POD_CONTI, 2, 1), 3) AS IOC_CD," ).append("\n"); 
		query.append("                            P.VOID_FLG," ).append("\n"); 
		query.append("                            (" ).append("\n"); 
		query.append("                             SELECT SUM(DECODE(BK.BKG_CGO_TP_CD,'P',0,DECODE(BK.BKG_STS_CD,'F',DECODE(SUBSTR(Q.CNTR_TPSZ_CD, 2, 1), '2', 1, 2) * Q.OP_CNTR_QTY,0)))" ).append("\n"); 
		query.append("                               FROM BKG_QUANTITY Q" ).append("\n"); 
		query.append("                              WHERE BK.BKG_NO  = Q.BKG_NO" ).append("\n"); 
		query.append("                            ) AS CM_QTY," ).append("\n"); 
		query.append("                            (" ).append("\n"); 
		query.append("                             SELECT --SUM(NVL(Q.BKG_REV,0) + NVL(Q.BKG_OFT_REV,0) + NVL(Q.BKG_MISC_REV,0) + NVL(Q.SCR_CHG_REV,0)) - NVL(SUM(Q.RA_CM_COST_AMT),0)" ).append("\n"); 
		query.append("									SUM(NVL(Q.BKG_REV,0) + NVL(Q.BKG_OFT_REV,0) + NVL(Q.BKG_MISC_REV,0) + NVL(Q.SCR_CHG_REV,0) + NVL(Q.DMDT_COM_AMT, 0)) - NVL(SUM(Q.RA_CM_COST_TTL_AMT),0)" ).append("\n"); 
		query.append("                               FROM MAS_BKG_EXPN_DTL Q --MAS_BKG_REV_DTL Q" ).append("\n"); 
		query.append("                              WHERE BK.BKG_NO = Q.BKG_NO" ).append("\n"); 
		query.append("                            ) AS CM_COST," ).append("\n"); 
		query.append("                            BV.POL_YD_CD AS BKG_POL_NOD_CD," ).append("\n"); 
		query.append("                            BV.POD_YD_CD AS BKG_POD_NOD_CD" ).append("\n"); 
		query.append("                       FROM BKG_BOOKING BK," ).append("\n"); 
		query.append("                            BKG_VVD     BV," ).append("\n"); 
		query.append("                            PORT_SEQ    B ," ).append("\n"); 
		query.append("                            PARAMS      P ," ).append("\n"); 
		query.append("                            VVD_LD_PORT LD," ).append("\n"); 
		query.append("                            BKG_BL_DOC  D" ).append("\n"); 
		query.append("                      WHERE BV.VSL_CD     = B.VSL_CD" ).append("\n"); 
		query.append("                        AND BV.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                        AND BV.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("                        AND BV.VSL_CD     = LD.VSL_CD" ).append("\n"); 
		query.append("                        AND BV.SKD_VOY_NO = LD.SKD_VOY_NO" ).append("\n"); 
		query.append("                        AND BV.SKD_DIR_CD = LD.SKD_DIR_CD" ).append("\n"); 
		query.append("                        AND B.BASE_VVD    = LD.BASE_VVD" ).append("\n"); 
		query.append("                        AND BV.POL_YD_CD  = B.POL_CD" ).append("\n"); 
		query.append("                        AND BV.POL_CLPT_IND_SEQ  = B.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                        AND DECODE(BV.POD_CD, 'XXXXX', LD.LD_PORT, BV.POD_YD_CD) = B.POD_CD" ).append("\n"); 
		query.append("                        AND BV.POD_CLPT_IND_SEQ  = B.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                        AND BK.BKG_NO      = BV.BKG_NO" ).append("\n"); 
		query.append("                        AND BK.BKG_STS_CD     = 'F'" ).append("\n"); 
		query.append("                        AND BK.BKG_CGO_TP_CD <> 'P'" ).append("\n"); 
		query.append("                        AND BV.VSL_PRE_PST_CD = 'T' " ).append("\n"); 
		query.append("                        AND BK.BKG_NO      = D.BKG_NO" ).append("\n"); 
		query.append("                        AND B.BASE_VVD = P.VSL_CD||P.SKD_VOY_NO||P.SKD_DIR_CD" ).append("\n"); 
		query.append("                   ) Z" ).append("\n"); 
		query.append("             HAVING SUM(Z.CM_QTY) > 0" ).append("\n"); 
		query.append("             GROUP BY Z.BASE_VVD,Z.BKG_POL_NOD_CD,Z.BKG_POD_NOD_CD,DECODE(Z.IOC_CD, 1, 'OCN', 2, 'IPC', 3, 'T/S', 4, 'MT', 5, 'TOTAL')" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("   -- 'A' : Alloc + BKG, 'B' : BKG, 'F' : F'cast + BKG, 'M' : Alloc" ).append("\n"); 
		query.append("SELECT VP.BASE_VVD," ).append("\n"); 
		query.append("       VP.SRC," ).append("\n"); 
		query.append("--       VP.IOC_SEQ," ).append("\n"); 
		query.append("       VP.IOC_CD," ).append("\n"); 
		query.append("       VP.PORT_CD," ).append("\n"); 
		query.append("       VP.PORT_SEQ," ).append("\n"); 
		query.append("       NVL(VP.POD_CD,'TOTAL') AS POD_CD," ).append("\n"); 
		query.append("       VP.POD_SEQ," ).append("\n"); 
		query.append("       VP.LOD_TTL ," ).append("\n"); 
		query.append("       VP.AVG_CMPB," ).append("\n"); 
		query.append("       VP.DIS_TTL ," ).append("\n"); 
		query.append("       VP.ON_TTL ," ).append("\n"); 
		query.append("       VP.LOAD_CAPA," ).append("\n"); 
		query.append("       VP.BSA," ).append("\n"); 
		query.append("       VP.UTIL_RATIO," ).append("\n"); 
		query.append("       VP.PAST  " ).append("\n"); 
		query.append("  FROM (" ).append("\n"); 
		query.append("SELECT P.BASE_VVD," ).append("\n"); 
		query.append("       P.SRC," ).append("\n"); 
		query.append("       P.IOC_SEQ," ).append("\n"); 
		query.append("       P.IOC_CD," ).append("\n"); 
		query.append("       P.POL_CD  AS PORT_CD," ).append("\n"); 
		query.append("       P.POL_SEQ AS PORT_SEQ," ).append("\n"); 
		query.append("       P.POD_CD," ).append("\n"); 
		query.append("       P.POD_SEQ," ).append("\n"); 
		query.append("       Z.LOD_TTL ," ).append("\n"); 
		query.append("       Z.AVG_CMPB," ).append("\n"); 
		query.append("       Z.DIS_TTL ," ).append("\n"); 
		query.append("       Z.ON_TTL ," ).append("\n"); 
		query.append("       Z.LOAD_CAPA," ).append("\n"); 
		query.append("       P.BSA," ).append("\n"); 
		query.append("       CASE WHEN P.IOC_CD = 'TOTAL' THEN" ).append("\n"); 
		query.append("                 ROUND(DECODE(NVL(P.BSA,0),0,0,(Z.ON_TTL/P.BSA) * 100))" ).append("\n"); 
		query.append("            ELSE" ).append("\n"); 
		query.append("                 CASE WHEN P.POD_CD = 'TTL' THEN" ).append("\n"); 
		query.append("                      ROUND(DECODE(NVL(Z.UTIL_BSA,0),0,0,(Z.ON_TTL/Z.UTIL_BSA) * 100))" ).append("\n"); 
		query.append("                 ELSE" ).append("\n"); 
		query.append("                      NULL" ).append("\n"); 
		query.append("                 END " ).append("\n"); 
		query.append("       END UTIL_RATIO, " ).append("\n"); 
		query.append("       Z.PAST," ).append("\n"); 
		query.append("       NVL((SELECT 'A'" ).append("\n"); 
		query.append("              FROM SPC_HD_HUL_MST HD" ).append("\n"); 
		query.append("             WHERE HD.RLANE_CD = @[lane]" ).append("\n"); 
		query.append("               AND HD.DIR_CD   = SUBSTR(P.BASE_VVD,9,1)" ).append("\n"); 
		query.append("               AND ROWNUM      = 1" ).append("\n"); 
		query.append("            ),'B'" ).append("\n"); 
		query.append("       ) AS HD_AUL," ).append("\n"); 
		query.append("       P.N1ST_LODG_PORT_ETD_DT                " ).append("\n"); 
		query.append("  FROM (" ).append("\n"); 
		query.append("   SELECT Z.BASE_VVD," ).append("\n"); 
		query.append("          Z.SRC," ).append("\n"); 
		query.append("          Z.DIS_SEQ," ).append("\n"); 
		query.append("          Z.IOC_CD," ).append("\n"); 
		query.append("          Z.PORT_CD ," ).append("\n"); 
		query.append("          Z.PORT_SEQ," ).append("\n"); 
		query.append("          Z.POD_CD," ).append("\n"); 
		query.append("          Z.POD_SEQ," ).append("\n"); 
		query.append("          Z.LOD_TTL ," ).append("\n"); 
		query.append("          " ).append("\n"); 
		query.append("          CASE WHEN Z.IOC_CD = 'TOTAL' OR Z.POD_CD = 'TTL' THEN" ).append("\n"); 
		query.append("               ROUND(AVG(CM.AVG_CM) OVER(PARTITION BY Z.BASE_VVD, Z.SRC, Z.IOC_CD, Z.PORT_CD ,Z.PORT_SEQ))" ).append("\n"); 
		query.append("          ELSE" ).append("\n"); 
		query.append("               CM.AVG_CM" ).append("\n"); 
		query.append("          END AVG_CMPB," ).append("\n"); 
		query.append("          " ).append("\n"); 
		query.append("          Z.DIS_TTL ," ).append("\n"); 
		query.append("          Z.ON_TTL ," ).append("\n"); 
		query.append("          --Z.ON_HC_TTL," ).append("\n"); 
		query.append("          Z.LOAD_CAPA,          " ).append("\n"); 
		query.append("          Z.BSA,          " ).append("\n"); 
		query.append("          MAX(DECODE(Z.IOC_CD,'TOTAL',Z.ON_TTL,0)) OVER(PARTITION BY Z.BASE_VVD, Z.SRC, Z.PORT_CD) AS UTIL_BSA, " ).append("\n"); 
		query.append("          Z.PAST " ).append("\n"); 
		query.append("    FROM (   " ).append("\n"); 
		query.append("           SELECT DISTINCT " ).append("\n"); 
		query.append("                  BASE_VVD," ).append("\n"); 
		query.append("                  SRC," ).append("\n"); 
		query.append("                  DIS_SEQ," ).append("\n"); 
		query.append("                  IOC_CD," ).append("\n"); 
		query.append("                  PORT_CD ," ).append("\n"); 
		query.append("                  PORT_SEQ," ).append("\n"); 
		query.append("                  POD_CD," ).append("\n"); 
		query.append("                  POD_SEQ," ).append("\n"); 
		query.append("                  LOD_TTL ," ).append("\n"); 
		query.append("                  " ).append("\n"); 
		query.append("                  DIS_TTL ," ).append("\n"); 
		query.append("                  ON_TTL ," ).append("\n"); 
		query.append("                  --ON_HC_TTL," ).append("\n"); 
		query.append("                  CASE WHEN IOC_CD = 'TOTAL' OR POD_CD = 'TTL' THEN" ).append("\n"); 
		query.append("                       BSA - ON_TTL --- DECODE(VOID_FLG,'Y',ON_HC_TTL,0)" ).append("\n"); 
		query.append("                  ELSE" ).append("\n"); 
		query.append("                       0" ).append("\n"); 
		query.append("                  END LOAD_CAPA," ).append("\n"); 
		query.append("                  PAST ," ).append("\n"); 
		query.append("                  BSA" ).append("\n"); 
		query.append("             FROM (" ).append("\n"); 
		query.append("                  SELECT " ).append("\n"); 
		query.append("                         BASE_VVD," ).append("\n"); 
		query.append("                         DECODE(SRC, 1, 'A', 2, 'B', 3, 'F', 4, 'M') AS SRC," ).append("\n"); 
		query.append("                         DECODE(IOC_CD, 1, 'OCN', 2, 'IPC', 3, 'T/S', 4, 'MT', 5, 'TOTAL') AS IOC_CD," ).append("\n"); 
		query.append("                         IOC_CD AS DIS_SEQ," ).append("\n"); 
		query.append("                         PORT_CD ," ).append("\n"); 
		query.append("                         PORT_SEQ," ).append("\n"); 
		query.append("                         " ).append("\n"); 
		query.append("                         CASE WHEN IOC_CD = 5 THEN " ).append("\n"); 
		query.append("                              NULL" ).append("\n"); 
		query.append("                         ELSE " ).append("\n"); 
		query.append("                              POD_CD" ).append("\n"); 
		query.append("                         END POD_CD," ).append("\n"); 
		query.append("                         " ).append("\n"); 
		query.append("                         CASE WHEN IOC_CD = 5 THEN " ).append("\n"); 
		query.append("                              30" ).append("\n"); 
		query.append("                         ELSE " ).append("\n"); 
		query.append("                              DECODE(POD_CD,'TTL',20,POD_SEQ)" ).append("\n"); 
		query.append("                         END POD_SEQ," ).append("\n"); 
		query.append("                         " ).append("\n"); 
		query.append("                         ----FLG     ," ).append("\n"); 
		query.append("                         " ).append("\n"); 
		query.append("                         NVL(LOD_TTL,0) AS LOD_TTL ," ).append("\n"); 
		query.append("                         " ).append("\n"); 
		query.append("                         CASE WHEN IOC_CD = 5 THEN" ).append("\n"); 
		query.append("                              MAX(DECODE(POD_CD,'TTL',DIS_TTL, 0)) OVER(PARTITION BY BASE_VVD,SRC,PORT_CD,PORT_SEQ)" ).append("\n"); 
		query.append("                         ELSE" ).append("\n"); 
		query.append("                              NVL(DECODE(POD_CD,'TTL',DIS_TTL, 0),0)" ).append("\n"); 
		query.append("                         END DIS_TTL ," ).append("\n"); 
		query.append("                         " ).append("\n"); 
		query.append("                         CASE WHEN IOC_CD = 5 THEN" ).append("\n"); 
		query.append("                              MAX(DECODE(POD_CD,'TTL',ON_TTL, 0)) OVER(PARTITION BY BASE_VVD,SRC,PORT_CD,PORT_SEQ)" ).append("\n"); 
		query.append("                         ELSE" ).append("\n"); 
		query.append("                              NVL(DECODE(POD_CD,'TTL',ON_TTL, 0),0)" ).append("\n"); 
		query.append("                         END ON_TTL ," ).append("\n"); 
		query.append("                         " ).append("\n"); 
		query.append("                         --LOD_TTL AS LOD_TTL2," ).append("\n"); 
		query.append("                         --DIS_TTL AS DIS_TTL2," ).append("\n"); 
		query.append("                         --ON_TTL  AS ON_TTL2," ).append("\n"); 
		query.append("                         " ).append("\n"); 
		query.append("                         --Z.LOD_HC_TTL ," ).append("\n"); 
		query.append("                         --Z.DIS_HC_TTL ," ).append("\n"); 
		query.append("                         --Z.ON_HC_TTL  ," ).append("\n"); 
		query.append("                         --Z.LOD_45_TTL ," ).append("\n"); 
		query.append("                         --Z.DIS_45_TTL ," ).append("\n"); 
		query.append("                         --Z.ON_45_TTL  ," ).append("\n"); 
		query.append("                         --NVL(SPC_LANE_RGST_QTY_FNC('HC',VCB.RLANE_CD, VCB.WK_FM_DT, SUBSTR(VCB.YD_CD,1,5),  VCB.VVD, Z.BSA, NVL(Z.ON_HC_TTL, 0)),0) AS ON_HC_TTL," ).append("\n"); 
		query.append("                         --NVL(SPC_LANE_RGST_QTY_FNC('45',VCB.RLANE_CD, VCB.WK_FM_DT, SUBSTR(VCB.YD_CD,1,5),  VCB.VVD, Z.BSA, NVL(Z.ON_45_TTL, 0)),0) AS ON_45_TTL, " ).append("\n"); 
		query.append("                         " ).append("\n"); 
		query.append("                         --ROUND(NVL(SPC_LANE_RGST_QTY_FNC('HC',VCB.RLANE_CD, VCB.WK_FM_DT, SUBSTR(PORT_CD,1,5),  VCB.VVD, Z.BSA, NVL(Z.ON_HC_TTL, 0)),0)) +" ).append("\n"); 
		query.append("                         --ROUND(NVL(SPC_LANE_RGST_QTY_FNC('45',VCB.RLANE_CD, VCB.WK_FM_DT, SUBSTR(PORT_CD,1,5),  VCB.VVD, Z.BSA, NVL(Z.ON_45_TTL, 0)),0)) AS ON_HC_TTL," ).append("\n"); 
		query.append("                         MAX(PAST) OVER(PARTITION BY BASE_VVD,SRC,PORT_CD,PORT_SEQ) AS PAST ," ).append("\n"); 
		query.append("                         MAX(BSA)  OVER(PARTITION BY BASE_VVD) AS BSA," ).append("\n"); 
		query.append("                         PS.VOID_FLG" ).append("\n"); 
		query.append("                    FROM (" ).append("\n"); 
		query.append("                            SELECT Z.BASE_VVD, " ).append("\n"); 
		query.append("                                   Z.SRC     ," ).append("\n"); 
		query.append("                                   Z.IOC_CD  ," ).append("\n"); 
		query.append("                                   Z.PORT_CD ," ).append("\n"); 
		query.append("                                   Z.PORT_SEQ," ).append("\n"); 
		query.append("                                   " ).append("\n"); 
		query.append("                                   NVL(Z.POD_CD,'TTL') AS POD_CD," ).append("\n"); 
		query.append("                                   Z.POD_SEQ," ).append("\n"); 
		query.append("                                   Z.POD_CLPT_IND_SEQ1,   " ).append("\n"); 
		query.append("                                             " ).append("\n"); 
		query.append("                                   ----Z.FLG     ,  임시막음" ).append("\n"); 
		query.append("                                   Z.LOD_TTL ," ).append("\n"); 
		query.append("                                   (Z.DIS_TTL + Z.PRE_TTL) AS DIS_TTL," ).append("\n"); 
		query.append("                                   SUM(DECODE(Z.PORT_CD,'TOTAL',Z.ON_TTL + Z.LOD_TTL - Z.DIS_TTL - Z.PRE_TTL, " ).append("\n"); 
		query.append("                                              DECODE(NVL(Z.POD_CD,'TTL'),'TTL',0,Z.ON_TTL + Z.LOD_TTL - Z.DIS_TTL - Z.PRE_TTL))) OVER (PARTITION BY Z.BASE_VVD, Z.SRC, Z.IOC_CD ORDER BY Z.BASE_VVD, PORT_SEQ) AS ON_TTL," ).append("\n"); 
		query.append("                                   " ).append("\n"); 
		query.append("                                   Z.LOD_HC_TTL ," ).append("\n"); 
		query.append("                                   (Z.DIS_HC_TTL + Z.PRE_HC_TTL) AS DIS_HC_TTL," ).append("\n"); 
		query.append("                                   SUM(DECODE(Z.PORT_CD,'TOTAL',Z.ON_HC_TTL + Z.LOD_HC_TTL - Z.DIS_HC_TTL - Z.PRE_HC_TTL, " ).append("\n"); 
		query.append("                                              DECODE(NVL(Z.POD_CD,'TTL'),'TTL',0,Z.ON_HC_TTL + Z.LOD_HC_TTL - Z.DIS_HC_TTL - Z.PRE_HC_TTL))) OVER (PARTITION BY Z.BASE_VVD, Z.SRC, Z.IOC_CD ORDER BY Z.BASE_VVD, PORT_SEQ) AS ON_HC_TTL," ).append("\n"); 
		query.append("                                   " ).append("\n"); 
		query.append("                                   Z.LOD_45_TTL ," ).append("\n"); 
		query.append("                                   (Z.DIS_45_TTL + Z.PRE_45_TTL) AS DIS_45_TTL," ).append("\n"); 
		query.append("                                   SUM(DECODE(Z.PORT_CD,'TOTAL',Z.ON_45_TTL + Z.LOD_45_TTL - Z.DIS_45_TTL - Z.PRE_45_TTL, " ).append("\n"); 
		query.append("                                              DECODE(NVL(Z.POD_CD,'TTL'),'TTL',0,Z.ON_45_TTL + Z.LOD_45_TTL - Z.DIS_45_TTL - Z.PRE_45_TTL))) OVER (PARTITION BY Z.BASE_VVD, Z.SRC, Z.IOC_CD ORDER BY Z.BASE_VVD, PORT_SEQ) AS ON_45_TTL," ).append("\n"); 
		query.append("                                   " ).append("\n"); 
		query.append("                                   --SUM(Z.QTY_HC_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS QTY_HC_TTL," ).append("\n"); 
		query.append("                                   --SUM(Z.QTY_45_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS QTY_45_TTL," ).append("\n"); 
		query.append("                                   " ).append("\n"); 
		query.append("                                   Z.PAST," ).append("\n"); 
		query.append("                                   Z.BSA ," ).append("\n"); 
		query.append("                                   CASE WHEN IOC_CD = 5 AND BSA IS NOT NULL THEN" ).append("\n"); 
		query.append("                                        'Y'" ).append("\n"); 
		query.append("                                   ELSE" ).append("\n"); 
		query.append("                                        'N'" ).append("\n"); 
		query.append("                                   END DEL_FLG," ).append("\n"); 
		query.append("                                   '' AS T" ).append("\n"); 
		query.append("                              FROM (" ).append("\n"); 
		query.append("                                      SELECT M.BASE_VVD," ).append("\n"); 
		query.append("                                             M.SRC   ," ).append("\n"); 
		query.append("                                             M.IOC_CD," ).append("\n"); 
		query.append("                                             NVL(NVL(M.YD_CD, M.PORT_CD), 'TOTAL') AS PORT_CD," ).append("\n"); 
		query.append("                                             NVL(M.CLPT_SEQ, 0) AS PORT_SEQ," ).append("\n"); 
		query.append("                                             " ).append("\n"); 
		query.append("                                             Z.POD_CD," ).append("\n"); 
		query.append("                                             Z.POD_SEQ," ).append("\n"); 
		query.append("                                             Z.POD_CLPT_IND_SEQ1,   " ).append("\n"); 
		query.append("                                                       " ).append("\n"); 
		query.append("                                             ----M.FLG , 임시 막음" ).append("\n"); 
		query.append("                                             Z.PAST, " ).append("\n"); 
		query.append("                                             M.BSA ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_TTL)) AS LOD_TTL," ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_TTL)) AS DIS_TTL," ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_TTL)) AS PRE_TTL," ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_TTL), 0) AS ON_TTL," ).append("\n"); 
		query.append("                                             " ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_HC_TTL)) AS LOD_HC_TTL," ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_HC_TTL)) AS DIS_HC_TTL," ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_HC_TTL)) AS PRE_HC_TTL," ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_HC_TTL), 0) AS ON_HC_TTL," ).append("\n"); 
		query.append("                                             " ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_45_TTL)) AS LOD_45_TTL," ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_45_TTL)) AS DIS_45_TTL," ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_45_TTL)) AS PRE_45_TTL," ).append("\n"); 
		query.append("                                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_45_TTL), 0) AS ON_45_TTL" ).append("\n"); 
		query.append("                                        FROM (" ).append("\n"); 
		query.append("                                                SELECT A.BASE_VVD," ).append("\n"); 
		query.append("                                                       A.SRC,                                       " ).append("\n"); 
		query.append("                                                       MIN(A.PAST) OVER (PARTITION BY A.BASE_VVD, A.SRC, A.IOC_CD, A.PORT_CD) AS PAST," ).append("\n"); 
		query.append("                                                       A.IOC_CD," ).append("\n"); 
		query.append("                                                       A.SEQ," ).append("\n"); 
		query.append("                                                       " ).append("\n"); 
		query.append("                                                       A.PORT_CD," ).append("\n"); 
		query.append("                                                       A.PORT_SEQ," ).append("\n"); 
		query.append("                                                       A.CLPT_IND_SEQ," ).append("\n"); 
		query.append("                                                       " ).append("\n"); 
		query.append("                                                       " ).append("\n"); 
		query.append("                                                       A.POD_CD," ).append("\n"); 
		query.append("                                                       A.POD_SEQ," ).append("\n"); 
		query.append("                                                       A.POD_CLPT_IND_SEQ1,                                               " ).append("\n"); 
		query.append("                                                               " ).append("\n"); 
		query.append("                                                       A.LOD_TTL," ).append("\n"); 
		query.append("                                                       A.DIS_TTL," ).append("\n"); 
		query.append("                                                       A.PRE_TTL," ).append("\n"); 
		query.append("                                                       " ).append("\n"); 
		query.append("                                                       A.LOD_HC_TTL," ).append("\n"); 
		query.append("                                                       A.DIS_HC_TTL," ).append("\n"); 
		query.append("                                                       A.PRE_HC_TTL," ).append("\n"); 
		query.append("                                                       " ).append("\n"); 
		query.append("                                                       A.LOD_45_TTL," ).append("\n"); 
		query.append("                                                       A.DIS_45_TTL," ).append("\n"); 
		query.append("                                                       A.PRE_45_TTL," ).append("\n"); 
		query.append("                                                       " ).append("\n"); 
		query.append("                                                       A.TP" ).append("\n"); 
		query.append("                                                  FROM (    " ).append("\n"); 
		query.append("                                                        SELECT A.BASE_VVD," ).append("\n"); 
		query.append("                                                               A.SRC," ).append("\n"); 
		query.append("                                                               A.PAST," ).append("\n"); 
		query.append("                                                               Q.SEQ,                                            " ).append("\n"); 
		query.append("                                                                                                              " ).append("\n"); 
		query.append("                                                               DECODE(T.SEQ, 2, 5, A.IOC_CD)                        AS IOC_CD ," ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 1, A.POL_CD, A.POD_CD)                 AS PORT_CD," ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 1, A.POL_SEQ, A.POD_SEQ)               AS PORT_SEQ," ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 1, A.POL_CLPT_IND_SEQ1, A.POD_CLPT_IND_SEQ1)              AS CLPT_IND_SEQ," ).append("\n"); 
		query.append("                                                               " ).append("\n"); 
		query.append("                                                                                                                      " ).append("\n"); 
		query.append("                                                               A.POD_CD," ).append("\n"); 
		query.append("                                                               A.POD_SEQ," ).append("\n"); 
		query.append("                                                               A.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("                                                               " ).append("\n"); 
		query.append("                                                               " ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 1, A.QTY_TTL, 0)                       AS LOD_TTL," ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_TTL), 0) AS DIS_TTL," ).append("\n"); 
		query.append("                                                               DECODE(A.TP, '1', A.QTY_TTL, 0)                      AS PRE_TTL," ).append("\n"); 
		query.append("                                                               " ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 1, A.QTY_HC_TTL, 0)                       AS LOD_HC_TTL," ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_HC_TTL), 0) AS DIS_HC_TTL," ).append("\n"); 
		query.append("                                                               DECODE(A.TP, '1', A.QTY_HC_TTL, 0)                      AS PRE_HC_TTL," ).append("\n"); 
		query.append("                                                               " ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 1, A.QTY_45_TTL, 0)                       AS LOD_45_TTL," ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_45_TTL), 0) AS DIS_45_TTL," ).append("\n"); 
		query.append("                                                               DECODE(A.TP, '1', A.QTY_45_TTL, 0)                      AS PRE_45_TTL, " ).append("\n"); 
		query.append("                                                               " ).append("\n"); 
		query.append("                                                               A.TP," ).append("\n"); 
		query.append("                                                               '' AS T" ).append("\n"); 
		query.append("                                                          FROM ALL_DATA A," ).append("\n"); 
		query.append("                                                               COPY     Q,  -- 1 = Loading, 2 = Discharging" ).append("\n"); 
		query.append("                                                               COPY     T" ).append("\n"); 
		query.append("                                                         WHERE Q.SEQ IN (DECODE(A.TP, 1, '2', 2, '1'), DECODE(A.TP, 3, '1', 2, '2'))" ).append("\n"); 
		query.append("                                                           AND T.SEQ <= 2" ).append("\n"); 
		query.append("                                                           AND DECODE(A.SRC, 4, A.IOC_CD, 1) <> DECODE(A.SRC, 4, 4, 0) -- SRC = 4(ALOC만) 인 경우에는 MTY 미포함" ).append("\n"); 
		query.append("                                                         ORDER BY A.BASE_VVD," ).append("\n"); 
		query.append("                                                               A.SRC," ).append("\n"); 
		query.append("                                                               A.PAST," ).append("\n"); 
		query.append("                                                               Q.SEQ,                                           " ).append("\n"); 
		query.append("                                                                                                              " ).append("\n"); 
		query.append("                                                               DECODE(T.SEQ, 2, 5, A.IOC_CD)," ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 1, A.POL_CD, A.POD_CD)," ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 1, A.POL_SEQ, A.POD_SEQ)," ).append("\n"); 
		query.append("                                                               DECODE(Q.SEQ, 1, A.POL_CLPT_IND_SEQ1, A.POD_CLPT_IND_SEQ1) " ).append("\n"); 
		query.append("                                                           " ).append("\n"); 
		query.append("                                                           " ).append("\n"); 
		query.append("                                                       ) A" ).append("\n"); 
		query.append("                                                 " ).append("\n"); 
		query.append("                                             ) Z," ).append("\n"); 
		query.append("                                             PORT_MAP M" ).append("\n"); 
		query.append("                                       WHERE Z.SRC    (+)      = M.SRC" ).append("\n"); 
		query.append("                                         AND Z.IOC_CD (+)      = M.IOC_CD" ).append("\n"); 
		query.append("                                         AND Z.PORT_CD(+)      = NVL(M.YD_CD, M.PORT_CD)" ).append("\n"); 
		query.append("                                         AND Z.CLPT_IND_SEQ(+) = M.CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                         AND Z.BASE_VVD(+)     = M.BASE_VVD" ).append("\n"); 
		query.append("                                    GROUP BY GROUPING SETS ( " ).append("\n"); 
		query.append("                                                             ----(M.BASE_VVD, M.SRC, M.IOC_CD, M.CLPT_SEQ, NVL(M.YD_CD, M.PORT_CD), Z.POD_CD,Z.POD_SEQ,Z.POD_CLPT_IND_SEQ1, M.FLG, Z.PAST, M.BSA)," ).append("\n"); 
		query.append("                                                             (M.BASE_VVD, M.SRC, M.IOC_CD, M.CLPT_SEQ, NVL(M.YD_CD, M.PORT_CD), Z.POD_CD,Z.POD_SEQ,Z.POD_CLPT_IND_SEQ1, Z.PAST, M.BSA)," ).append("\n"); 
		query.append("                                                             (M.BASE_VVD, M.SRC, M.IOC_CD, M.CLPT_SEQ, NVL(M.YD_CD, M.PORT_CD))," ).append("\n"); 
		query.append("                                                             (M.BASE_VVD, M.SRC, M.IOC_CD)" ).append("\n"); 
		query.append("                                                           )" ).append("\n"); 
		query.append("                                   ) Z" ).append("\n"); 
		query.append("                             --WHERE SRC = 1  -- 선택된 형태값 -- '1' : Alloc + BKG, '2' : BKG, '3' : F'cast + BKG, '4' : Alloc " ).append("\n"); 
		query.append("                             " ).append("\n"); 
		query.append("                         ) Z," ).append("\n"); 
		query.append("                         PARAMS PS" ).append("\n"); 
		query.append("                   WHERE PORT_SEQ > 0" ).append("\n"); 
		query.append("                     AND Z.SRC = NVL((SELECT 1  -- 20131223 추가" ).append("\n"); 
		query.append("                                        FROM SPC_HD_HUL_MST HD" ).append("\n"); 
		query.append("                                       WHERE HD.RLANE_CD = PS.RLANE_CD" ).append("\n"); 
		query.append("                                         AND HD.DIR_CD   = PS.SKD_DIR_CD" ).append("\n"); 
		query.append("                                         AND ROWNUM      = 1" ).append("\n"); 
		query.append("                                    ),2)" ).append("\n"); 
		query.append("                     AND DECODE(SRC, 4, IOC_CD, 1) <> DECODE(SRC, 4, 4, 0)" ).append("\n"); 
		query.append("                     AND Z.PORT_CD != Z.POD_CD" ).append("\n"); 
		query.append("                     AND Z.DEL_FLG  = 'N'" ).append("\n"); 
		query.append("                     AND SUBSTR(Z.BASE_VVD,1,4) = PS.VSL_CD" ).append("\n"); 
		query.append("                     AND SUBSTR(Z.BASE_VVD,5,4) = PS.SKD_VOY_NO" ).append("\n"); 
		query.append("                     AND SUBSTR(Z.BASE_VVD,9,1) = PS.SKD_DIR_CD" ).append("\n"); 
		query.append("                  ) Z" ).append("\n"); 
		query.append("            --ORDER BY Z.BASE_VVD," ).append("\n"); 
		query.append("            --         Z.SRC     ," ).append("\n"); 
		query.append("            --         Z.PORT_SEQ," ).append("\n"); 
		query.append("            --         Z.DIS_SEQ ," ).append("\n"); 
		query.append("            --         Z.POD_SEQ" ).append("\n"); 
		query.append("   " ).append("\n"); 
		query.append("                    " ).append("\n"); 
		query.append("          ) Z" ).append("\n"); 
		query.append("          ,PORT_CM CM" ).append("\n"); 
		query.append("    WHERE Z.BASE_VVD = CM.BASE_VVD(+)" ).append("\n"); 
		query.append("      AND Z.IOC_CD   = CM.IOC_CD(+)" ).append("\n"); 
		query.append("      AND Z.PORT_CD  = CM.BKG_POL_NOD_CD(+)" ).append("\n"); 
		query.append("      AND Z.POD_CD   = CM.BKG_POD_NOD_CD(+)" ).append("\n"); 
		query.append("       ) Z," ).append("\n"); 
		query.append("       POL_POD_PORT_SEQ P" ).append("\n"); 
		query.append(" WHERE P.BASE_VVD = Z.BASE_VVD(+)" ).append("\n"); 
		query.append("   AND P.SRC      = Z.SRC(+)" ).append("\n"); 
		query.append("   AND P.IOC_CD   = Z.IOC_CD(+)" ).append("\n"); 
		query.append("   AND P.POL_CD   = Z.PORT_CD(+)" ).append("\n"); 
		query.append("   AND NVL(P.POD_CD,'XXXXX')   = NVL(Z.POD_CD(+),'XXXXX')" ).append("\n"); 
		query.append("   " ).append("\n"); 
		query.append(") VP" ).append("\n"); 
		query.append("WHERE SRC = HD_AUL" ).append("\n"); 
		query.append("   ORDER BY " ).append("\n"); 
		query.append("         VP.SRC , " ).append("\n"); 
		query.append("         VP.N1ST_LODG_PORT_ETD_DT , " ).append("\n"); 
		query.append("         VP.BASE_VVD," ).append("\n"); 
		query.append("         VP.PORT_SEQ, VP.IOC_SEQ , VP.POD_SEQ" ).append("\n"); 
		query.append("-- ORDER BY P.BASE_VVD,P.SRC , P.POL_SEQ, P.IOC_SEQ , P.POD_SEQ" ).append("\n"); 

	}
}