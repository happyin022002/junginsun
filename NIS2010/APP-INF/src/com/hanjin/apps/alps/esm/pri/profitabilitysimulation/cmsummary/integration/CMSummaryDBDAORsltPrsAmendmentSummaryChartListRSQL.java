/*=========================================================
*Copyright(c) 2015 CyberLogitec
*@FileName : CMSummaryDBDAORsltPrsAmendmentSummaryChartListRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2015.06.25
*@LastModifier : 
*@LastVersion : 1.0
* 2015.06.25 
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esm.pri.profitabilitysimulation.cmsummary.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class CMSummaryDBDAORsltPrsAmendmentSummaryChartListRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * Chart의 조회
	  * 
	  * * History
	  * 2015.06.26 CHM-201536492 Split05-주간 MAS Open에 따른 타모듈 프로그램 적용 요청
	  * </pre>
	  */
	public CMSummaryDBDAORsltPrsAmendmentSummaryChartListRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_prop_srep_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_prop_ofc_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_smr_eff_wk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ori_loc_tp",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ctrt_eff_wk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_prop_apro_ofc_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_smr_eff_yr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_rfrc_exp_yr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_dir_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_rfrc_exp_wk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_dest_loc_tp",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_sub_trd_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_rfrc_eff_wk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ori_rout_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ctrt_eff_yr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_pfmc_unit",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_dest_rout_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_rfrc_eff_yr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_smr_exp_yr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_trd_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ctrt_exp_wk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ctrt_exp_yr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_smr_exp_wk",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esm.pri.profitabilitysimulation.cmsummary.integration").append("\n"); 
		query.append("FileName : CMSummaryDBDAORsltPrsAmendmentSummaryChartListRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("-- 기준이 되는 SC_NO를 SELECT하기 위한 CONTRACT DURATION" ).append("\n"); 
		query.append("WITH VW_CONTRACT_DT AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */ MIN(SLS_FM_DT) AS  SLS_FM_DT, MAX(SLS_TO_DT)  AS SLS_TO_DT" ).append("\n"); 
		query.append("	FROM MAS_WK_PRD" ).append("\n"); 
		query.append("	WHERE (COST_YR = @[frm_ctrt_eff_yr] AND COST_WK = @[frm_ctrt_eff_wk])" ).append("\n"); 
		query.append("		OR (COST_YR = @[frm_ctrt_exp_yr] AND COST_WK = @[frm_ctrt_exp_wk])" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", VW_CONTRACT_DT_LIST AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */ COST_YR||substr(SLS_TO_DT,5,2) as COST_YRMON,COST_WK" ).append("\n"); 
		query.append("	FROM MAS_WK_PRD" ).append("\n"); 
		query.append("	WHERE (COST_YR  || COST_WK) >= (@[frm_ctrt_eff_yr] || @[frm_ctrt_eff_wk])  AND (COST_YR || COST_WK )<= (@[frm_ctrt_exp_yr] || @[frm_ctrt_exp_wk])" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(",VW_SUMMARY_DT AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */ MIN(SLS_FM_DT)  AS  SLS_FM_DT, MAX(SLS_TO_DT)  AS SLS_TO_DT" ).append("\n"); 
		query.append("	FROM MAS_WK_PRD" ).append("\n"); 
		query.append("	WHERE (COST_YR = @[frm_smr_eff_yr] AND COST_WK = @[frm_smr_eff_wk])" ).append("\n"); 
		query.append("		OR (COST_YR = @[frm_smr_exp_yr] AND COST_WK = @[frm_smr_exp_wk])" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(",VW_REFERENCE_DT AS (" ).append("\n"); 
		query.append("	SELECT MIN(SLS_FM_DT)  AS  SLS_FM_DT,  MAX(SLS_TO_DT)  AS SLS_TO_DT" ).append("\n"); 
		query.append("	FROM MAS_WK_PRD" ).append("\n"); 
		query.append("	WHERE  (COST_YR = @[frm_rfrc_eff_yr] AND COST_WK = @[frm_rfrc_eff_wk])" ).append("\n"); 
		query.append("		OR (COST_YR = @[frm_rfrc_exp_yr] AND COST_WK = @[frm_rfrc_exp_wk])" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- SUMMARY에서 입력한 주차를 이용해 현재 날짜 이전 주차는 WK_TP : -1 , 현재 주차 : 0 , 미래주차 : 1" ).append("\n"); 
		query.append(", VW_SUMMARY_WEEK AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */ SLS_FM_YRWK,SLS_FM_DT,SLS_TO_YRWK,SLS_TO_DT,WK_TP" ).append("\n"); 
		query.append("		,(SELECT COUNT(*) FROM MAS_WK_PRD PRD WHERE (PRD.COST_YR || PRD.COST_WK >= MN.SLS_FM_YRWK AND PRD.COST_YR || PRD.COST_WK <= MN.SLS_TO_YRWK) )+DECODE(WK_TP,1,1,0) AS TOT_WK -- ESTIMATE 조회시 현재주차도 미래주차에 포함시킨다." ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT MIN(COST_YR||COST_WK) AS SLS_FM_YRWK,MIN(SLS_FM_DT) AS  SLS_FM_DT,  MAX(COST_YR||COST_WK) AS SLS_TO_YRWK,MAX(SLS_TO_DT) AS SLS_TO_DT,WK_TP" ).append("\n"); 
		query.append("		FROM (		" ).append("\n"); 
		query.append("			SELECT COST_YR,COST_WK,SLS_FM_DT,SLS_TO_DT ," ).append("\n"); 
		query.append("			       CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= SLS_FM_DT" ).append("\n"); 
		query.append("						THEN 0" ).append("\n"); 
		query.append("						WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > SLS_TO_DT   " ).append("\n"); 
		query.append("				    THEN -1" ).append("\n"); 
		query.append("				    ELSE 1" ).append("\n"); 
		query.append("			       END AS WK_TP" ).append("\n"); 
		query.append("			FROM MAS_WK_PRD " ).append("\n"); 
		query.append("			WHERE (COST_YR || COST_WK >= (@[frm_smr_eff_yr] || @[frm_smr_eff_wk]) AND COST_YR || COST_WK <= (@[frm_smr_exp_yr] || @[frm_smr_exp_wk]))	" ).append("\n"); 
		query.append("		)	" ).append("\n"); 
		query.append("		GROUP BY WK_TP" ).append("\n"); 
		query.append("	) MN" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- ESTIMATE를 위한 참조 주차" ).append("\n"); 
		query.append(",VW_REFERENCE_WEEK AS (" ).append("\n"); 
		query.append("	SELECT  /*+ MATERIALIZE */ MIN(COST_YR||COST_WK) AS SLS_FM_YRWK,   MIN(SLS_FM_DT)  AS  SLS_FM_DT, MAX(COST_YR||COST_WK) AS SLS_TO_YRWK,  MAX(SLS_TO_DT)  AS SLS_TO_DT" ).append("\n"); 
		query.append("	FROM MAS_WK_PRD" ).append("\n"); 
		query.append("	WHERE (COST_YR = @[frm_rfrc_eff_yr] AND COST_WK = @[frm_rfrc_eff_wk])" ).append("\n"); 
		query.append("		OR (COST_YR = @[frm_rfrc_exp_yr] AND COST_WK = @[frm_rfrc_exp_wk])" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("---------------------------------------------------------------------------------------------" ).append("\n"); 
		query.append("-- 이하 RFA" ).append("\n"); 
		query.append("-- 기준이 되는 PROP_NO를 조회" ).append("\n"); 
		query.append(", VW_RFA_PROP_KEY AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE INDEX_FFS(DUR XAK1PRI_RP_DUR) */   " ).append("\n"); 
		query.append("		DUR.PROP_NO , MAX(DUR.AMDT_SEQ) AS AMDT_SEQ" ).append("\n"); 
		query.append("	FROM PRI_RP_DUR DUR" ).append("\n"); 
		query.append("		, VW_CONTRACT_DT CDT" ).append("\n"); 
		query.append("	WHERE TO_CHAR(CTRT_EFF_DT,'YYYYMMDD') >= SLS_FM_DT" ).append("\n"); 
		query.append("		AND TO_CHAR(CTRT_EXP_DT,'YYYYMMDD') <= SLS_TO_DT" ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append("	GROUP BY DUR.PROP_NO" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(" -- 데이터 SELECT시 조회 조건으로 이용될 KEY LIST" ).append("\n"); 
		query.append(", VW_RFA_KEY_LIST AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE LEADING(DT SR_CST_DTL) */   HDR.RFA_NO , PKEY.PROP_NO, PKEY.AMDT_SEQ" ).append("\n"); 
		query.append("		,SR_CST_DTL.PRS_YRMON, SR_CST_DTL.PRS_WK, SR_CST_DTL.PRC_CTRT_TP_CD, SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		, SR_CST_DTL.SVC_SCP_CD, SR_CST_DTL.VSL_SLAN_DIR_CD, SR_CST_DTL.TRD_CD, SR_CST_DTL.SUB_TRD_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.RLANE_CD, SR_CST_DTL.PRC_CGO_TP_CD, SR_CST_DTL.ORG_LOC_TP_CD, SR_CST_DTL.ORG_LOC_DEF_CD,SR_CST_DTL. DEST_LOC_TP_CD, SR_CST_DTL.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("		,SR_CST_DTL.TEU_FRT_REV, SR_CST_DTL.PRS_RESPB_CM_UC_AMT, SR_CST_DTL.PRS_PFIT_CM_UC_AMT, SR_CST_DTL.PRS_RESPB_OPFIT_UC_AMT, SR_CST_DTL.PRS_CRNT_LOD_QTY, SR_CST_DTL.PRS_RESPB_CMPB_AMT, SR_CST_DTL.PRS_PFIT_CMPB_AMT, SR_CST_DTL.PRS_RESPB_OPB_AMT" ).append("\n"); 
		query.append("	FROM" ).append("\n"); 
		query.append("		VW_CONTRACT_DT_LIST  DT" ).append("\n"); 
		query.append("		, PRI_RP_HDR HDR" ).append("\n"); 
		query.append("		, VW_RFA_PROP_KEY PKEY" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY SMRY" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY_COST_DTL SR_CST_DTL" ).append("\n"); 
		query.append("	WHERE HDR.PROP_NO  = PKEY.PROP_NO " ).append("\n"); 
		query.append("		AND HDR.RFA_NO = SMRY.PRC_CTRT_NO" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_TP_CD = 'R' -- RFA" ).append("\n"); 
		query.append("		AND SR_CST_DTL.PRS_YRMON = DT.COST_YRMON      " ).append("\n"); 
		query.append("		AND SR_CST_DTL.PRS_WK    = DT.COST_WK        " ).append("\n"); 
		query.append("		AND SMRY.PRS_YRMON = SR_CST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		AND SMRY.PRS_WK = SR_CST_DTL.PRS_WK" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_TP_CD = SR_CST_DTL.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_NO = SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		AND HDR.RFA_NO IS NOT NULL" ).append("\n"); 
		query.append("		AND SR_CST_DTL.TRD_CD = @[frm_trd_cd]" ).append("\n"); 
		query.append("		AND SR_CST_DTL.VSL_SLAN_DIR_CD = @[frm_dir_cd]" ).append("\n"); 
		query.append("		#if(${frm_sub_trd_cd} != '')" ).append("\n"); 
		query.append("			AND SR_CST_DTL.SUB_TRD_CD = @[frm_sub_trd_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		#if(${frm_rlane_cd} != '')" ).append("\n"); 
		query.append("			AND SR_CST_DTL.RLANE_CD IN (" ).append("\n"); 
		query.append("			#foreach( ${key} in ${rlane_list}) " ).append("\n"); 
		query.append("				#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("					UNION ALL" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("				SELECT " ).append("\n"); 
		query.append("						 '$key' " ).append("\n"); 
		query.append("				FROM DUAL" ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("			)" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("			 " ).append("\n"); 
		query.append("		#if(${frm_customer_type} == 'B')" ).append("\n"); 
		query.append("					AND SMRY.PRS_CUST_TP_CD IN ('I','A','O')" ).append("\n"); 
		query.append("		#elseif(${frm_customer_type} == 'N')" ).append("\n"); 
		query.append("					AND SMRY.PRS_CUST_TP_CD IN ('N')" ).append("\n"); 
		query.append("		#else " ).append("\n"); 
		query.append("				AND SMRY.PRS_CUST_TP_CD IN ('I','A','O','N')" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_prop_ofc_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.PROP_OFC_CD = @[frm_prop_ofc_cd] -- REQUEST" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_prop_srep_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.RESPB_SREP_CD = @[frm_prop_srep_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_prop_apro_ofc_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.PROP_APRO_OFC_CD = @[frm_prop_apro_ofc_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if( $cust_list.size() != 0 ) " ).append("\n"); 
		query.append("			AND (SMRY.CUST_CNT_CD , SMRY.CUST_SEQ) IN (" ).append("\n"); 
		query.append("			#foreach( ${key} in ${cust_list}) " ).append("\n"); 
		query.append("				#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("					UNION ALL" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("				SELECT " ).append("\n"); 
		query.append("						substr('$key',1,2),substr('$key',3)" ).append("\n"); 
		query.append("				FROM DUAL" ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("			)" ).append("\n"); 
		query.append("		#end " ).append("\n"); 
		query.append(" " ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 기준이 되는 SC_NO를 조회 ( OUTER JOIN의 기준 데이터가 된다. )" ).append("\n"); 
		query.append(", VW_RFA_CONTRACT_KEY AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */ DISTINCT RFA_NO , PROP_NO, AMDT_SEQ" ).append("\n"); 
		query.append("	FROM VW_RFA_KEY_LIST" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("--- 계약번호당 실적이 총 몇주차 인지 ESTIMATE에 쓰일 총 주차가 몇주차인지 계산한다." ).append("\n"); 
		query.append(", VW_RFA_TOT_WEEK_PER_RFA_NO AS (" ).append("\n"); 
		query.append("SELECT /*+ MATERIALIZE */ PROP_NO , AMDT_SEQ,RFA_NO" ).append("\n"); 
		query.append("	,ACTUAL_WK_CNT" ).append("\n"); 
		query.append("	,DECODE(ESTIMATE_WK_CNT	,1,0,ESTIMATE_WK_CNT	) AS ESTIMATE_WK_CNT	-- 현재주차만 걸릴경우 제외시킨다." ).append("\n"); 
		query.append("	,REFER_WK_CNT" ).append("\n"); 
		query.append("FROM (" ).append("\n"); 
		query.append("	SELECT /*+ ORDERED USE_NL(KLIST DUR) USE_HASH(KLIST PRD) */  " ).append("\n"); 
		query.append("		KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.RFA_NO" ).append("\n"); 
		query.append("		, SUM(" ).append("\n"); 
		query.append("			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_TO_DT >=  KLIST.SDT_SLS_FM_DT        --SDT.SLS_FM_DT" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("		       END " ).append("\n"); 
		query.append("		  ) AS ACTUAL_WK_CNT" ).append("\n"); 
		query.append("		, SUM(" ).append("\n"); 
		query.append("			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT  " ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				WHEN   PRD.SLS_TO_DT <=  KLIST.SDT_SLS_TO_DT       -- SDT.SLS_TO_DT " ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("			END " ).append("\n"); 
		query.append("		) AS ESTIMATE_WK_CNT	" ).append("\n"); 
		query.append("		, SUM(" ).append("\n"); 
		query.append("			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_FM_DT >=  KLIST.RDT_SLS_FM_DT AND  PRD.SLS_FM_DT <= KLIST.RDT_SLS_TO_DT    --RDT.SLS_FM_DT AND  PRD.SLS_FM_DT <= RDT.SLS_TO_DT" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("		       END " ).append("\n"); 
		query.append("		  ) AS REFER_WK_CNT" ).append("\n"); 
		query.append("	FROM " ).append("\n"); 
		query.append("		 (" ).append("\n"); 
		query.append("			 SELECT  /*+ NO_MERGE ORDERED */" ).append("\n"); 
		query.append("				  SDT.SLS_FM_DT   SDT_SLS_FM_DT," ).append("\n"); 
		query.append("				  SDT.SLS_TO_DT   SDT_SLS_TO_DT," ).append("\n"); 
		query.append("				  RDT.SLS_FM_DT   RDT_SLS_FM_DT," ).append("\n"); 
		query.append("				  RDT.SLS_TO_DT   RDT_SLS_TO_DT," ).append("\n"); 
		query.append("				  KLIST.*," ).append("\n"); 
		query.append("				  1    HASH_JOIN_KEY" ).append("\n"); 
		query.append("			  FROM    VW_SUMMARY_DT       SDT" ).append("\n"); 
		query.append("				, VW_REFERENCE_DT     RDT" ).append("\n"); 
		query.append("				, VW_RFA_CONTRACT_KEY KLIST" ).append("\n"); 
		query.append("		 )  KLIST   " ).append("\n"); 
		query.append("		, PRI_RP_DUR DUR" ).append("\n"); 
		query.append("		,(" ).append("\n"); 
		query.append("			SELECT  /*+ NO_MERGE */" ).append("\n"); 
		query.append("			     SLS_FM_DT, SLS_TO_DT," ).append("\n"); 
		query.append("			     1  HASH_JOIN_KEY" ).append("\n"); 
		query.append("			FROM   MAS_WK_PRD " ).append("\n"); 
		query.append("		)  PRD " ).append("\n"); 
		query.append("	WHERE DUR.PROP_NO = KLIST.PROP_NO" ).append("\n"); 
		query.append("		AND DUR.AMDT_SEQ = KLIST.AMDT_SEQ" ).append("\n"); 
		query.append("		AND KLIST.HASH_JOIN_KEY = PRD.HASH_JOIN_KEY     " ).append("\n"); 
		query.append("		AND (" ).append("\n"); 
		query.append("				(	TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') >= PRD.SLS_FM_DT " ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_TO_DT	 " ).append("\n"); 
		query.append("				)  OR (   " ).append("\n"); 
		query.append("					TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') >= PRD.SLS_FM_DT " ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') <= PRD.SLS_TO_DT " ).append("\n"); 
		query.append("				) OR (" ).append("\n"); 
		query.append("					TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_FM_DT " ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD')>= PRD.SLS_TO_DT	 " ).append("\n"); 
		query.append("				)" ).append("\n"); 
		query.append("		) " ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append("	 GROUP BY KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.RFA_NO" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- ACTUAL DATA 조회" ).append("\n"); 
		query.append("-- SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) 결합 INDEX 필요" ).append("\n"); 
		query.append(", VW_RFA_ACTUAL_VALUE AS (" ).append("\n"); 
		query.append("	SELECT  CKEY.RFA_NO" ).append("\n"); 
		query.append("		, CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY)   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_RESPB_CMPB_AMT *  (CKEY.PRS_CRNT_LOD_QTY  )    ) / SUM(CKEY.PRS_CRNT_LOD_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )     AS CMPB_OFFICE     -- Office Profit/ CM -- CMPB(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_PFIT_CMPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  )   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )       AS CMPB_TRADE      -- Trade Profit/ CM  -- CMPB(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_CRNT_LOD_QTY     * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_RESPB_OPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  )   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )        AS OPB             -- Office Profit/ OP -- OPB(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.TEU_FRT_REV  * CKEY.PRS_CRNT_LOD_QTY)         AS G_REV            -- Gross Revenue(Previous)" ).append("\n"); 
		query.append("		, MAX(WK_PER_SC.ACTUAL_WK_CNT) AS WEEK_CNT" ).append("\n"); 
		query.append("	FROM VW_RFA_KEY_LIST CKEY " ).append("\n"); 
		query.append("		, VW_SUMMARY_WEEK WK" ).append("\n"); 
		query.append("		, VW_RFA_TOT_WEEK_PER_RFA_NO WK_PER_SC" ).append("\n"); 
		query.append("	WHERE  CKEY.RFA_NO = WK_PER_SC.RFA_NO" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- origin" ).append("\n"); 
		query.append("		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- DEST" ).append("\n"); 
		query.append("		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("-- BY CARGO TYPE" ).append("\n"); 
		query.append("#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("		AND WK.WK_TP = -1" ).append("\n"); 
		query.append("		AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) >= WK.SLS_FM_YRWK  AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) <= WK.SLS_TO_YRWK  " ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append("	GROUP BY CKEY.RFA_NO, CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 1.정상적으로 REFERENCE 기간에에서 조회 되는 참조값을 SELECT해서 ESTIMATE에서 보여져야 할 값을 만든다." ).append("\n"); 
		query.append("-- SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) 결합 INDEX 필요" ).append("\n"); 
		query.append(", VW_RFA_EST_ACT_1ST_VALUE AS (" ).append("\n"); 
		query.append("	SELECT  PRC_CTRT_NO" ).append("\n"); 
		query.append("		, LOAD" ).append("\n"); 
		query.append("		, COST_CM_OFFICE" ).append("\n"); 
		query.append("		, COST_CM_TRADE" ).append("\n"); 
		query.append("		, COST_OP_OFFICE" ).append("\n"); 
		query.append("		, CM_OFFICE" ).append("\n"); 
		query.append("		, CM_TRADE" ).append("\n"); 
		query.append("		, OP" ).append("\n"); 
		query.append("		, G_REV" ).append("\n"); 
		query.append("		, WEEK_CNT" ).append("\n"); 
		query.append("		, TOT_WK" ).append("\n"); 
		query.append("		, CM_OFFICE / DECODE(LOAD,0,1,LOAD) AS CMPB_OFFICE" ).append("\n"); 
		query.append("		, CM_TRADE /  DECODE(LOAD,0,1,LOAD) AS CMPB_TRADE" ).append("\n"); 
		query.append("		, OP /  DECODE(LOAD,0,1,LOAD) AS OPB_OFFICE" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT 	 MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.LOAD/MN.WEEK_CNT * MN.TOT_WK) AS LOAD" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_TRADE		" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_OP_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_OP_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS CM_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS CM_TRADE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.OP/MN.WEEK_CNT * MN.TOT_WK) AS OP" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.G_REV/MN.WEEK_CNT * MN.TOT_WK) AS G_REV" ).append("\n"); 
		query.append("			, MN.WEEK_CNT" ).append("\n"); 
		query.append("			, MN.TOT_WK" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT  CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY ) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY    * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.TEU_FRT_REV  * CKEY.PRS_CRNT_LOD_QTY )         AS G_REV            -- Gross Revenue(Previous)" ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.REFER_WK_CNT) AS WEEK_CNT" ).append("\n"); 
		query.append("				, MAX( WK_PER_SC.ESTIMATE_WK_CNT) AS TOT_WK" ).append("\n"); 
		query.append("			FROM  VW_RFA_KEY_LIST CKEY " ).append("\n"); 
		query.append("				, VW_REFERENCE_WEEK WK" ).append("\n"); 
		query.append("				, VW_RFA_TOT_WEEK_PER_RFA_NO WK_PER_SC" ).append("\n"); 
		query.append("			WHERE   (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) >= WK.SLS_FM_YRWK  AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) <= WK.SLS_TO_YRWK " ).append("\n"); 
		query.append("				AND CKEY.RFA_NO = WK_PER_SC.RFA_NO" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- origin" ).append("\n"); 
		query.append("		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- DEST" ).append("\n"); 
		query.append("		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("-- BY CARGO TYPE" ).append("\n"); 
		query.append("#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append("			GROUP BY CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append("		) MN" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 2. 정상적으로 REFERENCE 기간에에서 조회 되는 참조값이 없을때 contract모든 기간을 뒤져서 해당 실적이 있는지 확인후 있으면 그 데이터를 기초해 " ).append("\n"); 
		query.append("--  ESTIMATE값을 만들어 낸다." ).append("\n"); 
		query.append(", VW_RFA_EST_ACT_2ND_VALUE AS (" ).append("\n"); 
		query.append("	SELECT RFA_NO" ).append("\n"); 
		query.append("		, PRC_CTRT_NO" ).append("\n"); 
		query.append("		, LOAD" ).append("\n"); 
		query.append("		, COST_CM_OFFICE" ).append("\n"); 
		query.append("		, COST_CM_TRADE" ).append("\n"); 
		query.append("		, COST_OP_OFFICE" ).append("\n"); 
		query.append("		, CM_OFFICE" ).append("\n"); 
		query.append("		, CM_TRADE" ).append("\n"); 
		query.append("		, OP" ).append("\n"); 
		query.append("		, G_REV" ).append("\n"); 
		query.append("		, WEEK_CNT" ).append("\n"); 
		query.append("		, TOT_WK" ).append("\n"); 
		query.append("		, CM_OFFICE / DECODE(LOAD,0,1,LOAD) AS CMPB_OFFICE" ).append("\n"); 
		query.append("		, CM_TRADE /  DECODE(LOAD,0,1,LOAD) AS CMPB_TRADE" ).append("\n"); 
		query.append("		, OP /  DECODE(LOAD,0,1,LOAD) AS OPB_OFFICE" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT 	MN.RFA_NO" ).append("\n"); 
		query.append("			, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.LOAD/MN.WEEK_CNT * MN.TOT_WK) AS LOAD" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_TRADE		" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_OP_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_OP_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS CM_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS CM_TRADE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.OP/MN.WEEK_CNT * MN.TOT_WK) AS OP" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.G_REV/MN.WEEK_CNT * MN.TOT_WK) AS G_REV" ).append("\n"); 
		query.append("			, MN.WEEK_CNT" ).append("\n"); 
		query.append("			, MN.TOT_WK" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT  CKEY.RFA_NO" ).append("\n"); 
		query.append("				, CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY)   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY)    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY  * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.TEU_FRT_REV * CKEY.PRS_CRNT_LOD_QTY )         AS G_REV            -- Gross Revenue(Previous)" ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.ACTUAL_WK_CNT+WK_PER_SC.ESTIMATE_WK_CNT) AS WEEK_CNT -- 전체 범위에 대해 조회를 했기때문에" ).append("\n"); 
		query.append("				, MAX( WK_PER_SC.ESTIMATE_WK_CNT) AS TOT_WK" ).append("\n"); 
		query.append("			FROM VW_RFA_KEY_LIST CKEY " ).append("\n"); 
		query.append("				, VW_RFA_TOT_WEEK_PER_RFA_NO WK_PER_SC" ).append("\n"); 
		query.append("			WHERE NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = CKEY.PRC_CTRT_NO)" ).append("\n"); 
		query.append("				AND CKEY.RFA_NO = WK_PER_SC.RFA_NO" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- origin" ).append("\n"); 
		query.append("		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- DEST" ).append("\n"); 
		query.append("		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("-- BY CARGO TYPE" ).append("\n"); 
		query.append("#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append("			GROUP BY CKEY.RFA_NO, CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append("		) MN" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 3. 전혀 실적이 존재 하지 않을경우" ).append("\n"); 
		query.append("--  PRI_SP_SCP_RT_CMDT_ROUT의 데이터를 이용해서 ESTIMATE값을 만들어 낸다." ).append("\n"); 
		query.append(", VW_RFA_EST_ACT_3RD_VALUE AS (" ).append("\n"); 
		query.append("	SELECT 	MN.RFA_NO" ).append("\n"); 
		query.append("		, SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS LOAD" ).append("\n"); 
		query.append("		, SUM(CM_OFFICE) AS CM_OFFICE" ).append("\n"); 
		query.append("		, SUM(CM_TRADE) AS CM_TRADE" ).append("\n"); 
		query.append("		, SUM(OP) AS OP" ).append("\n"); 
		query.append("		, SUM(CM_OFFICE) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS CMPB_OFFICE	-- OFFICE PROPIT/CMPB" ).append("\n"); 
		query.append("		, SUM(CM_TRADE) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS CMPB_TRADE	-- TRADE PROPIT/CM" ).append("\n"); 
		query.append("		, SUM(OP) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS OPB_OFFICE	 --OPB(NEW)" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT  CKEY.RFA_NO" ).append("\n"); 
		query.append("			, SUM(CMDT_ROUT.PRS_ESTM_LOD_QTY  ) AS LOAD -- LOAD(NEW)" ).append("\n"); 
		query.append("			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  " ).append("\n"); 
		query.append("	       			ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  / 2" ).append("\n"); 
		query.append("	       		  END)  AS CM_OFFICE  -- AS CM_NEW_OFFICE" ).append("\n"); 
		query.append("			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT " ).append("\n"); 
		query.append("	       			ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT  / 2" ).append("\n"); 
		query.append("	       		  END)  AS CM_TRADE    --  CM_NEW_OP_TRADE " ).append("\n"); 
		query.append("			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  " ).append("\n"); 
		query.append("	       			ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  / 2" ).append("\n"); 
		query.append("	       		  END)  AS OP    --  CM_NEW_OP_TRADE " ).append("\n"); 
		query.append("		FROM  PRI_RP_SCP_RT_CMDT_ROUT CMDT_ROUT" ).append("\n"); 
		query.append("			, VW_RFA_CONTRACT_KEY CKEY" ).append("\n"); 
		query.append("			, VW_SUMMARY_WEEK WK2" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("				,(" ).append("\n"); 
		query.append("				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, CMDT_HDR_SEQ, ROUT_SEQ" ).append("\n"); 
		query.append("				       FROM (" ).append("\n"); 
		query.append("						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ" ).append("\n"); 
		query.append("							, DECODE(@[frm_ori_loc_tp]" ).append("\n"); 
		query.append("								, 'C'," ).append("\n"); 
		query.append("								       (" ).append("\n"); 
		query.append("									  SELECT CNT_CD " ).append("\n"); 
		query.append("									  FROM MDM_LOCATION " ).append("\n"); 
		query.append("									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) " ).append("\n"); 
		query.append("								       )" ).append("\n"); 
		query.append("								, 'R', " ).append("\n"); 
		query.append("									(" ).append("\n"); 
		query.append("									    SELECT RGN_CD " ).append("\n"); 
		query.append("									    FROM MDM_LOCATION " ).append("\n"); 
		query.append("									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)" ).append("\n"); 
		query.append("									 )" ).append("\n"); 
		query.append("								, NULL " ).append("\n"); 
		query.append("							)   AS LOC_CD " ).append("\n"); 
		query.append("						FROM  VW_RFA_CONTRACT_KEY MN_SET" ).append("\n"); 
		query.append("							, PRI_RP_SCP_RT_ROUT_PNT A" ).append("\n"); 
		query.append("							, PRI_RP_SCP_GRP_LOC B" ).append("\n"); 
		query.append("							, PRI_RP_SCP_GRP_LOC_DTL C" ).append("\n"); 
		query.append("						WHERE MN_SET.PROP_NO = A.PROP_NO" ).append("\n"); 
		query.append("							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ" ).append("\n"); 
		query.append("							AND A.ORG_DEST_TP_CD = 'O'" ).append("\n"); 
		query.append("							AND A.SRC_INFO_CD <> 'AD'" ).append("\n"); 
		query.append("							AND A.PROP_NO     = B.PROP_NO(+)" ).append("\n"); 
		query.append("							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)" ).append("\n"); 
		query.append("							AND B.PROP_NO     = C.PROP_NO(+)" ).append("\n"); 
		query.append("							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)" ).append("\n"); 
		query.append("							AND C.SRC_INFO_CD(+) <> 'AD'" ).append("\n"); 
		query.append("							AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = MN_SET.RFA_NO)" ).append("\n"); 
		query.append("							AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_2ND_VALUE V2 WHERE V2.PRC_CTRT_NO = MN_SET.RFA_NO)" ).append("\n"); 
		query.append("					)" ).append("\n"); 
		query.append("					WHERE LOC_CD  = @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("				) ORI_LOC" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("				,(" ).append("\n"); 
		query.append("				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, CMDT_HDR_SEQ, ROUT_SEQ" ).append("\n"); 
		query.append("				       FROM (" ).append("\n"); 
		query.append("						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ" ).append("\n"); 
		query.append("							, DECODE(@[frm_dest_loc_tp]" ).append("\n"); 
		query.append("								, 'C'," ).append("\n"); 
		query.append("								       (" ).append("\n"); 
		query.append("									  SELECT CNT_CD " ).append("\n"); 
		query.append("									  FROM MDM_LOCATION " ).append("\n"); 
		query.append("									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) " ).append("\n"); 
		query.append("								       )" ).append("\n"); 
		query.append("								, 'R', " ).append("\n"); 
		query.append("									(" ).append("\n"); 
		query.append("									    SELECT RGN_CD " ).append("\n"); 
		query.append("									    FROM MDM_LOCATION " ).append("\n"); 
		query.append("									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)" ).append("\n"); 
		query.append("									 )" ).append("\n"); 
		query.append("								, NULL " ).append("\n"); 
		query.append("							)   AS LOC_CD " ).append("\n"); 
		query.append("						FROM  VW_RFA_CONTRACT_KEY MN_SET" ).append("\n"); 
		query.append("							, PRI_RP_SCP_RT_ROUT_PNT A" ).append("\n"); 
		query.append("							, PRI_RP_SCP_GRP_LOC B" ).append("\n"); 
		query.append("							, PRI_RP_SCP_GRP_LOC_DTL C" ).append("\n"); 
		query.append("						WHERE MN_SET.PROP_NO = A.PROP_NO" ).append("\n"); 
		query.append("							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ" ).append("\n"); 
		query.append("							AND A.ORG_DEST_TP_CD = 'D'" ).append("\n"); 
		query.append("							AND A.SRC_INFO_CD <> 'AD'" ).append("\n"); 
		query.append("							AND A.PROP_NO     = B.PROP_NO(+)" ).append("\n"); 
		query.append("							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)" ).append("\n"); 
		query.append("							AND B.PROP_NO     = C.PROP_NO(+)" ).append("\n"); 
		query.append("							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)" ).append("\n"); 
		query.append("							AND C.SRC_INFO_CD(+) <> 'AD'" ).append("\n"); 
		query.append("							AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = MN_SET.RFA_NO)" ).append("\n"); 
		query.append("							AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_2ND_VALUE V2 WHERE V2.PRC_CTRT_NO = MN_SET.RFA_NO)" ).append("\n"); 
		query.append("					)" ).append("\n"); 
		query.append("					WHERE LOC_CD  = @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("				) DEST_LOC" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("		WHERE CMDT_ROUT.PROP_NO = CKEY.PROP_NO" ).append("\n"); 
		query.append("			AND CMDT_ROUT.AMDT_SEQ = 0" ).append("\n"); 
		query.append("			AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = CKEY.RFA_NO)" ).append("\n"); 
		query.append("			AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_2ND_VALUE V2 WHERE V2.PRC_CTRT_NO = CKEY.RFA_NO)" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = ORI_LOC.PROP_NO" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = ORI_LOC.AMDT_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = ORI_LOC.SVC_SCP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  ORI_LOC.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = ORI_LOC.ROUT_SEQ" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = DEST_LOC.PROP_NO" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = DEST_LOC.AMDT_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = DEST_LOC.SVC_SCP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  DEST_LOC.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = DEST_LOC.ROUT_SEQ" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("		-- BY CARGO TYPE" ).append("\n"); 
		query.append("#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PRS_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("			AND WK2.WK_TP = 1" ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append("		GROUP BY CKEY.RFA_NO" ).append("\n"); 
		query.append("	) MN" ).append("\n"); 
		query.append("	GROUP BY MN.RFA_NO" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("---------------------------------------------------------------------------------------------" ).append("\n"); 
		query.append("-- 이하 SC" ).append("\n"); 
		query.append("-- 기준이 되는 PROP_NO를 조회" ).append("\n"); 
		query.append(", VW_PROP_KEY AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */ DUR.PROP_NO , MAX(DUR.AMDT_SEQ) AS AMDT_SEQ" ).append("\n"); 
		query.append("	FROM PRI_SP_DUR DUR" ).append("\n"); 
		query.append("		, VW_CONTRACT_DT CDT" ).append("\n"); 
		query.append("	WHERE TO_CHAR(CTRT_EFF_DT,'YYYYMMDD') >= SLS_FM_DT" ).append("\n"); 
		query.append("		AND TO_CHAR(CTRT_EXP_DT,'YYYYMMDD') <= SLS_TO_DT" ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append("	GROUP BY DUR.PROP_NO" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(" -- 데이터 SELECT시 조회 조건으로 이용될 KEY LIST" ).append("\n"); 
		query.append(", VW_KEY_LIST AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE LEADING(DT SMRY HDR) FULL(HDR) */  HDR.SC_NO , PKEY.PROP_NO, PKEY.AMDT_SEQ" ).append("\n"); 
		query.append("		,SR_CST_DTL.PRS_YRMON, SR_CST_DTL.PRS_WK, SR_CST_DTL.PRC_CTRT_TP_CD, SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		, SR_CST_DTL.SVC_SCP_CD, SR_CST_DTL.VSL_SLAN_DIR_CD, SR_CST_DTL.TRD_CD, SR_CST_DTL.SUB_TRD_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.RLANE_CD, SR_CST_DTL.PRC_CGO_TP_CD, SR_CST_DTL.ORG_LOC_TP_CD, SR_CST_DTL.ORG_LOC_DEF_CD,SR_CST_DTL. DEST_LOC_TP_CD, SR_CST_DTL.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("		,SR_CST_DTL.TEU_FRT_REV, SR_CST_DTL.PRS_RESPB_CM_UC_AMT, SR_CST_DTL.PRS_PFIT_CM_UC_AMT, SR_CST_DTL.PRS_RESPB_OPFIT_UC_AMT, SR_CST_DTL.PRS_CRNT_LOD_QTY, SR_CST_DTL.PRS_RESPB_CMPB_AMT, SR_CST_DTL.PRS_PFIT_CMPB_AMT, SR_CST_DTL.PRS_RESPB_OPB_AMT" ).append("\n"); 
		query.append("	FROM " ).append("\n"); 
		query.append("		VW_CONTRACT_DT_LIST  DT    " ).append("\n"); 
		query.append("		, PRI_SP_HDR HDR" ).append("\n"); 
		query.append("		, VW_PROP_KEY PKEY" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY SMRY" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY_COST_DTL SR_CST_DTL" ).append("\n"); 
		query.append("	WHERE HDR.PROP_NO  = PKEY.PROP_NO " ).append("\n"); 
		query.append("		AND HDR.SC_NO = SMRY.PRC_CTRT_NO" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_TP_CD = 'S' -- S/C" ).append("\n"); 
		query.append("		AND SMRY.PRS_YRMON = DT.COST_YRMON    " ).append("\n"); 
		query.append("		AND SMRY.PRS_WK    = DT.COST_WK       " ).append("\n"); 
		query.append("		AND SMRY.PRS_YRMON = SR_CST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		AND SMRY.PRS_WK = SR_CST_DTL.PRS_WK" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_TP_CD = SR_CST_DTL.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_NO = SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		AND HDR.SC_NO IS NOT NULL" ).append("\n"); 
		query.append("		AND SR_CST_DTL.TRD_CD = @[frm_trd_cd]" ).append("\n"); 
		query.append("		AND SR_CST_DTL.VSL_SLAN_DIR_CD = @[frm_dir_cd]" ).append("\n"); 
		query.append("		#if(${frm_sub_trd_cd} != '')" ).append("\n"); 
		query.append("			AND SR_CST_DTL.SUB_TRD_CD = @[frm_sub_trd_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		#if(${frm_rlane_cd} != '')" ).append("\n"); 
		query.append("			AND SR_CST_DTL.RLANE_CD IN (" ).append("\n"); 
		query.append("			#foreach( ${key} in ${rlane_list}) " ).append("\n"); 
		query.append("				#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("					UNION ALL" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("				SELECT " ).append("\n"); 
		query.append("						 '$key' " ).append("\n"); 
		query.append("				FROM DUAL" ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("			)" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("			 " ).append("\n"); 
		query.append("		#if(${frm_customer_type} == 'B')" ).append("\n"); 
		query.append("					AND SMRY.PRS_CUST_TP_CD IN ('I','A','O')" ).append("\n"); 
		query.append("		#elseif(${frm_customer_type} == 'N')" ).append("\n"); 
		query.append("					AND SMRY.PRS_CUST_TP_CD IN ('N')" ).append("\n"); 
		query.append("		#else " ).append("\n"); 
		query.append("				AND SMRY.PRS_CUST_TP_CD IN ('I','A','O','N')" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_prop_ofc_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.PROP_OFC_CD = @[frm_prop_ofc_cd] -- REQUEST" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_prop_srep_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.RESPB_SREP_CD = @[frm_prop_srep_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_prop_apro_ofc_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.PROP_APRO_OFC_CD = @[frm_prop_apro_ofc_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if( $cust_list.size() != 0 ) " ).append("\n"); 
		query.append("			AND (SMRY.CUST_CNT_CD , SMRY.CUST_SEQ) IN (" ).append("\n"); 
		query.append("			#foreach( ${key} in ${cust_list}) " ).append("\n"); 
		query.append("				#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("					UNION ALL" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("				SELECT " ).append("\n"); 
		query.append("						substr('$key',1,2),substr('$key',3)" ).append("\n"); 
		query.append("				FROM DUAL" ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("			)" ).append("\n"); 
		query.append("		#end " ).append("\n"); 
		query.append(" " ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 기준이 되는 SC_NO를 조회 ( OUTER JOIN의 기준 데이터가 된다. )" ).append("\n"); 
		query.append(", VW_CONTRACT_KEY AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */ DISTINCT SC_NO , PROP_NO, AMDT_SEQ" ).append("\n"); 
		query.append("	FROM VW_KEY_LIST" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("--- 계약번호당 실적이 총 몇주차 인지 ESTIMATE에 쓰일 총 주차가 몇주차인지 계산한다." ).append("\n"); 
		query.append(", VW_TOT_WEEK_PER_SC_NO AS (" ).append("\n"); 
		query.append("SELECT /*+ MATERIALIZE */ PROP_NO , AMDT_SEQ,SC_NO" ).append("\n"); 
		query.append("	,ACTUAL_WK_CNT" ).append("\n"); 
		query.append("	,DECODE(ESTIMATE_WK_CNT	,1,0,ESTIMATE_WK_CNT	) AS ESTIMATE_WK_CNT	-- 현재주차만 걸릴경우 제외시킨다." ).append("\n"); 
		query.append("	,REFER_WK_CNT" ).append("\n"); 
		query.append("FROM (" ).append("\n"); 
		query.append("	SELECT /*+ ORDERED USE_NL(KLIST DUR) USE_HASH(KLIST PRD) */  " ).append("\n"); 
		query.append("		KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.SC_NO" ).append("\n"); 
		query.append("		, SUM(" ).append("\n"); 
		query.append("			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_TO_DT >=  KLIST.SDT_SLS_FM_DT     -- SDT.SLS_FM_DT" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("		       END " ).append("\n"); 
		query.append("		  ) AS ACTUAL_WK_CNT" ).append("\n"); 
		query.append("		, SUM(" ).append("\n"); 
		query.append("			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT  " ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				WHEN   PRD.SLS_TO_DT <=  KLIST.SDT_SLS_TO_DT   --SDT.SLS_TO_DT " ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("			END " ).append("\n"); 
		query.append("		) AS ESTIMATE_WK_CNT	" ).append("\n"); 
		query.append("		, SUM(" ).append("\n"); 
		query.append("			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_FM_DT >=  KLIST.RDT_SLS_FM_DT AND  PRD.SLS_FM_DT <= KLIST.RDT_SLS_TO_DT -- RDT.SLS_FM_DT AND  PRD.SLS_FM_DT <= RDT.SLS_TO_DT" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("		       END " ).append("\n"); 
		query.append("		  ) AS REFER_WK_CNT" ).append("\n"); 
		query.append("	FROM " ).append("\n"); 
		query.append("	         (" ).append("\n"); 
		query.append("			 SELECT  /*+ NO_MERGE ORDERED */" ).append("\n"); 
		query.append("				  SDT.SLS_FM_DT     SDT_SLS_FM_DT," ).append("\n"); 
		query.append("				  SDT.SLS_TO_DT     SDT_SLS_TO_DT," ).append("\n"); 
		query.append("				  RDT.SLS_FM_DT     RDT_SLS_FM_DT," ).append("\n"); 
		query.append("				  RDT.SLS_TO_DT     RDT_SLS_TO_DT," ).append("\n"); 
		query.append("				  KLIST.*," ).append("\n"); 
		query.append("				  1      HASH_JOIN_KEY" ).append("\n"); 
		query.append("			  FROM    VW_SUMMARY_DT    SDT" ).append("\n"); 
		query.append("				, VW_REFERENCE_DT  RDT" ).append("\n"); 
		query.append("				, VW_CONTRACT_KEY  KLIST" ).append("\n"); 
		query.append("		 )  KLIST        " ).append("\n"); 
		query.append("		, PRI_SP_DUR DUR" ).append("\n"); 
		query.append("		,(" ).append("\n"); 
		query.append("			SELECT  /*+ NO_MERGE */" ).append("\n"); 
		query.append("			     SLS_FM_DT, SLS_TO_DT," ).append("\n"); 
		query.append("			     1  HASH_JOIN_KEY" ).append("\n"); 
		query.append("			FROM   MAS_WK_PRD " ).append("\n"); 
		query.append("		)  PRD 	" ).append("\n"); 
		query.append("	WHERE DUR.PROP_NO = KLIST.PROP_NO" ).append("\n"); 
		query.append("		AND DUR.AMDT_SEQ = KLIST.AMDT_SEQ" ).append("\n"); 
		query.append("		AND KLIST.HASH_JOIN_KEY = PRD.HASH_JOIN_KEY   " ).append("\n"); 
		query.append("		AND (" ).append("\n"); 
		query.append("				(	TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') >= PRD.SLS_FM_DT " ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_TO_DT	 " ).append("\n"); 
		query.append("				)  OR (   " ).append("\n"); 
		query.append("					TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') >= PRD.SLS_FM_DT " ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') <= PRD.SLS_TO_DT " ).append("\n"); 
		query.append("				) OR (" ).append("\n"); 
		query.append("					TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_FM_DT " ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD')>= PRD.SLS_TO_DT	 " ).append("\n"); 
		query.append("				)" ).append("\n"); 
		query.append("		) " ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append("	 GROUP BY KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.SC_NO" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- ACTUAL DATA 조회" ).append("\n"); 
		query.append("-- SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) 결합 INDEX 필요" ).append("\n"); 
		query.append(", VW_ACTUAL_VALUE AS (" ).append("\n"); 
		query.append("	SELECT  CKEY.SC_NO" ).append("\n"); 
		query.append("		, CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY ) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_RESPB_CMPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  )   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )     AS CMPB_OFFICE     -- Office Profit/ CM -- CMPB(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_PFIT_CMPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  )   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )       AS CMPB_TRADE      -- Trade Profit/ CM  -- CMPB(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_RESPB_OPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY   )   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )        AS OPB             -- Office Profit/ OP -- OPB(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.PRS_CRNT_LOD_QTY * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)" ).append("\n"); 
		query.append("		, SUM(CKEY.TEU_FRT_REV  * CKEY.PRS_CRNT_LOD_QTY )         AS G_REV            -- Gross Revenue(Previous)" ).append("\n"); 
		query.append("		, MAX(WK_PER_SC.ACTUAL_WK_CNT) AS WEEK_CNT" ).append("\n"); 
		query.append("	FROM VW_KEY_LIST CKEY " ).append("\n"); 
		query.append("		, VW_SUMMARY_WEEK WK" ).append("\n"); 
		query.append("		, VW_TOT_WEEK_PER_SC_NO WK_PER_SC" ).append("\n"); 
		query.append("	WHERE  CKEY.SC_NO = WK_PER_SC.SC_NO" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- origin" ).append("\n"); 
		query.append("		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- DEST" ).append("\n"); 
		query.append("		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("-- BY CARGO TYPE" ).append("\n"); 
		query.append("#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("		AND WK.WK_TP = -1" ).append("\n"); 
		query.append("		AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) >= WK.SLS_FM_YRWK  AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) <= WK.SLS_TO_YRWK  " ).append("\n"); 
		query.append("                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("                        AND 1=1" ).append("\n"); 
		query.append("                #else" ).append("\n"); 
		query.append("                        AND 1=0" ).append("\n"); 
		query.append("                #end" ).append("\n"); 
		query.append("	GROUP BY CKEY.SC_NO, CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 1.정상적으로 REFERENCE 기간에에서 조회 되는 참조값을 SELECT해서 ESTIMATE에서 보여져야 할 값을 만든다." ).append("\n"); 
		query.append("-- SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) 결합 INDEX 필요" ).append("\n"); 
		query.append(", VW_EST_ACT_1ST_VALUE AS (" ).append("\n"); 
		query.append("	SELECT  PRC_CTRT_NO" ).append("\n"); 
		query.append("		, LOAD" ).append("\n"); 
		query.append("		, COST_CM_OFFICE" ).append("\n"); 
		query.append("		, COST_CM_TRADE" ).append("\n"); 
		query.append("		, COST_OP_OFFICE" ).append("\n"); 
		query.append("		, CM_OFFICE" ).append("\n"); 
		query.append("		, CM_TRADE" ).append("\n"); 
		query.append("		, OP" ).append("\n"); 
		query.append("		, G_REV" ).append("\n"); 
		query.append("		, WEEK_CNT" ).append("\n"); 
		query.append("		, TOT_WK" ).append("\n"); 
		query.append("		, CM_OFFICE / DECODE(LOAD,0,1,LOAD) AS CMPB_OFFICE" ).append("\n"); 
		query.append("		, CM_TRADE /  DECODE(LOAD,0,1,LOAD) AS CMPB_TRADE" ).append("\n"); 
		query.append("		, OP /  DECODE(LOAD,0,1,LOAD) AS OPB_OFFICE" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT 	 MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.LOAD/MN.WEEK_CNT * MN.TOT_WK) AS LOAD" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_TRADE		" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_OP_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_OP_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS CM_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS CM_TRADE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.OP/MN.WEEK_CNT * MN.TOT_WK) AS OP" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.G_REV/MN.WEEK_CNT * MN.TOT_WK) AS G_REV" ).append("\n"); 
		query.append("			, MN.WEEK_CNT" ).append("\n"); 
		query.append("			, MN.TOT_WK" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT  CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY)   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY)    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY  * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.TEU_FRT_REV * CKEY.PRS_CRNT_LOD_QTY)         AS G_REV            -- Gross Revenue(Previous)" ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.REFER_WK_CNT) AS WEEK_CNT" ).append("\n"); 
		query.append("				, MAX( WK_PER_SC.ESTIMATE_WK_CNT) AS TOT_WK" ).append("\n"); 
		query.append("			FROM  VW_KEY_LIST CKEY " ).append("\n"); 
		query.append("				, VW_REFERENCE_WEEK WK" ).append("\n"); 
		query.append("				, VW_TOT_WEEK_PER_SC_NO WK_PER_SC" ).append("\n"); 
		query.append("			WHERE   (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) >= WK.SLS_FM_YRWK  AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) <= WK.SLS_TO_YRWK " ).append("\n"); 
		query.append("				AND CKEY.SC_NO = WK_PER_SC.SC_NO" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- origin" ).append("\n"); 
		query.append("		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- DEST" ).append("\n"); 
		query.append("		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("-- BY CARGO TYPE" ).append("\n"); 
		query.append("#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("                                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("                                        AND 1=1" ).append("\n"); 
		query.append("                                #else" ).append("\n"); 
		query.append("                                        AND 1=0" ).append("\n"); 
		query.append("                                #end" ).append("\n"); 
		query.append("			GROUP BY CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append("		) MN" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 2. 정상적으로 REFERENCE 기간에에서 조회 되는 참조값이 없을때 contract모든 기간을 뒤져서 해당 실적이 있는지 확인후 있으면 그 데이터를 기초해 " ).append("\n"); 
		query.append("--  ESTIMATE값을 만들어 낸다." ).append("\n"); 
		query.append(", VW_EST_ACT_2ND_VALUE AS (" ).append("\n"); 
		query.append("	SELECT SC_NO" ).append("\n"); 
		query.append("		, PRC_CTRT_NO" ).append("\n"); 
		query.append("		, LOAD" ).append("\n"); 
		query.append("		, COST_CM_OFFICE" ).append("\n"); 
		query.append("		, COST_CM_TRADE" ).append("\n"); 
		query.append("		, COST_OP_OFFICE" ).append("\n"); 
		query.append("		, CM_OFFICE" ).append("\n"); 
		query.append("		, CM_TRADE" ).append("\n"); 
		query.append("		, OP" ).append("\n"); 
		query.append("		, G_REV" ).append("\n"); 
		query.append("		, WEEK_CNT" ).append("\n"); 
		query.append("		, TOT_WK" ).append("\n"); 
		query.append("		, CM_OFFICE / DECODE(LOAD,0,1,LOAD) AS CMPB_OFFICE" ).append("\n"); 
		query.append("		, CM_TRADE /  DECODE(LOAD,0,1,LOAD) AS CMPB_TRADE" ).append("\n"); 
		query.append("		, OP /  DECODE(LOAD,0,1,LOAD) AS OPB_OFFICE" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT 	MN.SC_NO" ).append("\n"); 
		query.append("			, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.LOAD/MN.WEEK_CNT * MN.TOT_WK) AS LOAD" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_TRADE		" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.COST_OP_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_OP_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS CM_OFFICE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS CM_TRADE" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.OP/MN.WEEK_CNT * MN.TOT_WK) AS OP" ).append("\n"); 
		query.append("			, DECODE(MN.WEEK_CNT,0,0,MN.G_REV/MN.WEEK_CNT * MN.TOT_WK) AS G_REV" ).append("\n"); 
		query.append("			, MN.WEEK_CNT" ).append("\n"); 
		query.append("			, MN.TOT_WK" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT  CKEY.SC_NO" ).append("\n"); 
		query.append("				, CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY ) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY  * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.PRS_CRNT_LOD_QTY * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)" ).append("\n"); 
		query.append("				, SUM(CKEY.TEU_FRT_REV * CKEY.PRS_CRNT_LOD_QTY )         AS G_REV            -- Gross Revenue(Previous)" ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.ACTUAL_WK_CNT+WK_PER_SC.ESTIMATE_WK_CNT) AS WEEK_CNT -- 전체 범위에 대해 조회를 했기때문에" ).append("\n"); 
		query.append("				, MAX( WK_PER_SC.ESTIMATE_WK_CNT) AS TOT_WK" ).append("\n"); 
		query.append("			FROM VW_KEY_LIST CKEY " ).append("\n"); 
		query.append("				, VW_TOT_WEEK_PER_SC_NO WK_PER_SC" ).append("\n"); 
		query.append("			WHERE NOT EXISTS ( SELECT 'F' FROM VW_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = CKEY.PRC_CTRT_NO)" ).append("\n"); 
		query.append("				AND CKEY.SC_NO = WK_PER_SC.SC_NO" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- origin" ).append("\n"); 
		query.append("		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- DEST" ).append("\n"); 
		query.append("		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("-- BY CARGO TYPE" ).append("\n"); 
		query.append("#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("                                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("                                        AND 1=1" ).append("\n"); 
		query.append("                                #else" ).append("\n"); 
		query.append("                                        AND 1=0" ).append("\n"); 
		query.append("                                #end" ).append("\n"); 
		query.append("			GROUP BY CKEY.SC_NO, CKEY.PRC_CTRT_NO " ).append("\n"); 
		query.append("		) MN" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 3. 전혀 실적이 존재 하지 않을경우" ).append("\n"); 
		query.append("--  PRI_SP_SCP_RT_CMDT_ROUT의 데이터를 이용해서 ESTIMATE값을 만들어 낸다." ).append("\n"); 
		query.append(", VW_EST_ACT_3RD_VALUE AS (" ).append("\n"); 
		query.append("	SELECT 	MN.SC_NO" ).append("\n"); 
		query.append("		, SUM(LOAD  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS LOAD" ).append("\n"); 
		query.append("		, SUM(CM_OFFICE) AS CM_OFFICE" ).append("\n"); 
		query.append("		, SUM(CM_TRADE) AS CM_TRADE" ).append("\n"); 
		query.append("		, SUM(OP) AS OP" ).append("\n"); 
		query.append("		, SUM(CM_OFFICE) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS CMPB_OFFICE	-- OFFICE PROPIT/CMPB" ).append("\n"); 
		query.append("		, SUM(CM_TRADE) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS CMPB_TRADE	-- TRADE PROPIT/CM" ).append("\n"); 
		query.append("		, SUM(OP) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS OPB_OFFICE	 --OPB(NEW)" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT  CKEY.SC_NO" ).append("\n"); 
		query.append("			, SUM(CMDT_ROUT.PRS_ESTM_LOD_QTY ) AS LOAD -- LOAD(NEW)" ).append("\n"); 
		query.append("			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  " ).append("\n"); 
		query.append("	       			ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  / 2" ).append("\n"); 
		query.append("	       		  END)  AS CM_OFFICE  -- AS CM_NEW_OFFICE" ).append("\n"); 
		query.append("			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT " ).append("\n"); 
		query.append("	       			ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT  / 2" ).append("\n"); 
		query.append("	       		  END)  AS CM_TRADE    --  CM_NEW_OP_TRADE " ).append("\n"); 
		query.append("			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  " ).append("\n"); 
		query.append("	       			ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  / 2" ).append("\n"); 
		query.append("	       		  END)  AS OP    --  CM_NEW_OP_TRADE " ).append("\n"); 
		query.append("		FROM  PRI_SP_SCP_RT_CMDT_ROUT CMDT_ROUT" ).append("\n"); 
		query.append("			, VW_CONTRACT_KEY CKEY" ).append("\n"); 
		query.append("			, VW_SUMMARY_WEEK WK2" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("				,(" ).append("\n"); 
		query.append("				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, GEN_SPCL_RT_TP_CD, CMDT_HDR_SEQ, ROUT_SEQ" ).append("\n"); 
		query.append("				       FROM (" ).append("\n"); 
		query.append("						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.GEN_SPCL_RT_TP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ" ).append("\n"); 
		query.append("							, DECODE(@[frm_ori_loc_tp]" ).append("\n"); 
		query.append("								, 'C'," ).append("\n"); 
		query.append("								       (" ).append("\n"); 
		query.append("									  SELECT CNT_CD " ).append("\n"); 
		query.append("									  FROM MDM_LOCATION " ).append("\n"); 
		query.append("									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) " ).append("\n"); 
		query.append("								       )" ).append("\n"); 
		query.append("								, 'R', " ).append("\n"); 
		query.append("									(" ).append("\n"); 
		query.append("									    SELECT RGN_CD " ).append("\n"); 
		query.append("									    FROM MDM_LOCATION " ).append("\n"); 
		query.append("									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)" ).append("\n"); 
		query.append("									 )" ).append("\n"); 
		query.append("								, NULL " ).append("\n"); 
		query.append("							)   AS LOC_CD " ).append("\n"); 
		query.append("						FROM  VW_CONTRACT_KEY MN_SET" ).append("\n"); 
		query.append("							, PRI_SP_SCP_RT_ROUT_PNT A" ).append("\n"); 
		query.append("							, PRI_SP_SCP_GRP_LOC B" ).append("\n"); 
		query.append("							, PRI_SP_SCP_GRP_LOC_DTL C" ).append("\n"); 
		query.append("						WHERE MN_SET.PROP_NO = A.PROP_NO" ).append("\n"); 
		query.append("							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ" ).append("\n"); 
		query.append("							AND A.ORG_DEST_TP_CD = 'O'" ).append("\n"); 
		query.append("							AND A.SRC_INFO_CD <> 'AD'" ).append("\n"); 
		query.append("							AND A.PROP_NO     = B.PROP_NO(+)" ).append("\n"); 
		query.append("							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)" ).append("\n"); 
		query.append("							AND B.PROP_NO     = C.PROP_NO(+)" ).append("\n"); 
		query.append("							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)" ).append("\n"); 
		query.append("							AND C.SRC_INFO_CD(+) <> 'AD'" ).append("\n"); 
		query.append("					)" ).append("\n"); 
		query.append("					WHERE LOC_CD  = @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("				) ORI_LOC" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("				,(" ).append("\n"); 
		query.append("				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, GEN_SPCL_RT_TP_CD, CMDT_HDR_SEQ, ROUT_SEQ" ).append("\n"); 
		query.append("				       FROM (" ).append("\n"); 
		query.append("						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.GEN_SPCL_RT_TP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ" ).append("\n"); 
		query.append("							, DECODE(@[frm_dest_loc_tp]" ).append("\n"); 
		query.append("								, 'C'," ).append("\n"); 
		query.append("								       (" ).append("\n"); 
		query.append("									  SELECT CNT_CD " ).append("\n"); 
		query.append("									  FROM MDM_LOCATION " ).append("\n"); 
		query.append("									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) " ).append("\n"); 
		query.append("								       )" ).append("\n"); 
		query.append("								, 'R', " ).append("\n"); 
		query.append("									(" ).append("\n"); 
		query.append("									    SELECT RGN_CD " ).append("\n"); 
		query.append("									    FROM MDM_LOCATION " ).append("\n"); 
		query.append("									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)" ).append("\n"); 
		query.append("									 )" ).append("\n"); 
		query.append("								, NULL " ).append("\n"); 
		query.append("							)   AS LOC_CD " ).append("\n"); 
		query.append("						FROM  VW_CONTRACT_KEY MN_SET" ).append("\n"); 
		query.append("							, PRI_SP_SCP_RT_ROUT_PNT A" ).append("\n"); 
		query.append("							, PRI_SP_SCP_GRP_LOC B" ).append("\n"); 
		query.append("							, PRI_SP_SCP_GRP_LOC_DTL C" ).append("\n"); 
		query.append("						WHERE MN_SET.PROP_NO = A.PROP_NO" ).append("\n"); 
		query.append("							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ" ).append("\n"); 
		query.append("							AND A.ORG_DEST_TP_CD = 'D'" ).append("\n"); 
		query.append("							AND A.SRC_INFO_CD <> 'AD'" ).append("\n"); 
		query.append("							AND A.PROP_NO     = B.PROP_NO(+)" ).append("\n"); 
		query.append("							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)" ).append("\n"); 
		query.append("							AND B.PROP_NO     = C.PROP_NO(+)" ).append("\n"); 
		query.append("							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)" ).append("\n"); 
		query.append("							AND C.SRC_INFO_CD(+) <> 'AD'" ).append("\n"); 
		query.append("					)" ).append("\n"); 
		query.append("					WHERE LOC_CD  = @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("				) DEST_LOC" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("		WHERE CMDT_ROUT.PROP_NO = CKEY.PROP_NO" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = ORI_LOC.PROP_NO" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = ORI_LOC.AMDT_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = ORI_LOC.SVC_SCP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.GEN_SPCL_RT_TP_CD = ORI_LOC.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  ORI_LOC.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = ORI_LOC.ROUT_SEQ" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = DEST_LOC.PROP_NO" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = DEST_LOC.AMDT_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = DEST_LOC.SVC_SCP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.GEN_SPCL_RT_TP_CD = DEST_LOC.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  DEST_LOC.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = DEST_LOC.ROUT_SEQ" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("		-- BY CARGO TYPE" ).append("\n"); 
		query.append("#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PRS_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("			AND CMDT_ROUT.AMDT_SEQ = 0" ).append("\n"); 
		query.append("			AND NOT EXISTS ( SELECT 'F' FROM VW_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = CKEY.SC_NO)" ).append("\n"); 
		query.append("			AND NOT EXISTS ( SELECT 'F' FROM VW_EST_ACT_2ND_VALUE V2 WHERE V2.PRC_CTRT_NO = CKEY.SC_NO)" ).append("\n"); 
		query.append("			AND WK2.WK_TP = 1" ).append("\n"); 
		query.append("                        #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("                                AND 1=1" ).append("\n"); 
		query.append("                        #else" ).append("\n"); 
		query.append("                                AND 1=0" ).append("\n"); 
		query.append("                        #end" ).append("\n"); 
		query.append("		GROUP BY CKEY.SC_NO" ).append("\n"); 
		query.append("	) MN" ).append("\n"); 
		query.append("	GROUP BY MN.SC_NO" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  A_SC_NO                   " ).append("\n"); 
		query.append("	, E1_SC_NO                 " ).append("\n"); 
		query.append("	, E2_SC_NO                 " ).append("\n"); 
		query.append("	, E3_SC_NO                       " ).append("\n"); 
		query.append("	, A1_LOAD                       " ).append("\n"); 
		query.append("	, A1_COST_CM_OFFICE     " ).append("\n"); 
		query.append("	, A1_COST_CM_TRADE      " ).append("\n"); 
		query.append("	, A1_COST_OP_OFFICE     " ).append("\n"); 
		query.append("	, A1_CMPB_OFFICE        " ).append("\n"); 
		query.append("	, A1_CMPB_TRADE         " ).append("\n"); 
		query.append("	, A1_CM_OFFICE          " ).append("\n"); 
		query.append("	, A1_CM_TRADE           " ).append("\n"); 
		query.append("	, A1_OPB                 " ).append("\n"); 
		query.append("	, A1_OP                  " ).append("\n"); 
		query.append("	, A1_G_REV               " ).append("\n"); 
		query.append("	, A1_WEEK_CNT           " ).append("\n"); 
		query.append("	, E1_LOAD           " ).append("\n"); 
		query.append("	, E1_CM_OFFICE      " ).append("\n"); 
		query.append("	, E1_CM_TRADE       " ).append("\n"); 
		query.append("	, E1_OP             " ).append("\n"); 
		query.append("	, E1_CMPB_OFFICE    " ).append("\n"); 
		query.append("	, E1_CMPB_TRADE     " ).append("\n"); 
		query.append("	, E1_OPB    " ).append("\n"); 
		query.append("	, E1_TOT_WK         " ).append("\n"); 
		query.append("	, E1_COST_CM_OFFICE " ).append("\n"); 
		query.append("	, E1_COST_CM_TRADE  " ).append("\n"); 
		query.append("	, E1_COST_OP_OFFICE " ).append("\n"); 
		query.append("	, E1_G_REV          " ).append("\n"); 
		query.append("	, EST_TP" ).append("\n"); 
		query.append("	, A1_LOAD + E1_LOAD AS SUM_LOAD" ).append("\n"); 
		query.append("	, A1_G_REV + E1_G_REV AS SUM_GREV" ).append("\n"); 
		query.append("	, A1_COST_CM_OFFICE + E1_COST_CM_OFFICE AS SUM_COST_CM_OFFICE" ).append("\n"); 
		query.append("	, A1_COST_CM_TRADE + E1_COST_CM_TRADE AS SUM_COST_CM_TRADE" ).append("\n"); 
		query.append("	, A1_COST_OP_OFFICE + E1_COST_OP_OFFICE AS SUM_COST_OP_OFFICE" ).append("\n"); 
		query.append("	, A1_WEEK_CNT + E1_TOT_WK AS SUM_WEEK" ).append("\n"); 
		query.append("	, A1_CM_OFFICE + E1_CM_OFFICE AS SUM_CM_OFFICE" ).append("\n"); 
		query.append("	, A1_CM_TRADE + E1_CM_TRADE AS SUM_CM_TRADE" ).append("\n"); 
		query.append("	, A1_OP + E1_OP AS SUM_OP" ).append("\n"); 
		query.append("	, (A1_CMPB_OFFICE	- E1_CMPB_OFFICE	) / DECODE(E1_CMPB_OFFICE, 0,	TO_NUMBER(NULL)	, ABS(E1_CMPB_OFFICE)) * 100 AS DIFF_CMPB_OFFICE" ).append("\n"); 
		query.append("	, (A1_CMPB_TRADE	- E1_CMPB_TRADE		) / DECODE(E1_CMPB_TRADE, 0,	TO_NUMBER(NULL)		, ABS(E1_CMPB_TRADE)) * 100 AS DIFF_CMPB_TRADE" ).append("\n"); 
		query.append("	, (A1_OPB		- E1_OPB		) / DECODE(E1_OPB, 0,		TO_NUMBER(NULL)			, ABS(E1_OPB)) * 100  AS DIFF_OPB" ).append("\n"); 
		query.append("	, C.CUST_CNT_CD || TO_CHAR(C.CUST_SEQ,'FM000000') || ' - ' || C.CTRT_PTY_NM AS CUST_NM" ).append("\n"); 
		query.append("	, M.PROP_OFC_CD" ).append("\n"); 
		query.append("	,  ( " ).append("\n"); 
		query.append("		       CASE WHEN Q.CNTR_LOD_UT_CD = 'F' AND @[frm_pfmc_unit] = 'TEU' THEN " ).append("\n"); 
		query.append("			   Q.FNL_MQC_QTY * 2" ).append("\n"); 
		query.append("		       WHEN Q.CNTR_LOD_UT_CD = 'T' AND @[frm_pfmc_unit] = 'FEU' THEN" ).append("\n"); 
		query.append("			   Q.FNL_MQC_QTY /2" ).append("\n"); 
		query.append("		       ELSE Q.FNL_MQC_QTY" ).append("\n"); 
		query.append("		       END" ).append("\n"); 
		query.append("	)  AS MQC_QTY" ).append("\n"); 
		query.append("	, 'SC' AS CONTRACT_NM" ).append("\n"); 
		query.append("FROM (" ).append("\n"); 
		query.append("	SELECT /*+USE_HASH(CKEY,AVALUE,ETS_1ST,ETS_2ND,ETS_3RD)*/ CKEY.SC_NO" ).append("\n"); 
		query.append("		, CKEY.PROP_NO" ).append("\n"); 
		query.append("		, CKEY.AMDT_SEQ" ).append("\n"); 
		query.append("		, CKEY.SC_NO AS A_SC_NO" ).append("\n"); 
		query.append("		, ETS_1ST.PRC_CTRT_NO AS E1_SC_NO" ).append("\n"); 
		query.append("		, ETS_2ND.PRC_CTRT_NO AS E2_SC_NO" ).append("\n"); 
		query.append("		, ETS_3RD.SC_NO AS E3_SC_NO" ).append("\n"); 
		query.append("		, AVALUE.LOAD	 AS A1_LOAD" ).append("\n"); 
		query.append("		, AVALUE.COST_CM_OFFICE	 AS A1_COST_CM_OFFICE" ).append("\n"); 
		query.append("		, AVALUE.COST_CM_TRADE	 AS A1_COST_CM_TRADE" ).append("\n"); 
		query.append("		, AVALUE.COST_OP_OFFICE	 AS A1_COST_OP_OFFICE" ).append("\n"); 
		query.append("		, AVALUE.CMPB_OFFICE	 AS A1_CMPB_OFFICE" ).append("\n"); 
		query.append("		, AVALUE.CMPB_TRADE	 AS A1_CMPB_TRADE" ).append("\n"); 
		query.append("		, AVALUE.CM_OFFICE	 AS A1_CM_OFFICE" ).append("\n"); 
		query.append("		, AVALUE.CM_TRADE	 AS A1_CM_TRADE" ).append("\n"); 
		query.append("		, AVALUE.OPB		AS A1_OPB" ).append("\n"); 
		query.append("		, AVALUE.OP		AS A1_OP" ).append("\n"); 
		query.append("		, AVALUE.G_REV		AS A1_G_REV" ).append("\n"); 
		query.append("		, AVALUE.WEEK_CNT	 AS A1_WEEK_CNT" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.LOAD,ETS_2ND.LOAD),ETS_1ST.LOAD)				AS E1_LOAD" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CM_OFFICE,ETS_2ND.CM_OFFICE),ETS_1ST.CM_OFFICE)		AS E1_CM_OFFICE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CM_TRADE,ETS_2ND.CM_TRADE),ETS_1ST.CM_TRADE)		AS E1_CM_TRADE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.OP,ETS_2ND.OP),ETS_1ST.OP)					AS E1_OP" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CMPB_OFFICE,ETS_2ND.CMPB_OFFICE),ETS_1ST.CMPB_OFFICE)	AS E1_CMPB_OFFICE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CMPB_TRADE,ETS_2ND.CMPB_TRADE),ETS_1ST.CMPB_TRADE)		AS E1_CMPB_TRADE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.OPB_OFFICE,ETS_2ND.OPB_OFFICE),ETS_1ST.OPB_OFFICE)		AS E1_OPB" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.TOT_WK),ETS_1ST.TOT_WK)				AS E1_TOT_WK" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_CM_OFFICE),ETS_1ST.COST_CM_OFFICE)		AS E1_COST_CM_OFFICE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_CM_TRADE),ETS_1ST.COST_CM_TRADE)			AS E1_COST_CM_TRADE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_OP_OFFICE),ETS_1ST.COST_OP_OFFICE)		AS E1_COST_OP_OFFICE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.G_REV),ETS_1ST.G_REV)					AS E1_G_REV" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,3,2),1)								AS EST_TP" ).append("\n"); 
		query.append("	FROM VW_CONTRACT_KEY CKEY" ).append("\n"); 
		query.append("		, VW_ACTUAL_VALUE AVALUE" ).append("\n"); 
		query.append("		, VW_EST_ACT_1ST_VALUE ETS_1ST" ).append("\n"); 
		query.append("		, VW_EST_ACT_2ND_VALUE ETS_2ND" ).append("\n"); 
		query.append("		, VW_EST_ACT_3RD_VALUE ETS_3RD" ).append("\n"); 
		query.append("	WHERE CKEY.SC_NO = AVALUE.SC_NO(+)" ).append("\n"); 
		query.append("		AND CKEY.SC_NO = ETS_1ST.PRC_CTRT_NO(+)" ).append("\n"); 
		query.append("		AND CKEY.SC_NO = ETS_2ND.PRC_CTRT_NO(+)" ).append("\n"); 
		query.append("		AND CKEY.SC_NO = ETS_3RD.SC_NO(+)" ).append("\n"); 
		query.append(") MN" ).append("\n"); 
		query.append(", PRI_SP_MN M" ).append("\n"); 
		query.append(", PRI_SP_CTRT_PTY C" ).append("\n"); 
		query.append(", PRI_SP_MQC Q" ).append("\n"); 
		query.append("WHERE" ).append("\n"); 
		query.append("	 MN.PROP_NO = M.PROP_NO" ).append("\n"); 
		query.append("	AND MN.AMDT_SEQ = M.AMDT_SEQ" ).append("\n"); 
		query.append("	AND M.PROP_NO = C.PROP_NO " ).append("\n"); 
		query.append("	AND  M.AMDT_SEQ = C.AMDT_SEQ" ).append("\n"); 
		query.append("	AND M.PROP_NO = Q.PROP_NO (+)" ).append("\n"); 
		query.append("	AND  M.AMDT_SEQ = Q.AMDT_SEQ(+)" ).append("\n"); 
		query.append("	AND C.PRC_CTRT_PTY_TP_CD = 'C'" ).append("\n"); 
		query.append("#if (${code_tp_cd} == 'A') " ).append("\n"); 
		query.append("	AND M.PROP_OFC_CD IN " ).append("\n"); 
		query.append("#elseif (${code_tp_cd} == 'B') " ).append("\n"); 
		query.append("	AND C.CUST_CNT_CD || TO_CHAR(C.CUST_SEQ,'FM000000' ) IN" ).append("\n"); 
		query.append("#elseif (${code_tp_cd} == 'C') " ).append("\n"); 
		query.append("	AND M.RESPB_SREP_CD IN " ).append("\n"); 
		query.append("#else " ).append("\n"); 
		query.append("	AND MN.A_SC_NO IN " ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("	 ( " ).append("\n"); 
		query.append("				#foreach( ${key} in ${target_list}) " ).append("\n"); 
		query.append("					#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("							," ).append("\n"); 
		query.append("					#end" ).append("\n"); 
		query.append("						'$key'" ).append("\n"); 
		query.append("				#end " ).append("\n"); 
		query.append("			" ).append("\n"); 
		query.append("	  )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- RFA" ).append("\n"); 
		query.append("SELECT  A_SC_NO                   " ).append("\n"); 
		query.append("	, E1_SC_NO                 " ).append("\n"); 
		query.append("	, E2_SC_NO                 " ).append("\n"); 
		query.append("	, E3_SC_NO                       " ).append("\n"); 
		query.append("	, A1_LOAD                       " ).append("\n"); 
		query.append("	, A1_COST_CM_OFFICE     " ).append("\n"); 
		query.append("	, A1_COST_CM_TRADE      " ).append("\n"); 
		query.append("	, A1_COST_OP_OFFICE     " ).append("\n"); 
		query.append("	, A1_CMPB_OFFICE        " ).append("\n"); 
		query.append("	, A1_CMPB_TRADE         " ).append("\n"); 
		query.append("	, A1_CM_OFFICE          " ).append("\n"); 
		query.append("	, A1_CM_TRADE           " ).append("\n"); 
		query.append("	, A1_OPB                 " ).append("\n"); 
		query.append("	, A1_OP                  " ).append("\n"); 
		query.append("	, A1_G_REV               " ).append("\n"); 
		query.append("	, A1_WEEK_CNT           " ).append("\n"); 
		query.append("	, E1_LOAD           " ).append("\n"); 
		query.append("	, E1_CM_OFFICE      " ).append("\n"); 
		query.append("	, E1_CM_TRADE       " ).append("\n"); 
		query.append("	, E1_OP             " ).append("\n"); 
		query.append("	, E1_CMPB_OFFICE    " ).append("\n"); 
		query.append("	, E1_CMPB_TRADE     " ).append("\n"); 
		query.append("	, E1_OPB    " ).append("\n"); 
		query.append("	, E1_TOT_WK         " ).append("\n"); 
		query.append("	, E1_COST_CM_OFFICE " ).append("\n"); 
		query.append("	, E1_COST_CM_TRADE  " ).append("\n"); 
		query.append("	, E1_COST_OP_OFFICE " ).append("\n"); 
		query.append("	, E1_G_REV          " ).append("\n"); 
		query.append("	, EST_TP" ).append("\n"); 
		query.append("	, A1_LOAD + E1_LOAD AS SUM_LOAD" ).append("\n"); 
		query.append("	, A1_G_REV + E1_G_REV AS SUM_GREV" ).append("\n"); 
		query.append("	, A1_COST_CM_OFFICE + E1_COST_CM_OFFICE AS SUM_COST_CM_OFFICE" ).append("\n"); 
		query.append("	, A1_COST_CM_TRADE + E1_COST_CM_TRADE AS SUM_COST_CM_TRADE" ).append("\n"); 
		query.append("	, A1_COST_OP_OFFICE + E1_COST_OP_OFFICE AS SUM_COST_OP_OFFICE" ).append("\n"); 
		query.append("	, A1_WEEK_CNT + E1_TOT_WK AS SUM_WEEK" ).append("\n"); 
		query.append("	, A1_CM_OFFICE + E1_CM_OFFICE AS SUM_CM_OFFICE" ).append("\n"); 
		query.append("	, A1_CM_TRADE + E1_CM_TRADE AS SUM_CM_TRADE" ).append("\n"); 
		query.append("	, A1_OP + E1_OP AS SUM_OP" ).append("\n"); 
		query.append("	, (A1_CMPB_OFFICE	- E1_CMPB_OFFICE	) / DECODE(E1_CMPB_OFFICE, 0,	TO_NUMBER(NULL)	, ABS(E1_CMPB_OFFICE)) * 100 AS DIFF_CMPB_OFFICE" ).append("\n"); 
		query.append("	, (A1_CMPB_TRADE	- E1_CMPB_TRADE		) / DECODE(E1_CMPB_TRADE, 0,	TO_NUMBER(NULL)		, ABS(E1_CMPB_TRADE)) * 100 AS DIFF_CMPB_TRADE" ).append("\n"); 
		query.append("	, (A1_OPB		- E1_OPB		) / DECODE(E1_OPB, 0,		TO_NUMBER(NULL)			, ABS(E1_OPB)) * 100  AS DIFF_OPB" ).append("\n"); 
		query.append("        , M.CTRT_CUST_CNT_CD || TO_CHAR(M.CTRT_CUST_SEQ,'FM000000') || ' - ' || CUST.CUST_LGL_ENG_NM AS CUST_NM" ).append("\n"); 
		query.append("        , M.PROP_OFC_CD" ).append("\n"); 
		query.append("	, (" ).append("\n"); 
		query.append("			CASE WHEN M.CNTR_LOD_UT_CD = 'F' AND @[frm_pfmc_unit] = 'TEU' THEN" ).append("\n"); 
		query.append("			M.TGT_MVC_QTY * 2" ).append("\n"); 
		query.append("			WHEN M.CNTR_LOD_UT_CD = 'T' AND @[frm_pfmc_unit] = 'FEU' THEN" ).append("\n"); 
		query.append("			M.TGT_MVC_QTY /2" ).append("\n"); 
		query.append("			ELSE M.TGT_MVC_QTY" ).append("\n"); 
		query.append("			END" ).append("\n"); 
		query.append("	)  AS MQC_QTY" ).append("\n"); 
		query.append("	, 'RFA' AS CONTRACT_NM" ).append("\n"); 
		query.append("FROM (" ).append("\n"); 
		query.append("	SELECT /*+USE_HASH(CKEY,AVALUE,ETS_1ST,ETS_2ND,ETS_3RD)*/ CKEY.RFA_NO" ).append("\n"); 
		query.append("		, CKEY.PROP_NO" ).append("\n"); 
		query.append("		, CKEY.AMDT_SEQ" ).append("\n"); 
		query.append("		, CKEY.RFA_NO AS A_SC_NO" ).append("\n"); 
		query.append("		, ETS_1ST.PRC_CTRT_NO AS E1_SC_NO" ).append("\n"); 
		query.append("		, ETS_2ND.PRC_CTRT_NO AS E2_SC_NO" ).append("\n"); 
		query.append("		, ETS_3RD.RFA_NO AS E3_SC_NO" ).append("\n"); 
		query.append("		, AVALUE.LOAD	 AS A1_LOAD" ).append("\n"); 
		query.append("		, AVALUE.COST_CM_OFFICE	 AS A1_COST_CM_OFFICE" ).append("\n"); 
		query.append("		, AVALUE.COST_CM_TRADE	 AS A1_COST_CM_TRADE" ).append("\n"); 
		query.append("		, AVALUE.COST_OP_OFFICE	 AS A1_COST_OP_OFFICE" ).append("\n"); 
		query.append("		, AVALUE.CMPB_OFFICE	 AS A1_CMPB_OFFICE" ).append("\n"); 
		query.append("		, AVALUE.CMPB_TRADE	 AS A1_CMPB_TRADE" ).append("\n"); 
		query.append("		, AVALUE.CM_OFFICE	 AS A1_CM_OFFICE" ).append("\n"); 
		query.append("		, AVALUE.CM_TRADE	 AS A1_CM_TRADE" ).append("\n"); 
		query.append("		, AVALUE.OPB		AS A1_OPB" ).append("\n"); 
		query.append("		, AVALUE.OP		AS A1_OP" ).append("\n"); 
		query.append("		, AVALUE.G_REV		AS A1_G_REV" ).append("\n"); 
		query.append("		, AVALUE.WEEK_CNT	 AS A1_WEEK_CNT" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.LOAD,ETS_2ND.LOAD),ETS_1ST.LOAD)				AS E1_LOAD" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CM_OFFICE,ETS_2ND.CM_OFFICE),ETS_1ST.CM_OFFICE)		AS E1_CM_OFFICE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CM_TRADE,ETS_2ND.CM_TRADE),ETS_1ST.CM_TRADE)		AS E1_CM_TRADE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.OP,ETS_2ND.OP),ETS_1ST.OP)					AS E1_OP" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CMPB_OFFICE,ETS_2ND.CMPB_OFFICE),ETS_1ST.CMPB_OFFICE)	AS E1_CMPB_OFFICE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CMPB_TRADE,ETS_2ND.CMPB_TRADE),ETS_1ST.CMPB_TRADE)		AS E1_CMPB_TRADE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.OPB_OFFICE,ETS_2ND.OPB_OFFICE),ETS_1ST.OPB_OFFICE)		AS E1_OPB" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.TOT_WK),ETS_1ST.TOT_WK)				AS E1_TOT_WK" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_CM_OFFICE),ETS_1ST.COST_CM_OFFICE)		AS E1_COST_CM_OFFICE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_CM_TRADE),ETS_1ST.COST_CM_TRADE)			AS E1_COST_CM_TRADE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_OP_OFFICE),ETS_1ST.COST_OP_OFFICE)		AS E1_COST_OP_OFFICE" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.G_REV),ETS_1ST.G_REV)					AS E1_G_REV" ).append("\n"); 
		query.append("		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,3,2),1)								AS EST_TP" ).append("\n"); 
		query.append("	FROM VW_RFA_CONTRACT_KEY CKEY" ).append("\n"); 
		query.append("		, VW_RFA_ACTUAL_VALUE AVALUE" ).append("\n"); 
		query.append("		, VW_RFA_EST_ACT_1ST_VALUE ETS_1ST" ).append("\n"); 
		query.append("		, VW_RFA_EST_ACT_2ND_VALUE ETS_2ND" ).append("\n"); 
		query.append("		, VW_RFA_EST_ACT_3RD_VALUE ETS_3RD" ).append("\n"); 
		query.append("	WHERE CKEY.RFA_NO = AVALUE.RFA_NO(+)" ).append("\n"); 
		query.append("		AND CKEY.RFA_NO = ETS_1ST.PRC_CTRT_NO(+)" ).append("\n"); 
		query.append("		AND CKEY.RFA_NO = ETS_2ND.PRC_CTRT_NO(+)" ).append("\n"); 
		query.append("		AND CKEY.RFA_NO = ETS_3RD.RFA_NO(+)" ).append("\n"); 
		query.append(") MN" ).append("\n"); 
		query.append(", PRI_RP_MN M" ).append("\n"); 
		query.append(", MDM_CUSTOMER CUST" ).append("\n"); 
		query.append("WHERE" ).append("\n"); 
		query.append("	 MN.PROP_NO = M.PROP_NO" ).append("\n"); 
		query.append("	AND MN.AMDT_SEQ = M.AMDT_SEQ" ).append("\n"); 
		query.append("        AND CUST.CUST_CNT_CD = M.CTRT_CUST_CNT_CD" ).append("\n"); 
		query.append("        AND CUST.CUST_SEQ = M.CTRT_CUST_SEQ" ).append("\n"); 
		query.append("#if (${code_tp_cd} == 'A') " ).append("\n"); 
		query.append("	AND M.PROP_OFC_CD IN " ).append("\n"); 
		query.append("#elseif (${code_tp_cd} == 'B') " ).append("\n"); 
		query.append("	AND  M.CTRT_CUST_CNT_CD || TO_CHAR(M.CTRT_CUST_SEQ,'FM000000' ) IN" ).append("\n"); 
		query.append("#elseif (${code_tp_cd} == 'C') " ).append("\n"); 
		query.append("	AND M.RESPB_SREP_CD IN " ).append("\n"); 
		query.append("#else " ).append("\n"); 
		query.append("	AND MN.A_SC_NO IN " ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("	 ( " ).append("\n"); 
		query.append("				#foreach( ${key} in ${target_list}) " ).append("\n"); 
		query.append("					#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("							," ).append("\n"); 
		query.append("					#end" ).append("\n"); 
		query.append("						'$key'" ).append("\n"); 
		query.append("				#end " ).append("\n"); 
		query.append("			" ).append("\n"); 
		query.append("	  )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("ORDER BY CONTRACT_NM DESC ," ).append("\n"); 
		query.append("#if (${code_tp_cd} == 'A') " ).append("\n"); 
		query.append("	PROP_OFC_CD" ).append("\n"); 
		query.append("#elseif (${code_tp_cd} == 'B') " ).append("\n"); 
		query.append("	CUST_NM" ).append("\n"); 
		query.append("#elseif (${code_tp_cd} == 'C') " ).append("\n"); 
		query.append("	RESPB_SREP_CD" ).append("\n"); 
		query.append("#else " ).append("\n"); 
		query.append("	A_SC_NO" ).append("\n"); 
		query.append("#end" ).append("\n"); 

	}
}