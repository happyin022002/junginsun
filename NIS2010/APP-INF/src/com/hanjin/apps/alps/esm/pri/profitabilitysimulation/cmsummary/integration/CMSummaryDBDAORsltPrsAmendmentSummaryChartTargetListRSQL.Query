<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="CMSummaryDBDAORsltPrsAmendmentSummaryChartTargetListRSQL">
			<desc><![CDATA[chart화면 grid에서 사용될 대상 목록을 조회한다.

* History
2015.06.26 CHM-201536492 Split05-주간 MAS Open에 따른 타모듈 프로그램 적용 요청]]></desc>
			<sql><![CDATA[
WITH VW_CONTRACT_DT AS (
	SELECT  /*+ MATERIALIZE */ MIN(SLS_FM_DT) AS  SLS_FM_DT, MAX(SLS_TO_DT)  AS SLS_TO_DT
	FROM MAS_WK_PRD
	WHERE (COST_YR = @[frm_ctrt_eff_yr] AND COST_WK = @[frm_ctrt_eff_wk])
		OR (COST_YR = @[frm_ctrt_exp_yr] AND COST_WK = @[frm_ctrt_exp_wk])
)
, VW_CONTRACT_DT_LIST AS (
	SELECT  /*+ MATERIALIZE */ COST_YR||substr(SLS_TO_DT,5,2) as COST_YRMON,COST_WK
	FROM MAS_WK_PRD
	WHERE (COST_YR  || COST_WK) >= (@[frm_ctrt_eff_yr] || @[frm_ctrt_eff_wk])  AND (COST_YR || COST_WK )<= (@[frm_ctrt_exp_yr] || @[frm_ctrt_exp_wk])
)
,VW_SUMMARY_DT AS (
	SELECT  /*+ MATERIALIZE */ MIN(SLS_FM_DT)  AS  SLS_FM_DT, MAX(SLS_TO_DT)  AS SLS_TO_DT
	FROM MAS_WK_PRD
	WHERE (COST_YR = @[frm_smr_eff_yr] AND COST_WK = @[frm_smr_eff_wk])
		OR (COST_YR = @[frm_smr_exp_yr] AND COST_WK = @[frm_smr_exp_wk])
)
,VW_REFERENCE_DT AS (
	SELECT  /*+ MATERIALIZE */ MIN(SLS_FM_DT)  AS  SLS_FM_DT,  MAX(SLS_TO_DT)  AS SLS_TO_DT
	FROM MAS_WK_PRD
	WHERE  (COST_YR = @[frm_rfrc_eff_yr] AND COST_WK = @[frm_rfrc_eff_wk])
		OR (COST_YR = @[frm_rfrc_exp_yr] AND COST_WK = @[frm_rfrc_exp_wk])

)
-- SUMMARY에서 입력한 주차를 이용해 현재 날짜 이전 주차는 WK_TP : -1 , 현재 주차 : 0 , 미래주차 : 1
, VW_SUMMARY_WEEK AS (
	SELECT  /*+ MATERIALIZE */ SLS_FM_YRWK,SLS_FM_DT,SLS_TO_YRWK,SLS_TO_DT,WK_TP
		,(SELECT COUNT(*) FROM MAS_WK_PRD PRD WHERE (PRD.COST_YR || PRD.COST_WK >= MN.SLS_FM_YRWK AND PRD.COST_YR || PRD.COST_WK <= MN.SLS_TO_YRWK) )+DECODE(WK_TP,1,1,0) AS TOT_WK -- ESTIMATE 조회시 현재주차도 미래주차에 포함시킨다.
	FROM (
		SELECT MIN(COST_YR||COST_WK) AS SLS_FM_YRWK,MIN(SLS_FM_DT) AS  SLS_FM_DT,  MAX(COST_YR||COST_WK) AS SLS_TO_YRWK,MAX(SLS_TO_DT) AS SLS_TO_DT,WK_TP
		FROM (		
			SELECT COST_YR,COST_WK,SLS_FM_DT,SLS_TO_DT ,
			       CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= SLS_FM_DT
						THEN 0
						WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > SLS_TO_DT   
				    THEN -1
				    ELSE 1
			       END AS WK_TP
			FROM MAS_WK_PRD 
			WHERE (COST_YR || COST_WK >= (@[frm_smr_eff_yr] || @[frm_smr_eff_wk]) AND COST_YR || COST_WK <= (@[frm_smr_exp_yr] || @[frm_smr_exp_wk]))	
		)	
		GROUP BY WK_TP
	) MN
)
--------------------------------------------------------
-- 이하 RFA

, VW_RFA_PROP_KEY AS (
	SELECT  /*+ MATERIALIZE */ DUR.PROP_NO , MAX(DUR.AMDT_SEQ) AS AMDT_SEQ
	FROM PRI_RP_DUR DUR
		, VW_CONTRACT_DT CDT
	WHERE TO_CHAR(CTRT_EFF_DT,'YYYYMMDD') >= SLS_FM_DT
		AND TO_CHAR(CTRT_EXP_DT,'YYYYMMDD') <= SLS_TO_DT
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end
	GROUP BY DUR.PROP_NO
)
 -- 데이터 SELECT시 조회 조건으로 이용될 KEY LIST
, VW_RFA_KEY_LIST AS (
	SELECT  /*+ MATERIALIZE LEADING(DT SR_CST_DTL) */ 
		 HDR.RFA_NO , PKEY.PROP_NO, PKEY.AMDT_SEQ
		,SR_CST_DTL.PRS_YRMON, SR_CST_DTL.PRS_WK, SR_CST_DTL.PRC_CTRT_TP_CD, SR_CST_DTL.PRC_CTRT_NO
		, SR_CST_DTL.SVC_SCP_CD, SR_CST_DTL.VSL_SLAN_DIR_CD, SR_CST_DTL.TRD_CD, SR_CST_DTL.SUB_TRD_CD
		, SR_CST_DTL.RLANE_CD, SR_CST_DTL.PRC_CGO_TP_CD, SR_CST_DTL.ORG_LOC_TP_CD, SR_CST_DTL.ORG_LOC_DEF_CD,SR_CST_DTL. DEST_LOC_TP_CD, SR_CST_DTL.DEST_LOC_DEF_CD
		,SR_CST_DTL.TEU_FRT_REV, SR_CST_DTL.PRS_RESPB_CM_UC_AMT, SR_CST_DTL.PRS_PFIT_CM_UC_AMT, SR_CST_DTL.PRS_RESPB_OPFIT_UC_AMT, SR_CST_DTL.PRS_CRNT_LOD_QTY, SR_CST_DTL.PRS_RESPB_CMPB_AMT, SR_CST_DTL.PRS_PFIT_CMPB_AMT, SR_CST_DTL.PRS_RESPB_OPB_AMT
	FROM 
		VW_CONTRACT_DT_LIST  DT        
		, PRI_RP_HDR HDR
		, VW_RFA_PROP_KEY PKEY
		, PRI_PRS_CTRT_SMRY SMRY
		, PRI_PRS_CTRT_SMRY_COST_DTL SR_CST_DTL
	WHERE HDR.PROP_NO  = PKEY.PROP_NO 
		AND HDR.RFA_NO = SMRY.PRC_CTRT_NO
		AND SMRY.PRC_CTRT_TP_CD = 'R' -- RFA
		AND SR_CST_DTL.PRS_YRMON = DT.COST_YRMON       
		AND SR_CST_DTL.PRS_WK    = DT.COST_WK          
		AND SMRY.PRS_YRMON = SR_CST_DTL.PRS_YRMON
		AND SMRY.PRS_WK = SR_CST_DTL.PRS_WK
		AND SMRY.PRC_CTRT_TP_CD = SR_CST_DTL.PRC_CTRT_TP_CD
		AND SMRY.PRC_CTRT_NO = SR_CST_DTL.PRC_CTRT_NO
		AND HDR.RFA_NO IS NOT NULL
		AND SR_CST_DTL.TRD_CD = @[frm_trd_cd]
		AND SR_CST_DTL.VSL_SLAN_DIR_CD = @[frm_dir_cd]
		#if(${frm_sub_trd_cd} != '')
			AND SR_CST_DTL.SUB_TRD_CD = @[frm_sub_trd_cd]
		#end
		#if(${frm_rlane_cd} != '')
			AND SR_CST_DTL.RLANE_CD IN (
			#foreach( ${key} in ${rlane_list}) 
				#if($velocityCount != 1 ) 
					UNION ALL
				#end
				SELECT 
						 '$key' 
				FROM DUAL
			#end
			)
		#end
			 
		#if(${frm_customer_type} == 'B')
					AND SMRY.PRS_CUST_TP_CD IN ('I','A','O')
		#elseif(${frm_customer_type} == 'N')
					AND SMRY.PRS_CUST_TP_CD IN ('N')
		#else 
				AND SMRY.PRS_CUST_TP_CD IN ('I','A','O','N')
		#end

		#if(${frm_prop_ofc_cd} != '')
					AND SMRY.PROP_OFC_CD = @[frm_prop_ofc_cd] -- REQUEST
		#end

		#if(${frm_prop_srep_cd} != '')
					AND SMRY.RESPB_SREP_CD = @[frm_prop_srep_cd]
		#end

		#if(${frm_prop_apro_ofc_cd} != '')
					AND SMRY.PROP_APRO_OFC_CD = @[frm_prop_apro_ofc_cd]
		#end

		#if( $cust_list.size() != 0 ) 
			AND (SMRY.CUST_CNT_CD , SMRY.CUST_SEQ) IN (
			#foreach( ${key} in ${cust_list}) 
				#if($velocityCount != 1 ) 
					UNION ALL
				#end
				SELECT 
						substr('$key',1,2),substr('$key',3)
				FROM DUAL
			#end
			)
		#end 


                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end


)
-- 기준이 되는 SC_NO를 조회 ( OUTER JOIN의 기준 데이터가 된다. )
, VW_RFA_CONTRACT_KEY AS (
	SELECT  /*+ MATERIALIZE */ DISTINCT RFA_NO , PROP_NO, AMDT_SEQ
	FROM VW_RFA_KEY_LIST


)

--- 계약번호당 실적이 총 몇주차 인지 ESTIMATE에 쓰일 총 주차가 몇주차인지 계산한다.
, VW_RFA_TOT_WEEK_PER_RFA_NO AS (
SELECT  /*+ MATERIALIZE */ PROP_NO , AMDT_SEQ,RFA_NO
	,ACTUAL_WK_CNT
	,DECODE(ESTIMATE_WK_CNT	,1,0,ESTIMATE_WK_CNT	) AS ESTIMATE_WK_CNT	-- 현재주차만 걸릴경우 제외시킨다.
	,REFER_WK_CNT
FROM (
	SELECT /*+ ORDERED USE_NL(KLIST DUR) USE_HASH(KLIST PRD) */  
		KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.RFA_NO
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 0
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_TO_DT >=  KLIST.SDT_SLS_FM_DT    -- SDT.SLS_FM_DT
				THEN 1
				ELSE 0
		       END 
		  ) AS ACTUAL_WK_CNT
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 1
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT  
				THEN 0
				WHEN   PRD.SLS_TO_DT <=  KLIST.SDT_SLS_TO_DT     --- SDT.SLS_TO_DT 
				THEN 1
				ELSE 0
			END 
		) AS ESTIMATE_WK_CNT	
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 0
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_FM_DT >=  KLIST.RDT_SLS_FM_DT AND  PRD.SLS_FM_DT <= KLIST.RDT_SLS_TO_DT   -- RDT.SLS_FM_DT AND  PRD.SLS_FM_DT <= RDT.SLS_TO_DT
				THEN 1
				ELSE 0
		       END 
		  ) AS REFER_WK_CNT
	FROM 
	
	  --> 수정 : 인라인뷰로 묶음
		 (	
			SELECT  /*+ NO_MERGE ORDERED */
				      SDT.SLS_FM_DT  SDT_SLS_FM_DT,
				      SDT.SLS_TO_DT  SDT_SLS_TO_DT,
				      RDT.SLS_FM_DT  RDT_SLS_FM_DT,
				      RDT.SLS_TO_DT  RDT_SLS_TO_DT,
				      KLIST.*,
				      1  HASH_JOIN_KEY
			 FROM    VW_SUMMARY_DT       SDT
				, VW_REFERENCE_DT     RDT
				, VW_RFA_CONTRACT_KEY KLIST		
		 )  KLIST

	
		, PRI_RP_DUR DUR
		,(
			SELECT  /*+ NO_MERGE */
			     SLS_FM_DT, SLS_TO_DT,
			     1  HASH_JOIN_KEY
			FROM   MAS_WK_PRD 
		 )  PRD 

	WHERE DUR.PROP_NO = KLIST.PROP_NO
		AND DUR.AMDT_SEQ = KLIST.AMDT_SEQ
		AND KLIST.HASH_JOIN_KEY = PRD.HASH_JOIN_KEY   --> 수정 : HASH 조인으로 변경
		AND (
				(	TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') >= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_TO_DT	 
				)  OR (   
					TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') >= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') <= PRD.SLS_TO_DT 
				) OR (
					TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD')>= PRD.SLS_TO_DT	 
				)
		) 
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end

	 GROUP BY KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.RFA_NO
)
)
-- ACTUAL DATA 조회
-- SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) 결합 INDEX 필요
, VW_RFA_ACTUAL_VALUE AS (
	SELECT  CKEY.RFA_NO
		, CKEY.PRC_CTRT_NO 
		, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)
		, SUM(CKEY.PRS_RESPB_CM_UC_AMT)   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)
		, SUM(CKEY.PRS_PFIT_CM_UC_AMT)    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)
		, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)
		, SUM(CKEY.PRS_RESPB_CMPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1))   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )     AS CMPB_OFFICE     -- Office Profit/ CM -- CMPB(Previous)
		, SUM(CKEY.PRS_PFIT_CMPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1))   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )       AS CMPB_TRADE      -- Trade Profit/ CM  -- CMPB(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY   / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)  * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)
		, SUM(CKEY.PRS_RESPB_OPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1))   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )        AS OPB             -- Office Profit/ OP -- OPB(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY  * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)
		, SUM(CKEY.TEU_FRT_REV )         AS G_REV            -- Gross Revenue(Previous)
		, MAX(WK_PER_SC.ACTUAL_WK_CNT) AS WEEK_CNT
	FROM VW_RFA_KEY_LIST CKEY 
		, VW_SUMMARY_WEEK WK
		, VW_RFA_TOT_WEEK_PER_RFA_NO WK_PER_SC
	WHERE  CKEY.RFA_NO = WK_PER_SC.RFA_NO
#if( ${frm_ori_rout_cd} != '' )
		-- origin
		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]
#end
#if( ${frm_dest_rout_cd} != '' )
		-- DEST
		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]
#end

-- BY CARGO TYPE
#if (${crg_tp_str} != '' )
		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )
#end
		AND WK.WK_TP = -1
		AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) >= WK.SLS_FM_YRWK  AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) <= WK.SLS_TO_YRWK  
	GROUP BY CKEY.RFA_NO, CKEY.PRC_CTRT_NO 
)
, VW_RFA_RESULT AS (
	SELECT  A_SC_NO                              
		, A1_LOAD                       
		, A1_COST_CM_OFFICE     
		, A1_COST_CM_TRADE      
		, A1_COST_OP_OFFICE     
		, A1_CMPB_OFFICE        
		, A1_CMPB_TRADE         
		, A1_CM_OFFICE          
		, A1_CM_TRADE           
		, A1_OPB                 
		, A1_OP                  
		, A1_G_REV               
                , M.CTRT_CUST_CNT_CD || TO_CHAR(M.CTRT_CUST_SEQ,'FM000000') || ' - ' || CUST.CUST_LGL_ENG_NM AS CUST_NM
                , M.PROP_OFC_CD
                , M.TGT_MVC_QTY AS MQC_QTY
                , M.CTRT_CUST_CNT_CD || TO_CHAR(M.CTRT_CUST_SEQ,'FM000000')  AS CUST_CD
		, M.RESPB_SREP_CD
	FROM (
		SELECT CKEY.RFA_NO AS SC_NO
			, CKEY.PROP_NO
			, CKEY.AMDT_SEQ
			, CKEY.RFA_NO AS A_SC_NO
			, AVALUE.LOAD	 AS A1_LOAD
			, AVALUE.COST_CM_OFFICE	 AS A1_COST_CM_OFFICE
			, AVALUE.COST_CM_TRADE	 AS A1_COST_CM_TRADE
			, AVALUE.COST_OP_OFFICE	 AS A1_COST_OP_OFFICE
			, AVALUE.CMPB_OFFICE	 AS A1_CMPB_OFFICE
			, AVALUE.CMPB_TRADE	 AS A1_CMPB_TRADE
			, AVALUE.CM_OFFICE	 AS A1_CM_OFFICE
			, AVALUE.CM_TRADE	 AS A1_CM_TRADE
			, AVALUE.OPB		AS A1_OPB
			, AVALUE.OP		AS A1_OP
			, AVALUE.G_REV		AS A1_G_REV
			, AVALUE.WEEK_CNT	 AS A1_WEEK_CNT
		FROM VW_RFA_CONTRACT_KEY CKEY
			, VW_RFA_ACTUAL_VALUE AVALUE
		WHERE CKEY.RFA_NO = AVALUE.RFA_NO(+)
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end

	) MN
	, PRI_RP_MN M
        , MDM_CUSTOMER CUST
	WHERE
		 MN.PROP_NO = M.PROP_NO
		AND MN.AMDT_SEQ = M.AMDT_SEQ
                AND CUST.CUST_CNT_CD = M.CTRT_CUST_CNT_CD
                AND CUST.CUST_SEQ = M.CTRT_CUST_SEQ
)
--------------------------------------------------------
-- 이하 SC
-- 기준이 되는 PROP_NO를 조회
, VW_PROP_KEY AS (
	SELECT  /*+ MATERIALIZE */ DUR.PROP_NO , MAX(DUR.AMDT_SEQ) AS AMDT_SEQ
	FROM PRI_SP_DUR DUR
		, VW_CONTRACT_DT CDT
	WHERE TO_CHAR(CTRT_EFF_DT,'YYYYMMDD') >= SLS_FM_DT
		AND TO_CHAR(CTRT_EXP_DT,'YYYYMMDD') <= SLS_TO_DT
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                        AND 1=1
                #else
                        AND 1=0
                #end

	GROUP BY DUR.PROP_NO
)
 -- 데이터 SELECT시 조회 조건으로 이용될 KEY LIST
, VW_KEY_LIST AS (
	SELECT  /*+ MATERIALIZE LEADING(DT SMRY HDR) FULL(HDR) */  HDR.SC_NO , PKEY.PROP_NO, PKEY.AMDT_SEQ
		,SR_CST_DTL.PRS_YRMON, SR_CST_DTL.PRS_WK, SR_CST_DTL.PRC_CTRT_TP_CD, SR_CST_DTL.PRC_CTRT_NO
		, SR_CST_DTL.SVC_SCP_CD, SR_CST_DTL.VSL_SLAN_DIR_CD, SR_CST_DTL.TRD_CD, SR_CST_DTL.SUB_TRD_CD
		, SR_CST_DTL.RLANE_CD, SR_CST_DTL.PRC_CGO_TP_CD, SR_CST_DTL.ORG_LOC_TP_CD, SR_CST_DTL.ORG_LOC_DEF_CD,SR_CST_DTL. DEST_LOC_TP_CD, SR_CST_DTL.DEST_LOC_DEF_CD
		,SR_CST_DTL.TEU_FRT_REV, SR_CST_DTL.PRS_RESPB_CM_UC_AMT, SR_CST_DTL.PRS_PFIT_CM_UC_AMT, SR_CST_DTL.PRS_RESPB_OPFIT_UC_AMT, SR_CST_DTL.PRS_CRNT_LOD_QTY, SR_CST_DTL.PRS_RESPB_CMPB_AMT, SR_CST_DTL.PRS_PFIT_CMPB_AMT, SR_CST_DTL.PRS_RESPB_OPB_AMT
	FROM 
		VW_CONTRACT_DT_LIST  DT         
		, PRI_SP_HDR HDR
		, VW_PROP_KEY PKEY
		, PRI_PRS_CTRT_SMRY SMRY
		, PRI_PRS_CTRT_SMRY_COST_DTL SR_CST_DTL
	WHERE HDR.PROP_NO  = PKEY.PROP_NO 
		AND HDR.SC_NO = SMRY.PRC_CTRT_NO
		AND SMRY.PRC_CTRT_TP_CD = 'S' -- S/C
		AND SMRY.PRS_YRMON = DT.COST_YRMON     --> 수정 : 서브쿼리를 직접 조인으로 변경
		AND SMRY.PRS_WK    = DT.COST_WK        --> 수정 : 서브쿼리를 직접 조인으로 변경
		AND SMRY.PRS_YRMON = SR_CST_DTL.PRS_YRMON
		AND SMRY.PRS_WK = SR_CST_DTL.PRS_WK
		AND SMRY.PRC_CTRT_TP_CD = SR_CST_DTL.PRC_CTRT_TP_CD
		AND SMRY.PRC_CTRT_NO = SR_CST_DTL.PRC_CTRT_NO
		AND HDR.SC_NO IS NOT NULL
		AND SR_CST_DTL.TRD_CD = @[frm_trd_cd]
		AND SR_CST_DTL.VSL_SLAN_DIR_CD = @[frm_dir_cd]
		#if(${frm_sub_trd_cd} != '')
			AND SR_CST_DTL.SUB_TRD_CD = @[frm_sub_trd_cd]
		#end
		#if(${frm_rlane_cd} != '')
			AND SR_CST_DTL.RLANE_CD IN (
			#foreach( ${key} in ${rlane_list}) 
				#if($velocityCount != 1 ) 
					UNION ALL
				#end
				SELECT 
						 '$key' 
				FROM DUAL
			#end
			)
		#end
			 
		#if(${frm_customer_type} == 'B')
					AND SMRY.PRS_CUST_TP_CD IN ('I','A','O')
		#elseif(${frm_customer_type} == 'N')
					AND SMRY.PRS_CUST_TP_CD IN ('N')
		#else 
				AND SMRY.PRS_CUST_TP_CD IN ('I','A','O','N')
		#end

		#if(${frm_prop_ofc_cd} != '')
					AND SMRY.PROP_OFC_CD = @[frm_prop_ofc_cd] -- REQUEST
		#end

		#if(${frm_prop_srep_cd} != '')
					AND SMRY.RESPB_SREP_CD = @[frm_prop_srep_cd]
		#end

		#if(${frm_prop_apro_ofc_cd} != '')
					AND SMRY.PROP_APRO_OFC_CD = @[frm_prop_apro_ofc_cd]
		#end

		#if( $cust_list.size() != 0 ) 
			AND (SMRY.CUST_CNT_CD , SMRY.CUST_SEQ) IN (
			#foreach( ${key} in ${cust_list}) 
				#if($velocityCount != 1 ) 
					UNION ALL
				#end
				SELECT 
						substr('$key',1,2),substr('$key',3)
				FROM DUAL
			#end
			)
		#end 


                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                        AND 1=1
                #else
                        AND 1=0
                #end
)
-- 기준이 되는 SC_NO를 조회 ( OUTER JOIN의 기준 데이터가 된다. )
, VW_CONTRACT_KEY AS (
	SELECT  /*+ MATERIALIZE */ DISTINCT SC_NO , PROP_NO, AMDT_SEQ
	FROM VW_KEY_LIST


)

--- 계약번호당 실적이 총 몇주차 인지 ESTIMATE에 쓰일 총 주차가 몇주차인지 계산한다.
, VW_TOT_WEEK_PER_SC_NO AS (
SELECT  /*+ MATERIALIZE */ PROP_NO , AMDT_SEQ,SC_NO
	,ACTUAL_WK_CNT
	,DECODE(ESTIMATE_WK_CNT	,1,0,ESTIMATE_WK_CNT	) AS ESTIMATE_WK_CNT	-- 현재주차만 걸릴경우 제외시킨다.
	,REFER_WK_CNT
FROM (
	SELECT /*+ ORDERED USE_NL(KLIST DUR) USE_HASH(KLIST PRD) */  
		KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.SC_NO
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 0
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_TO_DT >=  KLIST.SDT_SLS_FM_DT --SDT.SLS_FM_DT
				THEN 1
				ELSE 0
		       END 
		  ) AS ACTUAL_WK_CNT
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 1
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT  
				THEN 0
				WHEN   PRD.SLS_TO_DT <=  KLIST.SDT_SLS_TO_DT   -- SDT.SLS_TO_DT 
				THEN 1
				ELSE 0
			END 
		) AS ESTIMATE_WK_CNT	
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 0
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_FM_DT >=  KLIST.RDT_SLS_FM_DT AND  PRD.SLS_FM_DT <= KLIST.RDT_SLS_TO_DT    -- RDT.SLS_FM_DT AND  PRD.SLS_FM_DT <= RDT.SLS_TO_DT
				THEN 1
				ELSE 0
		       END 
		  ) AS REFER_WK_CNT
	FROM 
	         (
			 SELECT  /*+ NO_MERGE ORDERED */
				      SDT.SLS_FM_DT  SDT_SLS_FM_DT,
				      SDT.SLS_TO_DT  SDT_SLS_TO_DT,
				      RDT.SLS_FM_DT  RDT_SLS_FM_DT,
				      RDT.SLS_TO_DT  RDT_SLS_TO_DT,
				      KLIST.*,
				      1  HASH_JOIN_KEY
			  FROM    VW_SUMMARY_DT    SDT
					, VW_REFERENCE_DT  RDT
					, VW_CONTRACT_KEY  KLIST		
		 )  KLIST 		
		, PRI_SP_DUR DUR
		,(
			SELECT  /*+ NO_MERGE */
			     SLS_FM_DT, SLS_TO_DT,
			     1  HASH_JOIN_KEY
			  FROM   MAS_WK_PRD 
		 )  PRD 	    

	WHERE DUR.PROP_NO = KLIST.PROP_NO
		AND DUR.AMDT_SEQ = KLIST.AMDT_SEQ
		AND KLIST.HASH_JOIN_KEY = PRD.HASH_JOIN_KEY   
		AND (
				(	TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') >= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_TO_DT	 
				)  OR (   
					TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') >= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') <= PRD.SLS_TO_DT 
				) OR (
					TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD')>= PRD.SLS_TO_DT	 
				)
		) 
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                        AND 1=1
                #else
                        AND 1=0
                #end
	 GROUP BY KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.SC_NO
)
)
-- ACTUAL DATA 조회
-- SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) 결합 INDEX 필요
, VW_ACTUAL_VALUE AS (
	SELECT  CKEY.SC_NO
		, CKEY.PRC_CTRT_NO 
		, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)
		, SUM(CKEY.PRS_RESPB_CM_UC_AMT)   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)
		, SUM(CKEY.PRS_PFIT_CM_UC_AMT)    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)
		, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)
		, SUM(CKEY.PRS_RESPB_CMPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1))   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )     AS CMPB_OFFICE     -- Office Profit/ CM -- CMPB(Previous)
		, SUM(CKEY.PRS_PFIT_CMPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1))   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )       AS CMPB_TRADE      -- Trade Profit/ CM  -- CMPB(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY   / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)  * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)
		, SUM(CKEY.PRS_RESPB_OPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1))   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )        AS OPB             -- Office Profit/ OP -- OPB(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY  * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)
		, SUM(CKEY.TEU_FRT_REV )         AS G_REV            -- Gross Revenue(Previous)
		, MAX(WK_PER_SC.ACTUAL_WK_CNT) AS WEEK_CNT
	FROM VW_KEY_LIST CKEY 
		, VW_SUMMARY_WEEK WK
		, VW_TOT_WEEK_PER_SC_NO WK_PER_SC
	WHERE  CKEY.SC_NO = WK_PER_SC.SC_NO
#if( ${frm_ori_rout_cd} != '' )
		-- origin
		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]
#end
#if( ${frm_dest_rout_cd} != '' )
		-- DEST
		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]
#end
-- BY CARGO TYPE
#if (${crg_tp_str} != '' )
		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )
#end
		AND WK.WK_TP = -1
		AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) >= WK.SLS_FM_YRWK  AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) <= WK.SLS_TO_YRWK  
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                        AND 1=1
                #else
                        AND 1=0
                #end
	GROUP BY CKEY.SC_NO, CKEY.PRC_CTRT_NO 
)
, VW_RESULT AS (
	SELECT  A_SC_NO                              
		, A1_LOAD                       
		, A1_COST_CM_OFFICE     
		, A1_COST_CM_TRADE      
		, A1_COST_OP_OFFICE     
		, A1_CMPB_OFFICE        
		, A1_CMPB_TRADE         
		, A1_CM_OFFICE          
		, A1_CM_TRADE           
		, A1_OPB                 
		, A1_OP                  
		, A1_G_REV               

		, C.CUST_CNT_CD || TO_CHAR(C.CUST_SEQ,'FM000000') || ' - ' || C.CTRT_PTY_NM AS CUST_NM
		, M.PROP_OFC_CD
		, Q.FNL_MQC_QTY AS MQC_QTY
		, C.CUST_CNT_CD || TO_CHAR(C.CUST_SEQ,'FM000000')  AS CUST_CD
		, M.RESPB_SREP_CD
	FROM (
		SELECT CKEY.SC_NO
			, CKEY.PROP_NO
			, CKEY.AMDT_SEQ
			, CKEY.SC_NO AS A_SC_NO
			, AVALUE.LOAD	 AS A1_LOAD
			, AVALUE.COST_CM_OFFICE	 AS A1_COST_CM_OFFICE
			, AVALUE.COST_CM_TRADE	 AS A1_COST_CM_TRADE
			, AVALUE.COST_OP_OFFICE	 AS A1_COST_OP_OFFICE
			, AVALUE.CMPB_OFFICE	 AS A1_CMPB_OFFICE
			, AVALUE.CMPB_TRADE	 AS A1_CMPB_TRADE
			, AVALUE.CM_OFFICE	 AS A1_CM_OFFICE
			, AVALUE.CM_TRADE	 AS A1_CM_TRADE
			, AVALUE.OPB		AS A1_OPB
			, AVALUE.OP		AS A1_OP
			, AVALUE.G_REV		AS A1_G_REV
			, AVALUE.WEEK_CNT	 AS A1_WEEK_CNT
		FROM VW_CONTRACT_KEY CKEY
			, VW_ACTUAL_VALUE AVALUE
		WHERE CKEY.SC_NO = AVALUE.SC_NO(+)
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                        AND 1=1
                #else
                        AND 1=0
                #end
	) MN
	, PRI_SP_MN M
	, PRI_SP_CTRT_PTY C
	, PRI_SP_MQC Q
	WHERE
		 MN.PROP_NO = M.PROP_NO
		AND MN.AMDT_SEQ = M.AMDT_SEQ
		AND M.PROP_NO = C.PROP_NO 
		AND  M.AMDT_SEQ = C.AMDT_SEQ
		AND M.PROP_NO = Q.PROP_NO (+)
		AND  M.AMDT_SEQ = Q.AMDT_SEQ(+)
		AND C.PRC_CTRT_PTY_TP_CD = 'C'
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                        AND 1=1
                #else
                        AND 1=0
                #end
)
SELECT TARGET_CODE
	, CODE_TP_CD
FROM (
	SELECT TARGET_CODE 
		, CASE WHEN @[grp_code] = 'PROP_OFC_CD' THEN
				'A'
				WHEN @[grp_code] = 'CUST_CD' THEN
				'B'
				WHEN @[grp_code] = 'RESPB_SREP_CD' THEN
				'C'
				ELSE
				'D'
		  END AS CODE_TP_CD
		, RANK() OVER(ORDER BY ${rank_order} ) RN -- DESC 상위, ASC 하위
		, COUNT(*) OVER () TOT_CNT
	FROM (
		SELECT 
			${grp_code} AS TARGET_CODE
			,SUM(A1_LOAD) AS A1_LOAD
			,DECODE(NVL(SUM(A1_LOAD),0),0,0, SUM(A1_OPB * A1_LOAD) / SUM(A1_LOAD) )  AS A1_OPB
			,DECODE(NVL(SUM(A1_LOAD),0),0,0, SUM(A1_CMPB_OFFICE * A1_LOAD) / SUM(A1_LOAD) ) AS A1_CMPB_OFFICE
			,DECODE(NVL(SUM(A1_LOAD),0),0,0, SUM(A1_CMPB_TRADE * A1_LOAD) / SUM(A1_LOAD)) AS A1_CMPB_TRADE
			,SUM(A1_CM_OFFICE) AS A1_CM_OFFICE
			,SUM(A1_CM_TRADE) AS A1_CM_TRADE
			,SUM(A1_OP) AS A1_OP
		FROM VW_RESULT 
		GROUP BY  ${grp_code}
                UNION ALL
                --RFA
		SELECT 
			${grp_code} AS TARGET_CODE
			,SUM(A1_LOAD) AS A1_LOAD
			,DECODE(NVL(SUM(A1_LOAD),0),0,0, SUM(A1_OPB * A1_LOAD) / SUM(A1_LOAD) )  AS A1_OPB
			,DECODE(NVL(SUM(A1_LOAD),0),0,0, SUM(A1_CMPB_OFFICE * A1_LOAD) / SUM(A1_LOAD) ) AS A1_CMPB_OFFICE
			,DECODE(NVL(SUM(A1_LOAD),0),0,0, SUM(A1_CMPB_TRADE * A1_LOAD) / SUM(A1_LOAD)) AS A1_CMPB_TRADE
			,SUM(A1_CM_OFFICE) AS A1_CM_OFFICE
			,SUM(A1_CM_TRADE) AS A1_CM_TRADE
			,SUM(A1_OP) AS A1_OP
		FROM VW_RFA_RESULT 
		GROUP BY  ${grp_code}
	)
)
WHERE RN <= ${range_val}-- 보고싶은 RANGE
ORDER BY  TARGET_CODE			]]></sql>
			<params>
				<param name="frm_ctrt_eff_yr" type="12" value="" out="N"/>
				<param name="frm_ctrt_eff_wk" type="12" value="" out="N"/>
				<param name="frm_ctrt_exp_yr" type="12" value="" out="N"/>
				<param name="frm_ctrt_exp_wk" type="12" value="" out="N"/>
				<param name="frm_smr_eff_yr" type="12" value="" out="N"/>
				<param name="frm_smr_eff_wk" type="12" value="" out="N"/>
				<param name="frm_smr_exp_yr" type="12" value="" out="N"/>
				<param name="frm_smr_exp_wk" type="12" value="" out="N"/>
				<param name="frm_rfrc_eff_yr" type="12" value="" out="N"/>
				<param name="frm_rfrc_eff_wk" type="12" value="" out="N"/>
				<param name="frm_rfrc_exp_yr" type="12" value="" out="N"/>
				<param name="frm_rfrc_exp_wk" type="12" value="" out="N"/>
				<param name="frm_trd_cd" type="12" value="" out="N"/>
				<param name="frm_dir_cd" type="12" value="" out="N"/>
				<param name="frm_sub_trd_cd" type="12" value="" out="N"/>
				<param name="frm_prop_ofc_cd" type="12" value="" out="N"/>
				<param name="frm_prop_srep_cd" type="12" value="" out="N"/>
				<param name="frm_prop_apro_ofc_cd" type="12" value="" out="N"/>
				<param name="frm_pfmc_unit" type="12" value="" out="N"/>
				<param name="frm_ori_rout_cd" type="12" value="" out="N"/>
				<param name="frm_dest_rout_cd" type="12" value="" out="N"/>
				<param name="grp_code" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
