<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="PerformanceReportDBDAOSearchBlPerfVolByRegionGroupListRSQL">
			<desc><![CDATA[PerformanceReportDBDAOSearchBlPerfVolByRegionGroupListRSQL]]></desc>
			<sql><![CDATA[
SELECT 
    trunc(TOTAL_I_POINT/TOT_HIS_CNT,2)  AVG_POINT_ID,--★
    trunc(TOTAL_R_POINT/TOT_HIS_CNT,2)  AVG_POINT_RA,--★
    trunc(TOTAL_A_POINT/TOT_BKG_CNT,2)  AVG_POINT_QA
    ,trunc(sum(TOTAL_I_POINT)over(partition by R_S_ROW)/ sum(TOT_HIS_CNT) over(partition by R_S_ROW),2) TOT_AVG_POINT
    ,sum_STAFF --★
    ,sum(TOT_SI_CNT) over(partition by R_S_ROW) sum_si
    ,sum(TOT_BKG_CNT) over(partition by R_S_ROW) sum_bkg
    ,sum(TOT_ORI_EDI_CNT) over(partition by R_S_ROW) sum_ori_e_si
    ,sum(TOT_ORI_FAX_CNT) over(partition by R_S_ROW) sum_ori_f_si
    ,sum(TOT_ORI_MAIL_CNT) over(partition by R_S_ROW) sum_ori_m_si
	,(BKG_GET_CONV_INTVAL_TIME_FNC(TOT_ELAPSED,'')*60)+BKG_GET_CONV_INTVAL_TIME_FNC(TOT_ELAPSED,'SS')  TOT_ELAPSED
    ,BKG_GET_CONV_INTVAL_TIME_FNC((TOT_ELAPSED),'DD') TOT_ELAPSED_DD
    ,BKG_GET_CONV_INTVAL_TIME_FNC((TOT_ELAPSED),'HH') TOT_ELAPSED_HH
    ,BKG_GET_CONV_INTVAL_TIME_FNC((TOT_ELAPSED),'MM') TOT_ELAPSED_MM
    ,BKG_GET_CONV_INTVAL_TIME_FNC((TOT_ELAPSED),'SS') TOT_ELAPSED_SS --★ 
    ,(BKG_GET_CONV_INTVAL_TIME_FNC(TOT_ELAPSED/sum_HIS_CNT,'')*60)+BKG_GET_CONV_INTVAL_TIME_FNC(TOT_ELAPSED/sum_HIS_CNT,'SS')  tot_avg_elapsed
    ,BKG_GET_CONV_INTVAL_TIME_FNC((TOT_ELAPSED/sum_HIS_CNT),'DD') tot_avg_elapsed_dd
    ,BKG_GET_CONV_INTVAL_TIME_FNC((TOT_ELAPSED/sum_HIS_CNT),'HH') tot_avg_elapsed_hh
    ,BKG_GET_CONV_INTVAL_TIME_FNC((TOT_ELAPSED/sum_HIS_CNT),'MM') tot_avg_elapsed_mm
    ,BKG_GET_CONV_INTVAL_TIME_FNC((TOT_ELAPSED/sum_HIS_CNT),'SS') tot_avg_elapsed_ss --★  
    ,E.* 
FROM (
    SELECT 
        TOT_G,REGION,REGION_D,SR_STS_CD,R_S_ROW,TOT_STAFF,sum_STAFF,TOT_SI_CNT,TOT_HIS_CNT,SUM_HIS_CNT
        ,TOT_BKG_CNT,TOT_HBL_CNT,TOT_ORI_EDI_CNT,TOT_ORI_FAX_CNT,TOT_ELAPSED
        ,TOT_ORI_SEN_cnt
        ,TOT_ORI_MAIL_CNT,TOT_AMD_ID_CNT,TOT_AMD_AD_CNT,TOT_AMD_RD_CNT,TOT_HBL_IN_ID_CNT
        ,TOT_HBL_IN_AD_CNT,TOT_HBL_IN_RD_CNT,TOT_AES_ID_CNT,TOT_AES_AD_CNT,TOT_AES_RD_CNT
        ,TOT_BL_CFM_CNT_ID_CNT,TOT_BL_CFM_CNT_AD_CNT,TOT_BL_CFM_CNT_RD_CNT--TOT_I_PNT,TOT_R_PNT,TOT_Q_PNT
        ,TOT_ADDI_CNT_ID_CNT,TOT_ADDI_CNT_RD_CNT,TOT_ADDI_CNT_AD_CNT
        ,TOT_HBL_PNT,TOT_CM_PNT,TOT_CN_PNT,TOT_RFA_PNT,TOT_TAA_PNT,TOT_SC_PNT,TOT_SELF_PNT
        ,DECODE(SR_STS_CD,'ID','Input','RD','Rate','AD','QA') GROUP_D
        ,CASE WHEN R_S_ROW = 1 THEN  
                    (TOT_I_BAS_PNT +TOT_HBL_PNT + TOT_CM_PNT + TOT_CN_PNT + TOT_RFA_PNT+ TOT_TAA_PNT + TOT_SC_PNT + TOT_SELF_PNT + TOT_PRE_PNT) 
              ELSE 0
         END TOTAL_I_POINT
        ,CASE WHEN R_S_ROW = 1 THEN  
                    (TOT_I_BAS_PNT +TOT_HBL_PNT + TOT_CM_PNT + TOT_CN_PNT + TOT_RFA_PNT+ TOT_TAA_PNT + TOT_SC_PNT + TOT_SELF_PNT + TOT_PRE_PNT) 
              ELSE 0
         END TOTAL_R_POINT    
        ,CASE WHEN R_S_ROW = 1 THEN  
                   (TOT_I_BAS_PNT +TOT_HBL_PNT + TOT_CM_PNT + TOT_CN_PNT + TOT_RFA_PNT+ TOT_TAA_PNT + TOT_SC_PNT + TOT_SELF_PNT + TOT_PRE_PNT) 
              ELSE 0
         END TOTAL_A_POINT    
        --,TOT_INPUT_ELAPSED,TOT_RATE_ELAPSED,TOT_QA_ELAPSED
        ,(BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED,'')*60)+BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED,'SS') TOT_INPUT_ELAPSED
        ,(BKG_GET_CONV_INTVAL_TIME_FNC(TOT_RATE_ELAPSED,'')*60)+BKG_GET_CONV_INTVAL_TIME_FNC(TOT_RATE_ELAPSED,'SS') TOT_RATE_ELAPSED
        ,(BKG_GET_CONV_INTVAL_TIME_FNC(TOT_QA_ELAPSED,'')*60)+BKG_GET_CONV_INTVAL_TIME_FNC(TOT_QA_ELAPSED,'SS') TOT_QA_ELAPSED
        ,BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED,'DD') TOT_TIME_DD
        ,BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED,'HH') TOT_TIME_HH
        ,BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED,'MM') TOT_TIME_MM
        ,BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED,'SS') TOT_TIME_SS --★
        --,trunc(TOT_INPUT_ELAPSED/BKG_CNT_SR,2) as AVG_TIME_IN
        --,trunc(TOT_RATE_ELAPSED/BKG_CNT_SR,2) as AVG_TIME_RA
        --,trunc(TOT_QA_ELAPSED/BKG_CNT_SR,2) as AVG_TIME_QA
        ,(BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED/TOT_HIS_CNT,'')*60)+BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED/TOT_HIS_CNT,'SS') AVG_TIME_IN --★
        ,(BKG_GET_CONV_INTVAL_TIME_FNC(TOT_RATE_ELAPSED/TOT_HIS_CNT,'')*60)+BKG_GET_CONV_INTVAL_TIME_FNC(TOT_RATE_ELAPSED/TOT_HIS_CNT,'SS') AVG_TIME_ra --★
        ,(BKG_GET_CONV_INTVAL_TIME_FNC(TOT_QA_ELAPSED/TOT_HIS_CNT,'')*60)+BKG_GET_CONV_INTVAL_TIME_FNC(TOT_QA_ELAPSED/TOT_HIS_CNT,'SS') AVG_TIME_qa --★
        ,BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED/TOT_HIS_CNT,'DD') AVG_TIME_DD
        ,BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED/TOT_HIS_CNT,'HH') AVG_TIME_HH
        ,BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED/TOT_HIS_CNT,'MM') AVG_TIME_MM
        ,BKG_GET_CONV_INTVAL_TIME_FNC(TOT_INPUT_ELAPSED/TOT_HIS_CNT,'SS') AVG_TIME_SS --★
    FROM (
        SELECT 
            ROW_NUMBER() OVER (PARTITION BY REGION, SR_STS_CD ORDER BY REGION, SR_STS_CD) R_S_ROW
            ,COUNT(DISTINCT ATND_USR_ID) OVER (PARTITION BY REGION, SR_STS_CD) TOT_STAFF
            ,COUNT(DISTINCT ATND_USR_ID) OVER (PARTITION BY TOT_G) sum_STAFF--★ TOT_G
            
            ,SUM(HIS_CNT_BKG_GROUP) OVER (PARTITION BY REGION, SR_STS_CD) TOT_HIS_CNT
            ,SUM(HIS_CNT_BKG_GROUP) OVER (PARTITION BY TOT_G) sum_HIS_CNT
            ,SUM(SI_CNT_BKG_GROUP) OVER (PARTITION BY REGION, SR_STS_CD) TOT_SI_CNT
            
            ,BKG_CNT_REASON_SR TOT_BKG_CNT
            ,SUM(HBL_CNT) OVER (PARTITION BY REGION, SR_STS_CD) TOT_HBL_CNT
            ,SUM(ORI_EDI_BKG) OVER (PARTITION BY REGION, SR_STS_CD) TOT_ORI_EDI_CNT
            ,SUM(ORI_FAX_BKG) OVER (PARTITION BY REGION, SR_STS_CD) TOT_ORI_FAX_CNT
            ,SUM(ORI_MAIL_BKG) OVER (PARTITION BY REGION, SR_STS_CD) TOT_ORI_MAIL_CNT
            ,SUM(ORI_SEN_BKG) OVER (PARTITION BY REGION, SR_STS_CD) TOT_ORI_SEN_cnt
            ---- 1 COL
            ,SUM(AMD_CNT_ID) OVER (PARTITION BY REGION, SR_STS_CD) TOT_AMD_ID_CNT
            ,SUM(AMD_CNT_AD) OVER (PARTITION BY REGION, SR_STS_CD) TOT_AMD_AD_CNT
            ,SUM(AMD_CNT_RD) OVER (PARTITION BY REGION, SR_STS_CD) TOT_AMD_RD_CNT
            ---- 1 COL
            ,SUM(HBL_IN_CNT_ID) OVER (PARTITION BY REGION, SR_STS_CD) TOT_HBL_IN_ID_CNT
            ,SUM(HBL_IN_CNT_AD) OVER (PARTITION BY REGION, SR_STS_CD) TOT_HBL_IN_AD_CNT
            ,SUM(HBL_IN_CNT_RD) OVER (PARTITION BY REGION, SR_STS_CD) TOT_HBL_IN_RD_CNT
            ---- 1 COL
            ,SUM(AES_CNT_ID) OVER (PARTITION BY REGION, SR_STS_CD) TOT_AES_ID_CNT
            ,SUM(AES_CNT_AD) OVER (PARTITION BY REGION, SR_STS_CD) TOT_AES_AD_CNT
            ,SUM(AES_CNT_RD) OVER (PARTITION BY REGION, SR_STS_CD) TOT_AES_RD_CNT
            ---- 1 COL
            ,SUM(BL_CFM_CNT_ID) OVER (PARTITION BY REGION, SR_STS_CD) TOT_BL_CFM_CNT_ID_CNT
            ,SUM(BL_CFM_CNT_AD) OVER (PARTITION BY REGION, SR_STS_CD) TOT_BL_CFM_CNT_AD_CNT
            ,SUM(BL_CFM_CNT_RD) OVER (PARTITION BY REGION, SR_STS_CD) TOT_BL_CFM_CNT_RD_CNT
            ,SUM(ADDI_CNT_ID) OVER (PARTITION BY REGION, SR_STS_CD) TOT_ADDI_CNT_ID_CNT
            ,SUM(ADDI_CNT_RD) OVER (PARTITION BY REGION, SR_STS_CD) TOT_ADDI_CNT_RD_CNT
            ,SUM(ADDI_CNT_AD) OVER (PARTITION BY REGION, SR_STS_CD) TOT_ADDI_CNT_AD_CNT
            ---- 1 COL
            ,SUM(i_BAS_PNT) OVER(PARTITION BY REGION, SR_STS_CD) TOT_I_BAS_PNT --BKG,SR별 , ID에만
            ,SUM(HBL_PNT) OVER(PARTITION BY REGION, SR_STS_CD) TOT_HBL_PNT --BKG,SR별 , ID에만
            ,SUM(CM_PNT) OVER(PARTITION BY REGION, SR_STS_CD) TOT_CM_PNT --BKG,SR별, ID에만
            ,SUM(CN_PNT) OVER(PARTITION BY REGION, SR_STS_CD) TOT_CN_PNT --BKG,SR별, ID에만
            ,SUM(RFA_PNT) OVER(PARTITION BY REGION, SR_STS_CD) TOT_RFA_PNT --BKG,SR별, RD에만
            ,SUM(TAA_PNT) OVER(PARTITION BY REGION, SR_STS_CD) TOT_TAA_PNT --BKG,SR별, RD에만
            ,SUM(SC_PNT) OVER(PARTITION BY REGION, SR_STS_CD) TOT_SC_PNT --BKG,SR별, RD에만
            ,SUM(SELF_PNT) OVER(PARTITION BY REGION, SR_STS_CD) TOT_SELF_PNT --BKG,SR별, RD에만
            ,SUM(PRE_PNT) OVER(PARTITION BY REGION, SR_STS_CD) TOT_PRE_PNT --BKG,SR별, RD에만
            -- TIME
            ,SUM(INPUT_ELAPSED_DUP) OVER (PARTITION BY REGION, SR_STS_CD) TOT_INPUT_ELAPSED --
            ,SUM(RATE_ELAPSED_DUP) OVER (PARTITION BY REGION, SR_STS_CD) TOT_RATE_ELAPSED --
            ,SUM(QA_ELAPSED_DUP) OVER (PARTITION BY REGION, SR_STS_CD) TOT_QA_ELAPSED --
			,SUM(QA_ELAPSED_DUP) OVER (PARTITION BY TOT_G) TOT_ELAPSED --
            ,C.*
    
        FROM (
            SELECT 
                '1' TOT_G
                ,COUNT(DISTINCT B.BKG_NO) OVER(PARTITION BY   B.REGION, B.SR_STS_CD) BKG_CNT_REASON_SR
                ,row_number() over(partition by b.region, b.sr_sts_cd order by b.region, b.sr_sts_cd) rn_reasion_sr_sts_cd
                ,DECODE(SR_BKG_NM,1, STAFF_CNT, 0) AS STAFF_CNT_BKG_GROUP --★
                ,DECODE(HIS_DUP_NM,1, 1, 0) AS his_CNT_BKG_GROUP --★
                ,DECODE(SR_BKG_NM,1, SI_CNT, 0) AS SI_CNT_BKG_GROUP --★
                ,CASE WHEN SR_BKG_NM =1 --SR_STS_CD,BKG 별 1번만 적용 로직
                       THEN ( SELECT NVL(MAX(HBL_SEQ),'0') FROM BKG_HBL WHERE BKG_NO = B.BKG_NO) 
                       ELSE 0
                 END HBL_CNT --H/BL                 
                ,DECODE(B.SR_KND_CD,'E',( DECODE(SR_AMD_TP_CD,'O', DECODE(HIS_DUP_NM,1, 1,0),0 )),0) ORI_EDI_BKG --★
                ,DECODE(B.SR_KND_CD,'F',( DECODE(SR_AMD_TP_CD,'O', DECODE(HIS_DUP_NM,1, 1,0),0 )),0) ORI_FAX_BKG --★             
                ,DECODE(B.SR_KND_CD,'M',( DECODE(SR_AMD_TP_CD,'O', DECODE(HIS_DUP_NM,1, 1,0),0 )),0) ORI_MAIL_BKG --★
                ,DECODE(B.SR_KND_CD,'S',( DECODE(SR_AMD_TP_CD,'O', DECODE(HIS_DUP_NM,1, 1,0),0 )),0) ORI_SEN_BKG --★
                 
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='ID' AND SR_AMD_TP_CD ='A' THEN 1
                      ELSE 0
                 END AMD_CNT_ID --★                              
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='AD' AND SR_AMD_TP_CD ='A' THEN 1
                      ELSE 0
                 END AMD_CNT_AD                  
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='RD'  AND SR_AMD_TP_CD ='A' THEN 1
                      ELSE 0
                 END AMD_CNT_RD   
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='ID'  AND SR_AMD_TP_CD ='H' THEN 1
                      ELSE 0
                 END HBL_IN_CNT_ID  --★                     
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='AD'  AND SR_AMD_TP_CD ='H' THEN 1
                      ELSE 0
                 END HBL_IN_CNT_AD  --★   
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='RD'  AND SR_AMD_TP_CD ='H' THEN 1
                      ELSE 0
                 END HBL_IN_CNT_RD  --★                                             
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='ID'  AND SR_AMD_TP_CD IN ('E','C','I') THEN 1
                      ELSE 0
                 END AES_CNT_ID  --★    
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='AD'  AND SR_AMD_TP_CD IN ('E','C','I') THEN 1
                      ELSE 0
                 END AES_CNT_AD  --★     
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='RD'  AND SR_AMD_TP_CD IN ('E','C','I') THEN 1
                      ELSE 0
                 END AES_CNT_RD  --★ 
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='ID'  AND SR_AMD_TP_CD ='B' THEN 1
                      ELSE 0
                 END BL_CFM_CNT_ID  --★                                        
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='AD'  AND SR_AMD_TP_CD ='B' THEN 1
                      ELSE 0
                 END BL_CFM_CNT_AD  --★  
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='RD'  AND SR_AMD_TP_CD ='B' THEN 1
                      ELSE 0
                 END BL_CFM_CNT_RD  --★     
                 
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='ID'  AND SR_AMD_TP_CD NOT IN ('O','A','H','E','C','I','B') THEN 1
                      ELSE 0
                 END ADDI_CNT_ID  --★    
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='RD'  AND SR_AMD_TP_CD NOT IN ('O','A','H','E','C','I','B') THEN 1
                      ELSE 0
                 END ADDI_CNT_RD  --★        
                ,CASE WHEN HIS_DUP_NM = 1 AND SR_STS_CD ='AD'  AND SR_AMD_TP_CD NOT IN ('O','A','H','E','C','I','B') THEN 1
                      ELSE 0
                 END ADDI_CNT_AD  --★                                                                
                -- HIS_DUP_NM 별 inputer점수 (history 별 점수)
                ,case when HIS_DUP_NM = 1  and SR_STS_CD='ID' 
                      then 
                         NVL((SELECT  to_number(ATTR_CTNT5)
                             FROM  BKG_HRD_CDG_CTNT 
                            WHERE HRD_CDG_ID ='DPCS_RPT_WGT' 
                              and 'I' = SUBSTR(SR_STS_CD,0,1) --id,Rd
                              AND ATTR_CTNT1 = SUBSTR(SR_STS_CD,0,1)
                              AND ATTR_CTNT2 = b.SR_KND_CD -- M,E,F
                              and b.SR_AMD_TP_CD in ('O','A','B','T','E','C','I')
                              AND ATTR_CTNT3 = b.SR_AMD_TP_CD -- L All,O Original,A Amend,B BL Confim,T Addition,E AES,C CAED,I IE
                            ),0) 
                       else 0
                  end i_BAS_PNT --IFA   
                 ,CASE  WHEN SR_BKG_NM =1 --BKG 별 1번만 적용 로직
                         and SR_STS_CD ='ID' 
                         AND (SELECT NVL(MAX(HBL_SEQ),'0') FROM BKG_HBL WHERE BKG_NO = B.BKG_NO ) >= NVL((
                                            SELECT ATTR_CTNT4 FROM BKG_HRD_CDG_CTNT 
                                            WHERE HRD_CDG_ID ='DPCS_RPT_WGT'
                                            AND ATTR_CTNT1 = 'I' --SUBSTR(CC.SR_STS_CD,0,1) 
                                            AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                            AND ATTR_CTNT3 = 'H'
                                            ), '999') 
    
                        THEN  
                            (SELECT  TO_NUMBER(ATTR_CTNT5 )
                                FROM  BKG_HRD_CDG_CTNT 
                               WHERE HRD_CDG_ID ='DPCS_RPT_WGT' 
                                 AND ATTR_CTNT1 = 'I' --SUBSTR(SR_STS_CD,0,1) 
                                 AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                 AND ATTR_CTNT3 = 'H' --
                             ) * ((SELECT NVL(MAX(HBL_SEQ),'0') FROM BKG_HBL WHERE BKG_NO = B.BKG_NO ) - 
                                           (
                                                SELECT ATTR_CTNT4 FROM BKG_HRD_CDG_CTNT 
                                                WHERE HRD_CDG_ID ='DPCS_RPT_WGT'
                                                AND ATTR_CTNT1 = 'I' --SUBSTR(CC.SR_STS_CD,0,1) 
                                                AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                                AND ATTR_CTNT3 = 'H'
                                            )+1
                                 )
                        ELSE 0
                   END AS HBL_PNT
                 ,CASE WHEN SR_BKG_NM=1 --BKG 별 1번만 적용 로직
                        and SR_STS_CD ='ID' 
                        AND (SELECT COUNT(1) FROM BKG_CNTR_MF_DESC WHERE BKG_NO = B.BKG_NO) >=  NVL((
                                                                        SELECT ATTR_CTNT4 FROM BKG_HRD_CDG_CTNT 
                                                                        WHERE HRD_CDG_ID ='DPCS_RPT_WGT'
                                                                        AND ATTR_CTNT1 = 'I' --SUBSTR(CC.SR_STS_CD,0,1) 
                                                                        AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                                                        AND ATTR_CTNT3 = 'M'
                                                                        ), '999') 
                        THEN   
                            NVL((SELECT  TO_NUMBER(ATTR_CTNT5) 
                                FROM  BKG_HRD_CDG_CTNT 
                               WHERE HRD_CDG_ID ='DPCS_RPT_WGT' 
                                 AND ATTR_CTNT1 = 'I' --SUBSTR(SR_STS_CD,0,1) 
                                 AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                 AND ATTR_CTNT3 = 'M' --
                             ),0) * ( (SELECT COUNT(1) FROM BKG_CNTR_MF_DESC WHERE BKG_NO = B.BKG_NO) - 
                                      (
                                        SELECT ATTR_CTNT4 FROM BKG_HRD_CDG_CTNT 
                                        WHERE HRD_CDG_ID ='DPCS_RPT_WGT'
                                        AND ATTR_CTNT1 = 'I' --SUBSTR(CC.SR_STS_CD,0,1) 
                                        AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                        AND ATTR_CTNT3 = 'M'
                                      ) +1
                                    )
                        ELSE 0
                   END AS CM_PNT   
                 ,CASE  WHEN SR_BKG_NM =1 --BKG 별 1번만 적용 로직
                        and SR_STS_CD ='ID' 
                        AND (SELECT  COUNT(1) FROM BKG_CONTAINER WHERE BKG_NO = B.BKG_NO) >=  NVL((
                                                                        SELECT ATTR_CTNT4 FROM BKG_HRD_CDG_CTNT 
                                                                        WHERE HRD_CDG_ID ='DPCS_RPT_WGT'
                                                                        AND ATTR_CTNT1 = 'I' --SUBSTR(CC.SR_STS_CD,0,1) 
                                                                        AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                                                        AND ATTR_CTNT3 = 'N'
                                                                        ), '999') 
                        THEN   
                            NVL((SELECT  TO_NUMBER(ATTR_CTNT5) 
                                FROM  BKG_HRD_CDG_CTNT 
                               WHERE HRD_CDG_ID ='DPCS_RPT_WGT' 
                                 AND ATTR_CTNT1 = 'I' --SUBSTR(SR_STS_CD,0,1) 
                                 AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                 AND ATTR_CTNT3 = 'N' --
                             ),0) * ( (SELECT  COUNT(1) FROM BKG_CONTAINER WHERE BKG_NO = B.BKG_NO) - 
                                      (
                                        SELECT ATTR_CTNT4 FROM BKG_HRD_CDG_CTNT 
                                        WHERE HRD_CDG_ID ='DPCS_RPT_WGT'
                                        AND ATTR_CTNT1 = 'I' --SUBSTR(CC.SR_STS_CD,0,1) 
                                        AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                        AND ATTR_CTNT3 = 'N'
                                       ) +1
                                    )
                        ELSE 0
                   END AS CN_PNT 
                 --RATER 의  S,X,R,D,P에대한 추가 점수
                 ,CASE WHEN  SR_BKG_NM =1 --BKG 별 1번만 적용 로직
                        AND 'RFA' = RATE_TYPE
                        AND 'RD' = SR_STS_CD
                       THEN  --ORIGINAL 조건 추가  
                            NVL((SELECT  TO_NUMBER(ATTR_CTNT5) 
                                FROM  BKG_HRD_CDG_CTNT 
                               WHERE HRD_CDG_ID ='DPCS_RPT_WGT' 
                                 AND ATTR_CTNT1 = SUBSTR(SR_STS_CD,0,1) --RD,AD,ID
                                 AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                 AND ATTR_CTNT3 = 'F' --RFA
                             ),0)
                        ELSE 0
                   END AS RFA_PNT      
                 ,CASE WHEN SR_BKG_NM =1 --BKG 별 1번만 적용 로직 
                        AND 'TAA' = RATE_TYPE
                        AND 'RD' = SR_STS_CD
                        THEN  --ORIGINAL 조건 추가  
                            NVL((SELECT  TO_NUMBER(ATTR_CTNT5) 
                                FROM  BKG_HRD_CDG_CTNT 
                               WHERE HRD_CDG_ID ='DPCS_RPT_WGT' 
                                 AND ATTR_CTNT1 = SUBSTR(SR_STS_CD,0,1) 
                                 AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                 AND ATTR_CTNT3 = 'X' --
                             ),0)
                        ELSE 0
                   END AS TAA_PNT       
                 ,CASE WHEN RN_BKG =1 --BKG 별 1번만 적용 로직
                        AND 'S/C' =RATE_TYPE
                        AND 'RD' = SR_STS_CD
                        THEN  --ORIGINAL 조건 추가  
                            NVL((SELECT  TO_NUMBER(ATTR_CTNT5) 
                                FROM  BKG_HRD_CDG_CTNT 
                               WHERE HRD_CDG_ID ='DPCS_RPT_WGT' 
                                 AND ATTR_CTNT1 = SUBSTR(SR_STS_CD,0,1) 
                                 AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                 AND ATTR_CTNT3 = 'S' --
                             ),0)
                        ELSE 0
                   END AS SC_PNT                  
                 ,CASE WHEN SR_BKG_NM =1 --BKG 별 1번만 적용 로직
                        AND 'RD' = SR_STS_CD
                        AND (SELECT  AUD_STS_CD  FROM BKG_RATE WHERE BKG_NO = B.BKG_NO) = 'Y'
                        THEN  --ORIGINAL 조건 추가  
                            NVL((SELECT  TO_NUMBER(ATTR_CTNT5) 
                                FROM  BKG_HRD_CDG_CTNT 
                               WHERE HRD_CDG_ID ='DPCS_RPT_WGT' 
                                 AND ATTR_CTNT1 = SUBSTR(SR_STS_CD,0,1) 
                                 AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                 AND ATTR_CTNT3 = 'D' --
                             ),0)
                        ELSE 0
                   END AS SELF_PNT   

                 ,CASE when SR_BKG_NM =1 --BKG 별 1번만 적용 로직
                        AND (SELECT COUNT(1) FROM BKG_CHG_RT WHERE BKG_NO = B.BKG_NO) > 0 
                        AND 'RD' = SR_STS_CD
                       THEN  
                            NVL((SELECT  TO_NUMBER(ATTR_CTNT5) 
                                FROM  BKG_HRD_CDG_CTNT 
                               WHERE HRD_CDG_ID ='DPCS_RPT_WGT' 
                                 AND ATTR_CTNT1 = SUBSTR(SR_STS_CD,0,1) 
                                 AND ATTR_CTNT2 = B.SR_KND_CD -- M,E,F
                                 AND ATTR_CTNT3 = 'P' --
                             ),0)
                        ELSE 0
                   END AS PRE_PNT  
                 ,CASE WHEN SR_BKG_NM =1 AND 'ID' = SR_STS_CD--BKG 별 1번만 적용 로직
                       THEN (SELECT COUNT(*) FROM BKG_CNTR_MF_DESC WHERE BKG_NO = B.BKG_NO)
                       ELSE 0
                  END CM_CNT
                 ,CASE WHEN SR_BKG_NM =1 AND 'ID' = SR_STS_CD--BKG 별 1번만 적용 로직
                       THEN (SELECT  COUNT(1) FROM BKG_CONTAINER WHERE BKG_NO = B.BKG_NO)
                       ELSE 0
                  END CN_CNT
                 ,DECODE(HIS_DUP_NM ,1 , SR_PROC_HRS , 0)   INPUT_ELAPSED_DUP        
                 ,DECODE(HIS_DUP_NM ,1 , SR_PROC_HRS , 0)   RATE_ELAPSED_DUP
                 ,DECODE(HIS_DUP_NM ,1 , SR_PROC_HRS , 0)   QA_ELAPSED_DUP
                 ,BKG_COM_INTG_CD_NM_FNC('CD02405',REGION) AS REGION_D
                 ,B.* 
                 
            FROM (
                SELECT /*+  INDEX(H XAK2BKG_SR_HIS)  */
                BKG_JOIN_FNC(CURSOR(SELECT DISTINCT RGN_OFC_CD FROM BKG_EML_ACCT_STUP S WHERE S.BKG_OFC_CD = B.BKG_OFC_CD ),'')AS  REGION
                ,H.SR_STS_CD,H.SR_HIS_SEQ
                ,ROW_NUMBER() OVER (PARTITION BY A.SR_KND_CD,SR_STS_CD, A.SR_NO, A.BKG_NO,SR_HIS_SEQ  ORDER BY SR_AMD_SEQ,SR_HIS_SEQ ) HIS_DUP_NM
                ,ROW_NUMBER() OVER (PARTITION BY A.BKG_NO,SR_STS_CD  ORDER BY SR_AMD_SEQ,SR_HIS_SEQ ) SR_BKG_NM
                ,COUNT(DISTINCT A.BKG_NO||A.SR_NO) OVER (PARTITION BY A.BKG_NO ,SR_STS_CD) SI_CNT --해당 BKG에 SR_STS_CD의 RQST갯수-> S/I #
                ,ROW_NUMBER() OVER(PARTITION BY A.BKG_NO ORDER BY A.BKG_NO) RN_BKG
                ,COUNT(DISTINCT H.ATND_USR_ID) OVER (PARTITION BY A.BKG_NO,SR_STS_CD   ) STAFF_CNT --@@@
                ,COUNT(DISTINCT A.BKG_NO ) OVER (PARTITION BY SR_STS_CD) BKG_CNT_SR
                ,DECODE(DECODE(SUBSTR(RFA_NO,0,3),'DUM',NULL,RFA_NO),NULL,DECODE(SC_NO,NULL,DECODE(TAA_NO,NULL,NULL,'TAA'),'S/C'),'RFA') RATE_TYPE 
                --,A.RQST_RN
                ,BKG_COM_INTG_CD_NM_FNC('CD01581',A.SR_KND_CD) AS SRC
                ,A.SR_KND_CD,A.SR_NO,A.BKG_NO,DECODE(A.SR_AMD_TP_CD,'N','O', A.SR_AMD_TP_CD) AS SR_AMD_TP_CD,A.SR_AMD_SEQ,A.SR_URG_CD
                ,A.SR_AMD_KND_CD,A.RCV_OFC_CD,A.DPCS_OFC_CD,A.SR_CRNT_STS_CD,A.SR_CRNT_INFO_CD,A.BL_DOC_INP_FLG
                ,A.BL_RT_FLG,A.BL_AUD_FLG,A.SR_WRK_STS_CD,A.BL_DRFT_FAX_OUT_FLG 
                ,H.ST_DT, H.ST_GDT 
                ,H.ATND_USR_ID ,RFA_NO,B.TAA_NO,B.SC_NO, H.SR_PROC_HRS,G.DPCS_WRK_GRP_CD
                ,BKG_COM_INTG_CD_NM_FNC('CD02100',G.DPCS_WRK_GRP_CD) AS USER_GROUP
                ,NVL(BKG_COM_INTG_CD_NM_FNC('CD01577',A.SR_AMD_TP_CD),'ORIGINAL') AS SI_KIND --ORIGINAL:N(OLD),O(현재)
                ,a.CRE_DT
                FROM 
                 BKG_SR_CRNT_RQST A 
                ,BKG_SR_HIS H
                ,BKG_DPCS_USR_GRP G
                ,BKG_BOOKING B
                ,BKG_RATE BR
                WHERE 1 = 1
                  AND A.SR_KND_CD =  H.SR_KND_CD --FAX,EMAIL,EDI
                  AND A.SR_NO =  H.SR_NO
                  AND A.BKG_NO =  H.BKG_NO
                  AND A.BKG_NO= B.BKG_NO
                  AND A.BKG_NO= BR.BKG_NO
                  AND H.ATND_USR_ID  = G.USR_ID(+)
                  AND A.DPCS_OFC_CD = NVL(@[dpcs_ofc_cd], A.DPCS_OFC_CD)

#if (${vvd_cd} != '') 
                  AND B.VSL_CD||B.SKD_VOY_NO||B.SKD_DIR_CD LIKE RTRIM(@[vvd_cd])|| '%'		
#end
                  
                  AND H.ATND_USR_ID  = G.USR_ID(+)
                  AND H.ATND_USR_ID = NVL(@[atnd_usr_id],H.ATND_USR_ID )
                  
                  #if (${pfm_by_queue_cd} == 'A' || ${pfm_by_queue_cd} == '') 
                  AND H.SR_STS_CD IN ('ID','RD','AD')  
                  #elseif (${pfm_by_queue_cd} != '') 
                  AND H.SR_STS_CD = @[pfm_by_queue_cd]
                  #end
                  AND H.ST_DT  >= TO_DATE(@[from_dt]||@[from_mt], 'YYYY-MM-DDHH24:MI')
                  AND H.ST_DT  <= TO_DATE(@[to_dt]||@[to_mt], 'YYYY-MM-DDHH24:MI')+0.00068

                  AND EXISTS (SELECT 'Y' --DISTINCT RGN_OFC_CD 
                                FROM BKG_EML_ACCT_STUP S WHERE S.BKG_OFC_CD = B.BKG_OFC_CD AND S.RGN_OFC_CD = NVL(DECODE(@[region],'A','',@[region]),S.RGN_OFC_CD) AND ROWNUM = 1
                             )  
                        
            ) B-- WHERE REGION ='J' AND SR_STS_CD='ID'
        )C
    ) D
)E  
WHERE R_S_ROW =1 
AND REGION IS NOT NULL
AND REGION <> 'A'
ORDER BY REGION, DECODE(SR_STS_CD,'ID',1,'RD',2,'AD',3)			]]></sql>
			<params>
				<param name="dpcs_ofc_cd" type="12" value="" out="N"/>
				<param name="vvd_cd" type="12" value="" out="N"/>
				<param name="atnd_usr_id" type="12" value="" out="N"/>
				<param name="pfm_by_queue_cd" type="12" value="" out="N"/>
				<param name="from_dt" type="12" value="" out="N"/>
				<param name="from_mt" type="12" value="" out="N"/>
				<param name="to_dt" type="12" value="" out="N"/>
				<param name="to_mt" type="12" value="" out="N"/>
				<param name="region" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
