/*=========================================================
*Copyright(c) 2015 CyberLogitec
*@FileName : SpacecontrolinquiryDBDAOSearchSpaceControlInquirySalesOrgSMPListRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2015.12.17
*@LastModifier : 최성민
*@LastVersion : 1.0
* 2015.12.17 최성민
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esm.spc.spacecontrolinquiry.spacecontrolinquiry.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author CHOI SUNGMIN
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class SpacecontrolinquiryDBDAOSearchSpaceControlInquirySalesOrgSMPListRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * 성수기(control option에 의한)시 Inquiry by Trade의 Office별 data를 조회합니다.
	  * [CHM-201322502-01] SPC 프로젝트 - 성수기 선복운영 개선을 위한 T/F추진
	  * [Trouble Shooting] 진마리아 SC Join 오류 수정
	  * [Trouble Shooting] 진마리아 Guide가 AQ_CD 없이 조회하고 있어, SZPDC 같은 경우의 가이드가 SHARC로 몰려서 나오는 것 수정
	  * 2013.11.26 진마리아 [CHM-201326854] SAQ project로 인한 SPC 변경건_FNC 우선제거
	  * 2013.12.05 김시몬 [CHM-201326854] SAQ project로 인한 SPC 변경건_테이블 변경
	  * 2014.01.13 김시몬 [선처리] SELSC/TYOSC RHQ변경에 따른 SQM SPC_OFC_LVL추가
	  * 2014.02.04 [CHM-201428383-01] RFA 로직 추가
	  * 2014.03.14 김시몬 [선처리] BKG RFA NULL 관련 보완
	  * 2014.03.17 [CHM-20142960] SMP/Allocation control보완 요청 - SPC_GET_SMP_AMEND_FNC 적용
	  * 2014.03.25 김시몬 [선처리] SQM 분기 구하는 로직 관련 보완
	  * 2014.05.22 [선반영] AES-SC관련 로직 추가
	  * 2014.08.18 CHM-201431081 SPC Allocation Control Option 추가 보완 요청
	  * 2015.03.03 CHM-201534458 SQM QTA주가 변경 관련 적용 요청
	  * 2015.07.16 Arie [CHM-201537094] MAS CMB 산출 로직 변경 적용 - dem/det 추가 CM = REV+DEM/DET-COST TTL
	  * 2015.09.16 이혜민 선반영 SPC_CONTI_CONV_FNC 태울때 SLAN_CD를 인자로 가져가던것 RLANE_CD로 수정 (RLANE_CD로 가져가야 제대로 펑션을 탐)
	  * </pre>
	  */
	public SpacecontrolinquiryDBDAOSearchSpaceControlInquirySalesOrgSMPListRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("trade",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vvd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("subtrade",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("bound",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("onc_ipc",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("rhq_gso",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("lane",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("rhq_txt",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esm.spc.spacecontrolinquiry.spacecontrolinquiry.integration").append("\n"); 
		query.append("FileName : SpacecontrolinquiryDBDAOSearchSpaceControlInquirySalesOrgSMPListRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("WITH PARAMS AS ( " ).append("\n"); 
		query.append("    SELECT T.OFC_CD," ).append("\n"); 
		query.append("           T.TRD_CD," ).append("\n"); 
		query.append("           T.SUB_TRD_CD," ).append("\n"); 
		query.append("           T.RLANE_CD," ).append("\n"); 
		query.append("           T.DIR_CD," ).append("\n"); 
		query.append("           T.IOC_CD," ).append("\n"); 
		query.append("           T.VSL_CD," ).append("\n"); 
		query.append("           T.SKD_VOY_NO," ).append("\n"); 
		query.append("           T.SKD_DIR_CD," ).append("\n"); 
		query.append("           T.COST_YR," ).append("\n"); 
		query.append("           T.COST_MON," ).append("\n"); 
		query.append("           T.COST_WK," ).append("\n"); 
		query.append("           T.DIV," ).append("\n"); 
		query.append("           T.HH_FLG," ).append("\n"); 
		query.append("           (" ).append("\n"); 
		query.append("              SELECT /*+INDEX_DESC (M XPKSPC_MDL_VER_MST) */" ).append("\n"); 
		query.append("                     DECODE(T.HH_FLG, 'Y', COST_YRWK||'-'||VER_SEQ, '200001-1')" ).append("\n"); 
		query.append("                FROM SPC_MDL_VER_MST M" ).append("\n"); 
		query.append("               WHERE M.TRD_CD = T.TRD_CD" ).append("\n"); 
		query.append("                 AND T.COST_YR||T.COST_WK BETWEEN M.VER_ST_YRWK AND M.VER_END_YRWK" ).append("\n"); 
		query.append("                 AND M.CFM_FLG  = 'Y'" ).append("\n"); 
		query.append("                 AND ROWNUM = 1" ).append("\n"); 
		query.append("           ) SEASON," ).append("\n"); 
		query.append("           -- 20140728 추가(S)" ).append("\n"); 
		query.append("           NVL(CO.CTRL_USA_SVC_MOD_FLG, 'N') AS CTRL_USA," ).append("\n"); 
		query.append("           NVL(CO.CTRL_ACCT_FLG   , 'N')     AS CTRL_ACCT  " ).append("\n"); 
		query.append("           -- 20140728 추가(E)" ).append("\n"); 
		query.append("		   ,BSE_QTR_CD" ).append("\n"); 
		query.append("		   ,BSE_YR" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("            SELECT P.OFC_CD    ," ).append("\n"); 
		query.append("                   V.TRD_CD    ," ).append("\n"); 
		query.append("                   V.SUB_TRD_CD," ).append("\n"); 
		query.append("                   V.RLANE_CD  ," ).append("\n"); 
		query.append("                   V.DIR_CD    , " ).append("\n"); 
		query.append("                   V.IOC_CD    ," ).append("\n"); 
		query.append("                   V.VSL_CD    ," ).append("\n"); 
		query.append("                   V.SKD_VOY_NO," ).append("\n"); 
		query.append("                   V.DIR_CD AS SKD_DIR_CD," ).append("\n"); 
		query.append("                   SUBSTR(V.SLS_YRMON, 1, 4) AS COST_YR," ).append("\n"); 
		query.append("                   SUBSTR(V.SLS_YRMON, 5, 2) AS COST_MON," ).append("\n"); 
		query.append("                   V.COST_WK   ," ).append("\n"); 
		query.append("                   P.DIV," ).append("\n"); 
		query.append("                   DECODE(H.DIR_CD, NULL, 'N', 'Y') AS HH_FLG" ).append("\n"); 
		query.append("                   , CASE WHEN V.COST_YRMON >= '201501' " ).append("\n"); 
		query.append("                          THEN CEIL(TO_NUMBER(SUBSTR(V.COST_YRMON, -2))/3)||'Q' " ).append("\n"); 
		query.append("                          ELSE CEIL(TO_NUMBER(DECODE(V.COST_WK,'00','01','53','52',V.COST_WK))/13)||'Q'" ).append("\n"); 
		query.append("                     END BSE_QTR_CD --2015.03.04 CHM-201534435 SQM QTA주가 변경 관련 적용 요청" ).append("\n"); 
		query.append("                   , SUBSTR(V.COST_YRMON, 1,4) AS BSE_YR" ).append("\n"); 
		query.append("              FROM (" ).append("\n"); 
		query.append("                  SELECT SUBSTR(@[rhq_txt],1,5)  AS OFC_CD ," ).append("\n"); 
		query.append("                         @[trade]    AS TRD_CD    ," ).append("\n"); 
		query.append("                         @[subtrade] AS SUB_TRD_CD," ).append("\n"); 
		query.append("                         @[lane]     AS RLANE_CD  ," ).append("\n"); 
		query.append("                         @[bound]    AS DIR_CD    ," ).append("\n"); 
		query.append("                         @[onc_ipc]  AS IOC_CD    ," ).append("\n"); 
		query.append("                         @[vvd]      AS VVD       ," ).append("\n"); 
		query.append("                         @[rhq_gso]  AS DIV" ).append("\n"); 
		query.append("                    FROM DUAL" ).append("\n"); 
		query.append("#if (${rhq_txt} == 'SHARC,SINRS') " ).append("\n"); 
		query.append("    			   UNION ALL" ).append("\n"); 
		query.append("                  SELECT SUBSTR(@[rhq_txt],7,5)  AS OFC_CD  ," ).append("\n"); 
		query.append("                         @[trade]    AS TRD_CD    ," ).append("\n"); 
		query.append("                         @[subtrade] AS SUB_TRD_CD," ).append("\n"); 
		query.append("                         @[lane]     AS RLANE_CD  ," ).append("\n"); 
		query.append("                         @[bound]    AS DIR_CD    ," ).append("\n"); 
		query.append("                         @[onc_ipc]  AS IOC_CD    ," ).append("\n"); 
		query.append("                         @[vvd]      AS VVD       ," ).append("\n"); 
		query.append("                         @[rhq_gso]  AS DIV" ).append("\n"); 
		query.append("                    FROM DUAL" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("                   ) P," ).append("\n"); 
		query.append("                   MAS_MON_VVD V," ).append("\n"); 
		query.append("                   SPC_HD_HUL_MST H" ).append("\n"); 
		query.append("             WHERE V.TRD_CD     = P.TRD_CD" ).append("\n"); 
		query.append("               AND V.RLANE_CD   = P.RLANE_CD" ).append("\n"); 
		query.append("               AND V.IOC_CD     = P.IOC_CD" ).append("\n"); 
		query.append("               AND V.VSL_CD     = SUBSTR(P.VVD, 1, 4)" ).append("\n"); 
		query.append("               AND V.SKD_VOY_NO = SUBSTR(P.VVD, 5, 4)" ).append("\n"); 
		query.append("               AND V.DIR_CD     = SUBSTR(P.VVD, 9)" ).append("\n"); 
		query.append("               AND V.TRD_CD     = H.TRD_CD(+)" ).append("\n"); 
		query.append("               AND V.RLANE_CD   = H.RLANE_CD(+)" ).append("\n"); 
		query.append("               AND V.DIR_CD     = H.DIR_CD(+)" ).append("\n"); 
		query.append("         ) T, SPC_ALOC_CTRL_OPT CO  -- 20140728 추가" ).append("\n"); 
		query.append("     WHERE T.RLANE_CD   = CO.RLANE_CD  (+)" ).append("\n"); 
		query.append("       AND T.SKD_DIR_CD = CO.DIR_CD    (+)" ).append("\n"); 
		query.append("       AND T.VSL_CD     = CO.VSL_CD    (+)" ).append("\n"); 
		query.append("       AND T.SKD_VOY_NO = CO.SKD_VOY_NO(+)" ).append("\n"); 
		query.append("       AND T.SKD_DIR_CD = CO.SKD_DIR_CD(+)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", QTA_DATA AS (" ).append("\n"); 
		query.append("    SELECT DECODE(SUBSTR(D.TRD_CD, 1, 1), 'I', 'I', 'O') AS IOC_TS_CD," ).append("\n"); 
		query.append("           DECODE(P.DIV, 'RHQ', NVL(D.AQ_CD,  O.N2ND_PRNT_OFC_CD), ( SELECT O.SAQ_RGN_OFC_CD" ).append("\n"); 
		query.append("                                                             FROM SPC_OFC_LVL O" ).append("\n"); 
		query.append("                                                            WHERE O.OFC_CD = SPC_SCR_OFC_CONV_FNC(D.RGN_OFC_CD, 'EsmSpc0022')" ).append("\n"); 
		query.append("                                                              AND P.COST_YR || P.COST_WK BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK" ).append("\n"); 
		query.append("                                                              AND O.DELT_FLG = 'N')) AS OFC_CD," ).append("\n"); 
		query.append("           (D.LOD_QTY) AS VOL," ).append("\n"); 
		query.append("           ((D.GRS_RPB_REV - D.PA_CM_UC_AMT) * D.LOD_QTY) AS CM" ).append("\n"); 
		query.append("      FROM PARAMS           P," ).append("\n"); 
		query.append("           SQM_CFM_QTA      D," ).append("\n"); 
		query.append("           SQM_QTA_RLSE_VER B," ).append("\n"); 
		query.append("           SPC_OFC_LVL      O" ).append("\n"); 
		query.append("     WHERE B.BSE_YR           = P.BSE_YR" ).append("\n"); 
		query.append("       --AND B.BSE_QTR_CD       = CEIL(TO_NUMBER(DECODE(P.COST_WK,'00','01','53','52',P.COST_WK))/13)||'Q' --CEIL(TO_NUMBER(P.COST_MON) / 3)||'Q'" ).append("\n"); 
		query.append("	   -- CHM-201534458 SQM QTA주가 변경 관련 적용 요청" ).append("\n"); 
		query.append("	   AND B.BSE_QTR_CD      = P.BSE_QTR_CD" ).append("\n"); 
		query.append("       AND B.SQM_VER_STS_CD   = 'R'" ).append("\n"); 
		query.append("       AND B.BSE_TP_CD        = 'Q' -- 분기 20131205추가" ).append("\n"); 
		query.append("       AND D.QTA_RLSE_VER_NO  = B.QTA_RLSE_VER_NO" ).append("\n"); 
		query.append("       AND D.BSE_TP_CD        = B.BSE_TP_CD -- 분기 20131205추가 " ).append("\n"); 
		query.append("       AND D.BSE_YR           = B.BSE_YR" ).append("\n"); 
		query.append("       AND D.BSE_QTR_CD       = B.BSE_QTR_CD" ).append("\n"); 
		query.append("       AND D.QTA_TGT_CD       = 'D'" ).append("\n"); 
		query.append("       AND D.OFC_VW_CD        = 'L'  -- 20131205추가" ).append("\n"); 
		query.append("       AND D.TRD_CD           = P.TRD_CD" ).append("\n"); 
		query.append("       AND D.RLANE_CD         = P.RLANE_CD" ).append("\n"); 
		query.append("       AND D.DIR_CD           = P.DIR_CD" ).append("\n"); 
		query.append("       AND D.VSL_CD           = P.VSL_CD" ).append("\n"); 
		query.append("       AND D.SKD_VOY_NO       = P.SKD_VOY_NO" ).append("\n"); 
		query.append("       AND D.SKD_DIR_CD       = P.SKD_DIR_CD" ).append("\n"); 
		query.append("       AND (P.OFC_CD IS NULL OR O.N2ND_PRNT_OFC_CD = P.OFC_CD OR D.AQ_CD = P.OFC_CD)" ).append("\n"); 
		query.append("       AND P.COST_YR || P.COST_WK BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK" ).append("\n"); 
		query.append("       --AND D.RGN_OFC_CD        = O.OFC_CD" ).append("\n"); 
		query.append("       AND (" ).append("\n"); 
		query.append("             SELECT NVL(MAX(ROC.CONV_RGN_OFC_CD), D.RGN_OFC_CD)" ).append("\n"); 
		query.append("               FROM SPC_RGN_OFC_CONV ROC" ).append("\n"); 
		query.append("              WHERE ROC.SLS_RGN_OFC_CD = D.RGN_OFC_CD" ).append("\n"); 
		query.append("           ) = O.OFC_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", FCST_DATA AS (" ).append("\n"); 
		query.append("    SELECT IOC_TS_CD," ).append("\n"); 
		query.append("           OFC_CD," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("           -- 20140728 추가(S)" ).append("\n"); 
		query.append("           USA_BKG_MOD_CD," ).append("\n"); 
		query.append("           --CUST_ACCT," ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           -- 20140728 추가(E)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("           NVL(CUST_CTRL_CD,'C') CUST_CTRL_CD," ).append("\n"); 
		query.append("           SUM(CFM_TTL_QTY) AS VOL_TTL," ).append("\n"); 
		query.append("           SUM(CFM_40FT_HC_QTY) AS VOL_HC ," ).append("\n"); 
		query.append("           SUM(CFM_45FT_HC_QTY) AS VOL_45 ," ).append("\n"); 
		query.append("           SUM(CFM_53FT_QTY)    AS VOL_53 ," ).append("\n"); 
		query.append("           SUM(CFM_RF_QTY)      AS VOL_RF ," ).append("\n"); 
		query.append("           SUM(CFM_TTL_WGT)     AS WGT_TTL," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("           -- 20140728 추가(S)" ).append("\n"); 
		query.append("           SUM(CFM_20FT_DRY_QTY) AS VOL_D2, -- SPC_DLY_FCAST_CUST.D2" ).append("\n"); 
		query.append("           SUM(CFM_40FT_DRY_QTY) AS VOL_D4, -- SPC_DLY_FCAST_CUST.D4" ).append("\n"); 
		query.append("           SUM(CFM_RD_QTY)       AS VOL_RD  -- SPC_DLY_FCAST_CUST.RD" ).append("\n"); 
		query.append("           -- 20140728 추가(E)" ).append("\n"); 
		query.append("      FROM (" ).append("\n"); 
		query.append("            SELECT D.IOC_TS_CD AS IOC_TS_CD," ).append("\n"); 
		query.append("                   DECODE(P.DIV, 'RHQ', NVL(D.SLS_AQ_CD, D.SLS_RHQ_CD), D.SLS_RGN_OFC_CD) AS OFC_CD," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                   -- 20140728 추가(S)" ).append("\n"); 
		query.append("                   D.USA_BKG_MOD_CD, -- SPC_DLY_FCAST_CUST.LOCAL/IPI" ).append("\n"); 
		query.append("                   " ).append("\n"); 
		query.append("                   --CASE WHEN P.CTRL_ACCT = 'Y' THEN" ).append("\n"); 
		query.append("                   --     D.CUST_CNT_CD||LPAD(D.CUST_SEQ,6,'0') -- SPC_DLY_FCAST_CUST.ACCT" ).append("\n"); 
		query.append("                   --ELSE" ).append("\n"); 
		query.append("                   --     'XX999999'" ).append("\n"); 
		query.append("                   --END AS CUST_ACCT," ).append("\n"); 
		query.append("                   " ).append("\n"); 
		query.append("                   -- 20140728 추가(E)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                   NVL((SELECT CUST_CTRL_CD FROM SPC_MDL_CUST_CTRL C " ).append("\n"); 
		query.append("                                                WHERE P.TRD_CD = C.TRD_CD" ).append("\n"); 
		query.append("                                                  AND SUBSTR(P.SEASON,1,6) = C.COST_YRWK" ).append("\n"); 
		query.append("                                                  AND SUBSTR(P.SEASON,8)   = C.VER_SEQ" ).append("\n"); 
		query.append("                                                  AND D.CUST_CNT_CD        = C.CUST_CNT_CD" ).append("\n"); 
		query.append("                                                  AND D.CUST_SEQ           = C.CUST_SEQ" ).append("\n"); 
		query.append("                                                  AND NVL(D.SC_NO, NVL(D.RFA_NO,' ')) = NVL(C.SC_NO, NVL(C.RFA_NO,' '))" ).append("\n"); 
		query.append("                                                  --AND DECODE(P.TRD_CD, 'AES', NVL(D.RFA_NO,' '), NVL(D.SC_NO,' ')) = DECODE(P.TRD_CD, 'AES', NVL(C.RFA_NO,' '), NVL(C.SC_NO,NVL(D.SC_NO,' ')))" ).append("\n"); 
		query.append("                   ),'C') AS CUST_CTRL_CD," ).append("\n"); 
		query.append("                   D.CFM_TTL_QTY," ).append("\n"); 
		query.append("                   D.CFM_40FT_HC_QTY," ).append("\n"); 
		query.append("                   D.CFM_45FT_HC_QTY," ).append("\n"); 
		query.append("                   D.CFM_53FT_QTY," ).append("\n"); 
		query.append("                   D.CFM_RF_QTY," ).append("\n"); 
		query.append("                   D.CFM_TTL_WGT," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                   -- 20140728 추가(S)" ).append("\n"); 
		query.append("                   D.CFM_20FT_DRY_QTY, -- SPC_DLY_FCAST_CUST.D2" ).append("\n"); 
		query.append("                   D.CFM_40FT_DRY_QTY, -- SPC_DLY_FCAST_CUST.D4" ).append("\n"); 
		query.append("                   D.CFM_RD_QTY        -- SPC_DLY_FCAST_CUST.RD" ).append("\n"); 
		query.append("                   -- 20140728 추가(E)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("              FROM PARAMS             P," ).append("\n"); 
		query.append("                   SPC_DLY_FCAST_CUST D" ).append("\n"); 
		query.append("             WHERE D.TRD_CD      = P.TRD_CD" ).append("\n"); 
		query.append("               AND D.SUB_TRD_CD  = P.SUB_TRD_CD" ).append("\n"); 
		query.append("               AND D.RLANE_CD    = P.RLANE_CD" ).append("\n"); 
		query.append("               AND D.DIR_CD      = P.DIR_CD" ).append("\n"); 
		query.append("               AND D.VSL_CD      = P.VSL_CD" ).append("\n"); 
		query.append("               AND D.SKD_VOY_NO  = P.SKD_VOY_NO" ).append("\n"); 
		query.append("               AND D.SKD_DIR_CD  = P.SKD_DIR_CD" ).append("\n"); 
		query.append("               AND D.IOC_CD      = P.IOC_CD" ).append("\n"); 
		query.append("               AND (P.OFC_CD IS NULL OR D.SLS_RHQ_CD = P.OFC_CD OR D.SLS_AQ_CD = P.OFC_CD)" ).append("\n"); 
		query.append("          ) T" ).append("\n"); 
		query.append("     GROUP BY OFC_CD, " ).append("\n"); 
		query.append("              IOC_TS_CD, " ).append("\n"); 
		query.append("              USA_BKG_MOD_CD, " ).append("\n"); 
		query.append("              --CUST_ACCT, " ).append("\n"); 
		query.append("              CUST_CTRL_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", ALOC_DATA AS (" ).append("\n"); 
		query.append("    SELECT  IOC_TS_CD," ).append("\n"); 
		query.append("            OFC_CD," ).append("\n"); 
		query.append("            USA_BKG_MOD_CD," ).append("\n"); 
		query.append("            --CUST_ACCT," ).append("\n"); 
		query.append("            CUST_CTRL_CD," ).append("\n"); 
		query.append("            SUM(ASGN_TTL_QTY)     AS VOL_TTL," ).append("\n"); 
		query.append("            SUM(ASGN_40FT_HC_QTY) AS VOL_HC ," ).append("\n"); 
		query.append("            SUM(ASGN_45FT_HC_QTY) AS VOL_45 ," ).append("\n"); 
		query.append("            SUM(ASGN_53FT_QTY)    AS VOL_53 ," ).append("\n"); 
		query.append("            SUM(ASGN_RF_QTY)      AS VOL_RF ," ).append("\n"); 
		query.append("            SUM(ASGN_TTL_WGT)     AS WGT_TTL," ).append("\n"); 
		query.append("          " ).append("\n"); 
		query.append("            -- 20140728 추가(S)" ).append("\n"); 
		query.append("            SUM(ASGN_20FT_DRY_QTY) AS VOL_D2, -- SPC_ALOC_POL_POD.D2" ).append("\n"); 
		query.append("            SUM(ASGN_40FT_DRY_QTY) AS VOL_D4, -- SPC_ALOC_POL_POD.D4" ).append("\n"); 
		query.append("            SUM(ASGN_RD_QTY)       AS VOL_RD  -- SPC_ALOC_POL_POD.RD" ).append("\n"); 
		query.append("            -- 20140728 추가(E)" ).append("\n"); 
		query.append("      FROM  (" ).append("\n"); 
		query.append("              SELECT DECODE(D.TS_FLG, 'Y', 'T', D.IOC_CD) AS IOC_TS_CD," ).append("\n"); 
		query.append("                     DECODE(M.DIV, 'RHQ', NVL(D.SLS_AQ_CD, D.SLS_RHQ_CD), D.SLS_RGN_OFC_CD) AS OFC_CD," ).append("\n"); 
		query.append("          " ).append("\n"); 
		query.append("                     -- 20140728 추가(S)" ).append("\n"); 
		query.append("                     D.USA_BKG_MOD_CD,-- SPC_ALOC_CUST_POL_POD.LOCAL/IPI" ).append("\n"); 
		query.append("                     --D.CUST_CNT_CD||LPAD(D.CUST_SEQ,6,'0') AS CUST_ACCT, -- SPC_DLY_FCAST_CUST.ACCT" ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                     -- 20140728 추가(E)" ).append("\n"); 
		query.append("          " ).append("\n"); 
		query.append("                     D.CUST_CTRL_CD," ).append("\n"); 
		query.append("                     D.ASGN_TTL_QTY," ).append("\n"); 
		query.append("                     D.ASGN_40FT_HC_QTY," ).append("\n"); 
		query.append("                     D.ASGN_45FT_HC_QTY," ).append("\n"); 
		query.append("                     D.ASGN_53FT_QTY," ).append("\n"); 
		query.append("                     D.ASGN_RF_QTY," ).append("\n"); 
		query.append("                     D.ASGN_TTL_WGT," ).append("\n"); 
		query.append("          " ).append("\n"); 
		query.append("                     -- 20140728 추가(S)" ).append("\n"); 
		query.append("                     D.ASGN_20FT_DRY_QTY, -- SPC_ALOC_POL_POD.D2" ).append("\n"); 
		query.append("                     D.ASGN_40FT_DRY_QTY, -- SPC_ALOC_POL_POD.D4" ).append("\n"); 
		query.append("                     D.ASGN_RD_QTY        -- SPC_ALOC_POL_POD.RD" ).append("\n"); 
		query.append("                     -- 20140728 추가(E)" ).append("\n"); 
		query.append("          " ).append("\n"); 
		query.append("                FROM PARAMS           M," ).append("\n"); 
		query.append("                     SPC_ALOC_CUST_POL_POD D" ).append("\n"); 
		query.append("               WHERE D.TRD_CD     = M.TRD_CD" ).append("\n"); 
		query.append("                 AND D.SUB_TRD_CD = M.SUB_TRD_CD" ).append("\n"); 
		query.append("                 AND D.RLANE_CD   = M.RLANE_CD" ).append("\n"); 
		query.append("                 AND D.DIR_CD     = M.DIR_CD" ).append("\n"); 
		query.append("                 AND D.VSL_CD     = M.VSL_CD" ).append("\n"); 
		query.append("                 AND D.SKD_VOY_NO = M.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND D.SKD_DIR_CD = M.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND DECODE(TS_FLG, 'Y', DECODE(D.RLANE_CD, 'IMUAE', 'O', D.IOC_CD), D.IOC_CD) = M.IOC_CD" ).append("\n"); 
		query.append("                 AND D.SLS_RGN_OFC_CD IS NOT NULL" ).append("\n"); 
		query.append("                 AND (M.OFC_CD IS NULL OR D.SLS_RHQ_CD = M.OFC_CD OR D.SLS_AQ_CD = M.OFC_CD) " ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("  GROUP BY OFC_CD," ).append("\n"); 
		query.append("           IOC_TS_CD, " ).append("\n"); 
		query.append("           USA_BKG_MOD_CD, " ).append("\n"); 
		query.append("           --CUST_ACCT, " ).append("\n"); 
		query.append("           CUST_CTRL_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", BKG_DATA AS (" ).append("\n"); 
		query.append("    SELECT IOC_TS_CD              ," ).append("\n"); 
		query.append("           OFC_CD                 ," ).append("\n"); 
		query.append("           -- 20140728 추가(S)" ).append("\n"); 
		query.append("           USA_BKG_MOD_CD, -- LOCAL/IPI" ).append("\n"); 
		query.append("           --CUST_ACCT, " ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           -- 20140728 추가(E)" ).append("\n"); 
		query.append("           CUST_CTRL_CD    ," ).append("\n"); 
		query.append("           SUM(BKG_TTL) AS BKG_TTL," ).append("\n"); 
		query.append("           SUM(BKG_20)  AS BKG_20 ," ).append("\n"); 
		query.append("           SUM(BKG_40)  AS BKG_40 ," ).append("\n"); 
		query.append("           SUM(BKG_HC)  AS BKG_HC ," ).append("\n"); 
		query.append("           SUM(BKG_45)  AS BKG_45 ," ).append("\n"); 
		query.append("           SUM(BKG_53)  AS BKG_53 ," ).append("\n"); 
		query.append("           SUM(BKG_RF)  AS BKG_RF ," ).append("\n"); 
		query.append("           SUM(BKG_WGT) AS BKG_WGT," ).append("\n"); 
		query.append("           -- 20140728 추가" ).append("\n"); 
		query.append("           SUM(BKG_D2)  AS BKG_D2 ," ).append("\n"); 
		query.append("           SUM(BKG_D4)  AS BKG_D4 ," ).append("\n"); 
		query.append("           SUM(BKG_RD)  AS BKG_RD " ).append("\n"); 
		query.append("   	  FROM (" ).append("\n"); 
		query.append("            SELECT DECODE(DIV, 'RHQ', NVL(N3RD_PRNT_OFC_CD, N2ND_PRNT_OFC_CD), N4TH_PRNT_OFC_CD) AS OFC_CD," ).append("\n"); 
		query.append("                   " ).append("\n"); 
		query.append("                   -- 20140728 추가(S)" ).append("\n"); 
		query.append("                   USA_BKG_MOD_CD, -- LOCAL/IPI" ).append("\n"); 
		query.append("                   --CUST_ACCT,   " ).append("\n"); 
		query.append("                   " ).append("\n"); 
		query.append("                   -- 20140728 추가(E)" ).append("\n"); 
		query.append("                   " ).append("\n"); 
		query.append("                   CUST_CTRL_CD    ," ).append("\n"); 
		query.append("                   DECODE(VSL_PRE_PST_CD, 'T', IOC_CD, 'T') AS IOC_TS_CD," ).append("\n"); 
		query.append("                   TO_NUMBER(NVL(SUBSTR(VAL,  1, 14), 0))                              AS BKG_TTL," ).append("\n"); 
		query.append("                   TO_NUMBER(NVL(SUBSTR(VAL, 15, 14), 0))                              AS BKG_20 ," ).append("\n"); 
		query.append("                   TO_NUMBER(NVL(SUBSTR(VAL, 29, 14), 0))                              AS BKG_40 ," ).append("\n"); 
		query.append("                   " ).append("\n"); 
		query.append("                   TO_NUMBER(NVL(SUBSTR(VAL, 43, 14), 0))                              AS BKG_D2,   -- D2" ).append("\n"); 
		query.append("				           TO_NUMBER(NVL(SUBSTR(VAL, 57, 14), 0))                              AS BKG_D4,   -- D4" ).append("\n"); 
		query.append("				" ).append("\n"); 
		query.append("                   TO_NUMBER(NVL(SUBSTR(VAL, 71, 14), 0))                              AS BKG_HC," ).append("\n"); 
		query.append("          			   TO_NUMBER(NVL(SUBSTR(VAL, 85, 14), 0))                              AS BKG_45," ).append("\n"); 
		query.append("          			   TO_NUMBER(NVL(SUBSTR(VAL, 99, 14), 0))                              AS BKG_53," ).append("\n"); 
		query.append("          			   TO_NUMBER(NVL(SUBSTR(VAL,113, 14), 0))                              AS BKG_RF," ).append("\n"); 
		query.append("          			   TO_NUMBER(NVL(SUBSTR(VAL,127, 14), 0))                              AS BKG_RD,   -- RD" ).append("\n"); 
		query.append("          			   TO_NUMBER(NVL(SUBSTR(VAL,141, 14), 0))                              AS BKG_WGT" ).append("\n"); 
		query.append("       		    FROM (" ).append("\n"); 
		query.append("                    SELECT B.BKG_STS_CD      ," ).append("\n"); 
		query.append("                           O.N2ND_PRNT_OFC_CD," ).append("\n"); 
		query.append("                           O.N3RD_PRNT_OFC_CD," ).append("\n"); 
		query.append("                           O.N4TH_PRNT_OFC_CD," ).append("\n"); 
		query.append("                           " ).append("\n"); 
		query.append("                           -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           CASE WHEN M.CTRL_USA = 'Y' AND (SUBSTR(B.POL_CD,1,2) IN ('US','CA') OR SUBSTR(B.POD_CD,1,2) IN ('US','CA')) THEN" ).append("\n"); 
		query.append("                                NVL(SPC_USA_MODE_FNC(B.RCV_TERM_CD, B.DE_TERM_CD, B.POR_CD, B.POL_CD, B.POD_CD, B.DEL_CD),'OTH') -- SPC_DLY_FCAST_CUST.LOCAL/IPI -- SPC_DLY_FCAST_CUST.LOCAL/IPI" ).append("\n"); 
		query.append("                           ELSE" ).append("\n"); 
		query.append("                                'OTH'" ).append("\n"); 
		query.append("                           END AS USA_BKG_MOD_CD," ).append("\n"); 
		query.append("                           " ).append("\n"); 
		query.append("                           --CASE WHEN M.CTRL_ACCT = 'Y' THEN" ).append("\n"); 
		query.append("                           --      NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                           --         FROM SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("                           --        WHERE M.RLANE_CD                           = D.RLANE_CD" ).append("\n"); 
		query.append("                           --          AND SPC_GET_REP_TRD_FNC(M.RLANE_CD)      = D.TRD_CD" ).append("\n"); 
		query.append("                           --          AND SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD)  = D.SUB_TRD_CD" ).append("\n"); 
		query.append("                           --          AND M.SKD_DIR_CD                         = D.DIR_CD " ).append("\n"); 
		query.append("                           --          AND D.ALOC_CTRL_TP_CD                    = 'A'  " ).append("\n"); 
		query.append("                           --          AND D.CTRL_LOC_ACCT_CD  = B.CTRT_CUST_CNT_CD ||LPAD(B.CTRT_CUST_SEQ,6,'0')                                        " ).append("\n"); 
		query.append("                           --      ), 'XX999999') " ).append("\n"); 
		query.append("                           --ELSE" ).append("\n"); 
		query.append("                           --     'XX999999'" ).append("\n"); 
		query.append("                           --END AS CUST_ACCT," ).append("\n"); 
		query.append("                                                     " ).append("\n"); 
		query.append("                          -- 20140728 추가(E)" ).append("\n"); 
		query.append("                          " ).append("\n"); 
		query.append("                           --20140304 추가" ).append("\n"); 
		query.append("                           CASE WHEN M.TRD_CD = 'AES' AND DECODE(SUBSTR(B.RFA_NO, 1, 3), 'DUM', '', B.RFA_NO) IS NULL AND BC.CUST_CNT_CD = 'CN' AND B.SC_NO IS NULL THEN" ).append("\n"); 
		query.append("                                  NVL(SPC_GET_SMP_RFA_FNC('C',M.SEASON,  BC.CUST_CNT_CD||LPAD(BC.CUST_SEQ,6,'0'), B.POL_CD,B.POD_CD),'C')" ).append("\n"); 
		query.append("                                  " ).append("\n"); 
		query.append("                           ELSE   " ).append("\n"); 
		query.append("                                  NVL((SELECT CUST_CTRL_CD " ).append("\n"); 
		query.append("                                         FROM SPC_MDL_CUST_CTRL C " ).append("\n"); 
		query.append("                                        WHERE M.TRD_CD = C.TRD_CD" ).append("\n"); 
		query.append("                                          AND SUBSTR(M.SEASON,1,6) = C.COST_YRWK" ).append("\n"); 
		query.append("                                          AND SUBSTR(M.SEASON,8)   = C.VER_SEQ" ).append("\n"); 
		query.append("                                          AND B.CTRT_CUST_CNT_CD   = C.CUST_CNT_CD" ).append("\n"); 
		query.append("                                          AND B.CTRT_CUST_SEQ      = C.CUST_SEQ" ).append("\n"); 
		query.append("                                          AND NVL(SPC_GET_SMP_AMEND_FNC(M.TRD_CD, SUBSTR(M.SEASON, 1, 6), SUBSTR(M.SEASON, 8), B.SC_NO), NVL(SPC_GET_SMP_AMEND_FNC(M.TRD_CD, SUBSTR(M.SEASON, 1, 6), SUBSTR(M.SEASON, 8), DECODE(SUBSTR(B.RFA_NO, 1, 3), 'DUM', '', B.RFA_NO)),' ')) = NVL(C.SC_NO, NVL(C.RFA_NO,' '))" ).append("\n"); 
		query.append("                                          --AND DECODE(M.TRD_CD, 'AES', NVL(SPC_GET_SMP_AMEND_FNC(M.TRD_CD, SUBSTR(M.SEASON, 1, 6), SUBSTR(M.SEASON, 8), DECODE(SUBSTR(B.RFA_NO, 1, 3), 'DUM', '', B.RFA_NO)),' '), NVL(SPC_GET_SMP_AMEND_FNC(M.TRD_CD, SUBSTR(M.SEASON, 1, 6), SUBSTR(M.SEASON, 8), B.SC_NO),' ')) = DECODE(M.TRD_CD, 'AES', NVL(C.RFA_NO,' '), NVL(C.SC_NO,NVL(SPC_GET_SMP_AMEND_FNC(M.TRD_CD, SUBSTR(M.SEASON, 1, 6), SUBSTR(M.SEASON, 8), B.SC_NO),' ')))" ).append("\n"); 
		query.append("                                     ),'C')" ).append("\n"); 
		query.append("                           END AS CUST_CTRL_CD," ).append("\n"); 
		query.append("                           " ).append("\n"); 
		query.append("                           M.DIV             ," ).append("\n"); 
		query.append("                           M.RLANE_CD        ," ).append("\n"); 
		query.append("                           M.IOC_CD          ," ).append("\n"); 
		query.append("                           BV.POL_YD_CD      ," ).append("\n"); 
		query.append("                           BV.POL_CD         ," ).append("\n"); 
		query.append("                           BV.POD_YD_CD      ," ).append("\n"); 
		query.append("                           BV.POD_CD         ," ).append("\n"); 
		query.append("                           B.DEL_NOD_CD      ," ).append("\n"); 
		query.append("                           B.DEL_CD          ," ).append("\n"); 
		query.append("                           BV.VSL_PRE_PST_CD ," ).append("\n"); 
		query.append("                           (" ).append("\n"); 
		query.append("							SELECT  TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', 1, 2) * Q.OP_CNTR_QTY), 'FM0000000000.000') " ).append("\n"); 
		query.append("                                 || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000') " ).append("\n"); 
		query.append("                                 || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '4', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000') " ).append("\n"); 
		query.append("                                 " ).append("\n"); 
		query.append("                                 -- 20140728 추가(S)" ).append("\n"); 
		query.append("                                 || TO_CHAR(SUM(DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,2), 'D2', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000') -- D2" ).append("\n"); 
		query.append("                                 || TO_CHAR(SUM(DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,2), 'D4', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000') -- D4" ).append("\n"); 
		query.append("                                 -- 20140728 추가(E)" ).append("\n"); 
		query.append("                                 " ).append("\n"); 
		query.append("                                 || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '5', Q.OP_CNTR_QTY, '9', Q.OP_CNTR_QTY, '8', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')	--R9,R8에 대해서 R5과 동일하게 HC으로 처리되도록 추가" ).append("\n"); 
		query.append("                                 || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '7', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')  " ).append("\n"); 
		query.append("                                 || TO_CHAR(SUM(DECODE(Q.CNTR_TPSZ_CD, 'DW', Q.OP_CNTR_QTY, 'DX', Q.OP_CNTR_QTY, 0)) , 'FM0000000000.000')  " ).append("\n"); 
		query.append("                                 || TO_CHAR(SUM(DECODE(SUBSTR(Q.CNTR_TPSZ_CD, 1, 1), 'R', Q.OP_CNTR_QTY - Q.EQ_SUBST_CGO_QTY, 0)), 'FM0000000000.000') " ).append("\n"); 
		query.append("                                 -- 20140728 추가" ).append("\n"); 
		query.append("                                 || TO_CHAR(SUM(CASE WHEN Q.CNTR_TPSZ_CD LIKE 'R%' AND Q.EQ_SUBST_CNTR_TPSZ_CD LIKE 'D%' THEN Q.EQ_SUBST_CGO_QTY ELSE 0 END), 'FM0000000000.000')--RD" ).append("\n"); 
		query.append("                                 || TO_CHAR((R.ACT_WGT * DECODE(R.ACT_WGT,'LBS', 0.00045, 0.001)) " ).append("\n"); 
		query.append("                                 		+ SUM(Q.OP_CNTR_QTY * (SELECT TS.CNTR_TPSZ_TARE_WGT" ).append("\n"); 
		query.append("                                 							 	 FROM MDM_CNTR_TP_SZ TS" ).append("\n"); 
		query.append("                                   								WHERE TS.CNTR_TPSZ_CD = Q.CNTR_TPSZ_CD)) * 0.001, 'FM0000000000.000')" ).append("\n"); 
		query.append("                              FROM BKG_QUANTITY Q" ).append("\n"); 
		query.append("                             WHERE B.BKG_NO = Q.BKG_NO" ).append("\n"); 
		query.append("							) VAL" ).append("\n"); 
		query.append("           		     FROM  BKG_VVD            BV" ).append("\n"); 
		query.append("                         , BKG_BOOKING        B" ).append("\n"); 
		query.append("                         , PARAMS             M" ).append("\n"); 
		query.append("                         , BKG_BL_DOC         R" ).append("\n"); 
		query.append("                         , MDM_DTL_REV_LANE   DRL" ).append("\n"); 
		query.append("                         , MDM_REV_LANE       RL" ).append("\n"); 
		query.append("                         , SPC_OFC_LVL        O" ).append("\n"); 
		query.append("                         , BKG_CUSTOMER       BC  --20140304 추가 " ).append("\n"); 
		query.append("           		     WHERE B.BKG_NO         = BV.BKG_NO" ).append("\n"); 
		query.append("                       AND B.BKG_NO         = R.BKG_NO" ).append("\n"); 
		query.append("                       AND B.BKG_STS_CD    IN ('W','F')" ).append("\n"); 
		query.append("                       AND B.BKG_CGO_TP_CD IN ('F', 'B', 'R')" ).append("\n"); 
		query.append("                       AND M.VSL_CD         = BV.VSL_CD" ).append("\n"); 
		query.append("                       AND M.SKD_VOY_NO     = BV.SKD_VOY_NO" ).append("\n"); 
		query.append("                       AND M.SKD_DIR_CD     = BV.SKD_DIR_CD" ).append("\n"); 
		query.append("                       " ).append("\n"); 
		query.append("                       AND RL.VSL_SLAN_CD   = BV.SLAN_CD" ).append("\n"); 
		query.append("                       AND (M.OFC_CD IS NULL " ).append("\n"); 
		query.append("                         OR M.OFC_CD = (SELECT N2ND_PRNT_OFC_CD" ).append("\n"); 
		query.append("                                          FROM SPC_OFC_LVL" ).append("\n"); 
		query.append("                                         WHERE OFC_CD = SPC_SCR_OFC_CONV_FNC(B.OB_SLS_OFC_CD, '')" ).append("\n"); 
		query.append("                                           AND M.COST_YR || M.COST_WK BETWEEN OFC_APLY_FM_YRWK AND OFC_APLY_TO_YRWK )" ).append("\n"); 
		query.append("                         OR M.OFC_CD = (SELECT N3RD_PRNT_OFC_CD" ).append("\n"); 
		query.append("                                          FROM SPC_OFC_LVL" ).append("\n"); 
		query.append("                                         WHERE OFC_CD = SPC_SCR_OFC_CONV_FNC(B.OB_SLS_OFC_CD, '')" ).append("\n"); 
		query.append("                                           AND M.COST_YR || M.COST_WK BETWEEN OFC_APLY_FM_YRWK AND OFC_APLY_TO_YRWK ))" ).append("\n"); 
		query.append("                       AND O.OFC_CD = SPC_SCR_OFC_CONV_FNC(B.OB_SLS_OFC_CD)" ).append("\n"); 
		query.append("                       AND M.COST_YR || M.COST_WK BETWEEN OFC_APLY_FM_YRWK AND OFC_APLY_TO_YRWK" ).append("\n"); 
		query.append("                       AND DRL.RLANE_CD        = M.RLANE_CD" ).append("\n"); 
		query.append("                       AND DRL.VSL_SLAN_DIR_CD = M.DIR_CD" ).append("\n"); 
		query.append("                       AND DRL.IOC_CD          = M.IOC_CD" ).append("\n"); 
		query.append("                       AND DRL.TRD_CD          = M.TRD_CD" ).append("\n"); 
		query.append("                       AND DRL.SUB_TRD_CD      = M.SUB_TRD_CD" ).append("\n"); 
		query.append("                       AND DRL.DELT_FLG        = 'N'" ).append("\n"); 
		query.append("                       AND DRL.RLANE_CD        = RL.RLANE_CD" ).append("\n"); 
		query.append("                       AND DRL.FM_CONTI_CD     = (SELECT SPC_CONTI_CONV_FNC(L.CONTI_CD, M.RLANE_CD, M.DIR_CD)" ).append("\n"); 
		query.append("                                                    FROM MDM_LOCATION L" ).append("\n"); 
		query.append("                                                   WHERE L.LOC_CD = BV.POL_CD )" ).append("\n"); 
		query.append("                       AND DRL.TO_CONTI_CD 	  = (SELECT SPC_CONTI_CONV_FNC(L.CONTI_CD, M.RLANE_CD, M.DIR_CD)" ).append("\n"); 
		query.append("                                                   FROM MDM_LOCATION L" ).append("\n"); 
		query.append("                                                  WHERE L.LOC_CD =  BV.POD_CD )" ).append("\n"); 
		query.append("                       AND RL.RLANE_CD  = M.RLANE_CD" ).append("\n"); 
		query.append("                       AND RL.VSL_TP_CD = 'C'" ).append("\n"); 
		query.append("                       AND RL.DELT_FLG  = 'N'" ).append("\n"); 
		query.append("                       AND B.BKG_NO            = BC.BKG_NO  --20140304 추가" ).append("\n"); 
		query.append("                       AND BC.BKG_CUST_TP_CD   = 'S'        --20140304 추가" ).append("\n"); 
		query.append("                  ) M" ).append("\n"); 
		query.append("           )A" ).append("\n"); 
		query.append("     GROUP BY IOC_TS_CD" ).append("\n"); 
		query.append("            , OFC_CD" ).append("\n"); 
		query.append("            , USA_BKG_MOD_CD" ).append("\n"); 
		query.append("            --, CUST_ACCT" ).append("\n"); 
		query.append("            , CUST_CTRL_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(", SMP_DATA AS (" ).append("\n"); 
		query.append("    SELECT DECODE(SUBSTR(M.TRD_CD, 1, 1), 'I', 'I', 'O') AS IOC_TS_CD," ).append("\n"); 
		query.append("           DECODE(P.DIV, 'RHQ', NVL(O.N3RD_PRNT_OFC_CD, M.SLS_RHQ_CD), M.SLS_RGN_OFC_CD) AS OFC_CD," ).append("\n"); 
		query.append("           M.CUST_CNT_CD, " ).append("\n"); 
		query.append("           M.CUST_SEQ, " ).append("\n"); 
		query.append("           M.CUST_CTRL_CD," ).append("\n"); 
		query.append("           SUM(RLANE_ADJ_QTY) ADJ_QTY" ).append("\n"); 
		query.append("      FROM SPC_MDL_CUST_REV_LANE M," ).append("\n"); 
		query.append("           PARAMS P," ).append("\n"); 
		query.append("           SPC_OFC_LVL O" ).append("\n"); 
		query.append("     WHERE P.TRD_CD     = M.TRD_CD" ).append("\n"); 
		query.append("       AND P.SUB_TRD_CD = M.SUB_TRD_CD" ).append("\n"); 
		query.append("       AND P.RLANE_CD   = M.RLANE_CD" ).append("\n"); 
		query.append("       AND SUBSTR(P.SEASON,1,6) = M.COST_YRWK" ).append("\n"); 
		query.append("       AND SUBSTR(P.SEASON,8)   = M.VER_SEQ" ).append("\n"); 
		query.append("       AND (P.OFC_CD IS NULL OR M.SLS_RHQ_CD = P.OFC_CD)" ).append("\n"); 
		query.append("       AND M.SLS_RGN_OFC_CD = O.OFC_CD" ).append("\n"); 
		query.append("       AND P.COST_YR || P.COST_WK BETWEEN OFC_APLY_FM_YRWK AND OFC_APLY_TO_YRWK" ).append("\n"); 
		query.append("     GROUP BY DECODE(SUBSTR(M.TRD_CD, 1, 1), 'I', 'I', 'O'), DECODE(P.DIV, 'RHQ', NVL(O.N3RD_PRNT_OFC_CD, M.SLS_RHQ_CD), M.SLS_RGN_OFC_CD), CUST_CNT_CD, CUST_SEQ, CUST_CTRL_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(", WK_CMB AS (" ).append("\n"); 
		query.append("    SELECT T.RNUM," ).append("\n"); 
		query.append("           T.COST_YRWK," ).append("\n"); 
		query.append("           T.OFC_CD," ).append("\n"); 
		query.append("           T.TS_FLG," ).append("\n"); 
		query.append("           T.IOC_CD," ).append("\n"); 
		query.append("           DECODE(T.CUST_CNT_CD, '00', ' ', NVL(C.CUST_CTRL_CD,'C')) AS CUST_CTRL_CD," ).append("\n"); 
		query.append("           --20140728" ).append("\n"); 
		query.append("           NVL(T.USA_BKG_MOD_CD,' ') AS USA_BKG_MOD_CD," ).append("\n"); 
		query.append("           --NVL(T.CUST_ACCT,' ')      AS CUST_ACCT," ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           SUM(T.BKG_REV)          AS BKG_REV, NVL(SUM(T.DMDT_COM_AMT),0) AS DMDT_COM_AMT," ).append("\n"); 
		query.append("           SUM(T.ESTM_CM_COST_AMT) AS ESTM_CM_COST_AMT," ).append("\n"); 
		query.append("           SUM(T.BKG_TTL_QTY)      AS BKG_TTL_QTY," ).append("\n"); 
		query.append("           SUM(T.USD_BKG_TTL_WGT)  AS BKG_TTL_WGT           " ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("            SELECT " ).append("\n"); 
		query.append("                   T.RNUM," ).append("\n"); 
		query.append("                   BAR.COST_YRWK," ).append("\n"); 
		query.append("                   DECODE(P.DIV, 'RHQ', DECODE(BAR.SLS_AQ_CD, ' ', BAR.SLS_RHQ_CD, BAR.SLS_AQ_CD), BAR.SLS_OFC_CD) OFC_CD," ).append("\n"); 
		query.append("                   BAR.TS_FLG," ).append("\n"); 
		query.append("                   BAR.IOC_CD," ).append("\n"); 
		query.append("                   " ).append("\n"); 
		query.append("                   -- 20140728 추가" ).append("\n"); 
		query.append("                   CASE WHEN P.CTRL_USA = 'Y' THEN" ).append("\n"); 
		query.append("                        BAR.USA_BKG_MOD_CD -- SPC_BKG_AVG_REV.LOCAL/IPI" ).append("\n"); 
		query.append("                   ELSE" ).append("\n"); 
		query.append("                        'OTH'" ).append("\n"); 
		query.append("                   END AS USA_BKG_MOD_CD," ).append("\n"); 
		query.append("                   " ).append("\n"); 
		query.append("                   --CASE WHEN P.CTRL_ACCT = 'Y' " ).append("\n"); 
		query.append("                   --     THEN " ).append("\n"); 
		query.append("                   --           (" ).append("\n"); 
		query.append("                   -- 			SELECT NVL(D.CTRL_LOC_ACCT_CD,'XX999999')" ).append("\n"); 
		query.append("                   --               FROM SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("                   --              WHERE P.RLANE_CD                         = D.RLANE_CD" ).append("\n"); 
		query.append("                   --              AND SPC_GET_REP_TRD_FNC(P.RLANE_CD)      = D.TRD_CD" ).append("\n"); 
		query.append("                   --              AND SPC_GET_REP_SUB_TRD_FNC(P.RLANE_CD)  = D.SUB_TRD_CD" ).append("\n"); 
		query.append("                   --              AND P.SKD_DIR_CD                         = D.DIR_CD " ).append("\n"); 
		query.append("                   --              AND D.ALOC_CTRL_TP_CD                    = 'A'  " ).append("\n"); 
		query.append("                   --              AND D.CTRL_LOC_ACCT_CD  = BAR.CUST_CNT_CD ||LPAD(BAR.CUST_SEQ,6,'0')                                        " ).append("\n"); 
		query.append("                   --           ) " ).append("\n"); 
		query.append("                   --     ELSE" ).append("\n"); 
		query.append("                   --	      'XX999999'" ).append("\n"); 
		query.append("                   --END AS CUST_ACCT," ).append("\n"); 
		query.append("                   " ).append("\n"); 
		query.append("                   BAR.CUST_CNT_CD," ).append("\n"); 
		query.append("                   BAR.CUST_SEQ," ).append("\n"); 
		query.append("                   " ).append("\n"); 
		query.append("                   BAR.BKG_REV, BAR.DMDT_COM_AMT," ).append("\n"); 
		query.append("                   BAR.ESTM_CM_COST_AMT," ).append("\n"); 
		query.append("                   BAR.BKG_TTL_QTY," ).append("\n"); 
		query.append("                   BAR.USD_BKG_TTL_WGT," ).append("\n"); 
		query.append("                   P.SEASON," ).append("\n"); 
		query.append("                   P.TRD_CD" ).append("\n"); 
		query.append("             FROM SPC_BKG_AVG_REV   BAR," ).append("\n"); 
		query.append("                  (SELECT DISTINCT DENSE_RANK() OVER (ORDER BY COST_YRWK) AS RNUM," ).append("\n"); 
		query.append("                          COST_YRWK" ).append("\n"); 
		query.append("                     FROM SPC_BKG_AVG_REV" ).append("\n"); 
		query.append("                  ) T," ).append("\n"); 
		query.append("                  PARAMS            P  " ).append("\n"); 
		query.append("            WHERE BAR.COST_YRWK  = T.COST_YRWK" ).append("\n"); 
		query.append("              --AND BAR.OFC_KND_CD IN ('1', '2', '3')" ).append("\n"); 
		query.append("              AND BAR.TRD_CD     = P.TRD_CD" ).append("\n"); 
		query.append("              AND BAR.RLANE_CD   = P.RLANE_CD" ).append("\n"); 
		query.append("              AND BAR.DIR_CD     = P.DIR_CD" ).append("\n"); 
		query.append("              AND BAR.IOC_CD     = P.IOC_CD" ).append("\n"); 
		query.append("              AND BAR.SLS_RHQ_CD = P.OFC_CD" ).append("\n"); 
		query.append("              AND BAR.OFC_KND_CD = '3'" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD <> '00000' -- 20140801 변경 (CUST_CNT_CD <> '00' 에서)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("              ) T, " ).append("\n"); 
		query.append("              SPC_MDL_CUST_CTRL C" ).append("\n"); 
		query.append("        WHERE T.TRD_CD               = C.TRD_CD     (+)" ).append("\n"); 
		query.append("          AND SUBSTR(T.SEASON, 1, 6) = C.COST_YRWK  (+)" ).append("\n"); 
		query.append("          AND SUBSTR(T.SEASON, 8)    = C.VER_SEQ    (+)" ).append("\n"); 
		query.append("          AND T.CUST_CNT_CD          = C.CUST_CNT_CD(+)" ).append("\n"); 
		query.append("          AND T.CUST_SEQ             = C.CUST_SEQ   (+)" ).append("\n"); 
		query.append("     GROUP BY GROUPING SETS (" ).append("\n"); 
		query.append("                             --(T.RNUM, T.COST_YRWK, T.TS_FLG, T.IOC_CD, T.OFC_CD, DECODE(T.CUST_CNT_CD, '00', ' ', NVL(C.CUST_CTRL_CD,'C')), T.USA_BKG_MOD_CD, T.CUST_ACCT)," ).append("\n"); 
		query.append("                             (T.RNUM, T.COST_YRWK, T.TS_FLG, T.IOC_CD, T.OFC_CD, DECODE(T.CUST_CNT_CD, '00', ' ', NVL(C.CUST_CTRL_CD,'C')), T.USA_BKG_MOD_CD)," ).append("\n"); 
		query.append("                             (T.RNUM, T.COST_YRWK, T.TS_FLG, T.IOC_CD, T.OFC_CD, DECODE(T.CUST_CNT_CD, '00', ' ', NVL(C.CUST_CTRL_CD,'C')))," ).append("\n"); 
		query.append("                             (T.RNUM, T.COST_YRWK, T.TS_FLG, T.IOC_CD, T.OFC_CD)" ).append("\n"); 
		query.append("                            ) " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT IOC_TS_CD," ).append("\n"); 
		query.append("       OFC_CD," ).append("\n"); 
		query.append("       NVL(CUST_CTRL_CD,' ') AS CUST_CTRL_CD," ).append("\n"); 
		query.append("       -- 20140728 추가(S)" ).append("\n"); 
		query.append("       DECODE(USA_BKG_MOD_CD1,'OTH','OTHERS',USA_BKG_MOD_CD1) AS USA_BKG_MOD_CD," ).append("\n"); 
		query.append("       --CUST_ACCT1 AS CUST_ACCT," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       --CASE WHEN CUST_ACCT1 = 'XX999999' THEN" ).append("\n"); 
		query.append("       --      'OTHERS'" ).append("\n"); 
		query.append("       --ELSE" ).append("\n"); 
		query.append("       --      (" ).append("\n"); 
		query.append("       --       SELECT CUST_LGL_ENG_NM" ).append("\n"); 
		query.append("       --         FROM MDM_CUSTOMER" ).append("\n"); 
		query.append("       --        WHERE CUST_CNT_CD = SUBSTR(CUST_ACCT1,1,2)" ).append("\n"); 
		query.append("       --          AND CUST_SEQ    = SUBSTR(CUST_ACCT1,3,6)" ).append("\n"); 
		query.append("       --      )" ).append("\n"); 
		query.append("       --END AS CUST_LGL_ENG_NM," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       QTA_VOL," ).append("\n"); 
		query.append("       DECODE(CUST_CTRL_CD, 'C', DECODE(USA_BKG_MOD_CD1,' ', MAX(QTA_VOL) OVER (PARTITION BY IOC_TS_CD, OFC_CD) - MAX(SMP) OVER (PARTITION BY IOC_TS_CD, OFC_CD),0) , SMP) AS SMP," ).append("\n"); 
		query.append("       CMB," ).append("\n"); 
		query.append("       CMB_WGT," ).append("\n"); 
		query.append("       CMB1," ).append("\n"); 
		query.append("       CMB_WGT1," ).append("\n"); 
		query.append("       CMB2," ).append("\n"); 
		query.append("       CMB_WGT2," ).append("\n"); 
		query.append("       CMB3," ).append("\n"); 
		query.append("       CMB_WGT3," ).append("\n"); 
		query.append("       CMB4," ).append("\n"); 
		query.append("       CMB_WGT4," ).append("\n"); 
		query.append("       FC_TTL_TEU," ).append("\n"); 
		query.append("       FCT_VOL," ).append("\n"); 
		query.append("       FCT_HC," ).append("\n"); 
		query.append("       FCT_45," ).append("\n"); 
		query.append("       FCT_53," ).append("\n"); 
		query.append("       FCT_RF," ).append("\n"); 
		query.append("       FCT_WGT," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       FCT_D2," ).append("\n"); 
		query.append("       FCT_D4," ).append("\n"); 
		query.append("       FCT_RD," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       ALC_VOL," ).append("\n"); 
		query.append("       ALC_HC," ).append("\n"); 
		query.append("       ALC_45," ).append("\n"); 
		query.append("       ALC_53," ).append("\n"); 
		query.append("       ALC_RF," ).append("\n"); 
		query.append("       ALC_WGT," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       ALC_D2," ).append("\n"); 
		query.append("       ALC_D4," ).append("\n"); 
		query.append("       ALC_RD," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       BKG_VOL," ).append("\n"); 
		query.append("       BKG_20," ).append("\n"); 
		query.append("       BKG_40," ).append("\n"); 
		query.append("       BKG_HC," ).append("\n"); 
		query.append("       BKG_45," ).append("\n"); 
		query.append("       BKG_53," ).append("\n"); 
		query.append("       BKG_RF," ).append("\n"); 
		query.append("       BKG_WGT," ).append("\n"); 
		query.append("       BKG_D2," ).append("\n"); 
		query.append("       BKG_D4," ).append("\n"); 
		query.append("       BKG_RD" ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("  FROM (" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("        SELECT IOC_TS_CD," ).append("\n"); 
		query.append("               OFC_CD," ).append("\n"); 
		query.append("               CUST_CTRL_CD," ).append("\n"); 
		query.append("               -- 20140728 추가(S)" ).append("\n"); 
		query.append("               USA_BKG_MOD_CD AS USA_BKG_MOD_CD1," ).append("\n"); 
		query.append("               --CUST_ACCT AS CUST_ACCT1," ).append("\n"); 
		query.append("               MAX(QTA_VOL)    AS QTA_VOL," ).append("\n"); 
		query.append("               MAX(SMP)        AS SMP," ).append("\n"); 
		query.append("               MAX(CMB)        AS CMB," ).append("\n"); 
		query.append("               MAX(CMB_WGT)    AS CMB_WGT," ).append("\n"); 
		query.append("               MAX(CMB1)       AS CMB1," ).append("\n"); 
		query.append("               MAX(CMB_WGT1)   AS CMB_WGT1," ).append("\n"); 
		query.append("               MAX(CMB2)       AS CMB2," ).append("\n"); 
		query.append("               MAX(CMB_WGT2)   AS CMB_WGT2," ).append("\n"); 
		query.append("               MAX(CMB3)       AS CMB3," ).append("\n"); 
		query.append("               MAX(CMB_WGT3)   AS CMB_WGT3," ).append("\n"); 
		query.append("               MAX(CMB4)       AS CMB4," ).append("\n"); 
		query.append("               MAX(CMB_WGT4)   AS CMB_WGT4," ).append("\n"); 
		query.append("               MAX(FC_TTL_TEU) AS FC_TTL_TEU," ).append("\n"); 
		query.append("               MAX(FCT_VOL)    AS FCT_VOL," ).append("\n"); 
		query.append("               MAX(FCT_HC)     AS FCT_HC," ).append("\n"); 
		query.append("               MAX(FCT_45)     AS FCT_45," ).append("\n"); 
		query.append("               MAX(FCT_53)     AS FCT_53," ).append("\n"); 
		query.append("               MAX(FCT_RF)     AS FCT_RF," ).append("\n"); 
		query.append("               MAX(FCT_WGT)    AS FCT_WGT," ).append("\n"); 
		query.append("               " ).append("\n"); 
		query.append("               MAX(FCT_D2)     AS FCT_D2," ).append("\n"); 
		query.append("               MAX(FCT_D4)     AS FCT_D4," ).append("\n"); 
		query.append("               MAX(FCT_RD)     AS FCT_RD," ).append("\n"); 
		query.append("               " ).append("\n"); 
		query.append("               NVL(MAX(ALC_VOL),0)    AS ALC_VOL," ).append("\n"); 
		query.append("               NVL(MAX(ALC_HC),0)     AS ALC_HC," ).append("\n"); 
		query.append("               NVL(MAX(ALC_45),0)     AS ALC_45," ).append("\n"); 
		query.append("               NVL(MAX(ALC_53),0)     AS ALC_53," ).append("\n"); 
		query.append("               NVL(MAX(ALC_RF),0)     AS ALC_RF," ).append("\n"); 
		query.append("               NVL(MAX(ALC_WGT),0)    AS ALC_WGT," ).append("\n"); 
		query.append("               NVL(MAX(ALC_D2),0)     AS ALC_D2," ).append("\n"); 
		query.append("               NVL(MAX(ALC_D4),0)     AS ALC_D4," ).append("\n"); 
		query.append("               NVL(MAX(ALC_RD),0)     AS ALC_RD," ).append("\n"); 
		query.append("               " ).append("\n"); 
		query.append("               MAX(BKG_VOL)    AS BKG_VOL," ).append("\n"); 
		query.append("               MAX(BKG_20)     AS BKG_20," ).append("\n"); 
		query.append("               MAX(BKG_40)     AS BKG_40," ).append("\n"); 
		query.append("               MAX(BKG_HC)     AS BKG_HC," ).append("\n"); 
		query.append("               MAX(BKG_45)     AS BKG_45," ).append("\n"); 
		query.append("               MAX(BKG_53)     AS BKG_53," ).append("\n"); 
		query.append("               MAX(BKG_RF)     AS BKG_RF," ).append("\n"); 
		query.append("               MAX(BKG_WGT)    AS BKG_WGT," ).append("\n"); 
		query.append("               MAX(BKG_D2)     AS BKG_D2," ).append("\n"); 
		query.append("               MAX(BKG_D4)     AS BKG_D4," ).append("\n"); 
		query.append("               MAX(BKG_RD)     AS BKG_RD               " ).append("\n"); 
		query.append("               " ).append("\n"); 
		query.append("          FROM (" ).append("\n"); 
		query.append("              SELECT DECODE(IOC_TS_CD, 'O', 'OCN', 'I', 'IPC', 'T', 'T/S') AS IOC_TS_CD," ).append("\n"); 
		query.append("                     OFC_CD," ).append("\n"); 
		query.append("                     CUST_CTRL_CD," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                     -- 20140728 추가(S)" ).append("\n"); 
		query.append("                     NVL(USA_BKG_MOD_CD,' ') AS USA_BKG_MOD_CD," ).append("\n"); 
		query.append("                     --NVL(CUST_ACCT,' ')      AS CUST_ACCT," ).append("\n"); 
		query.append("                     -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                     ROUND(SUM(QTA_VOL)) AS QTA_VOL," ).append("\n"); 
		query.append("                     SUM(SMP) AS SMP," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT ROUND((SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY)))" ).append("\n"); 
		query.append("                          FROM WK_CMB BAR" ).append("\n"); 
		query.append("                         WHERE BAR.OFC_CD      = Z.OFC_CD" ).append("\n"); 
		query.append("                           AND BAR.TS_FLG      = DECODE(Z.IOC_TS_CD, 'T', 'Y', 'TT', 'Y', 'N')" ).append("\n"); 
		query.append("                           AND BAR.IOC_CD      = DECODE(Z.IOC_TS_CD, 'O', 'O', 'OT', 'O', 'I')" ).append("\n"); 
		query.append("                           AND NVL(Z.CUST_CTRL_CD,' ')  = NVL(BAR.CUST_CTRL_CD,' ')" ).append("\n"); 
		query.append("                           AND Z.IOC_TS_CD       <> 'E'" ).append("\n"); 
		query.append("                            -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           AND BAR.USA_BKG_MOD_CD = NVL(Z.USA_BKG_MOD_CD,' ')" ).append("\n"); 
		query.append("                           --AND BAR.CUST_ACCT      = NVL(Z.CUST_ACCT,' ')" ).append("\n"); 
		query.append("        					-- 20140728 추가(E)" ).append("\n"); 
		query.append("                     ) AS CMB," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT ROUND((SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT)))" ).append("\n"); 
		query.append("                          FROM WK_CMB BAR" ).append("\n"); 
		query.append("                         WHERE BAR.OFC_CD      = Z.OFC_CD" ).append("\n"); 
		query.append("                           AND BAR.TS_FLG      = DECODE(Z.IOC_TS_CD, 'T', 'Y', 'TT', 'Y', 'N')" ).append("\n"); 
		query.append("                           AND BAR.IOC_CD      = DECODE(Z.IOC_TS_CD, 'O', 'O', 'OT', 'O', 'I')" ).append("\n"); 
		query.append("                           AND NVL(Z.CUST_CTRL_CD,' ')  = NVL(BAR.CUST_CTRL_CD,' ')" ).append("\n"); 
		query.append("                           AND Z.IOC_TS_CD       <> 'E'" ).append("\n"); 
		query.append("                            -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           AND BAR.USA_BKG_MOD_CD = NVL(Z.USA_BKG_MOD_CD,' ')" ).append("\n"); 
		query.append("                           --AND BAR.CUST_ACCT      = NVL(Z.CUST_ACCT,' ')" ).append("\n"); 
		query.append("        					-- 20140728 추가(E)" ).append("\n"); 
		query.append("                     ) AS CMB_WGT,             " ).append("\n"); 
		query.append("                     -- 주차별 CMB" ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT ROUND((SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY)))" ).append("\n"); 
		query.append("                          FROM WK_CMB BAR" ).append("\n"); 
		query.append("                         WHERE BAR.OFC_CD      = NVL(Z.OFC_CD, '00000')" ).append("\n"); 
		query.append("                           AND BAR.TS_FLG      = DECODE(Z.IOC_TS_CD, 'T', 'Y', 'TT', 'Y', 'N')" ).append("\n"); 
		query.append("                           AND BAR.IOC_CD      = DECODE(Z.IOC_TS_CD, 'O', 'O', 'OT', 'O', 'I')" ).append("\n"); 
		query.append("                           AND NVL(Z.CUST_CTRL_CD,' ')  = NVL(BAR.CUST_CTRL_CD,' ')" ).append("\n"); 
		query.append("                           AND Z.IOC_TS_CD       <> 'E'" ).append("\n"); 
		query.append("                            -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           AND BAR.USA_BKG_MOD_CD = NVL(Z.USA_BKG_MOD_CD,' ')" ).append("\n"); 
		query.append("                           --AND BAR.CUST_ACCT      = NVL(Z.CUST_ACCT,' ')" ).append("\n"); 
		query.append("        					-- 20140728 추가(E)" ).append("\n"); 
		query.append("                           AND BAR.RNUM = 1" ).append("\n"); 
		query.append("                     ) AS CMB1," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT ROUND((SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT)))" ).append("\n"); 
		query.append("                          FROM WK_CMB BAR" ).append("\n"); 
		query.append("                         WHERE BAR.OFC_CD      = NVL(Z.OFC_CD, '00000')" ).append("\n"); 
		query.append("                           AND BAR.TS_FLG      = DECODE(Z.IOC_TS_CD, 'T', 'Y', 'TT', 'Y', 'N')" ).append("\n"); 
		query.append("                           AND BAR.IOC_CD      = DECODE(Z.IOC_TS_CD, 'O', 'O', 'OT', 'O', 'I')" ).append("\n"); 
		query.append("                           AND NVL(Z.CUST_CTRL_CD,' ')  = NVL(BAR.CUST_CTRL_CD,' ')" ).append("\n"); 
		query.append("                           AND Z.IOC_TS_CD       <> 'E'" ).append("\n"); 
		query.append("                            -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           AND BAR.USA_BKG_MOD_CD = NVL(Z.USA_BKG_MOD_CD,' ')" ).append("\n"); 
		query.append("                           --AND BAR.CUST_ACCT      = NVL(Z.CUST_ACCT,' ')" ).append("\n"); 
		query.append("        					-- 20140728 추가(E)" ).append("\n"); 
		query.append("                           AND BAR.RNUM = 1" ).append("\n"); 
		query.append("                     ) AS CMB_WGT1," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT ROUND((SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY)))" ).append("\n"); 
		query.append("                          FROM WK_CMB BAR" ).append("\n"); 
		query.append("                         WHERE BAR.OFC_CD      = NVL(Z.OFC_CD, '00000')" ).append("\n"); 
		query.append("                           AND BAR.TS_FLG      = DECODE(Z.IOC_TS_CD, 'T', 'Y', 'TT', 'Y', 'N')" ).append("\n"); 
		query.append("                           AND BAR.IOC_CD      = DECODE(Z.IOC_TS_CD, 'O', 'O', 'OT', 'O', 'I')" ).append("\n"); 
		query.append("                           AND NVL(Z.CUST_CTRL_CD,' ')  = NVL(BAR.CUST_CTRL_CD,' ')" ).append("\n"); 
		query.append("                           AND Z.IOC_TS_CD       <> 'E'" ).append("\n"); 
		query.append("                            -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           AND BAR.USA_BKG_MOD_CD = NVL(Z.USA_BKG_MOD_CD,' ')" ).append("\n"); 
		query.append("                           --AND BAR.CUST_ACCT      = NVL(Z.CUST_ACCT,' ')" ).append("\n"); 
		query.append("        					-- 20140728 추가(E)" ).append("\n"); 
		query.append("                           AND BAR.RNUM = 2" ).append("\n"); 
		query.append("                     ) AS CMB2," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT ROUND((SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT)))" ).append("\n"); 
		query.append("                          FROM WK_CMB BAR" ).append("\n"); 
		query.append("                         WHERE BAR.OFC_CD      = NVL(Z.OFC_CD, '00000')" ).append("\n"); 
		query.append("                           AND BAR.TS_FLG      = DECODE(Z.IOC_TS_CD, 'T', 'Y', 'TT', 'Y', 'N')" ).append("\n"); 
		query.append("                           AND BAR.IOC_CD      = DECODE(Z.IOC_TS_CD, 'O', 'O', 'OT', 'O', 'I')" ).append("\n"); 
		query.append("                           AND NVL(Z.CUST_CTRL_CD,' ')  = NVL(BAR.CUST_CTRL_CD,' ')" ).append("\n"); 
		query.append("                           AND Z.IOC_TS_CD       <> 'E'" ).append("\n"); 
		query.append("                            -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           AND BAR.USA_BKG_MOD_CD = NVL(Z.USA_BKG_MOD_CD,' ')" ).append("\n"); 
		query.append("                           --AND BAR.CUST_ACCT      = NVL(Z.CUST_ACCT,' ')" ).append("\n"); 
		query.append("                           AND BAR.RNUM = 2" ).append("\n"); 
		query.append("                     ) AS CMB_WGT2," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT ROUND((SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY)))" ).append("\n"); 
		query.append("                          FROM WK_CMB BAR" ).append("\n"); 
		query.append("                         WHERE BAR.OFC_CD      = NVL(Z.OFC_CD, '00000')" ).append("\n"); 
		query.append("                           AND BAR.TS_FLG      = DECODE(Z.IOC_TS_CD, 'T', 'Y', 'TT', 'Y', 'N')" ).append("\n"); 
		query.append("                           AND BAR.IOC_CD      = DECODE(Z.IOC_TS_CD, 'O', 'O', 'OT', 'O', 'I')" ).append("\n"); 
		query.append("                           AND NVL(Z.CUST_CTRL_CD,' ')  = NVL(BAR.CUST_CTRL_CD,' ')" ).append("\n"); 
		query.append("                           AND Z.IOC_TS_CD       <> 'E'" ).append("\n"); 
		query.append("                            -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           AND BAR.USA_BKG_MOD_CD = NVL(Z.USA_BKG_MOD_CD,' ')" ).append("\n"); 
		query.append("                           --AND BAR.CUST_ACCT      = NVL(Z.CUST_ACCT,' ')" ).append("\n"); 
		query.append("        					-- 20140728 추가(E)" ).append("\n"); 
		query.append("                           AND BAR.RNUM = 3" ).append("\n"); 
		query.append("                     ) AS CMB3," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT ROUND((SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT)))" ).append("\n"); 
		query.append("                          FROM WK_CMB BAR" ).append("\n"); 
		query.append("                         WHERE BAR.OFC_CD      = NVL(Z.OFC_CD, '00000')" ).append("\n"); 
		query.append("                           AND BAR.TS_FLG      = DECODE(Z.IOC_TS_CD, 'T', 'Y', 'TT', 'Y', 'N')" ).append("\n"); 
		query.append("                           AND BAR.IOC_CD      = DECODE(Z.IOC_TS_CD, 'O', 'O', 'OT', 'O', 'I')" ).append("\n"); 
		query.append("                           AND NVL(Z.CUST_CTRL_CD,' ')  = NVL(BAR.CUST_CTRL_CD,' ')" ).append("\n"); 
		query.append("                           AND Z.IOC_TS_CD       <> 'E'" ).append("\n"); 
		query.append("                            -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           AND BAR.USA_BKG_MOD_CD = NVL(Z.USA_BKG_MOD_CD,' ')" ).append("\n"); 
		query.append("                           --AND BAR.CUST_ACCT      = NVL(Z.CUST_ACCT,' ')" ).append("\n"); 
		query.append("        					-- 20140728 추가(E)" ).append("\n"); 
		query.append("                           AND BAR.RNUM = 3" ).append("\n"); 
		query.append("                     ) AS CMB_WGT3," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT ROUND((SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY)))" ).append("\n"); 
		query.append("                          FROM WK_CMB BAR" ).append("\n"); 
		query.append("                         WHERE BAR.OFC_CD      = NVL(Z.OFC_CD, '00000')" ).append("\n"); 
		query.append("                           AND BAR.TS_FLG      = DECODE(Z.IOC_TS_CD, 'T', 'Y', 'TT', 'Y', 'N')" ).append("\n"); 
		query.append("                           AND BAR.IOC_CD      = DECODE(Z.IOC_TS_CD, 'O', 'O', 'OT', 'O', 'I')" ).append("\n"); 
		query.append("                           AND NVL(Z.CUST_CTRL_CD,' ')  = NVL(BAR.CUST_CTRL_CD,' ')" ).append("\n"); 
		query.append("                           AND Z.IOC_TS_CD       <> 'E'" ).append("\n"); 
		query.append("                            -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           AND BAR.USA_BKG_MOD_CD = NVL(Z.USA_BKG_MOD_CD,' ')" ).append("\n"); 
		query.append("                           --AND BAR.CUST_ACCT      = NVL(Z.CUST_ACCT,' ')" ).append("\n"); 
		query.append("        					-- 20140728 추가(E)" ).append("\n"); 
		query.append("                           AND BAR.RNUM = 4" ).append("\n"); 
		query.append("                     ) AS CMB4," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                        SELECT ROUND((SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT)))" ).append("\n"); 
		query.append("                          FROM WK_CMB BAR" ).append("\n"); 
		query.append("                         WHERE BAR.OFC_CD      = NVL(Z.OFC_CD, '00000')" ).append("\n"); 
		query.append("                           AND BAR.TS_FLG      = DECODE(Z.IOC_TS_CD, 'T', 'Y', 'TT', 'Y', 'N')" ).append("\n"); 
		query.append("                           AND BAR.IOC_CD      = DECODE(Z.IOC_TS_CD, 'O', 'O', 'OT', 'O', 'I')" ).append("\n"); 
		query.append("                           AND NVL(Z.CUST_CTRL_CD,' ')  = NVL(BAR.CUST_CTRL_CD,' ')" ).append("\n"); 
		query.append("                           AND Z.IOC_TS_CD       <> 'E'" ).append("\n"); 
		query.append("                            -- 20140728 추가(S)" ).append("\n"); 
		query.append("                           AND BAR.USA_BKG_MOD_CD = NVL(Z.USA_BKG_MOD_CD,' ')" ).append("\n"); 
		query.append("                           --AND BAR.CUST_ACCT      = NVL(Z.CUST_ACCT,' ')" ).append("\n"); 
		query.append("        					-- 20140728 추가(E)" ).append("\n"); 
		query.append("                           AND BAR.RNUM = 4" ).append("\n"); 
		query.append("                     ) AS CMB_WGT4," ).append("\n"); 
		query.append("                     SUM(NVL(FCT_VOL, 0) + NVL(FCT_HC, 0) * 2 + NVL(FCT_45, 0) * 2 + NVL(FCT_53, 0) * 2) AS FC_TTL_TEU," ).append("\n"); 
		query.append("                     SUM(FCT_VOL) AS FCT_VOL," ).append("\n"); 
		query.append("                     SUM(FCT_HC)  AS FCT_HC ," ).append("\n"); 
		query.append("                     SUM(FCT_45)  AS FCT_45 ," ).append("\n"); 
		query.append("                     SUM(FCT_53)  AS FCT_53 ," ).append("\n"); 
		query.append("                     SUM(FCT_RF)  AS FCT_RF ," ).append("\n"); 
		query.append("                     SUM(FCT_WGT) AS FCT_WGT," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                     -- 20140728 추가(S)" ).append("\n"); 
		query.append("                     SUM(FCT_D2)  AS FCT_D2 ," ).append("\n"); 
		query.append("                     SUM(FCT_D4)  AS FCT_D4 ," ).append("\n"); 
		query.append("                     SUM(FCT_RD)  AS FCT_RD ," ).append("\n"); 
		query.append("        			-- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                     SUM(ALC_VOL) AS ALC_VOL," ).append("\n"); 
		query.append("                     SUM(ALC_HC)  AS ALC_HC ," ).append("\n"); 
		query.append("                     SUM(ALC_45)  AS ALC_45 ," ).append("\n"); 
		query.append("                     SUM(ALC_53)  AS ALC_53 ," ).append("\n"); 
		query.append("                     SUM(ALC_RF)  AS ALC_RF ," ).append("\n"); 
		query.append("                     SUM(ALC_WGT) AS ALC_WGT," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                    -- 20140728 추가(S)" ).append("\n"); 
		query.append("                     SUM(ALC_D2)  AS ALC_D2 ," ).append("\n"); 
		query.append("                     SUM(ALC_D4)  AS ALC_D4 ," ).append("\n"); 
		query.append("                     SUM(ALC_RD)  AS ALC_RD ," ).append("\n"); 
		query.append("        			-- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                     SUM(BKG_VOL) AS BKG_VOL," ).append("\n"); 
		query.append("                     SUM(BKG_20)  AS BKG_20 ," ).append("\n"); 
		query.append("                     SUM(BKG_40)  AS BKG_40 ," ).append("\n"); 
		query.append("                     SUM(BKG_HC)  AS BKG_HC ," ).append("\n"); 
		query.append("                     SUM(BKG_45)  AS BKG_45 ," ).append("\n"); 
		query.append("                     SUM(BKG_53)  AS BKG_53 ," ).append("\n"); 
		query.append("                     SUM(BKG_RF)  AS BKG_RF ," ).append("\n"); 
		query.append("                     SUM(BKG_WGT) AS BKG_WGT," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                    -- 20140728 추가(S)" ).append("\n"); 
		query.append("                     SUM(BKG_D2)  AS BKG_D2 ," ).append("\n"); 
		query.append("                     SUM(BKG_D4)  AS BKG_D4 ," ).append("\n"); 
		query.append("                     SUM(BKG_RD)  AS BKG_RD" ).append("\n"); 
		query.append("        			-- 20140728 추가(E)" ).append("\n"); 
		query.append("                FROM (" ).append("\n"); 
		query.append("                        SELECT IOC_TS_CD," ).append("\n"); 
		query.append("                               OFC_CD   ," ).append("\n"); 
		query.append("                               'C' AS CUST_CTRL_CD," ).append("\n"); 
		query.append("                               " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               NULL AS USA_BKG_MOD_CD," ).append("\n"); 
		query.append("                               --NULL AS CUST_ACCT," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("                               " ).append("\n"); 
		query.append("                               VOL AS QTA_VOL," ).append("\n"); 
		query.append("                               DECODE(VOL, 0, 0, CM / VOL) AS QTA_CMB," ).append("\n"); 
		query.append("                               0    AS SMP," ).append("\n"); 
		query.append("                               " ).append("\n"); 
		query.append("                               0    AS FCT_VOL," ).append("\n"); 
		query.append("                               0    AS FCT_HC ," ).append("\n"); 
		query.append("                               0    AS FCT_45 ," ).append("\n"); 
		query.append("                               0    AS FCT_53 ," ).append("\n"); 
		query.append("                               0    AS FCT_RF ," ).append("\n"); 
		query.append("                               0    AS FCT_WGT,                 " ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                    		   -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               0    AS FCT_D2 ," ).append("\n"); 
		query.append("                               0    AS FCT_D4 ," ).append("\n"); 
		query.append("                               0    AS FCT_RD ," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               NULL AS ALC_VOL," ).append("\n"); 
		query.append("                               NULL AS ALC_HC ," ).append("\n"); 
		query.append("                               NULL AS ALC_45 ," ).append("\n"); 
		query.append("                               NULL AS ALC_53 ," ).append("\n"); 
		query.append("                               NULL AS ALC_RF ," ).append("\n"); 
		query.append("                               NULL AS ALC_WGT," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                    		   -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               NULL AS ALC_D2 ," ).append("\n"); 
		query.append("                               NULL AS ALC_D4 ," ).append("\n"); 
		query.append("                               NULL AS ALC_RD ," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               0    AS BKG_VOL," ).append("\n"); 
		query.append("                               0    AS BKG_20 ," ).append("\n"); 
		query.append("                               0    AS BKG_40 ," ).append("\n"); 
		query.append("                               0    AS BKG_HC ," ).append("\n"); 
		query.append("                               0    AS BKG_45 ," ).append("\n"); 
		query.append("                               0    AS BKG_53 ," ).append("\n"); 
		query.append("                               0    AS BKG_RF ," ).append("\n"); 
		query.append("                               0    AS BKG_WGT," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                    		   -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               0    AS BKG_D2 ," ).append("\n"); 
		query.append("                               0    AS BKG_D4 ," ).append("\n"); 
		query.append("                               0    AS BKG_RD   " ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("                          FROM QTA_DATA" ).append("\n"); 
		query.append("                        UNION ALL" ).append("\n"); 
		query.append("                        SELECT IOC_TS_CD," ).append("\n"); 
		query.append("                               OFC_CD   ," ).append("\n"); 
		query.append("                               CUST_CTRL_CD," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               USA_BKG_MOD_CD," ).append("\n"); 
		query.append("                               --CUST_ACCT," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               0        ," ).append("\n"); 
		query.append("                               0        ," ).append("\n"); 
		query.append("                               0        ," ).append("\n"); 
		query.append("                               " ).append("\n"); 
		query.append("                               VOL_TTL  ," ).append("\n"); 
		query.append("                               VOL_HC   ," ).append("\n"); 
		query.append("                               VOL_45   ," ).append("\n"); 
		query.append("                               VOL_53   ," ).append("\n"); 
		query.append("                               VOL_RF   ," ).append("\n"); 
		query.append("                               WGT_TTL  ," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               VOL_D2   ," ).append("\n"); 
		query.append("                               VOL_D4   ," ).append("\n"); 
		query.append("                               VOL_RD   ," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               NULL AS ALC_VOL," ).append("\n"); 
		query.append("                               NULL AS ALC_HC ," ).append("\n"); 
		query.append("                               NULL AS ALC_45 ," ).append("\n"); 
		query.append("                               NULL AS ALC_53 ," ).append("\n"); 
		query.append("                               NULL AS ALC_RF ," ).append("\n"); 
		query.append("                               NULL AS ALC_WGT," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               NULL AS ALC_D2 ," ).append("\n"); 
		query.append("                               NULL AS ALC_D4 ," ).append("\n"); 
		query.append("                               NULL AS ALC_RD ," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0" ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("                          FROM FCST_DATA" ).append("\n"); 
		query.append("                        UNION ALL" ).append("\n"); 
		query.append("                        SELECT IOC_TS_CD," ).append("\n"); 
		query.append("                               OFC_CD   ," ).append("\n"); 
		query.append("                               CUST_CTRL_CD," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               USA_BKG_MOD_CD," ).append("\n"); 
		query.append("                               --CUST_ACCT," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               VOL_TTL," ).append("\n"); 
		query.append("                               VOL_HC ," ).append("\n"); 
		query.append("                               VOL_45 ," ).append("\n"); 
		query.append("                               VOL_53 ," ).append("\n"); 
		query.append("                               VOL_RF ," ).append("\n"); 
		query.append("                               WGT_TTL," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               VOL_D2   ," ).append("\n"); 
		query.append("                               VOL_D4   ," ).append("\n"); 
		query.append("                               VOL_RD   ," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0" ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("                          FROM ALOC_DATA" ).append("\n"); 
		query.append("                        UNION ALL" ).append("\n"); 
		query.append("                        SELECT IOC_TS_CD," ).append("\n"); 
		query.append("                               OFC_CD   ," ).append("\n"); 
		query.append("                               CUST_CTRL_CD," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               USA_BKG_MOD_CD," ).append("\n"); 
		query.append("                               --CUST_ACCT," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               NULL AS ALC_VOL," ).append("\n"); 
		query.append("                               NULL AS ALC_HC ," ).append("\n"); 
		query.append("                               NULL AS ALC_45 ," ).append("\n"); 
		query.append("                               NULL AS ALC_53 ," ).append("\n"); 
		query.append("                               NULL AS ALC_RF ," ).append("\n"); 
		query.append("                               NULL AS ALC_WGT," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               NULL AS ALC_D2 ," ).append("\n"); 
		query.append("                               NULL AS ALC_D4 ," ).append("\n"); 
		query.append("                               NULL AS ALC_RD ," ).append("\n"); 
		query.append("                               -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               BKG_TTL," ).append("\n"); 
		query.append("                               BKG_20 ," ).append("\n"); 
		query.append("                               BKG_40 ," ).append("\n"); 
		query.append("                               BKG_HC ," ).append("\n"); 
		query.append("                               BKG_45 ," ).append("\n"); 
		query.append("                               BKG_53 ," ).append("\n"); 
		query.append("                               BKG_RF ," ).append("\n"); 
		query.append("                               BKG_WGT," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               BKG_D2 ," ).append("\n"); 
		query.append("                               BKG_D4 ," ).append("\n"); 
		query.append("                               BKG_RD" ).append("\n"); 
		query.append("                               -- 20140728 추가(E)" ).append("\n"); 
		query.append("                          FROM BKG_DATA" ).append("\n"); 
		query.append("                        UNION ALL" ).append("\n"); 
		query.append("                        SELECT IOC_TS_CD," ).append("\n"); 
		query.append("                               OFC_CD   ," ).append("\n"); 
		query.append("                               CUST_CTRL_CD," ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               NULL AS USA_BKG_MOD_CD," ).append("\n"); 
		query.append("                               --NULL AS CUST_ACCT," ).append("\n"); 
		query.append("        					   -- 20140728 추가(E)" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               ADJ_QTY," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               " ).append("\n"); 
		query.append("                               NULL AS ALC_VOL," ).append("\n"); 
		query.append("                               NULL AS ALC_HC ," ).append("\n"); 
		query.append("                               NULL AS ALC_45 ," ).append("\n"); 
		query.append("                               NULL AS ALC_53 ," ).append("\n"); 
		query.append("                               NULL AS ALC_RF ," ).append("\n"); 
		query.append("                               NULL AS ALC_WGT," ).append("\n"); 
		query.append("                               -- 20140728 추가(S)" ).append("\n"); 
		query.append("                               NULL AS ALC_D2 ," ).append("\n"); 
		query.append("                               NULL AS ALC_D4 ," ).append("\n"); 
		query.append("                               NULL AS ALC_RD ," ).append("\n"); 
		query.append("                               " ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0," ).append("\n"); 
		query.append("                               0" ).append("\n"); 
		query.append("                          FROM SMP_DATA" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("                     ) Z" ).append("\n"); 
		query.append("            GROUP BY GROUPING SETS (                            " ).append("\n"); 
		query.append("                                    --(IOC_TS_CD, OFC_CD, CUST_CTRL_CD, USA_BKG_MOD_CD, CUST_ACCT),                            " ).append("\n"); 
		query.append("                                    (IOC_TS_CD, OFC_CD, CUST_CTRL_CD, USA_BKG_MOD_CD),                             " ).append("\n"); 
		query.append("                                    (IOC_TS_CD, OFC_CD, CUST_CTRL_CD), " ).append("\n"); 
		query.append("                                    (IOC_TS_CD, OFC_CD)" ).append("\n"); 
		query.append("                                   )                           " ).append("\n"); 
		query.append("           )" ).append("\n"); 
		query.append("      GROUP BY IOC_TS_CD," ).append("\n"); 
		query.append("               OFC_CD," ).append("\n"); 
		query.append("               CUST_CTRL_CD," ).append("\n"); 
		query.append("               USA_BKG_MOD_CD" ).append("\n"); 
		query.append("               --CUST_ACCT" ).append("\n"); 
		query.append("       ) T" ).append("\n"); 
		query.append(" ORDER BY IOC_TS_CD," ).append("\n"); 
		query.append("       OFC_CD," ).append("\n"); 
		query.append("       CUST_CTRL_CD," ).append("\n"); 
		query.append("       USA_BKG_MOD_CD1" ).append("\n"); 
		query.append("       --CUST_ACCT1" ).append("\n"); 

	}
}