<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="CMSummaryDBDAORsltPrsAmendmentSummaryChartListRSQL">
			<desc><![CDATA[Chart의 조회

* History
2015.06.26 CHM-201536492 Split05-주간 MAS Open에 따른 타모듈 프로그램 적용 요청]]></desc>
			<sql><![CDATA[
-- 기준이 되는 SC_NO를 SELECT하기 위한 CONTRACT DURATION
WITH VW_CONTRACT_DT AS (
	SELECT /*+ MATERIALIZE */ MIN(SLS_FM_DT) AS  SLS_FM_DT, MAX(SLS_TO_DT)  AS SLS_TO_DT
	FROM MAS_WK_PRD
	WHERE (COST_YR = @[frm_ctrt_eff_yr] AND COST_WK = @[frm_ctrt_eff_wk])
		OR (COST_YR = @[frm_ctrt_exp_yr] AND COST_WK = @[frm_ctrt_exp_wk])
)
, VW_CONTRACT_DT_LIST AS (
	SELECT /*+ MATERIALIZE */ COST_YR||substr(SLS_TO_DT,5,2) as COST_YRMON,COST_WK
	FROM MAS_WK_PRD
	WHERE (COST_YR  || COST_WK) >= (@[frm_ctrt_eff_yr] || @[frm_ctrt_eff_wk])  AND (COST_YR || COST_WK )<= (@[frm_ctrt_exp_yr] || @[frm_ctrt_exp_wk])
)
,VW_SUMMARY_DT AS (
	SELECT /*+ MATERIALIZE */ MIN(SLS_FM_DT)  AS  SLS_FM_DT, MAX(SLS_TO_DT)  AS SLS_TO_DT
	FROM MAS_WK_PRD
	WHERE (COST_YR = @[frm_smr_eff_yr] AND COST_WK = @[frm_smr_eff_wk])
		OR (COST_YR = @[frm_smr_exp_yr] AND COST_WK = @[frm_smr_exp_wk])
)
,VW_REFERENCE_DT AS (
	SELECT MIN(SLS_FM_DT)  AS  SLS_FM_DT,  MAX(SLS_TO_DT)  AS SLS_TO_DT
	FROM MAS_WK_PRD
	WHERE  (COST_YR = @[frm_rfrc_eff_yr] AND COST_WK = @[frm_rfrc_eff_wk])
		OR (COST_YR = @[frm_rfrc_exp_yr] AND COST_WK = @[frm_rfrc_exp_wk])

)
-- SUMMARY에서 입력한 주차를 이용해 현재 날짜 이전 주차는 WK_TP : -1 , 현재 주차 : 0 , 미래주차 : 1
, VW_SUMMARY_WEEK AS (
	SELECT /*+ MATERIALIZE */ SLS_FM_YRWK,SLS_FM_DT,SLS_TO_YRWK,SLS_TO_DT,WK_TP
		,(SELECT COUNT(*) FROM MAS_WK_PRD PRD WHERE (PRD.COST_YR || PRD.COST_WK >= MN.SLS_FM_YRWK AND PRD.COST_YR || PRD.COST_WK <= MN.SLS_TO_YRWK) )+DECODE(WK_TP,1,1,0) AS TOT_WK -- ESTIMATE 조회시 현재주차도 미래주차에 포함시킨다.
	FROM (
		SELECT MIN(COST_YR||COST_WK) AS SLS_FM_YRWK,MIN(SLS_FM_DT) AS  SLS_FM_DT,  MAX(COST_YR||COST_WK) AS SLS_TO_YRWK,MAX(SLS_TO_DT) AS SLS_TO_DT,WK_TP
		FROM (		
			SELECT COST_YR,COST_WK,SLS_FM_DT,SLS_TO_DT ,
			       CASE WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= SLS_FM_DT
						THEN 0
						WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > SLS_TO_DT   
				    THEN -1
				    ELSE 1
			       END AS WK_TP
			FROM MAS_WK_PRD 
			WHERE (COST_YR || COST_WK >= (@[frm_smr_eff_yr] || @[frm_smr_eff_wk]) AND COST_YR || COST_WK <= (@[frm_smr_exp_yr] || @[frm_smr_exp_wk]))	
		)	
		GROUP BY WK_TP
	) MN
)
-- ESTIMATE를 위한 참조 주차
,VW_REFERENCE_WEEK AS (
	SELECT  /*+ MATERIALIZE */ MIN(COST_YR||COST_WK) AS SLS_FM_YRWK,   MIN(SLS_FM_DT)  AS  SLS_FM_DT, MAX(COST_YR||COST_WK) AS SLS_TO_YRWK,  MAX(SLS_TO_DT)  AS SLS_TO_DT
	FROM MAS_WK_PRD
	WHERE (COST_YR = @[frm_rfrc_eff_yr] AND COST_WK = @[frm_rfrc_eff_wk])
		OR (COST_YR = @[frm_rfrc_exp_yr] AND COST_WK = @[frm_rfrc_exp_wk])
)

---------------------------------------------------------------------------------------------
-- 이하 RFA
-- 기준이 되는 PROP_NO를 조회
, VW_RFA_PROP_KEY AS (
	SELECT /*+ MATERIALIZE INDEX_FFS(DUR XAK1PRI_RP_DUR) */   
		DUR.PROP_NO , MAX(DUR.AMDT_SEQ) AS AMDT_SEQ
	FROM PRI_RP_DUR DUR
		, VW_CONTRACT_DT CDT
	WHERE TO_CHAR(CTRT_EFF_DT,'YYYYMMDD') >= SLS_FM_DT
		AND TO_CHAR(CTRT_EXP_DT,'YYYYMMDD') <= SLS_TO_DT
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end
	GROUP BY DUR.PROP_NO
)
 -- 데이터 SELECT시 조회 조건으로 이용될 KEY LIST
, VW_RFA_KEY_LIST AS (
	SELECT /*+ MATERIALIZE LEADING(DT SR_CST_DTL) */   HDR.RFA_NO , PKEY.PROP_NO, PKEY.AMDT_SEQ
		,SR_CST_DTL.PRS_YRMON, SR_CST_DTL.PRS_WK, SR_CST_DTL.PRC_CTRT_TP_CD, SR_CST_DTL.PRC_CTRT_NO
		, SR_CST_DTL.SVC_SCP_CD, SR_CST_DTL.VSL_SLAN_DIR_CD, SR_CST_DTL.TRD_CD, SR_CST_DTL.SUB_TRD_CD
		, SR_CST_DTL.RLANE_CD, SR_CST_DTL.PRC_CGO_TP_CD, SR_CST_DTL.ORG_LOC_TP_CD, SR_CST_DTL.ORG_LOC_DEF_CD,SR_CST_DTL. DEST_LOC_TP_CD, SR_CST_DTL.DEST_LOC_DEF_CD
		,SR_CST_DTL.TEU_FRT_REV, SR_CST_DTL.PRS_RESPB_CM_UC_AMT, SR_CST_DTL.PRS_PFIT_CM_UC_AMT, SR_CST_DTL.PRS_RESPB_OPFIT_UC_AMT, SR_CST_DTL.PRS_CRNT_LOD_QTY, SR_CST_DTL.PRS_RESPB_CMPB_AMT, SR_CST_DTL.PRS_PFIT_CMPB_AMT, SR_CST_DTL.PRS_RESPB_OPB_AMT
	FROM
		VW_CONTRACT_DT_LIST  DT
		, PRI_RP_HDR HDR
		, VW_RFA_PROP_KEY PKEY
		, PRI_PRS_CTRT_SMRY SMRY
		, PRI_PRS_CTRT_SMRY_COST_DTL SR_CST_DTL
	WHERE HDR.PROP_NO  = PKEY.PROP_NO 
		AND HDR.RFA_NO = SMRY.PRC_CTRT_NO
		AND SMRY.PRC_CTRT_TP_CD = 'R' -- RFA
		AND SR_CST_DTL.PRS_YRMON = DT.COST_YRMON      
		AND SR_CST_DTL.PRS_WK    = DT.COST_WK        
		AND SMRY.PRS_YRMON = SR_CST_DTL.PRS_YRMON
		AND SMRY.PRS_WK = SR_CST_DTL.PRS_WK
		AND SMRY.PRC_CTRT_TP_CD = SR_CST_DTL.PRC_CTRT_TP_CD
		AND SMRY.PRC_CTRT_NO = SR_CST_DTL.PRC_CTRT_NO
		AND HDR.RFA_NO IS NOT NULL
		AND SR_CST_DTL.TRD_CD = @[frm_trd_cd]
		AND SR_CST_DTL.VSL_SLAN_DIR_CD = @[frm_dir_cd]
		#if(${frm_sub_trd_cd} != '')
			AND SR_CST_DTL.SUB_TRD_CD = @[frm_sub_trd_cd]
		#end
		#if(${frm_rlane_cd} != '')
			AND SR_CST_DTL.RLANE_CD IN (
			#foreach( ${key} in ${rlane_list}) 
				#if($velocityCount != 1 ) 
					UNION ALL
				#end
				SELECT 
						 '$key' 
				FROM DUAL
			#end
			)
		#end
			 
		#if(${frm_customer_type} == 'B')
					AND SMRY.PRS_CUST_TP_CD IN ('I','A','O')
		#elseif(${frm_customer_type} == 'N')
					AND SMRY.PRS_CUST_TP_CD IN ('N')
		#else 
				AND SMRY.PRS_CUST_TP_CD IN ('I','A','O','N')
		#end

		#if(${frm_prop_ofc_cd} != '')
					AND SMRY.PROP_OFC_CD = @[frm_prop_ofc_cd] -- REQUEST
		#end

		#if(${frm_prop_srep_cd} != '')
					AND SMRY.RESPB_SREP_CD = @[frm_prop_srep_cd]
		#end

		#if(${frm_prop_apro_ofc_cd} != '')
					AND SMRY.PROP_APRO_OFC_CD = @[frm_prop_apro_ofc_cd]
		#end

		#if( $cust_list.size() != 0 ) 
			AND (SMRY.CUST_CNT_CD , SMRY.CUST_SEQ) IN (
			#foreach( ${key} in ${cust_list}) 
				#if($velocityCount != 1 ) 
					UNION ALL
				#end
				SELECT 
						substr('$key',1,2),substr('$key',3)
				FROM DUAL
			#end
			)
		#end 
 
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end
)
-- 기준이 되는 SC_NO를 조회 ( OUTER JOIN의 기준 데이터가 된다. )
, VW_RFA_CONTRACT_KEY AS (
	SELECT /*+ MATERIALIZE */ DISTINCT RFA_NO , PROP_NO, AMDT_SEQ
	FROM VW_RFA_KEY_LIST


)

--- 계약번호당 실적이 총 몇주차 인지 ESTIMATE에 쓰일 총 주차가 몇주차인지 계산한다.
, VW_RFA_TOT_WEEK_PER_RFA_NO AS (
SELECT /*+ MATERIALIZE */ PROP_NO , AMDT_SEQ,RFA_NO
	,ACTUAL_WK_CNT
	,DECODE(ESTIMATE_WK_CNT	,1,0,ESTIMATE_WK_CNT	) AS ESTIMATE_WK_CNT	-- 현재주차만 걸릴경우 제외시킨다.
	,REFER_WK_CNT
FROM (
	SELECT /*+ ORDERED USE_NL(KLIST DUR) USE_HASH(KLIST PRD) */  
		KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.RFA_NO
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 0
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_TO_DT >=  KLIST.SDT_SLS_FM_DT        --SDT.SLS_FM_DT
				THEN 1
				ELSE 0
		       END 
		  ) AS ACTUAL_WK_CNT
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 1
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT  
				THEN 0
				WHEN   PRD.SLS_TO_DT <=  KLIST.SDT_SLS_TO_DT       -- SDT.SLS_TO_DT 
				THEN 1
				ELSE 0
			END 
		) AS ESTIMATE_WK_CNT	
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 0
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_FM_DT >=  KLIST.RDT_SLS_FM_DT AND  PRD.SLS_FM_DT <= KLIST.RDT_SLS_TO_DT    --RDT.SLS_FM_DT AND  PRD.SLS_FM_DT <= RDT.SLS_TO_DT
				THEN 1
				ELSE 0
		       END 
		  ) AS REFER_WK_CNT
	FROM 
		 (
			 SELECT  /*+ NO_MERGE ORDERED */
				  SDT.SLS_FM_DT   SDT_SLS_FM_DT,
				  SDT.SLS_TO_DT   SDT_SLS_TO_DT,
				  RDT.SLS_FM_DT   RDT_SLS_FM_DT,
				  RDT.SLS_TO_DT   RDT_SLS_TO_DT,
				  KLIST.*,
				  1    HASH_JOIN_KEY
			  FROM    VW_SUMMARY_DT       SDT
				, VW_REFERENCE_DT     RDT
				, VW_RFA_CONTRACT_KEY KLIST
		 )  KLIST   
		, PRI_RP_DUR DUR
		,(
			SELECT  /*+ NO_MERGE */
			     SLS_FM_DT, SLS_TO_DT,
			     1  HASH_JOIN_KEY
			FROM   MAS_WK_PRD 
		)  PRD 
	WHERE DUR.PROP_NO = KLIST.PROP_NO
		AND DUR.AMDT_SEQ = KLIST.AMDT_SEQ
		AND KLIST.HASH_JOIN_KEY = PRD.HASH_JOIN_KEY     
		AND (
				(	TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') >= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_TO_DT	 
				)  OR (   
					TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') >= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') <= PRD.SLS_TO_DT 
				) OR (
					TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD')>= PRD.SLS_TO_DT	 
				)
		) 
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end
	 GROUP BY KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.RFA_NO
)
)
-- ACTUAL DATA 조회
-- SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) 결합 INDEX 필요
, VW_RFA_ACTUAL_VALUE AS (
	SELECT  CKEY.RFA_NO
		, CKEY.PRC_CTRT_NO 
		, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)
		, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY)   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)
		, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)
		, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)
		, SUM(CKEY.PRS_RESPB_CMPB_AMT *  (CKEY.PRS_CRNT_LOD_QTY  )    ) / SUM(CKEY.PRS_CRNT_LOD_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )     AS CMPB_OFFICE     -- Office Profit/ CM -- CMPB(Previous)
		, SUM(CKEY.PRS_PFIT_CMPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  )   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )       AS CMPB_TRADE      -- Trade Profit/ CM  -- CMPB(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY     * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)
		, SUM(CKEY.PRS_RESPB_OPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  )   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )        AS OPB             -- Office Profit/ OP -- OPB(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)
		, SUM(CKEY.TEU_FRT_REV  * CKEY.PRS_CRNT_LOD_QTY)         AS G_REV            -- Gross Revenue(Previous)
		, MAX(WK_PER_SC.ACTUAL_WK_CNT) AS WEEK_CNT
	FROM VW_RFA_KEY_LIST CKEY 
		, VW_SUMMARY_WEEK WK
		, VW_RFA_TOT_WEEK_PER_RFA_NO WK_PER_SC
	WHERE  CKEY.RFA_NO = WK_PER_SC.RFA_NO
#if( ${frm_ori_rout_cd} != '' )
		-- origin
		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]
#end
#if( ${frm_dest_rout_cd} != '' )
		-- DEST
		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]
#end
-- BY CARGO TYPE
#if (${crg_tp_str} != '' )
		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )
#end
		AND WK.WK_TP = -1
		AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) >= WK.SLS_FM_YRWK  AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) <= WK.SLS_TO_YRWK  
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end
	GROUP BY CKEY.RFA_NO, CKEY.PRC_CTRT_NO 
)
-- 1.정상적으로 REFERENCE 기간에에서 조회 되는 참조값을 SELECT해서 ESTIMATE에서 보여져야 할 값을 만든다.
-- SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) 결합 INDEX 필요
, VW_RFA_EST_ACT_1ST_VALUE AS (
	SELECT  PRC_CTRT_NO
		, LOAD
		, COST_CM_OFFICE
		, COST_CM_TRADE
		, COST_OP_OFFICE
		, CM_OFFICE
		, CM_TRADE
		, OP
		, G_REV
		, WEEK_CNT
		, TOT_WK
		, CM_OFFICE / DECODE(LOAD,0,1,LOAD) AS CMPB_OFFICE
		, CM_TRADE /  DECODE(LOAD,0,1,LOAD) AS CMPB_TRADE
		, OP /  DECODE(LOAD,0,1,LOAD) AS OPB_OFFICE
	FROM (
		SELECT 	 MN.PRC_CTRT_NO
			, DECODE(MN.WEEK_CNT,0,0,MN.LOAD/MN.WEEK_CNT * MN.TOT_WK) AS LOAD
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_TRADE		
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_OP_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_OP_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS CM_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS CM_TRADE
			, DECODE(MN.WEEK_CNT,0,0,MN.OP/MN.WEEK_CNT * MN.TOT_WK) AS OP
			, DECODE(MN.WEEK_CNT,0,0,MN.G_REV/MN.WEEK_CNT * MN.TOT_WK) AS G_REV
			, MN.WEEK_CNT
			, MN.TOT_WK
		FROM (
			SELECT  CKEY.PRC_CTRT_NO 
				, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)
				, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)
				, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)
				, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY ) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY    * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)
				, SUM(CKEY.TEU_FRT_REV  * CKEY.PRS_CRNT_LOD_QTY )         AS G_REV            -- Gross Revenue(Previous)
				, MAX(WK_PER_SC.REFER_WK_CNT) AS WEEK_CNT
				, MAX( WK_PER_SC.ESTIMATE_WK_CNT) AS TOT_WK
			FROM  VW_RFA_KEY_LIST CKEY 
				, VW_REFERENCE_WEEK WK
				, VW_RFA_TOT_WEEK_PER_RFA_NO WK_PER_SC
			WHERE   (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) >= WK.SLS_FM_YRWK  AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) <= WK.SLS_TO_YRWK 
				AND CKEY.RFA_NO = WK_PER_SC.RFA_NO
#if( ${frm_ori_rout_cd} != '' )
		-- origin
		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]
#end
#if( ${frm_dest_rout_cd} != '' )
		-- DEST
		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]
#end
-- BY CARGO TYPE
#if (${crg_tp_str} != '' )
		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )
#end
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end
			GROUP BY CKEY.PRC_CTRT_NO 
		) MN
	)
)
-- 2. 정상적으로 REFERENCE 기간에에서 조회 되는 참조값이 없을때 contract모든 기간을 뒤져서 해당 실적이 있는지 확인후 있으면 그 데이터를 기초해 
--  ESTIMATE값을 만들어 낸다.
, VW_RFA_EST_ACT_2ND_VALUE AS (
	SELECT RFA_NO
		, PRC_CTRT_NO
		, LOAD
		, COST_CM_OFFICE
		, COST_CM_TRADE
		, COST_OP_OFFICE
		, CM_OFFICE
		, CM_TRADE
		, OP
		, G_REV
		, WEEK_CNT
		, TOT_WK
		, CM_OFFICE / DECODE(LOAD,0,1,LOAD) AS CMPB_OFFICE
		, CM_TRADE /  DECODE(LOAD,0,1,LOAD) AS CMPB_TRADE
		, OP /  DECODE(LOAD,0,1,LOAD) AS OPB_OFFICE
	FROM (
		SELECT 	MN.RFA_NO
			, MN.PRC_CTRT_NO
			, DECODE(MN.WEEK_CNT,0,0,MN.LOAD/MN.WEEK_CNT * MN.TOT_WK) AS LOAD
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_TRADE		
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_OP_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_OP_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS CM_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS CM_TRADE
			, DECODE(MN.WEEK_CNT,0,0,MN.OP/MN.WEEK_CNT * MN.TOT_WK) AS OP
			, DECODE(MN.WEEK_CNT,0,0,MN.G_REV/MN.WEEK_CNT * MN.TOT_WK) AS G_REV
			, MN.WEEK_CNT
			, MN.TOT_WK
		FROM (
			SELECT  CKEY.RFA_NO
				, CKEY.PRC_CTRT_NO 
				, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)
				, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY)   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)
				, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY)    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)
				, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY  * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)
				, SUM(CKEY.TEU_FRT_REV * CKEY.PRS_CRNT_LOD_QTY )         AS G_REV            -- Gross Revenue(Previous)
				, MAX(WK_PER_SC.ACTUAL_WK_CNT+WK_PER_SC.ESTIMATE_WK_CNT) AS WEEK_CNT -- 전체 범위에 대해 조회를 했기때문에
				, MAX( WK_PER_SC.ESTIMATE_WK_CNT) AS TOT_WK
			FROM VW_RFA_KEY_LIST CKEY 
				, VW_RFA_TOT_WEEK_PER_RFA_NO WK_PER_SC
			WHERE NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = CKEY.PRC_CTRT_NO)
				AND CKEY.RFA_NO = WK_PER_SC.RFA_NO
#if( ${frm_ori_rout_cd} != '' )
		-- origin
		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]
#end
#if( ${frm_dest_rout_cd} != '' )
		-- DEST
		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]
#end
-- BY CARGO TYPE
#if (${crg_tp_str} != '' )
		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )
#end
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end
			GROUP BY CKEY.RFA_NO, CKEY.PRC_CTRT_NO 
		) MN
	)
)
-- 3. 전혀 실적이 존재 하지 않을경우
--  PRI_SP_SCP_RT_CMDT_ROUT의 데이터를 이용해서 ESTIMATE값을 만들어 낸다.
, VW_RFA_EST_ACT_3RD_VALUE AS (
	SELECT 	MN.RFA_NO
		, SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS LOAD
		, SUM(CM_OFFICE) AS CM_OFFICE
		, SUM(CM_TRADE) AS CM_TRADE
		, SUM(OP) AS OP
		, SUM(CM_OFFICE) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS CMPB_OFFICE	-- OFFICE PROPIT/CMPB
		, SUM(CM_TRADE) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS CMPB_TRADE	-- TRADE PROPIT/CM
		, SUM(OP) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS OPB_OFFICE	 --OPB(NEW)
	FROM (
		SELECT  CKEY.RFA_NO
			, SUM(CMDT_ROUT.PRS_ESTM_LOD_QTY  ) AS LOAD -- LOAD(NEW)
			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' 
						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  
	       			ELSE	
							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  / 2
	       		  END)  AS CM_OFFICE  -- AS CM_NEW_OFFICE
			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' 
						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT 
	       			ELSE	
							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT  / 2
	       		  END)  AS CM_TRADE    --  CM_NEW_OP_TRADE 
			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' 
						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  
	       			ELSE	
							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  / 2
	       		  END)  AS OP    --  CM_NEW_OP_TRADE 
		FROM  PRI_RP_SCP_RT_CMDT_ROUT CMDT_ROUT
			, VW_RFA_CONTRACT_KEY CKEY
			, VW_SUMMARY_WEEK WK2

#if( ${frm_ori_rout_cd} != '' )
				,(
				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, CMDT_HDR_SEQ, ROUT_SEQ
				       FROM (
						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ
							, DECODE(@[frm_ori_loc_tp]
								, 'C',
								       (
									  SELECT CNT_CD 
									  FROM MDM_LOCATION 
									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) 
								       )
								, 'R', 
									(
									    SELECT RGN_CD 
									    FROM MDM_LOCATION 
									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)
									 )
								, NULL 
							)   AS LOC_CD 
						FROM  VW_RFA_CONTRACT_KEY MN_SET
							, PRI_RP_SCP_RT_ROUT_PNT A
							, PRI_RP_SCP_GRP_LOC B
							, PRI_RP_SCP_GRP_LOC_DTL C
						WHERE MN_SET.PROP_NO = A.PROP_NO
							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ
							AND A.ORG_DEST_TP_CD = 'O'
							AND A.SRC_INFO_CD <> 'AD'
							AND A.PROP_NO     = B.PROP_NO(+)
							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)
							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)
							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)
							AND B.PROP_NO     = C.PROP_NO(+)
							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)
							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)
							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)
							AND C.SRC_INFO_CD(+) <> 'AD'
							AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = MN_SET.RFA_NO)
							AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_2ND_VALUE V2 WHERE V2.PRC_CTRT_NO = MN_SET.RFA_NO)
					)
					WHERE LOC_CD  = @[frm_ori_rout_cd]
				) ORI_LOC
#end
#if( ${frm_dest_rout_cd} != '' )
				,(
				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, CMDT_HDR_SEQ, ROUT_SEQ
				       FROM (
						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ
							, DECODE(@[frm_dest_loc_tp]
								, 'C',
								       (
									  SELECT CNT_CD 
									  FROM MDM_LOCATION 
									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) 
								       )
								, 'R', 
									(
									    SELECT RGN_CD 
									    FROM MDM_LOCATION 
									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)
									 )
								, NULL 
							)   AS LOC_CD 
						FROM  VW_RFA_CONTRACT_KEY MN_SET
							, PRI_RP_SCP_RT_ROUT_PNT A
							, PRI_RP_SCP_GRP_LOC B
							, PRI_RP_SCP_GRP_LOC_DTL C
						WHERE MN_SET.PROP_NO = A.PROP_NO
							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ
							AND A.ORG_DEST_TP_CD = 'D'
							AND A.SRC_INFO_CD <> 'AD'
							AND A.PROP_NO     = B.PROP_NO(+)
							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)
							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)
							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)
							AND B.PROP_NO     = C.PROP_NO(+)
							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)
							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)
							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)
							AND C.SRC_INFO_CD(+) <> 'AD'
							AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = MN_SET.RFA_NO)
							AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_2ND_VALUE V2 WHERE V2.PRC_CTRT_NO = MN_SET.RFA_NO)
					)
					WHERE LOC_CD  = @[frm_dest_rout_cd]
				) DEST_LOC
#end
		WHERE CMDT_ROUT.PROP_NO = CKEY.PROP_NO
			AND CMDT_ROUT.AMDT_SEQ = 0
			AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = CKEY.RFA_NO)
			AND NOT EXISTS ( SELECT 'F' FROM VW_RFA_EST_ACT_2ND_VALUE V2 WHERE V2.PRC_CTRT_NO = CKEY.RFA_NO)
#if( ${frm_ori_rout_cd} != '' )
				AND CMDT_ROUT.PROP_NO = ORI_LOC.PROP_NO
				AND CMDT_ROUT.AMDT_SEQ = ORI_LOC.AMDT_SEQ
				AND CMDT_ROUT.SVC_SCP_CD = ORI_LOC.SVC_SCP_CD
				AND CMDT_ROUT.CMDT_HDR_SEQ =  ORI_LOC.CMDT_HDR_SEQ
				AND CMDT_ROUT.ROUT_SEQ  = ORI_LOC.ROUT_SEQ
#end
#if( ${frm_dest_rout_cd} != '' )
				AND CMDT_ROUT.PROP_NO = DEST_LOC.PROP_NO
				AND CMDT_ROUT.AMDT_SEQ = DEST_LOC.AMDT_SEQ
				AND CMDT_ROUT.SVC_SCP_CD = DEST_LOC.SVC_SCP_CD
				AND CMDT_ROUT.CMDT_HDR_SEQ =  DEST_LOC.CMDT_HDR_SEQ
				AND CMDT_ROUT.ROUT_SEQ  = DEST_LOC.ROUT_SEQ
#end
		-- BY CARGO TYPE
#if (${crg_tp_str} != '' )
				AND CMDT_ROUT.PRS_CGO_TP_CD IN ( ${crg_tp_str} )
#end

			AND WK2.WK_TP = 1
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )
                        AND 1=1
                #else
                        AND 1=0
                #end
		GROUP BY CKEY.RFA_NO
	) MN
	GROUP BY MN.RFA_NO
)
---------------------------------------------------------------------------------------------
-- 이하 SC
-- 기준이 되는 PROP_NO를 조회
, VW_PROP_KEY AS (
	SELECT /*+ MATERIALIZE */ DUR.PROP_NO , MAX(DUR.AMDT_SEQ) AS AMDT_SEQ
	FROM PRI_SP_DUR DUR
		, VW_CONTRACT_DT CDT
	WHERE TO_CHAR(CTRT_EFF_DT,'YYYYMMDD') >= SLS_FM_DT
		AND TO_CHAR(CTRT_EXP_DT,'YYYYMMDD') <= SLS_TO_DT
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                        AND 1=1
                #else
                        AND 1=0
                #end
	GROUP BY DUR.PROP_NO
)
 -- 데이터 SELECT시 조회 조건으로 이용될 KEY LIST
, VW_KEY_LIST AS (
	SELECT /*+ MATERIALIZE LEADING(DT SMRY HDR) FULL(HDR) */  HDR.SC_NO , PKEY.PROP_NO, PKEY.AMDT_SEQ
		,SR_CST_DTL.PRS_YRMON, SR_CST_DTL.PRS_WK, SR_CST_DTL.PRC_CTRT_TP_CD, SR_CST_DTL.PRC_CTRT_NO
		, SR_CST_DTL.SVC_SCP_CD, SR_CST_DTL.VSL_SLAN_DIR_CD, SR_CST_DTL.TRD_CD, SR_CST_DTL.SUB_TRD_CD
		, SR_CST_DTL.RLANE_CD, SR_CST_DTL.PRC_CGO_TP_CD, SR_CST_DTL.ORG_LOC_TP_CD, SR_CST_DTL.ORG_LOC_DEF_CD,SR_CST_DTL. DEST_LOC_TP_CD, SR_CST_DTL.DEST_LOC_DEF_CD
		,SR_CST_DTL.TEU_FRT_REV, SR_CST_DTL.PRS_RESPB_CM_UC_AMT, SR_CST_DTL.PRS_PFIT_CM_UC_AMT, SR_CST_DTL.PRS_RESPB_OPFIT_UC_AMT, SR_CST_DTL.PRS_CRNT_LOD_QTY, SR_CST_DTL.PRS_RESPB_CMPB_AMT, SR_CST_DTL.PRS_PFIT_CMPB_AMT, SR_CST_DTL.PRS_RESPB_OPB_AMT
	FROM 
		VW_CONTRACT_DT_LIST  DT    
		, PRI_SP_HDR HDR
		, VW_PROP_KEY PKEY
		, PRI_PRS_CTRT_SMRY SMRY
		, PRI_PRS_CTRT_SMRY_COST_DTL SR_CST_DTL
	WHERE HDR.PROP_NO  = PKEY.PROP_NO 
		AND HDR.SC_NO = SMRY.PRC_CTRT_NO
		AND SMRY.PRC_CTRT_TP_CD = 'S' -- S/C
		AND SMRY.PRS_YRMON = DT.COST_YRMON    
		AND SMRY.PRS_WK    = DT.COST_WK       
		AND SMRY.PRS_YRMON = SR_CST_DTL.PRS_YRMON
		AND SMRY.PRS_WK = SR_CST_DTL.PRS_WK
		AND SMRY.PRC_CTRT_TP_CD = SR_CST_DTL.PRC_CTRT_TP_CD
		AND SMRY.PRC_CTRT_NO = SR_CST_DTL.PRC_CTRT_NO
		AND HDR.SC_NO IS NOT NULL
		AND SR_CST_DTL.TRD_CD = @[frm_trd_cd]
		AND SR_CST_DTL.VSL_SLAN_DIR_CD = @[frm_dir_cd]
		#if(${frm_sub_trd_cd} != '')
			AND SR_CST_DTL.SUB_TRD_CD = @[frm_sub_trd_cd]
		#end
		#if(${frm_rlane_cd} != '')
			AND SR_CST_DTL.RLANE_CD IN (
			#foreach( ${key} in ${rlane_list}) 
				#if($velocityCount != 1 ) 
					UNION ALL
				#end
				SELECT 
						 '$key' 
				FROM DUAL
			#end
			)
		#end
			 
		#if(${frm_customer_type} == 'B')
					AND SMRY.PRS_CUST_TP_CD IN ('I','A','O')
		#elseif(${frm_customer_type} == 'N')
					AND SMRY.PRS_CUST_TP_CD IN ('N')
		#else 
				AND SMRY.PRS_CUST_TP_CD IN ('I','A','O','N')
		#end

		#if(${frm_prop_ofc_cd} != '')
					AND SMRY.PROP_OFC_CD = @[frm_prop_ofc_cd] -- REQUEST
		#end

		#if(${frm_prop_srep_cd} != '')
					AND SMRY.RESPB_SREP_CD = @[frm_prop_srep_cd]
		#end

		#if(${frm_prop_apro_ofc_cd} != '')
					AND SMRY.PROP_APRO_OFC_CD = @[frm_prop_apro_ofc_cd]
		#end

		#if( $cust_list.size() != 0 ) 
			AND (SMRY.CUST_CNT_CD , SMRY.CUST_SEQ) IN (
			#foreach( ${key} in ${cust_list}) 
				#if($velocityCount != 1 ) 
					UNION ALL
				#end
				SELECT 
						substr('$key',1,2),substr('$key',3)
				FROM DUAL
			#end
			)
		#end 
 
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                        AND 1=1
                #else
                        AND 1=0
                #end
)
-- 기준이 되는 SC_NO를 조회 ( OUTER JOIN의 기준 데이터가 된다. )
, VW_CONTRACT_KEY AS (
	SELECT /*+ MATERIALIZE */ DISTINCT SC_NO , PROP_NO, AMDT_SEQ
	FROM VW_KEY_LIST


)

--- 계약번호당 실적이 총 몇주차 인지 ESTIMATE에 쓰일 총 주차가 몇주차인지 계산한다.
, VW_TOT_WEEK_PER_SC_NO AS (
SELECT /*+ MATERIALIZE */ PROP_NO , AMDT_SEQ,SC_NO
	,ACTUAL_WK_CNT
	,DECODE(ESTIMATE_WK_CNT	,1,0,ESTIMATE_WK_CNT	) AS ESTIMATE_WK_CNT	-- 현재주차만 걸릴경우 제외시킨다.
	,REFER_WK_CNT
FROM (
	SELECT /*+ ORDERED USE_NL(KLIST DUR) USE_HASH(KLIST PRD) */  
		KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.SC_NO
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 0
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_TO_DT >=  KLIST.SDT_SLS_FM_DT     -- SDT.SLS_FM_DT
				THEN 1
				ELSE 0
		       END 
		  ) AS ACTUAL_WK_CNT
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 1
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT  
				THEN 0
				WHEN   PRD.SLS_TO_DT <=  KLIST.SDT_SLS_TO_DT   --SDT.SLS_TO_DT 
				THEN 1
				ELSE 0
			END 
		) AS ESTIMATE_WK_CNT	
		, SUM(
			CASE	WHEN TO_CHAR(SYSDATE,'YYYYMMDD') <= PRD.SLS_TO_DT  AND TO_CHAR(SYSDATE,'YYYYMMDD') >= PRD.SLS_FM_DT
				THEN 0
				WHEN TO_CHAR(SYSDATE,'YYYYMMDD') > PRD.SLS_TO_DT   AND  PRD.SLS_FM_DT >=  KLIST.RDT_SLS_FM_DT AND  PRD.SLS_FM_DT <= KLIST.RDT_SLS_TO_DT -- RDT.SLS_FM_DT AND  PRD.SLS_FM_DT <= RDT.SLS_TO_DT
				THEN 1
				ELSE 0
		       END 
		  ) AS REFER_WK_CNT
	FROM 
	         (
			 SELECT  /*+ NO_MERGE ORDERED */
				  SDT.SLS_FM_DT     SDT_SLS_FM_DT,
				  SDT.SLS_TO_DT     SDT_SLS_TO_DT,
				  RDT.SLS_FM_DT     RDT_SLS_FM_DT,
				  RDT.SLS_TO_DT     RDT_SLS_TO_DT,
				  KLIST.*,
				  1      HASH_JOIN_KEY
			  FROM    VW_SUMMARY_DT    SDT
				, VW_REFERENCE_DT  RDT
				, VW_CONTRACT_KEY  KLIST
		 )  KLIST        
		, PRI_SP_DUR DUR
		,(
			SELECT  /*+ NO_MERGE */
			     SLS_FM_DT, SLS_TO_DT,
			     1  HASH_JOIN_KEY
			FROM   MAS_WK_PRD 
		)  PRD 	
	WHERE DUR.PROP_NO = KLIST.PROP_NO
		AND DUR.AMDT_SEQ = KLIST.AMDT_SEQ
		AND KLIST.HASH_JOIN_KEY = PRD.HASH_JOIN_KEY   
		AND (
				(	TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') >= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_TO_DT	 
				)  OR (   
					TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') >= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD') <= PRD.SLS_TO_DT 
				) OR (
					TO_CHAR(DUR.CTRT_EFF_DT,'YYYYMMDD') <= PRD.SLS_FM_DT 
					AND TO_CHAR(DUR.CTRT_EXP_DT,'YYYYMMDD')>= PRD.SLS_TO_DT	 
				)
		) 
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                        AND 1=1
                #else
                        AND 1=0
                #end
	 GROUP BY KLIST.PROP_NO , KLIST.AMDT_SEQ,KLIST.SC_NO
)
)
-- ACTUAL DATA 조회
-- SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) 결합 INDEX 필요
, VW_ACTUAL_VALUE AS (
	SELECT  CKEY.SC_NO
		, CKEY.PRC_CTRT_NO 
		, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)
		, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)
		, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)
		, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY ) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)
		, SUM(CKEY.PRS_RESPB_CMPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  )   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )     AS CMPB_OFFICE     -- Office Profit/ CM -- CMPB(Previous)
		, SUM(CKEY.PRS_PFIT_CMPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY  )   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )       AS CMPB_TRADE      -- Trade Profit/ CM  -- CMPB(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)
		, SUM(CKEY.PRS_RESPB_OPB_AMT * ( CKEY.PRS_CRNT_LOD_QTY   )   ) / SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )        AS OPB             -- Office Profit/ OP -- OPB(Previous)
		, SUM(CKEY.PRS_CRNT_LOD_QTY * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)
		, SUM(CKEY.TEU_FRT_REV  * CKEY.PRS_CRNT_LOD_QTY )         AS G_REV            -- Gross Revenue(Previous)
		, MAX(WK_PER_SC.ACTUAL_WK_CNT) AS WEEK_CNT
	FROM VW_KEY_LIST CKEY 
		, VW_SUMMARY_WEEK WK
		, VW_TOT_WEEK_PER_SC_NO WK_PER_SC
	WHERE  CKEY.SC_NO = WK_PER_SC.SC_NO
#if( ${frm_ori_rout_cd} != '' )
		-- origin
		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]
#end
#if( ${frm_dest_rout_cd} != '' )
		-- DEST
		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]
#end
-- BY CARGO TYPE
#if (${crg_tp_str} != '' )
		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )
#end
		AND WK.WK_TP = -1
		AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) >= WK.SLS_FM_YRWK  AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) <= WK.SLS_TO_YRWK  
                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                        AND 1=1
                #else
                        AND 1=0
                #end
	GROUP BY CKEY.SC_NO, CKEY.PRC_CTRT_NO 
)
-- 1.정상적으로 REFERENCE 기간에에서 조회 되는 참조값을 SELECT해서 ESTIMATE에서 보여져야 할 값을 만든다.
-- SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) 결합 INDEX 필요
, VW_EST_ACT_1ST_VALUE AS (
	SELECT  PRC_CTRT_NO
		, LOAD
		, COST_CM_OFFICE
		, COST_CM_TRADE
		, COST_OP_OFFICE
		, CM_OFFICE
		, CM_TRADE
		, OP
		, G_REV
		, WEEK_CNT
		, TOT_WK
		, CM_OFFICE / DECODE(LOAD,0,1,LOAD) AS CMPB_OFFICE
		, CM_TRADE /  DECODE(LOAD,0,1,LOAD) AS CMPB_TRADE
		, OP /  DECODE(LOAD,0,1,LOAD) AS OPB_OFFICE
	FROM (
		SELECT 	 MN.PRC_CTRT_NO
			, DECODE(MN.WEEK_CNT,0,0,MN.LOAD/MN.WEEK_CNT * MN.TOT_WK) AS LOAD
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_TRADE		
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_OP_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_OP_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS CM_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS CM_TRADE
			, DECODE(MN.WEEK_CNT,0,0,MN.OP/MN.WEEK_CNT * MN.TOT_WK) AS OP
			, DECODE(MN.WEEK_CNT,0,0,MN.G_REV/MN.WEEK_CNT * MN.TOT_WK) AS G_REV
			, MN.WEEK_CNT
			, MN.TOT_WK
		FROM (
			SELECT  CKEY.PRC_CTRT_NO 
				, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)
				, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY)   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)
				, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY)    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)
				, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY   * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY  * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)
				, SUM(CKEY.TEU_FRT_REV * CKEY.PRS_CRNT_LOD_QTY)         AS G_REV            -- Gross Revenue(Previous)
				, MAX(WK_PER_SC.REFER_WK_CNT) AS WEEK_CNT
				, MAX( WK_PER_SC.ESTIMATE_WK_CNT) AS TOT_WK
			FROM  VW_KEY_LIST CKEY 
				, VW_REFERENCE_WEEK WK
				, VW_TOT_WEEK_PER_SC_NO WK_PER_SC
			WHERE   (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) >= WK.SLS_FM_YRWK  AND (SUBSTR(CKEY.PRS_YRMON,1,4)  || CKEY.PRS_WK) <= WK.SLS_TO_YRWK 
				AND CKEY.SC_NO = WK_PER_SC.SC_NO
#if( ${frm_ori_rout_cd} != '' )
		-- origin
		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]
#end
#if( ${frm_dest_rout_cd} != '' )
		-- DEST
		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]
#end
-- BY CARGO TYPE
#if (${crg_tp_str} != '' )
		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )
#end
                                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                                        AND 1=1
                                #else
                                        AND 1=0
                                #end
			GROUP BY CKEY.PRC_CTRT_NO 
		) MN
	)
)
-- 2. 정상적으로 REFERENCE 기간에에서 조회 되는 참조값이 없을때 contract모든 기간을 뒤져서 해당 실적이 있는지 확인후 있으면 그 데이터를 기초해 
--  ESTIMATE값을 만들어 낸다.
, VW_EST_ACT_2ND_VALUE AS (
	SELECT SC_NO
		, PRC_CTRT_NO
		, LOAD
		, COST_CM_OFFICE
		, COST_CM_TRADE
		, COST_OP_OFFICE
		, CM_OFFICE
		, CM_TRADE
		, OP
		, G_REV
		, WEEK_CNT
		, TOT_WK
		, CM_OFFICE / DECODE(LOAD,0,1,LOAD) AS CMPB_OFFICE
		, CM_TRADE /  DECODE(LOAD,0,1,LOAD) AS CMPB_TRADE
		, OP /  DECODE(LOAD,0,1,LOAD) AS OPB_OFFICE
	FROM (
		SELECT 	MN.SC_NO
			, MN.PRC_CTRT_NO
			, DECODE(MN.WEEK_CNT,0,0,MN.LOAD/MN.WEEK_CNT * MN.TOT_WK) AS LOAD
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS COST_CM_TRADE		
			, DECODE(MN.WEEK_CNT,0,0,MN.COST_OP_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS COST_OP_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.CM_OFFICE/MN.WEEK_CNT * MN.TOT_WK) AS CM_OFFICE
			, DECODE(MN.WEEK_CNT,0,0,MN.CM_TRADE/MN.WEEK_CNT * MN.TOT_WK) AS CM_TRADE
			, DECODE(MN.WEEK_CNT,0,0,MN.OP/MN.WEEK_CNT * MN.TOT_WK) AS OP
			, DECODE(MN.WEEK_CNT,0,0,MN.G_REV/MN.WEEK_CNT * MN.TOT_WK) AS G_REV
			, MN.WEEK_CNT
			, MN.TOT_WK
		FROM (
			SELECT  CKEY.SC_NO
				, CKEY.PRC_CTRT_NO 
				, SUM(CKEY.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD            -- Load(Previous)
				, SUM(CKEY.PRS_RESPB_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )   AS COST_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)
				, SUM(CKEY.PRS_PFIT_CM_UC_AMT * CKEY.PRS_CRNT_LOD_QTY )    AS COST_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)
				, SUM(CKEY.PRS_RESPB_OPFIT_UC_AMT * CKEY.PRS_CRNT_LOD_QTY ) AS COST_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY * CKEY.PRS_RESPB_CMPB_AMT) AS CM_OFFICE -- Office Profit/ CM -- CM(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY  * CKEY.PRS_PFIT_CMPB_AMT) AS CM_TRADE   -- Trade Profit/ CM  -- CM(Previous)
				, SUM(CKEY.PRS_CRNT_LOD_QTY * CKEY.PRS_RESPB_OPB_AMT) AS OP         -- OP(Previous)
				, SUM(CKEY.TEU_FRT_REV * CKEY.PRS_CRNT_LOD_QTY )         AS G_REV            -- Gross Revenue(Previous)
				, MAX(WK_PER_SC.ACTUAL_WK_CNT+WK_PER_SC.ESTIMATE_WK_CNT) AS WEEK_CNT -- 전체 범위에 대해 조회를 했기때문에
				, MAX( WK_PER_SC.ESTIMATE_WK_CNT) AS TOT_WK
			FROM VW_KEY_LIST CKEY 
				, VW_TOT_WEEK_PER_SC_NO WK_PER_SC
			WHERE NOT EXISTS ( SELECT 'F' FROM VW_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = CKEY.PRC_CTRT_NO)
				AND CKEY.SC_NO = WK_PER_SC.SC_NO
#if( ${frm_ori_rout_cd} != '' )
		-- origin
		AND CKEY.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]
#end
#if( ${frm_dest_rout_cd} != '' )
		-- DEST
		AND CKEY.DEST_LOC_TP_CD= @[frm_dest_rout_cd]
#end
-- BY CARGO TYPE
#if (${crg_tp_str} != '' )
		AND CKEY.PRC_CGO_TP_CD IN ( ${crg_tp_str} )
#end
                                #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                                        AND 1=1
                                #else
                                        AND 1=0
                                #end
			GROUP BY CKEY.SC_NO, CKEY.PRC_CTRT_NO 
		) MN
	)
)
-- 3. 전혀 실적이 존재 하지 않을경우
--  PRI_SP_SCP_RT_CMDT_ROUT의 데이터를 이용해서 ESTIMATE값을 만들어 낸다.
, VW_EST_ACT_3RD_VALUE AS (
	SELECT 	MN.SC_NO
		, SUM(LOAD  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS LOAD
		, SUM(CM_OFFICE) AS CM_OFFICE
		, SUM(CM_TRADE) AS CM_TRADE
		, SUM(OP) AS OP
		, SUM(CM_OFFICE) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS CMPB_OFFICE	-- OFFICE PROPIT/CMPB
		, SUM(CM_TRADE) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS CMPB_TRADE	-- TRADE PROPIT/CM
		, SUM(OP) / SUM(LOAD/ DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1)) AS OPB_OFFICE	 --OPB(NEW)
	FROM (
		SELECT  CKEY.SC_NO
			, SUM(CMDT_ROUT.PRS_ESTM_LOD_QTY ) AS LOAD -- LOAD(NEW)
			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' 
						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  
	       			ELSE	
							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  / 2
	       		  END)  AS CM_OFFICE  -- AS CM_NEW_OFFICE
			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' 
						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT 
	       			ELSE	
							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT  / 2
	       		  END)  AS CM_TRADE    --  CM_NEW_OP_TRADE 
			, SUM(CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' 
						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  
	       			ELSE	
							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  / 2
	       		  END)  AS OP    --  CM_NEW_OP_TRADE 
		FROM  PRI_SP_SCP_RT_CMDT_ROUT CMDT_ROUT
			, VW_CONTRACT_KEY CKEY
			, VW_SUMMARY_WEEK WK2
#if( ${frm_ori_rout_cd} != '' )
				,(
				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, GEN_SPCL_RT_TP_CD, CMDT_HDR_SEQ, ROUT_SEQ
				       FROM (
						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.GEN_SPCL_RT_TP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ
							, DECODE(@[frm_ori_loc_tp]
								, 'C',
								       (
									  SELECT CNT_CD 
									  FROM MDM_LOCATION 
									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) 
								       )
								, 'R', 
									(
									    SELECT RGN_CD 
									    FROM MDM_LOCATION 
									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)
									 )
								, NULL 
							)   AS LOC_CD 
						FROM  VW_CONTRACT_KEY MN_SET
							, PRI_SP_SCP_RT_ROUT_PNT A
							, PRI_SP_SCP_GRP_LOC B
							, PRI_SP_SCP_GRP_LOC_DTL C
						WHERE MN_SET.PROP_NO = A.PROP_NO
							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ
							AND A.ORG_DEST_TP_CD = 'O'
							AND A.SRC_INFO_CD <> 'AD'
							AND A.PROP_NO     = B.PROP_NO(+)
							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)
							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)
							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)
							AND B.PROP_NO     = C.PROP_NO(+)
							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)
							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)
							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)
							AND C.SRC_INFO_CD(+) <> 'AD'
					)
					WHERE LOC_CD  = @[frm_ori_rout_cd]
				) ORI_LOC
#end
#if( ${frm_dest_rout_cd} != '' )
				,(
				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, GEN_SPCL_RT_TP_CD, CMDT_HDR_SEQ, ROUT_SEQ
				       FROM (
						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.GEN_SPCL_RT_TP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ
							, DECODE(@[frm_dest_loc_tp]
								, 'C',
								       (
									  SELECT CNT_CD 
									  FROM MDM_LOCATION 
									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) 
								       )
								, 'R', 
									(
									    SELECT RGN_CD 
									    FROM MDM_LOCATION 
									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)
									 )
								, NULL 
							)   AS LOC_CD 
						FROM  VW_CONTRACT_KEY MN_SET
							, PRI_SP_SCP_RT_ROUT_PNT A
							, PRI_SP_SCP_GRP_LOC B
							, PRI_SP_SCP_GRP_LOC_DTL C
						WHERE MN_SET.PROP_NO = A.PROP_NO
							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ
							AND A.ORG_DEST_TP_CD = 'D'
							AND A.SRC_INFO_CD <> 'AD'
							AND A.PROP_NO     = B.PROP_NO(+)
							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)
							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)
							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)
							AND B.PROP_NO     = C.PROP_NO(+)
							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)
							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)
							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)
							AND C.SRC_INFO_CD(+) <> 'AD'
					)
					WHERE LOC_CD  = @[frm_dest_rout_cd]
				) DEST_LOC
#end
		WHERE CMDT_ROUT.PROP_NO = CKEY.PROP_NO
#if( ${frm_ori_rout_cd} != '' )
				AND CMDT_ROUT.PROP_NO = ORI_LOC.PROP_NO
				AND CMDT_ROUT.AMDT_SEQ = ORI_LOC.AMDT_SEQ
				AND CMDT_ROUT.SVC_SCP_CD = ORI_LOC.SVC_SCP_CD
				AND CMDT_ROUT.GEN_SPCL_RT_TP_CD = ORI_LOC.GEN_SPCL_RT_TP_CD
				AND CMDT_ROUT.CMDT_HDR_SEQ =  ORI_LOC.CMDT_HDR_SEQ
				AND CMDT_ROUT.ROUT_SEQ  = ORI_LOC.ROUT_SEQ
#end
#if( ${frm_dest_rout_cd} != '' )
				AND CMDT_ROUT.PROP_NO = DEST_LOC.PROP_NO
				AND CMDT_ROUT.AMDT_SEQ = DEST_LOC.AMDT_SEQ
				AND CMDT_ROUT.SVC_SCP_CD = DEST_LOC.SVC_SCP_CD
				AND CMDT_ROUT.GEN_SPCL_RT_TP_CD = DEST_LOC.GEN_SPCL_RT_TP_CD
				AND CMDT_ROUT.CMDT_HDR_SEQ =  DEST_LOC.CMDT_HDR_SEQ
				AND CMDT_ROUT.ROUT_SEQ  = DEST_LOC.ROUT_SEQ
#end
		-- BY CARGO TYPE
#if (${crg_tp_str} != '' )
				AND CMDT_ROUT.PRS_CGO_TP_CD IN ( ${crg_tp_str} )
#end
			AND CMDT_ROUT.AMDT_SEQ = 0
			AND NOT EXISTS ( SELECT 'F' FROM VW_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = CKEY.SC_NO)
			AND NOT EXISTS ( SELECT 'F' FROM VW_EST_ACT_2ND_VALUE V2 WHERE V2.PRC_CTRT_NO = CKEY.SC_NO)
			AND WK2.WK_TP = 1
                        #if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )
                                AND 1=1
                        #else
                                AND 1=0
                        #end
		GROUP BY CKEY.SC_NO
	) MN
	GROUP BY MN.SC_NO
)


SELECT  A_SC_NO                   
	, E1_SC_NO                 
	, E2_SC_NO                 
	, E3_SC_NO                       
	, A1_LOAD                       
	, A1_COST_CM_OFFICE     
	, A1_COST_CM_TRADE      
	, A1_COST_OP_OFFICE     
	, A1_CMPB_OFFICE        
	, A1_CMPB_TRADE         
	, A1_CM_OFFICE          
	, A1_CM_TRADE           
	, A1_OPB                 
	, A1_OP                  
	, A1_G_REV               
	, A1_WEEK_CNT           
	, E1_LOAD           
	, E1_CM_OFFICE      
	, E1_CM_TRADE       
	, E1_OP             
	, E1_CMPB_OFFICE    
	, E1_CMPB_TRADE     
	, E1_OPB    
	, E1_TOT_WK         
	, E1_COST_CM_OFFICE 
	, E1_COST_CM_TRADE  
	, E1_COST_OP_OFFICE 
	, E1_G_REV          
	, EST_TP
	, A1_LOAD + E1_LOAD AS SUM_LOAD
	, A1_G_REV + E1_G_REV AS SUM_GREV
	, A1_COST_CM_OFFICE + E1_COST_CM_OFFICE AS SUM_COST_CM_OFFICE
	, A1_COST_CM_TRADE + E1_COST_CM_TRADE AS SUM_COST_CM_TRADE
	, A1_COST_OP_OFFICE + E1_COST_OP_OFFICE AS SUM_COST_OP_OFFICE
	, A1_WEEK_CNT + E1_TOT_WK AS SUM_WEEK
	, A1_CM_OFFICE + E1_CM_OFFICE AS SUM_CM_OFFICE
	, A1_CM_TRADE + E1_CM_TRADE AS SUM_CM_TRADE
	, A1_OP + E1_OP AS SUM_OP
	, (A1_CMPB_OFFICE	- E1_CMPB_OFFICE	) / DECODE(E1_CMPB_OFFICE, 0,	TO_NUMBER(NULL)	, ABS(E1_CMPB_OFFICE)) * 100 AS DIFF_CMPB_OFFICE
	, (A1_CMPB_TRADE	- E1_CMPB_TRADE		) / DECODE(E1_CMPB_TRADE, 0,	TO_NUMBER(NULL)		, ABS(E1_CMPB_TRADE)) * 100 AS DIFF_CMPB_TRADE
	, (A1_OPB		- E1_OPB		) / DECODE(E1_OPB, 0,		TO_NUMBER(NULL)			, ABS(E1_OPB)) * 100  AS DIFF_OPB
	, C.CUST_CNT_CD || TO_CHAR(C.CUST_SEQ,'FM000000') || ' - ' || C.CTRT_PTY_NM AS CUST_NM
	, M.PROP_OFC_CD
	,  ( 
		       CASE WHEN Q.CNTR_LOD_UT_CD = 'F' AND @[frm_pfmc_unit] = 'TEU' THEN 
			   Q.FNL_MQC_QTY * 2
		       WHEN Q.CNTR_LOD_UT_CD = 'T' AND @[frm_pfmc_unit] = 'FEU' THEN
			   Q.FNL_MQC_QTY /2
		       ELSE Q.FNL_MQC_QTY
		       END
	)  AS MQC_QTY
	, 'SC' AS CONTRACT_NM
FROM (
	SELECT /*+USE_HASH(CKEY,AVALUE,ETS_1ST,ETS_2ND,ETS_3RD)*/ CKEY.SC_NO
		, CKEY.PROP_NO
		, CKEY.AMDT_SEQ
		, CKEY.SC_NO AS A_SC_NO
		, ETS_1ST.PRC_CTRT_NO AS E1_SC_NO
		, ETS_2ND.PRC_CTRT_NO AS E2_SC_NO
		, ETS_3RD.SC_NO AS E3_SC_NO
		, AVALUE.LOAD	 AS A1_LOAD
		, AVALUE.COST_CM_OFFICE	 AS A1_COST_CM_OFFICE
		, AVALUE.COST_CM_TRADE	 AS A1_COST_CM_TRADE
		, AVALUE.COST_OP_OFFICE	 AS A1_COST_OP_OFFICE
		, AVALUE.CMPB_OFFICE	 AS A1_CMPB_OFFICE
		, AVALUE.CMPB_TRADE	 AS A1_CMPB_TRADE
		, AVALUE.CM_OFFICE	 AS A1_CM_OFFICE
		, AVALUE.CM_TRADE	 AS A1_CM_TRADE
		, AVALUE.OPB		AS A1_OPB
		, AVALUE.OP		AS A1_OP
		, AVALUE.G_REV		AS A1_G_REV
		, AVALUE.WEEK_CNT	 AS A1_WEEK_CNT
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.LOAD,ETS_2ND.LOAD),ETS_1ST.LOAD)				AS E1_LOAD
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CM_OFFICE,ETS_2ND.CM_OFFICE),ETS_1ST.CM_OFFICE)		AS E1_CM_OFFICE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CM_TRADE,ETS_2ND.CM_TRADE),ETS_1ST.CM_TRADE)		AS E1_CM_TRADE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.OP,ETS_2ND.OP),ETS_1ST.OP)					AS E1_OP
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CMPB_OFFICE,ETS_2ND.CMPB_OFFICE),ETS_1ST.CMPB_OFFICE)	AS E1_CMPB_OFFICE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CMPB_TRADE,ETS_2ND.CMPB_TRADE),ETS_1ST.CMPB_TRADE)		AS E1_CMPB_TRADE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.OPB_OFFICE,ETS_2ND.OPB_OFFICE),ETS_1ST.OPB_OFFICE)		AS E1_OPB
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.TOT_WK),ETS_1ST.TOT_WK)				AS E1_TOT_WK
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_CM_OFFICE),ETS_1ST.COST_CM_OFFICE)		AS E1_COST_CM_OFFICE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_CM_TRADE),ETS_1ST.COST_CM_TRADE)			AS E1_COST_CM_TRADE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_OP_OFFICE),ETS_1ST.COST_OP_OFFICE)		AS E1_COST_OP_OFFICE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.G_REV),ETS_1ST.G_REV)					AS E1_G_REV
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,3,2),1)								AS EST_TP
	FROM VW_CONTRACT_KEY CKEY
		, VW_ACTUAL_VALUE AVALUE
		, VW_EST_ACT_1ST_VALUE ETS_1ST
		, VW_EST_ACT_2ND_VALUE ETS_2ND
		, VW_EST_ACT_3RD_VALUE ETS_3RD
	WHERE CKEY.SC_NO = AVALUE.SC_NO(+)
		AND CKEY.SC_NO = ETS_1ST.PRC_CTRT_NO(+)
		AND CKEY.SC_NO = ETS_2ND.PRC_CTRT_NO(+)
		AND CKEY.SC_NO = ETS_3RD.SC_NO(+)
) MN
, PRI_SP_MN M
, PRI_SP_CTRT_PTY C
, PRI_SP_MQC Q
WHERE
	 MN.PROP_NO = M.PROP_NO
	AND MN.AMDT_SEQ = M.AMDT_SEQ
	AND M.PROP_NO = C.PROP_NO 
	AND  M.AMDT_SEQ = C.AMDT_SEQ
	AND M.PROP_NO = Q.PROP_NO (+)
	AND  M.AMDT_SEQ = Q.AMDT_SEQ(+)
	AND C.PRC_CTRT_PTY_TP_CD = 'C'
#if (${code_tp_cd} == 'A') 
	AND M.PROP_OFC_CD IN 
#elseif (${code_tp_cd} == 'B') 
	AND C.CUST_CNT_CD || TO_CHAR(C.CUST_SEQ,'FM000000' ) IN
#elseif (${code_tp_cd} == 'C') 
	AND M.RESPB_SREP_CD IN 
#else 
	AND MN.A_SC_NO IN 
#end
	 ( 
				#foreach( ${key} in ${target_list}) 
					#if($velocityCount != 1 ) 
							,
					#end
						'$key'
				#end 
			
	  )

UNION ALL

-- RFA
SELECT  A_SC_NO                   
	, E1_SC_NO                 
	, E2_SC_NO                 
	, E3_SC_NO                       
	, A1_LOAD                       
	, A1_COST_CM_OFFICE     
	, A1_COST_CM_TRADE      
	, A1_COST_OP_OFFICE     
	, A1_CMPB_OFFICE        
	, A1_CMPB_TRADE         
	, A1_CM_OFFICE          
	, A1_CM_TRADE           
	, A1_OPB                 
	, A1_OP                  
	, A1_G_REV               
	, A1_WEEK_CNT           
	, E1_LOAD           
	, E1_CM_OFFICE      
	, E1_CM_TRADE       
	, E1_OP             
	, E1_CMPB_OFFICE    
	, E1_CMPB_TRADE     
	, E1_OPB    
	, E1_TOT_WK         
	, E1_COST_CM_OFFICE 
	, E1_COST_CM_TRADE  
	, E1_COST_OP_OFFICE 
	, E1_G_REV          
	, EST_TP
	, A1_LOAD + E1_LOAD AS SUM_LOAD
	, A1_G_REV + E1_G_REV AS SUM_GREV
	, A1_COST_CM_OFFICE + E1_COST_CM_OFFICE AS SUM_COST_CM_OFFICE
	, A1_COST_CM_TRADE + E1_COST_CM_TRADE AS SUM_COST_CM_TRADE
	, A1_COST_OP_OFFICE + E1_COST_OP_OFFICE AS SUM_COST_OP_OFFICE
	, A1_WEEK_CNT + E1_TOT_WK AS SUM_WEEK
	, A1_CM_OFFICE + E1_CM_OFFICE AS SUM_CM_OFFICE
	, A1_CM_TRADE + E1_CM_TRADE AS SUM_CM_TRADE
	, A1_OP + E1_OP AS SUM_OP
	, (A1_CMPB_OFFICE	- E1_CMPB_OFFICE	) / DECODE(E1_CMPB_OFFICE, 0,	TO_NUMBER(NULL)	, ABS(E1_CMPB_OFFICE)) * 100 AS DIFF_CMPB_OFFICE
	, (A1_CMPB_TRADE	- E1_CMPB_TRADE		) / DECODE(E1_CMPB_TRADE, 0,	TO_NUMBER(NULL)		, ABS(E1_CMPB_TRADE)) * 100 AS DIFF_CMPB_TRADE
	, (A1_OPB		- E1_OPB		) / DECODE(E1_OPB, 0,		TO_NUMBER(NULL)			, ABS(E1_OPB)) * 100  AS DIFF_OPB
        , M.CTRT_CUST_CNT_CD || TO_CHAR(M.CTRT_CUST_SEQ,'FM000000') || ' - ' || CUST.CUST_LGL_ENG_NM AS CUST_NM
        , M.PROP_OFC_CD
	, (
			CASE WHEN M.CNTR_LOD_UT_CD = 'F' AND @[frm_pfmc_unit] = 'TEU' THEN
			M.TGT_MVC_QTY * 2
			WHEN M.CNTR_LOD_UT_CD = 'T' AND @[frm_pfmc_unit] = 'FEU' THEN
			M.TGT_MVC_QTY /2
			ELSE M.TGT_MVC_QTY
			END
	)  AS MQC_QTY
	, 'RFA' AS CONTRACT_NM
FROM (
	SELECT /*+USE_HASH(CKEY,AVALUE,ETS_1ST,ETS_2ND,ETS_3RD)*/ CKEY.RFA_NO
		, CKEY.PROP_NO
		, CKEY.AMDT_SEQ
		, CKEY.RFA_NO AS A_SC_NO
		, ETS_1ST.PRC_CTRT_NO AS E1_SC_NO
		, ETS_2ND.PRC_CTRT_NO AS E2_SC_NO
		, ETS_3RD.RFA_NO AS E3_SC_NO
		, AVALUE.LOAD	 AS A1_LOAD
		, AVALUE.COST_CM_OFFICE	 AS A1_COST_CM_OFFICE
		, AVALUE.COST_CM_TRADE	 AS A1_COST_CM_TRADE
		, AVALUE.COST_OP_OFFICE	 AS A1_COST_OP_OFFICE
		, AVALUE.CMPB_OFFICE	 AS A1_CMPB_OFFICE
		, AVALUE.CMPB_TRADE	 AS A1_CMPB_TRADE
		, AVALUE.CM_OFFICE	 AS A1_CM_OFFICE
		, AVALUE.CM_TRADE	 AS A1_CM_TRADE
		, AVALUE.OPB		AS A1_OPB
		, AVALUE.OP		AS A1_OP
		, AVALUE.G_REV		AS A1_G_REV
		, AVALUE.WEEK_CNT	 AS A1_WEEK_CNT
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.LOAD,ETS_2ND.LOAD),ETS_1ST.LOAD)				AS E1_LOAD
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CM_OFFICE,ETS_2ND.CM_OFFICE),ETS_1ST.CM_OFFICE)		AS E1_CM_OFFICE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CM_TRADE,ETS_2ND.CM_TRADE),ETS_1ST.CM_TRADE)		AS E1_CM_TRADE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.OP,ETS_2ND.OP),ETS_1ST.OP)					AS E1_OP
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CMPB_OFFICE,ETS_2ND.CMPB_OFFICE),ETS_1ST.CMPB_OFFICE)	AS E1_CMPB_OFFICE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.CMPB_TRADE,ETS_2ND.CMPB_TRADE),ETS_1ST.CMPB_TRADE)		AS E1_CMPB_TRADE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,ETS_3RD.OPB_OFFICE,ETS_2ND.OPB_OFFICE),ETS_1ST.OPB_OFFICE)		AS E1_OPB
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.TOT_WK),ETS_1ST.TOT_WK)				AS E1_TOT_WK
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_CM_OFFICE),ETS_1ST.COST_CM_OFFICE)		AS E1_COST_CM_OFFICE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_CM_TRADE),ETS_1ST.COST_CM_TRADE)			AS E1_COST_CM_TRADE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.COST_OP_OFFICE),ETS_1ST.COST_OP_OFFICE)		AS E1_COST_OP_OFFICE
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,NULL,ETS_2ND.G_REV),ETS_1ST.G_REV)					AS E1_G_REV
		, DECODE(ETS_1ST.PRC_CTRT_NO, NULL, DECODE(ETS_2ND.PRC_CTRT_NO,NULL,3,2),1)								AS EST_TP
	FROM VW_RFA_CONTRACT_KEY CKEY
		, VW_RFA_ACTUAL_VALUE AVALUE
		, VW_RFA_EST_ACT_1ST_VALUE ETS_1ST
		, VW_RFA_EST_ACT_2ND_VALUE ETS_2ND
		, VW_RFA_EST_ACT_3RD_VALUE ETS_3RD
	WHERE CKEY.RFA_NO = AVALUE.RFA_NO(+)
		AND CKEY.RFA_NO = ETS_1ST.PRC_CTRT_NO(+)
		AND CKEY.RFA_NO = ETS_2ND.PRC_CTRT_NO(+)
		AND CKEY.RFA_NO = ETS_3RD.RFA_NO(+)
) MN
, PRI_RP_MN M
, MDM_CUSTOMER CUST
WHERE
	 MN.PROP_NO = M.PROP_NO
	AND MN.AMDT_SEQ = M.AMDT_SEQ
        AND CUST.CUST_CNT_CD = M.CTRT_CUST_CNT_CD
        AND CUST.CUST_SEQ = M.CTRT_CUST_SEQ
#if (${code_tp_cd} == 'A') 
	AND M.PROP_OFC_CD IN 
#elseif (${code_tp_cd} == 'B') 
	AND  M.CTRT_CUST_CNT_CD || TO_CHAR(M.CTRT_CUST_SEQ,'FM000000' ) IN
#elseif (${code_tp_cd} == 'C') 
	AND M.RESPB_SREP_CD IN 
#else 
	AND MN.A_SC_NO IN 
#end
	 ( 
				#foreach( ${key} in ${target_list}) 
					#if($velocityCount != 1 ) 
							,
					#end
						'$key'
				#end 
			
	  )

ORDER BY CONTRACT_NM DESC ,
#if (${code_tp_cd} == 'A') 
	PROP_OFC_CD
#elseif (${code_tp_cd} == 'B') 
	CUST_NM
#elseif (${code_tp_cd} == 'C') 
	RESPB_SREP_CD
#else 
	A_SC_NO
#end			]]></sql>
			<params>
				<param name="frm_ctrt_eff_yr" type="12" value="" out="N"/>
				<param name="frm_ctrt_eff_wk" type="12" value="" out="N"/>
				<param name="frm_ctrt_exp_yr" type="12" value="" out="N"/>
				<param name="frm_ctrt_exp_wk" type="12" value="" out="N"/>
				<param name="frm_smr_eff_yr" type="12" value="" out="N"/>
				<param name="frm_smr_eff_wk" type="12" value="" out="N"/>
				<param name="frm_smr_exp_yr" type="12" value="" out="N"/>
				<param name="frm_smr_exp_wk" type="12" value="" out="N"/>
				<param name="frm_rfrc_eff_yr" type="12" value="" out="N"/>
				<param name="frm_rfrc_eff_wk" type="12" value="" out="N"/>
				<param name="frm_rfrc_exp_yr" type="12" value="" out="N"/>
				<param name="frm_rfrc_exp_wk" type="12" value="" out="N"/>
				<param name="frm_trd_cd" type="12" value="" out="N"/>
				<param name="frm_dir_cd" type="12" value="" out="N"/>
				<param name="frm_sub_trd_cd" type="12" value="" out="N"/>
				<param name="frm_prop_ofc_cd" type="12" value="" out="N"/>
				<param name="frm_prop_srep_cd" type="12" value="" out="N"/>
				<param name="frm_prop_apro_ofc_cd" type="12" value="" out="N"/>
				<param name="frm_pfmc_unit" type="12" value="" out="N"/>
				<param name="frm_ori_rout_cd" type="12" value="" out="N"/>
				<param name="frm_dest_rout_cd" type="12" value="" out="N"/>
				<param name="frm_ori_loc_tp" type="12" value="" out="N"/>
				<param name="frm_dest_loc_tp" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
