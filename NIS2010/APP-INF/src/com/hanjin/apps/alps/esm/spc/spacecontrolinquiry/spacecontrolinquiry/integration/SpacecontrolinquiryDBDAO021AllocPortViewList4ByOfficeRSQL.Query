<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="SpacecontrolinquiryDBDAO021AllocPortViewList4ByOfficeRSQL">
			<desc><![CDATA[Daily Forecast Status 화면 내 BKG Status(RHQ) 탭 조회- Office View
2012.12.03 [CHM-201221639] 김시몬 R9와 동일하게 R8이 적용될 수 있도록 쿼리수정
2013.01.15 [CHM-201322502-01] SPC 프로젝트 - 성수기 선복운영 개선을 위한 T/F추진
2013.02.22 김시몬[CHM-201323235-01] 제목 : WAX 노선 Dest. 반영 건
작업 내용 : WAX 노선은 Dest. 를 AU 로 집계되도록 보완, WAXIA 의 경우 Direction 변경(E=> W, W=> E)
2013.06.13 진마리아 SELCDO 팀코드 변경 (SELCTY)
2013.09.05 진마리아 [CHM-201326612] AAZ Direction Conversion
2013.11.26 진마리아 [CHM-201326854] SAQ project로 인한 SPC 변경건_FNC 우선제거
2014.01.13 김시몬 [선처리] SELSC/TYOSC RHQ변경에 따른 SQM SPC_OFC_LVL추가
2014.01.23 김시몬 [선처리] '09014001','ISTEM' 로 ofc변경 처리
2014.03.25 김시몬 [선처리] SQM 분기구하는 로직 관련 보완
2014.12.16 박은주 [CHM-201433153] Daily FCST status 리포트 보완 요청(겹선) 
2015.03.03 박은주 CHM-201534458 SQM QTA주가 변경 관련 적용 요청
2015.06.17 이진서 CHM-201536450 BKG Status(RHQ) tab - Yard seq 실시간 인지 (POL/POD) 보완 조치
2015.08.07 Arie  MVMT 'EN' 기능 추가
2015.09.16 이혜민 선반영 SPC_CONTI_CONV_FNC 태울때 SLAN_CD를 인자로 가져가던것 RLANE_CD로 수정 (RLANE_CD로 가져가야 제대로 펑션을 탐)
2016.05.27 이혜민 SELSC, TYOSC RHQ 독립분리]]></desc>
			<sql><![CDATA[
WITH MAS_MON_VVD_LV AS(
    SELECT B.TRD_CD    ,
           B.SUB_TRD_CD,
           B.RLANE_CD  ,
           B.DIR_CD    ,
           B.IOC_CD    ,
           B.COST_YR   ,
           B.COST_MON  ,
           B.NUM       ,
           DENSE_RANK() OVER(PARTITION BY B.TRD_CD, B.RLANE_CD, B.DIR_CD, B.NUM ORDER BY B.DIR_CD, B.PORT_ETD) NUM_1,
           B.COST_WK   ,
           B.VSL_CD    ,
           B.SKD_VOY_NO,
           B.SKD_DIR_CD,
           B.RHQ_CD    ,
           B.AQ_CD     ,
           B.RGN_OFC_CD,
           (
             SELECT DECODE(O.OFC_TP_CD, 'QT', O.PRNT_OFC_CD, DECODE(@[ofc_cd], 'ATLSA', 'NYCRA', 'SLSSC', 'NYCRA', 'PHXSA', 'NYCRA', O.OFC_CD))  -- Login Office
               FROM SPC_OFC_LVL O  ,
                    COM_USER    COM
              WHERE COM.USR_ID = @[login_id]  -- Login ID
                AND B.COST_YR || B.COST_WK BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK
                AND O.OFC_CD = SPC_SCR_OFC_CONV_FNC(DECODE(@[login_id], '09012001', 'ISTEM','09014001','ISTEM', COM.OFC_CD), @[ui_name])   -- UI Name
           ) AS OFC_CD,
           B.POL_CD         ,
           B.BSA            ,
           B.LOD_SPL_CNG_FLG,
           B.PAST           ,
           B.PORT_DIV,
		   B.BSE_QTR_CD,
		   B.BSE_YR
      FROM (
              SELECT M.TRD_CD    ,
                     M.SUB_TRD_CD,
                     M.RLANE_CD  ,
                     M.DIR_CD    ,
                     M.IOC_CD    ,
                     SUBSTR(M.SLS_YRMON, 1, 4) AS COST_YR ,
                     SUBSTR(M.SLS_YRMON, 5)    AS COST_MON,
                     P.RNUM NUM       ,
                     M.COST_WK        ,
                     DECODE(@[trade], 'IAS', L.LOD_SPL_CNG_FLG, 'Y') AS LOD_SPL_CNG_FLG,
                     M.VSL_CD         ,
                     M.SKD_VOY_NO     ,
                     M.DIR_CD               AS SKD_DIR_CD,
                     C.RHQ_CD               AS RHQ_CD    ,
                     @[area]                AS AQ_CD     ,
                     @[sales_office]        AS RGN_OFC_CD,
                     @[pol_cd]              AS POL_CD    ,
                     @[port_div]            AS PORT_DIV  ,  -- Port Div(POL/POD/DEL)
--                     NVL(B.CRR_BSA_CAPA, 0) AS BSA       ,
                     SPC_GET_WK_VVD_BSA_FNC('VOL' ,M.TRD_CD,M.RLANE_CD,M.DIR_CD,SUBSTR(M.SLS_YRMON, 1, 4)||M.COST_WK,M.VSL_CD||M.SKD_VOY_NO||M.DIR_CD) AS BSA,
                     DECODE(SIGN(SUBSTR(M.SLS_YRMON, 1, 4)||M.COST_WK - ( SELECT PRD.COST_YR||TO_CHAR(CEIL((TO_CHAR(SYSDATE, 'DDD') + 7 - TO_CHAR(TO_DATE(PRD.SLS_TO_DT, 'YYYYMMDD'), 'DDD')) / 7), 'FM00')
                                                                            FROM MAS_WK_PRD PRD
                                                                           WHERE PRD.COST_YR = TO_CHAR(SYSDATE, 'YYYY')
                                                                             AND PRD.COST_WK = '01')), -1, 'Y', 'N') AS PAST
                    ,TO_CHAR(M.LST_LODG_PORT_ETD_DT,'YYYYMMDD') AS PORT_ETD
					, CASE WHEN M.COST_YRMON >= '201501' 
                           THEN CEIL(TO_NUMBER(SUBSTR(M.COST_YRMON, -2))/3)||'Q' 
                           ELSE CEIL(TO_NUMBER(DECODE(M.COST_WK,'00','01','53','52',M.COST_WK))/13)||'Q'
                      END BSE_QTR_CD --2015.03.04 CHM-201534435 SQM QTA주가 변경 관련 적용 요청  
                   , SUBSTR(M.COST_YRMON, 1,4) AS BSE_YR
                FROM MAS_MON_VVD     M,
                     MAS_LANE_RGST   L,
                     (
                        SELECT /*+ INDEX (P, XPKMAS_WK_PRD) */
                               P.COST_YR||P.COST_WK AS COST_YRWK,
                               ROWNUM               AS RNUM
                          FROM MAS_WK_PRD P
                         WHERE P.COST_YR||P.COST_WK >= @[year]||@[week]     -- Year / Week
                           AND ROWNUM               <= @[duration]          -- Duration
                     ) P,
                     (
                        SELECT DISTINCT
                               SUBSTR(AA,
                                INSTR(AA,',',1,LEVEL)+1,
                                  INSTR(AA,',',1,LEVEL+1) - INSTR(AA,',',1,LEVEL)
                                    -1
                               ) RHQ_CD
                          FROM (SELECT ','||@[rhq2]||',' AA FROM DUAL)      -- RHQ
                    CONNECT BY LEVEL <= LENGTH(AA) - LENGTH(REPLACE(AA,','))-1
                     ) C
               WHERE SUBSTR(M.SLS_YRMON, 1, 4)||M.COST_WK = P.COST_YRWK
                 AND (M.DELT_FLG IS NULL OR M.DELT_FLG = 'N')
       
#if (${trade} != '')
                 AND M.TRD_CD     = @[trade]
#end

#if (${subtrade1} != '')
                 AND M.SUB_TRD_CD = @[subtrade1]
#end

#if (${bound} != '')
                 AND M.DIR_CD = (CASE 
									WHEN M.RLANE_CD IN ('AUSIA', 'CKAIA', 'WAXIA', 'AAZIA', 'QISIA', 'RUSIA', 'FOXIA') THEN
											DECODE(@[bound], 'E', 'W', 'W', 'E', @[bound])
									ELSE
										@[bound]
								END)
#end
                 
                 AND M.TRD_CD   = L.TRD_CD
                 AND M.RLANE_CD = L.RLANE_CD
                 AND M.DIR_CD   = L.DIR_CD
                 AND M.IOC_CD   = L.IOC_CD
                 AND L.DELT_FLG = 'N'
                 
#if (${rlane1} != '')
                 AND M.RLANE_CD IN ($rlane1)
#end

           ) B
  ORDER BY B.VSL_CD    ,
           B.SKD_VOY_NO,
           B.DIR_CD
)
, QTA_DATA AS (
    SELECT 1 AS FLG    ,
           R.TRD_CD    ,
           R.DIR_CD    ,
           R.SUB_TRD_CD,
           R.RLANE_CD  ,
           NVL(( SELECT T2.CONV_RGN_OFC_CD
                   FROM SPC_RGN_OFC_CONV T2
                  WHERE T2.SLS_RGN_OFC_CD = R.OFC_CD), R.OFC_CD) AS OFC_CD,
           '0000000' AS PORT,
           R.WK             ,
           R.NUM            ,
           R.NUM_1,
           R.VVD            ,
           R.BSA            ,
           R.LOD_SPL_CNG_FLG,
           ROUND(SUM(R.QTA_QTY)) AS QTA_QTY ,
           SUM(R.QTA_GREV)       AS QTA_GREV,
           SUM(R.QTA_CM)         AS QTA_CM  ,
           0 AS ALC_QTY   ,
           0 AS ALC_RF_QTY,
           0 AS ALC_GREV  ,
           0 AS ALC_CM    ,
           0 AS BKG_QTY   ,
           0 AS BKG_20    ,
           0 AS BKG_40    ,
           0 AS BKG_D2    ,
           0 AS BKG_D4    ,
           0 AS BKG_HC    ,
           0 AS BKG_RD    ,
           0 AS BKG_45    ,
           0 AS BKG_53    ,
           0 AS BKG_RF    ,
           0 AS BKG_R2    ,
           0 AS BKG_R5    ,
--           0 AS CM_EN     ,
           0 AS CM_OP     ,
           0 AS CM_OC     ,
           0 AS CM_VL
      FROM (
              SELECT MQ.TRD_CD   ,
                     A.SUB_TRD_CD,
                     MQ.RLANE_CD ,
                     MQ.DIR_CD   ,
                     '0' AS POL_CD   ,
                     MQ.RGN_OFC_CD        AS OFC_CD,
                     A.COST_YR||A.COST_WK AS WK    ,
                     A.NUM,
                     A.NUM_1,
                     MQ.VSL_CD||MQ.SKD_VOY_NO||MQ.SKD_DIR_CD AS VVD,
                     A.BSA            ,
                     A.LOD_SPL_CNG_FLG,
                     (MQ.LOD_QTY) AS QTA_QTY,
                     0 AS QTA_GREV,
                     0 AS QTA_CM
                FROM MAS_MON_VVD_LV   A  ,
                     SQM_CFM_QTA      MQ ,
                     SQM_QTA_RLSE_VER MQR,
                     SPC_OFC_LVL      O
               WHERE 1=1
                 AND A.RHQ_CD = O.N2ND_PRNT_OFC_CD

#if (${area} != '')
                 AND A.AQ_CD = MQ.AQ_CD
#end

#if (${sales_office} != '')
                 AND A.RGN_OFC_CD = NVL(( SELECT O2.CONV_RGN_OFC_CD
                                            FROM SPC_RGN_OFC_CONV O2
                                           WHERE O2.SLS_RGN_OFC_CD = MQ.RGN_OFC_CD), MQ.RGN_OFC_CD)
#end

#if (${pol_cd} != '')
                 AND A.POL_CD = '00000'
#end

                 AND MQ.BSE_YR            = A.BSE_YR
                 --AND MQ.BSE_QTR_CD        = CEIL(TO_NUMBER(DECODE(A.COST_WK,'00','01','53','52',A.COST_WK))/13)||'Q' --CEIL(TO_NUMBER(A.COST_MON)/3)||'Q'
                 -- CHM-201534458 SQM QTA주가 변경 관련 적용 요청
				 AND MQ.BSE_QTR_CD		  = A.BSE_QTR_CD	
                 AND MQR.SQM_VER_STS_CD   = 'R'
                 AND MQR.BSE_TP_CD        = 'Q' -- 분기 20131205추가
                 AND MQR.QTA_RLSE_VER_NO  = MQ.QTA_RLSE_VER_NO
                 AND MQ.BSE_TP_CD         = MQR.BSE_TP_CD -- 분기 20131205추가
                 AND MQR.BSE_YR           = MQ.BSE_YR
                 AND MQR.BSE_QTR_CD       = MQ.BSE_QTR_CD
                 AND MQ.QTA_TGT_CD        = 'D'
                 AND MQ.OFC_VW_CD         = 'L'  --
                 AND MQ.TRD_CD            = A.TRD_CD
                 AND MQ.RLANE_CD          = A.RLANE_CD
                 AND MQ.DIR_CD            = A.SKD_DIR_CD
                 AND MQ.VSL_CD            = A.VSL_CD
                 AND MQ.SKD_VOY_NO        = A.SKD_VOY_NO
                 AND MQ.SKD_DIR_CD        = A.SKD_DIR_CD
                 AND A.COST_YR || A.COST_WK BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK
                 --AND MQ.RGN_OFC_CD        = O.OFC_CD
                 AND NVL(( SELECT O2.CONV_RGN_OFC_CD
                             FROM SPC_RGN_OFC_CONV O2
                            WHERE O2.SLS_RGN_OFC_CD = MQ.RGN_OFC_CD), MQ.RGN_OFC_CD) = O.OFC_CD
           ) R
  GROUP BY R.TRD_CD         ,
           R.DIR_CD         ,
           R.SUB_TRD_CD     ,
           R.RLANE_CD       ,
           R.OFC_CD         ,
           R.WK             ,
           R.NUM            ,
           R.NUM_1,
           R.VVD            ,
           R.BSA            ,
           R.LOD_SPL_CNG_FLG
    HAVING ROUND(SUM(R.QTA_QTY)) > 0
)
, SKD_POL_POD AS(
SELECT
       DISTINCT VSL_CD
     , SKD_VOY_NO
     , SKD_DIR_CD
     , RLANE_CD
     , POL_CD
     , POD_CD
FROM (
    SELECT V.VSL_CD
         , V.SKD_VOY_NO
         , V.SKD_DIR_CD
         , V.RLANE_CD,S1.VPS_PORT_CD
         , NVL(S1.YD_CD, S1.VPS_PORT_CD) AS POL_CD
         , NVL(S2.YD_CD, S2.VPS_PORT_CD) AS POD_CD
         , S1.CLPT_SEQ as PORT_SEQ1 
         , S2.CLPT_SEQ as PORT_SEQ2 
         , MAX(S1.CLPT_SEQ) OVER (PARTITION BY NVL(S1.YD_CD, S1.VPS_PORT_CD), S1.VSL_CD, S1.SKD_VOY_NO, S1.SKD_DIR_CD) AS MAX_SEQ1
      FROM (SELECT DISTINCT RLANE_CD, VSL_CD, SKD_VOY_NO, SKD_DIR_CD FROM MAS_MON_VVD_LV) V
         , VSK_VSL_PORT_SKD S1
         , VSK_VSL_PORT_SKD S2
     WHERE S1.VSL_CD = V.VSL_CD
       AND S1.SKD_VOY_NO = V.SKD_VOY_NO
       AND S1.SKD_DIR_CD = V.SKD_DIR_CD
       AND S1.VSL_CD = S2.VSL_CD
       AND S1.SKD_VOY_NO = S2.SKD_VOY_NO
       AND S1.SKD_DIR_CD = S2.SKD_DIR_CD
       AND S1.CLPT_SEQ < S2.CLPT_SEQ
       ) WHERE 1=1 
       AND (PORT_SEQ1 = MAX_SEQ1 OR PORT_SEQ2 < MAX_SEQ1)
) 
, ALC_DATA AS (
    SELECT 3 AS FLG    ,
           B.TRD_CD    ,
           B.DIR_CD    ,
           B.SUB_TRD_CD,
           B.RLANE_CD  ,
           B.SLS_RGN_OFC_CD AS OFC_CD,
           DECODE(A.PORT_DIV, 'POL', POL_YD_CD, POD_YD_CD) AS PORT,
           A.COST_YR||A.COST_WK AS WK,
           A.NUM,
           A.NUM_1,
           B.VSL_CD||B.SKD_VOY_NO||B.SKD_DIR_CD AS VVD,
           A.BSA            ,
           A.LOD_SPL_CNG_FLG,
           0 AS QTA_QTY     ,
           0 AS QTA_GREV    ,
           0 AS QTA_CM      ,
           SUM(B.ASGN_TTL_QTY) AS ALC_QTY   ,
           SUM(B.ASGN_RF_QTY)  AS ALC_RF_QTY,
           0 AS ALC_GREV,
           0 AS ALC_CM  ,
           0 AS BKG_QTY ,
           0 AS BKG_20  ,
           0 AS BKG_40  ,
           0 AS BKG_D2    ,
           0 AS BKG_D4    ,
           0 AS BKG_HC    ,
           0 AS BKG_RD    ,
           0 AS BKG_45  ,
           0 AS BKG_53  ,
           0 AS BKG_RF  ,
           0 AS BKG_R2  ,
           0 AS BKG_R5  ,
--           0 AS CM_EN   ,
           0 AS CM_OP   ,
           0 AS CM_OC   ,
           0 AS CM_VL  
      FROM MAS_MON_VVD_LV   A,
           SPC_ALOC_POL_POD B,
          -- VSK_VSL_PORT_SKD V
		   SKD_POL_POD V
     WHERE A.TRD_CD     = B.TRD_CD
       AND A.RLANE_CD   = B.RLANE_CD
       AND A.IOC_CD     = B.IOC_CD
       AND A.VSL_CD     = B.VSL_CD
       AND A.SKD_VOY_NO = B.SKD_VOY_NO
       AND A.DIR_CD     = B.SKD_DIR_CD

#if (${rhq2} != '')
       AND ((     A.RHQ_CD = 'SHARC'
              AND EXISTS ( SELECT 1
                             FROM MDM_LOCATION L
                            WHERE SUBSTR(B.POL_YD_CD, 1, 5) = L.LOC_CD
                              AND SPC_CONTI_CONV_FNC(L.CONTI_CD,A.RLANE_CD,A.DIR_CD) = 'A')
                              AND A.RHQ_CD = B.SLS_RHQ_CD) 
              OR A.RHQ_CD = B.SLS_RHQ_CD)
#end

#if (${area} != '')
       AND A.AQ_CD = B.SLS_AQ_CD
#end

#if (${sales_office} != '')
       AND A.RGN_OFC_CD = B.SLS_RGN_OFC_CD
#end

#if (${pol_cd} != '')
       AND A.POL_CD = SUBSTR(B.POL_YD_CD,1,5)
#end

       AND (    (A.OFC_CD IN ('SELCTY', 'SELCDO', 'SINRS', 'CLTCO'))
             OR (B.SLS_RHQ_CD = A.OFC_CD)
             OR (B.SLS_AQ_CD IN ( A.OFC_CD, DECODE(A.OFC_CD, 'SHADPI', 'SHADSA'), DECODE(A.OFC_CD, 'SHADSA', 'SHADPI')))
             OR (B.SLS_RGN_OFC_CD = A.OFC_CD))
       AND B.TS_FLG = 'N'
      -- AND SUBSTR(B.RLANE_CD, 1, 3) = V.SLAN_CD
	   AND B.RLANE_CD = V.RLANE_CD
       AND B.VSL_CD     = V.VSL_CD
       AND B.SKD_VOY_NO = V.SKD_VOY_NO
       AND B.DIR_CD     = V.SKD_DIR_CD
      -- AND B.POD_YD_CD  = V.YD_CD
	   AND DECODE(SUBSTR(B.POL_YD_CD, 6, 2), '00', SUBSTR(B.POL_YD_CD, 1, 5), SUBSTR(B.POL_YD_CD, 1, LENGTH(V.POL_CD))) = DECODE(SUBSTR(B.POL_YD_CD, 6, 2), '00', SUBSTR(V.POL_CD, 1, 5), V.POL_CD)
       AND DECODE(SUBSTR(B.POD_YD_CD, 6, 2), '00', SUBSTR(B.POD_YD_CD, 1, 5), SUBSTR(B.POD_YD_CD, 1, LENGTH(V.POD_CD))) = DECODE(SUBSTR(B.POD_YD_CD, 6, 2), '00', SUBSTR(V.POD_CD, 1, 5), V.POD_CD)
  GROUP BY B.TRD_CD        ,
           B.DIR_CD        ,
           B.SUB_TRD_CD    ,
           B.RLANE_CD      ,
           B.SLS_RGN_OFC_CD,
           DECODE(A.PORT_DIV, 'POL', POL_YD_CD, POD_YD_CD),
           A.COST_YR||A.COST_WK,
           A.NUM,
           A.NUM_1,
           B.VSL_CD||B.SKD_VOY_NO||B.SKD_DIR_CD,
           A.BSA,
           A.LOD_SPL_CNG_FLG
    HAVING SUM(B.ASGN_TTL_QTY) > 0
)
, BKG_DATA AS (
    SELECT 4 AS FLG         ,
           A.TRD_CD         ,
           A.DIR_CD         ,
           A.SUB_TRD_CD     ,
           A.RLANE_CD       ,
           A.OFC_CD         ,
           A.PORT           ,
           A.WK             ,
           A.NUM            ,
           A.NUM_1,
           A.VVD            ,
           A.BSA            ,
           A.LOD_SPL_CNG_FLG,
           0 AS QTA_QTY     ,
           0 AS QTA_GREV    ,
           0 AS QTA_CM      ,
           0 AS ALC_QTY     ,
           0 AS ALC_RF_QTY  ,
           0 AS ALC_GREV    ,
           0 AS ALC_CM      ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   ,   1, 14), 0))) AS BKG_QTY,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   ,  15, 14), 0))) AS BKG_20 ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   ,  29, 14), 0))) AS BKG_40 ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   ,  43, 14), 0))) AS BKG_D2 ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   ,  57, 14), 0))) AS BKG_D4 ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   ,  71, 14), 0))) AS BKG_HC ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   ,  85, 14), 0))) AS BKG_RD ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   ,  99, 14), 0))) AS BKG_45 ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   , 113, 14), 0))) AS BKG_53 ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   , 127, 14), 0))) AS BKG_RF ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   , 141, 14), 0))) AS BKG_R2 ,
           SUM(TO_NUMBER(NVL(SUBSTR(VAL   , 155, 14), 0))) AS BKG_R5 ,
           SUM(TO_NUMBER(NVL(SUBSTR(CM_VAL,   1, 10), 0))) AS CM_OP  ,
           SUM(TO_NUMBER(NVL(SUBSTR(CM_VAL,  11, 10), 0))) AS CM_OC  ,
           SUM(TO_NUMBER(NVL(SUBSTR(CM_VAL,  21, 10), 0))) AS CM_VL
--           SUM(TO_NUMBER(NVL(SUBSTR(CM_VAL,   1, 10), 0))) AS CM_EN  ,
--           SUM(TO_NUMBER(NVL(SUBSTR(CM_VAL,  11, 10), 0))) AS CM_OP  ,
--           SUM(TO_NUMBER(NVL(SUBSTR(CM_VAL,  21, 10), 0))) AS CM_OC  ,
--           SUM(TO_NUMBER(NVL(SUBSTR(CM_VAL,  31, 10), 0))) AS CM_VL
      FROM (
              SELECT 
                   A.TRD_CD    ,
                   A.DIR_CD    ,
                   A.SUB_TRD_CD,
                   A.RLANE_CD  ,
                   O.N4TH_PRNT_OFC_CD AS OFC_CD,
                   DECODE(A.PORT_DIV, 'POL', NVL(BV.POL_YD_CD, B.POL_NOD_CD), 'POD', NVL(BV.POD_YD_CD, B.POD_NOD_CD), B.POD_NOD_CD) AS PORT,
                   A.COST_YR||A.COST_WK AS WK,
                   A.NUM,
                   A.NUM_1,
                   A.VSL_CD||A.SKD_VOY_NO||A.SKD_DIR_CD AS VVD,
                   A.BSA,
                   A.LOD_SPL_CNG_FLG,
                   (
                      SELECT
                                TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', 1, 2) * Q.OP_CNTR_QTY), 'FM0000000000.000')
                             || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')
                             || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '4', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')
                             || TO_CHAR(SUM(DECODE(Q.CNTR_TPSZ_CD, 'D2', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')
                             || TO_CHAR(SUM(DECODE(Q.CNTR_TPSZ_CD, 'D4', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')
                             || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '5', Q.OP_CNTR_QTY, '9', Q.OP_CNTR_QTY, '8', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')	--R9,R8에 대해서 R5과 동일하게 HC으로 처리되도록 추가
                             || TO_CHAR(SUM(CASE WHEN Q.CNTR_TPSZ_CD LIKE 'R%' AND Q.EQ_SUBST_CNTR_TPSZ_CD LIKE 'D%' THEN Q.EQ_SUBST_CGO_QTY ELSE 0 END), 'FM0000000000.000')
                             || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '7', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')
                             || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), 'W', Q.OP_CNTR_QTY, 0) + DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), 'X', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')
                             || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_TP_FNC(Q.CNTR_TPSZ_CD), 'R', Q.OP_CNTR_QTY - Q.EQ_SUBST_CGO_QTY, 0)), 'FM0000000000.000')
                             || TO_CHAR(SUM(DECODE(Q.CNTR_TPSZ_CD, 'R2', Q.OP_CNTR_QTY - Q.EQ_SUBST_CGO_QTY, 0)), 'FM0000000000.000')
                             || TO_CHAR(SUM(CASE
                    							WHEN SUBSTR(Q.CNTR_TPSZ_CD, 1, 1) = 'R' AND Q.CNTR_TPSZ_CD <> 'R2' 
													 THEN Q.OP_CNTR_QTY - Q.EQ_SUBST_CGO_QTY
                    						ELSE 0
                  							END), 'FM0000000000.000')
                        FROM BKG_QUANTITY Q
                       WHERE B.BKG_NO      = Q.BKG_NO
                         AND Q.OP_CNTR_QTY > 0
                   ) AS VAL,
                   SPC_GET_OB_MVMT_FNC(B.BKG_NO, (SELECT DECODE(SIGN(VPS.VPS_ETD_DT - GLOBALDATE_PKG.TIME_CONV_FNC('GMT', SYS_EXTRACT_UTC(SYSTIMESTAMP), VPS.VPS_PORT_CD)), -1, 'Y', 'N')
                                                    FROM VSK_VSL_PORT_SKD VPS
                                                   WHERE VPS.VSL_CD       = B.VSL_CD
                                                     AND VPS.SKD_VOY_NO   = B.SKD_VOY_NO
                                                     AND VPS.SKD_DIR_CD   = B.SKD_DIR_CD
                                                     AND VPS.YD_CD        = NVL(BV.POL_YD_CD, B.POL_NOD_CD)
                                                     AND VPS.CLPT_IND_SEQ = BV.POL_CLPT_IND_SEQ )) AS CM_VAL,
                   A.PAST
              FROM MAS_MON_VVD_LV     A,
                   BKG_BOOKING        B,
                   BKG_VVD            BV,
                   MDM_DTL_REV_LANE   DRL,
                   MDM_REV_LANE       RL,
                   SPC_OFC_LVL        O 
             WHERE B.VSL_CD          = A.VSL_CD
               AND B.SKD_VOY_NO      = A.SKD_VOY_NO
               AND B.SKD_DIR_CD      = A.SKD_DIR_CD
               and B.BKG_STS_CD     IN ('W','F')
               AND B.BKG_CGO_TP_CD  IN ('F', 'B', 'R')
               AND BV.BKG_NO         = B.BKG_NO
               AND BV.VSL_CD         = B.VSL_CD
               AND BV.SKD_VOY_NO     = B.SKD_VOY_NO
               AND BV.SKD_DIR_CD     = B.SKD_DIR_CD 
               AND BV.VSL_PRE_PST_CD = 'T' 

#if (${rhq2} != '' || ${area} != '' || ${sales_office} != '')
               AND (    (A.RHQ_CD = 'SHARC' AND A.AQ_CD IS NULL AND A.RGN_OFC_CD IS NULL) 
                     OR EXISTS ( SELECT O.OFC_CD
                                   FROM SPC_OFC_LVL O
                                  WHERE O.OFC_TP_CD IN ('BB', 'BA', 'BS')
                                    AND SPC_SCR_OFC_CONV_FNC(B.BKG_OFC_CD) = O.OFC_CD
                                    AND A.RHQ_CD = O.N2ND_PRNT_OFC_CD
                                    AND A.COST_YR || A.COST_WK BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK
                             CONNECT BY NOCYCLE O.PRNT_OFC_CD = PRIOR O.OFC_CD
                                     START WITH (A.RGN_OFC_CD IS NULL AND (O.PRNT_OFC_CD = A.AQ_CD OR O.PRNT_OFC_CD = A.RHQ_CD)) OR (O.OFC_CD = A.RGN_OFC_CD)))

#end

#if (${pol_cd} != '')
               AND A.POL_CD = NVL(B.PRE_RLY_PORT_CD, B.POL_CD)
#end
               
               AND DRL.RLANE_CD        = A.RLANE_CD
               AND DRL.VSL_SLAN_DIR_CD = A.DIR_CD
               AND DRL.IOC_CD          = A.IOC_CD
               AND DRL.FM_CONTI_CD     =( SELECT SPC_CONTI_CONV_FNC(L.CONTI_CD, A.RLANE_CD, A.DIR_CD)
                                            FROM MDM_LOCATION L
                                           WHERE L.LOC_CD = NVL(B.PRE_RLY_PORT_CD, B.POL_CD) )
               AND DRL.TO_CONTI_CD     =( SELECT SPC_CONTI_CONV_FNC(L.CONTI_CD, A.RLANE_CD, A.DIR_CD)
                                            FROM MDM_LOCATION L
                                           WHERE L.LOC_CD = NVL(B.PST_RLY_PORT_CD, B.POD_CD) )
               AND (    ((A.RHQ_CD = 'SHARC' AND A.AQ_CD IS NULL AND A.RGN_OFC_CD IS NULL AND  A.RHQ_CD = O.N2ND_PRNT_OFC_CD) AND DRL.FM_CONTI_CD = 'A')
                     OR A.RHQ_CD <> 'SHARC'
                     OR A.AQ_CD      IS NOT NULL
                     OR A.RGN_OFC_CD IS NOT NULL )
               AND DRL.SUB_TRD_CD = A.SUB_TRD_CD
               AND DRL.DELT_FLG   = 'N'
               AND DRL.RLANE_CD   = RL.RLANE_CD
               AND RL.RLANE_CD    = A.RLANE_CD
               AND RL.VSL_SLAN_CD = B.SLAN_CD
               AND RL.VSL_TP_CD   = 'C'
               AND RL.DELT_FLG    = 'N'
               and O.OFC_CD       = SPC_SCR_OFC_CONV_FNC(B.OB_SLS_OFC_CD)
               AND A.COST_YR || A.COST_WK BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK
               AND O.N4TH_PRNT_OFC_CD IS NOT NULL
           ) A
  GROUP BY A.TRD_CD         ,
           A.DIR_CD         ,
           A.SUB_TRD_CD     ,
           A.RLANE_CD       ,
           A.OFC_CD         ,
           A.PORT           ,
           A.WK             ,
           A.NUM            ,
           A.NUM_1,
           A.VVD            ,
           A.BSA            ,
           A.LOD_SPL_CNG_FLG
)
, BASE_DATA AS(
    SELECT TRD_CD
          ,DIR_CD
          ,SUB_TRD_CD
          ,RLANE_CD
          -- BSA 강제로 가져온 경우에는 BSA로 지정
          ,DECODE(Z1.OFC_CD, 'BSA', 'BSA', (  SELECT NVL(O.N3RD_PRNT_OFC_CD, O.N2ND_PRNT_OFC_CD)
                                                FROM SPC_OFC_LVL O
                                               WHERE O.OFC_CD = Z1.OFC_CD
                                                 AND Z1.WK BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK )
           ) AS AQ_CD
          ,OFC_CD
          ,WK
          ,PORT
          ,NUM
#if(${checkVvd5} == 'Y')
          ,DENSE_RANK() OVER(PARTITION BY TRD_CD, RLANE_CD, DIR_CD, NUM ORDER BY NUM_1) NUM_1 -- 누락되는 vvd 들이 존재해서 순번을 다시 만듬
#else
          ,'' AS NUM_1
#end          
          ,VVD
          ,BSA
          ,LOD_SPL_CNG_FLG
          ,QTA_QTY
          ,QTA_GREV
          ,QTA_CM
          ,ALC_QTY
          ,ALC_RF_QTY
          ,ALC_GREV
          ,ALC_CM
          ,BKG_QTY
          ,BKG_20
          ,BKG_40
          ,BKG_D2
          ,BKG_D4
          ,BKG_HC
          ,BKG_RD
          ,BKG_45
          ,BKG_53
          ,BKG_RF
          ,BKG_R2
          ,BKG_R5
--          ,CM_EN
          ,CM_OP
          ,CM_OC
          ,CM_VL
      FROM (
            SELECT TRD_CD         ,
                   DIR_CD         ,
                   SUB_TRD_CD     ,
                   RLANE_CD       ,
                   OFC_CD         ,
                   WK             ,
                   PORT           ,
                   NUM            ,
                   NUM_1,
                   VVD            ,
                   BSA            ,
                   LOD_SPL_CNG_FLG,
                   SUM(QTA_QTY)    AS QTA_QTY   ,
                   SUM(QTA_GREV)   AS QTA_GREV  ,
                   SUM(QTA_CM)     AS QTA_CM    ,
                   SUM(ALC_QTY)    AS ALC_QTY   ,
                   SUM(ALC_RF_QTY) AS ALC_RF_QTY,
                   SUM(ALC_GREV)   AS ALC_GREV  ,
                   SUM(ALC_CM)     AS ALC_CM    ,
                   SUM(BKG_QTY)    AS BKG_QTY   ,
                   SUM(BKG_20)     AS BKG_20    ,
                   SUM(BKG_40)     AS BKG_40    ,
                   SUM(BKG_D2)     AS BKG_D2    ,
                   SUM(BKG_D4)     AS BKG_D4    ,
                   SUM(BKG_HC)     AS BKG_HC    ,
                   SUM(BKG_RD)     AS BKG_RD    ,
                   SUM(BKG_45)     AS BKG_45    ,
                   SUM(BKG_53)     AS BKG_53    ,
                   SUM(BKG_RF)     AS BKG_RF    ,
                   SUM(BKG_R2)     AS BKG_R2    ,
                   SUM(BKG_R5)     AS BKG_R5    ,
--                   SUM(CM_EN)      AS CM_EN     ,
                   SUM(CM_OP)      AS CM_OP     ,
                   SUM(CM_OC)      AS CM_OC     ,
                   SUM(CM_VL)      AS CM_VL
              FROM (
                      SELECT TRD_CD         ,
                             DIR_CD         ,
                             SUB_TRD_CD     ,
                             RLANE_CD       ,
                             OFC_CD         ,
                             PORT           ,
                             WK             ,
                             NUM            ,
                             NUM_1,
                             VVD            ,
                             BSA            ,
                             LOD_SPL_CNG_FLG,
                             QTA_QTY        ,
                             QTA_GREV       ,
                             QTA_CM         ,
                             ALC_QTY        ,
                             ALC_RF_QTY     ,
                             ALC_GREV       ,
                             ALC_CM         ,
                             BKG_QTY        ,
                             BKG_20         ,
                             BKG_40         ,
                             BKG_D2         ,
                             BKG_D4         ,
                             BKG_HC         ,
                             BKG_RD         ,
                             BKG_45         ,
                             BKG_53         ,
                             BKG_RF         ,
                             BKG_R2         ,
                             BKG_R5         ,
--                             CM_EN          ,
                             CM_OP          ,
                             CM_OC          ,
                             CM_VL
                        FROM QTA_DATA
                      UNION ALL
                      SELECT TRD_CD         ,
                             DIR_CD         ,
                             SUB_TRD_CD     ,
                             RLANE_CD       ,
                             OFC_CD         ,
                             PORT           ,
                             WK             ,
                             NUM            ,
                             NUM_1,
                             VVD            ,
                             BSA            ,
                             LOD_SPL_CNG_FLG,
                             QTA_QTY        ,
                             QTA_GREV       ,
                             QTA_CM         ,
                             ALC_QTY        ,
                             ALC_RF_QTY     ,
                             ALC_GREV       ,
                             ALC_CM         ,
                             BKG_QTY        ,
                             BKG_20         ,
                             BKG_40         ,
                             BKG_D2         ,
                             BKG_D4         ,
                             BKG_HC         ,
                             BKG_RD         ,
                             BKG_45         ,
                             BKG_53         ,
                             BKG_RF         ,
                             BKG_R2         ,
                             BKG_R5         ,
--                             CM_EN          ,
                             CM_OP          ,
                             CM_OC          ,
                             CM_VL
                        FROM ALC_DATA
                      UNION ALL
                      SELECT TRD_CD         ,
                             DIR_CD         ,
                             SUB_TRD_CD     ,
                             RLANE_CD       ,
                             OFC_CD         ,
                             PORT           ,
                             WK             ,
                             NUM            ,
                             NUM_1,
                             VVD            ,
                             BSA            ,
                             LOD_SPL_CNG_FLG,
                             QTA_QTY        ,
                             QTA_GREV       ,
                             QTA_CM         ,
                             ALC_QTY        ,
                             ALC_RF_QTY     ,
                             ALC_GREV       ,
                             ALC_CM         ,
                             BKG_QTY        ,
                             BKG_20         ,
                             BKG_40         ,
                             BKG_D2         ,
                             BKG_D4         ,
                             BKG_HC         ,
                             BKG_RD         ,
                             BKG_45         ,
                             BKG_53         ,
                             BKG_RF         ,
                             BKG_R2         ,
                             BKG_R5         ,
--                             CM_EN          ,
                             CM_OP          ,
                             CM_OC          ,
                             CM_VL
                        FROM BKG_DATA
                      -- BSA TO LOAD가 아닌 경우, BSA 정보 무조건 가져오도록 추가
                      UNION ALL
                      SELECT DISTINCT
                             TRD_CD    ,
                             DIR_CD    ,
                             SUB_TRD_CD,
                             RLANE_CD  ,
                             'BSA'            AS OFC_CD,
                             '0000000'        AS PORT  ,
                             COST_YR||COST_WK AS WK    ,
                             NUM            ,
                             NUM_1,
                             VSL_CD||SKD_VOY_NO||SKD_DIR_CD AS VVD,
                             BSA            ,
                             LOD_SPL_CNG_FLG,
                             0 AS QTA_QTY   ,
                             0 AS QTA_GREV  ,
                             0 AS QTA_CM    ,
                             0 AS ALC_QTY   ,
                             0 AS ALC_RF_QTY,
                             0 AS ALC_GREV  ,
                             0 AS ALC_CM    ,
                             0 AS BKG_QTY   ,
                             0 AS BKG_20    ,
                             0 AS BKG_40    ,
                             0 AS BKG_D2    ,
                             0 AS BKG_D4    ,
                             0 AS BKG_HC    ,
                             0 AS BKG_RD    ,
                             0 AS BKG_45    ,
                             0 AS BKG_53    ,
                             0 AS BKG_RF    ,
                             0 AS BKG_R2    ,
                             0 AS BKG_R5    ,
--                             0 AS CM_EN          ,
                             0 AS CM_OP     ,
                             0 AS CM_OC     ,
                             0 AS CM_VL
                        FROM MAS_MON_VVD_LV
                       WHERE LOD_SPL_CNG_FLG = 'N'
                         AND BSA > 0
                   )
          GROUP BY TRD_CD         ,
                   DIR_CD         ,
                   SUB_TRD_CD     ,
                   RLANE_CD       ,
                   OFC_CD         ,
                   PORT           ,
                   WK             ,
                   NUM            ,
                   NUM_1,
                   VVD            ,
                   BSA            ,
                   LOD_SPL_CNG_FLG
            ) Z1
)
, BASE_DATA1 AS (
#if(${is_sha} == 'Y' || ${is_sel} == 'Y' || ${is_tyo} == 'Y')

    SELECT 1 AS BSA_AVG ,
           Z1.TRD_CD    ,
           Z1.SUB_TRD_CD,
           SPC_GET_DEST_FNC(Z1.TRD_CD, Z1.SUB_TRD_CD, Z1.RLANE_CD) AS DEST,
           Z1.RLANE_CD  ,
           Z1.DIR_CD    ,
--           Z1.AQ_CD  ,
           DECODE(Z1.OFC_CD, 'SELSC', 'SELSC', 'TYOSC', 'TYOSC', Z1.AQ_CD) AQ_CD      ,
           Z1.OFC_CD ,
           Z1.PORT   ,
           Z1.NUM_1  ,
#set($primate = 'new_dur')
#if(${duration} == '1')
	#set($new_dur = ['1'])
#elseif(${duration} == '2')
	#set($new_dur = ['1','2'])
#elseif(${duration} == '3')
	#set($new_dur = ['1','2','3'])
#elseif(${duration} == '4')
	#set($new_dur = ['1','2','3','4'])
#elseif(${duration} == '5')
	#set($new_dur = ['1','2','3','4','5'])
#elseif(${duration} == '6')
	#set($new_dur = ['1','2','3','4','5','6'])
#end

#foreach( $key in $new_dur )
           SUM(DECODE(Z1.NUM, ${key}, NVL(Z1.BSA, 0), 0)) AS BSA${key} ,
#if(${checkVvd5} == 'Y')
           MAX(DECODE(Z1.NUM, ${key}, Z1.VVD))            AS VVD${key}1,
#else
           MIN(DECODE(Z1.NUM, ${key}, Z1.VVD))            AS VVD${key}1,
#end            
           MAX(DECODE(Z1.NUM, ${key}, Z1.VVD))            AS VVD${key}2,
           SUM(DECODE(Z1.NUM, ${key}, Z1.QTA_QTY, 0))     AS QTA${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.ALC_QTY, 0))     AS ALC${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.ALC_RF_QTY, 0))  AS ALC_RF${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_QTY, 0))     AS BKG${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_20, 0))      AS BKG_20${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_40, 0))      AS BKG_40${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_D2, 0))      AS BKG_D2${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_D4, 0))      AS BKG_D4${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_HC, 0))      AS BKG_HC${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_RD, 0))      AS BKG_RD${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_45, 0))      AS BKG_45${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_53, 0))      AS BKG_53${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_RF, 0))      AS BKG_RF${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_R2, 0))      AS BKG_R2${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_R5, 0))      AS BKG_R5${key}1,
--           SUM(DECODE(Z1.NUM, ${key}, Z1.CM_EN, 0))       AS CM_EN${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.CM_OP, 0))       AS CM_OP${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.CM_OC, 0))       AS CM_OC${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.CM_VL, 0))       AS CM_VL${key}1,
#end
           ''
      FROM BASE_DATA Z1
      WHERE 1=1
#if(${area} != '' && ${area} != 'null')
	  AND Z1.AQ_CD = @[area]
#end

#if(${is_sha} == 'Y')
#if(${is_sel} == 'Y' && ${is_tyo} == 'N')
      AND Z1.OFC_CD <> 'TYOSC'
#elseif(${is_sel} == 'N' && ${is_tyo} == 'Y')
      AND Z1.OFC_CD <> 'SELSC'
#elseif(${is_sel} == 'N' && ${is_tyo} == 'N')
      AND Z1.OFC_CD <> 'SELSC' AND Z1.OFC_CD <> 'TYOSC'
#end	

#elseif(${is_sha} == 'N')
#if(${is_sel} == 'Y' && ${is_tyo} == 'N')
      AND Z1.OFC_CD = 'SELSC'
#elseif(${is_sel} == 'N' && ${is_tyo} == 'Y')
      AND Z1.OFC_CD = 'TYOSC'
#elseif(${is_sel} == 'Y' && ${is_tyo} == 'Y')
      AND Z1.OFC_CD = 'SELSC' OR Z1.OFC_CD = 'TYOSC'
#end
#end
  GROUP BY Z1.TRD_CD    ,
           Z1.SUB_TRD_CD,
           SPC_GET_DEST_FNC(Z1.TRD_CD, Z1.SUB_TRD_CD, Z1.RLANE_CD),
           Z1.RLANE_CD  ,
           Z1.DIR_CD    ,
           DECODE(Z1.OFC_CD, 'SELSC', 'SELSC', 'TYOSC', 'TYOSC', Z1.AQ_CD)    ,
           Z1.OFC_CD    ,
           Z1.PORT      ,
           Z1.NUM_1
#end
#if(( ${is_sha} == 'N' && ${is_sel} == 'Y' ) || ( ${is_sha} == 'N' && ${is_tyo} == 'Y' ))
 UNION ALL
#end
#if(${is_sha} == 'N')
    SELECT 1 AS BSA_AVG ,
           Z1.TRD_CD    ,
           Z1.SUB_TRD_CD,
           SPC_GET_DEST_FNC(Z1.TRD_CD, Z1.SUB_TRD_CD, Z1.RLANE_CD) AS DEST,
           Z1.RLANE_CD  ,
           Z1.DIR_CD    ,
--           Z1.AQ_CD  ,
           DECODE(Z1.OFC_CD, 'SELSC', 'SELSC', 'TYOSC', 'TYOSC', Z1.AQ_CD) AQ_CD      ,
           Z1.OFC_CD ,
           Z1.PORT   ,
           Z1.NUM_1  ,
#set($primate = 'new_dur')
#if(${duration} == '1')
	#set($new_dur = ['1'])
#elseif(${duration} == '2')
	#set($new_dur = ['1','2'])
#elseif(${duration} == '3')
	#set($new_dur = ['1','2','3'])
#elseif(${duration} == '4')
	#set($new_dur = ['1','2','3','4'])
#elseif(${duration} == '5')
	#set($new_dur = ['1','2','3','4','5'])
#elseif(${duration} == '6')
	#set($new_dur = ['1','2','3','4','5','6'])
#end

#foreach( $key in $new_dur )
           SUM(DECODE(Z1.NUM, ${key}, NVL(Z1.BSA, 0), 0)) AS BSA${key} ,
#if(${checkVvd5} == 'Y')
           MAX(DECODE(Z1.NUM, ${key}, Z1.VVD))            AS VVD${key}1,
#else
           MIN(DECODE(Z1.NUM, ${key}, Z1.VVD))            AS VVD${key}1,
#end            
           MAX(DECODE(Z1.NUM, ${key}, Z1.VVD))            AS VVD${key}2,
           SUM(DECODE(Z1.NUM, ${key}, Z1.QTA_QTY, 0))     AS QTA${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.ALC_QTY, 0))     AS ALC${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.ALC_RF_QTY, 0))  AS ALC_RF${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_QTY, 0))     AS BKG${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_20, 0))      AS BKG_20${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_40, 0))      AS BKG_40${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_D2, 0))      AS BKG_D2${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_D4, 0))      AS BKG_D4${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_HC, 0))      AS BKG_HC${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_RD, 0))      AS BKG_RD${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_45, 0))      AS BKG_45${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_53, 0))      AS BKG_53${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_RF, 0))      AS BKG_RF${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_R2, 0))      AS BKG_R2${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.BKG_R5, 0))      AS BKG_R5${key}1,
--           SUM(DECODE(Z1.NUM, ${key}, Z1.CM_EN, 0))       AS CM_EN${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.CM_OP, 0))       AS CM_OP${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.CM_OC, 0))       AS CM_OC${key}1,
           SUM(DECODE(Z1.NUM, ${key}, Z1.CM_VL, 0))       AS CM_VL${key}1,
#end
           ''
      FROM BASE_DATA Z1
      WHERE 1=1
      AND Z1.AQ_CD <> 'SHARC' AND Z1.AQ_CD <> 'SZPDC'
#if(${area} != '' && ${area} != 'null')
	  AND Z1.AQ_CD = @[area]
#end

  GROUP BY Z1.TRD_CD    ,
           Z1.SUB_TRD_CD,
           SPC_GET_DEST_FNC(Z1.TRD_CD, Z1.SUB_TRD_CD, Z1.RLANE_CD),
           Z1.RLANE_CD  ,
           Z1.DIR_CD    ,
           DECODE(Z1.OFC_CD, 'SELSC', 'SELSC', 'TYOSC', 'TYOSC', Z1.AQ_CD)    ,
           Z1.OFC_CD    ,
           Z1.PORT      ,
           Z1.NUM_1
#end
)
  SELECT Z4.BSA_AVG   ,                   
         Z4.TRD_CD    ,
         Z4.SUB_TRD_CD,
         Z4.RLANE_CD  ,
         Z4.DIR_CD    ,
         Z4.AQ_CD     ,
         Z4.OFC_CD    ,
         Z4.PORT1     ,
         Z4.CNT       ,
#foreach( $key in $new_dur )
         Z4.VVD${key}   ,
         Z4.BSA${key}   ,
         Z4.QTA${key}1,
         Z4.ALC${key}1,
         Z4.ALC_RF${key}1,
         Z4.BKG${key}1, 
         Z4.BKG_20${key}1,
         Z4.BKG_40${key}1,
         Z4.BKG_D2${key}1,
         Z4.BKG_D4${key}1,
         Z4.BKG_HC${key}1,
         Z4.BKG_RD${key}1,
         Z4.BKG_45${key}1,
         Z4.BKG_53${key}1,
         Z4.BKG_RF${key}1,
         Z4.BKG_R2${key}1,
         Z4.BKG_R5${key}1,
--         Z4.CM_EN${key}1,
         Z4.CM_OP${key}1,
         Z4.CM_OC${key}1,
         Z4.CM_VL${key}1,
         Z4.PREF${key}1,
         Z4.PREF_RF${key}1,
#end
         '' AS T
    FROM (
            SELECT Z3.BSA_AVG      ,
                   Z3.TRD_CD       ,
                   Z3.SUB_TRD_CD   ,
                   Z3.RLANE_CD     ,
                   Z3.DIR_CD       ,
                   Z3.AQ_CD        ,
                   Z3.OFC_CD       ,
                   Z3.PORT AS PORT1,
                   CASE 
                        WHEN RLANE_CD <> 'TOTAL' AND DIR_CD <> 'TOTAL' AND AQ_CD = '+' THEN CNT + CNT0
                                                                                       ELSE CNT
                   END AS CNT,
                   NUM_1,
#foreach( $key in $new_dur )
                   Z3.VVD${key},
                   Z3.BSA${key},
                   Z3.QTA${key}1,
                   Z3.ALC${key}1,
                   Z3.ALC_RF${key}1,
                   Z3.BKG${key}1, 
                   Z3.BKG_20${key}1,
                   Z3.BKG_40${key}1,
                   Z3.BKG_D2${key}1,
                   Z3.BKG_D4${key}1,
                   Z3.BKG_HC${key}1,
                   Z3.BKG_RD${key}1,
                   Z3.BKG_45${key}1,
                   Z3.BKG_53${key}1,
                   Z3.BKG_RF${key}1,
                   Z3.BKG_R2${key}1,
                   Z3.BKG_R5${key}1,
--                   Z3.CM_EN${key}1,
                   Z3.CM_OP${key}1,
                   Z3.CM_OC${key}1,
                   Z3.CM_VL${key}1,
                   ROUND(DECODE(Z3.ALC${key}1, 0, 0, Z3.BKG${key}1 * 100 / Z3.ALC${key}1), 1)||'%' AS PREF${key}1,
                   ROUND(DECODE(Z3.ALC_RF${key}1, 0, 0, Z3.BKG_RF${key}1 * 100 / Z3.ALC_RF${key}1), 1)||'%' AS PREF_RF${key}1,
#end
                   '' AS T
              FROM (
                      SELECT NVL(( SELECT SUM(BSA) / COUNT(1) AS BSA
                                     FROM MAS_MON_VVD_LV L
                                    WHERE L.SUB_TRD_CD = Z2.SUB_TRD_CD
                                      AND L.RLANE_CD   = Z2.RLANE_CD
                                ), 0) AS BSA_AVG,
                             NVL(Z2.TRD_CD    , 'TOTAL') AS TRD_CD    ,
                             NVL(Z2.SUB_TRD_CD, 'TOTAL') AS SUB_TRD_CD,
                             NVL(Z2.RLANE_CD  , 'TOTAL') AS RLANE_CD  ,
                             NVL(Z2.DIR_CD    , 'TOTAL') AS DIR_CD    ,
                             NVL(Z2.AQ_CD     , '+')     AS AQ_CD     ,
                             NVL(Z2.OFC_CD    , '+')     AS OFC_CD    ,
                             NVL(Z2.PORT      , '+')     AS PORT      ,
#if(${checkVvd5} == 'Y')
                             Z2.NUM_1 ,
#else
                             '' NUM_1,
#end                             
#foreach( $key in $new_dur )
                             MAX(Z2.BSA${key})             AS BSA${key},
                             MAX(DECODE((NVL(Z2.VVD${key}1, ' ')), (NVL(Z2.VVD${key}2, ' ')), Z2.VVD${key}1, Z2.VVD${key}2||'/'||Z2.VVD${key}1)) AS VVD${key},
                             SUM(Z2.QTA${key}1)          AS QTA${key}1,
                             SUM(Z2.ALC${key}1)          AS ALC${key}1,
                             SUM(Z2.ALC_RF${key}1)       AS ALC_RF${key}1,
                             SUM(Z2.BKG${key}1)          AS BKG${key}1,
                             SUM(BKG_20${key}1)          AS BKG_20${key}1,
                             SUM(BKG_40${key}1)          AS BKG_40${key}1,
                             SUM(BKG_D2${key}1)          AS BKG_D2${key}1,
                             SUM(BKG_D4${key}1)          AS BKG_D4${key}1,
                             SUM(BKG_HC${key}1)          AS BKG_HC${key}1,
                             SUM(BKG_RD${key}1)          AS BKG_RD${key}1,
                             SUM(BKG_45${key}1)          AS BKG_45${key}1,
                             SUM(BKG_53${key}1)          AS BKG_53${key}1,
                             SUM(BKG_RF${key}1)          AS BKG_RF${key}1,
                             SUM(BKG_R2${key}1)          AS BKG_R2${key}1,
                             SUM(BKG_R5${key}1)          AS BKG_R5${key}1,
--                             SUM(CM_EN${key}1)           AS CM_EN${key}1,
                             SUM(CM_OP${key}1)           AS CM_OP${key}1,
                             SUM(CM_OC${key}1)           AS CM_OC${key}1,
                             SUM(CM_VL${key}1)           AS CM_VL${key}1,
#end
                             CASE
                                  WHEN Z2.AQ_CD IS NULL OR (Z2.DIR_CD IS NOT NULL AND Z2.OFC_CD IS NOT NULL AND Z2.PORT IS NOT NULL) THEN COUNT(1) * CASE
                                                                                                                                                          WHEN Z2.OFC_CD IS NOT NULL OR (Z2.RLANE_CD IS NULL AND Z2.DIR_CD IS NOT NULL) THEN -1
                                                                                                                                                                                                                                        ELSE 1
                                                                                                                                                      END
                                                                                                                                     ELSE 0
                              END AS CNT,
                             --PORT가 '0000000' 인 Count
                             SUM(DECODE(Z2.PORT, '0000000', -1, 0)) AS CNT0
                        FROM BASE_DATA1 Z2
                    GROUP BY
#if (${subtrade1} == '')
                             Z2.TRD_CD,
                             CUBE(Z2.SUB_TRD_CD, Z2.RLANE_CD, Z2.DIR_CD, Z2.AQ_CD, Z2.OFC_CD, Z2.PORT 
#else
                             Z2.TRD_CD,
                             Z2.SUB_TRD_CD,
                             CUBE(Z2.RLANE_CD, Z2.DIR_CD, Z2.AQ_CD, Z2.OFC_CD, Z2.PORT 
#end
#if(${checkVvd5} == 'Y')
                                  ,Z2.NUM_1
#end
                                 )
                     HAVING     (NOT (AQ_CD IS NULL AND OFC_CD IS NOT NULL))
                            AND (NOT (RLANE_CD IS NOT NULL AND DIR_CD IS NULL))
                            AND (NOT (SUB_TRD_CD IS NOT NULL AND RLANE_CD IS NULL AND DIR_CD IS NOT NULL AND AQ_CD IS NOT NULL))
                            AND (NOT (SUB_TRD_CD IS NULL AND RLANE_CD IS NOT NULL))
                            AND (NOT (SUB_TRD_CD IS NULL AND RLANE_CD IS NULL AND DIR_CD IS NOT NULL AND AQ_CD IS NOT NULL))
                            AND (NOT NVL(PORT, 'X') = '0000000')
                            AND (NOT (OFC_CD IS NULL AND PORT IS NOT NULL))
#if(${checkVvd5} == 'Y')
                            AND (NOT (TRD_CD IS NOT NULL AND SUB_TRD_CD IS NOT NULL AND RLANE_CD IS NOT NULL AND DIR_CD IS NOT NULL AND NUM_1 IS     NULL))
                            AND (NOT (TRD_CD IS NOT NULL AND SUB_TRD_CD IS NOT NULL AND RLANE_CD IS     NULL AND DIR_CD IS NOT NULL AND NUM_1 IS NOT NULL))
                            AND (NOT (TRD_CD IS NOT NULL AND SUB_TRD_CD IS NOT NULL AND RLANE_CD IS     NULL AND DIR_CD IS     NULL AND NUM_1 IS NOT NULL))
                            AND (NOT (TRD_CD IS NOT NULL AND SUB_TRD_CD IS     NULL AND RLANE_CD IS     NULL AND DIR_CD IS NOT NULL AND NUM_1 IS NOT NULL))
                            AND (NOT (TRD_CD IS NOT NULL AND SUB_TRD_CD IS     NULL AND RLANE_CD IS     NULL AND DIR_CD IS     NULL AND NUM_1 IS NOT NULL))
#end 
                  ) Z3
         ) Z4
   WHERE Z4.AQ_CD <> 'BSA'
ORDER BY DECODE(Z4.SUB_TRD_CD, 'TOTAL', '00', Z4.SUB_TRD_CD) DESC,
         Z4.BSA_AVG DESC,
         DECODE(Z4.RLANE_CD, 'TOTAL', 'ZZZZZ', Z4.RLANE_CD),
         DECODE(Z4.DIR_CD  , 'TOTAL', DECODE(Z4.AQ_CD, '+', '0', '1'), Z4.DIR_CD),
         NUM_1,
         DECODE(Z4.AQ_CD   , 'TOTAL', DECODE(Z4.RLANE_CD, 'TOTAL', 'ZZZZZ', '00000'),
         DECODE(Z4.AQ_CD   , NULL, '0', 'SELSC', '1', 'TYOSC', '2', 'SHADNC', '3', 'SZPDC','4','SHARC', '5', 'DXBME', '6', 'SINRS', '7','TAIWAN', '8','SHADKJ', '9', 'SINDSA', '10', 'SINDPI', '11', 'RUSIA', '12', Z4.AQ_CD)),
         DECODE(Z4.OFC_CD  , 'TOTAL', '00000', Z4.OFC_CD),
         DECODE(Z4.PORT1   , 'TOTAL', '00000', Z4.PORT1)			]]></sql>
			<params>
				<param name="ofc_cd" type="12" value="" out="N"/>
				<param name="login_id" type="12" value="" out="N"/>
				<param name="ui_name" type="12" value="" out="N"/>
				<param name="trade" type="12" value="" out="N"/>
				<param name="area" type="12" value="" out="N"/>
				<param name="sales_office" type="12" value="" out="N"/>
				<param name="pol_cd" type="12" value="" out="N"/>
				<param name="port_div" type="12" value="" out="N"/>
				<param name="year" type="12" value="" out="N"/>
				<param name="week" type="12" value="" out="N"/>
				<param name="duration" type="12" value="" out="N"/>
				<param name="rhq2" type="12" value="" out="N"/>
				<param name="subtrade1" type="12" value="" out="N"/>
				<param name="bound" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
