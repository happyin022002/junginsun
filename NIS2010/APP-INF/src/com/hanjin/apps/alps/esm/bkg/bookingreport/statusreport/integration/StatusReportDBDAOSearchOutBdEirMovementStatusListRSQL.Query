<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="StatusReportDBDAOSearchOutBdEirMovementStatusListRSQL">
			<desc><![CDATA[EIR Exchange & Customs Release Check Report 조회]]></desc>
			<sql><![CDATA[
SELECT 
  DENSE_RANK() OVER( ORDER BY K.BKG_NO) DENSE_RANK,
  DENSE_RANK() OVER( ORDER BY K.BKG_NO) DENSE_RANK2,
  K.CNTR_RNUM,
  K.BKG_RNUM,
  K.BKG_NO,
  K.ST,
  K.SHPR_NM,
  K.CNEE_NM,
  K.POR_CD,
  K.POD_CD,
  K.RCV_TERM_CD,
  K.DE_TERM_CD,
  K.BKG_QTY,
  K.BS,
  K.EIR_FLG,
  K.CNTR_NO,
  DECODE(K.CURL_FLG,NULL,'N',K.CURL_FLG) CURL_FLG,
  K.CURL_DT,
  BKG_GET_TOKEN_FNC(K.MVMT_DATA_OP,1,',') OP_STS_CD,
  BKG_GET_TOKEN_FNC(K.MVMT_DATA_OP,2,',') OP_ORG_YD_CD,
  BKG_GET_TOKEN_FNC(K.MVMT_DATA_OP,3,',') OP_CNMV_EVNT_DT,
  BKG_GET_TOKEN_FNC(K.MVMT_DATA_OC,1,',') OC_STS_CD,
  BKG_GET_TOKEN_FNC(K.MVMT_DATA_OC,2,',') OC_ORG_YD_CD,
  BKG_GET_TOKEN_FNC(K.MVMT_DATA_OC,3,',') OC_CNMV_EVNT_DT,   
  K.MOVE_STS,
  K.STOW,
  DG_UN_NO AS IMDG_UN_NO,
  DG_IMDG AS IMDG_CLSS_CD,
  BKG_GET_TOKEN_FNC(RF_CD, 1) AS CDO_TEMP,
  BKG_GET_TOKEN_FNC(RF_CD, 2) AS CNTR_VENT_TP_CD,
  BKG_GET_TOKEN_FNC(AWK_CD, 1) AS OVR_FWRD_LEN,
  BKG_GET_TOKEN_FNC(AWK_CD, 2) AS OVR_BKWD_LEN,
  BKG_GET_TOKEN_FNC(AWK_CD, 3) AS OVR_HGT,
  COUNT(DISTINCT K.BKG_NO) OVER() BKG_TOTAL,
  SUM(DECODE(BKG_RNUM,1,BKG_TOTAL_F,0)) OVER () ||' F' AS BKG_TOTAL_F,
  COUNT(K.CNTR_NO) OVER() CNTR_TOTAL,
  SUM(CNTR_TOTAL) OVER() ||' F' AS CNTR_TOTAL_F,
  SUM(DECODE(EIR_FLG,'Y',1,0)) OVER() EIR_TOTAL_Y,
  SUM(DECODE(EIR_FLG,'N',1,0)) OVER() EIR_TOTAL_N,
  --SUM(DECODE(EIR_FLG,'Y',EIR_QTY_Y,0)) OVER() ||' F' AS EIR_TOT_Y
  CASE WHEN 1<= SUM(DECODE(EIR_FLG,'Y',EIR_QTY_Y,0)) OVER() THEN SUM(DECODE(EIR_FLG,'Y',EIR_QTY_Y,0)) OVER() ||' F'
       WHEN 0< SUM(DECODE(EIR_FLG,'Y',EIR_QTY_Y,0)) OVER() AND  SUM(DECODE(EIR_FLG,'Y',EIR_QTY_Y,0)) OVER() <1 THEN '0'|| SUM(DECODE(EIR_FLG,'Y',EIR_QTY_Y,0)) OVER() ||' F' 
  ELSE SUM(DECODE(EIR_FLG,'A',EIR_QTY_N,0)) OVER() ||' F' 
  END EIR_TOT_Y, 
  --SUM(DECODE(EIR_FLG,'N',EIR_QTY_N,0)) OVER() ||' F' AS EIR_TOT_N
  CASE WHEN 1<= SUM(DECODE(EIR_FLG,'N',EIR_QTY_N,0)) OVER() THEN SUM(DECODE(EIR_FLG,'N',EIR_QTY_N,0)) OVER() ||' F'
       WHEN 0< SUM(DECODE(EIR_FLG,'N',EIR_QTY_N,0)) OVER() AND  SUM(DECODE(EIR_FLG,'N',EIR_QTY_N,0)) OVER() <1 THEN '0'|| SUM(DECODE(EIR_FLG,'N',EIR_QTY_N,0)) OVER() ||' F' 
  ELSE SUM(DECODE(EIR_FLG,'A',EIR_QTY_N,0)) OVER() ||' F' 
  END EIR_TOT_N, 
  SUM(DECODE(CURL_FLG,'Y',1,0)) OVER() CURL_TOTAL_Y,
  SUM(DECODE(CURL_FLG,'N',1,0)) OVER() CURL_TOTAL_N,
  SUM(DECODE(K.CURL_DT,NULL,0,CURL_QTY_Y)) OVER() ||' F' AS CURL_TOT_Y, 
  SUM(DECODE(K.CURL_DT,NULL,CURL_QTY_N,0)) OVER() ||' F' AS CURL_TOT_N, 
  --SUM(CURL_QTY_Y) OVER() ||' F' AS CURL_TOT_Y,
  --SUM(CURL_QTY_N) OVER() ||' F' AS CURL_TOT_N, 
  SUM(DECODE(K.MOVE_STS,'OP',1,0)) OVER() AS OP,
  SUM(OP_TOT) OVER() ||' F' AS OP_TOT,
  SUM(DECODE(K.MOVE_STS,'OC',1,0)) OVER() AS OC,
  SUM(OC_TOT) OVER() ||' F' AS OC_TOT,
  SUM(DECODE(K.MOVE_STS,'VL',1,0)) OVER() AS VL,
  SUM(VL_TOT) OVER() ||' F' AS VL_TOT,
  SUM(DECODE(K.MOVE_STS,'OP',0,'OC',0,'VL',0,1)) OVER() AS OT,
  SUM(OT_TOT) OVER() ||' F' AS OT_TOT,
  K.CNTR_TPSZ_CD,
  K.COP_NO,  
  K.BKG_NO AS CBKG_NO,
  K.CNTR_VOL_QTY,  -- LSJ 추가
  K.CNTR_PRT_FLG  -- LSJ 추가
FROM (
    SELECT 
      ROW_NUMBER() OVER (PARTITION BY A.BKG_NO, A.CNTR_NO ORDER BY A.BKG_NO, A.CNTR_NO) AS CNTR_RNUM,
      ROW_NUMBER() OVER (PARTITION BY A.BKG_NO ORDER BY A.BKG_NO ) AS BKG_RNUM,
      A.BKG_NO AS BKG_NO,
      A.BKG_STS_CD AS ST,
      REPLACE(A.SHPR_NAME,chr(13)||chr(10),' ') AS SHPR_NM,
      REPLACE(A.CONSIGNEE_NAME,chr(13)||chr(10),' ') AS CNEE_NM,
      A.POR_CD AS POR_CD,
      A.POD_CD AS POD_CD,
      A.RCV_TERM_CD AS RCV_TERM_CD,
      A.DE_TERM_CD AS DE_TERM_CD,
      A.CNTR_TPSZ_CD AS CNTR_TPSZ_CD,
      A.CNTR_VOL_QTY AS CNTR_VOL_QTY,
	  A.CNTR_PRT_FLG AS CNTR_PRT_FLG,  -- LSJ 추가      
      BKG_JOIN_FNC(CURSOR(SELECT  J.CNTR_TPSZ_CD||'-'||TRIM(TO_CHAR(SUM(J.CNTR_VOL_QTY),'999990.99'))
                          FROM BKG_CONTAINER J
                          WHERE J.BKG_NO = A.BKG_NO
                          GROUP BY CNTR_TPSZ_CD
                          ORDER BY CNTR_TPSZ_CD)) AS BKG_QTY,
      (
        SELECT BLCK_STWG_CD
        FROM BKG_BOOKING BK
        WHERE BK.BKG_NO = A.BKG_NO) AS BS,
      --DECODE(A.BKG_NO, NULL, 'N', 'Y') AS EIR_FLG,
	  NVL((SELECT 'Y' FROM BKG_OB_CHN_RCV_HIS B
			WHERE 1=1
			  AND B.CHN_EDI_MSG_TP_ID = A.CHN_EDI_MSG_TP_ID
			  AND B.MSG_RCV_NO = A.MSG_RCV_NO
			  AND B.RCV_LOG_SEQ = A.RCV_LOG_SEQ
			  AND (B.EDI_RCV_MSG LIKE '%RCVEIR%' OR B.EDI_RCV_MSG LIKE '%CODECO%')
		   ),'N') AS EIR_FLG,
      A.CNTR_NO AS CNTR_NO,
	 (	SELECT 'Y' FROM DUAL
        WHERE EXISTS (
                         SELECT BK.BKG_NO, RCV.CNTR_NO, TO_CHAR(RCV.CGOR_DT,'YYYY-MM-DD HH24:MM') AS CGOR_DT 
                               FROM BKG_BOOKING BK, BKG_CONTAINER BC, BKG_OB_CHN_RCV RCV
                             WHERE 1=1
                               AND BK.BKG_NO = BC.BKG_NO
                               AND BK.BKG_STS_CD <> 'X'
                               AND RCV.CHN_EDI_MSG_TP_ID ='YTI'
                               AND BC.BKG_NO = RCV.BKG_NO
                               AND BC.CNTR_NO = RCV.CNTR_NO
                               AND RCV.BKG_NO = A.BKG_NO
                               AND RCV.CNTR_NO = A.CNTR_NO
                               AND RCV.CGOR_DT IS NOT NULL
                          UNION ALL
                          SELECT BK.TO_BKG_NO, RCV.CNTR_NO, TO_CHAR(RCV.CGOR_DT,'YYYY-MM-DD HH24:MM') AS CGOR_DT 
                           FROM BKG_BOOKING BK, BKG_CONTAINER BC, BKG_OB_CHN_RCV RCV
                         WHERE 1=1
                           AND BK.TO_BKG_NO = BC.BKG_NO
                           AND BK.BKG_STS_CD = 'X'
                           AND RCV.CHN_EDI_MSG_TP_ID ='YTI'
                           AND BC.BKG_NO = RCV.BKG_NO
                           AND BC.CNTR_NO = RCV.CNTR_NO
                           AND RCV.BKG_NO = A.BKG_NO
                           AND RCV.CNTR_NO = A.CNTR_NO
                           AND RCV.CGOR_DT IS NOT NULL
                          )) CURL_FLG,  
     COALESCE( (SELECT MAX(TO_CHAR(RCV.CGOR_DT,'YYYY-MM-DD HH24:MM')) AS CGOR_DT 
                               FROM BKG_BOOKING BK, BKG_CONTAINER BC, BKG_OB_CHN_RCV RCV
                             WHERE 1=1
                               AND BK.BKG_NO = BC.BKG_NO
                               AND BK.BKG_STS_CD <> 'X'
                               AND RCV.CHN_EDI_MSG_TP_ID ='YTI'
                               AND BC.BKG_NO = RCV.BKG_NO
                               AND BC.CNTR_NO = RCV.CNTR_NO
                               AND RCV.BKG_NO = A.BKG_NO
                               AND RCV.CNTR_NO = A.CNTR_NO
                               AND RCV.CGOR_DT IS NOT NULL) ,( 
                          SELECT MAX(TO_CHAR(RCV.CGOR_DT,'YYYY-MM-DD HH24:MM')) AS CGOR_DT 
                           FROM BKG_BOOKING BK, BKG_CONTAINER BC, BKG_OB_CHN_RCV RCV
                         WHERE 1=1
                           AND BK.TO_BKG_NO = BC.BKG_NO
                           AND BK.BKG_STS_CD = 'X'
                           AND RCV.CHN_EDI_MSG_TP_ID ='YTI'
                           AND BC.BKG_NO = RCV.BKG_NO
                           AND BC.CNTR_NO = RCV.CNTR_NO
                           AND RCV.BKG_NO = A.BKG_NO
                           AND RCV.CNTR_NO = A.CNTR_NO
                           AND RCV.CGOR_DT IS NOT NULL), '' ) CURL_DT,	  
      A.MVMT_STS_CD AS MOVE_STS,
      BKG_JOIN_FNC(CURSOR (SELECT NVL(M.MVMT_STS_CD,'**')||','|| NVL(M.ORG_YD_CD,'*******')||','|| NVL(TO_CHAR(M.CNMV_EVNT_DT,'YYYY-MM-DD HH24:MM'),'****-**-** **:**')
                           FROM CTM_MOVEMENT M
                           WHERE M.CNTR_NO = A.CNTR_NO
                           AND   M.CNMV_YR = A.CNMV_YR
                           AND   M.CNMV_CYC_NO = A.CNMV_CYC_NO
                           AND   M.MVMT_STS_CD IN ('OP')
                           AND   M.CNMV_ID_NO = (SELECT MAX(CNMV_ID_NO)  
                                                 FROM CTM_MOVEMENT Q
                                                 WHERE Q.CNTR_NO = M.CNTR_NO
                                                   AND Q.CNMV_YR = M.CNMV_YR
                                                   AND Q.CNMV_CYC_NO = M.CNMV_CYC_NO
                                                   AND Q.MVMT_STS_CD IN ('OP')
                                                )
                                                   
                           ))MVMT_DATA_OP,
      BKG_JOIN_FNC(CURSOR (SELECT NVL(M.MVMT_STS_CD,'**')||','|| NVL(M.ORG_YD_CD,'*******')||','|| NVL(TO_CHAR(M.CNMV_EVNT_DT,'YYYY-MM-DD HH24:MM'),'****-**-** **:**')
                           FROM CTM_MOVEMENT M
                           WHERE M.CNTR_NO = A.CNTR_NO
                           AND   M.CNMV_YR = A.CNMV_YR
                           AND   M.CNMV_CYC_NO = A.CNMV_CYC_NO
                           AND   M.MVMT_STS_CD IN ('OC')
                           AND   M.CNMV_ID_NO = (SELECT MAX(CNMV_ID_NO)  
                                                 FROM CTM_MOVEMENT Q
                                                 WHERE Q.CNTR_NO = M.CNTR_NO
                                                   AND Q.CNMV_YR = M.CNMV_YR
                                                   AND Q.CNMV_CYC_NO = M.CNMV_CYC_NO
                                                   AND Q.MVMT_STS_CD IN ('OC')
                                                )
                                                   
                           ))MVMT_DATA_OC,                               
      
      (
        SELECT STWG_CD
        FROM BKG_BOOKING BK
        WHERE BK.BKG_NO = A.BKG_NO) AS STOW,
	  BKG_JOIN_FNC(CURSOR ((
        SELECT DG.IMDG_UN_NO
        FROM BKG_DG_CGO DG
        WHERE DG.BKG_NO = A.BKG_NO
          AND DG.CNTR_NO = A.CNTR_NO
		  AND ROWNUM = 1 ))) AS DG_UN_NO,
      BKG_JOIN_FNC(CURSOR ((
        SELECT DG.IMDG_CLSS_CD
        FROM BKG_DG_CGO DG
        WHERE DG.BKG_NO = A.BKG_NO
          AND DG.CNTR_NO = A.CNTR_NO
		  AND ROWNUM = 1 ))) AS DG_IMDG,      
      (
        SELECT RF.CDO_TEMP||','||RF.CNTR_VENT_TP_CD
        FROM BKG_RF_CGO RF
        WHERE RF.BKG_NO = A.BKG_NO
          AND RF.CNTR_NO = A.CNTR_NO
		  AND ROWNUM = 1 ) AS RF_CD,
      (
        SELECT AWK.OVR_FWRD_LEN||','||AWK.OVR_BKWD_LEN||','||AWK.OVR_HGT
        FROM BKG_AWK_CGO AWK
        WHERE AWK.BKG_NO = A.BKG_NO
          AND AWK.CNTR_NO = A.CNTR_NO
		  AND ROWNUM = 1 ) AS AWK_CD,
     (SELECT SUM(DECODE(SUBSTR(QTY.CNTR_TPSZ_CD,-1),'2',0.5 * QTY.OP_CNTR_QTY,QTY.OP_CNTR_QTY))
             FROM BKG_QUANTITY QTY
             WHERE QTY.BKG_NO = A.BKG_NO) AS BKG_TOTAL_F,
     CASE WHEN SUBSTR(A.CNTR_TPSZ_CD,-1) = '2' THEN 0.5 * A.CNTR_VOL_QTY 
            ELSE A.CNTR_VOL_QTY
           END  CNTR_TOTAL,
	 --EIR 수신 관련해서 EIR 은 CNTR_NO 가 전송되지 않기 때문에 RCVEIR 로 체크 하여 처리 한다
     CASE WHEN A.CNTR_NO IS NOT NULL AND SUBSTR(A.CNTR_TPSZ_CD,-1) = '2' THEN 0.5 * A.CNTR_VOL_QTY 
          WHEN A.CNTR_NO IS NOT NULL AND SUBSTR(A.CNTR_TPSZ_CD,-1) <> '2' THEN A.CNTR_VOL_QTY 
          ELSE  0
          END EIR_QTY_Y,
	 --EIR 수신 관련해서 EIR 은 CNTR_NO 가 전송되지 않기 때문에 RCVEIR 로 체크 하여 처리 한다
     CASE WHEN A.EIR_CNTR_NO IS NULL AND SUBSTR(A.CNTR_TPSZ_CD,-1) = '2' THEN 0.5 * A.CNTR_VOL_QTY 
          WHEN A.EIR_CNTR_NO IS NULL AND SUBSTR(A.CNTR_TPSZ_CD,-1) <> '2' THEN A.CNTR_VOL_QTY 
          ELSE  0
          END EIR_QTY_N,
	 --Split, Combine 관련하여 상단에서 WITH 절 BKG1,2 의 CGOR_DT 여부로 Customs 체크하여 처리 한다
    CASE WHEN A.CNTR_NO IS NOT NULL AND SUBSTR(A.CNTR_TPSZ_CD,-1) = '2' THEN 0.5 * A.CNTR_VOL_QTY 
          WHEN A.CNTR_NO IS NOT NULL AND SUBSTR(A.CNTR_TPSZ_CD,-1) <> '2' THEN A.CNTR_VOL_QTY 
          ELSE  0
          END CURL_QTY_Y,
	 --Split, Combine 관련하여 상단에서 WITH 절 BKG1,2 의 CGOR_DT 여부로 Customs 체크하여 처리 한다
     CASE WHEN A.CNTR_NO IS NOT NULL AND SUBSTR(A.CNTR_TPSZ_CD,-1) = '2' THEN 0.5 * A.CNTR_VOL_QTY 
          WHEN A.CNTR_NO IS NOT NULL AND SUBSTR(A.CNTR_TPSZ_CD,-1) <> '2' THEN A.CNTR_VOL_QTY 
          ELSE  0
          END CURL_QTY_N,
     CASE WHEN A.MVMT_STS_CD ='OP' AND SUBSTR(A.CNTR_TPSZ_CD,-1) = '2' THEN 0.5 * A.CNTR_VOL_QTY 
          WHEN A.MVMT_STS_CD ='OP' AND SUBSTR(A.CNTR_TPSZ_CD,-1) <> '2' THEN A.CNTR_VOL_QTY 
          ELSE  0
          END OP_TOT,                    
     CASE WHEN A.MVMT_STS_CD ='OC' AND SUBSTR(A.CNTR_TPSZ_CD,-1) = '2' THEN 0.5 * A.CNTR_VOL_QTY 
          WHEN A.MVMT_STS_CD ='OC' AND SUBSTR(A.CNTR_TPSZ_CD,-1) <> '2' THEN A.CNTR_VOL_QTY 
          ELSE  0
          END OC_TOT,
     CASE WHEN A.MVMT_STS_CD ='VL' AND SUBSTR(A.CNTR_TPSZ_CD,-1) = '2' THEN 0.5 * A.CNTR_VOL_QTY 
          WHEN A.MVMT_STS_CD ='VL' AND SUBSTR(A.CNTR_TPSZ_CD,-1) <> '2' THEN A.CNTR_VOL_QTY 
          ELSE  0
          END VL_TOT,                   
     CASE WHEN A.MVMT_STS_CD <>'OP' AND A.MVMT_STS_CD <>'OC' AND A.MVMT_STS_CD <>'VL' AND SUBSTR(A.CNTR_TPSZ_CD,-1) = '2' THEN 0.5 *A.CNTR_VOL_QTY 
          WHEN A.MVMT_STS_CD <>'OP' AND A.MVMT_STS_CD <>'OC' AND A.MVMT_STS_CD <>'VL' AND SUBSTR(A.CNTR_TPSZ_CD,-1) <> '2' THEN A.CNTR_VOL_QTY 
          ELSE  0
          END OT_TOT,
	  (
		SELECT K.COP_NO
        FROM SCE_COP_HDR K,BKG_BOOKING BK
		WHERE K.BKG_NO = A.BKG_NO
		AND   K.BKG_NO = BK.BKG_NO
        AND   K.CNTR_NO = A.CNTR_NO
        AND   K.POD_NOD_CD = BK.POD_NOD_CD
        AND   K.DEL_NOD_CD = BK.DEL_NOD_CD 
		AND   K.COP_STS_CD <> 'X') AS COP_NO
		,A.RNUM
	FROM (
		SELECT 
	       VB.BKG_STS_CD,
	       VB.SHPR_NAME,
	       VB.CONSIGNEE_NAME,
	       VB.POR_CD,
	       VB.POD_CD,
	       VB.RCV_TERM_CD,
	       VB.DE_TERM_CD,
	       B.CNTR_VOL_QTY,
		   B.CNTR_PRT_FLG,  -- LSJ 추가	       
	       B.CNTR_TPSZ_CD,
	       B.CNTR_NO,
	       B.CNMV_CYC_NO,
	       B.CNMV_YR,
	       MOVE.MVMT_STS_CD,
		   EIR.CGOR_DT,
           NVL(EIR.CHN_EDI_MSG_TP_ID, 
            NVL(DECODE(B.CNTR_PRT_FLG, 'Y',
                        (SELECT A3.CHN_EDI_MSG_TP_ID 
                        FROM BKG_CONTAINER A1, BKG_WORK_V A2, BKG_OB_CHN_RCV A3
                        WHERE A1.BKG_NO = A2.BKG_NO
                          AND A1.BKG_NO = A3.BKG_NO
                          AND A2.KEY_VSL_CD = VB.KEY_VSL_CD
                          AND A2.KEY_SKD_VOY_NO = VB.KEY_SKD_VOY_NO
                          AND A2.KEY_SKD_DIR_CD = VB.KEY_SKD_DIR_CD
                          AND A2.KEY_POL_CD = VB.KEY_POL_CD
                          AND A1.CNTR_NO = B.CNTR_NO
                          AND A3.CHN_EDI_MSG_TP_ID ='SUN'),EIR.CHN_EDI_MSG_TP_ID),'NNN')
                          ) CHN_EDI_MSG_TP_ID,
           NVL(EIR.MSG_RCV_NO, 
            DECODE(B.CNTR_PRT_FLG, 'Y',
                        (SELECT A3.MSG_RCV_NO 
                        FROM BKG_CONTAINER A1, BKG_WORK_V A2, BKG_OB_CHN_RCV A3
                        WHERE A1.BKG_NO = A2.BKG_NO
                          AND A1.BKG_NO = A3.BKG_NO
                          AND A2.KEY_VSL_CD = VB.KEY_VSL_CD
                          AND A2.KEY_SKD_VOY_NO = VB.KEY_SKD_VOY_NO
                          AND A2.KEY_SKD_DIR_CD = VB.KEY_SKD_DIR_CD
                          AND A2.KEY_POL_CD = VB.KEY_POL_CD
                          AND A1.CNTR_NO = B.CNTR_NO
                          AND A3.CHN_EDI_MSG_TP_ID ='SUN'),EIR.MSG_RCV_NO)
                          ) MSG_RCV_NO,
           NVL(EIR.RCV_LOG_SEQ, 
            DECODE(B.CNTR_PRT_FLG, 'Y',
                        (SELECT A3.RCV_LOG_SEQ 
                        FROM BKG_CONTAINER A1, BKG_WORK_V A2, BKG_OB_CHN_RCV A3
                        WHERE A1.BKG_NO = A2.BKG_NO
                          AND A1.BKG_NO = A3.BKG_NO
                          AND A2.KEY_VSL_CD = VB.KEY_VSL_CD
                          AND A2.KEY_SKD_VOY_NO = VB.KEY_SKD_VOY_NO
                          AND A2.KEY_SKD_DIR_CD = VB.KEY_SKD_DIR_CD
                          AND A2.KEY_POL_CD = VB.KEY_POL_CD
                          AND A1.CNTR_NO = B.CNTR_NO
                          AND A3.CHN_EDI_MSG_TP_ID ='SUN'),EIR.RCV_LOG_SEQ)
                          ) RCV_LOG_SEQ,
-- 		   NVL(EIR.CHN_EDI_MSG_TP_ID,'NNN') CHN_EDI_MSG_TP_ID,
--	       EIR.MSG_RCV_NO,
--	       EIR.RCV_LOG_SEQ,
	       VB.BKG_NO,
	       EIR.EIR_XCH_DT,
	       EIR.POL_NM,
	       EIR.POD_NM,
	       EIR.VVD_CD,
	       EIR.VVD_NM,
	       EIR.CSTMS_LOC_CD,
		   EIR.CNTR_NO EIR_CNTR_NO,
		   ROW_NUMBER() OVER (PARTITION BY VB.BKG_NO,B.CNTR_NO ORDER BY EIR.UPD_DT DESC)  AS RNUM
    FROM BKG_WORK_V VB,
      BKG_CONTAINER B,
      CTM_MOVEMENT MOVE,
	  BKG_OB_CHN_RCV EIR
    WHERE 1=1
      AND VB.BKG_NO = B.BKG_NO(+)
      AND VB.BKG_STS_CD <>'X'
      AND B.CNTR_NO = MOVE.CNTR_NO(+)
      AND B.CNMV_YR = MOVE.CNMV_YR(+)
      AND B.CNMV_ID_NO = MOVE.CNMV_ID_NO(+)
      AND B.BKG_NO = EIR.BKG_NO(+)
      AND B.CNTR_NO = EIR.CNTR_NO(+)
#if (${vvd_cd} != '') 
AND   VB.KEY_VSL_CD = SUBSTR(@[vvd_cd],1,4)
AND   VB.KEY_SKD_VOY_NO = SUBSTR(@[vvd_cd],5,4)
AND   VB.KEY_SKD_DIR_CD =  SUBSTR(@[vvd_cd],9,1)
#end      

#if (${ofc_inc_sub} == 'Y') 
		AND VB.BKG_OFC_CD IN (
      		SELECT OFC_CD  
      		FROM   MDM_ORGANIZATION MO
      		START WITH MO.OFC_CD = NVL(@[bkg_ofc_cd],VB.BKG_OFC_CD)
      		CONNECT BY PRIOR MO.OFC_CD = MO.PRNT_OFC_CD)
#else 
	#if (${bkg_ofc_cd} != '') 
		AND   VB.BKG_OFC_CD = @[bkg_ofc_cd] 
	#end
#end 

#if (${bkg_dt_fr} != '' || ${bkg_dt_fr} != '') 
AND VB.BKG_CRE_DT BETWEEN TO_DATE(@[bkg_dt_fr],'YYYY-MM-DD') AND TO_DATE(@[bkg_dt_to],'YYYY-MM-DD') + 0.99999
#elseif (${bkg_dt_fr} != '') 
AND VB.BKG_CRE_DT <= TO_DATE(@[bkg_dt_to],'YYYY-MM-DD') + 0.99999
#elseif (${bkg_dt_to} != '') 
AND VB.BKG_CRE_DT >= TO_DATE(@[bkg_dt_fr],'YYYY-MM-DD')
#end

#if (${bkg_no} != '') 
AND VB.BKG_NO = @[bkg_no]
#end
#if (${pol_cd} != '') 
AND  VB.KEY_POL_CD  LIKE RTRIM(@[pol_cd]) || '%'
#end
#if (${por_cd} != '') 
AND  VB.POR_CD LIKE RTRIM(@[por_cd]) || '%'
#end

#if (${rcv_term_cd} != '') 
AND B.RCV_TERM_CD = @[rcv_term_cd]
#end
#if (${de_term_cd} != '') 
AND VB.DE_TERM_CD = @[de_term_cd]
#end
#if (${org_yd_cd} != '') 
AND B.ORG_YD_CD LIKE  @[org_yd_cd] || '%'
#end
#if (${chk_lt_type} == 'L') 
AND  VB.KEY_POL_CD = VB.POL_CD	--L/T Local  
#elseif (${chk_lt_type} == 'T') 
AND  VB.KEY_POL_CD <> VB.POL_CD	--T/S
#end

#if (${cntr_cfm_flg} != '') 
AND B.CNTR_CFM_FLG = @[cntr_cfm_flg]  --Booking Container의 Tab의 Confirm 정보 
#end

#if (${bkg_sts_cd} != '') 
AND VB.BKG_STS_CD = @[bkg_sts_cd]  	--예약 현황 
#end

#if (${pre_1_vvd} != '') 
AND VB.PRE_1_VVD LIKE @[pre_1_vvd] || '%'	--pre_vvd
#end

#if (${pre_1_pol_cd} != '') 
AND VB.PRE_1_POL_CD = @[pre_1_pol_cd]		--pre_pol       
#end

#if (${xter_bkg_rqst_cd} != '') 
AND VB.XTER_BKG_RQST_CD = @[xter_bkg_rqst_cd]	--BKG Kind 
#end

#if (${cnmv_sts_cd} == 'Y') 
AND B.CNMV_STS_CD = 'OC'	--O/C Status    Container Status가 OC인 항목 조회
#elseif  (${cnmv_sts_cd} == 'N') 
AND B.CNMV_STS_CD != 'OC'
#end

#if (${bkg_cgo_tp_cd} != '') 
AND VB.BKG_CGO_TP_CD = @[bkg_cgo_tp_cd]	 --화물 종류All, Full, Empty로 구분 (Cargo Type 코드 참고)
#end

#if (${dest_trns_svc_mod_cd} != '') 
AND VB.DEST_TRNS_SVC_MOD_CD = @[dest_trns_svc_mod_cd]	--Service Mode
#end

--------------------------------------------------------------------------
--1.'SHPR'
#if (${cust_tp_cd} == 'S') 
	#if (${cust_cnt_cd} != '' && ${cust_seq} == '') 
AND	  SUBSTR(VB.SHIPPER,1,2) = @[cust_cnt_cd] 
	#end 
	#if (${cust_cnt_cd} != '' && ${cust_seq} != '') 
AND	  VB.SHIPPER LIKE @[cust_cnt_cd] || @[cust_seq] || '%'
	#end 
	#if (${cust_nm} != '') 
AND	  VB.SHPR_NAME LIKE   @[cust_nm] || '%'
	#end
--2.'CNEE'
#elseif (${cust_tp_cd} == 'C') 
	#if (${cust_cnt_cd} != '' && ${cust_seq} == '') 
AND	  SUBSTR(VB.CONSIGNEE,1,2) = @[cust_cnt_cd]
	#end 
	#if (${cust_cnt_cd} != '' && ${cust_seq} != '') 
AND	  VB.CONSIGNEE LIKE @[cust_cnt_cd] || @[cust_seq]
	#end
	#if (${cust_nm} != '') 
AND	  VB.CONSIGNEE_NAME LIKE   @[cust_nm] || '%'
	#end 
--3.'NTFY'
#elseif (${cust_tp_cd} == 'N') 
	#if (${cust_cnt_cd} != '' && ${cust_seq} == '') 
AND	  SUBSTR(VB.NTFY,1,2) = @[cust_cnt_cd]
	#end 
	#if (${cust_cnt_cd} != '' && ${cust_seq} != '') 
AND	  VB.NTFY LIKE @[cust_cnt_cd] || @[cust_seq]
	#end 
	#if (${cust_nm} != '') 
AND	  VB.NTFY_NAME LIKE   @[cust_nm] || '%'
	#end 
--4.'ANFY'
#elseif (${cust_tp_cd} == 'A') 
	#if (${cust_cnt_cd} != '' && ${cust_seq} == '') 
AND	  SUBSTR(VB.ANTY,1,2) = @[cust_cnt_cd]
	#end 
	#if (${cust_cnt_cd} != '' && ${cust_seq} != '') 
AND	  VB.ANTY LIKE @[cust_cnt_cd] || @[cust_seq]
	#end 
	#if (${cust_nm} != '') 
AND	  VB.ANTY_NAME LIKE   @[cust_nm] || '%'
	#end 
--5.'FWDR'
#elseif (${cust_tp_cd} == 'F')
	#if (${cust_cnt_cd} != '' && ${cust_seq} == '') 
AND	  SUBSTR(VB.FFDR,1,2) = @[cust_cnt_cd]
	#end 
	#if (${cust_cnt_cd} != '' && ${cust_seq} != '') 
AND	  VB.FFDR LIKE @[cust_cnt_cd] || @[cust_seq]
	#end 
	#if (${cust_nm} != '') 
AND	  VB.FFDR_NAME LIKE   @[cust_nm] || '%'
	#end 
#else
--6.'선택하지 않았을때..'
	#if (${cust_cnt_cd} != '' && ${cust_seq} == '') 
AND	  	(SUBSTR(VB.SHIPPER,1,2) = @[cust_cnt_cd] OR	
		SUBSTR(VB.CONSIGNEE,1,2)= @[cust_cnt_cd] OR
		SUBSTR(VB.NTFY,1,2) = @[cust_cnt_cd] OR
		SUBSTR(VB.ANTY,1,2) = @[cust_cnt_cd] OR 
		SUBSTR(VB.FFDR,1,2) = @[cust_cnt_cd])
	#end 
	#if (${cust_cnt_cd} != '' && ${cust_seq} != '') 
AND		(VB.SHIPPER = @[cust_cnt_cd] || @[cust_seq] OR	
		VB.CONSIGNEE = @[cust_cnt_cd] || @[cust_seq] OR
		VB.NTFY = @[cust_cnt_cd]|| @[cust_seq] OR
		VB.ANTY = @[cust_cnt_cd]|| @[cust_seq] OR 
		VB.FFDR = @[cust_cnt_cd]|| @[cust_seq])
	#end
	#if (${cust_nm} != '') 
AND		(VB.SHPR_NAME = @[cust_nm] OR	
		VB.CONSIGNEE_NAME = @[cust_nm] OR
		VB.NTFY_NAME = @[cust_nm] OR
		VB.ANTY_NAME = @[cust_nm] OR 
		VB.FFDR_NAME = @[cust_nm])		
	#end
#end

) A
WHERE 1=1
AND RNUM = 1
AND CHN_EDI_MSG_TP_ID IN ('SUN','YTI','NNN')
) K
WHERE 1=1
#if (${eir_flg} != '') 
AND EIR_FLG = @[eir_flg]  --EIR 접수 여부 
#end
#if (${curl_flg} != '') 
AND CURL_FLG = @[curl_flg]  --세관 통과 여부
#end



order by BKG_NO,BKG_RNUM,CNTR_RNUM			]]></sql>
			<params>
				<param name="vvd_cd" type="12" value="" out="N"/>
				<param name="bkg_ofc_cd" type="12" value="" out="N"/>
				<param name="bkg_dt_fr" type="12" value="" out="N"/>
				<param name="bkg_dt_to" type="12" value="" out="N"/>
				<param name="bkg_no" type="12" value="" out="N"/>
				<param name="pol_cd" type="12" value="" out="N"/>
				<param name="por_cd" type="12" value="" out="N"/>
				<param name="rcv_term_cd" type="12" value="" out="N"/>
				<param name="de_term_cd" type="12" value="" out="N"/>
				<param name="org_yd_cd" type="12" value="" out="N"/>
				<param name="cntr_cfm_flg" type="12" value="" out="N"/>
				<param name="bkg_sts_cd" type="12" value="" out="N"/>
				<param name="pre_1_vvd" type="12" value="" out="N"/>
				<param name="pre_1_pol_cd" type="12" value="" out="N"/>
				<param name="xter_bkg_rqst_cd" type="12" value="" out="N"/>
				<param name="bkg_cgo_tp_cd" type="12" value="" out="N"/>
				<param name="dest_trns_svc_mod_cd" type="12" value="" out="N"/>
				<param name="cust_cnt_cd" type="12" value="" out="N"/>
				<param name="cust_seq" type="12" value="" out="N"/>
				<param name="cust_nm" type="12" value="" out="N"/>
				<param name="eir_flg" type="12" value="" out="N"/>
				<param name="curl_flg" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
