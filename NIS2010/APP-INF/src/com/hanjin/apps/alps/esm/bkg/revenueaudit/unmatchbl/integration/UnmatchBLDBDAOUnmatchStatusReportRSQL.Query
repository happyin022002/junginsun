<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="UnmatchBLDBDAOUnmatchStatusReportRSQL">
			<desc><![CDATA[unmatch status report]]></desc>
			<sql><![CDATA[
SELECT  RCT_RHQ_CD              ,
        BKG_OFC_CD              ,
        NVL(ROUND(SUM(SETTLE_TERM) / DECODE(SUM(DECODE(SETTLE_TERM,NULL,0,1)),0,1,SUM(DECODE(SETTLE_TERM,NULL,0,1)))),0)  SETTLE_TERM ,
        NVL(SUM(BL_U_CNT),0) BL_U_CNT  ,
        NVL(SUM(BL_S_CNT),0) BL_S_CNT  ,
        NVL(SUM(U_A_CNT),0)  U_A_CNT   ,
        NVL(SUM(U_Al_CNT),0)  U_Al_CNT   ,
        NVL(SUM(U_All_CNT),0)  U_All_CNT   ,
        NVL(SUM(U_B_CNT),0)  U_B_CNT   ,
        NVL(SUM(U_C_CNT),0)  U_C_CNT   ,
        NVL(SUM(U_D_CNT),0)  U_D_CNT   ,
        NVL(SUM(U_E_CNT),0)  U_E_CNT   ,
        NVL(SUM(U_F_CNT),0)  U_F_CNT   ,
        NVL(SUM(U_G_CNT),0)  U_G_CNT   ,
        NVL(SUM(S_Al_CNT),0)  S_Al_CNT   ,
        NVL(SUM(S_All_CNT),0)  S_All_CNT   ,
        NVL(SUM(S_B_CNT),0)  S_B_CNT   ,
        NVL(SUM(S_C_CNT),0)  S_C_CNT   ,
        NVL(SUM(S_D_CNT),0)  S_D_CNT   ,
        NVL(SUM(S_E_CNT),0)  S_E_CNT   ,
        NVL(SUM(S_F_CNT),0)  S_F_CNT   ,
        NVL(SUM(S_G_CNT),0)  S_G_CNT   ,
        NVL(SUM(STL_MNL_DIFF_AMT),0)   STL_MNL_DIFF_AMT  ,
        COUNT(BKG_NO) AS TTL_BKG_CNT,
        NVL(SUM(BL_U_CNT) + SUM(BL_S_CNT),0) ERR_BL_TTL,
        ROUND(NVL((SUM(BL_U_CNT) + SUM(BL_S_CNT)),0) / COUNT(BKG_NO),2) ERR_RTO,
        '' AS RT_APLY_DT_FROM   ,
        '' AS RT_APLY_DT_TO     ,
        '' AS BKG_CTRT_TP_CD    ,
        '' AS AUTO_RAT_FLG
FROM    (
        SELECT  BK.BKG_NO           ,
                LVL.REGION RCT_RHQ_CD        ,                                       --RHQ
                BK.BKG_OFC_CD       ,
                UI.STL_MNL_DIFF_AMT ,
                BR.BKG_CTRT_TP_CD   ,
                UI.SETTLE_TERM ,
                (
                SELECT  MAX(DECODE(AUTO_RAT_CD, 'A', 'A', 'I', 'A', 'M'))
                FROM    BKG_CHG_RT  A
                WHERE   A.BKG_NO    = BK.BKG_NO
                ) AUTO_RAT_FLG      ,
                UI.BL_U_CNT         ,
                UI.BL_S_CNT         ,
                UI.U_A_CNT          ,
				UI.U_Al_CNT          ,
				UI.U_All_CNT          ,
                UI.U_B_CNT          ,
                UI.U_C_CNT          ,
                UI.U_D_CNT          ,
                UI.U_E_CNT          ,
                UI.U_F_CNT          ,
                UI.U_G_CNT          ,
                UI.S_Al_CNT          ,
                UI.S_All_CNT          ,
                UI.S_B_CNT          ,
                UI.S_C_CNT          ,
                UI.S_D_CNT          ,
                UI.S_E_CNT          ,
                UI.S_F_CNT          ,
                UI.S_G_CNT          
        FROM    BKG_BOOKING       BK  ,
                BKG_RATE          BR  ,
                VSK_VSL_PORT_SKD  VSKD,
                BKG_VVD           BVVD,
                BKG_OFC_LVL_V     LVL,
                (
                SELECT  A1.BKG_NO       ,
                        A1.STL_MNL_DIFF_AMT,
                        DECODE(A1.REV_AUD_STS_CD, 'S', TO_DATE(A1.STL_DT) - TO_DATE(A1.N1ST_UMCH_FND_DT), 0) SETTLE_TERM,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'U',DECODE(A1.BKG_NO,NULL,0,1),0))     BL_U_CNT  ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'S',DECODE(A1.BKG_NO,NULL,0,1),0))     BL_S_CNT  ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'U',DECODE(B1.UMCH_TP_CD,'A',1,0),0))  U_A_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'U',DECODE(B1.UMCH_TP_CD,'A1',1,0),0))  U_Al_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'U',DECODE(B1.UMCH_TP_CD,'A2',1,0),0))  U_All_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'U',DECODE(B1.UMCH_TP_CD,'B',1,0),0))  U_B_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'U',DECODE(B1.UMCH_TP_CD,'C',1,0),0))  U_C_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'U',DECODE(B1.UMCH_TP_CD,'D',1,0),0))  U_D_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'U',DECODE(B1.UMCH_TP_CD,'E',1,0),0))  U_E_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'U',DECODE(B1.UMCH_TP_CD,'F',1,0),0))  U_F_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'U',DECODE(B1.UMCH_TP_CD,'G',1,0),0))  U_G_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'S',DECODE(B1.UMCH_TP_CD,'A1',1,0),0))  S_Al_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'S',DECODE(B1.UMCH_TP_CD,'A2',1,0),0))  S_All_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'S',DECODE(B1.UMCH_TP_CD,'B',1,0),0))  S_B_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'S',DECODE(B1.UMCH_TP_CD,'C',1,0),0))  S_C_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'S',DECODE(B1.UMCH_TP_CD,'D',1,0),0))  S_D_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'S',DECODE(B1.UMCH_TP_CD,'E',1,0),0))  S_E_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'S',DECODE(B1.UMCH_TP_CD,'F',1,0),0))  S_F_CNT   ,
                        MAX(DECODE(A1.REV_AUD_STS_CD,'S',DECODE(B1.UMCH_TP_CD,'G',1,0),0))  S_G_CNT   
                FROM    BKG_REV_UMCH_BKG A1 ,
                        BKG_REV_UMCH_ITM B1
                WHERE   B1.BKG_NO       = A1.BKG_NO
                AND     B1.UMCH_BKG_SEQ = A1.UMCH_BKG_SEQ
                AND     A1.UMCH_BKG_SEQ = (SELECT MAX(UMCH_BKG_SEQ) FROM BKG_REV_UMCH_BKG WHERE BKG_NO = A1.BKG_NO )
                GROUP BY A1.BKG_NO, A1.STL_MNL_DIFF_AMT, DECODE(A1.REV_AUD_STS_CD, 'S', TO_DATE(A1.STL_DT) - TO_DATE(A1.N1ST_UMCH_FND_DT), 0)
                ) UI
        WHERE   BR.BKG_NO       = BK.BKG_NO
        AND     UI.BKG_NO(+)       = BK.BKG_NO
        AND     BK.BKG_CGO_TP_CD    <> 'P'
        AND     BK.BKG_STS_CD       <> 'X'
        AND     3 = (SELECT COUNT(*) FROM BKG_CUSTOMER WHERE BKG_NO = BK.BKG_NO AND BKG_CUST_TP_CD IN ('S', 'C', 'N'))
        AND     BVVD.VSL_CD           = VSKD.VSL_CD   -- Join의 방향성 때문에 Duration인 경우와 아닌 경우를 분리함
        AND     BVVD.SKD_VOY_NO       = VSKD.SKD_VOY_NO
        AND     BVVD.SKD_DIR_CD       = VSKD.SKD_DIR_CD
        AND     BVVD.POL_CD           = VSKD.VPS_PORT_CD
        AND     BVVD.POL_CLPT_IND_SEQ = VSKD.CLPT_IND_SEQ
        AND     BK.BKG_NO             = BVVD.BKG_NO
		AND     BK.POL_CD             = BVVD.POL_CD
        AND     BK.BKG_OFC_CD         = LVL.OFC_CD
#if (${date_type} == 'L')
        AND     VSKD.VPS_ETD_DT BETWEEN TO_DATE(@[rt_aply_dt_from], 'YYYY-MM-DD') AND TO_DATE(@[rt_aply_dt_to], 'YYYY-MM-DD') + 0.99999
#end
#if (${date_type} == 'I')
        AND     EXISTS (SELECT 1 
                          FROM BKG_REV_UMCH_BKG 
                         WHERE N1ST_UMCH_FND_DT BETWEEN TO_DATE(@[rt_aply_dt_from], 'YYYY-MM-DD') AND TO_DATE(@[rt_aply_dt_to], 'YYYY-MM-DD') + 0.99999
                           AND BKG_NO = BK.BKG_NO)
#end
#if (${date_type} == 'A')
        AND     BR.RT_APLY_DT BETWEEN TO_DATE(@[rt_aply_dt_from], 'YYYY-MM-DD') AND TO_DATE(@[rt_aply_dt_to], 'YYYY-MM-DD') + 0.99999
#end
#if (${date_type} == 'P')
        AND     BK.PORT_CLZ_DT BETWEEN TO_DATE(@[rt_aply_dt_from], 'YYYY-MM-DD') AND TO_DATE(@[rt_aply_dt_to], 'YYYY-MM-DD') + 0.99999
#end
#if (${bkg_ofc_cd} != '')
        AND     BK.BKG_OFC_CD = @[bkg_ofc_cd]
#end
#if (${bkg_ctrt_tp_cd} != '')
        AND     BR.BKG_CTRT_TP_CD = @[bkg_ctrt_tp_cd]
#end
        )
WHERE   RCT_RHQ_CD IS NOT NULL

#if (${rct_rhq_cd} != '')
AND     RCT_RHQ_CD    = @[rct_rhq_cd]
#end
#if (${auto_rat_flg} != '')
AND     AUTO_RAT_FLG  = @[auto_rat_flg]
#end

GROUP BY
        RCT_RHQ_CD  ,
        BKG_OFC_CD

ORDER BY
        RCT_RHQ_CD  ,
        BKG_OFC_CD			]]></sql>
			<params>
				<param name="rt_aply_dt_from" type="12" value="" out="N"/>
				<param name="rt_aply_dt_to" type="12" value="" out="N"/>
				<param name="bkg_ofc_cd" type="12" value="" out="N"/>
				<param name="bkg_ctrt_tp_cd" type="12" value="" out="N"/>
				<param name="rct_rhq_cd" type="12" value="" out="N"/>
				<param name="auto_rat_flg" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
