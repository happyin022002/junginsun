/*=========================================================
*Copyright(c) 2010 CyberLogitec
*@FileName : TaaOftAutoRatingDBDAOsearchTaaOftAutoratingListRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2010.01.06
*@LastModifier : 
*@LastVersion : 1.0
* 2010.01.06 
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esm.bkg.outbounddocumentation.blrating.blrating.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class TaaOftAutoRatingDBDAOsearchTaaOftAutoratingListRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * TaaOftAutoRatingDBDAOsearchTaaOftAutoratingList 조회
	  * </pre>
	  */
	public TaaOftAutoRatingDBDAOsearchTaaOftAutoratingListRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("rt_aply_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("ca_flg",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("bkg_no",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("cmdt_cd",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esm.bkg.outbounddocumentation.blrating.blrating.integration").append("\n"); 
		query.append("FileName : TaaOftAutoRatingDBDAOsearchTaaOftAutoratingListRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("/*AUTORATING_20100106-001*/" ).append("\n"); 
		query.append("WITH" ).append("\n"); 
		query.append("BK AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("BOOKING 의 기본 정보를 SELECT 한다." ).append("\n"); 
		query.append("TAA 정보도 같이 SELECT 되며, 유효한 S/C 와 연결되지 않으면 SELECT 되는 ROW 가 없다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	BK.BKG_NO					," ).append("\n"); 
		query.append("NULL CORR_NO			," ).append("\n"); 
		query.append("NVL(@[cmdt_cd], BK.CMDT_CD)	CMDT_CD	," ).append("\n"); 
		query.append("( SELECT REP_CMDT_CD FROM MDM_COMMODITY WHERE CMDT_CD = NVL(@[cmdt_cd], BK.CMDT_CD) )	REP_CMDT_CD	," ).append("\n"); 
		query.append("DECODE(BK.PRE_RLY_PORT_CD||BK.PST_RLY_PORT_CD,NULL,'Y','N') DIR_CALL_FLG	," ).append("\n"); 
		query.append("NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), TO_DATE(BR.RT_APLY_DT))		RT_APLY_DT		," ).append("\n"); 
		query.append("BK.SVC_SCP_CD			," ).append("\n"); 
		query.append("'T' CTRT_TP_CD		," ).append("\n"); 
		query.append("BK.SC_NO					," ).append("\n"); 
		query.append("BK.RFA_NO					," ).append("\n"); 
		query.append("BK.TAA_NO					," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("WHEN BK.XTER_BKG_RQST_CD = 'NIS' THEN 'N'" ).append("\n"); 
		query.append("WHEN BK.XTER_BKG_RQST_CD = 'WEB' THEN 'W'" ).append("\n"); 
		query.append("WHEN BK.XTER_BKG_RQST_CD = 'DSK' THEN 'D'" ).append("\n"); 
		query.append("ELSE 'E'" ).append("\n"); 
		query.append("END	ESVC_TP_CD		," ).append("\n"); 
		query.append("TM.TAA_PROP_NO		," ).append("\n"); 
		query.append("TM.AMDT_SEQ				," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("WHEN L4.CML_ZN_FLG = 'Y' AND L3.RGN_CD IN ( 'UAG', 'UAN', 'UAS' ) THEN 'CZ'" ).append("\n"); 
		query.append("ELSE 'NN'" ).append("\n"); 
		query.append("END CML_ZN_CD			," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("WHEN	L3.CNT_CD IN ( 'US', 'CA' ) AND BK.POD_CD = BK.DEL_CD AND BK.DE_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'" ).append("\n"); 
		query.append("WHEN	L3.CNT_CD IN ( 'US', 'CA' ) THEN NVL(( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L3.RGN_CD AND A.DEST_RGN_CD = L4.RGN_CD ), 'OT')" ).append("\n"); 
		query.append("WHEN	L2.CNT_CD IN ( 'US', 'CA' ) AND BK.POL_CD = BK.POR_CD AND BK.RCV_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'" ).append("\n"); 
		query.append("WHEN	L2.CNT_CD IN ( 'US', 'CA' ) THEN NVL(( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L2.RGN_CD AND A.DEST_RGN_CD = L1.RGN_CD ), 'OT')" ).append("\n"); 
		query.append("END		USA_SVC_MOD_CD	,	-- PO, LO, IP, ML, OT" ).append("\n"); 
		query.append("BK.POR_CD														," ).append("\n"); 
		query.append("L1.CNT_CD||L1.STE_CD	POR_STE_CD		," ).append("\n"); 
		query.append("L1.RGN_CD							POR_RGN_CD		," ).append("\n"); 
		query.append("L1.CNT_CD							POR_CNT_CD		," ).append("\n"); 
		query.append("L1.CONTI_CD						POR_CONTI_CD	," ).append("\n"); 
		query.append("BK.POL_CD														," ).append("\n"); 
		query.append("L2.CNT_CD||L2.STE_CD	POL_STE_CD		," ).append("\n"); 
		query.append("L2.RGN_CD							POL_RGN_CD		," ).append("\n"); 
		query.append("L2.CNT_CD							POL_CNT_CD		," ).append("\n"); 
		query.append("L2.CONTI_CD						POL_CONTI_CD	," ).append("\n"); 
		query.append("BK.POD_CD														," ).append("\n"); 
		query.append("L3.CNT_CD||L3.STE_CD	POD_STE_CD		," ).append("\n"); 
		query.append("L3.RGN_CD							POD_RGN_CD		," ).append("\n"); 
		query.append("L3.CNT_CD							POD_CNT_CD		," ).append("\n"); 
		query.append("L3.CONTI_CD						POD_CONTI_CD	," ).append("\n"); 
		query.append("BK.DEL_CD														," ).append("\n"); 
		query.append("L4.CNT_CD||L4.STE_CD	DEL_STE_CD		," ).append("\n"); 
		query.append("L4.RGN_CD							DEL_RGN_CD		," ).append("\n"); 
		query.append("L4.CNT_CD							DEL_CNT_CD		," ).append("\n"); 
		query.append("L4.CONTI_CD						DEL_CONTI_CD	," ).append("\n"); 
		query.append("BK.PRE_RLY_PORT_CD									," ).append("\n"); 
		query.append("BK.PST_RLY_PORT_CD									," ).append("\n"); 
		query.append("BK.POL_NOD_CD												," ).append("\n"); 
		query.append("BK.POD_NOD_CD												," ).append("\n"); 
		query.append("BK.ORG_TRNS_MOD_CD									," ).append("\n"); 
		query.append("BK.DEST_TRNS_MOD_CD									," ).append("\n"); 
		query.append("BK.AGMT_ACT_CNT_CD									," ).append("\n"); 
		query.append("BK.AGMT_ACT_CUST_SEQ								," ).append("\n"); 
		query.append("( SELECT SUM(A.OP_CNTR_QTY) FROM BKG_QTY_DTL A WHERE A.BKG_NO = BK.BKG_NO )	CNTR_QTY	," ).append("\n"); 
		query.append("DECODE(BB.MEAS_UT_CD, 'CBF', BB.MEAS_QTY	* 0.0283	, BB.MEAS_QTY	)					MEAS_QTY	," ).append("\n"); 
		query.append("DECODE(BB.WGT_UT_CD	, 'LBS', BB.ACT_WGT		* 0.45359	, BB.ACT_WGT	)					ACT_WGT" ).append("\n"); 
		query.append("FROM		BKG_BOOKING		BK	," ).append("\n"); 
		query.append("BKG_BL_DOC		BB	," ).append("\n"); 
		query.append("BKG_RATE			BR	," ).append("\n"); 
		query.append("MDM_LOCATION	L1	," ).append("\n"); 
		query.append("MDM_LOCATION	L2	," ).append("\n"); 
		query.append("MDM_LOCATION	L3	," ).append("\n"); 
		query.append("MDM_LOCATION	L4	," ).append("\n"); 
		query.append("PRI_TAA_HDR		TH	," ).append("\n"); 
		query.append("PRI_TAA_MN		TM" ).append("\n"); 
		query.append("WHERE		BB.BKG_NO				= BK.BKG_NO" ).append("\n"); 
		query.append("AND			BR.BKG_NO(+)		= BK.BKG_NO" ).append("\n"); 
		query.append("AND			L1.LOC_CD				= BK.POR_CD" ).append("\n"); 
		query.append("AND			L2.LOC_CD				= BK.POL_CD" ).append("\n"); 
		query.append("AND			L3.LOC_CD				= BK.POD_CD" ).append("\n"); 
		query.append("AND			L4.LOC_CD				= BK.DEL_CD" ).append("\n"); 
		query.append("AND			TH.TAA_NO				= BK.TAA_NO" ).append("\n"); 
		query.append("AND	   	TM.TAA_PROP_NO	= TH.TAA_PROP_NO" ).append("\n"); 
		query.append("AND			TM.SVC_SCP_CD		= BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND     TM.CFM_FLG			= 'Y'				-- CONFIRMED TAA" ).append("\n"); 
		query.append("AND			NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), ( SELECT TO_DATE(RT_APLY_DT) FROM BKG_RATE A WHERE A.BKG_NO = BK.BKG_NO ))	BETWEEN TM.EFF_DT AND TM.EXP_DT" ).append("\n"); 
		query.append("AND			BK.BKG_NO				= @[bkg_no]	-- BKG No" ).append("\n"); 
		query.append("AND			@[ca_flg]				= 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	BK.BKG_NO					," ).append("\n"); 
		query.append("BK.CORR_NO				," ).append("\n"); 
		query.append("NVL(@[cmdt_cd], BK.CMDT_CD)	CMDT_CD	," ).append("\n"); 
		query.append("( SELECT REP_CMDT_CD FROM MDM_COMMODITY WHERE CMDT_CD = NVL(@[cmdt_cd], BK.CMDT_CD) )	REP_CMDT_CD	," ).append("\n"); 
		query.append("DECODE(BK.PRE_RLY_PORT_CD||BK.PST_RLY_PORT_CD,NULL,'Y','N') DIR_CALL_FLG	," ).append("\n"); 
		query.append("NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), TO_DATE(BR.RT_APLY_DT))		RT_APLY_DT		," ).append("\n"); 
		query.append("BK.SVC_SCP_CD			," ).append("\n"); 
		query.append("'T' CTRT_TP_CD		," ).append("\n"); 
		query.append("BK.SC_NO					," ).append("\n"); 
		query.append("BK.RFA_NO					," ).append("\n"); 
		query.append("BK.TAA_NO					," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("WHEN BK.XTER_BKG_RQST_CD = 'NIS' THEN 'N'" ).append("\n"); 
		query.append("WHEN BK.XTER_BKG_RQST_CD = 'WEB' THEN 'W'" ).append("\n"); 
		query.append("WHEN BK.XTER_BKG_RQST_CD = 'DSK' THEN 'D'" ).append("\n"); 
		query.append("ELSE 'E'" ).append("\n"); 
		query.append("END	ESVC_TP_CD		," ).append("\n"); 
		query.append("TM.TAA_PROP_NO		," ).append("\n"); 
		query.append("TM.AMDT_SEQ				," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("WHEN L4.CML_ZN_FLG = 'Y' AND L3.RGN_CD IN ( 'UAG', 'UAN', 'UAS' ) THEN 'CZ'" ).append("\n"); 
		query.append("ELSE 'NN'" ).append("\n"); 
		query.append("END CML_ZN_CD			," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("WHEN	L3.CNT_CD IN ( 'US', 'CA' ) AND BK.POD_CD = BK.DEL_CD AND BK.DE_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'" ).append("\n"); 
		query.append("WHEN	L3.CNT_CD IN ( 'US', 'CA' ) THEN ( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L3.RGN_CD AND A.DEST_RGN_CD = L4.RGN_CD )" ).append("\n"); 
		query.append("WHEN	L2.CNT_CD IN ( 'US', 'CA' ) AND BK.POL_CD = BK.POR_CD AND BK.RCV_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'" ).append("\n"); 
		query.append("WHEN	L2.CNT_CD IN ( 'US', 'CA' ) THEN ( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L2.RGN_CD AND A.DEST_RGN_CD = L1.RGN_CD )" ).append("\n"); 
		query.append("END		USA_SVC_MOD_CD	,	-- PO, LO, IP, ML" ).append("\n"); 
		query.append("BK.POR_CD														," ).append("\n"); 
		query.append("L1.CNT_CD||L1.STE_CD	POR_STE_CD		," ).append("\n"); 
		query.append("L1.RGN_CD							POR_RGN_CD		," ).append("\n"); 
		query.append("L1.CNT_CD							POR_CNT_CD		," ).append("\n"); 
		query.append("L1.CONTI_CD						POR_CONTI_CD	," ).append("\n"); 
		query.append("BK.POL_CD														," ).append("\n"); 
		query.append("L2.CNT_CD||L2.STE_CD	POL_STE_CD		," ).append("\n"); 
		query.append("L2.RGN_CD							POL_RGN_CD		," ).append("\n"); 
		query.append("L2.CNT_CD							POL_CNT_CD		," ).append("\n"); 
		query.append("L2.CONTI_CD						POL_CONTI_CD	," ).append("\n"); 
		query.append("BK.POD_CD														," ).append("\n"); 
		query.append("L3.CNT_CD||L3.STE_CD	POD_STE_CD		," ).append("\n"); 
		query.append("L3.RGN_CD							POD_RGN_CD		," ).append("\n"); 
		query.append("L3.CNT_CD							POD_CNT_CD		," ).append("\n"); 
		query.append("L3.CONTI_CD						POD_CONTI_CD	," ).append("\n"); 
		query.append("BK.DEL_CD														," ).append("\n"); 
		query.append("L4.CNT_CD||L4.STE_CD	DEL_STE_CD		," ).append("\n"); 
		query.append("L4.RGN_CD							DEL_RGN_CD		," ).append("\n"); 
		query.append("L4.CNT_CD							DEL_CNT_CD		," ).append("\n"); 
		query.append("L4.CONTI_CD						DEL_CONTI_CD	," ).append("\n"); 
		query.append("BK.PRE_RLY_PORT_CD									," ).append("\n"); 
		query.append("BK.PST_RLY_PORT_CD									," ).append("\n"); 
		query.append("BK.POL_NOD_CD												," ).append("\n"); 
		query.append("BK.POD_NOD_CD												," ).append("\n"); 
		query.append("BK.ORG_TRNS_MOD_CD									," ).append("\n"); 
		query.append("BK.DEST_TRNS_MOD_CD									," ).append("\n"); 
		query.append("BK.AGMT_ACT_CNT_CD									," ).append("\n"); 
		query.append("BK.AGMT_ACT_CUST_SEQ								," ).append("\n"); 
		query.append("( SELECT SUM(A.OP_CNTR_QTY) FROM BKG_QTY_DTL_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO )	CNTR_QTY	," ).append("\n"); 
		query.append("DECODE(BB.MEAS_UT_CD, 'CBF', BB.MEAS_QTY	* 0.0283	, BB.MEAS_QTY	)		MEAS_QTY	," ).append("\n"); 
		query.append("DECODE(BB.WGT_UT_CD	, 'LBS', BB.ACT_WGT		* 0.45359	, BB.ACT_WGT	)		ACT_WGT" ).append("\n"); 
		query.append("FROM		BKG_BKG_HIS				BK	," ).append("\n"); 
		query.append("BKG_BL_DOC_HIS		BB	," ).append("\n"); 
		query.append("BKG_RT_HIS				BR	," ).append("\n"); 
		query.append("MDM_LOCATION			L1	," ).append("\n"); 
		query.append("MDM_LOCATION			L2	," ).append("\n"); 
		query.append("MDM_LOCATION			L3	," ).append("\n"); 
		query.append("MDM_LOCATION			L4	," ).append("\n"); 
		query.append("PRI_TAA_HDR				TH	," ).append("\n"); 
		query.append("PRI_TAA_MN				TM" ).append("\n"); 
		query.append("WHERE		BB.BKG_NO				= BK.BKG_NO" ).append("\n"); 
		query.append("AND			BB.CORR_NO			= BK.CORR_NO" ).append("\n"); 
		query.append("AND			BR.BKG_NO(+)		= BK.BKG_NO" ).append("\n"); 
		query.append("AND			BR.CORR_NO(+)		= BK.CORR_NO" ).append("\n"); 
		query.append("AND			L1.LOC_CD				= BK.POR_CD" ).append("\n"); 
		query.append("AND			L2.LOC_CD				= BK.POL_CD" ).append("\n"); 
		query.append("AND			L3.LOC_CD				= BK.POD_CD" ).append("\n"); 
		query.append("AND			L4.LOC_CD				= BK.DEL_CD" ).append("\n"); 
		query.append("AND			TH.TAA_NO				= BK.TAA_NO" ).append("\n"); 
		query.append("AND	   	TM.TAA_PROP_NO	= TH.TAA_PROP_NO" ).append("\n"); 
		query.append("AND			TM.SVC_SCP_CD		= BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND     TM.CFM_FLG			= 'Y'				-- CONFIRMED TAA" ).append("\n"); 
		query.append("AND			NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), ( SELECT TO_DATE(RT_APLY_DT) FROM BKG_RT_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO ))	BETWEEN TM.EFF_DT AND TM.EXP_DT" ).append("\n"); 
		query.append("AND			BK.BKG_NO				= @[bkg_no]	-- BKG No" ).append("\n"); 
		query.append("AND			BK.CORR_NO			= 'TMP0000001'	-- CORRECTION 중인 DATA 를 나타내는 고정된 상수값" ).append("\n"); 
		query.append("AND			@[ca_flg]				= 'Y'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")	," ).append("\n"); 
		query.append("BQ AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("AUTORATING 을 실행할 단위(ROW) 를 SELECT 한다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("IMDG CLASS 을 경우 해당 CNTR TP/SZ 별 MIN 값을 취한다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("현재는 요구사항에 없으나, 향후 실제 TP/SZ 가 필요할때를 대비하여 CNTR_TPSZ_CD 를 가지고 있는다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("POR, POL, POD, DEL, PRE RELAY, POST RELAY 에 대해서는 ROUTE CONVERSION 을 적용한다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("D7/AK 를 D7/DR 운임 적용을 위한 예외 로직도 여기서 적용한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	BK.BKG_NO									," ).append("\n"); 
		query.append("BK.CORR_NO								," ).append("\n"); 
		query.append("ROW_NUMBER() OVER ( PARTITION BY BK.BKG_NO ORDER BY BQ.BKG_BQ_SEQ ) BQ_SEQ	," ).append("\n"); 
		query.append("BK.CMDT_CD								," ).append("\n"); 
		query.append("BK.REP_CMDT_CD						," ).append("\n"); 
		query.append("BK.DIR_CALL_FLG						," ).append("\n"); 
		query.append("BK.RT_APLY_DT							," ).append("\n"); 
		query.append("BK.SVC_SCP_CD							," ).append("\n"); 
		query.append("BK.CTRT_TP_CD							," ).append("\n"); 
		query.append("BK.SC_NO									," ).append("\n"); 
		query.append("BK.RFA_NO									," ).append("\n"); 
		query.append("BK.TAA_NO									," ).append("\n"); 
		query.append("BK.ESVC_TP_CD							," ).append("\n"); 
		query.append("BK.TAA_PROP_NO						," ).append("\n"); 
		query.append("BK.AMDT_SEQ								," ).append("\n"); 
		query.append("BK.CML_ZN_CD							," ).append("\n"); 
		query.append("BK.USA_SVC_MOD_CD					," ).append("\n"); 
		query.append("RC.POR_CD									," ).append("\n"); 
		query.append("RC.POR_STE_CD							," ).append("\n"); 
		query.append("RC.POR_RGN_CD							," ).append("\n"); 
		query.append("RC.POR_CNT_CD							," ).append("\n"); 
		query.append("RC.POR_CONTI_CD						," ).append("\n"); 
		query.append("RC.POL_CD									," ).append("\n"); 
		query.append("RC.POL_STE_CD							," ).append("\n"); 
		query.append("RC.POL_RGN_CD							," ).append("\n"); 
		query.append("RC.POL_CNT_CD							," ).append("\n"); 
		query.append("RC.POL_CONTI_CD						," ).append("\n"); 
		query.append("RC.POD_CD									," ).append("\n"); 
		query.append("RC.POD_STE_CD							," ).append("\n"); 
		query.append("RC.POD_RGN_CD							," ).append("\n"); 
		query.append("RC.POD_CNT_CD							," ).append("\n"); 
		query.append("RC.POD_CONTI_CD						," ).append("\n"); 
		query.append("RC.DEL_CD									," ).append("\n"); 
		query.append("RC.DEL_STE_CD							," ).append("\n"); 
		query.append("RC.DEL_RGN_CD							," ).append("\n"); 
		query.append("RC.DEL_CNT_CD							," ).append("\n"); 
		query.append("RC.DEL_CONTI_CD						," ).append("\n"); 
		query.append("RC.PRE_RLY_PORT_CD				," ).append("\n"); 
		query.append("RC.PST_RLY_PORT_CD				," ).append("\n"); 
		query.append("BK.POL_NOD_CD							," ).append("\n"); 
		query.append("BK.POD_NOD_CD							," ).append("\n"); 
		query.append("RC.POR_APPL_FLG						," ).append("\n"); 
		query.append("RC.POL_APPL_FLG						," ).append("\n"); 
		query.append("RC.POD_APPL_FLG						," ).append("\n"); 
		query.append("RC.DEL_APPL_FLG						," ).append("\n"); 
		query.append("RC.PRE_RLY_PORT_APPL_FLG	," ).append("\n"); 
		query.append("RC.PST_RLY_PORT_APPL_FLG	," ).append("\n"); 
		query.append("BK.ORG_TRNS_MOD_CD				," ).append("\n"); 
		query.append("BK.DEST_TRNS_MOD_CD				," ).append("\n"); 
		query.append("BK.AGMT_ACT_CNT_CD				," ).append("\n"); 
		query.append("BK.AGMT_ACT_CUST_SEQ			," ).append("\n"); 
		query.append("BK.CNTR_QTY								," ).append("\n"); 
		query.append("BK.MEAS_QTY								," ).append("\n"); 
		query.append("BK.ACT_WGT								," ).append("\n"); 
		query.append("BQ.BKG_BQ_SEQ							," ).append("\n"); 
		query.append("BQ.CNTR_TPSZ_CD						," ).append("\n"); 
		query.append("BQ.CTRT_CNTR_TPSZ_CD			," ).append("\n"); 
		query.append("( SELECT A.CNTR_SZ_CD FROM MDM_CNTR_TP_SZ A WHERE A.CNTR_TPSZ_CD = BQ.CTRT_CNTR_TPSZ_CD ) CTRT_CNTR_SZ_CD	," ).append("\n"); 
		query.append("BQ.RCV_TERM_CD						," ).append("\n"); 
		query.append("BQ.DE_TERM_CD							," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("/* D7/AK 를 D7/DR 운임 적용을 위한 예외 로직 */" ).append("\n"); 
		query.append("WHEN BQ.CTRT_CNTR_TPSZ_CD = 'D7' AND BQ.AWK_CGO_FLG = 'Y' THEN 'DR'" ).append("\n"); 
		query.append("WHEN BQ.DRY_CGO_FLG = 'Y' THEN 'DR'" ).append("\n"); 
		query.append("END																	DR_TP		," ).append("\n"); 
		query.append("DECODE(BQ.DCGO_FLG		, 'Y', 'DG')	DG_TP		," ).append("\n"); 
		query.append("DECODE(BQ.RC_FLG			, 'Y', 'RF')	RF_TP		," ).append("\n"); 
		query.append("DECODE(BQ.AWK_CGO_FLG	, 'Y', 'AK')	AK_TP		," ).append("\n"); 
		query.append("DECODE(BQ.BB_CGO_FLG	, 'Y', 'BB')	BB_TP		," ).append("\n"); 
		query.append("BQ.DRY_CGO_FLG						," ).append("\n"); 
		query.append("BQ.DCGO_FLG								," ).append("\n"); 
		query.append("BQ.RC_FLG									," ).append("\n"); 
		query.append("BQ.AWK_CGO_FLG						," ).append("\n"); 
		query.append("BQ.BB_CGO_FLG							," ).append("\n"); 
		query.append("BQ.SOC_FLG								," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("WHEN BQ.DCGO_FLG 		= 'Y' THEN 'DG'" ).append("\n"); 
		query.append("WHEN BQ.AWK_CGO_FLG	= 'Y' THEN 'AK'" ).append("\n"); 
		query.append("WHEN BQ.RC_FLG	 		= 'Y' THEN 'RF'" ).append("\n"); 
		query.append("WHEN BQ.BB_CGO_FLG	= 'Y' THEN 'BB'" ).append("\n"); 
		query.append("ELSE 'DR'" ).append("\n"); 
		query.append("END	PRC_CGO_TP_CD					," ).append("\n"); 
		query.append("BQ.IMDG_CLSS_CD						," ).append("\n"); 
		query.append("BQ.CTRT_CNTR_QTY" ).append("\n"); 
		query.append("FROM		BK	," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	QD.BKG_NO									," ).append("\n"); 
		query.append("ROW_NUMBER() OVER ( PARTITION BY QD.BKG_NO ORDER BY QD.CNTR_TPSZ_CD, QD.CTRT_CNTR_TPSZ_CD, QD.RCV_TERM_CD, QD.DE_TERM_CD, QD.DRY_CGO_FLG, QD.AWK_CGO_FLG, QD.DCGO_FLG, QD.RC_FLG, QD.BB_CGO_FLG, QD.SOC_FLG, QD.IMDG_CLSS_CD )	BKG_BQ_SEQ	," ).append("\n"); 
		query.append("QD.CNTR_TPSZ_CD						," ).append("\n"); 
		query.append("QD.CTRT_CNTR_TPSZ_CD			," ).append("\n"); 
		query.append("QD.RCV_TERM_CD						," ).append("\n"); 
		query.append("QD.DE_TERM_CD							," ).append("\n"); 
		query.append("QD.DRY_CGO_FLG						," ).append("\n"); 
		query.append("QD.AWK_CGO_FLG						," ).append("\n"); 
		query.append("QD.DCGO_FLG								," ).append("\n"); 
		query.append("QD.RC_FLG									," ).append("\n"); 
		query.append("QD.BB_CGO_FLG							," ).append("\n"); 
		query.append("QD.SOC_FLG								," ).append("\n"); 
		query.append("QD.IMDG_CLSS_CD						," ).append("\n"); 
		query.append("QD.CTRT_CNTR_QTY" ).append("\n"); 
		query.append("FROM		(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	QD.BKG_NO									," ).append("\n"); 
		query.append("QD.CNTR_TPSZ_CD						," ).append("\n"); 
		query.append("QD.CTRT_CNTR_TPSZ_CD			," ).append("\n"); 
		query.append("QD.RCV_TERM_CD						," ).append("\n"); 
		query.append("QD.DE_TERM_CD							," ).append("\n"); 
		query.append("QD.DRY_CGO_FLG						," ).append("\n"); 
		query.append("QD.AWK_CGO_FLG						," ).append("\n"); 
		query.append("QD.DCGO_FLG								," ).append("\n"); 
		query.append("QD.RC_FLG									," ).append("\n"); 
		query.append("QD.BB_CGO_FLG							," ).append("\n"); 
		query.append("QD.SOC_FLG								," ).append("\n"); 
		query.append("DECODE(QD.DCGO_FLG, 'Y', ( SELECT MIN(IMDG_CLSS_CD) FROM BKG_DG_CGO A WHERE A.BKG_NO = QD.BKG_NO AND A.CNTR_TPSZ_CD = QD.CNTR_TPSZ_CD ))	IMDG_CLSS_CD	," ).append("\n"); 
		query.append("QD.CTRT_CNTR_QTY" ).append("\n"); 
		query.append("FROM		(" ).append("\n"); 
		query.append("SELECT	QD.BKG_NO										," ).append("\n"); 
		query.append("QD.CNTR_TPSZ_CD							," ).append("\n"); 
		query.append("NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)	CTRT_CNTR_TPSZ_CD	," ).append("\n"); 
		query.append("QD.RCV_TERM_CD							," ).append("\n"); 
		query.append("QD.DE_TERM_CD								," ).append("\n"); 
		query.append("QD.DRY_CGO_FLG							," ).append("\n"); 
		query.append("QD.AWK_CGO_FLG							," ).append("\n"); 
		query.append("QD.DCGO_FLG									," ).append("\n"); 
		query.append("QD.RC_FLG										," ).append("\n"); 
		query.append("QD.BB_CGO_FLG								," ).append("\n"); 
		query.append("QD.SOC_FLG									," ).append("\n"); 
		query.append("SUM(QD.OP_CNTR_QTY) CTRT_CNTR_QTY" ).append("\n"); 
		query.append("FROM		BK	," ).append("\n"); 
		query.append("BKG_QTY_DTL	QD" ).append("\n"); 
		query.append("WHERE		QD.BKG_NO		= BK.BKG_NO" ).append("\n"); 
		query.append("GROUP BY" ).append("\n"); 
		query.append("QD.BKG_NO									," ).append("\n"); 
		query.append("QD.CNTR_TPSZ_CD						," ).append("\n"); 
		query.append("NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)	," ).append("\n"); 
		query.append("QD.RCV_TERM_CD						," ).append("\n"); 
		query.append("QD.DE_TERM_CD							," ).append("\n"); 
		query.append("QD.DRY_CGO_FLG						," ).append("\n"); 
		query.append("QD.AWK_CGO_FLG						," ).append("\n"); 
		query.append("QD.DCGO_FLG								," ).append("\n"); 
		query.append("QD.RC_FLG									," ).append("\n"); 
		query.append("QD.BB_CGO_FLG							," ).append("\n"); 
		query.append("QD.SOC_FLG" ).append("\n"); 
		query.append(")	QD" ).append("\n"); 
		query.append("WHERE		@[ca_flg]		= 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	QD.BKG_NO									," ).append("\n"); 
		query.append("QD.CNTR_TPSZ_CD						," ).append("\n"); 
		query.append("QD.CTRT_CNTR_TPSZ_CD			," ).append("\n"); 
		query.append("QD.RCV_TERM_CD						," ).append("\n"); 
		query.append("QD.DE_TERM_CD							," ).append("\n"); 
		query.append("QD.DRY_CGO_FLG						," ).append("\n"); 
		query.append("QD.AWK_CGO_FLG						," ).append("\n"); 
		query.append("QD.DCGO_FLG								," ).append("\n"); 
		query.append("QD.RC_FLG									," ).append("\n"); 
		query.append("QD.BB_CGO_FLG							," ).append("\n"); 
		query.append("QD.SOC_FLG								," ).append("\n"); 
		query.append("DECODE(QD.DCGO_FLG, 'Y', ( SELECT MIN(IMDG_CLSS_CD) FROM BKG_DG_CGO_HIS A WHERE A.BKG_NO = QD.BKG_NO AND A.CORR_NO = QD.CORR_NO AND A.CNTR_TPSZ_CD = QD.CNTR_TPSZ_CD ))	IMDG_CLSS_CD	," ).append("\n"); 
		query.append("QD.CTRT_CNTR_QTY" ).append("\n"); 
		query.append("FROM		(" ).append("\n"); 
		query.append("SELECT	QD.BKG_NO										," ).append("\n"); 
		query.append("QD.CORR_NO									," ).append("\n"); 
		query.append("QD.CNTR_TPSZ_CD							," ).append("\n"); 
		query.append("NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)	CTRT_CNTR_TPSZ_CD	," ).append("\n"); 
		query.append("QD.RCV_TERM_CD							," ).append("\n"); 
		query.append("QD.DE_TERM_CD								," ).append("\n"); 
		query.append("QD.DRY_CGO_FLG							," ).append("\n"); 
		query.append("QD.AWK_CGO_FLG							," ).append("\n"); 
		query.append("QD.DCGO_FLG									," ).append("\n"); 
		query.append("QD.RC_FLG										," ).append("\n"); 
		query.append("QD.BB_CGO_FLG								," ).append("\n"); 
		query.append("QD.SOC_FLG									," ).append("\n"); 
		query.append("SUM(QD.OP_CNTR_QTY) CTRT_CNTR_QTY" ).append("\n"); 
		query.append("FROM		BK	," ).append("\n"); 
		query.append("BKG_QTY_DTL_HIS	QD" ).append("\n"); 
		query.append("WHERE		QD.BKG_NO		= BK.BKG_NO" ).append("\n"); 
		query.append("AND			QD.CORR_NO	= BK.CORR_NO" ).append("\n"); 
		query.append("GROUP BY" ).append("\n"); 
		query.append("QD.BKG_NO									," ).append("\n"); 
		query.append("QD.CORR_NO								," ).append("\n"); 
		query.append("QD.CNTR_TPSZ_CD						," ).append("\n"); 
		query.append("NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)	," ).append("\n"); 
		query.append("QD.RCV_TERM_CD						," ).append("\n"); 
		query.append("QD.DE_TERM_CD							," ).append("\n"); 
		query.append("QD.DRY_CGO_FLG						," ).append("\n"); 
		query.append("QD.AWK_CGO_FLG						," ).append("\n"); 
		query.append("QD.DCGO_FLG								," ).append("\n"); 
		query.append("QD.RC_FLG									," ).append("\n"); 
		query.append("QD.BB_CGO_FLG							," ).append("\n"); 
		query.append("QD.SOC_FLG" ).append("\n"); 
		query.append(")	QD" ).append("\n"); 
		query.append("WHERE		@[ca_flg]		= 'Y'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")	QD" ).append("\n"); 
		query.append(")	BQ	," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("이 부분은 SURCHARGE 에는 적용하지 않고, OFT 에만 적용한다. ( S/C, RFA, TAA 공통 적용 )" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	A.BKG_NO								," ).append("\n"); 
		query.append("A.POR_CD								," ).append("\n"); 
		query.append("A.POR_STE_CD						," ).append("\n"); 
		query.append("A.POR_RGN_CD						," ).append("\n"); 
		query.append("A.POR_CNT_CD						," ).append("\n"); 
		query.append("A.POR_CONTI_CD					," ).append("\n"); 
		query.append("A.POR_APPL_FLG					," ).append("\n"); 
		query.append("B.POL_CD								," ).append("\n"); 
		query.append("B.POL_STE_CD						," ).append("\n"); 
		query.append("B.POL_RGN_CD						," ).append("\n"); 
		query.append("B.POL_CNT_CD						," ).append("\n"); 
		query.append("B.POL_CONTI_CD					," ).append("\n"); 
		query.append("B.POL_APPL_FLG					," ).append("\n"); 
		query.append("C.POD_CD								," ).append("\n"); 
		query.append("C.POD_STE_CD						," ).append("\n"); 
		query.append("C.POD_RGN_CD						," ).append("\n"); 
		query.append("C.POD_CNT_CD						," ).append("\n"); 
		query.append("C.POD_CONTI_CD					," ).append("\n"); 
		query.append("C.POD_APPL_FLG					," ).append("\n"); 
		query.append("D.DEL_CD								," ).append("\n"); 
		query.append("D.DEL_STE_CD						," ).append("\n"); 
		query.append("D.DEL_RGN_CD						," ).append("\n"); 
		query.append("D.DEL_CNT_CD						," ).append("\n"); 
		query.append("D.DEL_CONTI_CD					," ).append("\n"); 
		query.append("D.DEL_APPL_FLG					," ).append("\n"); 
		query.append("E.PRE_RLY_PORT_CD				," ).append("\n"); 
		query.append("E.PRE_RLY_PORT_APPL_FLG	," ).append("\n"); 
		query.append("F.PST_RLY_PORT_CD				," ).append("\n"); 
		query.append("F.PST_RLY_PORT_APPL_FLG" ).append("\n"); 
		query.append("FROM		(" ).append("\n"); 
		query.append("SELECT	BKG_NO							," ).append("\n"); 
		query.append("POR_CD							," ).append("\n"); 
		query.append("POR_STE_CD					," ).append("\n"); 
		query.append("POR_RGN_CD					," ).append("\n"); 
		query.append("POR_CNT_CD					," ).append("\n"); 
		query.append("POR_CONTI_CD				," ).append("\n"); 
		query.append("'N'	POR_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT	BK.BKG_NO						," ).append("\n"); 
		query.append("RC.CONV_LOC_CD				POR_CD				," ).append("\n"); 
		query.append("ML.CNT_CD||ML.STE_CD	POR_STE_CD		," ).append("\n"); 
		query.append("ML.RGN_CD							POR_RGN_CD		," ).append("\n"); 
		query.append("ML.CNT_CD							POR_CNT_CD		," ).append("\n"); 
		query.append("ML.CONTI_CD						POR_CONTI_CD	," ).append("\n"); 
		query.append("RC.POR_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK	," ).append("\n"); 
		query.append("PRI_ROUT_LOC_CONV	RC	," ).append("\n"); 
		query.append("MDM_LOCATION	ML" ).append("\n"); 
		query.append("WHERE		RC.SVC_SCP_CD		= BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND			RC.ORG_LOC_CD		= BK.POR_CD" ).append("\n"); 
		query.append("AND			RC.POR_APPL_FLG	= 'Y'" ).append("\n"); 
		query.append("AND			ML.LOC_CD				= RC.CONV_LOC_CD" ).append("\n"); 
		query.append(")	A	," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	BKG_NO							," ).append("\n"); 
		query.append("POL_CD							," ).append("\n"); 
		query.append("POL_STE_CD					," ).append("\n"); 
		query.append("POL_RGN_CD					," ).append("\n"); 
		query.append("POL_CNT_CD					," ).append("\n"); 
		query.append("POL_CONTI_CD				," ).append("\n"); 
		query.append("'N'	POL_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT	BK.BKG_NO						," ).append("\n"); 
		query.append("RC.CONV_LOC_CD				POL_CD				," ).append("\n"); 
		query.append("ML.CNT_CD||ML.STE_CD	POL_STE_CD		," ).append("\n"); 
		query.append("ML.RGN_CD							POL_RGN_CD		," ).append("\n"); 
		query.append("ML.CNT_CD							POL_CNT_CD		," ).append("\n"); 
		query.append("ML.CONTI_CD						POL_CONTI_CD	," ).append("\n"); 
		query.append("RC.POL_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK	," ).append("\n"); 
		query.append("PRI_ROUT_LOC_CONV	RC	," ).append("\n"); 
		query.append("MDM_LOCATION	ML" ).append("\n"); 
		query.append("WHERE		RC.SVC_SCP_CD		= BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND			RC.ORG_LOC_CD		= BK.POL_CD" ).append("\n"); 
		query.append("AND			RC.POL_APPL_FLG	= 'Y'" ).append("\n"); 
		query.append("AND			ML.LOC_CD				= RC.CONV_LOC_CD" ).append("\n"); 
		query.append(")	B	," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	BKG_NO							," ).append("\n"); 
		query.append("POD_CD							," ).append("\n"); 
		query.append("POD_STE_CD					," ).append("\n"); 
		query.append("POD_RGN_CD					," ).append("\n"); 
		query.append("POD_CNT_CD					," ).append("\n"); 
		query.append("POD_CONTI_CD				," ).append("\n"); 
		query.append("'N'	POD_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT	BK.BKG_NO						," ).append("\n"); 
		query.append("RC.CONV_LOC_CD				POD_CD				," ).append("\n"); 
		query.append("ML.CNT_CD||ML.STE_CD	POD_STE_CD		," ).append("\n"); 
		query.append("ML.RGN_CD							POD_RGN_CD		," ).append("\n"); 
		query.append("ML.CNT_CD							POD_CNT_CD		," ).append("\n"); 
		query.append("ML.CONTI_CD						POD_CONTI_CD	," ).append("\n"); 
		query.append("RC.POD_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK	," ).append("\n"); 
		query.append("PRI_ROUT_LOC_CONV	RC	," ).append("\n"); 
		query.append("MDM_LOCATION	ML" ).append("\n"); 
		query.append("WHERE		RC.SVC_SCP_CD		= BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND			RC.ORG_LOC_CD		= BK.POD_CD" ).append("\n"); 
		query.append("AND			RC.POD_APPL_FLG	= 'Y'" ).append("\n"); 
		query.append("AND			ML.LOC_CD				= RC.CONV_LOC_CD" ).append("\n"); 
		query.append(")	C	," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	BKG_NO							," ).append("\n"); 
		query.append("DEL_CD							," ).append("\n"); 
		query.append("DEL_STE_CD					," ).append("\n"); 
		query.append("DEL_RGN_CD					," ).append("\n"); 
		query.append("DEL_CNT_CD					," ).append("\n"); 
		query.append("DEL_CONTI_CD				," ).append("\n"); 
		query.append("'N'	DEL_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT	BK.BKG_NO						," ).append("\n"); 
		query.append("RC.CONV_LOC_CD				DEL_CD				," ).append("\n"); 
		query.append("ML.CNT_CD||ML.STE_CD	DEL_STE_CD		," ).append("\n"); 
		query.append("ML.RGN_CD							DEL_RGN_CD		," ).append("\n"); 
		query.append("ML.CNT_CD							DEL_CNT_CD		," ).append("\n"); 
		query.append("ML.CONTI_CD						DEL_CONTI_CD	," ).append("\n"); 
		query.append("RC.DEL_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK	," ).append("\n"); 
		query.append("PRI_ROUT_LOC_CONV	RC	," ).append("\n"); 
		query.append("MDM_LOCATION	ML" ).append("\n"); 
		query.append("WHERE		RC.SVC_SCP_CD		= BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND			RC.ORG_LOC_CD		= BK.DEL_CD" ).append("\n"); 
		query.append("AND			RC.DEL_APPL_FLG	= 'Y'" ).append("\n"); 
		query.append("AND			ML.LOC_CD				= RC.CONV_LOC_CD" ).append("\n"); 
		query.append(")	D	," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	BKG_NO											," ).append("\n"); 
		query.append("PRE_RLY_PORT_CD							," ).append("\n"); 
		query.append("'N'	PRE_RLY_PORT_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT	BK.BKG_NO										," ).append("\n"); 
		query.append("CONV_LOC_CD	PRE_RLY_PORT_CD	," ).append("\n"); 
		query.append("PRE_RLY_PORT_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK	," ).append("\n"); 
		query.append("PRI_ROUT_LOC_CONV	RC" ).append("\n"); 
		query.append("WHERE		RC.SVC_SCP_CD		= BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND			RC.ORG_LOC_CD		= BK.PRE_RLY_PORT_CD" ).append("\n"); 
		query.append("AND			RC.PRE_RLY_PORT_APPL_FLG	= 'Y'" ).append("\n"); 
		query.append(")	E	," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	BKG_NO											," ).append("\n"); 
		query.append("PST_RLY_PORT_CD							," ).append("\n"); 
		query.append("'N'	PST_RLY_PORT_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT	BK.BKG_NO										," ).append("\n"); 
		query.append("CONV_LOC_CD	PST_RLY_PORT_CD	," ).append("\n"); 
		query.append("PST_RLY_PORT_APPL_FLG" ).append("\n"); 
		query.append("FROM		BK	," ).append("\n"); 
		query.append("PRI_ROUT_LOC_CONV	RC" ).append("\n"); 
		query.append("WHERE		RC.SVC_SCP_CD		= BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND			RC.ORG_LOC_CD		= BK.PST_RLY_PORT_CD" ).append("\n"); 
		query.append("AND			RC.PST_RLY_PORT_APPL_FLG	= 'Y'" ).append("\n"); 
		query.append(")	F" ).append("\n"); 
		query.append("WHERE		B.BKG_NO		= A.BKG_NO" ).append("\n"); 
		query.append("AND			C.BKG_NO		= A.BKG_NO" ).append("\n"); 
		query.append("AND			D.BKG_NO		= A.BKG_NO" ).append("\n"); 
		query.append("AND			E.BKG_NO		= A.BKG_NO" ).append("\n"); 
		query.append("AND			F.BKG_NO		= A.BKG_NO" ).append("\n"); 
		query.append(")	RC" ).append("\n"); 
		query.append("WHERE		BQ.BKG_NO		= BK.BKG_NO" ).append("\n"); 
		query.append("AND			RC.BKG_NO		= BK.BKG_NO" ).append("\n"); 
		query.append(")	," ).append("\n"); 
		query.append("NC AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("BOOKING 에 해당하는 NOTE CONVERSION 을 SELECT 한다." ).append("\n"); 
		query.append("BKG_MIN_CGO_WGT, BKG_MAX_CGO_WGT, BKG_HNGR_BAR_TP_CD 는 SURCHARGE 에서만 사용되는 칼럼이고, RULE CODE 에서는 사용하지 않는다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	BQ.BKG_NO							," ).append("\n"); 
		query.append("BQ.BQ_SEQ							," ).append("\n"); 
		query.append("BQ.BKG_BQ_SEQ					," ).append("\n"); 
		query.append("NC.NOTE_CONV_MAPG_ID	," ).append("\n"); 
		query.append("NC.NOTE_CONV_SEQ			," ).append("\n"); 
		query.append("NC.TRI_PROP_NO				," ).append("\n"); 
		query.append("NC.AMDT_SEQ						," ).append("\n"); 
		query.append("(	SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) CONV_TP_PRIO	," ).append("\n"); 
		query.append("DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0)" ).append("\n"); 
		query.append("+ DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'S', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("+ DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'S', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("+ DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'S', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("+ DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'S', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("+ DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)" ).append("\n"); 
		query.append("+ DECODE(BKG_PRC_CGO_TP_CD		, NULL, 0, 1)" ).append("\n"); 
		query.append("+ DECODE(BKG_IMDG_CLSS_CD			, NULL, 0, 1)" ).append("\n"); 
		query.append("+ DECODE(BKG_USA_SVC_MOD_CD		, NULL, 0, 1)" ).append("\n"); 
		query.append("+ DECODE(BKG_RCV_TERM_CD			, NULL, 0, 1)" ).append("\n"); 
		query.append("+ DECODE(BKG_DE_TERM_CD				, NULL, 0, 1)" ).append("\n"); 
		query.append("+ DECODE(BKG_SOC_FLG					, NULL, 0, 1)" ).append("\n"); 
		query.append("+ DECODE(BKG_TS_PORT_DEF_CD		, NULL, 0, 1)" ).append("\n"); 
		query.append("+ DECODE(BKG_DIR_CALL_FLG			, NULL, 0, 1)" ).append("\n"); 
		query.append("+ DECODE(BKG_MIN_CGO_WGT			, NULL, 0, 1)" ).append("\n"); 
		query.append("+ DECODE(BKG_MAX_CGO_WGT			, NULL, 0, 1)" ).append("\n"); 
		query.append("+ DECODE(BKG_HNGR_BAR_TP_CD		, NULL, 0, 1)	MTCH_PRIO	,	/* MATCHING PRIORITY */" ).append("\n"); 
		query.append("NC.NOTE_CONV_TP_CD          ," ).append("\n"); 
		query.append("NC.CHG_RULE_TP_CD           ," ).append("\n"); 
		query.append("NC.NOTE_CONV_CHG_CD         ," ).append("\n"); 
		query.append("NC.NOTE_CONV_RULE_CD        ," ).append("\n"); 
		query.append("NC.RT_APPL_TP_CD            ," ).append("\n"); 
		query.append("NC.RT_OP_CD                 ," ).append("\n"); 
		query.append("NC.CURR_CD                  ," ).append("\n"); 
		query.append("NC.FRT_RT_AMT               ," ).append("\n"); 
		query.append("NC.PAY_TERM_CD              ," ).append("\n"); 
		query.append("NC.BKG_RAT_UT_CD						," ).append("\n"); 
		query.append("NC.BKG_PRC_CGO_TP_CD				," ).append("\n"); 
		query.append("NC.BKG_IMDG_CLSS_CD					," ).append("\n"); 
		query.append("NC.BKG_CMDT_DEF_CD					," ).append("\n"); 
		query.append("NC.BKG_USA_SVC_MOD_CD				," ).append("\n"); 
		query.append("NC.BKG_POR_DEF_CD						," ).append("\n"); 
		query.append("NC.BKG_POL_DEF_CD						," ).append("\n"); 
		query.append("NC.BKG_POD_DEF_CD						," ).append("\n"); 
		query.append("NC.BKG_DEL_DEF_CD						," ).append("\n"); 
		query.append("NC.BKG_RCV_TERM_CD          ," ).append("\n"); 
		query.append("NC.BKG_DE_TERM_CD           ," ).append("\n"); 
		query.append("NC.BKG_SOC_FLG							," ).append("\n"); 
		query.append("NC.BKG_TS_PORT_DEF_CD				," ).append("\n"); 
		query.append("NC.BKG_DIR_CALL_FLG					," ).append("\n"); 
		query.append("NVL(NC.CONV_RAT_UT_CD, BQ.CTRT_CNTR_TPSZ_CD)	CONV_RAT_UT_CD						," ).append("\n"); 
		query.append("DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.DR_TP), 'DR', 'DR')	CONV_DR_TP		," ).append("\n"); 
		query.append("DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.DG_TP), 'DG', 'DG')	CONV_DG_TP		," ).append("\n"); 
		query.append("DECODE(NVL(NC.CONV_PRC_CGO_TP_CD,	BQ.RF_TP), 'RF', 'RF')	CONV_RF_TP		," ).append("\n"); 
		query.append("DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.AK_TP), 'AK', 'AK')	CONV_AK_TP		," ).append("\n"); 
		query.append("DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.BB_TP), 'BB', 'BB')	CONV_BB_TP		," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("'TYP : '" ).append("\n"); 
		query.append("||	NC.BKG_RAT_UT_CD" ).append("\n"); 
		query.append("||	' = '" ).append("\n"); 
		query.append("||	NC.CONV_RAT_UT_CD" ).append("\n"); 
		query.append("||	' ' || NC.RT_OP_CD || ' ' || TO_CHAR(NC.FRT_RT_AMT, 'FM999999990.000') || ' (' || NC.NOTE_CONV_TP_CD || ')'" ).append("\n"); 
		query.append("TYP_CONV_CTNT									," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("'RAC : '" ).append("\n"); 
		query.append("||	NC.BKG_PRC_CGO_TP_CD" ).append("\n"); 
		query.append("||	' = '" ).append("\n"); 
		query.append("||	NC.CONV_PRC_CGO_TP_CD" ).append("\n"); 
		query.append("||	' ' || NC.RT_OP_CD || ' ' || TO_CHAR(NC.FRT_RT_AMT, 'FM999999990.000') || ' (' || NC.NOTE_CONV_TP_CD || ')'" ).append("\n"); 
		query.append("RAC_CONV_CTNT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("FROM		BQ											," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	NC.*" ).append("\n"); 
		query.append("FROM		BK											," ).append("\n"); 
		query.append("PRI_TAA_TRI_LIST		TL	," ).append("\n"); 
		query.append("PRI_TRI_RT					RT	," ).append("\n"); 
		query.append("PRI_TRI_NOTE_CONV		NC" ).append("\n"); 
		query.append("WHERE		TL.TAA_PROP_NO	= BK.TAA_PROP_NO" ).append("\n"); 
		query.append("AND			TL.AMDT_SEQ			= BK.AMDT_SEQ" ).append("\n"); 
		query.append("AND			RT.TRI_PROP_NO	= TL.TRI_PROP_NO" ).append("\n"); 
		query.append("AND			BK.RT_APLY_DT		BETWEEN RT.EFF_DT AND RT.EXP_DT + 0.99999		/* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("AND			RT.PROP_STS_CD	= 'F'" ).append("\n"); 
		query.append("AND			NC.TRI_PROP_NO	= RT.TRI_PROP_NO" ).append("\n"); 
		query.append("AND			NC.AMDT_SEQ			= RT.AMDT_SEQ" ).append("\n"); 
		query.append("AND			BK.RT_APLY_DT		BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999		/* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT	NC.*" ).append("\n"); 
		query.append("FROM		BK											," ).append("\n"); 
		query.append("PRI_SVC_SCP_TRF			ST	," ).append("\n"); 
		query.append("PRI_TRI_NOTE				TN	," ).append("\n"); 
		query.append("PRI_TRI_NOTE_CONV		NC" ).append("\n"); 
		query.append("WHERE		ST.SVC_SCP_CD	= BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND			TN.TRF_PFX_CD	= ST.TRF_PFX_CD" ).append("\n"); 
		query.append("AND			TN.TRF_NO			=	ST.TRF_NO" ).append("\n"); 
		query.append("AND			BK.RT_APLY_DT		BETWEEN TN.EFF_DT AND TN.EXP_DT + 0.99999		/* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("AND			TN.CFM_FLG		= 'Y'" ).append("\n"); 
		query.append("AND			NC.NOTE_CONV_MAPG_ID	= TN.NOTE_CONV_MAPG_ID" ).append("\n"); 
		query.append(")	NC" ).append("\n"); 
		query.append("WHERE" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("NOT RULE CODE 는 SURCHARGE 에서만 사용된다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("NC.CHG_RULE_TP_CD			= 'R'" ).append("\n"); 
		query.append("AND			NC.NOTE_CONV_RULE_CD	<> 'NOT'							/* RULE CODE 'NOT' 은 SURCHARGE 에서만 사용 됨 */" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< RATING UNIT >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_RAT_UT_CD	IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_RAT_UT_CD	= BQ.CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("OR	NC.BKG_RAT_UT_CD	IN ( 'BX', 'BL' )" ).append("\n"); 
		query.append("OR" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("NC.BKG_RAT_UT_CD	IN ( '20', '40', 'HC', '45', '53' )" ).append("\n"); 
		query.append("AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = NC.BKG_RAT_UT_CD )	= BQ.CTRT_CNTR_SZ_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< CARGO TYPE >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_PRC_CGO_TP_CD	IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_PRC_CGO_TP_CD	IN ( BQ.DR_TP, BQ.DG_TP, BQ.RF_TP, BQ.AK_TP, BQ.BB_TP )" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< IMDG CLASS >" ).append("\n"); 
		query.append("NOTE CONV 의 IMDG CLSS CD 가 BKG 의 IMDG_CLSS_CD 의 일부부이라도 적용가능하다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_IMDG_CLSS_CD	IS NULL" ).append("\n"); 
		query.append("OR	BQ.IMDG_CLSS_CD			LIKE NC.BKG_IMDG_CLSS_CD||'%'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< COMMODITY >" ).append("\n"); 
		query.append("GROUP 은 사용하지 않는다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_CMDT_DEF_CD IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_CMDT_DEF_CD = DECODE(NC.BKG_CMDT_TP_CD, 'C', BQ.CMDT_CD, 'R', BQ.REP_CMDT_CD)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("<  USA SVC MOD >" ).append("\n"); 
		query.append("NOTE CONV 에서는 USA SVC MOD CD 에, COMMERCIAL ZONE 도 같이 합쳐서 사용한다." ).append("\n"); 
		query.append("따라서 NOTE CONV 의 USA SVC MOD CD 가 'CZ' 이면 BKG 의 COMMERCIAL ZONE CD 와 비교한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_USA_SVC_MOD_CD IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_USA_SVC_MOD_CD = DECODE(NC.BKG_USA_SVC_MOD_CD, 'CZ', BQ.CML_ZN_CD, BQ.USA_SVC_MOD_CD )" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< ROUTE >" ).append("\n"); 
		query.append("STANDARD NOTE 의 경우는 GROUP 을 사용하지 않으므로," ).append("\n"); 
		query.append("STANDARD NOTE 를 위한 특별한 고려가 필요하지 않음." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("/* POR */" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_POR_DEF_CD IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_POR_DEF_CD = DECODE(NC.BKG_POR_TP_CD, 'L', BQ.POR_CD, 'S', BQ.POR_STE_CD, 'R', BQ.POR_RGN_CD, 'C', BQ.POR_CNT_CD)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("/* POL */" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_POL_DEF_CD IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_POL_DEF_CD = DECODE(NC.BKG_POL_TP_CD, 'L', BQ.POL_CD, 'S', BQ.POL_STE_CD, 'R', BQ.POL_RGN_CD, 'C', BQ.POL_CNT_CD)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("/* POD */" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_POD_DEF_CD IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_POD_DEF_CD = DECODE(NC.BKG_POD_TP_CD, 'L', BQ.POD_CD, 'S', BQ.POD_STE_CD, 'R', BQ.POD_RGN_CD, 'C', BQ.POD_CNT_CD)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("/* DEL */" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_DEL_DEF_CD IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_DEL_DEF_CD = DECODE(NC.BKG_DEL_TP_CD, 'L', BQ.DEL_CD, 'S', BQ.DEL_STE_CD, 'R', BQ.DEL_RGN_CD, 'C', BQ.DEL_CNT_CD)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("RCV DE TERM" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_RCV_TERM_CD IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_RCV_TERM_CD = BQ.RCV_TERM_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_DE_TERM_CD IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_DE_TERM_CD = BQ.DE_TERM_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("SOC" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_SOC_FLG	IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_SOC_FLG	= BQ.SOC_FLG" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< T/S PORT >" ).append("\n"); 
		query.append("T/S 가 발생하는 PORT 를 대상으로 한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_TS_PORT_DEF_CD IS NULL" ).append("\n"); 
		query.append("OR	EXISTS	(" ).append("\n"); 
		query.append("SELECT	'X'" ).append("\n"); 
		query.append("FROM		BKG_VVD				V1	," ).append("\n"); 
		query.append("BKG_VVD 			V2	," ).append("\n"); 
		query.append("MDM_LOCATION	LO" ).append("\n"); 
		query.append("WHERE		V2.BKG_NO			=	V1.BKG_NO" ).append("\n"); 
		query.append("AND			V2.POL_CD			= V1.POD_CD" ).append("\n"); 
		query.append("AND			LO.LOC_CD			= V1.POD_CD" ).append("\n"); 
		query.append("AND			V1.BKG_NO			=	BQ.BKG_NO" ).append("\n"); 
		query.append("AND			DECODE(NC.BKG_TS_PORT_TP_CD, 'L', LO.LOC_CD, 'S', LO.CNT_CD||LO.STE_CD, 'R', LO.RGN_CD, 'C', LO.CNT_CD) = NC.BKG_TS_PORT_DEF_CD" ).append("\n"); 
		query.append("AND			@[ca_flg]			= 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	'X'" ).append("\n"); 
		query.append("FROM		BKG_VVD_HIS		V1	," ).append("\n"); 
		query.append("BKG_VVD_HIS 	V2	," ).append("\n"); 
		query.append("MDM_LOCATION	LO" ).append("\n"); 
		query.append("WHERE		V2.BKG_NO			=	V1.BKG_NO" ).append("\n"); 
		query.append("AND			V2.CORR_NO		= V1.CORR_NO" ).append("\n"); 
		query.append("AND			V2.POL_CD			= V1.POD_CD" ).append("\n"); 
		query.append("AND			LO.LOC_CD			= V1.POD_CD" ).append("\n"); 
		query.append("AND			V1.BKG_NO			=	BQ.BKG_NO" ).append("\n"); 
		query.append("AND			V1.CORR_NO		= BQ.CORR_NO" ).append("\n"); 
		query.append("AND			DECODE(NC.BKG_TS_PORT_TP_CD, 'L', LO.LOC_CD, 'S', LO.CNT_CD||LO.STE_CD, 'R', LO.RGN_CD, 'C', LO.CNT_CD) = NC.BKG_TS_PORT_DEF_CD" ).append("\n"); 
		query.append("AND			@[ca_flg]			= 'Y'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("/* DIR CALL */" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("NC.BKG_DIR_CALL_FLG	IS NULL" ).append("\n"); 
		query.append("OR	NC.BKG_DIR_CALL_FLG	= BQ.DIR_CALL_FLG" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")	," ).append("\n"); 
		query.append("NC_P AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("적용될 CONVERSION 이 같은 NOTE_CONV_TP_CD 에서 하나의 NOTE_CONV_RULE_CD 가 되도록 우선순위가 낮은 것을 제거한다." ).append("\n"); 
		query.append("우선순위가 똑같은 경우에는 NOTE_CONV_MAPG_ID||LPAD(NOTE_CONV_SEQ, 6, '0') 가 적은 것을 우선한다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("이 부분은 계약과 BKG 를 직접 비교하지 않고, NOTE CONV 와만 비교하도록 하기 위함이다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	NC.BQ_SEQ										," ).append("\n"); 
		query.append("NC.NOTE_CONV_MAPG_ID				," ).append("\n"); 
		query.append("NC.NOTE_CONV_SEQ						," ).append("\n"); 
		query.append("10 + ROW_NUMBER() OVER ( PARTITION BY NC.BQ_SEQ ORDER BY NC.NOTE_CONV_RULE_CD, NC.CONV_TP_PRIO DESC )	NC_SEQ	,	/* BKG 과 겹치지 않도록 임의의 상수 10 을 더한다. */" ).append("\n"); 
		query.append("'C'	BKG_CONV_TP_CD					," ).append("\n"); 
		query.append("NC.CONV_TP_PRIO							," ).append("\n"); 
		query.append("NC.NOTE_CONV_TP_CD					," ).append("\n"); 
		query.append("NC.NOTE_CONV_CHG_CD					," ).append("\n"); 
		query.append("NC.NOTE_CONV_RULE_CD				," ).append("\n"); 
		query.append("NC.CONV_RAT_UT_CD						," ).append("\n"); 
		query.append("( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = NC.CONV_RAT_UT_CD ) CONV_RAT_UT_SZ_CD		," ).append("\n"); 
		query.append("NC.CONV_DR_TP								," ).append("\n"); 
		query.append("NC.CONV_DG_TP								," ).append("\n"); 
		query.append("NC.CONV_RF_TP								," ).append("\n"); 
		query.append("NC.CONV_AK_TP								," ).append("\n"); 
		query.append("NC.CONV_BB_TP								," ).append("\n"); 
		query.append("NC.RT_APPL_TP_CD						," ).append("\n"); 
		query.append("NC.RT_OP_CD									," ).append("\n"); 
		query.append("NC.CURR_CD									," ).append("\n"); 
		query.append("NC.FRT_RT_AMT								," ).append("\n"); 
		query.append("NC.TYP_CONV_CTNT						," ).append("\n"); 
		query.append("NC.RAC_CONV_CTNT" ).append("\n"); 
		query.append("FROM		(" ).append("\n"); 
		query.append("SELECT	NC.*	," ).append("\n"); 
		query.append("ROW_NUMBER() OVER ( PARTITION BY NC.BQ_SEQ, NC.NOTE_CONV_RULE_CD, NC.NOTE_CONV_TP_CD, NC.TRI_PROP_NO, NC.AMDT_SEQ" ).append("\n"); 
		query.append("ORDER BY NC.MTCH_PRIO DESC, NC.NOTE_CONV_MAPG_ID, NC.NOTE_CONV_SEQ ) ROW_NUMBER" ).append("\n"); 
		query.append("FROM		NC" ).append("\n"); 
		query.append(") NC" ).append("\n"); 
		query.append("WHERE		NC.ROW_NUMBER = 1" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT	BQ.BQ_SEQ																				," ).append("\n"); 
		query.append("NULL									NOTE_CONV_MAPG_ID					," ).append("\n"); 
		query.append("NULL									NOTE_CONV_SEQ							," ).append("\n"); 
		query.append("ROW_NUMBER() OVER ( PARTITION BY BQ.BQ_SEQ ORDER BY 1 )	NC_SEQ	," ).append("\n"); 
		query.append("'B'										BKG_CONV_TP_CD						," ).append("\n"); 
		query.append("0											CONV_TP_PRIO							, /* BKG 의 CONV_TP_PRIO 는 0 으로 어떤 CONV 보다 높은 우선 순위를 가지게 한다. */" ).append("\n"); 
		query.append("NULL									NOTE_CONV_TP_CD						," ).append("\n"); 
		query.append("NULL									NOTE_CONV_CHG_CD					," ).append("\n"); 
		query.append("RC.NOTE_CONV_RULE_CD	NOTE_CONV_RULE_CD					," ).append("\n"); 
		query.append("BQ.CTRT_CNTR_TPSZ_CD	CONV_RAT_UT_CD						," ).append("\n"); 
		query.append("( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = BQ.CTRT_CNTR_TPSZ_CD )	CONV_RAT_UT_SZ_CD		," ).append("\n"); 
		query.append("BQ.DR_TP							CONV_DR_TP								," ).append("\n"); 
		query.append("BQ.DG_TP							CONV_DG_TP								," ).append("\n"); 
		query.append("BQ.RF_TP							CONV_RF_TP								," ).append("\n"); 
		query.append("BQ.AK_TP							CONV_AK_TP								," ).append("\n"); 
		query.append("BQ.BB_TP							CONV_BB_TP								," ).append("\n"); 
		query.append("NULL									RT_APPL_TP_CD							," ).append("\n"); 
		query.append("NULL									RT_OP_CD									," ).append("\n"); 
		query.append("NULL									CURR_CD										," ).append("\n"); 
		query.append("NULL									FRT_RT_AMT								," ).append("\n"); 
		query.append("NULL									TYP_CONV_CTNT							," ).append("\n"); 
		query.append("NULL									RAC_CONV_CTNT" ).append("\n"); 
		query.append("FROM		BQ	," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	'TYP' NOTE_CONV_RULE_CD FROM DUAL UNION ALL" ).append("\n"); 
		query.append("SELECT	'RAC' NOTE_CONV_RULE_CD FROM DUAL" ).append("\n"); 
		query.append(") RC" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")	," ).append("\n"); 
		query.append("APP_N AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("APP RULE CODE 에 존재하지만, BOOKING 과 MATCHING 되지 않은 것을 SELECT 한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	BQ.BKG_NO		," ).append("\n"); 
		query.append("BQ.BQ_SEQ		," ).append("\n"); 
		query.append("(	SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) CONV_TP_PRIO" ).append("\n"); 
		query.append("FROM		BQ														," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	NC.*" ).append("\n"); 
		query.append("FROM		BK											," ).append("\n"); 
		query.append("PRI_TAA_TRI_LIST		TL	," ).append("\n"); 
		query.append("PRI_TRI_RT					RT	," ).append("\n"); 
		query.append("PRI_TRI_NOTE_CONV		NC" ).append("\n"); 
		query.append("WHERE		TL.TAA_PROP_NO	= BK.TAA_PROP_NO" ).append("\n"); 
		query.append("AND			TL.AMDT_SEQ			= BK.AMDT_SEQ" ).append("\n"); 
		query.append("AND			RT.TRI_PROP_NO	= TL.TRI_PROP_NO" ).append("\n"); 
		query.append("AND			BK.RT_APLY_DT		BETWEEN RT.EFF_DT AND RT.EXP_DT + 0.99999		/* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("AND			RT.PROP_STS_CD	= 'F'" ).append("\n"); 
		query.append("AND			NC.TRI_PROP_NO	= RT.TRI_PROP_NO" ).append("\n"); 
		query.append("AND			NC.AMDT_SEQ			= RT.AMDT_SEQ" ).append("\n"); 
		query.append("AND			BK.RT_APLY_DT		BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999		/* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append(")	NC" ).append("\n"); 
		query.append("WHERE		NC.CHG_RULE_TP_CD			= 'R'" ).append("\n"); 
		query.append("AND			NC.NOTE_CONV_RULE_CD	= 'APP'								/* APP 만 SELECT */" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/* APPLICATION TYPE */" ).append("\n"); 
		query.append("AND			NC.RT_APPL_TP_CD = 'S'	-- Subject" ).append("\n"); 
		query.append("AND			NOT EXISTS	(												/* CHECK CHECK CHECK CHECK CHECK */" ).append("\n"); 
		query.append("SELECT	'X'" ).append("\n"); 
		query.append("FROM		NC A" ).append("\n"); 
		query.append("WHERE		A.BQ_SEQ	= BQ.BQ_SEQ" ).append("\n"); 
		query.append("AND			A.NOTE_CONV_MAPG_ID	= NC.NOTE_CONV_MAPG_ID" ).append("\n"); 
		query.append("AND			A.NOTE_CONV_SEQ			= NC.NOTE_CONV_SEQ" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("RT AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("RATE" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	RT.*	," ).append("\n"); 
		query.append("RT_APP.BKG_CONV_TP_CD      		APP_BKG_CONV_TP_CD     	," ).append("\n"); 
		query.append("RT_APP.NOTE_CONV_MAPG_ID   		APP_NOTE_CONV_MAPG_ID  	," ).append("\n"); 
		query.append("RT_APP.NOTE_CONV_SEQ       		APP_NOTE_CONV_SEQ      	," ).append("\n"); 
		query.append("RT_APP.NOTE_CONV_RULE_CD   		APP_NOTE_CONV_RULE_CD  	," ).append("\n"); 
		query.append("RT_APP.NOTE_CONV_TP_CD     		APP_NOTE_CONV_TP_CD    	," ).append("\n"); 
		query.append("RT_APP.RT_OP_CD            		APP_RT_OP_CD           	," ).append("\n"); 
		query.append("RT_APP.CURR_CD             		APP_CURR_CD            	," ).append("\n"); 
		query.append("RT_APP.FRT_RT_AMT          		APP_FRT_RT_AMT					," ).append("\n"); 
		query.append("RT_TYP.BKG_CONV_TP_CD      		TYP_BKG_CONV_TP_CD     	," ).append("\n"); 
		query.append("RT_TYP.NOTE_CONV_MAPG_ID   		TYP_NOTE_CONV_MAPG_ID  	," ).append("\n"); 
		query.append("RT_TYP.NOTE_CONV_SEQ       		TYP_NOTE_CONV_SEQ      	," ).append("\n"); 
		query.append("RT_TYP.NOTE_CONV_RULE_CD   		TYP_NOTE_CONV_RULE_CD  	," ).append("\n"); 
		query.append("RT_TYP.NOTE_CONV_TP_CD     		TYP_NOTE_CONV_TP_CD    	," ).append("\n"); 
		query.append("RT_TYP.RT_OP_CD            		TYP_RT_OP_CD           	," ).append("\n"); 
		query.append("RT_TYP.CURR_CD             		TYP_CURR_CD            	," ).append("\n"); 
		query.append("RT_TYP.FRT_RT_AMT          		TYP_FRT_RT_AMT					," ).append("\n"); 
		query.append("RT_TYP.TYP_CONV_CTNT					TYP_TYP_CONV_CTNT				," ).append("\n"); 
		query.append("RT_RAC.BKG_CONV_TP_CD      		RAC_BKG_CONV_TP_CD     	," ).append("\n"); 
		query.append("RT_RAC.NOTE_CONV_MAPG_ID   		RAC_NOTE_CONV_MAPG_ID  	," ).append("\n"); 
		query.append("RT_RAC.NOTE_CONV_SEQ       		RAC_NOTE_CONV_SEQ      	," ).append("\n"); 
		query.append("RT_RAC.NOTE_CONV_RULE_CD   		RAC_NOTE_CONV_RULE_CD  	," ).append("\n"); 
		query.append("RT_RAC.NOTE_CONV_TP_CD     		RAC_NOTE_CONV_TP_CD    	," ).append("\n"); 
		query.append("RT_RAC.RT_OP_CD            		RAC_RT_OP_CD           	," ).append("\n"); 
		query.append("RT_RAC.CURR_CD             		RAC_CURR_CD            	," ).append("\n"); 
		query.append("RT_RAC.FRT_RT_AMT          		RAC_FRT_RT_AMT					," ).append("\n"); 
		query.append("RT_RAC.RAC_CONV_CTNT					RAC_RAC_CONV_CTNT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("FROM		(" ).append("\n"); 
		query.append("SELECT	BQ.BKG_NO	," ).append("\n"); 
		query.append("BQ.BQ_SEQ ," ).append("\n"); 
		query.append("TM.CMDT_CD							TM_CMDT_CD							," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("OV.ROUT_VIA_PORT_CD			OV_ROUT_VIA_PORT_CD			," ).append("\n"); 
		query.append("DV.ROUT_VIA_PORT_CD			DV_ROUT_VIA_PORT_CD			," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("OP.ROUT_PNT_LOC_CD			OP_ROUT_PNT_LOC_CD			," ).append("\n"); 
		query.append("OP.RCV_DE_TERM_CD				OP_RCV_DE_TERM_CD				," ).append("\n"); 
		query.append("OP.PRC_TRSP_MOD_CD			OP_PRC_TRSP_MOD_CD			," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("DP.ROUT_PNT_LOC_CD			DP_ROUT_PNT_LOC_CD			," ).append("\n"); 
		query.append("DP.RCV_DE_TERM_CD				DP_RCV_DE_TERM_CD				," ).append("\n"); 
		query.append("DP.PRC_TRSP_MOD_CD			DP_PRC_TRSP_MOD_CD			," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RT.TRI_PROP_NO																	," ).append("\n"); 
		query.append("RT.AMDT_SEQ																			," ).append("\n"); 
		query.append("RT.RAT_UT_CD																		," ).append("\n"); 
		query.append("RT.PRC_CGO_TP_CD																," ).append("\n"); 
		query.append("RT.CURR_CD																			," ).append("\n"); 
		query.append("RT.FNL_FRT_RT_AMT																," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("WHEN	OP.ROUT_PNT_LOC_CD	= BQ.POR_CD	THEN 'Y'" ).append("\n"); 
		query.append("ELSE	'N'" ).append("\n"); 
		query.append("END	POR_MTCH_FLG	," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("WHEN	DP.ROUT_PNT_LOC_CD	= BQ.DEL_CD	THEN 'Y'" ).append("\n"); 
		query.append("ELSE	'N'" ).append("\n"); 
		query.append("END	DEL_MTCH_FLG	," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	NVL(MAX(A.NC_SEQ), 0)" ).append("\n"); 
		query.append("FROM		NC_P	A" ).append("\n"); 
		query.append("WHERE		A.BQ_SEQ						= BQ.BQ_SEQ" ).append("\n"); 
		query.append("AND			A.NOTE_CONV_RULE_CD	= 'APP'" ).append("\n"); 
		query.append("AND			A.BKG_CONV_TP_CD		= 'C'" ).append("\n"); 
		query.append(") APP_NC_SEQ	," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	NVL(MAX(A.NC_SEQ), 0)" ).append("\n"); 
		query.append("FROM		NC_P	A" ).append("\n"); 
		query.append("WHERE		A.BQ_SEQ						= BQ.BQ_SEQ" ).append("\n"); 
		query.append("AND			A.NOTE_CONV_RULE_CD	= 'TYP'" ).append("\n"); 
		query.append("AND			A.BKG_CONV_TP_CD		= 'C'" ).append("\n"); 
		query.append(") TYP_NC_SEQ	," ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	NVL(MAX(A.NC_SEQ), 0)" ).append("\n"); 
		query.append("FROM		NC_P	A" ).append("\n"); 
		query.append("WHERE		A.BQ_SEQ						= BQ.BQ_SEQ" ).append("\n"); 
		query.append("AND			A.NOTE_CONV_RULE_CD	= 'RAC'" ).append("\n"); 
		query.append("AND			A.BKG_CONV_TP_CD		= 'C'" ).append("\n"); 
		query.append(") RAC_NC_SEQ	," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RANK() OVER (	PARTITION BY BQ.BQ_SEQ" ).append("\n"); 
		query.append("ORDER BY DECODE(RT.RAT_UT_CD, BQ.CTRT_CNTR_TPSZ_CD, 100, 80, 'BL', 80, 60)" ).append("\n"); 
		query.append("- DECODE(RT.RAT_UT_CD, '20', 10, '40', 10, 'HC', 10, '45', 10, '53', 10 )" ).append("\n"); 
		query.append("+ DECODE(RT.PRC_CGO_TP_CD, BQ.DR_TP, 2, BQ.DG_TP, 2, BQ.RF_TP, 2, BQ.AK_TP, 2, BQ.BB_TP, 2, 0)" ).append("\n"); 
		query.append("- DECODE(BQ.CTRT_CNTR_TPSZ_CD||BQ.AK_TP||RT.PRC_CGO_TP_CD, 'D7AKDR', 1, 0)	DESC" ).append("\n"); 
		query.append("/* D7/AK 가 D7/DR 과 D7/AK 중에 D7/AK 가 먼저 선택 될 수 있도록 D7/AK 면서 DR 운임적인된 경우 -1 을 해준다. */" ).append("\n"); 
		query.append(") RAT_UT_PRIO" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("FROM    BQ  															," ).append("\n"); 
		query.append("PRI_TAA_TRI_LIST					TL			," ).append("\n"); 
		query.append("PRI_TRI_MN								TM			," ).append("\n"); 
		query.append("PRI_TRI_RT_ROUT_PNT				OP			," ).append("\n"); 
		query.append("PRI_TRI_RT_ROUT_PNT				DP			," ).append("\n"); 
		query.append("PRI_TRI_RT_ROUT_VIA				OV			," ).append("\n"); 
		query.append("PRI_TRI_RT_ROUT_VIA				DV			," ).append("\n"); 
		query.append("PRI_TRI_RT								RT" ).append("\n"); 
		query.append("WHERE		TL.TAA_PROP_NO		= BQ.TAA_PROP_NO AND TL.AMDT_SEQ				= BQ.AMDT_SEQ" ).append("\n"); 
		query.append("AND			TM.TRI_PROP_NO		= TL.TRI_PROP_NO" ).append("\n"); 
		query.append("AND			OP.TRI_PROP_NO		= TM.TRI_PROP_NO AND OP.ORG_DEST_TP_CD		= 'O'" ).append("\n"); 
		query.append("AND			DP.TRI_PROP_NO		= TM.TRI_PROP_NO AND DP.ORG_DEST_TP_CD		= 'D'" ).append("\n"); 
		query.append("AND			OV.TRI_PROP_NO(+)	= TM.TRI_PROP_NO AND OV.ORG_DEST_TP_CD(+)	= 'O'" ).append("\n"); 
		query.append("AND			DV.TRI_PROP_NO(+)	= TM.TRI_PROP_NO AND DV.ORG_DEST_TP_CD(+)	= 'D'" ).append("\n"); 
		query.append("AND			RT.TRI_PROP_NO		= TM.TRI_PROP_NO AND RT.PROP_STS_CD				= 'F' AND BQ.RT_APLY_DT BETWEEN RT.EFF_DT AND RT.EXP_DT + 0.99999		/* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("1.	RATE - COMMODITY" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< COMMODITY >" ).append("\n"); 
		query.append("FAK ( REP_CMDT_CD : 0000 ) 인 계약은 모든 BOOKING 에 적용가능한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     TM.CMDT_CD	IN" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	BQ.CMDT_CD" ).append("\n"); 
		query.append("FROM		DUAL" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT	CMDT_CD" ).append("\n"); 
		query.append("FROM		MDM_COMMODITY" ).append("\n"); 
		query.append("WHERE		REP_CMDT_CD	= '0000'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("2.	RATE - ROUTE" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< ORIGIN >" ).append("\n"); 
		query.append("POR, (POL)" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     OP.ROUT_PNT_LOC_CD	IN ( BQ.POR_CD, ( SELECT BQ.POL_CD FROM DUAL WHERE ( BQ.POR_CONTI_CD = 'E' OR BQ.POR_CNT_CD = 'US' ) AND BQ.DEL_CONTI_CD <> 'A' ) )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< ORIGIN VIA >" ).append("\n"); 
		query.append("POL, PRE" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     NVL(OV.ROUT_VIA_PORT_CD, '*')		IN ( '*', BQ.POL_CD, BQ.PRE_RLY_PORT_CD )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< DESTINATION VIA >" ).append("\n"); 
		query.append("POD, POST" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     NVL(DV.ROUT_VIA_PORT_CD, '*')		IN ( '*', BQ.POD_CD, BQ.PST_RLY_PORT_CD )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< DESTINATION >" ).append("\n"); 
		query.append("DEL, (POD)" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     DP.ROUT_PNT_LOC_CD	IN ( BQ.DEL_CD, ( SELECT BQ.POD_CD FROM DUAL WHERE ( BQ.DEL_CONTI_CD = 'E' OR BQ.DEL_CNT_CD = 'US' ) AND BQ.POR_CONTI_CD <> 'A' ) )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< RCV TERM >" ).append("\n"); 
		query.append("예외적으로" ).append("\n"); 
		query.append("(1) POR = POL 일 경우, BKG : 'D', TAA : 'Y' 가 허용된다." ).append("\n"); 
		query.append("(2) POR_MTCH_FLG = 'N' 일 경우, TAA : 'Y' 가 허용된다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("OP.ROUT_PNT_LOC_CD		= BQ.POR_CD" ).append("\n"); 
		query.append("AND	OP.RCV_DE_TERM_CD			= BQ.RCV_TERM_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("OR	(" ).append("\n"); 
		query.append("( ( BQ.POR_CONTI_CD = 'E' OR BQ.POR_CNT_CD = 'US' ) AND BQ.DEL_CONTI_CD <> 'A' )" ).append("\n"); 
		query.append("AND	BQ.POR_CD							= BQ.POL_CD" ).append("\n"); 
		query.append("AND	(" ).append("\n"); 
		query.append("OP.RCV_DE_TERM_CD					= BQ.RCV_TERM_CD" ).append("\n"); 
		query.append("OR	(" ).append("\n"); 
		query.append("BQ.RCV_TERM_CD 				= 'D'" ).append("\n"); 
		query.append("AND	OP.RCV_DE_TERM_CD			= 'Y'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("OR	(" ).append("\n"); 
		query.append("OP.ROUT_PNT_LOC_CD		<> BQ.POR_CD" ).append("\n"); 
		query.append("AND	OP.RCV_DE_TERM_CD			= 'Y'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< DE TERM >" ).append("\n"); 
		query.append("예외적으로" ).append("\n"); 
		query.append("(1) DEL = POD 일 경우, BKG : 'D', TAA : 'Y' 가 허용된다." ).append("\n"); 
		query.append("(2) DEL_MTCH_FLG = 'N' 일 경우, TAA : 'Y' 가 허용된다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("DP.ROUT_PNT_LOC_CD		= BQ.DEL_CD" ).append("\n"); 
		query.append("AND	DP.RCV_DE_TERM_CD			= BQ.DE_TERM_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("OR	(" ).append("\n"); 
		query.append("( ( BQ.DEL_CONTI_CD = 'E' OR BQ.DEL_CNT_CD = 'US' ) AND BQ.POR_CONTI_CD <> 'A' )" ).append("\n"); 
		query.append("AND	BQ.DEL_CD							= BQ.POD_CD" ).append("\n"); 
		query.append("AND	(" ).append("\n"); 
		query.append("DP.RCV_DE_TERM_CD					= BQ.DE_TERM_CD" ).append("\n"); 
		query.append("OR	(" ).append("\n"); 
		query.append("BQ.DE_TERM_CD 				= 'D'" ).append("\n"); 
		query.append("AND	DP.RCV_DE_TERM_CD			= 'Y'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("OR	(" ).append("\n"); 
		query.append("DP.ROUT_PNT_LOC_CD		<> BQ.DEL_CD" ).append("\n"); 
		query.append("AND	DP.RCV_DE_TERM_CD			= 'Y'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< ORIGIN TRANS MODE >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("OP.ROUT_PNT_LOC_CD		<> BQ.POR_CD" ).append("\n"); 
		query.append("OR	(" ).append("\n"); 
		query.append("OP.PRC_TRSP_MOD_CD		IS NULL" ).append("\n"); 
		query.append("OR	BQ.ORG_TRNS_MOD_CD		IS NULL" ).append("\n"); 
		query.append("OR	OP.PRC_TRSP_MOD_CD		= BQ.ORG_TRNS_MOD_CD" ).append("\n"); 
		query.append("OR  (" ).append("\n"); 
		query.append("OP.PRC_TRSP_MOD_CD		IN ( 'R', 'A' )" ).append("\n"); 
		query.append("AND	BQ.ORG_TRNS_MOD_CD		= 'R'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< DEST TRANS MODE >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("DP.ROUT_PNT_LOC_CD		<> BQ.DEL_CD" ).append("\n"); 
		query.append("OR	(" ).append("\n"); 
		query.append("DP.PRC_TRSP_MOD_CD		IS NULL" ).append("\n"); 
		query.append("OR	BQ.DEST_TRNS_MOD_CD		IS NULL" ).append("\n"); 
		query.append("OR	DP.PRC_TRSP_MOD_CD		= BQ.DEST_TRNS_MOD_CD" ).append("\n"); 
		query.append("OR  (" ).append("\n"); 
		query.append("DP.PRC_TRSP_MOD_CD		IN ( 'R', 'A' )" ).append("\n"); 
		query.append("AND	BQ.DEST_TRNS_MOD_CD		= 'R'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("3.	RATE - RATING UNIT" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< RATING UNIT >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND			(" ).append("\n"); 
		query.append("RT.RAT_UT_CD	IN" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT	'BL'" ).append("\n"); 
		query.append("FROM		DUAL" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT  A.CONV_RAT_UT_CD" ).append("\n"); 
		query.append("FROM		NC_P A" ).append("\n"); 
		query.append("WHERE		A.BQ_SEQ 						= BQ.BQ_SEQ" ).append("\n"); 
		query.append("AND			A.NOTE_CONV_RULE_CD	= 'TYP'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("OR" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("RT.RAT_UT_CD  IN ( '20', '40', 'HC', '45', '53' )" ).append("\n"); 
		query.append("AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = RT.RAT_UT_CD ) IN" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT  A.CONV_RAT_UT_SZ_CD" ).append("\n"); 
		query.append("FROM		NC_P A" ).append("\n"); 
		query.append("WHERE		A.BQ_SEQ 						= BQ.BQ_SEQ" ).append("\n"); 
		query.append("AND			A.NOTE_CONV_RULE_CD	= 'TYP'" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< CARGO TYPE >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     RT.PRC_CGO_TP_CD  IN ( BQ.DR_TP, BQ.DG_TP, BQ.RF_TP, BQ.AK_TP, BQ.BB_TP )" ).append("\n"); 
		query.append(") RT	," ).append("\n"); 
		query.append("NC_P											RT_APP	," ).append("\n"); 
		query.append("NC_P											RT_TYP	," ).append("\n"); 
		query.append("NC_P											RT_RAC" ).append("\n"); 
		query.append("WHERE		RT.RAT_UT_PRIO		= 1" ).append("\n"); 
		query.append("AND			RT_APP.BQ_SEQ(+)	= RT.BQ_SEQ AND RT_APP.NOTE_CONV_RULE_CD(+) = 'APP' AND RT_APP.NC_SEQ(+) = RT.APP_NC_SEQ" ).append("\n"); 
		query.append("AND			RT_TYP.BQ_SEQ			= RT.BQ_SEQ AND RT_TYP.NOTE_CONV_RULE_CD		= 'TYP' AND ( RT_TYP.BKG_CONV_TP_CD = 'B' OR RT_TYP.NC_SEQ = RT.TYP_NC_SEQ )" ).append("\n"); 
		query.append("AND			RT_RAC.BQ_SEQ			= RT.BQ_SEQ AND RT_RAC.NOTE_CONV_RULE_CD		= 'RAC' AND ( RT_RAC.BKG_CONV_TP_CD = 'B' OR RT_RAC.NC_SEQ = RT.RAC_NC_SEQ )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("APP RULE CHECK" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RT_APP.RT_APPL_TP_CD 가 NULL (APP 존재하지 않음) 이거나 'S' 인 경우에만 운임을 사용할 수 있다." ).append("\n"); 
		query.append("그리고 추가적으로 APP_N 에 CONV_TP_PRIO 의 값이 더 적은 값이 존재하지 않아야 한다." ).append("\n"); 
		query.append("APP_N 에 CONV_TP_PRIO 의 값이 더 적은 값이 존재한다면," ).append("\n"); 
		query.append("그것은 BKG 와 다른 조건으로 운임을 사용하도록 APP RULE 이 되어 있다는 것을 의미한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND			NVL(RT_APP.RT_APPL_TP_CD, 'S')	= 'S'" ).append("\n"); 
		query.append("AND			NOT EXISTS	(" ).append("\n"); 
		query.append("SELECT	'X'" ).append("\n"); 
		query.append("FROM		APP_N	A" ).append("\n"); 
		query.append("WHERE		A.BQ_SEQ														= RT.BQ_SEQ" ).append("\n"); 
		query.append("AND			A.CONV_TP_PRIO											< NVL(RT_APP.CONV_TP_PRIO, 9)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("RATING UNIT" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("RT.RAT_UT_CD	= RT_TYP.CONV_RAT_UT_CD" ).append("\n"); 
		query.append("OR	RT.RAT_UT_CD	= 'BL'	-- PATTERN #1 에서면 적용한다." ).append("\n"); 
		query.append("OR" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("RT.RAT_UT_CD	IN ( '20', '40', 'HC', '45', '53' )" ).append("\n"); 
		query.append("AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = RT.RAT_UT_CD )	= RT_TYP.CONV_RAT_UT_SZ_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("CARGO TYPE" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND			RT.PRC_CGO_TP_CD	IN ( RT_RAC.CONV_DR_TP, RT_RAC.CONV_DG_TP, RT_RAC.CONV_RF_TP, RT_RAC.CONV_AK_TP, RT_RAC.CONV_BB_TP )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")	," ).append("\n"); 
		query.append("RATE AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("1. PATTERN #1 ( 0000 )" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	'0000'												PRC_RT_MTCH_PATT_CD				," ).append("\n"); 
		query.append("BQ.TAA_NO											CTRT_NO										," ).append("\n"); 
		query.append("BQ.TAA_PROP_NO								TAA_PROP_NO								," ).append("\n"); 
		query.append("BQ.AMDT_SEQ										AMDT_SEQ									," ).append("\n"); 
		query.append("BQ.SVC_SCP_CD									SVC_SCP_CD								," ).append("\n"); 
		query.append("BQ.BKG_NO											BKG_NO										," ).append("\n"); 
		query.append("BQ.BQ_SEQ											BQ_SEQ										," ).append("\n"); 
		query.append("BQ.BKG_BQ_SEQ									BKG_BQ_SEQ								," ).append("\n"); 
		query.append("BQ.CNTR_TPSZ_CD								BQ_CNTR_TPSZ_CD						," ).append("\n"); 
		query.append("BQ.CTRT_CNTR_TPSZ_CD					BQ_CTRT_CNTR_TPSZ_CD			," ).append("\n"); 
		query.append("BQ.RCV_TERM_CD								BQ_RCV_TERM_CD						," ).append("\n"); 
		query.append("BQ.DE_TERM_CD									BQ_DE_TERM_CD							," ).append("\n"); 
		query.append("BQ.DRY_CGO_FLG								BQ_DRY_CGO_FLG						," ).append("\n"); 
		query.append("BQ.DCGO_FLG										BQ_DCGO_FLG								," ).append("\n"); 
		query.append("BQ.RC_FLG											BQ_RC_FLG									," ).append("\n"); 
		query.append("BQ.AWK_CGO_FLG								BQ_AWK_CGO_FLG						," ).append("\n"); 
		query.append("BQ.BB_CGO_FLG									BQ_BB_CGO_FLG							," ).append("\n"); 
		query.append("BQ.SOC_FLG										BQ_SOC_FLG								," ).append("\n"); 
		query.append("BQ.PRC_CGO_TP_CD							BQ_PRC_CGO_TP_CD					," ).append("\n"); 
		query.append("BQ.IMDG_CLSS_CD								BQ_IMDG_CLSS_CD						," ).append("\n"); 
		query.append("BQ.CTRT_CNTR_QTY							BQ_CTRT_CNTR_QTY					," ).append("\n"); 
		query.append("BQ.POR_APPL_FLG								BQ_POR_APPL_FLG						," ).append("\n"); 
		query.append("BQ.POL_APPL_FLG								BQ_POL_APPL_FLG						," ).append("\n"); 
		query.append("BQ.POD_APPL_FLG								BQ_POD_APPL_FLG						," ).append("\n"); 
		query.append("BQ.DEL_APPL_FLG								BQ_DEL_APPL_FLG						," ).append("\n"); 
		query.append("BQ.PRE_RLY_PORT_APPL_FLG			BQ_POR_RLY_PORT_APPL_FLG	," ).append("\n"); 
		query.append("BQ.PST_RLY_PORT_APPL_FLG			BQ_PST_RLY_PORT_APPL_FLG	," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RT.TRI_PROP_NO								RT_TRI_PROP_NO						," ).append("\n"); 
		query.append("RT.AMDT_SEQ										RT_AMDT_SEQ								," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RT.TM_CMDT_CD																						," ).append("\n"); 
		query.append("RT.OP_ROUT_PNT_LOC_CD					POR_CD										," ).append("\n"); 
		query.append("RT.OV_ROUT_VIA_PORT_CD				POL_CD										," ).append("\n"); 
		query.append("RT.DV_ROUT_VIA_PORT_CD				POD_CD										," ).append("\n"); 
		query.append("RT.DP_ROUT_PNT_LOC_CD					DEL_CD										," ).append("\n"); 
		query.append("RT.OP_RCV_DE_TERM_CD					RCV_TERM_CD								," ).append("\n"); 
		query.append("RT.DP_RCV_DE_TERM_CD					DE_TERM_CD								," ).append("\n"); 
		query.append("RT.RAT_UT_CD									RAT_UT_CD									," ).append("\n"); 
		query.append("RT.PRC_CGO_TP_CD							PRC_CGO_TP_CD							," ).append("\n"); 
		query.append("RT.CURR_CD										CURR_CD										," ).append("\n"); 
		query.append("RT.OP_PRC_TRSP_MOD_CD					ORG_TRSP_MOD_CD						," ).append("\n"); 
		query.append("RT.DP_PRC_TRSP_MOD_CD					DEST_TRSP_MOD_CD					," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RT.OP_ROUT_PNT_LOC_CD					OP_ROUT_PNT_LOC_CD				," ).append("\n"); 
		query.append("RT.OV_ROUT_VIA_PORT_CD				OV_ROUT_VIA_PORT_CD				," ).append("\n"); 
		query.append("RT.DV_ROUT_VIA_PORT_CD				DV_ROUT_VIA_PORT_CD				," ).append("\n"); 
		query.append("RT.DP_ROUT_PNT_LOC_CD					DP_ROUT_PNT_LOC_CD				," ).append("\n"); 
		query.append("RT.RAT_UT_CD									RT_RAT_UT_CD							," ).append("\n"); 
		query.append("RT.PRC_CGO_TP_CD							RT_PRC_CGO_TP_CD					," ).append("\n"); 
		query.append("RT.OP_PRC_TRSP_MOD_CD					OP_PRC_TRSP_MOD_CD				," ).append("\n"); 
		query.append("RT.DP_PRC_TRSP_MOD_CD					DP_PRC_TRSP_MOD_CD				," ).append("\n"); 
		query.append("RT.CURR_CD										RT_CURR_CD								," ).append("\n"); 
		query.append("RT.FNL_FRT_RT_AMT							RT_FNL_FRT_RT_AMT					," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RT.APP_BKG_CONV_TP_CD      		RT_APP_BKG_CONV_TP_CD     ," ).append("\n"); 
		query.append("RT.APP_NOTE_CONV_MAPG_ID   		RT_APP_NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("RT.APP_NOTE_CONV_SEQ       		RT_APP_NOTE_CONV_SEQ      ," ).append("\n"); 
		query.append("RT.APP_NOTE_CONV_RULE_CD   		RT_APP_NOTE_CONV_RULE_CD  ," ).append("\n"); 
		query.append("RT.APP_NOTE_CONV_TP_CD     		RT_APP_NOTE_CONV_TP_CD    ," ).append("\n"); 
		query.append("RT.APP_RT_OP_CD            		RT_APP_RT_OP_CD           ," ).append("\n"); 
		query.append("RT.APP_CURR_CD             		RT_APP_CURR_CD            ," ).append("\n"); 
		query.append("RT.APP_FRT_RT_AMT          		RT_APP_FRT_RT_AMT         ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RT.TYP_BKG_CONV_TP_CD      		RT_TYP_BKG_CONV_TP_CD     ," ).append("\n"); 
		query.append("RT.TYP_NOTE_CONV_MAPG_ID   		RT_TYP_NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("RT.TYP_NOTE_CONV_SEQ       		RT_TYP_NOTE_CONV_SEQ      ," ).append("\n"); 
		query.append("RT.TYP_NOTE_CONV_RULE_CD   		RT_TYP_NOTE_CONV_RULE_CD  ," ).append("\n"); 
		query.append("RT.TYP_NOTE_CONV_TP_CD     		RT_TYP_NOTE_CONV_TP_CD    ," ).append("\n"); 
		query.append("RT.TYP_RT_OP_CD            		RT_TYP_RT_OP_CD           ," ).append("\n"); 
		query.append("RT.TYP_CURR_CD             		RT_TYP_CURR_CD            ," ).append("\n"); 
		query.append("RT.TYP_FRT_RT_AMT          		RT_TYP_FRT_RT_AMT         ," ).append("\n"); 
		query.append("RT.TYP_TYP_CONV_CTNT					RT_TYP_CONV_CTNT					," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RT.RAC_BKG_CONV_TP_CD      		RT_RAC_BKG_CONV_TP_CD     ," ).append("\n"); 
		query.append("RT.RAC_NOTE_CONV_MAPG_ID   		RT_RAC_NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("RT.RAC_NOTE_CONV_SEQ       		RT_RAC_NOTE_CONV_SEQ      ," ).append("\n"); 
		query.append("RT.RAC_NOTE_CONV_RULE_CD   		RT_RAC_NOTE_CONV_RULE_CD  ," ).append("\n"); 
		query.append("RT.RAC_NOTE_CONV_TP_CD     		RT_RAC_NOTE_CONV_TP_CD    ," ).append("\n"); 
		query.append("RT.RAC_RT_OP_CD            		RT_RAC_RT_OP_CD           ," ).append("\n"); 
		query.append("RT.RAC_CURR_CD             		RT_RAC_CURR_CD            ," ).append("\n"); 
		query.append("RT.RAC_FRT_RT_AMT          		RT_RAC_FRT_RT_AMT         ," ).append("\n"); 
		query.append("RT.RAC_RAC_CONV_CTNT					RT_RAC_CONV_CTNT					," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RT.POR_MTCH_FLG								POR_MTCH_FLG							," ).append("\n"); 
		query.append("RT.DEL_MTCH_FLG								DEL_MTCH_FLG" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("FROM" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("JOIN TABLE" ).append("\n"); 
		query.append("1.1 BQ, RT" ).append("\n"); 
		query.append("1.2 RT RULE					: X" ).append("\n"); 
		query.append("2.1 OA							: X" ).append("\n"); 
		query.append("2.2 OA RULE					: X" ).append("\n"); 
		query.append("3.1 DA							: X" ).append("\n"); 
		query.append("3.2 DA RULE					: X" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("BQ	," ).append("\n"); 
		query.append("RT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("WHERE		RT.BQ_SEQ = BQ.BQ_SEQ" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT	@[bkg_no]										BKG_NO										," ).append("\n"); 
		query.append("R.CTRT_NO										CTRT_NO										," ).append("\n"); 
		query.append("R.PRC_RT_MTCH_PATT_CD				PRC_RT_MTCH_PATT_CD				," ).append("\n"); 
		query.append("R.TAA_PROP_NO								PROP_NO										," ).append("\n"); 
		query.append("R.AMDT_SEQ									AMDT_SEQ									," ).append("\n"); 
		query.append("R.SVC_SCP_CD								SVC_SCP_CD								," ).append("\n"); 
		query.append("R.BQ_SEQ										BQ_SEQ										," ).append("\n"); 
		query.append("R.BKG_BQ_SEQ								BKG_BQ_SEQ								," ).append("\n"); 
		query.append("ROWNUM											BKG_BQ_OCCR_SEQ						," ).append("\n"); 
		query.append("ROW_NUMBER() OVER ( ORDER BY" ).append("\n"); 
		query.append("DECODE(R.POR_MTCH_FLG, 'Y', 1, 2)	," ).append("\n"); 
		query.append("DECODE(R.DEL_MTCH_FLG, 'Y', 1, 2)	," ).append("\n"); 
		query.append("R.BKG_BQ_SEQ									," ).append("\n"); 
		query.append("R.UQ_SEQ" ).append("\n"); 
		query.append(")			DP_SEQ												," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/* BKG_AUTO_RT_OCN_FRT_TMP 에 임시 저장할 칼럼 START */" ).append("\n"); 
		query.append("R.BQ_CNTR_TPSZ_CD						CNTR_TPSZ_CD							," ).append("\n"); 
		query.append("R.BQ_CTRT_CNTR_TPSZ_CD			CTRT_CNTR_TPSZ_CD					," ).append("\n"); 
		query.append("R.BQ_RCV_TERM_CD						RCV_TERM_CD								," ).append("\n"); 
		query.append("R.BQ_DE_TERM_CD							DE_TERM_CD								," ).append("\n"); 
		query.append("R.BQ_DRY_CGO_FLG						DRY_CGO_FLG								," ).append("\n"); 
		query.append("R.BQ_AWK_CGO_FLG						AWK_CGO_FLG								," ).append("\n"); 
		query.append("R.BQ_DCGO_FLG								DCGO_FLG									," ).append("\n"); 
		query.append("R.BQ_RC_FLG									RC_FLG										," ).append("\n"); 
		query.append("R.BQ_BB_CGO_FLG							BB_CGO_FLG								," ).append("\n"); 
		query.append("R.BQ_SOC_FLG								SOC_FLG										," ).append("\n"); 
		query.append("R.BQ_IMDG_CLSS_CD						IMDG_CLSS_CD							," ).append("\n"); 
		query.append("R.RT_TRI_PROP_NO						TRI_PROP_NO								," ).append("\n"); 
		query.append("/* BKG_AUTO_RT_OCN_FRT_TMP 에 임시 저장할 칼럼 END */" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/* UI GRID START */" ).append("\n"); 
		query.append("R.PRC_RT_MTCH_PATT_CD				RT_MTCH_PATT_CD						," ).append("\n"); 
		query.append("(	SELECT CMDT_NM FROM MDM_COMMODITY A WHERE A.CMDT_CD = R.TM_CMDT_CD	)	CMDT_NM	," ).append("\n"); 
		query.append("R.POR_CD										POR_CD										," ).append("\n"); 
		query.append("R.POL_CD										POL_CD										," ).append("\n"); 
		query.append("R.POD_CD										POD_CD										," ).append("\n"); 
		query.append("R.DEL_CD										DEL_CD										," ).append("\n"); 
		query.append("R.RCV_TERM_CD||'/'||R.DE_TERM_CD						RCV_DE_TERM_CD	," ).append("\n"); 
		query.append("CASE" ).append("\n"); 
		query.append("WHEN R.BQ_CNTR_TPSZ_CD LIKE 'R%' AND R.BQ_CTRT_CNTR_TPSZ_CD NOT LIKE 'R%'		THEN R.BQ_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("WHEN RT_TYP_BKG_CONV_TP_CD = 'C'																						THEN R.BQ_CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("ELSE R.RAT_UT_CD" ).append("\n"); 
		query.append("END	RAT_UT_CD																					," ).append("\n"); 
		query.append("R.PRC_CGO_TP_CD							PRC_CGO_TP_CD							," ).append("\n"); 
		query.append("R.CURR_CD										CURR_CD										," ).append("\n"); 
		query.append("R.ORG_TRSP_MOD_CD						ORG_TRSP_MOD_CD						," ).append("\n"); 
		query.append("R.DEST_TRSP_MOD_CD					DEST_TRSP_MOD_CD					," ).append("\n"); 
		query.append("0														FNL_FRT_RT_AMT						," ).append("\n"); 
		query.append("R.ORG_TRSP_MOD_CD||'/'||R.DEST_TRSP_MOD_CD	TRNS_MOD_CD			," ).append("\n"); 
		query.append("R.BQ_CTRT_CNTR_QTY					OP_CNTR_QTY								," ).append("\n"); 
		query.append("RN.NOTE_CTNT								NOTE_CTNT									," ).append("\n"); 
		query.append("'NOTE'											NOTE											," ).append("\n"); 
		query.append("'DTL'												DTL												," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/* UI GRID END */" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/* CHARGE UI 에 필요 속성 START */" ).append("\n"); 
		query.append("R.BQ_PRC_CGO_TP_CD					CGO_CATE_CD								," ).append("\n"); 
		query.append("/* CHARGE UI 에 필요 속성 END */" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("R.BQ_POR_APPL_FLG						BQ_POR_APPL_FLG						," ).append("\n"); 
		query.append("R.BQ_POL_APPL_FLG						BQ_POL_APPL_FLG						," ).append("\n"); 
		query.append("R.BQ_POD_APPL_FLG						BQ_POD_APPL_FLG						," ).append("\n"); 
		query.append("R.BQ_DEL_APPL_FLG						BQ_DEL_APPL_FLG						," ).append("\n"); 
		query.append("R.BQ_POR_RLY_PORT_APPL_FLG	BQ_POR_RLY_PORT_APPL_FLG	," ).append("\n"); 
		query.append("R.BQ_PST_RLY_PORT_APPL_FLG	BQ_PST_RLY_PORT_APPL_FLG	," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("R.TM_CMDT_CD								TM_CMDT_CD								," ).append("\n"); 
		query.append("R.RCV_TERM_CD								RCV_TERM_CD								," ).append("\n"); 
		query.append("R.DE_TERM_CD								DE_TERM_CD								," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("R.OP_ROUT_PNT_LOC_CD				OP_ROUT_PNT_LOC_CD				," ).append("\n"); 
		query.append("R.OV_ROUT_VIA_PORT_CD				OV_ROUT_VIA_PORT_CD				," ).append("\n"); 
		query.append("R.DV_ROUT_VIA_PORT_CD				DV_ROUT_VIA_PORT_CD				," ).append("\n"); 
		query.append("R.DP_ROUT_PNT_LOC_CD				DP_ROUT_PNT_LOC_CD				," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("R.OP_PRC_TRSP_MOD_CD				OP_PRC_TRSP_MOD_CD				," ).append("\n"); 
		query.append("R.DP_PRC_TRSP_MOD_CD				DP_PRC_TRSP_MOD_CD				," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("R.RT_RAT_UT_CD							RT_RAT_UT_CD							," ).append("\n"); 
		query.append("R.RT_PRC_CGO_TP_CD					RT_PRC_CGO_TP_CD					," ).append("\n"); 
		query.append("R.RT_CURR_CD								RT_CURR_CD								," ).append("\n"); 
		query.append("R.RT_FNL_FRT_RT_AMT					RT_FNL_FRT_RT_AMT					," ).append("\n"); 
		query.append("0														RT_CALC_FRT_RT_AMT				," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("NVL(R.RT_APP_BKG_CONV_TP_CD, 'B')     RT_APP_BKG_CONV_TP_CD     ," ).append("\n"); 
		query.append("R.RT_APP_NOTE_CONV_MAPG_ID  RT_APP_NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("R.RT_APP_NOTE_CONV_SEQ      RT_APP_NOTE_CONV_SEQ      ," ).append("\n"); 
		query.append("R.RT_APP_NOTE_CONV_RULE_CD  RT_APP_NOTE_CONV_RULE_CD  ," ).append("\n"); 
		query.append("R.RT_APP_NOTE_CONV_TP_CD    RT_APP_NOTE_CONV_TP_CD    ," ).append("\n"); 
		query.append("R.RT_APP_RT_OP_CD           RT_APP_RT_OP_CD           ," ).append("\n"); 
		query.append("R.RT_APP_CURR_CD            RT_APP_CURR_CD            ," ).append("\n"); 
		query.append("R.RT_APP_FRT_RT_AMT         RT_APP_FRT_RT_AMT         ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("NVL(R.RT_TYP_BKG_CONV_TP_CD, 'B')     RT_TYP_BKG_CONV_TP_CD     ," ).append("\n"); 
		query.append("R.RT_TYP_NOTE_CONV_MAPG_ID  RT_TYP_NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("R.RT_TYP_NOTE_CONV_SEQ      RT_TYP_NOTE_CONV_SEQ      ," ).append("\n"); 
		query.append("R.RT_TYP_NOTE_CONV_RULE_CD  RT_TYP_NOTE_CONV_RULE_CD  ," ).append("\n"); 
		query.append("R.RT_TYP_NOTE_CONV_TP_CD    RT_TYP_NOTE_CONV_TP_CD    ," ).append("\n"); 
		query.append("R.RT_TYP_RT_OP_CD           RT_TYP_RT_OP_CD           ," ).append("\n"); 
		query.append("R.RT_TYP_CURR_CD            RT_TYP_CURR_CD            ," ).append("\n"); 
		query.append("R.RT_TYP_FRT_RT_AMT					RT_TYP_FRT_RT_AMT					," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("NVL(R.RT_RAC_BKG_CONV_TP_CD, 'B')     RT_RAC_BKG_CONV_TP_CD     ," ).append("\n"); 
		query.append("R.RT_RAC_NOTE_CONV_MAPG_ID  RT_RAC_NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("R.RT_RAC_NOTE_CONV_SEQ      RT_RAC_NOTE_CONV_SEQ      ," ).append("\n"); 
		query.append("R.RT_RAC_NOTE_CONV_RULE_CD  RT_RAC_NOTE_CONV_RULE_CD  ," ).append("\n"); 
		query.append("R.RT_RAC_NOTE_CONV_TP_CD    RT_RAC_NOTE_CONV_TP_CD    ," ).append("\n"); 
		query.append("R.RT_RAC_RT_OP_CD           RT_RAC_RT_OP_CD           ," ).append("\n"); 
		query.append("R.RT_RAC_CURR_CD            RT_RAC_CURR_CD            ," ).append("\n"); 
		query.append("R.RT_RAC_FRT_RT_AMT					RT_RAC_FRT_RT_AMT					," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("R.POR_MTCH_FLG							POR_MTCH_FLG							," ).append("\n"); 
		query.append("R.DEL_MTCH_FLG							DEL_MTCH_FLG							," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*" ).append("\n"); 
		query.append("POR_MTCH_FLG = 'Y' AND OIH_FLG = 'Y' 일 경우 'OAR' 을 'OIH' 로 표시" ).append("\n"); 
		query.append("DEL_MTCH_FLG = 'Y' AND DIH_FLG = 'Y' 일 경우 'DAR' 을 'DIH' 로 표시" ).append("\n"); 
		query.append("*/" ).append("\n"); 
		query.append("DECODE(R.POR_CD, R.POL_CD, 'N', 'Y')	OIH_FLG					," ).append("\n"); 
		query.append("DECODE(R.DEL_CD, R.POD_CD, 'N', 'Y')	DIH_FLG					," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("R.RT_TYP_CONV_CTNT          RT_TYP_CONV_CTNT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("FROM		(" ).append("\n"); 
		query.append("SELECT	R.*			," ).append("\n"); 
		query.append("ROWNUM	UQ_SEQ	," ).append("\n"); 
		query.append("ROW_NUMBER() OVER (	PARTITION BY" ).append("\n"); 
		query.append("R.BKG_BQ_SEQ								," ).append("\n"); 
		query.append("R.RT_TRI_PROP_NO						," ).append("\n"); 
		query.append("R.RT_AMDT_SEQ								," ).append("\n"); 
		query.append("R.RT_TYP_NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("R.RT_TYP_NOTE_CONV_SEQ      ," ).append("\n"); 
		query.append("R.RT_RAC_NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("R.RT_RAC_NOTE_CONV_SEQ      ," ).append("\n"); 
		query.append("R.RT_APP_NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("R.RT_APP_NOTE_CONV_SEQ" ).append("\n"); 
		query.append("ORDER BY" ).append("\n"); 
		query.append("DECODE(R.BQ_POR_APPL_FLG,'Y', 1, 0)" ).append("\n"); 
		query.append("+ DECODE(R.BQ_POL_APPL_FLG,'Y', 1, 0)" ).append("\n"); 
		query.append("+ DECODE(R.BQ_POD_APPL_FLG,'Y', 1, 0)" ).append("\n"); 
		query.append("+ DECODE(R.BQ_DEL_APPL_FLG,'Y', 1, 0)" ).append("\n"); 
		query.append("+ DECODE(R.BQ_POR_RLY_PORT_APPL_FLG,'Y', 1, 0)" ).append("\n"); 
		query.append("+ DECODE(R.BQ_PST_RLY_PORT_APPL_FLG,'Y', 1, 0)" ).append("\n"); 
		query.append(")	ROUT_LOC_CONV_PRIO" ).append("\n"); 
		query.append("FROM		(" ).append("\n"); 
		query.append("/* RT_SEQ 별 우선 순위 */" ).append("\n"); 
		query.append("SELECT	R.*	," ).append("\n"); 
		query.append("RANK() OVER (	PARTITION BY" ).append("\n"); 
		query.append("R.BKG_BQ_SEQ" ).append("\n"); 
		query.append("ORDER BY" ).append("\n"); 
		query.append("DECODE(R.POR_MTCH_FLG, 'Y', 1, 2) + DECODE(R.DEL_MTCH_FLG, 'Y', 1, 2)" ).append("\n"); 
		query.append(")	ARB_MTCH_PRIO_1" ).append("\n"); 
		query.append("FROM		(" ).append("\n"); 
		query.append("/* 다른 DATA 가 있으면 'BL' 은 제외한다 */" ).append("\n"); 
		query.append("SELECT	R.*	," ).append("\n"); 
		query.append("RANK() OVER (	ORDER BY DECODE(R.RT_RAT_UT_CD, 'BL', 2, 1 )" ).append("\n"); 
		query.append(")	BL_PRIO" ).append("\n"); 
		query.append("FROM		RATE	R" ).append("\n"); 
		query.append(")	R" ).append("\n"); 
		query.append("WHERE		R.BL_PRIO	= 1" ).append("\n"); 
		query.append(") R" ).append("\n"); 
		query.append("WHERE		R.ARB_MTCH_PRIO_1 = 1" ).append("\n"); 
		query.append(")	R	," ).append("\n"); 
		query.append("PRI_TRI_RT	RN" ).append("\n"); 
		query.append("WHERE	RN.TRI_PROP_NO					= R.RT_TRI_PROP_NO" ).append("\n"); 
		query.append("AND		RN.AMDT_SEQ							= R.RT_AMDT_SEQ" ).append("\n"); 
		query.append("AND		R.ROUT_LOC_CONV_PRIO		= 1" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("ORDER BY" ).append("\n"); 
		query.append("R.BKG_BQ_SEQ						," ).append("\n"); 
		query.append("DECODE(R.POR_MTCH_FLG, 'Y', 1, 2)	," ).append("\n"); 
		query.append("DECODE(R.DEL_MTCH_FLG, 'Y', 1, 2)	," ).append("\n"); 
		query.append("R.RT_TRI_PROP_NO				," ).append("\n"); 
		query.append("R.RT_AMDT_SEQ						," ).append("\n"); 
		query.append("R.UQ_SEQ" ).append("\n"); 
		query.append("/*AUTORATING_20100106-001*/" ).append("\n"); 

	}
}