/*=========================================================
*Copyright(c) 2016 CyberLogitec
*@FileName : SurchargeAutoRatingDBDAOSearchChgRateByLBPRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2016.06.29
*@LastModifier : 
*@LastVersion : 1.0
* 2016.06.29 
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esm.bkg.outbounddocumentation.blrating.blrating.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class SurchargeAutoRatingDBDAOSearchChgRateByLBPRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * --SurchargeAutoRatingDBDAOSearchChgRateByLBPRSQL 
	  * --LBP인지 정보 조회
	  * </pre>
	  */
	public SurchargeAutoRatingDBDAOSearchChgRateByLBPRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("bkg_no",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("login_office",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esm.bkg.outbounddocumentation.blrating.blrating.integration").append("\n"); 
		query.append("FileName : SurchargeAutoRatingDBDAOSearchChgRateByLBPRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("WITH " ).append("\n"); 
		query.append("BK AS (                              " ).append("\n"); 
		query.append("SELECT BK.BKG_NO               AS BKG_NO," ).append("\n"); 
		query.append("       BK.SVC_SCP_CD           AS BKG_SVC_SCP_CD ," ).append("\n"); 
		query.append("       BK.CMDT_CD              AS BK_CMDT_CD ," ).append("\n"); 
		query.append("       DECODE(BK.PRE_RLY_PORT_CD||BK.PST_RLY_PORT_CD,NULL,'Y','N') BK_DIR_CALL_FLG  ," ).append("\n"); 
		query.append("       VSL.VPS_ETD_DT          AS RT_APLY_DT, " ).append("\n"); 
		query.append("       BR.BKG_CTRT_TP_CD," ).append("\n"); 
		query.append("       'LBP'                   AS CHG_CD," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       BK.RCV_TERM_CD ,  " ).append("\n"); 
		query.append("       BK.DE_TERM_CD  ," ).append("\n"); 
		query.append("       BK.POR_CD AS BK_POR_CD," ).append("\n"); 
		query.append("       BK.POL_CD AS BK_POL_CD," ).append("\n"); 
		query.append("       BK.POD_CD AS BK_POD_CD," ).append("\n"); 
		query.append("       BK.DEL_CD AS BK_DEL_CD," ).append("\n"); 
		query.append("       L1.CNT_CD||L1.STE_CD  BK_POR_STE_CD    ," ).append("\n"); 
		query.append("       L1.RGN_CD             BK_POR_RGN_CD    ," ).append("\n"); 
		query.append("       L1.CNT_CD             BK_POR_CNT_CD    ," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       L2.CNT_CD||L1.STE_CD  BK_POL_STE_CD    ," ).append("\n"); 
		query.append("       L2.RGN_CD             BK_POL_RGN_CD    ," ).append("\n"); 
		query.append("       L2.CNT_CD             BK_POL_CNT_CD    ," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       L3.CNT_CD||L1.STE_CD  BK_POD_STE_CD    ," ).append("\n"); 
		query.append("       L3.RGN_CD             BK_POD_RGN_CD    ," ).append("\n"); 
		query.append("       L3.CNT_CD             BK_POD_CNT_CD    ," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       L4.CNT_CD||L1.STE_CD  BK_DEL_STE_CD    ," ).append("\n"); 
		query.append("       L4.RGN_CD             BK_DEL_RGN_CD    ," ).append("\n"); 
		query.append("       L4.CNT_CD             BK_DEL_CNT_CD    ," ).append("\n"); 
		query.append("       BC.PROP_NO            BK_PROP_NO       ," ).append("\n"); 
		query.append("       BC.AMDT_SEQ           BK_AMDT_SEQ      ," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       USR.USR_LOC," ).append("\n"); 
		query.append("       USR.USR_RGN," ).append("\n"); 
		query.append("       USR.USR_CNT," ).append("\n"); 
		query.append("       USR.USR_STE, " ).append("\n"); 
		query.append("       CASE WHEN LOGIN_OFC_CD != CLT_OFC_CD THEN" ).append("\n"); 
		query.append("                    CASE WHEN DECODE(LOGIN_OFC_CD, 'SELSC','PUSSC','PUSSC','SELSC',LOGIN_OFC_CD) = CLT_OFC_CD THEN" ).append("\n"); 
		query.append("                        'C'" ).append("\n"); 
		query.append("                         ELSE 'P'" ).append("\n"); 
		query.append("                    END" ).append("\n"); 
		query.append("                ELSE 'C'" ).append("\n"); 
		query.append("           END FRT_TERM_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("FROM BKG_BOOKING BK," ).append("\n"); 
		query.append("     BKG_RATE    BR," ).append("\n"); 
		query.append("     BKG_CHG_RT  BC," ).append("\n"); 
		query.append("     MDM_LOCATION L1," ).append("\n"); 
		query.append("     MDM_LOCATION L2," ).append("\n"); 
		query.append("     MDM_LOCATION L3," ).append("\n"); 
		query.append("     MDM_LOCATION L4," ).append("\n"); 
		query.append("     VSK_VSL_PORT_SKD VSL, " ).append("\n"); 
		query.append("     BKG_VVD     VVD ,  " ).append("\n"); 
		query.append("     (" ).append("\n"); 
		query.append("     SELECT ORG.OFC_CD LOGIN_OFC_CD, LOC.LOC_CD USR_LOC,LOC.RGN_CD USR_RGN,LOC.CNT_CD USR_CNT,LOC.CNT_CD||LOC.STE_CD USR_STE" ).append("\n"); 
		query.append("       FROM MDM_LOCATION LOC, MDM_ORGANIZATION ORG" ).append("\n"); 
		query.append("      WHERE ORG.LOC_CD=LOC.LOC_CD" ).append("\n"); 
		query.append("       AND  ORG.OFC_CD =@[login_office]" ).append("\n"); 
		query.append("     ) USR  " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("WHERE BK.BKG_NO   = @[bkg_no]" ).append("\n"); 
		query.append("AND   BR.BKG_NO   = BK.BKG_NO" ).append("\n"); 
		query.append("AND   BC.BKG_NO(+) = BK.BKG_NO" ).append("\n"); 
		query.append("AND   BC.CHG_CD(+) = 'OFT'" ).append("\n"); 
		query.append("AND   L1.LOC_CD   = BK.POR_CD " ).append("\n"); 
		query.append("AND   L2.LOC_CD   = BK.POL_CD " ).append("\n"); 
		query.append("AND   L3.LOC_CD   = BK.POD_CD " ).append("\n"); 
		query.append("AND   L4.LOC_CD   = BK.DEL_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND  BK.BKG_NO  = VVD.BKG_NO" ).append("\n"); 
		query.append("AND  VVD.VSL_CD      = VSL.VSL_CD" ).append("\n"); 
		query.append("AND  VVD.SKD_VOY_NO  = VSL.SKD_VOY_NO" ).append("\n"); 
		query.append("AND  VVD.SKD_DIR_CD  = VSL.SKD_DIR_CD" ).append("\n"); 
		query.append("AND  VVD.POL_CD      = VSL.VPS_PORT_CD" ).append("\n"); 
		query.append("AND  VVD.POL_CLPT_IND_SEQ = VSL.CLPT_IND_SEQ" ).append("\n"); 
		query.append("AND  VVD.VSL_PRE_PST_CD||VVD.VSL_SEQ = ( SELECT MIN(VSL_PRE_PST_CD||VSL_SEQ) FROM BKG_VVD VVD2 WHERE VVD2.BKG_NO = BK.BKG_NO) --revise" ).append("\n"); 
		query.append("AND  ROWNUM = 1" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("NC AS(" ).append("\n"); 
		query.append("SELECT  NC.NOTE_CONV_CHG_CD         , " ).append("\n"); 
		query.append("        NC.NOTE_CONV_RULE_CD        ," ).append("\n"); 
		query.append("        NC.BKG_RAT_UT_CD            ," ).append("\n"); 
		query.append("        NC.RT_APPL_TP_CD            ,  " ).append("\n"); 
		query.append("        NC.CURR_CD                  ,  " ).append("\n"); 
		query.append("        NC.FRT_RT_AMT               ,  " ).append("\n"); 
		query.append("        NC.PAY_TERM_CD              ," ).append("\n"); 
		query.append("        ROW_NUMBER() OVER ( PARTITION BY NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD,   " ).append("\n"); 
		query.append("                                         NC.NOTE_CONV_RULE_CD, NC.RULE_APPL_CHG_CD" ).append("\n"); 
		query.append("                            ORDER BY  " ).append("\n"); 
		query.append("                              ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = bk.bkg_ctrt_tp_cd AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ,  " ).append("\n"); 
		query.append("                              GREATEST(DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0), DECODE(BKG_SCG_GRP_CMDT_CD, NULL, 0, 500))  " ).append("\n"); 
		query.append("                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_TS_PORT_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)   DESC  ,  " ).append("\n"); 
		query.append("                              NC.FRT_RT_AMT         ,  " ).append("\n"); 
		query.append("                              NC.NOTE_CONV_MAPG_ID  ,  " ).append("\n"); 
		query.append("                              NC.NOTE_CONV_SEQ " ).append("\n"); 
		query.append("                            ) ROW_NUMBER  ,  " ).append("\n"); 
		query.append("  " ).append("\n"); 
		query.append("        RANK() OVER ( PARTITION BY NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD, NC.NOTE_CONV_RULE_CD  " ).append("\n"); 
		query.append("                      ORDER BY  " ).append("\n"); 
		query.append("                        ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A, BK WHERE A.PRC_CTRT_TP_CD = BK.bkg_ctrt_tp_cd AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ,  " ).append("\n"); 
		query.append("                        GREATEST(DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0), DECODE(BKG_SCG_GRP_CMDT_CD, NULL, 0, 500))  " ).append("\n"); 
		query.append("                          + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)   DESC" ).append("\n"); 
		query.append("                      ) ROW_RANK  " ).append("\n"); 
		query.append("FROM    BK, PRI_SC_NOTE_CONV NC," ).append("\n"); 
		query.append("        MDM_CHARGE                MC" ).append("\n"); 
		query.append("WHERE   NC.SVC_SCP_CD = BK.BKG_SVC_SCP_CD" ).append("\n"); 
		query.append("AND     NC.PROP_NO = BK.bk_prop_no" ).append("\n"); 
		query.append("AND     NC.AMDT_SEQ = BK.BK_AMDT_SEQ" ).append("\n"); 
		query.append("AND     BK.RT_APLY_DT BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999 " ).append("\n"); 
		query.append("/*******************************************************************************************  " ).append("\n"); 
		query.append("NOTE 가 정상적인 상태인지를 CHECK 한다.  " ).append("\n"); 
		query.append("*******************************************************************************************/  " ).append("\n"); 
		query.append("AND     EXISTS  (  " ).append("\n"); 
		query.append("                SELECT 'X' FROM PRI_SG_STND_NOTE_CTNT     A WHERE A.NOTE_CONV_MAPG_ID = NC.NOTE_CONV_MAPG_ID AND NC.NOTE_CONV_TP_CD = 'T'  " ).append("\n"); 
		query.append("                UNION ALL  " ).append("\n"); 
		query.append("                SELECT 'X' FROM PRI_SP_SCP_NOTE_CTNT      A WHERE A.NOTE_CONV_MAPG_ID = NC.NOTE_CONV_MAPG_ID AND NC.NOTE_CONV_TP_CD = 'P' AND A.SRC_INFO_CD <> 'AD' AND A.NOTE_TP_CD = 'P'  " ).append("\n"); 
		query.append("                UNION ALL  " ).append("\n"); 
		query.append("                SELECT 'X' FROM PRI_SP_SCP_RT_CNOTE       A WHERE A.NOTE_CONV_MAPG_ID = NC.NOTE_CONV_MAPG_ID AND NC.NOTE_CONV_TP_CD = 'C' AND A.SRC_INFO_CD <> 'AD'  " ).append("\n"); 
		query.append("                UNION ALL  " ).append("\n"); 
		query.append("                SELECT 'X' FROM PRI_SP_SCP_RT_CMDT_RNOTE  A WHERE A.NOTE_CONV_MAPG_ID = NC.NOTE_CONV_MAPG_ID AND NC.NOTE_CONV_TP_CD = 'R' AND A.SRC_INFO_CD <> 'AD'  " ).append("\n"); 
		query.append("                )  " ).append("\n"); 
		query.append("AND     NC.CHG_RULE_TP_CD = 'C'" ).append("\n"); 
		query.append("AND     NC.NOTE_CONV_CHG_CD = BK.CHG_CD" ).append("\n"); 
		query.append("AND     NC.RT_APPL_TP_CD IN ('I', 'N', 'F') -- Include, Not Applicable, Fixed Amount에 한해 적용" ).append("\n"); 
		query.append("AND     MC.CHG_CD(+)            = NC.NOTE_CONV_CHG_CD  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.RULE_APPL_CHG_TP_CD  IS NULL  " ).append("\n"); 
		query.append("        OR  NC.RULE_APPL_CHG_TP_CD  = 'S'           /* SURCHARGE 를 대상으로 함 */  " ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("/*******************************************************************************************  " ).append("\n"); 
		query.append("R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )  " ).append("\n"); 
		query.append("*******************************************************************************************/  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_RCV_TERM_CD  = BK.RCV_TERM_CD  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_RCV_TERM_CD IS NULL  " ).append("\n"); 
		query.append("            AND (  " ).append("\n"); 
		query.append("                    MC.CHG_APLY_AREA_CD = 'C'  " ).append("\n"); 
		query.append("                OR  BK.RCV_TERM_CD  IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BK.RCV_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BK.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )  " ).append("\n"); 
		query.append("                )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )  " ).append("\n"); 
		query.append("  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_DE_TERM_CD   = BK.DE_TERM_CD  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_DE_TERM_CD IS NULL  " ).append("\n"); 
		query.append("            AND (  " ).append("\n"); 
		query.append("                    MC.CHG_APLY_AREA_CD = 'P'  " ).append("\n"); 
		query.append("                OR  BK.DE_TERM_CD   IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BK.DE_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BK.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )  " ).append("\n"); 
		query.append("                )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )  " ).append("\n"); 
		query.append("/*******************************************************************************************  " ).append("\n"); 
		query.append("< ROUTE >  " ).append("\n"); 
		query.append("STANDARD NOTE 의 경우는 GROUP 을 사용하지 않으므로,  " ).append("\n"); 
		query.append("STANDARD NOTE 를 위한 특별한 고려가 필요하지 않음.  " ).append("\n"); 
		query.append("*******************************************************************************************/  " ).append("\n"); 
		query.append("/* POR */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_POR_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  ( " ).append("\n"); 
		query.append("                NC.BKG_POR_DEF_CD = DECODE(NC.BKG_POR_TP_CD, 'L', bk_por_cd, 'T', bk_por_ste_cd, 'R', bk_por_rgn_cd, 'C', bk_por_cnt_cd) " ).append("\n"); 
		query.append("            )          " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_POR_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POR_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD = bk_por_cd " ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )  " ).append("\n"); 
		query.append("/* POL */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_POL_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  NC.BKG_POL_DEF_CD = DECODE(NC.BKG_POL_TP_CD, 'L', bk_pol_cd, 'T', bk_pol_ste_cd, 'R', bk_pol_rgn_cd, 'C', bk_pol_cnt_cd)  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_POL_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POL_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD = bk_pol_cd" ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )              " ).append("\n"); 
		query.append("/* POD */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_POD_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  NC.BKG_POD_DEF_CD = DECODE(NC.BKG_POD_TP_CD, 'L', bk_pod_cd, 'T', bk_pod_ste_cd, 'R', bk_pod_rgn_cd, 'C', bk_pod_cnt_cd)  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_POD_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POD_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD         = bk_pod_cd  " ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )  " ).append("\n"); 
		query.append("/* DEL */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_DEL_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  NC.BKG_DEL_DEF_CD = DECODE(NC.BKG_DEL_TP_CD, 'L', bk_del_cd, 'T', bk_del_ste_cd, 'R', bk_del_rgn_cd, 'C', bk_del_cnt_cd)  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_DEL_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_DEL_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD         = bk_del_cd  " ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("AND     'S' = BK.BKG_CTRT_TP_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  NC.NOTE_CONV_CHG_CD         , " ).append("\n"); 
		query.append("        NC.NOTE_CONV_RULE_CD        ," ).append("\n"); 
		query.append("        NC.BKG_RAT_UT_CD            ," ).append("\n"); 
		query.append("        NC.RT_APPL_TP_CD            ,  " ).append("\n"); 
		query.append("        NC.CURR_CD                  ,  " ).append("\n"); 
		query.append("        NC.FRT_RT_AMT               ,  " ).append("\n"); 
		query.append("        NC.PAY_TERM_CD              ," ).append("\n"); 
		query.append("        ROW_NUMBER() OVER ( PARTITION BY NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD,   " ).append("\n"); 
		query.append("                                         NC.NOTE_CONV_RULE_CD" ).append("\n"); 
		query.append("                            ORDER BY  " ).append("\n"); 
		query.append("                              ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = bk.bkg_ctrt_tp_cd AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ,  " ).append("\n"); 
		query.append("                              GREATEST(DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0))  " ).append("\n"); 
		query.append("                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_TS_PORT_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  DESC  ,  " ).append("\n"); 
		query.append("                              NC.FRT_RT_AMT         ,  " ).append("\n"); 
		query.append("                              NC.NOTE_CONV_MAPG_ID  ,  " ).append("\n"); 
		query.append("                              NC.NOTE_CONV_SEQ " ).append("\n"); 
		query.append("                            ) ROW_NUMBER  ,  " ).append("\n"); 
		query.append("  " ).append("\n"); 
		query.append("        RANK() OVER ( PARTITION BY NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD, NC.NOTE_CONV_RULE_CD  " ).append("\n"); 
		query.append("                      ORDER BY  " ).append("\n"); 
		query.append("                        ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A, BK WHERE A.PRC_CTRT_TP_CD = BK.bkg_ctrt_tp_cd AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ,  " ).append("\n"); 
		query.append("                        GREATEST(DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0))  " ).append("\n"); 
		query.append("                          + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)   DESC" ).append("\n"); 
		query.append("                      ) ROW_RANK  " ).append("\n"); 
		query.append("FROM    BK, PRI_RFA_NOTE_CONV NC,  " ).append("\n"); 
		query.append("        MDM_CHARGE                MC" ).append("\n"); 
		query.append("WHERE   NC.SVC_SCP_CD = BK.BKG_SVC_SCP_CD" ).append("\n"); 
		query.append("AND     NC.PROP_NO = BK.bk_prop_no" ).append("\n"); 
		query.append("AND     NC.AMDT_SEQ = BK.BK_AMDT_SEQ" ).append("\n"); 
		query.append("AND     BK.RT_APLY_DT BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999 " ).append("\n"); 
		query.append("/*******************************************************************************************  " ).append("\n"); 
		query.append("NOTE 가 정상적인 상태인지를 CHECK 한다.  " ).append("\n"); 
		query.append("*******************************************************************************************/  " ).append("\n"); 
		query.append("AND     EXISTS  (  " ).append("\n"); 
		query.append("                SELECT 'X' FROM PRI_RP_SCP_NOTE_CTNT      A WHERE A.NOTE_CONV_MAPG_ID = NC.NOTE_CONV_MAPG_ID AND NC.NOTE_CONV_TP_CD = 'P' AND A.SRC_INFO_CD <> 'AD' AND A.NOTE_TP_CD = 'P'  " ).append("\n"); 
		query.append("                UNION ALL  " ).append("\n"); 
		query.append("                SELECT 'X' FROM PRI_RP_SCP_RT_CNOTE       A WHERE A.NOTE_CONV_MAPG_ID = NC.NOTE_CONV_MAPG_ID AND NC.NOTE_CONV_TP_CD = 'C' AND A.SRC_INFO_CD <> 'AD'  " ).append("\n"); 
		query.append("                UNION ALL  " ).append("\n"); 
		query.append("                SELECT 'X' FROM PRI_RP_SCP_RT_CMDT_RNOTE  A WHERE A.NOTE_CONV_MAPG_ID = NC.NOTE_CONV_MAPG_ID AND NC.NOTE_CONV_TP_CD = 'R' AND A.SRC_INFO_CD <> 'AD'  " ).append("\n"); 
		query.append("                UNION ALL  " ).append("\n"); 
		query.append("                SELECT 'X' FROM PRI_TRI_NOTE              A WHERE A.NOTE_CONV_MAPG_ID = NC.NOTE_CONV_MAPG_ID AND NC.NOTE_CONV_TP_CD = 'F'  " ).append("\n"); 
		query.append("                )   " ).append("\n"); 
		query.append("AND     NC.CHG_RULE_TP_CD = 'C'" ).append("\n"); 
		query.append("AND     NC.NOTE_CONV_CHG_CD = BK.CHG_CD" ).append("\n"); 
		query.append("AND     NC.RT_APPL_TP_CD IN ('I', 'N', 'F') -- Include, Not Applicable, Fixed Amount에 한해 적용" ).append("\n"); 
		query.append("AND     MC.CHG_CD(+)            = NC.NOTE_CONV_CHG_CD  " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************  " ).append("\n"); 
		query.append("< ROUTE >  " ).append("\n"); 
		query.append("STANDARD NOTE 의 경우는 GROUP 을 사용하지 않으므로,  " ).append("\n"); 
		query.append("STANDARD NOTE 를 위한 특별한 고려가 필요하지 않음.  " ).append("\n"); 
		query.append("*******************************************************************************************/  " ).append("\n"); 
		query.append("/* POR */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_POR_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  ( " ).append("\n"); 
		query.append("                NC.BKG_POR_DEF_CD = DECODE(NC.BKG_POR_TP_CD, 'L', bk_por_cd, 'T', bk_por_ste_cd, 'R', bk_por_rgn_cd, 'C', bk_por_cnt_cd) " ).append("\n"); 
		query.append("            )          " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_POR_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POR_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD = bk_por_cd " ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )  " ).append("\n"); 
		query.append("/* POL */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_POL_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  NC.BKG_POL_DEF_CD = DECODE(NC.BKG_POL_TP_CD, 'L', bk_pol_cd, 'T', bk_pol_ste_cd, 'R', bk_pol_rgn_cd, 'C', bk_pol_cnt_cd)  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_POL_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POL_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD = bk_pol_cd" ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )              " ).append("\n"); 
		query.append("/* POD */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_POD_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  NC.BKG_POD_DEF_CD = DECODE(NC.BKG_POD_TP_CD, 'L', bk_pod_cd, 'T', bk_pod_ste_cd, 'R', bk_pod_rgn_cd, 'C', bk_pod_cnt_cd)  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_POD_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POD_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD         = bk_pod_cd  " ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )  " ).append("\n"); 
		query.append("/* DEL */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_DEL_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  NC.BKG_DEL_DEF_CD = DECODE(NC.BKG_DEL_TP_CD, 'L', bk_del_cd, 'T', bk_del_ste_cd, 'R', bk_del_rgn_cd, 'C', bk_del_cnt_cd)  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_DEL_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_DEL_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD         = bk_del_cd  " ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("AND     'R' = BK.BKG_CTRT_TP_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  NC.NOTE_CONV_CHG_CD         , " ).append("\n"); 
		query.append("        NC.NOTE_CONV_RULE_CD        ," ).append("\n"); 
		query.append("        NC.BKG_RAT_UT_CD            ," ).append("\n"); 
		query.append("        NC.RT_APPL_TP_CD            ,  " ).append("\n"); 
		query.append("        NC.CURR_CD                  ,  " ).append("\n"); 
		query.append("        NC.FRT_RT_AMT               ,  " ).append("\n"); 
		query.append("        NC.PAY_TERM_CD              ," ).append("\n"); 
		query.append("        ROW_NUMBER() OVER ( PARTITION BY NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD,   " ).append("\n"); 
		query.append("                                         NC.NOTE_CONV_RULE_CD" ).append("\n"); 
		query.append("                            ORDER BY  " ).append("\n"); 
		query.append("                              ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = bk.bkg_ctrt_tp_cd AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ,  " ).append("\n"); 
		query.append("                              GREATEST(DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0))  " ).append("\n"); 
		query.append("                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_TS_PORT_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)  " ).append("\n"); 
		query.append("                                + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)   DESC  ,  " ).append("\n"); 
		query.append("                              NC.FRT_RT_AMT         ,  " ).append("\n"); 
		query.append("                              NC.NOTE_CONV_MAPG_ID  ,  " ).append("\n"); 
		query.append("                              NC.NOTE_CONV_SEQ " ).append("\n"); 
		query.append("                            ) ROW_NUMBER  ,  " ).append("\n"); 
		query.append("  " ).append("\n"); 
		query.append("        RANK() OVER ( PARTITION BY NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD, NC.NOTE_CONV_RULE_CD  " ).append("\n"); 
		query.append("                      ORDER BY  " ).append("\n"); 
		query.append("                        ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A, BK WHERE A.PRC_CTRT_TP_CD = BK.bkg_ctrt_tp_cd AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ,  " ).append("\n"); 
		query.append("                        GREATEST(DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0))  " ).append("\n"); 
		query.append("                          + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)  " ).append("\n"); 
		query.append("                          + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)   DESC" ).append("\n"); 
		query.append("                      ) ROW_RANK  " ).append("\n"); 
		query.append("FROM    BK, PRI_TAA_TRI_LIST TL, PRI_TRI_RT RT, PRI_TRI_NOTE_CONV NC,  " ).append("\n"); 
		query.append("        MDM_CHARGE                MC" ).append("\n"); 
		query.append("WHERE   TL.TAA_PROP_NO  = BK.bk_prop_no" ).append("\n"); 
		query.append("AND     TL.AMDT_SEQ     = BK.BK_AMDT_SEQ " ).append("\n"); 
		query.append("AND     RT.TRI_PROP_NO  = TL.TRI_PROP_NO  " ).append("\n"); 
		query.append("AND     BK.RT_APLY_DT BETWEEN RT.EFF_DT AND RT.EXP_DT + 0.99999 " ).append("\n"); 
		query.append("AND     RT.PROP_STS_CD  = 'F'  " ).append("\n"); 
		query.append("AND     NC.TRI_PROP_NO  = RT.TRI_PROP_NO  " ).append("\n"); 
		query.append("AND     NC.AMDT_SEQ     = RT.AMDT_SEQ  " ).append("\n"); 
		query.append("AND     BK.RT_APLY_DT   BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999 " ).append("\n"); 
		query.append("/*******************************************************************************************  " ).append("\n"); 
		query.append("NOTE 가 정상적인 상태인지를 CHECK 한다.  " ).append("\n"); 
		query.append("*******************************************************************************************/  " ).append("\n"); 
		query.append("AND     EXISTS  (  " ).append("\n"); 
		query.append("                SELECT 'X' FROM PRI_TRI_NOTE  A WHERE A.NOTE_CONV_MAPG_ID = NC.NOTE_CONV_MAPG_ID AND NC.NOTE_CONV_TP_CD = 'F'  " ).append("\n"); 
		query.append("                UNION ALL  " ).append("\n"); 
		query.append("                SELECT 'X' FROM PRI_TRI_RT    A WHERE A.NOTE_CONV_MAPG_ID = NC.NOTE_CONV_MAPG_ID AND NC.NOTE_CONV_TP_CD = 'R'  " ).append("\n"); 
		query.append("                )   " ).append("\n"); 
		query.append("AND     NC.CHG_RULE_TP_CD = 'C'" ).append("\n"); 
		query.append("AND     NC.NOTE_CONV_CHG_CD = BK.CHG_CD" ).append("\n"); 
		query.append("AND     NC.RT_APPL_TP_CD IN ('I', 'N', 'F') -- Include, Not Applicable, Fixed Amount에 한해 적용" ).append("\n"); 
		query.append("AND     MC.CHG_CD(+)            = NC.NOTE_CONV_CHG_CD  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.RULE_APPL_CHG_TP_CD  IS NULL  " ).append("\n"); 
		query.append("        OR  NC.RULE_APPL_CHG_TP_CD  = 'S'           /* SURCHARGE 를 대상으로 함 */  " ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("/*******************************************************************************************  " ).append("\n"); 
		query.append("R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )  " ).append("\n"); 
		query.append("*******************************************************************************************/  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_RCV_TERM_CD  = BK.RCV_TERM_CD  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_RCV_TERM_CD IS NULL  " ).append("\n"); 
		query.append("            AND (  " ).append("\n"); 
		query.append("                    MC.CHG_APLY_AREA_CD = 'C'  " ).append("\n"); 
		query.append("                OR  BK.RCV_TERM_CD  IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BK.RCV_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BK.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )  " ).append("\n"); 
		query.append("                )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )  " ).append("\n"); 
		query.append("  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_DE_TERM_CD   = BK.DE_TERM_CD  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_DE_TERM_CD IS NULL  " ).append("\n"); 
		query.append("            AND (  " ).append("\n"); 
		query.append("                    MC.CHG_APLY_AREA_CD = 'P'  " ).append("\n"); 
		query.append("                OR  BK.DE_TERM_CD   IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BK.DE_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BK.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )  " ).append("\n"); 
		query.append("                )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )  " ).append("\n"); 
		query.append("/*******************************************************************************************  " ).append("\n"); 
		query.append("< ROUTE >  " ).append("\n"); 
		query.append("STANDARD NOTE 의 경우는 GROUP 을 사용하지 않으므로,  " ).append("\n"); 
		query.append("STANDARD NOTE 를 위한 특별한 고려가 필요하지 않음.  " ).append("\n"); 
		query.append("*******************************************************************************************/  " ).append("\n"); 
		query.append("/* POR */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_POR_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  ( " ).append("\n"); 
		query.append("                NC.BKG_POR_DEF_CD = DECODE(NC.BKG_POR_TP_CD, 'L', bk_por_cd, 'T', bk_por_ste_cd, 'R', bk_por_rgn_cd, 'C', bk_por_cnt_cd) " ).append("\n"); 
		query.append("            )          " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_POR_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POR_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD = bk_por_cd " ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )  " ).append("\n"); 
		query.append("/* POL */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_POL_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  NC.BKG_POL_DEF_CD = DECODE(NC.BKG_POL_TP_CD, 'L', bk_pol_cd, 'T', bk_pol_ste_cd, 'R', bk_pol_rgn_cd, 'C', bk_pol_cnt_cd)  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_POL_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POL_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD = bk_pol_cd" ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )              " ).append("\n"); 
		query.append("/* POD */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_POD_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  NC.BKG_POD_DEF_CD = DECODE(NC.BKG_POD_TP_CD, 'L', bk_pod_cd, 'T', bk_pod_ste_cd, 'R', bk_pod_rgn_cd, 'C', bk_pod_cnt_cd)  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_POD_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POD_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD         = bk_pod_cd  " ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )  " ).append("\n"); 
		query.append("/* DEL */  " ).append("\n"); 
		query.append("AND     (  " ).append("\n"); 
		query.append("            NC.BKG_DEL_DEF_CD IS NULL  " ).append("\n"); 
		query.append("        OR  NC.BKG_DEL_DEF_CD = DECODE(NC.BKG_DEL_TP_CD, 'L', bk_del_cd, 'T', bk_del_ste_cd, 'R', bk_del_rgn_cd, 'C', bk_del_cnt_cd)  " ).append("\n"); 
		query.append("        OR  (  " ).append("\n"); 
		query.append("                NC.BKG_DEL_TP_CD  = 'G'  " ).append("\n"); 
		query.append("            AND EXISTS  (  " ).append("\n"); 
		query.append("                        SELECT  'X'  " ).append("\n"); 
		query.append("                        FROM    BKG_AUTO_RT_GRP_LOC_TMP GL  " ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_DEL_DEF_CD  " ).append("\n"); 
		query.append("                        AND     GL.LOC_CD         = bk_del_cd  " ).append("\n"); 
		query.append("                        )  " ).append("\n"); 
		query.append("            )  " ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("AND     'T' = BK.BKG_CTRT_TP_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("NC_P AS (  " ).append("\n"); 
		query.append("  " ).append("\n"); 
		query.append("/*******************************************************************************************  " ).append("\n"); 
		query.append("적용될 CONVERSION 이 같은 NOTE_CONV_TP_CD 에서 하나의 NOTE_CONV_RULE_CD 가 되도록 우선순위가 낮은 것을 제거한다.  " ).append("\n"); 
		query.append("*******************************************************************************************/  " ).append("\n"); 
		query.append("SELECT  NC.NOTE_CONV_CHG_CD         , " ).append("\n"); 
		query.append("        NC.BKG_RAT_UT_CD            ," ).append("\n"); 
		query.append("        NC.RT_APPL_TP_CD            ,  " ).append("\n"); 
		query.append("        NC.CURR_CD                  ,  " ).append("\n"); 
		query.append("        NC.FRT_RT_AMT               ,  " ).append("\n"); 
		query.append("        NC.PAY_TERM_CD              " ).append("\n"); 
		query.append("FROM    NC  " ).append("\n"); 
		query.append("WHERE   (NVL(NOTE_CONV_RULE_CD,'NOT') <> 'TYP' AND ROW_NUMBER  = 1 AND ROW_RANK = 1 )" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("S3 AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT BKG_NO," ).append("\n"); 
		query.append("       CHG_CD," ).append("\n"); 
		query.append("       RAT_UT_CD," ).append("\n"); 
		query.append("       CURR_CD," ).append("\n"); 
		query.append("       MAX(SCG_AMT) SCG_AMT," ).append("\n"); 
		query.append("       'DR' as CGO_CATE_CD," ).append("\n"); 
		query.append("       PAY_TERM_CD, " ).append("\n"); 
		query.append("       APPLY_FLG," ).append("\n"); 
		query.append("	   FRT_TERM_CD       " ).append("\n"); 
		query.append("FROM   (SELECT XX.BKG_NO," ).append("\n"); 
		query.append("               XX.CHG_CD," ).append("\n"); 
		query.append("               XX.RAT_UT_CD," ).append("\n"); 
		query.append("               XX.CURR_CD," ).append("\n"); 
		query.append("               SCG_AMT," ).append("\n"); 
		query.append("               'DR' as CGO_CATE_CD," ).append("\n"); 
		query.append("               PAY_TERM_CD," ).append("\n"); 
		query.append("               BKG_DATE_PKG.BKG_GET_DATE_FNC(XX.BKG_NO, SCG_PRD_CRTE_CD,SCG_PRD_TP_CD,SCG_CRTE_DY_KNT) APPLY_DT," ).append("\n"); 
		query.append("               NVL(LEAD(BKG_DATE_PKG.BKG_GET_DATE_FNC(XX.BKG_NO, SCG_PRD_CRTE_CD,SCG_PRD_TP_CD,SCG_CRTE_DY_KNT)) OVER( ORDER BY BKG_DATE_PKG.BKG_GET_DATE_FNC(XX.BKG_NO, SCG_PRD_CRTE_CD,SCG_PRD_TP_CD,SCG_CRTE_DY_KNT)),TO_DATE('9999/12/31 23:59:59','YYYY/MM/DD HH24:MI:SS')) NEXT_DT," ).append("\n"); 
		query.append("               DECODE(B.CHG_CD, NULL, DECODE(ORG_PPD_RCV_CD,'C','N','Y'),'N') APPLY_FLG," ).append("\n"); 
		query.append("               XX.FRT_TERM_CD " ).append("\n"); 
		query.append("               " ).append("\n"); 
		query.append("         FROM " ).append("\n"); 
		query.append("           (" ).append("\n"); 
		query.append("            SELECT PAY_TERM_CD,RAT_UT_CD," ).append("\n"); 
		query.append("                   CURR_CD," ).append("\n"); 
		query.append("                   SCG_AMT," ).append("\n"); 
		query.append("                   SR.SCG_PRD_CRTE_CD,SR.SCG_PRD_TP_CD,SR.SCG_CRTE_DY_KNT," ).append("\n"); 
		query.append("                   SP.CHG_CD," ).append("\n"); 
		query.append("                   SUB_M.BKG_NO," ).append("\n"); 
		query.append("                   SUB_M.FRT_TERM_CD," ).append("\n"); 
		query.append("                   RANK() OVER ( PARTITION BY SP.CHG_CD" ).append("\n"); 
		query.append("                                 ORDER BY GREATEST(DECODE(SR.CMDT_CD, NULL, 0, 600), DECODE(SR.SCG_GRP_CMDT_CD, NULL, 0, 500))" ).append("\n"); 
		query.append("                                                    + DECODE(SR.POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                                    + DECODE(SR.POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                                    + DECODE(SR.POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                                    + DECODE(SR.DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                              DESC) ROW_RANK  " ).append("\n"); 
		query.append("            FROM BK SUB_M," ).append("\n"); 
		query.append("                 PRI_SCG_PRF SP," ).append("\n"); 
		query.append("                 PRI_SCG_RT SR," ).append("\n"); 
		query.append("                 MDM_CHARGE MC  " ).append("\n"); 
		query.append("            WHERE SP.SVC_SCP_CD  =  SUB_M.BKG_SVC_SCP_CD " ).append("\n"); 
		query.append("            AND   SP.CHG_CD  =  'LBP' -- BKG_SVC_SCP_CD 를 사용한다. " ).append("\n"); 
		query.append("            AND   SR.SVC_SCP_CD      =  SP.SVC_SCP_CD" ).append("\n"); 
		query.append("            AND   SR.CHG_CD    =  SP.CHG_CD" ).append("\n"); 
		query.append("            AND   SR.WDR_FLG   =  'N'" ).append("\n"); 
		query.append("            AND   SR.DELT_FLG  =  'N'   -- Sucharge 적용 중지 여부 " ).append("\n"); 
		query.append("            AND   SR.SCG_RQST_PROC_CD = 'A'" ).append("\n"); 
		query.append("            AND   MC.CHG_CD       = SP.CHG_CD" ).append("\n"); 
		query.append("            AND   SUB_M.RT_APLY_DT    BETWEEN SR.EFF_DT AND SR.EXP_DT + 0.99999   -- 0.99999 는 23시 59분 59초를 의미 " ).append("\n"); 
		query.append("            /*******************************************************************************************" ).append("\n"); 
		query.append("            R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )" ).append("\n"); 
		query.append("            *******************************************************************************************/" ).append("\n"); 
		query.append("            AND     (" ).append("\n"); 
		query.append("                    SR.PRC_RCV_TERM_CD  = SUB_M.RCV_TERM_CD" ).append("\n"); 
		query.append("                    OR  (" ).append("\n"); 
		query.append("                            ( SP.RCV_DE_TERM_USE_FLG = 'N' OR SR.PRC_RCV_TERM_CD IS NULL )" ).append("\n"); 
		query.append("                             AND (" ).append("\n"); 
		query.append("                                  MC.CHG_APLY_AREA_CD = 'C'" ).append("\n"); 
		query.append("                                  OR  SUB_M.RCV_TERM_CD  IN ( DECODE(MC.NA_RD_TERM_FLG, 'Y', SUB_M.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )" ).append("\n"); 
		query.append("                                 )" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("            AND     (" ).append("\n"); 
		query.append("                    SR.PRC_DE_TERM_CD   = SUB_M.DE_TERM_CD" ).append("\n"); 
		query.append("                    OR  (" ).append("\n"); 
		query.append("                            ( SP.RCV_DE_TERM_USE_FLG = 'N' OR SR.PRC_DE_TERM_CD IS NULL )" ).append("\n"); 
		query.append("                            AND (" ).append("\n"); 
		query.append("                                MC.CHG_APLY_AREA_CD = 'P'" ).append("\n"); 
		query.append("                                OR  SUB_M.DE_TERM_CD   IN ( DECODE(MC.NA_RD_TERM_FLG, 'Y', SUB_M.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("            /* POR */" ).append("\n"); 
		query.append("            AND     (" ).append("\n"); 
		query.append("                        SP.POR_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                    OR  SR.POR_DEF_CD   IS NULL" ).append("\n"); 
		query.append("                    OR  SR.POR_DEF_CD   =  DECODE(SUB_M.USR_LOC,SR.POR_DEF_CD,SUB_M.USR_LOC," ).append("\n"); 
		query.append("                                                                                DECODE(SR.POR_TP_CD, 'L', SUB_M.USR_LOC, 'T', SUB_M.USR_STE, 'R', SUB_M.USR_RGN, 'C', SUB_M.USR_CNT) )" ).append("\n"); 
		query.append("                 " ).append("\n"); 
		query.append("                    OR  (" ).append("\n"); 
		query.append("                            SR.POR_TP_CD  = 'G'" ).append("\n"); 
		query.append("                        AND EXISTS  (" ).append("\n"); 
		query.append("                                    SELECT  'X'" ).append("\n"); 
		query.append("                                    FROM    PRI_SCG_GRP_LOC     GL  ," ).append("\n"); 
		query.append("                                            PRI_SCG_GRP_LOC_DTL GD" ).append("\n"); 
		query.append("                                    WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD" ).append("\n"); 
		query.append("                                    AND     GD.CHG_CD         = GL.CHG_CD" ).append("\n"); 
		query.append("                                    AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ" ).append("\n"); 
		query.append("                                    AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD" ).append("\n"); 
		query.append("                                    AND     GL.CHG_CD         = SR.CHG_CD" ).append("\n"); 
		query.append("                                    AND     GL.SCG_GRP_LOC_CD = SR.POR_DEF_CD" ).append("\n"); 
		query.append("                                    AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', SUB_M.USR_LOC, 'T', SUB_M.USR_STE, 'R', SUB_M.USR_RGN, 'C', SUB_M.USR_CNT)" ).append("\n"); 
		query.append("                                    )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("            /* POL */" ).append("\n"); 
		query.append("            AND     (" ).append("\n"); 
		query.append("                        SP.POL_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                    OR  SR.POL_DEF_CD   IS NULL" ).append("\n"); 
		query.append("                              OR  SR.POL_DEF_CD   = DECODE(SUB_M.USR_LOC,SR.POL_DEF_CD,SUB_M.USR_LOC," ).append("\n"); 
		query.append("                                                                               DECODE(SR.POL_TP_CD, 'L', SUB_M.USR_LOC, 'T', SUB_M.USR_STE, 'R', SUB_M.USR_RGN, 'C', SUB_M.USR_CNT) )" ).append("\n"); 
		query.append("                                                                               " ).append("\n"); 
		query.append("                    OR  (" ).append("\n"); 
		query.append("                            SR.POL_TP_CD  = 'G'" ).append("\n"); 
		query.append("                        AND EXISTS  (" ).append("\n"); 
		query.append("                                    SELECT  'X'" ).append("\n"); 
		query.append("                                    FROM    PRI_SCG_GRP_LOC     GL  ," ).append("\n"); 
		query.append("                                            PRI_SCG_GRP_LOC_DTL GD" ).append("\n"); 
		query.append("                                    WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD" ).append("\n"); 
		query.append("                                    AND     GD.CHG_CD         = GL.CHG_CD" ).append("\n"); 
		query.append("                                    AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ" ).append("\n"); 
		query.append("                                    AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD" ).append("\n"); 
		query.append("                                    AND     GL.CHG_CD         = SR.CHG_CD" ).append("\n"); 
		query.append("                                    AND     GL.SCG_GRP_LOC_CD = SR.POL_DEF_CD" ).append("\n"); 
		query.append("                                    AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', SUB_M.USR_LOC, 'T', SUB_M.USR_STE, 'R', SUB_M.USR_RGN, 'C', SUB_M.USR_CNT)" ).append("\n"); 
		query.append("                                    )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("            /* POD */" ).append("\n"); 
		query.append("            AND     (" ).append("\n"); 
		query.append("                        SP.POD_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                    OR  SR.POD_DEF_CD   IS NULL" ).append("\n"); 
		query.append("                    OR  SR.POD_DEF_CD   = DECODE(SUB_M.USR_LOC,SR.POD_DEF_CD,SUB_M.USR_LOC," ).append("\n"); 
		query.append("                                                                               DECODE(SR.POD_TP_CD, 'L', SUB_M.bk_pod_cd, 'T', SUB_M.bk_pod_ste_cd, 'R', SUB_M.bk_pod_rgn_cd, 'C',SUB_M.bk_pod_cnt_cd) )" ).append("\n"); 
		query.append("                                                                               " ).append("\n"); 
		query.append("                    OR  (" ).append("\n"); 
		query.append("                            SR.POD_TP_CD  = 'G'" ).append("\n"); 
		query.append("                        AND EXISTS  (" ).append("\n"); 
		query.append("                                    SELECT  'X'" ).append("\n"); 
		query.append("                                    FROM    PRI_SCG_GRP_LOC     GL  ," ).append("\n"); 
		query.append("                                            PRI_SCG_GRP_LOC_DTL GD" ).append("\n"); 
		query.append("                                    WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD" ).append("\n"); 
		query.append("                                    AND     GD.CHG_CD         = GL.CHG_CD" ).append("\n"); 
		query.append("                                    AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ" ).append("\n"); 
		query.append("                                    AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD" ).append("\n"); 
		query.append("                                    AND     GL.CHG_CD         = SR.CHG_CD" ).append("\n"); 
		query.append("                                    AND     GL.SCG_GRP_LOC_CD = SR.POD_DEF_CD" ).append("\n"); 
		query.append("                                    AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', SUB_M.bk_pod_cd, 'T', SUB_M.bk_pod_ste_cd, 'R', SUB_M.bk_pod_rgn_cd, 'C', SUB_M.bk_pod_cnt_cd)" ).append("\n"); 
		query.append("                                    )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("            /* DEL */" ).append("\n"); 
		query.append("            AND     (" ).append("\n"); 
		query.append("                        SP.DEL_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                    OR  SR.DEL_DEF_CD   IS NULL          " ).append("\n"); 
		query.append("                    OR  SR.DEL_DEF_CD   = DECODE(SUB_M.USR_LOC,SR.DEL_DEF_CD,SUB_M.USR_LOC," ).append("\n"); 
		query.append("                                                                               DECODE(SR.DEL_TP_CD, 'L', SUB_M.bk_del_cd, 'T', SUB_M.bk_del_ste_cd, 'R', SUB_M.bk_del_rgn_cd, 'C', SUB_M.bk_del_cnt_cd) )" ).append("\n"); 
		query.append("                    OR  (" ).append("\n"); 
		query.append("                            SR.DEL_TP_CD  = 'G'" ).append("\n"); 
		query.append("                        AND EXISTS  (" ).append("\n"); 
		query.append("                                    SELECT  'X'" ).append("\n"); 
		query.append("                                    FROM    PRI_SCG_GRP_LOC     GL  ," ).append("\n"); 
		query.append("                                            PRI_SCG_GRP_LOC_DTL GD" ).append("\n"); 
		query.append("                                    WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD" ).append("\n"); 
		query.append("                                    AND     GD.CHG_CD         = GL.CHG_CD" ).append("\n"); 
		query.append("                                    AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ" ).append("\n"); 
		query.append("                                    AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD" ).append("\n"); 
		query.append("                                    AND     GL.CHG_CD         = SR.CHG_CD" ).append("\n"); 
		query.append("                                    AND     GL.SCG_GRP_LOC_CD = SR.DEL_DEF_CD" ).append("\n"); 
		query.append("                                    AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', SUB_M.bk_del_cd, 'T', SUB_M.bk_del_ste_cd, 'R', SUB_M.bk_del_rgn_cd, 'C', SUB_M.bk_del_cnt_cd)" ).append("\n"); 
		query.append("                                    )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("               --/* DIR CALL */" ).append("\n"); 
		query.append("                AND     (" ).append("\n"); 
		query.append("                            SP.DIR_CALL_USE_FLG = 'N'" ).append("\n"); 
		query.append("                        OR  SR.DIR_CALL_FLG     IS NULL" ).append("\n"); 
		query.append("                        OR  SR.DIR_CALL_FLG     = bk_dir_call_flg" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                /* COMMODITY */" ).append("\n"); 
		query.append("                AND     (" ).append("\n"); 
		query.append("                            SP.CMDT_USE_FLG   = 'N'" ).append("\n"); 
		query.append("                        OR  SR.CMDT_CD        IS NULL" ).append("\n"); 
		query.append("                        OR  SR.CMDT_CD        = BK_CMDT_CD" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("            )XX, BKG_CHG_RT B, BKG_BL_ISS C" ).append("\n"); 
		query.append("        WHERE   1=1     " ).append("\n"); 
		query.append("        AND XX.BKG_NO = B.BKG_NO(+)" ).append("\n"); 
		query.append("        AND B.CHG_CD(+)='LBP'" ).append("\n"); 
		query.append("        AND XX.ROW_RANK       = 1" ).append("\n"); 
		query.append("        AND XX.SCG_AMT        > 0" ).append("\n"); 
		query.append("        AND XX.BKG_NO = C.BKG_NO" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("WHERE  TO_CHAR(APPLY_DT, 'YYYY/MM/DD') <  TO_CHAR(SYSDATE, 'YYYY/MM/DD')" ).append("\n"); 
		query.append("AND    TO_CHAR(SYSDATE, 'YYYY/MM/DD') <= TO_CHAR(NEXT_DT, 'YYYY/MM/DD')" ).append("\n"); 
		query.append("AND    NOT EXISTS (SELECT RT_APPL_TP_CD" ).append("\n"); 
		query.append("                    FROM NC_P" ).append("\n"); 
		query.append("                    WHERE RT_APPL_TP_CD = 'N')" ).append("\n"); 
		query.append("GROUP BY BKG_NO, CHG_CD, RAT_UT_CD, CURR_CD, PAY_TERM_CD,APPLY_FLG, CGO_CATE_CD, FRT_TERM_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("SELECT S3.BKG_NO," ).append("\n"); 
		query.append("       NVL(F.BKG_RAT_UT_CD, S3.RAT_UT_CD) RAT_UT_CD," ).append("\n"); 
		query.append("       NVL(F.CURR_CD, S3.CURR_CD) CURR_CD," ).append("\n"); 
		query.append("       NVL(F.FRT_RT_AMT, S3.SCG_AMT) SCG_AMT, " ).append("\n"); 
		query.append("       S3.CGO_CATE_CD," ).append("\n"); 
		query.append("       S3.APPLY_FLG," ).append("\n"); 
		query.append("       NVL(F.PAY_TERM_CD, S3.FRT_TERM_CD) FRT_TERM_CD," ).append("\n"); 
		query.append("       NVL(I.RT_APPL_TP_CD, 'N') FRT_INCL_XCLD_DIV_CD" ).append("\n"); 
		query.append("FROM S3, NC_P F, NC_P I" ).append("\n"); 
		query.append("WHERE S3.CHG_CD = F.NOTE_CONV_CHG_CD(+)" ).append("\n"); 
		query.append("AND 'F' = F.RT_APPL_TP_CD(+)" ).append("\n"); 
		query.append("AND S3.CHG_CD = I.NOTE_CONV_CHG_CD(+)" ).append("\n"); 
		query.append("AND 'I' = I.RT_APPL_TP_CD(+)" ).append("\n"); 
		query.append("AND ROWNUM = 1" ).append("\n"); 

	}
}