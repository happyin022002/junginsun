<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="UnmatchBLDBDAOSearchAuditByEqSubErrListRSQL">
			<desc><![CDATA[Audit by CNTR Qty Discrepancy 리스트 정보를 Container 별로 조회한다]]></desc>
			<sql><![CDATA[
WITH
BK AS
(
    SELECT DECODE(BK.SPLIT_FLG, NULL, 'N', 'Y', 'S', BK.SPLIT_FLG) SPLIT_FLG   ,
           ( SELECT INTG_CD_VAL_DP_DESC FROM COM_INTG_CD_DTL WHERE INTG_CD_ID = 'CD02376' AND INTG_CD_VAL_CTNT = DECODE(BK.SPLIT_FLG, NULL, 'N', 'Y', 'S', BK.SPLIT_FLG) ) SPLIT_NM, 
           ( SELECT OFC_CD FROM MDM_ORGANIZATION WHERE OFC_TP_CD = 'HQ' CONNECT BY PRIOR PRNT_OFC_CD = OFC_CD START WITH OFC_CD = BK.BKG_OFC_CD ) AS BKG_RHQ_CD  ,
            (SELECT DECODE(BL.BDR_FLG, 'Y', 'Yes', 'No') FROM BKG_BL_DOC BL WHERE BK.BKG_NO=BL.BKG_NO)  BDR_FLG ,
			BR.RT_BL_TP_CD    ,
            ( SELECT TRIM(REPLACE(INTG_CD_VAL_DP_DESC, 'B/L', '')) FROM COM_INTG_CD_DTL WHERE INTG_CD_ID = 'CD01639' AND INTG_CD_VAL_CTNT = BR.RT_BL_TP_CD )  RT_BL_TP_NM,
           NVL((SELECT INTG_CD_VAL_DESC
	          FROM COM_INTG_CD_DTL, BKG_REV_DR_NOTE A
		      WHERE 1=1
		      AND INTG_CD_ID = 'CD01568'
		      AND INTG_CD_VAL_CTNT = A.RDN_STS_CD
		      AND A.BKG_NO = BK.BKG_NO
		      AND (A.RDN_NO, RVIS_SEQ ) IN  (SELECT RDN_NO, RVIS_SEQ FROM BKG_REV_DR_NOTE K
                                                  WHERE K.BKG_NO =BK.BKG_NO
                                                        AND K.CRE_DT = (SELECT MAX(CRE_DT) FROM BKG_REV_DR_NOTE P
                                                                        WHERE 1=1
                                                                          AND P.BKG_NO = K.BKG_NO
                                                                          AND ROWNUM = 1)
                                                         )),' ') RDN_STS_NM,
                 NVL(( SELECT 'Charged' FROM BKG_CHG_RT RT WHERE BK.BKG_NO=RT.BKG_NO AND ROWNUM=1 ),'Non-Charged') CHARGE_FLG,
		    BK.BKG_OFC_CD  ,
            BK.BKG_NO      ,
            BK.BL_NO       ,
            BK.BKG_CRE_DT  ,
            BR.RT_APLY_DT  ,
            BK.SVC_SCP_CD  ,
            BK.VSL_CD||BK.SKD_VOY_NO||BK.SKD_DIR_CD VVD ,
            (
                SELECT  TO_DATE(PS.VPS_ETD_DT)
                FROM    (
                        SELECT  *
                        FROM    (
                                SELECT  BV.*  ,
                                        ROW_NUMBER() OVER ( PARTITION BY BKG_NO ORDER BY VSL_PRE_PST_CD, VSL_SEQ ) ROW_NUMBER
                                FROM    BKG_VVD BV
                                )
                        WHERE   ROW_NUMBER  = 1
                        ) BV  ,
                        VSK_VSL_PORT_SKD  PS
                WHERE   PS.VSL_CD       = BV.VSL_CD
                AND     PS.SKD_VOY_NO   = BV.SKD_VOY_NO
                AND     PS.SKD_DIR_CD   = BV.SKD_DIR_CD
                AND     PS.VPS_PORT_CD  = BV.POL_CD
                AND     PS.CLPT_IND_SEQ = BV.POL_CLPT_IND_SEQ
                AND     BV.BKG_NO       = BK.BKG_NO
                ) POL_ETD      ,
            CASE
            WHEN    BK.TAA_NO IS NOT NULL THEN  'T'
            WHEN    BK.RFA_NO IS NOT NULL THEN  'R'
            ELSE    'S'
            END BKG_CTRT_TP_CD  ,
            CASE
            WHEN    BK.TAA_NO IS NOT NULL THEN  BK.TAA_NO
            WHEN    BK.RFA_NO IS NOT NULL THEN  BK.RFA_NO
            ELSE    BK.SC_NO
            END CTRT_NO
    FROM    
		#if (${search_date} == 'ETD')
            VSK_VSL_PORT_SKD VSK,
            BKG_VVD VVD,
        #end
            BKG_BOOKING  BK  ,
            BKG_RATE     BR	 ,

#if (${bdr_flg} != '')
            BKG_BL_DOC BL    ,
#end
			(
      	 	SELECT	OFC_CD 
      	 	FROM	MDM_ORGANIZATION A
#if (${bkg_ofc_cd} != '') 
		 	WHERE	OFC_CD = @[bkg_ofc_cd]
#end
      	 	START WITH	A.OFC_CD		= @[bkg_rhq_cd]
      	 	CONNECT BY	PRIOR A.OFC_CD	= A.PRNT_OFC_CD  
		 	) OG
    WHERE   1=1
	#if (${search_date} == 'ETD')

		#if (${from_dt} != '')
			AND      VSK.VPS_ETD_DT >= TO_DATE(@[from_dt], 'YYYY-MM-DD')
  		#end

  		#if (${to_dt} != '')
  			AND      VSK.VPS_ETD_DT <= TO_DATE (@[to_dt], 'YYYY-MM-DD') + 0.99999      /* 0.99999 는 23시 59분 59초를 의미 */
        #end
		AND VSK.VSL_CD = VVD.VSL_CD
		AND VSK.SKD_VOY_NO = VVD.SKD_VOY_NO
		AND VSK.SKD_DIR_CD = VVD.SKD_DIR_CD
		AND VSK.VPS_PORT_CD = VVD.POL_CD
		AND VSK.CLPT_IND_SEQ = VVD.POL_CLPT_IND_SEQ 
		--AND VVD.VSL_PRE_PST_CD||VVD.VSL_SEQ = ( SELECT MIN(VSL_PRE_PST_CD||VSL_SEQ) FROM BKG_VVD VVD2 WHERE VVD2.BKG_NO = BK.BKG_NO)
		AND VVD.BKG_NO = BK.BKG_NO
		AND VVD.POL_CD = BK.POL_CD

	#end
    AND     BK.BKG_NO	=   BR.BKG_NO
	AND		BK.BKG_OFC_CD	= OG.OFC_CD
	AND		BK.BKG_STS_CD	NOT IN ( 'X', 'A' )
	AND		BK.BKG_CGO_TP_CD	<> 'P'
	AND		NVL(BR.RT_BL_TP_CD, 'N') NOT IN ( 'C', 'B' )
	

   /* 조회조건 */

	#if (${search_date} == 'BOOKING')
		#if (${from_dt} != '')
		AND BK.BKG_CRE_DT >= TO_DATE(@[from_dt], 'YYYY-MM-DD')
		#end
		#if (${to_dt} != '')
		AND BK.BKG_CRE_DT <= TO_DATE(@[to_dt], 'YYYY-MM-DD') + 0.99999 /* 0.99999 는 23시 59분 59초를 의미 */
		#end
	#elseif (${search_date} == 'APPL')
		#if (${from_dt} != '')
		AND BR.RT_APLY_DT >= TO_DATE(@[from_dt], 'YYYY-MM-DD')
		#end
		#if (${to_dt} != '')
		AND BR.RT_APLY_DT <= TO_DATE(@[to_dt], 'YYYY-MM-DD') + 0.99999 /* 0.99999 는 23시 59분 59초를 의미 */
		#end
	#end

	#if (${svc_scp_cd} != '') 
    AND     BK.SVC_SCP_CD   = @[svc_scp_cd]
	#end



	#if (${bkg_ctrt_tp_cd} != '') 
    AND     CASE
                 WHEN    BK.TAA_NO IS NOT NULL THEN  'T'
                 WHEN    BK.RFA_NO IS NOT NULL THEN  'R'
                 ELSE    'S'
            END                     = @[bkg_ctrt_tp_cd]
	#end

	#if (${ctrt_no} != '') 
    AND     CASE
                 WHEN    BK.TAA_NO IS NOT NULL THEN  BK.TAA_NO
                 WHEN    BK.RFA_NO IS NOT NULL THEN  BK.RFA_NO
                 ELSE    BK.SC_NO
            END                     LIKE @[ctrt_no] || '%'
	#end
    #if (${split_flg} == 'S')
        AND     BK.SPLIT_FLG = 'Y'
    #elseif (${split_flg} == 'N')
        AND     (BK.SPLIT_FLG IS NULL OR BK.SPLIT_FLG = 'N')
    #end

    #if (${bdr_flg} != '')
        AND     BK.BKG_NO=BL.BKG_NO
        AND     BL.BDR_FLG  = @[bdr_flg]
    #end
)   ,

BQ AS
(
SELECT  BQ.BKG_NO   ,
		    CASE
   			WHEN BQ.EQ_SUBST_CNTR_TPSZ_CD IS NOT NULL AND BQ.CNTR_TPSZ_CD NOT LIKE 'R%'
   				THEN	BQ.EQ_SUBST_CNTR_TPSZ_CD
   			ELSE	BQ.CNTR_TPSZ_CD
   			END																											AS CTRT_CNTR_TPSZ_CD ,
    		SUM(BQ.OP_CNTR_QTY)       			                    		AS OP_CNTR_QTY       ,
    		MAX(DECODE(BQ.EQ_SUBST_CNTR_TPSZ_CD, NULL, 'N', 'Y')) 	AS EQ_SUBST_FLG      ,
    		MAX(BQ.AWK_CGO_FLG)											              	AS AWK_CGO_FLG       ,
    		MAX(BQ.BB_CGO_FLG)   											            	AS BB_CGO_FLG        ,
        ROW_NUMBER() OVER ( PARTITION BY BQ.BKG_NO
							ORDER BY
		   						CASE
	   							WHEN BQ.EQ_SUBST_CNTR_TPSZ_CD IS NOT NULL AND BQ.CNTR_TPSZ_CD NOT LIKE 'R%'
   									THEN	BQ.EQ_SUBST_CNTR_TPSZ_CD
   								ELSE	BQ.CNTR_TPSZ_CD
   								END
						   ) AS DP_SEQ
FROM    BK  ,
		    BKG_QTY_DTL BQ
WHERE   BQ.BKG_NO    = BK.BKG_NO
GROUP BY
				BQ.BKG_NO   ,
   			CASE
   			WHEN BQ.EQ_SUBST_CNTR_TPSZ_CD IS NOT NULL AND BQ.CNTR_TPSZ_CD NOT LIKE 'R%'
   				THEN	BQ.EQ_SUBST_CNTR_TPSZ_CD
   			ELSE	BQ.CNTR_TPSZ_CD
   			END
)   ,
BR AS
(

    SELECT  BR.BKG_NO     ,
            BR.CHG_CD     ,
            BR.RAT_UT_CD  ,
            BR.RAT_AS_QTY ,
            ROW_NUMBER() OVER ( PARTITION BY BR.BKG_NO ORDER BY BR.RAT_UT_CD ) DP_SEQ
    FROM    BK  ,
            BKG_CHG_RT  BR
    WHERE   BR.BKG_NO = BK.BKG_NO
    AND     BR.CHG_CD = 'OFT'
    
)

SELECT   
         DENSE_RANK() OVER( ORDER BY 		BK.BKG_RHQ_CD        ,
                                            BK.BKG_OFC_CD        ,
                                    		BK.CTRT_NO           ,
                                            BK.POL_ETD              ,
                                            BK.BL_NO			 
        ) ROW_CNT,
        COUNT(DISTINCT BK.BKG_NO) OVER () AS BL_CNT,
        NVL(( SELECT  UMCH_RSN_RMK  
          FROM BKG_REV_AUD_RSLT UB 
          WHERE BK.BKG_NO=UB.BKG_NO 
          AND UB.BKG_REV_AUD_TP_CD='E' 
          AND UB.CNTR_TPSZ_CD= BQ.CTRT_CNTR_TPSZ_CD
          ),' ') UMCH_RSN_RMK ,
       NVL(( SELECT RGN_GRP_AVC_RMK 
         FROM BKG_REV_AUD_RSLT UB 
           WHERE BK.BKG_NO=UB.BKG_NO 
             AND UB.BKG_REV_AUD_TP_CD='E' 
             AND UB.CNTR_TPSZ_CD= BQ.CTRT_CNTR_TPSZ_CD
             ),' ') RGN_GRP_AVC_RMK,        
        BQ.CTRT_CNTR_TPSZ_CD ,
        BK.BKG_RHQ_CD        , -- param
        BK.BKG_OFC_CD        , -- param
        BK.BKG_NO            ,
        BK.BL_NO             ,
        NVL(TO_CHAR(BK.BKG_CRE_DT, 'YYYY-MM-DD'),' ') AS BKG_CRE_DT ,
        NVL(TO_CHAR(BK.RT_APLY_DT, 'YYYY-MM-DD'),' ') AS RT_APLY_DT ,
        NVL(TO_CHAR(BK.POL_ETD,'YYYY-MM-DD'),' ')     AS POL_ETD ,
        BK.SVC_SCP_CD        , -- param
        BK.BKG_CTRT_TP_CD    , -- param
        BK.CTRT_NO           , -- param
     	BK.BDR_FLG ,
        NVL((SELECT  MAX(RDN_NO) RDN_NO
		 FROM    BKG_REV_DR_NOTE
		 WHERE   BKG_NO = BQ.BKG_NO), ' ') AS RDN_NO ,
		NVL(RDN_STS_NM,' ') 			   AS RDN_STS_NM,
        SPLIT_FLG   ,
        SPLIT_NM ,
         
        BCNT.CNTR_NO             AS CNTR_NO, 
        BCNT.CNTR_TPSZ_CD        AS CNTR_TPSZ_CD,          
        BCNT.CNTR_VOL_QTY        AS PCK_QTY, 
        BCNT.CNTR_WGT            AS CNTR_WGT,      
        BCNT.MEAS_QTY           AS MEAS_QTY     
FROM    (
         SELECT  BK.*    ,
                 CP.DP_SEQ
         FROM    BK  ,
                 ( SELECT ROWNUM DP_SEQ FROM DUAL CONNECT BY LEVEL <= 10 ) CP
         WHERE

         /*******************************************************************************************
         	불일치가 발생하는 BKG_NO 를 SELECT 한다.
         *******************************************************************************************/

         		 BK.BKG_NO IN
                         (
                         SELECT  NVL(BQ.BKG_NO, BR.BKG_NO)
                         FROM    BQ
                                 FULL OUTER JOIN BR
                                 ON  BR.BKG_NO     = BQ.BKG_NO
                                 AND BR.DP_SEQ     = BQ.DP_SEQ
                                 AND BR.RAT_UT_CD  = BQ.CTRT_CNTR_TPSZ_CD
                                 AND BR.RAT_AS_QTY = BQ.OP_CNTR_QTY
                         GROUP BY
                                 NVL(BQ.BKG_NO, BR.BKG_NO)
                         HAVING  SUM(DECODE(BQ.DP_SEQ, NULL, 1, 0))  <> 0
                         OR      SUM(DECODE(BR.DP_SEQ, NULL, 1, 0))  <> 0
                         )
        )   BK  ,
        BQ      ,
        BR		,
		BKG_BL_DOC DOC,
		BKG_CONTAINER BCNT
WHERE   BQ.BKG_NO(+) = BK.BKG_NO
AND     BQ.DP_SEQ(+) = BK.DP_SEQ
AND     BR.BKG_NO(+) = BK.BKG_NO
AND     BR.DP_SEQ(+) = BK.DP_SEQ
AND     DOC.BKG_NO(+) = BK.BKG_NO
AND     (
         BQ.DP_SEQ   IS NOT NULL
         OR  BR.DP_SEQ   IS NOT NULL
        )
AND	(  BQ.EQ_SUBST_FLG	= 'Y' )
AND	( 'N'	= 'N' OR BQ.AWK_CGO_FLG		= 'N' OR BQ.AWK_CGO_FLG	IS NULL )
AND ( 'N'		= 'N' OR BQ.BB_CGO_FLG		= 'N' OR BQ.BB_CGO_FLG IS NULL)
AND    BCNT.BKG_NO =  BK.BKG_NO
ORDER BY
		BK.BKG_RHQ_CD        ,
        BK.BKG_OFC_CD        ,
		BK.CTRT_NO           ,
        POL_ETD              ,
        BK.BL_NO			 ,
		BQ.CTRT_CNTR_TPSZ_CD			]]></sql>
			<params>
				<param name="bkg_ofc_cd" type="12" value="" out="N"/>
				<param name="bkg_rhq_cd" type="12" value="" out="N"/>
				<param name="from_dt" type="12" value="" out="N"/>
				<param name="to_dt" type="12" value="" out="N"/>
				<param name="svc_scp_cd" type="12" value="" out="N"/>
				<param name="bkg_ctrt_tp_cd" type="12" value="" out="N"/>
				<param name="ctrt_no" type="12" value="" out="N"/>
				<param name="bdr_flg" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
