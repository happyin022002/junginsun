/*=========================================================
*Copyright(c) 2015 CyberLogitec
*@FileName : CMSummaryDBDAOPriPrsCtrtSmryScgTmpVOCSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2015.06.25
*@LastModifier : 
*@LastVersion : 1.0
* 2015.06.25 
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esm.pri.profitabilitysimulation.cmsummary.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class CMSummaryDBDAOPriPrsCtrtSmryScgTmpVOCSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * Simulatoin을 위해 Cost Detail Surcharge Temp Data 생성
	  * 
	  * * History
	  * 2015.06.26 CHM-201536492 Split05-주간 MAS Open에 따른 타모듈 프로그램 적용 요청
	  * </pre>
	  */
	public CMSummaryDBDAOPriPrsCtrtSmryScgTmpVOCSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("r_sls_to_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_prop_srep_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_prop_ofc_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("c_sls_fm_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("s_sls_to_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_smr_eff_wk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("c_sls_to_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("r_to_yrwk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ctrt_eff_wk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_prop_apro_ofc_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_smr_eff_yr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_dir_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_sub_trd_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ctrt_eff_yr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("usr_id",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("r_sls_fm_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_smr_exp_yr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_trd_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ctrt_exp_wk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ctrt_exp_yr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("s_sls_fm_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_smr_exp_wk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("r_fm_yrwk",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esm.pri.profitabilitysimulation.cmsummary.integration").append("\n"); 
		query.append("FileName : CMSummaryDBDAOPriPrsCtrtSmryScgTmpVOCSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("INSERT INTO PRI_PRS_CTRT_SMRY_SCG_TMP (" ).append("\n"); 
		query.append("	PRS_YRMON" ).append("\n"); 
		query.append("	, PRS_WK" ).append("\n"); 
		query.append("	, PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("	, PRC_CTRT_NO" ).append("\n"); 
		query.append("	, SVC_SCP_CD" ).append("\n"); 
		query.append("	, VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("	, TRD_CD" ).append("\n"); 
		query.append("	, SUB_TRD_CD" ).append("\n"); 
		query.append("	, RLANE_CD" ).append("\n"); 
		query.append("	, PRC_CGO_TP_CD" ).append("\n"); 
		query.append("	, ORG_LOC_TP_CD" ).append("\n"); 
		query.append("	, ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("	, DEST_LOC_TP_CD" ).append("\n"); 
		query.append("	, DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("	, CHG_CD" ).append("\n"); 
		query.append("	, SCG_AMT" ).append("\n"); 
		query.append("	, PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("	, PRS_CUST_TP_CD" ).append("\n"); 
		query.append("	, SLS_FM_DT" ).append("\n"); 
		query.append("	, SLS_TO_DT" ).append("\n"); 
		query.append("	, CRE_USR_ID" ).append("\n"); 
		query.append("	, CRE_DT" ).append("\n"); 
		query.append("	, UPD_USR_ID" ).append("\n"); 
		query.append("	, UPD_DT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(" WITH VW_CONTRACT_DT_LIST AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */COST_YR || SUBSTR(SLS_TO_DT, 5, 2) AS COST_YRMON,COST_WK" ).append("\n"); 
		query.append("	FROM MAS_WK_PRD" ).append("\n"); 
		query.append("	WHERE (COST_YR  || COST_WK) >= (@[frm_ctrt_eff_yr] || @[frm_ctrt_eff_wk])  AND (COST_YR || COST_WK )<= (@[frm_ctrt_exp_yr] || @[frm_ctrt_exp_wk])" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- SUMMARY에서 입력한 주차를 이용해 현재 날짜 이전 주차는 WK_TP : -1 , 현재 주차 : 0 , 미래주차 : 1" ).append("\n"); 
		query.append("  ," ).append("\n"); 
		query.append("VW_SUMMARY_WEEK AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */SLS_FM_YRWK, SLS_FM_DT, SLS_TO_YRWK, SLS_TO_DT, WK_TP " ).append("\n"); 
		query.append("		,(SELECT COUNT(*) FROM MAS_WK_PRD PRD WHERE ( PRD.COST_YR || PRD.COST_WK >= MN.SLS_FM_YRWK AND PRD.COST_YR || PRD.COST_WK <= MN.SLS_TO_YRWK) ) + DECODE(WK_TP, 1, 1, 0) AS TOT_WK -- ESTIMATE 조회시 현재주차도 미래주차에 포함시킨다." ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("			SELECT MIN(COST_YR || COST_WK) AS SLS_FM_YRWK, MIN(SLS_FM_DT) AS SLS_FM_DT, MAX(COST_YR || COST_WK) AS SLS_TO_YRWK , MAX(SLS_TO_DT) AS SLS_TO_DT, WK_TP" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT COST_YR,	COST_WK, SLS_FM_DT, SLS_TO_DT," ).append("\n"); 
		query.append("				CASE WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > SLS_TO_DT" ).append("\n"); 
		query.append("					THEN -1" ).append("\n"); 
		query.append("					ELSE 1" ).append("\n"); 
		query.append("				END AS WK_TP" ).append("\n"); 
		query.append("			FROM MAS_WK_PRD" ).append("\n"); 
		query.append("			WHERE (COST_YR || COST_WK >= (@[frm_smr_eff_yr] || @[frm_smr_eff_wk]) AND COST_YR || COST_WK <= (@[frm_smr_exp_yr] || @[frm_smr_exp_wk]))" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("		GROUP BY WK_TP" ).append("\n"); 
		query.append("	) MN" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 주당평균값에 주차를 붙이기 위한 ESTIMATE기간중의 주차 리스트" ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("VW_ESTIMATE_DT_LIST AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */PRD.COST_YR || SUBSTR(PRD.SLS_TO_DT, 5, 2) AS COST_YRMON, COST_WK, PRD.SLS_FM_DT, PRD.SLS_TO_DT" ).append("\n"); 
		query.append("	FROM MAS_WK_PRD PRD , ( SELECT * FROM VW_SUMMARY_WEEK WHERE WK_TP = 1) WK" ).append("\n"); 
		query.append("	WHERE (COST_YR || COST_WK) >= WK.SLS_FM_YRWK AND (COST_YR || COST_WK) <= WK.SLS_TO_YRWK " ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("---------------------------------------------------------------------------------------------------------" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- 이하 RFA" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- 데이터 SELECT시 조회 조건으로 이용될 KEY LIST" ).append("\n"); 
		query.append("  ," ).append("\n"); 
		query.append("VW_RFA_KEY_LIST AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE LEADING(HDR SMRY @V0 SR_CST_DTL) use_hash(HDR SMRY SR_CST_DTL) */ HDR.RFA_NO, HDR.PROP_NO, HDR.AMDT_SEQ" ).append("\n"); 
		query.append("		, HDR.CTRT_EFF_DT, HDR.CTRT_EXP_DT , SR_CST_DTL.PRS_YRMON, SR_CST_DTL.PRS_WK, SR_CST_DTL.PRC_CTRT_TP_CD , SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		, SR_CST_DTL.SVC_SCP_CD, SR_CST_DTL.VSL_SLAN_DIR_CD, SR_CST_DTL.TRD_CD,	SR_CST_DTL.SUB_TRD_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.RLANE_CD,	SR_CST_DTL.PRC_CGO_TP_CD, SR_CST_DTL.ORG_LOC_TP_CD, SR_CST_DTL.ORG_LOC_DEF_CD, SR_CST_DTL.DEST_LOC_TP_CD , SR_CST_DTL.DEST_LOC_DEF_CD, SR_CST_DTL.CHG_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.SCG_AMT" ).append("\n"); 
		query.append("		, SMRY.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("		, SMRY.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		, COST_DTL.PRS_CRNT_LOD_QTY" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("			SELECT /*+ ORDERED USE_NL(HDR DUR) */HDR.RFA_NO, DUR.PROP_NO, DUR.AMDT_SEQ, DUR.CTRT_EFF_DT, DUR.CTRT_EXP_DT " ).append("\n"); 
		query.append("				, ROW_NUMBER() OVER (PARTITION BY HDR.RFA_NO, DUR.PROP_NO ORDER BY DUR.AMDT_SEQ DESC) RN" ).append("\n"); 
		query.append("			FROM PRI_RP_HDR HDR" ).append("\n"); 
		query.append("				, PRI_RP_DUR DUR" ).append("\n"); 
		query.append("			WHERE HDR.RFA_NO IN (" ).append("\n"); 
		query.append("					SELECT PRC_CTRT_NO" ).append("\n"); 
		query.append("					FROM PRI_PRS_CM_SMRY_SIM_TMP" ).append("\n"); 
		query.append("					WHERE PRC_CTRT_TP_CD = 'R' " ).append("\n"); 
		query.append("				)" ).append("\n"); 
		query.append("				AND HDR.RFA_NO IS NOT NULL" ).append("\n"); 
		query.append("				AND HDR.PROP_NO = DUR.PROP_NO" ).append("\n"); 
		query.append("				AND DUR.CTRT_EFF_DT >= TO_DATE(@[c_sls_fm_dt],'YYYYMMDD')" ).append("\n"); 
		query.append("				AND DUR.CTRT_EXP_DT < TO_DATE(@[c_sls_to_dt],'YYYYMMDD') + 1   " ).append("\n"); 
		query.append("		) HDR" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY SMRY" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY_COST_DTL COST_DTL" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY_SCG_DTL SR_CST_DTL" ).append("\n"); 
		query.append("	WHERE HDR.RN = 1" ).append("\n"); 
		query.append("		AND HDR.RFA_NO = SMRY.PRC_CTRT_NO" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_TP_CD = 'R' -- RFA" ).append("\n"); 
		query.append("		AND (SMRY.PRS_YRMON, SMRY.PRS_WK) IN( SELECT /*+ QB_NAME(V0) */COST_YRMON, COST_WK FROM VW_CONTRACT_DT_LIST WHERE COST_YRMON IS NOT NULL AND COST_WK IS NOT NULL)" ).append("\n"); 
		query.append("		--AND SMRY.PRS_YRMON BETWEEN '200901' AND '201006' -- ### parameter로 변경할것. ###" ).append("\n"); 
		query.append("		AND SMRY.PRS_YRMON = SR_CST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		AND SMRY.PRS_WK = SR_CST_DTL.PRS_WK" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_TP_CD = SR_CST_DTL.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_NO = SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		--------------------------------------------" ).append("\n"); 
		query.append("		AND COST_DTL.PRS_YRMON = SR_CST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		AND COST_DTL.PRS_WK = SR_CST_DTL.PRS_WK" ).append("\n"); 
		query.append("		AND COST_DTL.PRC_CTRT_TP_CD = SR_CST_DTL.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		AND COST_DTL.PRC_CTRT_NO = SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		AND COST_DTL.SVC_SCP_CD = SR_CST_DTL.SVC_SCP_CD" ).append("\n"); 
		query.append("		AND COST_DTL.VSL_SLAN_DIR_CD = SR_CST_DTL.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("		AND COST_DTL.TRD_CD = SR_CST_DTL.TRD_CD" ).append("\n"); 
		query.append("		AND COST_DTL.SUB_TRD_CD = SR_CST_DTL.SUB_TRD_CD" ).append("\n"); 
		query.append("		AND COST_DTL.RLANE_CD = SR_CST_DTL.RLANE_CD" ).append("\n"); 
		query.append("		AND COST_DTL.PRC_CGO_TP_CD = SR_CST_DTL.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("		AND COST_DTL.ORG_LOC_TP_CD = SR_CST_DTL.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("		AND COST_DTL.ORG_LOC_DEF_CD = SR_CST_DTL.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("		AND COST_DTL.DEST_LOC_TP_CD = SR_CST_DTL.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("		AND COST_DTL.DEST_LOC_DEF_CD = SR_CST_DTL.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		--------------------------------------------" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		AND HDR.RFA_NO IS NOT NULL" ).append("\n"); 
		query.append("		AND SR_CST_DTL.TRD_CD = @[frm_trd_cd]" ).append("\n"); 
		query.append("		AND SR_CST_DTL.VSL_SLAN_DIR_CD = @[frm_dir_cd]" ).append("\n"); 
		query.append("		AND HDR.RFA_NO IN ( SELECT PRC_CTRT_NO FROM PRI_PRS_CM_SMRY_SIM_TMP WHERE PRC_CTRT_TP_CD = 'R' )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_sub_trd_cd} != '')" ).append("\n"); 
		query.append("			AND SR_CST_DTL.SUB_TRD_CD = @[frm_sub_trd_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		#if(${frm_rlane_cd} != '')" ).append("\n"); 
		query.append("			AND SR_CST_DTL.RLANE_CD IN (" ).append("\n"); 
		query.append("				#foreach( ${key} in ${rlane_list}) " ).append("\n"); 
		query.append("					#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("						UNION ALL" ).append("\n"); 
		query.append("					#end" ).append("\n"); 
		query.append("					SELECT " ).append("\n"); 
		query.append("							 '$key' " ).append("\n"); 
		query.append("					FROM DUAL" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("			)" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("			 " ).append("\n"); 
		query.append("		#if(${frm_customer_type} == 'B')" ).append("\n"); 
		query.append("					AND SMRY.PRS_CUST_TP_CD IN ('I','A','O')" ).append("\n"); 
		query.append("		#elseif(${frm_customer_type} == 'N')" ).append("\n"); 
		query.append("					AND SMRY.PRS_CUST_TP_CD IN ('N')" ).append("\n"); 
		query.append("		#else " ).append("\n"); 
		query.append("				AND SMRY.PRS_CUST_TP_CD IN ('I','A','O','N')" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		#if(${frm_prop_ofc_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.PROP_OFC_CD = @[frm_prop_ofc_cd] -- REQUEST" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_prop_srep_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.RESPB_SREP_CD = @[frm_prop_srep_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		#if(${frm_prop_apro_ofc_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.PROP_APRO_OFC_CD = @[frm_prop_apro_ofc_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if( $cust_list.size() != 0 ) " ).append("\n"); 
		query.append("			AND (SMRY.CUST_CNT_CD , SMRY.CUST_SEQ) IN (" ).append("\n"); 
		query.append("			#foreach( ${key} in ${cust_list}) " ).append("\n"); 
		query.append("				#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("					UNION ALL" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("				SELECT " ).append("\n"); 
		query.append("						substr('$key',1,2),substr('$key',3)" ).append("\n"); 
		query.append("				FROM DUAL" ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("			)" ).append("\n"); 
		query.append("		#end " ).append("\n"); 
		query.append("		-- BY CARGO TYPE" ).append("\n"); 
		query.append("		#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("			AND SR_CST_DTL.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("			AND 1=1" ).append("\n"); 
		query.append("		#else" ).append("\n"); 
		query.append("			AND 1=0" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(" " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("--- 계약번호당 실적이 총 몇주차 인지 ESTIMATE에 쓰일 총 주차가 몇주차인지 계산한다." ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("VW_RFA_TOT_WEEK_PER_RFA_NO AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */PROP_NO, AMDT_SEQ, RFA_NO" ).append("\n"); 
		query.append("		,ACTUAL_WK_CNT " ).append("\n"); 
		query.append("		,DECODE(ESTIMATE_WK_CNT, 1, 0, ESTIMATE_WK_CNT) AS ESTIMATE_WK_CNT -- 현재주차만 걸릴경우 제외시킨다." ).append("\n"); 
		query.append("		, REFER_WK_CNT" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT PROP_NO, AMDT_SEQ, RFA_NO " ).append("\n"); 
		query.append("			, SUM(" ).append("\n"); 
		query.append("				CASE WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') <= PRD.SLS_TO_DT AND TO_CHAR(SYSDATE, 'YYYYMMDD') >= PRD.SLS_FM_DT " ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > PRD.SLS_TO_DT AND PRD.SLS_TO_DT >= @[s_sls_fm_dt]" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("				END" ).append("\n"); 
		query.append("			) AS ACTUAL_WK_CNT ," ).append("\n"); 
		query.append("			SUM(" ).append("\n"); 
		query.append("				CASE" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') <= PRD.SLS_TO_DT AND TO_CHAR(SYSDATE, 'YYYYMMDD') >= PRD.SLS_FM_DT " ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > PRD.SLS_TO_DT " ).append("\n"); 
		query.append("				THEN 0 " ).append("\n"); 
		query.append("				WHEN PRD.SLS_TO_DT <=  @[s_sls_to_dt]" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("				END" ).append("\n"); 
		query.append("			) AS ESTIMATE_WK_CNT ," ).append("\n"); 
		query.append("			SUM(" ).append("\n"); 
		query.append("				CASE" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') <= PRD.SLS_TO_DT AND TO_CHAR(SYSDATE, 'YYYYMMDD') >= PRD.SLS_FM_DT " ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > PRD.SLS_TO_DT  AND  PRD.SLS_FM_DT >=  @[r_sls_fm_dt] AND  PRD.SLS_FM_DT <= @[r_sls_to_dt]  " ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("				END" ).append("\n"); 
		query.append("			) AS REFER_WK_CNT" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("				SELECT DISTINCT RFA_NO, PROP_NO, AMDT_SEQ, CTRT_EFF_DT,	CTRT_EXP_DT" ).append("\n"); 
		query.append("				FROM VW_RFA_KEY_LIST " ).append("\n"); 
		query.append("			) DUR" ).append("\n"); 
		query.append("			, MAS_WK_PRD PRD" ).append("\n"); 
		query.append("		WHERE ( " ).append("\n"); 
		query.append("				(	TO_CHAR(DUR.CTRT_EFF_DT, 'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EFF_DT, 'YYYYMMDD') <= PRD.SLS_TO_DT" ).append("\n"); 
		query.append("				) OR ( " ).append("\n"); 
		query.append("					TO_CHAR(DUR.CTRT_EXP_DT, 'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EXP_DT, 'YYYYMMDD') <= PRD.SLS_TO_DT" ).append("\n"); 
		query.append("				) OR (" ).append("\n"); 
		query.append("					TO_CHAR(DUR.CTRT_EFF_DT, 'YYYYMMDD') <= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EXP_DT, 'YYYYMMDD') >= PRD.SLS_TO_DT" ).append("\n"); 
		query.append("				) " ).append("\n"); 
		query.append("			)" ).append("\n"); 
		query.append("		#if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("			AND 1=1" ).append("\n"); 
		query.append("		#else" ).append("\n"); 
		query.append("			AND 1=0" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		GROUP BY PROP_NO, AMDT_SEQ, RFA_NO" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 1.정상적으로 REFERENCE 기간에에서 조회 되는 참조값을 SELECT해서 ESTIMATE에서 보여져야 할 값을 만든다." ).append("\n"); 
		query.append("  ," ).append("\n"); 
		query.append("VW_RFA_EST_ACT_1ST_VALUE AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */" ).append("\n"); 
		query.append("		MN.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		,MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("		,MN.SVC_SCP_CD" ).append("\n"); 
		query.append("		,MN.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("		,MN.TRD_CD" ).append("\n"); 
		query.append("		,MN.SUB_TRD_CD" ).append("\n"); 
		query.append("		,MN.RLANE_CD" ).append("\n"); 
		query.append("		,MN.PRC_CGO_TP_CD " ).append("\n"); 
		query.append("		,MN.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("		,MN.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("		,MN.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("		,MN.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("		,MN.CHG_CD" ).append("\n"); 
		query.append("		,MN.SCG_AMT" ).append("\n"); 
		query.append("		,MN.REFER_WK_CNT " ).append("\n"); 
		query.append("		,MN.ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("		,MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("		,MN.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT MN.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("			, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("			, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("			, MN.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("			, MN.TRD_CD" ).append("\n"); 
		query.append("			, MN.SUB_TRD_CD" ).append("\n"); 
		query.append("			, MN.RLANE_CD " ).append("\n"); 
		query.append("			, MN.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("			, MN.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("			, MN.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("			, MN.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("			, MN.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("			, MN.CHG_CD " ).append("\n"); 
		query.append("			, (MN.SCG_AMT/ MN.REFER_WK_CNT)   / (PRS_CRNT_LOD_QTY/ MN.REFER_WK_CNT )  AS SCG_AMT" ).append("\n"); 
		query.append("			, MN.REFER_WK_CNT" ).append("\n"); 
		query.append("			, MN.ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			, MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("			, MN.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT CKEY.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CTRT_NO" ).append("\n"); 
		query.append("				, CKEY.SVC_SCP_CD" ).append("\n"); 
		query.append("				, CKEY.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("				, CKEY.TRD_CD" ).append("\n"); 
		query.append("				, CKEY.SUB_TRD_CD " ).append("\n"); 
		query.append("				, CKEY.RLANE_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_TP_CD " ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.CHG_CD" ).append("\n"); 
		query.append("				, CKEY.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("				, CKEY.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("				, SUM(PRS_CRNT_LOD_QTY) AS PRS_CRNT_LOD_QTY" ).append("\n"); 
		query.append("				, SUM(CKEY.SCG_AMT * PRS_CRNT_LOD_QTY) AS SCG_AMT " ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.REFER_WK_CNT) AS REFER_WK_CNT" ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.ESTIMATE_WK_CNT) AS ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			FROM VW_RFA_KEY_LIST CKEY," ).append("\n"); 
		query.append("				--VW_REFERENCE_WEEK WK, " ).append("\n"); 
		query.append("				VW_RFA_TOT_WEEK_PER_RFA_NO WK_PER_SC" ).append("\n"); 
		query.append("				--                         WHERE (SUBSTR(CKEY.PRS_YRMON, 1, 4) || CKEY.PRS_WK) >= WK.SLS_FM_YRWK" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("				--                           AND (SUBSTR(CKEY.PRS_YRMON, 1, 4) || CKEY.PRS_WK) <= WK.SLS_TO_YRWK" ).append("\n"); 
		query.append("			WHERE (SUBSTR(CKEY.PRS_YRMON, 1, 4) || CKEY.PRS_WK) >= @[r_fm_yrwk]" ).append("\n"); 
		query.append("				AND (SUBSTR(CKEY.PRS_YRMON, 1, 4) || CKEY.PRS_WK) <= @[r_to_yrwk]" ).append("\n"); 
		query.append("				AND CKEY.RFA_NO = WK_PER_SC.RFA_NO" ).append("\n"); 
		query.append("		#if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("			AND 1=1" ).append("\n"); 
		query.append("		#else" ).append("\n"); 
		query.append("			AND 1=0" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("			GROUP BY CKEY.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CTRT_NO" ).append("\n"); 
		query.append("				, CKEY.SVC_SCP_CD" ).append("\n"); 
		query.append("				, CKEY.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("				, CKEY.TRD_CD" ).append("\n"); 
		query.append("				, CKEY.SUB_TRD_CD " ).append("\n"); 
		query.append("				, CKEY.RLANE_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_TP_CD " ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.CHG_CD" ).append("\n"); 
		query.append("				, CKEY.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("				, CKEY.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		) MN" ).append("\n"); 
		query.append("	) MN" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 2. 정상적으로 REFERENCE 기간에에서 조회 되는 참조값이 없을때 contract모든 기간을 뒤져서 해당 실적이 있는지 확인후 있으면 그 데이터를 기초해" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("--  ESTIMATE값을 만들어 낸다." ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("VW_RFA_EST_ACT_2ND_VALUE AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */" ).append("\n"); 
		query.append("		MN.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("		, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("		, MN.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("		, MN.TRD_CD" ).append("\n"); 
		query.append("		, MN.SUB_TRD_CD" ).append("\n"); 
		query.append("		, MN.RLANE_CD" ).append("\n"); 
		query.append("		, MN.PRC_CGO_TP_CD " ).append("\n"); 
		query.append("		, MN.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("		, MN.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("		, MN.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("		, MN.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("		, MN.CHG_CD" ).append("\n"); 
		query.append("		, MN.SCG_AMT" ).append("\n"); 
		query.append("		, MN.REFER_WK_CNT " ).append("\n"); 
		query.append("		, MN.ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("		, MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("		, MN.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT MN.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("			, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("			, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("			, MN.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("			, MN.TRD_CD" ).append("\n"); 
		query.append("			, MN.SUB_TRD_CD" ).append("\n"); 
		query.append("			, MN.RLANE_CD " ).append("\n"); 
		query.append("			, MN.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("			, MN.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("			, MN.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("			, MN.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("			, MN.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("			, MN.CHG_CD " ).append("\n"); 
		query.append("			, (MN.SCG_AMT/ MN.REFER_WK_CNT)   / (PRS_CRNT_LOD_QTY/ MN.REFER_WK_CNT )  AS SCG_AMT" ).append("\n"); 
		query.append("			, MN.REFER_WK_CNT" ).append("\n"); 
		query.append("			, MN.ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			, MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("			, MN.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT /*+ ORDERED SWAP_JOIN_INPUTS(@V1) USE_HASH(CKEY WK_PER_SC) */" ).append("\n"); 
		query.append("				CKEY.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CTRT_NO" ).append("\n"); 
		query.append("				, CKEY.SVC_SCP_CD" ).append("\n"); 
		query.append("				, CKEY.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("				, CKEY.TRD_CD" ).append("\n"); 
		query.append("				, CKEY.SUB_TRD_CD " ).append("\n"); 
		query.append("				, CKEY.RLANE_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_TP_CD " ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.CHG_CD" ).append("\n"); 
		query.append("				, CKEY.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("				, CKEY.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("				, SUM(PRS_CRNT_LOD_QTY) AS PRS_CRNT_LOD_QTY" ).append("\n"); 
		query.append("				, SUM( CKEY.SCG_AMT*PRS_CRNT_LOD_QTY)		AS SCG_AMT " ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.ACTUAL_WK_CNT + WK_PER_SC.ESTIMATE_WK_CNT) AS REFER_WK_CNT " ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.ESTIMATE_WK_CNT) AS ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			FROM VW_RFA_KEY_LIST CKEY" ).append("\n"); 
		query.append("				, VW_RFA_TOT_WEEK_PER_RFA_NO WK_PER_SC" ).append("\n"); 
		query.append("			WHERE NOT EXISTS( SELECT /*+ QB_NAME(V1) */'F'	FROM VW_RFA_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = CKEY.PRC_CTRT_NO)" ).append("\n"); 
		query.append("				AND CKEY.RFA_NO = WK_PER_SC.RFA_NO" ).append("\n"); 
		query.append("		#if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'R' )" ).append("\n"); 
		query.append("			AND 1=1" ).append("\n"); 
		query.append("		#else" ).append("\n"); 
		query.append("			AND 1=0" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("			GROUP BY CKEY.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CTRT_NO" ).append("\n"); 
		query.append("				, CKEY.SVC_SCP_CD" ).append("\n"); 
		query.append("				, CKEY.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("				, CKEY.TRD_CD" ).append("\n"); 
		query.append("				, CKEY.SUB_TRD_CD" ).append("\n"); 
		query.append("				, CKEY.RLANE_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_TP_CD " ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.CHG_CD" ).append("\n"); 
		query.append("				, CKEY.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("				, CKEY.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		) MN" ).append("\n"); 
		query.append("	) MN" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("---------------------------------------------------------------------------------------------------------" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- 이하 SC" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- 데이터 SELECT시 조회 조건으로 이용될 KEY LIST" ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("VW_KEY_LIST AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE use_hash(HDR SMRY @V0 SR_CST_DTL) USE_NL(HDR SMRY SR_CST_DTL) */" ).append("\n"); 
		query.append("		HDR.SC_NO" ).append("\n"); 
		query.append("		, HDR.PROP_NO" ).append("\n"); 
		query.append("		, HDR.AMDT_SEQ" ).append("\n"); 
		query.append("		, HDR.CTRT_EFF_DT" ).append("\n"); 
		query.append("		, HDR.CTRT_EXP_DT " ).append("\n"); 
		query.append("		, SR_CST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		, SR_CST_DTL.PRS_WK" ).append("\n"); 
		query.append("		, SR_CST_DTL.PRC_CTRT_TP_CD " ).append("\n"); 
		query.append("		, SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		, SR_CST_DTL.SVC_SCP_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.TRD_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.SUB_TRD_CD " ).append("\n"); 
		query.append("		, SR_CST_DTL.RLANE_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.DEST_LOC_TP_CD " ).append("\n"); 
		query.append("		, SR_CST_DTL.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.CHG_CD" ).append("\n"); 
		query.append("		, SR_CST_DTL.SCG_AMT" ).append("\n"); 
		query.append("		, SMRY.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("		, SMRY.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		, COST_DTL.PRS_CRNT_LOD_QTY" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("			SELECT /*+ ORDERED USE_NL(HDR DUR) */" ).append("\n"); 
		query.append("				HDR.SC_NO" ).append("\n"); 
		query.append("				, HDR.PROP_NO" ).append("\n"); 
		query.append("				, DUR.AMDT_SEQ" ).append("\n"); 
		query.append("				, DUR.CTRT_EFF_DT" ).append("\n"); 
		query.append("				, DUR.CTRT_EXP_DT " ).append("\n"); 
		query.append("				, ROW_NUMBER() OVER(PARTITION BY HDR.SC_NO, DUR.PROP_NO ORDER BY DUR.AMDT_SEQ DESC) RN" ).append("\n"); 
		query.append("				--FROM VW_CONTRACT_DT CDT, PRI_SP_HDR HDR, PRI_SP_DUR DUR" ).append("\n"); 
		query.append("			FROM PRI_SP_HDR HDR" ).append("\n"); 
		query.append("				, PRI_SP_DUR DUR" ).append("\n"); 
		query.append("			WHERE HDR.SC_NO IN( SELECT PRC_CTRT_NO FROM PRI_PRS_CM_SMRY_SIM_TMP WHERE PRC_CTRT_TP_CD = 'S')" ).append("\n"); 
		query.append("				AND HDR.PROP_NO = DUR.PROP_NO" ).append("\n"); 
		query.append("				AND HDR.SC_NO IS NOT NULL" ).append("\n"); 
		query.append("				--AND CTRT_EFF_DT >= TO_DATE(CDT.SLS_FM_DT,'YYYYMMDD')" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("				--AND CTRT_EXP_DT < TO_DATE(CDT.SLS_TO_DT,'YYYYMMDD')+1" ).append("\n"); 
		query.append("				AND CTRT_EFF_DT >= TO_DATE(@[c_sls_fm_dt], 'YYYYMMDD')" ).append("\n"); 
		query.append("				AND CTRT_EXP_DT < TO_DATE(@[c_sls_to_dt], 'YYYYMMDD') + 1 " ).append("\n"); 
		query.append("		) HDR" ).append("\n"); 
		query.append("		-- VW_PROP_KEY PKEY," ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY SMRY" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY_COST_DTL COST_DTL" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY_SCG_DTL SR_CST_DTL" ).append("\n"); 
		query.append("		--WHERE HDR.PROP_NO = PKEY.PROP_NO" ).append("\n"); 
		query.append("	WHERE HDR.RN = 1" ).append("\n"); 
		query.append("		AND HDR.SC_NO = SMRY.PRC_CTRT_NO" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_TP_CD = 'S' -- S/C" ).append("\n"); 
		query.append("		AND (SMRY.PRS_YRMON, SMRY.PRS_WK) IN ( SELECT /*+ QB_NAME(V0) */COST_YRMON, COST_WK FROM VW_CONTRACT_DT_LIST WHERE COST_YRMON IS NOT NULL AND COST_WK IS NOT NULL)" ).append("\n"); 
		query.append("		AND SMRY.PRS_YRMON = SR_CST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		AND SMRY.PRS_WK = SR_CST_DTL.PRS_WK" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_TP_CD = SR_CST_DTL.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_NO = SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		 --------------------------------------------" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		AND SMRY.PRS_YRMON = COST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		AND SMRY.PRS_WK = COST_DTL.PRS_WK" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_TP_CD = COST_DTL.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SMRY.PRC_CTRT_NO = COST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		AND COST_DTL.PRS_YRMON = SR_CST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		AND COST_DTL.PRS_WK = SR_CST_DTL.PRS_WK" ).append("\n"); 
		query.append("		AND COST_DTL.PRC_CTRT_TP_CD = SR_CST_DTL.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		AND COST_DTL.PRC_CTRT_NO = SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		AND COST_DTL.SVC_SCP_CD = SR_CST_DTL.SVC_SCP_CD" ).append("\n"); 
		query.append("		AND COST_DTL.VSL_SLAN_DIR_CD = SR_CST_DTL.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("		AND COST_DTL.TRD_CD = SR_CST_DTL.TRD_CD" ).append("\n"); 
		query.append("		AND COST_DTL.SUB_TRD_CD = SR_CST_DTL.SUB_TRD_CD" ).append("\n"); 
		query.append("		AND COST_DTL.RLANE_CD = SR_CST_DTL.RLANE_CD" ).append("\n"); 
		query.append("		AND COST_DTL.PRC_CGO_TP_CD = SR_CST_DTL.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("		AND COST_DTL.ORG_LOC_TP_CD = SR_CST_DTL.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("		AND COST_DTL.ORG_LOC_DEF_CD = SR_CST_DTL.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("		AND COST_DTL.DEST_LOC_TP_CD = SR_CST_DTL.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("		AND COST_DTL.DEST_LOC_DEF_CD = SR_CST_DTL.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		--------------------------------------------" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		AND HDR.SC_NO IS NOT NULL" ).append("\n"); 
		query.append("		AND SR_CST_DTL.TRD_CD = @[frm_trd_cd]" ).append("\n"); 
		query.append("		AND SR_CST_DTL.VSL_SLAN_DIR_CD = @[frm_dir_cd]" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		AND HDR.SC_NO IN (SELECT PRC_CTRT_NO FROM PRI_PRS_CM_SMRY_SIM_TMP WHERE PRC_CTRT_TP_CD = 'S')" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_sub_trd_cd} != '')" ).append("\n"); 
		query.append("			AND SR_CST_DTL.SUB_TRD_CD = @[frm_sub_trd_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		#if(${frm_rlane_cd} != '')" ).append("\n"); 
		query.append("			AND SR_CST_DTL.RLANE_CD IN (" ).append("\n"); 
		query.append("				#foreach( ${key} in ${rlane_list}) " ).append("\n"); 
		query.append("					#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("						UNION ALL" ).append("\n"); 
		query.append("					#end" ).append("\n"); 
		query.append("					SELECT " ).append("\n"); 
		query.append("							 '$key' " ).append("\n"); 
		query.append("					FROM DUAL" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("			)" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("			 " ).append("\n"); 
		query.append("		#if(${frm_customer_type} == 'B')" ).append("\n"); 
		query.append("					AND SMRY.PRS_CUST_TP_CD IN ('I','A','O')" ).append("\n"); 
		query.append("		#elseif(${frm_customer_type} == 'N')" ).append("\n"); 
		query.append("					AND SMRY.PRS_CUST_TP_CD IN ('N')" ).append("\n"); 
		query.append("		#else " ).append("\n"); 
		query.append("				AND SMRY.PRS_CUST_TP_CD IN ('I','A','O','N')" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		#if(${frm_prop_ofc_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.PROP_OFC_CD = @[frm_prop_ofc_cd] -- REQUEST" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if(${frm_prop_srep_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.RESPB_SREP_CD = @[frm_prop_srep_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		#if(${frm_prop_apro_ofc_cd} != '')" ).append("\n"); 
		query.append("					AND SMRY.PROP_APRO_OFC_CD = @[frm_prop_apro_ofc_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		#if( $cust_list.size() != 0 ) " ).append("\n"); 
		query.append("			AND (SMRY.CUST_CNT_CD , SMRY.CUST_SEQ) IN (" ).append("\n"); 
		query.append("			#foreach( ${key} in ${cust_list}) " ).append("\n"); 
		query.append("				#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("					UNION ALL" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("				SELECT " ).append("\n"); 
		query.append("						substr('$key',1,2),substr('$key',3)" ).append("\n"); 
		query.append("				FROM DUAL" ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("			)" ).append("\n"); 
		query.append("		#end " ).append("\n"); 
		query.append("		-- BY CARGO TYPE" ).append("\n"); 
		query.append("		#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("			AND SR_CST_DTL.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		#if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("			AND 1=1" ).append("\n"); 
		query.append("		#else" ).append("\n"); 
		query.append("			AND 1=0" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append(" " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("--- 계약번호당 실적이 총 몇주차 인지 ESTIMATE에 쓰일 총 주차가 몇주차인지 계산한다." ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("VW_TOT_WEEK_PER_SC_NO AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */PROP_NO, AMDT_SEQ, SC_NO" ).append("\n"); 
		query.append("		, ACTUAL_WK_CNT " ).append("\n"); 
		query.append("		, DECODE(ESTIMATE_WK_CNT, 1, 0, ESTIMATE_WK_CNT) AS ESTIMATE_WK_CNT -- 현재주차만 걸릴경우 제외시킨다." ).append("\n"); 
		query.append("		, REFER_WK_CNT" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT PROP_NO,	AMDT_SEQ, SC_NO " ).append("\n"); 
		query.append("			,SUM(" ).append("\n"); 
		query.append("				CASE WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') <= PRD.SLS_TO_DT	AND TO_CHAR(SYSDATE, 'YYYYMMDD') >= PRD.SLS_FM_DT " ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				--WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > PRD.SLS_TO_DT AND PRD.SLS_TO_DT >= SDT.SLS_FM_DT THEN 1" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > PRD.SLS_TO_DT AND PRD.SLS_TO_DT >= @[s_sls_fm_dt]" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("				END" ).append("\n"); 
		query.append("			) AS ACTUAL_WK_CNT ," ).append("\n"); 
		query.append("			SUM(" ).append("\n"); 
		query.append("				CASE WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') <= PRD.SLS_TO_DT AND TO_CHAR(SYSDATE, 'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > PRD.SLS_TO_DT " ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				--WHEN PRD.SLS_TO_DT <= SDT.SLS_TO_DT THEN 1" ).append("\n"); 
		query.append("				WHEN PRD.SLS_TO_DT <=  @[s_sls_to_dt]" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("				END" ).append("\n"); 
		query.append("			) AS ESTIMATE_WK_CNT ," ).append("\n"); 
		query.append("			SUM(" ).append("\n"); 
		query.append("				CASE WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') <= PRD.SLS_TO_DT AND TO_CHAR(SYSDATE, 'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("				THEN 0" ).append("\n"); 
		query.append("				--WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > PRD.SLS_TO_DT AND PRD.SLS_FM_DT >= RDT.SLS_FM_DT AND PRD.SLS_FM_DT <= RDT.SLS_TO_DT THEN 1" ).append("\n"); 
		query.append("				WHEN TO_CHAR(SYSDATE, 'YYYYMMDD') > PRD.SLS_TO_DT AND PRD.SLS_FM_DT >= @[r_sls_fm_dt] AND PRD.SLS_FM_DT <= @[r_sls_to_dt]" ).append("\n"); 
		query.append("				THEN 1" ).append("\n"); 
		query.append("				ELSE 0" ).append("\n"); 
		query.append("				END" ).append("\n"); 
		query.append("			) AS REFER_WK_CNT" ).append("\n"); 
		query.append("		FROM (	SELECT DISTINCT SC_NO, PROP_NO, AMDT_SEQ, CTRT_EFF_DT, CTRT_EXP_DT FROM VW_KEY_LIST ) DUR" ).append("\n"); 
		query.append("			--, VW_CONTRACT_KEY KLIST," ).append("\n"); 
		query.append("			," ).append("\n"); 
		query.append("			MAS_WK_PRD PRD" ).append("\n"); 
		query.append("			--, VW_SUMMARY_DT SDT, VW_REFERENCE_DT RDT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("			--                 WHERE DUR.PROP_NO = KLIST.PROP_NO" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("			--                   AND DUR.AMDT_SEQ = KLIST.AMDT_SEQ" ).append("\n"); 
		query.append("		WHERE ( " ).append("\n"); 
		query.append("				(	TO_CHAR(DUR.CTRT_EFF_DT, 'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EFF_DT, 'YYYYMMDD') <= PRD.SLS_TO_DT" ).append("\n"); 
		query.append("				) OR (" ).append("\n"); 
		query.append("					TO_CHAR(DUR.CTRT_EXP_DT, 'YYYYMMDD') >= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EXP_DT, 'YYYYMMDD') <= PRD.SLS_TO_DT" ).append("\n"); 
		query.append("				) OR ( " ).append("\n"); 
		query.append("					TO_CHAR(DUR.CTRT_EFF_DT, 'YYYYMMDD') <= PRD.SLS_FM_DT" ).append("\n"); 
		query.append("					AND TO_CHAR(DUR.CTRT_EXP_DT, 'YYYYMMDD') >= PRD.SLS_TO_DT" ).append("\n"); 
		query.append("				) " ).append("\n"); 
		query.append("			)" ).append("\n"); 
		query.append("		#if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("			AND 1=1" ).append("\n"); 
		query.append("		#else" ).append("\n"); 
		query.append("			AND 1=0" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		GROUP BY PROP_NO, AMDT_SEQ, SC_NO" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 1.정상적으로 REFERENCE 기간에에서 조회 되는 참조값을 SELECT해서 ESTIMATE에서 보여져야 할 값을 만든다." ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("VW_EST_ACT_1ST_VALUE AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */" ).append("\n"); 
		query.append("		 MN.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("		, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("		, MN.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("		, MN.TRD_CD" ).append("\n"); 
		query.append("		, MN.SUB_TRD_CD" ).append("\n"); 
		query.append("		, MN.RLANE_CD" ).append("\n"); 
		query.append("		, MN.PRC_CGO_TP_CD " ).append("\n"); 
		query.append("		, MN.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("		, MN.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("		, MN.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("		, MN.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("		, MN.CHG_CD" ).append("\n"); 
		query.append("		, MN.SCG_AMT" ).append("\n"); 
		query.append("		, MN.REFER_WK_CNT " ).append("\n"); 
		query.append("		, MN.ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("		, MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("		, MN.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT MN.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("			, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("			, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("			, MN.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("			, MN.TRD_CD" ).append("\n"); 
		query.append("			, MN.SUB_TRD_CD" ).append("\n"); 
		query.append("			, MN.RLANE_CD " ).append("\n"); 
		query.append("			, MN.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("			, MN.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("			, MN.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("			, MN.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("			, MN.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("			, MN.CHG_CD " ).append("\n"); 
		query.append("			, (MN.SCG_AMT/ MN.REFER_WK_CNT)   / (PRS_CRNT_LOD_QTY/ MN.REFER_WK_CNT )  AS SCG_AMT" ).append("\n"); 
		query.append("			, MN.REFER_WK_CNT" ).append("\n"); 
		query.append("			, MN.ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			, MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("			, MN.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		FROM (	" ).append("\n"); 
		query.append("			SELECT CKEY.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CTRT_NO" ).append("\n"); 
		query.append("				, CKEY.SVC_SCP_CD" ).append("\n"); 
		query.append("				, CKEY.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("				, CKEY.TRD_CD" ).append("\n"); 
		query.append("				, CKEY.SUB_TRD_CD " ).append("\n"); 
		query.append("				, CKEY.RLANE_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_TP_CD " ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.CHG_CD" ).append("\n"); 
		query.append("				, CKEY.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("				, CKEY.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("				, SUM(PRS_CRNT_LOD_QTY) AS PRS_CRNT_LOD_QTY" ).append("\n"); 
		query.append("				, SUM( CKEY.SCG_AMT*PRS_CRNT_LOD_QTY)		AS SCG_AMT " ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.REFER_WK_CNT) AS REFER_WK_CNT" ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.ESTIMATE_WK_CNT) AS ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			FROM VW_KEY_LIST CKEY" ).append("\n"); 
		query.append("				--, VW_REFERENCE_WEEK WK" ).append("\n"); 
		query.append("				, VW_TOT_WEEK_PER_SC_NO WK_PER_SC" ).append("\n"); 
		query.append("				--WHERE (SUBSTR(CKEY.PRS_YRMON, 1, 4) || CKEY.PRS_WK) >= WK.SLS_FM_YRWK" ).append("\n"); 
		query.append("			WHERE (SUBSTR(CKEY.PRS_YRMON, 1, 4) || CKEY.PRS_WK) >=  @[r_fm_yrwk] " ).append("\n"); 
		query.append("				--AND (SUBSTR(CKEY.PRS_YRMON, 1, 4) || CKEY.PRS_WK) <= WK.SLS_TO_YRWK" ).append("\n"); 
		query.append("				AND (SUBSTR(CKEY.PRS_YRMON, 1, 4) || CKEY.PRS_WK) <= @[r_to_yrwk]" ).append("\n"); 
		query.append("				AND CKEY.SC_NO = WK_PER_SC.SC_NO" ).append("\n"); 
		query.append("		#if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("			AND 1=1" ).append("\n"); 
		query.append("		#else" ).append("\n"); 
		query.append("			AND 1=0" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("			GROUP BY CKEY.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CTRT_NO" ).append("\n"); 
		query.append("				, CKEY.SVC_SCP_CD" ).append("\n"); 
		query.append("				, CKEY.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("				, CKEY.TRD_CD" ).append("\n"); 
		query.append("				, CKEY.SUB_TRD_CD" ).append("\n"); 
		query.append("				, CKEY.RLANE_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_TP_CD " ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.CHG_CD" ).append("\n"); 
		query.append("				, CKEY.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("				, CKEY.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		) MN" ).append("\n"); 
		query.append("	) MN" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 2. 정상적으로 REFERENCE 기간에에서 조회 되는 참조값이 없을때 contract모든 기간을 뒤져서 해당 실적이 있는지 확인후 있으면 그 데이터를 기초해" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("--  ESTIMATE값을 만들어 낸다." ).append("\n"); 
		query.append("  ," ).append("\n"); 
		query.append("VW_EST_ACT_2ND_VALUE AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */" ).append("\n"); 
		query.append("		 MN.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("		, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("		, MN.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("		, MN.TRD_CD" ).append("\n"); 
		query.append("		, MN.SUB_TRD_CD" ).append("\n"); 
		query.append("		, MN.RLANE_CD" ).append("\n"); 
		query.append("		, MN.PRC_CGO_TP_CD " ).append("\n"); 
		query.append("		, MN.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("		, MN.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("		, MN.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("		, MN.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("		, MN.CHG_CD" ).append("\n"); 
		query.append("		, MN.SCG_AMT" ).append("\n"); 
		query.append("		, MN.REFER_WK_CNT " ).append("\n"); 
		query.append("		, MN.ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("		, MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("		, MN.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT MN.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("			, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("			, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("			, MN.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("			, MN.TRD_CD" ).append("\n"); 
		query.append("			, MN.SUB_TRD_CD" ).append("\n"); 
		query.append("			, MN.RLANE_CD " ).append("\n"); 
		query.append("			, MN.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("			, MN.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("			, MN.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("			, MN.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("			, MN.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("			, MN.CHG_CD " ).append("\n"); 
		query.append("			, (MN.SCG_AMT/ MN.REFER_WK_CNT)   / (PRS_CRNT_LOD_QTY/ MN.REFER_WK_CNT )  AS SCG_AMT" ).append("\n"); 
		query.append("			, MN.REFER_WK_CNT" ).append("\n"); 
		query.append("			, MN.ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			, MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("			, MN.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT /*+ ORDERED SWAP_JOIN_INPUTS(@V1) USE_HASH(CKEY WK_PER_SC) */" ).append("\n"); 
		query.append("				 CKEY.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CTRT_NO" ).append("\n"); 
		query.append("				, CKEY.SVC_SCP_CD" ).append("\n"); 
		query.append("				, CKEY.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("				, CKEY.TRD_CD" ).append("\n"); 
		query.append("				, CKEY.SUB_TRD_CD " ).append("\n"); 
		query.append("				, CKEY.RLANE_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_TP_CD " ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.CHG_CD" ).append("\n"); 
		query.append("				, CKEY.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("				, CKEY.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("				, SUM(PRS_CRNT_LOD_QTY) AS PRS_CRNT_LOD_QTY" ).append("\n"); 
		query.append("				, SUM( CKEY.SCG_AMT*PRS_CRNT_LOD_QTY)		AS SCG_AMT " ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.ACTUAL_WK_CNT + WK_PER_SC.ESTIMATE_WK_CNT) AS REFER_WK_CNT " ).append("\n"); 
		query.append("				, MAX(WK_PER_SC.ESTIMATE_WK_CNT) AS ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			FROM VW_KEY_LIST CKEY" ).append("\n"); 
		query.append("				, VW_TOT_WEEK_PER_SC_NO WK_PER_SC" ).append("\n"); 
		query.append("			WHERE NOT EXISTS( SELECT /*+ QB_NAME(V1) */'F' FROM VW_EST_ACT_1ST_VALUE V1 WHERE V1.PRC_CTRT_NO = CKEY.PRC_CTRT_NO )" ).append("\n"); 
		query.append("				AND CKEY.SC_NO = WK_PER_SC.SC_NO" ).append("\n"); 
		query.append("		#if(${frm_contract_type} == 'B' || ${frm_contract_type} == 'S' )" ).append("\n"); 
		query.append("			AND 1=1" ).append("\n"); 
		query.append("		#else" ).append("\n"); 
		query.append("			AND 1=0" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("			GROUP BY CKEY.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CTRT_NO" ).append("\n"); 
		query.append("				, CKEY.SVC_SCP_CD" ).append("\n"); 
		query.append("				, CKEY.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("				, CKEY.TRD_CD" ).append("\n"); 
		query.append("				, CKEY.SUB_TRD_CD" ).append("\n"); 
		query.append("				, CKEY.RLANE_CD" ).append("\n"); 
		query.append("				, CKEY.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("				, CKEY.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_TP_CD " ).append("\n"); 
		query.append("				, CKEY.DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("				, CKEY.CHG_CD" ).append("\n"); 
		query.append("				, CKEY.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("				, CKEY.PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		) MN" ).append("\n"); 
		query.append("	) MN" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("SELECT COST_YRMON" ).append("\n"); 
		query.append("	, COST_WK" ).append("\n"); 
		query.append("	, PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("	, PRC_CTRT_NO" ).append("\n"); 
		query.append("	, SVC_SCP_CD" ).append("\n"); 
		query.append("	, VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("	, TRD_CD" ).append("\n"); 
		query.append("	, SUB_TRD_CD" ).append("\n"); 
		query.append("	, RLANE_CD" ).append("\n"); 
		query.append("	, PRC_CGO_TP_CD " ).append("\n"); 
		query.append("	, ORG_LOC_TP_CD" ).append("\n"); 
		query.append("	, ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("	, DEST_LOC_TP_CD" ).append("\n"); 
		query.append("	, DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("	, CHG_CD" ).append("\n"); 
		query.append("	, SCG_AMT" ).append("\n"); 
		query.append("	, PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("	, PRS_CUST_TP_CD" ).append("\n"); 
		query.append("	, SLS_FM_DT " ).append("\n"); 
		query.append("	, SLS_TO_DT" ).append("\n"); 
		query.append("	, @[usr_id]" ).append("\n"); 
		query.append("	, SYSDATE" ).append("\n"); 
		query.append("	, 'N'" ).append("\n"); 
		query.append("	, SYSDATE" ).append("\n"); 
		query.append("FROM (" ).append("\n"); 
		query.append("	SELECT DT_LIST.COST_YRMON" ).append("\n"); 
		query.append("		, DT_LIST.COST_WK" ).append("\n"); 
		query.append("		, MN.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("		, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("		, MN.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("		, MN.TRD_CD " ).append("\n"); 
		query.append("		, MN.SUB_TRD_CD" ).append("\n"); 
		query.append("		, MN.RLANE_CD" ).append("\n"); 
		query.append("		, MN.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("		, MN.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("		, MN.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("		, MN.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("		, MN.DEST_LOC_DEF_CD " ).append("\n"); 
		query.append("		, MN.CHG_CD" ).append("\n"); 
		query.append("		, MN.SCG_AMT " ).append("\n"); 
		query.append("		, RANK() OVER(PARTITION BY MN.PRC_CTRT_TP_CD, MN.PRC_CTRT_NO, MN.SVC_SCP_CD, MN.VSL_SLAN_DIR_CD, MN.TRD_CD, MN.SUB_TRD_CD, MN.RLANE_CD, MN.PRC_CGO_TP_CD, MN.ORG_LOC_TP_CD, MN.ORG_LOC_DEF_CD, MN.DEST_LOC_TP_CD, MN.DEST_LOC_DEF_CD, MN.CHG_CD ORDER BY DT_LIST.COST_YRMON , DT_LIST.COST_WK) RN " ).append("\n"); 
		query.append("		, MN.REFER_WK_CNT" ).append("\n"); 
		query.append("		, MN.ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("		, PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("		, PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		, DT_LIST.SLS_FM_DT" ).append("\n"); 
		query.append("		, DT_LIST.SLS_TO_DT" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("			, PRC_CTRT_NO" ).append("\n"); 
		query.append("			, SVC_SCP_CD" ).append("\n"); 
		query.append("			, VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("			, TRD_CD" ).append("\n"); 
		query.append("			, SUB_TRD_CD" ).append("\n"); 
		query.append("			, RLANE_CD" ).append("\n"); 
		query.append("			, PRC_CGO_TP_CD" ).append("\n"); 
		query.append("			, ORG_LOC_TP_CD " ).append("\n"); 
		query.append("			, ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("			, DEST_LOC_TP_CD" ).append("\n"); 
		query.append("			, DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("			, CHG_CD" ).append("\n"); 
		query.append("			, SCG_AMT" ).append("\n"); 
		query.append("			, REFER_WK_CNT" ).append("\n"); 
		query.append("			, ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			, PROP_APRO_OFC_CD " ).append("\n"); 
		query.append("			, PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		FROM VW_EST_ACT_1ST_VALUE" ).append("\n"); 
		query.append("		UNION ALL" ).append("\n"); 
		query.append("		SELECT PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("			, PRC_CTRT_NO" ).append("\n"); 
		query.append("			, SVC_SCP_CD" ).append("\n"); 
		query.append("			, VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("			, TRD_CD" ).append("\n"); 
		query.append("			, SUB_TRD_CD" ).append("\n"); 
		query.append("			, RLANE_CD" ).append("\n"); 
		query.append("			, PRC_CGO_TP_CD" ).append("\n"); 
		query.append("			, ORG_LOC_TP_CD " ).append("\n"); 
		query.append("			, ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("			, DEST_LOC_TP_CD" ).append("\n"); 
		query.append("			, DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("			, CHG_CD" ).append("\n"); 
		query.append("			, SCG_AMT" ).append("\n"); 
		query.append("			, REFER_WK_CNT" ).append("\n"); 
		query.append("			, ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			, PROP_APRO_OFC_CD " ).append("\n"); 
		query.append("			, PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		FROM VW_EST_ACT_2ND_VALUE" ).append("\n"); 
		query.append("	) MN" ).append("\n"); 
		query.append("	, VW_ESTIMATE_DT_LIST DT_LIST" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("WHERE RN <= ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT COST_YRMON" ).append("\n"); 
		query.append("	, COST_WK" ).append("\n"); 
		query.append("	, PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("	, PRC_CTRT_NO" ).append("\n"); 
		query.append("	, SVC_SCP_CD" ).append("\n"); 
		query.append("	, VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("	, TRD_CD" ).append("\n"); 
		query.append("	, SUB_TRD_CD" ).append("\n"); 
		query.append("	, RLANE_CD" ).append("\n"); 
		query.append("	, PRC_CGO_TP_CD " ).append("\n"); 
		query.append("	, ORG_LOC_TP_CD" ).append("\n"); 
		query.append("	, ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("	, DEST_LOC_TP_CD" ).append("\n"); 
		query.append("	, DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("	, CHG_CD" ).append("\n"); 
		query.append("	, SCG_AMT" ).append("\n"); 
		query.append("	, PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("	, PRS_CUST_TP_CD" ).append("\n"); 
		query.append("	, SLS_FM_DT " ).append("\n"); 
		query.append("	, SLS_TO_DT" ).append("\n"); 
		query.append("	, @[usr_id]" ).append("\n"); 
		query.append("	, SYSDATE" ).append("\n"); 
		query.append("	, 'N'" ).append("\n"); 
		query.append("	, SYSDATE" ).append("\n"); 
		query.append("FROM (" ).append("\n"); 
		query.append("		SELECT DT_LIST.COST_YRMON" ).append("\n"); 
		query.append("			, DT_LIST.COST_WK" ).append("\n"); 
		query.append("			, MN.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("			, MN.PRC_CTRT_NO" ).append("\n"); 
		query.append("			, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("			, MN.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("			, MN.TRD_CD " ).append("\n"); 
		query.append("			, MN.SUB_TRD_CD" ).append("\n"); 
		query.append("			, MN.RLANE_CD" ).append("\n"); 
		query.append("			, MN.PRC_CGO_TP_CD" ).append("\n"); 
		query.append("			, MN.ORG_LOC_TP_CD" ).append("\n"); 
		query.append("			, MN.ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("			, MN.DEST_LOC_TP_CD" ).append("\n"); 
		query.append("			, MN.DEST_LOC_DEF_CD " ).append("\n"); 
		query.append("			, MN.CHG_CD" ).append("\n"); 
		query.append("			, MN.SCG_AMT " ).append("\n"); 
		query.append("			, RANK() OVER(PARTITION BY MN.PRC_CTRT_TP_CD, MN.PRC_CTRT_NO, MN.SVC_SCP_CD, MN.VSL_SLAN_DIR_CD, MN.TRD_CD, MN.SUB_TRD_CD, MN.RLANE_CD, MN.PRC_CGO_TP_CD, MN.ORG_LOC_TP_CD, MN.ORG_LOC_DEF_CD, MN.DEST_LOC_TP_CD, MN.DEST_LOC_DEF_CD, MN.CHG_CD ORDER BY DT_LIST.COST_YRMON , DT_LIST.COST_WK) RN " ).append("\n"); 
		query.append("			, MN.REFER_WK_CNT" ).append("\n"); 
		query.append("			, MN.ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			, PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("			, PRS_CUST_TP_CD" ).append("\n"); 
		query.append("			, DT_LIST.SLS_FM_DT" ).append("\n"); 
		query.append("			, DT_LIST.SLS_TO_DT" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("		SELECT PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("			, PRC_CTRT_NO" ).append("\n"); 
		query.append("			, SVC_SCP_CD" ).append("\n"); 
		query.append("			, VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("			, TRD_CD" ).append("\n"); 
		query.append("			, SUB_TRD_CD" ).append("\n"); 
		query.append("			, RLANE_CD" ).append("\n"); 
		query.append("			, PRC_CGO_TP_CD" ).append("\n"); 
		query.append("			, ORG_LOC_TP_CD " ).append("\n"); 
		query.append("			, ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("			, DEST_LOC_TP_CD" ).append("\n"); 
		query.append("			, DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("			, CHG_CD" ).append("\n"); 
		query.append("			, SCG_AMT" ).append("\n"); 
		query.append("			, REFER_WK_CNT" ).append("\n"); 
		query.append("			, ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			, PROP_APRO_OFC_CD " ).append("\n"); 
		query.append("			, PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		FROM VW_RFA_EST_ACT_1ST_VALUE" ).append("\n"); 
		query.append("		UNION ALL" ).append("\n"); 
		query.append("		SELECT PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("			, PRC_CTRT_NO" ).append("\n"); 
		query.append("			, SVC_SCP_CD" ).append("\n"); 
		query.append("			, VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("			, TRD_CD" ).append("\n"); 
		query.append("			, SUB_TRD_CD" ).append("\n"); 
		query.append("			, RLANE_CD" ).append("\n"); 
		query.append("			, PRC_CGO_TP_CD" ).append("\n"); 
		query.append("			, ORG_LOC_TP_CD " ).append("\n"); 
		query.append("			, ORG_LOC_DEF_CD" ).append("\n"); 
		query.append("			, DEST_LOC_TP_CD" ).append("\n"); 
		query.append("			, DEST_LOC_DEF_CD" ).append("\n"); 
		query.append("			, CHG_CD" ).append("\n"); 
		query.append("			, SCG_AMT" ).append("\n"); 
		query.append("			, REFER_WK_CNT" ).append("\n"); 
		query.append("			, ESTIMATE_WK_CNT" ).append("\n"); 
		query.append("			, PROP_APRO_OFC_CD " ).append("\n"); 
		query.append("			, PRS_CUST_TP_CD" ).append("\n"); 
		query.append("		FROM VW_RFA_EST_ACT_2ND_VALUE" ).append("\n"); 
		query.append("	) MN " ).append("\n"); 
		query.append("	, VW_ESTIMATE_DT_LIST DT_LIST" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("WHERE RN <= ESTIMATE_WK_CNT" ).append("\n"); 

	}
}