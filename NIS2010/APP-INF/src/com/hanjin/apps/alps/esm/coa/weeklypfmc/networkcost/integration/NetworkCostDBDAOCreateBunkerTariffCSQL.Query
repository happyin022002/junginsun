<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="NetworkCostDBDAOCreateBunkerTariffCSQL">
			<desc><![CDATA[Bunker Tariff 정보를 생성한다.
[CHM-201111114-01] Creation 시 FO 단가가 0 인 것은 복사하지 않도록 로직 추가]]></desc>
			<sql><![CDATA[
MERGE INTO COA_BNK_TRF D1		
 USING (		
       SELECT  CREATE_YRMON AS COST_YRMON		
              ,CREATE_WK AS COST_WK		
              ,SLAN_CD		
              ,RLANE_CD		
              ,SLAN_DIR_CD		
              ,VSL_CLSS_CAPA		
              ,FOIL_CSM		
              ,FOIL_UC_AMT		
              ,FOIL_AMT		
              ,DOIL_CSM		
              ,DOIL_UC_AMT		
              ,DOIL_AMT       		
         FROM 		
            (		
            SELECT C1.COST_YRMON AS CREATE_YRMON		
                  ,C1.COST_WK    AS CREATE_WK		
                  ,C2.COST_YRMON AS SOURCE_YRMON		
                  ,C2.COST_WK    AS SOURCE_WK		
                  ,MAX(C2.COST_YRMON||C2.COST_WK) OVER (PARTITION BY C2.SLAN_CD, C2.RLANE_CD, C2.SLAN_DIR_CD, C2.VSL_CLSS_CAPA) MAX_COST_WK 		
                  ,C2.SLAN_CD		
                  ,C2.RLANE_CD		
                  ,C2.SLAN_DIR_CD		
                  ,C2.VSL_CLSS_CAPA		
                  ,C2.FOIL_CSM		
                  ,C2.FOIL_UC_AMT		
                  ,C2.FOIL_AMT		
                  ,C2.DOIL_CSM		
                  ,C2.DOIL_UC_AMT		
                  ,C2.DOIL_AMT		
            FROM (		
                  SELECT DISTINCT		
                        B1.SLS_YRMON AS COST_YRMON		
                       ,B1.COST_WK 		
                       ,B1.SLAN_CD		
                       ,B1.RLANE_CD		
                       ,B1.DIR_CD		
                       ,B2.VSL_CLSS_CAPA		
                   FROM COA_MON_VVD B1		
                      ,(		
                       SELECT A1.VSL_SEQ         VSL_SEQ		
                             ,A1.VSL_CD          VSL_CD		
                             ,A1.VSL_TP_CD       VSL_TP_CD		
                             ,A1.VSL_OSHP_CD     VSL_OSHP_CD		
                             ,A1.VOP_CD          VOP_CD                 		
                             ,A1.VSL_CLSS_CAPA   VSL_CLSS_CAPA		
                             ,A1.VSL_APLY_FM_DT  FM_DT		
                             ,A1.VSL_APLY_TO_DT  TO_DT		
                         FROM COA_VSL_RGST A1		
                        WHERE 1 = 1		
                          AND NVL(A1.DELT_FLG, 'N') = 'N'		
                      ) B2		
                      ,COA_LANE_RGST B3		
                 WHERE B1.VSL_CD          = B2.VSL_CD		
                   AND B1.TRD_CD          = B3.TRD_CD		
                   AND B1.RLANE_CD        = B3.RLANE_CD		
                   AND B1.IOC_CD          = B3.IOC_CD		
                   AND B1.DIR_CD          = B3.DIR_CD		
                   AND B1.SLS_YRMON      LIKE @[cost_yrmon]||'%'	
                   AND B1.COST_WK          = @[cost_wk]		
                   AND B1.DELT_FLG         = 'N'		
            	   AND NVL(B3.DELT_FLG,'N')= 'N'	
                   AND B2.VOP_CD           = 'HJS'		
                   AND B3.TRD_CD           <> 'COM'		
                   AND B3.VSL_LANE_TP_CD   IN ('JO','SC')		
                   AND TO_CHAR(B1.N1ST_LODG_PORT_ETD_DT, 'YYYYMMDD')		
                      BETWEEN NVL(TO_CHAR(B2.FM_DT, 'YYYYMMDD'), '19000101')		
                      AND     NVL(TO_CHAR(B2.TO_DT, 'YYYYMMDD'), '99991231')
					  AND B1.SUB_TRD_CD <> 'IP'		
                 ) C1		
                 ,COA_BNK_TRF C2		
                 ,(SELECT PREV_WK_12, PREV_WK_1		
                     FROM (		
                           SELECT LAG (COST_YR || COST_WK, 12) OVER (ORDER BY COST_YR || COST_WK) AS PREV_WK_12		
                                 ,LAG (COST_YR || COST_WK, 1) OVER (ORDER BY COST_YR || COST_WK) AS PREV_WK_1		
                             FROM COA_WK_PRD		
                            WHERE COST_YR || COST_WK <= @[cost_yrmon] || @[cost_wk]		
                         ORDER BY COST_YR || COST_WK DESC		
                         )              		
                    WHERE ROWNUM = 1) C3		
            WHERE 1=1		
              AND C1.SLAN_CD        = C2.SLAN_CD		
              AND C1.RLANE_CD       = C2.RLANE_CD		
              AND C1.DIR_CD         = C2.SLAN_DIR_CD		
              AND C1.VSL_CLSS_CAPA  = C2.VSL_CLSS_CAPA		
              AND SUBSTR(C2.COST_YRMON, 1, 4)||C2.COST_WK  BETWEEN PREV_WK_12 AND PREV_WK_1
              AND C2.FOIL_UC_AMT >0)-- 0 으로 생성된 단가는 복사하지 않음		
        WHERE SOURCE_YRMON||SOURCE_WK = MAX_COST_WK		
      ) D2		
ON (		
         D1.COST_YRMON    = D2.COST_YRMON		
     AND D1.COST_WK       = D2.COST_WK		
     AND D1.SLAN_CD       = D2.SLAN_CD		
     AND D1.RLANE_CD      = D2.RLANE_CD		
     AND D1.SLAN_DIR_CD   = D2.SLAN_DIR_CD		
     AND D1.VSL_CLSS_CAPA = D2.VSL_CLSS_CAPA		
    )		
		
WHEN MATCHED THEN		
      UPDATE		
         SET  D1.FOIL_CSM      = D2.FOIL_CSM		
             ,D1.FOIL_UC_AMT   = D2.FOIL_UC_AMT		
             ,D1.FOIL_AMT      = D2.FOIL_AMT		
             ,D1.DOIL_CSM      = D2.DOIL_CSM		
             ,D1.DOIL_UC_AMT   = D2.DOIL_UC_AMT		
             ,D1.DOIL_AMT      = D2.DOIL_AMT		
             ,D1.UPD_USR_ID    = @[upd_usr_id]		
             ,D1.UPD_DT        = SYSDATE		
 WHEN NOT MATCHED THEN		
      INSERT(		
             D1.COST_YRMON		
            ,D1.COST_WK		
            ,D1.SLAN_CD		
            ,D1.RLANE_CD		
            ,D1.SLAN_DIR_CD		
            ,D1.VSL_CLSS_CAPA		
            ,D1.FOIL_CSM		
            ,D1.FOIL_UC_AMT		
            ,D1.FOIL_AMT		
            ,D1.DOIL_CSM		
            ,D1.DOIL_UC_AMT		
            ,D1.DOIL_AMT		
            ,D1.CRE_USR_ID		
            ,D1.CRE_DT		
            ,D1.UPD_USR_ID		
            ,D1.UPD_DT		
      )VALUES(		
             D2.COST_YRMON		
            ,D2.COST_WK		
            ,D2.SLAN_CD		
            ,D2.RLANE_CD		
            ,D2.SLAN_DIR_CD		
            ,D2.VSL_CLSS_CAPA		
            ,D2.FOIL_CSM		
            ,D2.FOIL_UC_AMT		
            ,D2.FOIL_AMT		
            ,D2.DOIL_CSM		
            ,D2.DOIL_UC_AMT		
            ,D2.DOIL_AMT		
            ,@[cre_usr_id]		
            ,SYSDATE		
            ,@[upd_usr_id]		
            ,SYSDATE		
      )			]]></sql>
			<params>
				<param name="cost_yrmon" type="12" value="" out="N"/>
				<param name="cost_wk" type="12" value="" out="N"/>
				<param name="upd_usr_id" type="12" value="" out="N"/>
				<param name="cre_usr_id" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
