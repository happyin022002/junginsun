/*=========================================================
*Copyright(c) 2016 CyberLogitec
*@FileName : SpaceAllocationManageDBDAOSearchSpaceAllocation0047DetailListVORSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2016.08.18
*@LastModifier : 최성민
*@LastVersion : 1.0
* 2016.08.18 최성민
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esm.spc.spaceallocationmanage.spaceallocationmanage.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author CHOI SUNGMIN
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class SpaceAllocationManageDBDAOSearchSpaceAllocation0047DetailListVORSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * --2014.08월 이전 주석 쿼리안으로 이동
	  * 2015.03.04 김성욱 [CHM-201534435] SQM QTA주가 변경 관련 적용 요청
	  * 2015.06.11 김성욱 [CHM-201535211] SPC BKG 연동
	  * 2015.06.24 이혜민 [CHM-201535810] Fixed Rate 계약 정보의 SPC 적용 개발 요청
	  * 2015.07.03 이혜민 [CHM-201536633] Control Option management 보완요청 (Fixed Rate관련)
	  * 2015.07.16 Arie [CHM-201537094] MAS CMB 산출 로직 변경 적용 - dem/det 추가 CM = REV+DEM/DET-COST TTL
	  * 2016.05.18 최성민 Double Callling Route(Port/Tmnl)에 대한 물량집계 및 병목상 Logic 보완 사항 요청
	  * 2016.07.05 CHM-201642241 VGM(BKG상 표시되는 또 다른 WGT 정보) 도입 관련 SPC 사항
	  * </pre>
	  */
	public SpaceAllocationManageDBDAOSearchSpaceAllocation0047DetailListVORSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("week",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vsl_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("year",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("bound",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("skd_dir_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("office",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("skd_voy_no",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("lane",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("fcast",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esm.spc.spaceallocationmanage.spaceallocationmanage.integration").append("\n"); 
		query.append("FileName : SpaceAllocationManageDBDAOSearchSpaceAllocation0047DetailListVORSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("WITH base_key AS (" ).append("\n"); 
		query.append("    SELECT @[year]       AS YEAR      ," ).append("\n"); 
		query.append("           @[week]       AS WEEK      ," ).append("\n"); 
		query.append("           @[office]     AS RHQ_CD    ," ).append("\n"); 
		query.append("           @[lane]       AS RLANE_CD  ," ).append("\n"); 
		query.append("           @[bound]      AS DIR_CD    ," ).append("\n"); 
		query.append("           @[vsl_cd]     AS VSL_CD    ," ).append("\n"); 
		query.append("           @[skd_voy_no] AS SKD_VOY_NO," ).append("\n"); 
		query.append("           @[skd_dir_cd] AS SKD_DIR_CD," ).append("\n"); 
		query.append("           @[fcast]      AS FCAST     ," ).append("\n"); 
		query.append("           L.CONTI_CD    AS OFC_CONTI ," ).append("\n"); 
		query.append("           O.OFC_CD      AS OFC_CD" ).append("\n"); 
		query.append("      FROM MDM_LOCATION     L," ).append("\n"); 
		query.append("           MDM_ORGANIZATION O" ).append("\n"); 
		query.append("     WHERE L.LOC_CD = O.LOC_CD" ).append("\n"); 
		query.append("       AND O.OFC_CD = @[office]" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", BASE AS (" ).append("\n"); 
		query.append("    SELECT B.YEAR," ).append("\n"); 
		query.append("           B.WEEK," ).append("\n"); 
		query.append("           SUBSTR(T.SLS_YRMON, 1, 4) AS COST_YR," ).append("\n"); 
		query.append("           SUBSTR(T.SLS_YRMON, 5)    AS MON    ," ).append("\n"); 
		query.append("           T.COST_WK   ," ).append("\n"); 
		query.append("           B.RHQ_CD    ," ).append("\n"); 
		query.append("           T.TRD_CD    ," ).append("\n"); 
		query.append("           B.RLANE_CD  ," ).append("\n"); 
		query.append("           B.DIR_CD    ," ).append("\n"); 
		query.append("           B.VSL_CD    ," ).append("\n"); 
		query.append("           B.SKD_VOY_NO," ).append("\n"); 
		query.append("           B.SKD_DIR_CD," ).append("\n"); 
		query.append("           B.FCAST     ," ).append("\n"); 
		query.append("			  T.IOC_CD," ).append("\n"); 
		query.append("           NVL((O.CTRL_PORT_FLG)   , 'N') AS POL_POD," ).append("\n"); 
		query.append("           NVL((O.CTRL_40FT_HC_FLG), 'N') AS HC40   ," ).append("\n"); 
		query.append("           NVL((O.CTRL_45FT_HC_FLG), 'N') AS HC45   ," ).append("\n"); 
		query.append("           NVL((O.CTRL_53FT_FLG)   , 'N') AS HC53   ," ).append("\n"); 
		query.append("           NVL((O.CTRL_RF_FLG)     , 'N') AS REEFER ," ).append("\n"); 
		query.append("           NVL((O.CTRL_WGT_FLG)    , 'N') AS WEIGHT ," ).append("\n"); 
		query.append("           NVL((O.CTRL_SPC_FLG)    , 'N') AS VOLUME ," ).append("\n"); 
		query.append("           B.OFC_CD   ," ).append("\n"); 
		query.append("           B.OFC_CONTI," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("           -- 2014.07.31 추가" ).append("\n"); 
		query.append("           --NVL(DECODE(O.CTRL_ECC_FLG,'Y','E',DECODE(O.CTRL_ECC_GRP_FLG,'Y','G','N')),'N') AS CTRL_DEST, -- C = COUNTRY, L = LOCATION" ).append("\n"); 
		query.append("		   DECODE(NVL(O.CTRL_LVL_CD, 'N') ,'T', NVL(DECODE(O.CTRL_ECC_FLG,'Y','E',DECODE(O.CTRL_ECC_GRP_FLG,'Y','G','N')),'N'), 'N' )AS CTRL_DEST, -- C = COUNTRY, L = LOCATION" ).append("\n"); 
		query.append("           NVL(O.CTRL_DEST_LVL_CD, 'N')     AS CTRL_DEST_LVL  ,                                      -- D = BKG_POD, T = BKG_DEL" ).append("\n"); 
		query.append("           NVL(O.CTRL_USA_SVC_MOD_FLG, 'N') AS CTRL_USA,                                            -- Y = LOCAL/IPI" ).append("\n"); 
		query.append("           NVL(O.CTRL_ACCT_FLG, 'N')        AS CTRL_ACCOUNT," ).append("\n"); 
		query.append("           NVL(O.CTRL_FX_RT_FLG, 'N')       AS CTRL_FX_RT_FLG," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("           SUBSTR(T.COST_YRMON, 1, 4) AS BSE_YR," ).append("\n"); 
		query.append("           CASE WHEN T.COST_YRMON >= '201501' " ).append("\n"); 
		query.append("                THEN CEIL(TO_NUMBER(SUBSTR(T.COST_YRMON, -2))/3)||'Q' " ).append("\n"); 
		query.append("                ELSE CEIL(TO_NUMBER(DECODE(T.COST_WK,'00','01','53','52',T.COST_WK))/13)||'Q'" ).append("\n"); 
		query.append("           END BSE_QTR_CD, -- 2015.03.04 CHM-201534435 SQM QTA주가 변경 관련 적용 요청" ).append("\n"); 
		query.append("           T.N1ST_LODG_PORT_ETD_DT AS FL_ETD_DT, " ).append("\n"); 
		query.append("           T.SUB_TRD_CD" ).append("\n"); 
		query.append("      FROM MAS_MON_VVD       T," ).append("\n"); 
		query.append("           BASE_KEY          B," ).append("\n"); 
		query.append("           SPC_ALOC_CTRL_OPT O" ).append("\n"); 
		query.append("     WHERE T.RLANE_CD      = B.RLANE_CD" ).append("\n"); 
		query.append("       AND T.VSL_CD        = B.VSL_CD" ).append("\n"); 
		query.append("       AND T.SKD_VOY_NO    = B.SKD_VOY_NO" ).append("\n"); 
		query.append("       AND T.DIR_CD        = B.DIR_CD" ).append("\n"); 
		query.append("       AND O.RLANE_CD  (+) = B.RLANE_CD" ).append("\n"); 
		query.append("       AND O.DIR_CD    (+) = B.DIR_CD" ).append("\n"); 
		query.append("       AND O.VSL_CD    (+) = B.VSL_CD" ).append("\n"); 
		query.append("       AND O.SKD_VOY_NO(+) = B.SKD_VOY_NO" ).append("\n"); 
		query.append("       AND O.SKD_DIR_CD(+) = B.SKD_DIR_CD" ).append("\n"); 
		query.append("       AND T.TRD_CD        = SPC_GET_REP_TRD_FNC(B.RLANE_CD)" ).append("\n"); 
		query.append("       AND SUBSTR(T.SLS_YRMON, 1, 4)||T.COST_WK = B.YEAR||B.WEEK" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("--2014.08.13 all_pol관련 option table 추가" ).append("\n"); 
		query.append("#if (${all_pol} == 'Y')" ).append("\n"); 
		query.append(", CONTROL_OPT AS(" ).append("\n"); 
		query.append("	SELECT DISTINCT" ).append("\n"); 
		query.append("	   A.REP_TRD_CD," ).append("\n"); 
		query.append("           A.REP_SUB_TRD_CD," ).append("\n"); 
		query.append("           A.RLANE_CD," ).append("\n"); 
		query.append("           A.DIR_CD," ).append("\n"); 
		query.append("           D.ALOC_CTRL_TP_CD," ).append("\n"); 
		query.append("           -- 2014.12.12 계약 CONTROL에 따른 변경" ).append("\n"); 
		query.append("           D.CTRL_LOC_ACCT_CD AS CTRL_LOC_ACCT_CD," ).append("\n"); 
		query.append("           A.CTRL_DEST_LVL_CD" ).append("\n"); 
		query.append("  	FROM SPC_ALOC_CTRL_OPT A," ).append("\n"); 
		query.append("           SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("	WHERE A.RLANE_CD       = D.RLANE_CD" ).append("\n"); 
		query.append("   	  AND A.REP_TRD_CD     = D.TRD_CD" ).append("\n"); 
		query.append("	  AND A.REP_SUB_TRD_CD = D.SUB_TRD_CD" ).append("\n"); 
		query.append("	  AND A.SKD_DIR_CD     = D.DIR_CD " ).append("\n"); 
		query.append("	  AND (DECODE(A.CTRL_ECC_FLG,'Y', 'E', DECODE(CTRL_ECC_GRP_FLG,'Y','G','X')) = D.ALOC_CTRL_TP_CD OR" ).append("\n"); 
		query.append("	  -- 2014.11.24 Account control 추가" ).append("\n"); 
		query.append("           ( A.CTRL_ACCT_FLG = 'Y'OR D.ALOC_CTRL_TP_CD IN ('A', 'B', 'C')))" ).append("\n"); 
		query.append("	  AND A.RLANE_CD   = @[lane]" ).append("\n"); 
		query.append("	  AND A.VSL_CD     = @[vsl_cd] " ).append("\n"); 
		query.append("	  AND A.SKD_VOY_NO = @[skd_voy_no]" ).append("\n"); 
		query.append("	  AND A.SKD_DIR_CD = @[skd_dir_cd]" ).append("\n"); 
		query.append(" UNION ALL" ).append("\n"); 
		query.append("	SELECT A.REP_TRD_CD," ).append("\n"); 
		query.append("           A.REP_SUB_TRD_CD," ).append("\n"); 
		query.append("           A.RLANE_CD," ).append("\n"); 
		query.append("           A.DIR_CD," ).append("\n"); 
		query.append("           'A'," ).append("\n"); 
		query.append("           'OTHERS', " ).append("\n"); 
		query.append("           ''" ).append("\n"); 
		query.append("      FROM SPC_ALOC_CTRL_OPT A" ).append("\n"); 
		query.append("     WHERE A.RLANE_CD   = @[lane]" ).append("\n"); 
		query.append("       AND A.VSL_CD     = @[vsl_cd] " ).append("\n"); 
		query.append("       AND A.SKD_VOY_NO = @[skd_voy_no]" ).append("\n"); 
		query.append("       AND A.SKD_DIR_CD = @[skd_dir_cd]" ).append("\n"); 
		query.append(" UNION ALL" ).append("\n"); 
		query.append("	SELECT DISTINCT REP_TRD_CD, " ).append("\n"); 
		query.append("                    REP_SUB_TRD_CD, " ).append("\n"); 
		query.append("                    RLANE_CD, " ).append("\n"); 
		query.append("                    DIR_CD, " ).append("\n"); 
		query.append("                    CTRL_CNT_FLG, " ).append("\n"); 
		query.append("                    CTRL_LOC_ACCT_CD, " ).append("\n"); 
		query.append("                    CTRL_DEST_LVL_CD" ).append("\n"); 
		query.append("      FROM " ).append("\n"); 
		query.append("		(" ).append("\n"); 
		query.append("--          SELECT A.REP_TRD_CD,A.REP_SUB_TRD_CD,A.RLANE_CD,A.DIR_CD," ).append("\n"); 
		query.append("--                'L' AS CTRL_CNT_FLG, 'OTHERS' AS CTRL_LOC_ACCT_CD, '' AS CTRL_DEST_LVL_CD" ).append("\n"); 
		query.append("--           FROM SPC_ALOC_CTRL_OPT A" ).append("\n"); 
		query.append("--          WHERE A.RLANE_CD   = @ [lane]" ).append("\n"); 
		query.append("--	    AND A.VSL_CD     = @ [vsl_cd] " ).append("\n"); 
		query.append("--	    AND A.SKD_VOY_NO = @ [skd_voy_no]" ).append("\n"); 
		query.append("--	    AND A.SKD_DIR_CD = @ [skd_dir_cd]" ).append("\n"); 
		query.append("--	  UNION ALL" ).append("\n"); 
		query.append("-- USA mode의 경우 'OTHERS'는 항상 나머지 두 개 OPTION은 CTRL_USA_SVC_MOD_FLG가 Y인 경우에만" ).append("\n"); 
		query.append("         SELECT A.REP_TRD_CD,A.REP_SUB_TRD_CD,A.RLANE_CD,A.DIR_CD," ).append("\n"); 
		query.append("                'U' , 'OTHERS', ''" ).append("\n"); 
		query.append("           FROM SPC_ALOC_CTRL_OPT A" ).append("\n"); 
		query.append("          WHERE A.RLANE_CD   = @[lane]" ).append("\n"); 
		query.append("	    AND A.VSL_CD     = @[vsl_cd] " ).append("\n"); 
		query.append("	    AND A.SKD_VOY_NO = @[skd_voy_no]" ).append("\n"); 
		query.append("	    AND A.SKD_DIR_CD = @[skd_dir_cd]" ).append("\n"); 
		query.append("      UNION ALL" ).append("\n"); 
		query.append("         SELECT A.REP_TRD_CD,A.REP_SUB_TRD_CD,A.RLANE_CD,A.DIR_CD," ).append("\n"); 
		query.append("                'U' , 'IPI', ''" ).append("\n"); 
		query.append("           FROM SPC_ALOC_CTRL_OPT A" ).append("\n"); 
		query.append("          WHERE A.RLANE_CD   = @[lane]" ).append("\n"); 
		query.append("	    AND A.VSL_CD     = @[vsl_cd] " ).append("\n"); 
		query.append("	    AND A.SKD_VOY_NO = @[skd_voy_no]" ).append("\n"); 
		query.append("	    AND A.SKD_DIR_CD = @[skd_dir_cd]" ).append("\n"); 
		query.append("            AND A.CTRL_USA_SVC_MOD_FLG = 'Y'" ).append("\n"); 
		query.append("      UNION ALL" ).append("\n"); 
		query.append("         SELECT A.REP_TRD_CD,A.REP_SUB_TRD_CD,A.RLANE_CD,A.DIR_CD," ).append("\n"); 
		query.append("                'U' , 'LOCAL', ''" ).append("\n"); 
		query.append("          FROM SPC_ALOC_CTRL_OPT A" ).append("\n"); 
		query.append("         WHERE A.RLANE_CD   = @[lane]" ).append("\n"); 
		query.append("	   AND A.VSL_CD     = @[vsl_cd] " ).append("\n"); 
		query.append("	   AND A.SKD_VOY_NO = @[skd_voy_no]" ).append("\n"); 
		query.append("	   AND A.SKD_DIR_CD = @[skd_dir_cd]" ).append("\n"); 
		query.append("           AND A.CTRL_USA_SVC_MOD_FLG = 'Y'" ).append("\n"); 
		query.append("        ))" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append(", CTRT_OPT_DTL AS (" ).append("\n"); 
		query.append("-- SPC_ALOC_LANE_CTRL_OPT_DTL 테이블의 계약 정보를 가지고 온다." ).append("\n"); 
		query.append("SELECT DISTINCT  " ).append("\n"); 
		query.append("       A2.TRD_CD" ).append("\n"); 
		query.append("      ,A2.SUB_TRD_CD" ).append("\n"); 
		query.append("      ,A2.RLANE_CD" ).append("\n"); 
		query.append("      ,A2.DIR_CD" ).append("\n"); 
		query.append("      ,A2.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("      ,A2.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("      ,A1.FL_ETD_DT" ).append("\n"); 
		query.append("  FROM BASE A1" ).append("\n"); 
		query.append("      ,SPC_ALOC_LANE_CTRL_OPT_DTL A2" ).append("\n"); 
		query.append(" WHERE 1=1" ).append("\n"); 
		query.append("   AND A1.TRD_CD           = A2.TRD_CD" ).append("\n"); 
		query.append("   AND A1.SUB_TRD_CD       = A2.SUB_TRD_CD" ).append("\n"); 
		query.append("   AND A1.RLANE_CD         = A2.RLANE_CD" ).append("\n"); 
		query.append("   AND A1.DIR_CD           = A2.DIR_CD" ).append("\n"); 
		query.append("   AND A1.CTRL_ACCOUNT     = 'Y'" ).append("\n"); 
		query.append("   AND A1.CTRL_FX_RT_FLG   = 'Y'" ).append("\n"); 
		query.append("   AND A2.CTRL_FX_RT_FLG   = 'Y'" ).append("\n"); 
		query.append("   AND A2.ALOC_CTRL_TP_CD  = 'F'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", CTRT_DTL_INFO AS (" ).append("\n"); 
		query.append("    SELECT  " ).append("\n"); 
		query.append("           A5.TRD_CD" ).append("\n"); 
		query.append("          ,A5.SUB_TRD_CD" ).append("\n"); 
		query.append("          ,A5.RLANE_CD" ).append("\n"); 
		query.append("          ,A5.DIR_CD" ).append("\n"); 
		query.append("          ,A5.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("          ,A5.CTRL_LOC_ACCT_CD " ).append("\n"); 
		query.append("          ,A1.PROP_NO" ).append("\n"); 
		query.append("          ,A2.AMDT_SEQ" ).append("\n"); 
		query.append("          ,A3.SVC_SCP_CD" ).append("\n"); 
		query.append("          ,A4.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("          ,A4.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("          ,A2.REAL_CUST_CNT_CD || LPAD(A2.REAL_CUST_SEQ,'6','0') CUST_CD" ).append("\n"); 
		query.append("          ,A4.FX_RT_FLG" ).append("\n"); 
		query.append("          ,A2.EFF_DT" ).append("\n"); 
		query.append("          ,A2.EXP_DT" ).append("\n"); 
		query.append("          ,A2.PROP_STS_CD" ).append("\n"); 
		query.append("      FROM CTRT_OPT_DTL A5" ).append("\n"); 
		query.append("          ,PRI_SP_HDR A1" ).append("\n"); 
		query.append("          ,PRI_SP_MN  A2" ).append("\n"); 
		query.append("          ,PRI_SP_SCP_MN A3" ).append("\n"); 
		query.append("          ,PRI_SP_SCP_RT_CMDT_HDR A4 " ).append("\n"); 
		query.append("     WHERE 1=1" ).append("\n"); 
		query.append("       AND A1.SC_NO             = A5.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("       AND A1.PROP_NO           = A2.PROP_NO" ).append("\n"); 
		query.append("       AND A2.PROP_STS_CD       = 'F' -- A, F, Q" ).append("\n"); 
		query.append("       AND TRUNC(A5.FL_ETD_DT) BETWEEN A2.EFF_DT AND A2.EXP_DT" ).append("\n"); 
		query.append("       AND A2.PROP_NO           = A3.PROP_NO" ).append("\n"); 
		query.append("       AND A2.AMDT_SEQ          = A3.AMDT_SEQ" ).append("\n"); 
		query.append("       AND A3.PROP_NO           = A4.PROP_NO" ).append("\n"); 
		query.append("       AND A3.AMDT_SEQ          = A4.AMDT_SEQ" ).append("\n"); 
		query.append("       AND A3.SVC_SCP_CD        = A4.SVC_SCP_CD" ).append("\n"); 
		query.append("       AND NVL(A4.FX_RT_FLG,'N')= 'Y'" ).append("\n"); 
		query.append("     )" ).append("\n"); 
		query.append(", ALOC_LANE_CTRL_OPT_DTL AS (" ).append("\n"); 
		query.append("SELECT DISTINCT B1.TRD_CD" ).append("\n"); 
		query.append("      ,B1.SUB_TRD_CD" ).append("\n"); 
		query.append("      ,B1.RLANE_CD" ).append("\n"); 
		query.append("      ,B1.DIR_CD" ).append("\n"); 
		query.append("--      ,B1.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("--      ,B3.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("      ,NVL(B3.ALOC_CTRL_TP_CD, B1.ALOC_CTRL_TP_CD) AS ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("      ,B1.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("      ,B1.SC_NO" ).append("\n"); 
		query.append("      ,B1.RFA_NO" ).append("\n"); 
		query.append("      ,NVL(B3.ALOC_CTRL_DTL_CD, B1.ALOC_CTRL_DTL_CD) AS ALOC_CTRL_DTL_CD" ).append("\n"); 
		query.append("  FROM " ).append("\n"); 
		query.append("       SPC_ALOC_LANE_CTRL_OPT_DTL B1" ).append("\n"); 
		query.append("      ,BASE B2" ).append("\n"); 
		query.append("      ,(" ).append("\n"); 
		query.append("        -- Actual Account 정보 추출" ).append("\n"); 
		query.append("        SELECT distinct" ).append("\n"); 
		query.append("               A1.TRD_CD" ).append("\n"); 
		query.append("              ,A1.SUB_TRD_CD" ).append("\n"); 
		query.append("              ,A1.RLANE_CD" ).append("\n"); 
		query.append("              ,A1.DIR_CD" ).append("\n"); 
		query.append("              ,'B' AS ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("              ,A1.ALOC_CTRL_TP_CD AS ORG_ALOC_CTRL_TP_CD-- B : A/Acct, C : Commodity, F : Fixed" ).append("\n"); 
		query.append("              ,A1.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("              ,A1.PROP_NO" ).append("\n"); 
		query.append("              ,A1.AMDT_SEQ" ).append("\n"); 
		query.append("              ,A1.SVC_SCP_CD" ).append("\n"); 
		query.append("              ,A2.CUST_CNT_CD || LPAD(A2.CUST_SEQ,'6','0') AS ALOC_CTRL_DTL_CD" ).append("\n"); 
		query.append("          FROM CTRT_DTL_INFO A1" ).append("\n"); 
		query.append("              ,PRI_SP_SCP_RT_ACT_CUST A2" ).append("\n"); 
		query.append("         WHERE 1=1" ).append("\n"); 
		query.append("           AND A1.PROP_NO           = A2.PROP_NO" ).append("\n"); 
		query.append("           AND A1.AMDT_SEQ          = A2.AMDT_SEQ" ).append("\n"); 
		query.append("           AND A1.SVC_SCP_CD        = A2.SVC_SCP_CD" ).append("\n"); 
		query.append("           AND A1.GEN_SPCL_RT_TP_CD = A2.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("           AND A1.CMDT_HDR_SEQ      = A2.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("        -- CMDT 정보 추출" ).append("\n"); 
		query.append("        SELECT distinct" ).append("\n"); 
		query.append("               A1.TRD_CD" ).append("\n"); 
		query.append("              ,A1.SUB_TRD_CD" ).append("\n"); 
		query.append("              ,A1.RLANE_CD" ).append("\n"); 
		query.append("              ,A1.DIR_CD" ).append("\n"); 
		query.append("              ,'C' AS ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("              ,A1.ALOC_CTRL_TP_CD AS ORG_ALOC_CTRL_TP_CD -- B : A/Acct, C : Commodity, F : Fixed" ).append("\n"); 
		query.append("              ,A1.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("              ,A1.PROP_NO" ).append("\n"); 
		query.append("              ,A1.AMDT_SEQ" ).append("\n"); 
		query.append("              ,A1.SVC_SCP_CD" ).append("\n"); 
		query.append("              ,DECODE(A2.PRC_CMDT_TP_CD,'C', A2.PRC_CMDT_DEF_CD, 'G', A4.PRC_CMDT_DEF_CD) AS ALOC_CTRL_DTL_CD" ).append("\n"); 
		query.append("          FROM CTRT_DTL_INFO A1" ).append("\n"); 
		query.append("              ,PRI_SP_SCP_RT_CMDT     A2" ).append("\n"); 
		query.append("              ,PRI_SP_SCP_GRP_CMDT    A3" ).append("\n"); 
		query.append("              ,PRI_SP_SCP_GRP_CMDT_DTL A4  " ).append("\n"); 
		query.append("         WHERE 1=1" ).append("\n"); 
		query.append("           AND A1.PROP_NO           = A2.PROP_NO" ).append("\n"); 
		query.append("           AND A1.AMDT_SEQ          = A2.AMDT_SEQ" ).append("\n"); 
		query.append("           AND A1.SVC_SCP_CD        = A2.SVC_SCP_CD" ).append("\n"); 
		query.append("           AND A1.GEN_SPCL_RT_TP_CD = A2.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("           AND A1.CMDT_HDR_SEQ      = A2.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("           AND A2.SRC_INFO_CD       <> 'AD'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("           AND A2.PROP_NO           = A3.PROP_NO(+)" ).append("\n"); 
		query.append("           AND A2.AMDT_SEQ          = A3.AMDT_SEQ(+)" ).append("\n"); 
		query.append("           AND A2.SVC_SCP_CD        = A3.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("           AND A2.PRC_CMDT_DEF_CD   = A3.PRC_GRP_CMDT_CD(+)" ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           AND A3.PROP_NO           = A4.PROP_NO(+)" ).append("\n"); 
		query.append("           AND A3.AMDT_SEQ          = A4.AMDT_SEQ(+)" ).append("\n"); 
		query.append("           AND A3.SVC_SCP_CD        = A4.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("           AND A3.GRP_CMDT_SEQ      = A4.GRP_CMDT_SEQ(+)   " ).append("\n"); 
		query.append("           AND A4.SRC_INFO_CD(+)    <> 'AD'" ).append("\n"); 
		query.append("         GROUP BY A1.TRD_CD" ).append("\n"); 
		query.append("              ,A1.SUB_TRD_CD" ).append("\n"); 
		query.append("              ,A1.RLANE_CD" ).append("\n"); 
		query.append("              ,A1.DIR_CD" ).append("\n"); 
		query.append("              ,A1.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("              ,A1.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("              ,A1.PROP_NO" ).append("\n"); 
		query.append("              ,A1.AMDT_SEQ" ).append("\n"); 
		query.append("              ,A1.SVC_SCP_CD" ).append("\n"); 
		query.append("              ,DECODE(A2.PRC_CMDT_TP_CD,'C', A2.PRC_CMDT_DEF_CD, 'G', A4.PRC_CMDT_DEF_CD)       " ).append("\n"); 
		query.append("       ) B3" ).append("\n"); 
		query.append(" WHERE 1=1" ).append("\n"); 
		query.append("   AND B2.TRD_CD           = B1.TRD_CD" ).append("\n"); 
		query.append("   AND B2.SUB_TRD_CD       = B1.SUB_TRD_CD" ).append("\n"); 
		query.append("   AND B2.RLANE_CD         = B1.RLANE_CD" ).append("\n"); 
		query.append("   AND B2.DIR_CD           = B1.DIR_CD" ).append("\n"); 
		query.append("   AND B1.TRD_CD           = B3.TRD_CD(+)" ).append("\n"); 
		query.append("   AND B1.SUB_TRD_CD       = B3.SUB_TRD_CD(+)" ).append("\n"); 
		query.append("   AND B1.RLANE_CD         = B3.RLANE_CD(+)" ).append("\n"); 
		query.append("   AND B1.DIR_CD           = B3.DIR_CD(+)" ).append("\n"); 
		query.append("   AND B1.ALOC_CTRL_TP_CD  = B3.ORG_ALOC_CTRL_TP_CD(+)" ).append("\n"); 
		query.append("   AND B1.CTRL_LOC_ACCT_CD = B3.CTRL_LOC_ACCT_CD(+)" ).append("\n"); 
		query.append("    )" ).append("\n"); 
		query.append(", REP_VVDS AS (" ).append("\n"); 
		query.append("    SELECT V.TRD_CD     AS REP_TRD_CD    ," ).append("\n"); 
		query.append("           V.SUB_TRD_CD AS REP_SUB_TRD_CD," ).append("\n"); 
		query.append("           V.RLANE_CD," ).append("\n"); 
		query.append("           V.DIR_CD  ," ).append("\n"); 
		query.append("           SUBSTR(V.SLS_YRMON, 1, 4) AS COST_YR ," ).append("\n"); 
		query.append("           SUBSTR(V.SLS_YRMON, 5)    AS COST_MON," ).append("\n"); 
		query.append("           V.COST_WK   ," ).append("\n"); 
		query.append("           V.VSL_CD    ," ).append("\n"); 
		query.append("           V.SKD_VOY_NO," ).append("\n"); 
		query.append("           V.DIR_CD AS SKD_DIR_CD," ).append("\n"); 
		query.append("           V.LST_LODG_PORT_CD    ," ).append("\n"); 
		query.append("           V.LST_LODG_PORT_ETD_DT," ).append("\n"); 
		query.append("           P.OFC_CD   ," ).append("\n"); 
		query.append("           P.OFC_CONTI," ).append("\n"); 
		query.append("           '1' AS STS" ).append("\n"); 
		query.append("      FROM MAS_MON_VVD V," ).append("\n"); 
		query.append("           BASE_KEY    P" ).append("\n"); 
		query.append("     WHERE V.TRD_CD     = SPC_GET_REP_TRD_FNC(V.RLANE_CD)" ).append("\n"); 
		query.append("       AND V.SUB_TRD_CD = SPC_GET_REP_SUB_TRD_FNC(V.RLANE_CD)" ).append("\n"); 
		query.append("       AND V.VSL_CD     = P.VSL_CD" ).append("\n"); 
		query.append("       AND V.SKD_VOY_NO = P.SKD_VOY_NO" ).append("\n"); 
		query.append("       AND V.DIR_CD     = P.SKD_DIR_CD" ).append("\n"); 
		query.append("       AND (V.DELT_FLG IS NULL OR V.DELT_FLG = 'N' OR EXISTS ( SELECT 1" ).append("\n"); 
		query.append("                                                                 FROM MAS_MON_VVD N" ).append("\n"); 
		query.append("                                                                WHERE N.RLANE_CD    = V.RLANE_CD -- 2012.12.07 SLAN_CD를 RLANE_CD로 변경" ).append("\n"); 
		query.append("                                                                  AND N.VSL_CD      = V.VSL_CD" ).append("\n"); 
		query.append("                                                                  AND N.SKD_VOY_NO  = V.SKD_VOY_NO" ).append("\n"); 
		query.append("                                                                  AND N.DIR_CD      = V.DIR_CD" ).append("\n"); 
		query.append("                                                                  AND N.DELT_FLG    = 'N' ))" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", PORT_SKD AS (" ).append("\n"); 
		query.append("    SELECT V.VSL_CD       ," ).append("\n"); 
		query.append("           V.SKD_VOY_NO   ," ).append("\n"); 
		query.append("           V.SKD_DIR_CD   ," ).append("\n"); 
		query.append("           VPS.VPS_PORT_CD," ).append("\n"); 
		query.append("           VPS.YD_CD      ," ).append("\n"); 
		query.append("           VPS.CLPT_SEQ   ," ).append("\n"); 
		query.append("           VPS.CLPT_SEQ AS PORT_SEQ," ).append("\n"); 
		query.append("           VPS.VPS_ETD_DT ," ).append("\n"); 
		query.append("           SPC_CONTI_CONV_FNC(L.CONTI_CD,V.RLANE_CD,V.DIR_CD) AS CONTI_CD," ).append("\n"); 
		query.append("           MAX(VPS.CLPT_SEQ) OVER (PARTITION BY NVL(VPS.YD_CD, VPS.VPS_PORT_CD), VPS.VSL_CD, VPS.SKD_VOY_NO, VPS.SKD_DIR_CD) AS MAX_SEQ," ).append("\n"); 
		query.append("           MIN(VPS.CLPT_SEQ) OVER (PARTITION BY NVL(VPS.YD_CD, VPS.VPS_PORT_CD), VPS.VSL_CD, VPS.SKD_VOY_NO, VPS.SKD_DIR_CD) AS MIN_SEQ," ).append("\n"); 
		query.append("           VPS.CLPT_IND_SEQ," ).append("\n"); 
		query.append("           VPS.CALL_YD_IND_SEQ" ).append("\n"); 
		query.append("      FROM MDM_LOCATION     L  ," ).append("\n"); 
		query.append("           VSK_VSL_PORT_SKD VPS," ).append("\n"); 
		query.append("           REP_VVDS         V" ).append("\n"); 
		query.append("     WHERE L.LOC_CD       = VPS.VPS_PORT_CD" ).append("\n"); 
		query.append("       AND VPS.VSL_CD     = V.VSL_CD" ).append("\n"); 
		query.append("       AND VPS.SKD_VOY_NO = V.SKD_VOY_NO" ).append("\n"); 
		query.append("       AND VPS.SKD_DIR_CD = V.SKD_DIR_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(", VSL_PORT_SKD AS (" ).append("\n"); 
		query.append("    SELECT Z.RLANE_CD  ," ).append("\n"); 
		query.append("           Z.DIR_CD    ," ).append("\n"); 
		query.append("           RHQ_CD    ," ).append("\n"); 
		query.append("           VSL_CD    ," ).append("\n"); 
		query.append("           SKD_VOY_NO," ).append("\n"); 
		query.append("           SKD_DIR_CD," ).append("\n"); 
		query.append("           COST_YR_WK," ).append("\n"); 
		query.append("           POL_CD    ," ).append("\n"); 
		query.append("           POD_CD    ," ).append("\n"); 
		query.append("           MAX(POL_SEQ) AS POL_SEQ," ).append("\n"); 
		query.append("           MIN(POD_SEQ) AS POD_SEQ," ).append("\n"); 
		query.append("           SPC_CONTI_CONV_PORT_FNC(POL_CONTI, POD_CONTI, Z.RLANE_CD, SUBSTR(POL_CD, 1, 5), SUBSTR(POD_CD, 1, 5)) AS POL_CONTI," ).append("\n"); 
		query.append("		   POD_CONTI," ).append("\n"); 
		query.append("           IOC_CD   ," ).append("\n"); 
		query.append("           POL_PAST ," ).append("\n"); 
		query.append("           PAST     ," ).append("\n"); 
		query.append("           POL_POD  ," ).append("\n"); 
		query.append("           HC40     ," ).append("\n"); 
		query.append("           HC45     ," ).append("\n"); 
		query.append("           HC53     ," ).append("\n"); 
		query.append("           REEFER   ," ).append("\n"); 
		query.append("           WEIGHT   ," ).append("\n"); 
		query.append("           VOLUME   ," ).append("\n"); 
		query.append("           OFC_CD   ," ).append("\n"); 
		query.append("           OFC_CONTI," ).append("\n"); 
		query.append("           POL_PORT_SEQ," ).append("\n"); 
		query.append("           POL_PORT_MAX_SEQ," ).append("\n"); 
		query.append("           POL_YD_SEQ," ).append("\n"); 
		query.append("           POD_PORT_SEQ," ).append("\n"); 
		query.append("           POD_PORT_MAX_SEQ," ).append("\n"); 
		query.append("           POD_YD_SEQ" ).append("\n"); 
		query.append("      FROM (" ).append("\n"); 
		query.append("              SELECT V.RLANE_CD  ," ).append("\n"); 
		query.append("                     V.DIR_CD    ," ).append("\n"); 
		query.append("                     V.RHQ_CD    ," ).append("\n"); 
		query.append("                     V.VSL_CD    ," ).append("\n"); 
		query.append("                     V.SKD_VOY_NO," ).append("\n"); 
		query.append("                     V.SKD_DIR_CD," ).append("\n"); 
		query.append("                     V.COST_YR||V.COST_WK          AS COST_YR_WK," ).append("\n"); 
		query.append("                     NVL(S1.YD_CD, S1.VPS_PORT_CD) AS POL_CD    ," ).append("\n"); 
		query.append("                     NVL(S2.YD_CD, S2.VPS_PORT_CD) AS POD_CD    ," ).append("\n"); 
		query.append("                     S1.CLPT_SEQ AS POL_SEQ," ).append("\n"); 
		query.append("                     S2.CLPT_SEQ AS POD_SEQ," ).append("\n"); 
		query.append("                     S1.CONTI_CD AS POL_CONTI," ).append("\n"); 
		query.append("                     S2.CONTI_CD AS POD_CONTI," ).append("\n"); 
		query.append("                     SPC_GET_OCN_IPC_FNC(V.RLANE_CD, S1.VPS_PORT_CD, S2.VPS_PORT_CD) AS IOC_CD," ).append("\n"); 
		query.append("                     (CASE" ).append("\n"); 
		query.append("                            WHEN S1.VPS_ETD_DT < GLOBALDATE_PKG.TIME_CONV_FNC('GMT', SYS_EXTRACT_UTC(SYSTIMESTAMP), S1.VPS_PORT_CD ) THEN 'Y'" ).append("\n"); 
		query.append("                                                                                                                                     ELSE 'N'" ).append("\n"); 
		query.append("                      END) AS POL_PAST," ).append("\n"); 
		query.append("                     (DECODE(V.FCAST, '1', CASE" ).append("\n"); 
		query.append("                                                WHEN S1.VPS_ETD_DT < GLOBALDATE_PKG.TIME_CONV_FNC('GMT', SYS_EXTRACT_UTC(SYSTIMESTAMP), S1.VPS_PORT_CD ) THEN 'Y'" ).append("\n"); 
		query.append("                                                                                                                                                         ELSE 'N'" ).append("\n"); 
		query.append("                                            END, '2', 'N', '3', 'Y')" ).append("\n"); 
		query.append("                     ) AS PAST," ).append("\n"); 
		query.append("                     POL_POD ," ).append("\n"); 
		query.append("                     HC40    ," ).append("\n"); 
		query.append("                     HC45    ," ).append("\n"); 
		query.append("                     HC53    ," ).append("\n"); 
		query.append("                     REEFER  ," ).append("\n"); 
		query.append("                     WEIGHT  ," ).append("\n"); 
		query.append("                     VOLUME  ," ).append("\n"); 
		query.append("                     V.OFC_CD," ).append("\n"); 
		query.append("                     V.OFC_CONTI," ).append("\n"); 
		query.append("                     S1.CLPT_IND_SEQ POL_PORT_SEQ," ).append("\n"); 
		query.append("                     MAX(S1.CLPT_IND_SEQ) OVER (PARTITION BY V.RLANE_CD, V.VSL_CD, V.SKD_VOY_NO, V.SKD_DIR_CD) AS POL_PORT_MAX_SEQ," ).append("\n"); 
		query.append("                     S1.CALL_YD_IND_SEQ POL_YD_SEQ," ).append("\n"); 
		query.append("                     S2.CLPT_IND_SEQ POD_PORT_SEQ," ).append("\n"); 
		query.append("                     MAX(S2.CLPT_IND_SEQ) OVER (PARTITION BY V.RLANE_CD, V.VSL_CD, V.SKD_VOY_NO, V.SKD_DIR_CD) AS POD_PORT_MAX_SEQ," ).append("\n"); 
		query.append("                     S2.CALL_YD_IND_SEQ POD_YD_SEQ" ).append("\n"); 
		query.append("                FROM BASE         V ," ).append("\n"); 
		query.append("                     PORT_SKD     S1," ).append("\n"); 
		query.append("                     PORT_SKD     S2," ).append("\n"); 
		query.append("                     MDM_LOCATION L1" ).append("\n"); 
		query.append("               WHERE S1.VSL_CD      = V.VSL_CD" ).append("\n"); 
		query.append("                 AND S1.SKD_VOY_NO  = V.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND S1.SKD_DIR_CD  = V.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND S1.VSL_CD      = S2.VSL_CD" ).append("\n"); 
		query.append("                 AND S1.SKD_VOY_NO  = S2.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND S1.SKD_DIR_CD  = S2.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND S1.VPS_PORT_CD    <> S2.VPS_PORT_CD" ).append("\n"); 
		query.append("                 AND S2.PORT_SEQ    > S1.PORT_SEQ" ).append("\n"); 
		query.append("                 AND (    S1.PORT_SEQ = DECODE(S1.CONTI_CD, S2.CONTI_CD, S1.MIN_SEQ, S1.MAX_SEQ)   -- 단독 CALLING 또는 DOUBLE CALLING 인데 마지막 PORT 경우는 모두" ).append("\n"); 
		query.append("                       OR S2.PORT_SEQ < S1.MAX_SEQ ) -- DOUBLE CALLING PORT중 POD 가 LAST DOUBLE CALLING PORT 보다 앞인 경우만 FILTERING" ).append("\n"); 
		query.append("                 AND S1.VPS_PORT_CD = L1.LOC_CD" ).append("\n"); 
		query.append("              UNION ALL" ).append("\n"); 
		query.append("              SELECT V.RLANE_CD  ," ).append("\n"); 
		query.append("                     V.DIR_CD    ," ).append("\n"); 
		query.append("                     V.RHQ_CD    ," ).append("\n"); 
		query.append("                     V.VSL_CD    ," ).append("\n"); 
		query.append("                     V.SKD_VOY_NO," ).append("\n"); 
		query.append("                     V.SKD_DIR_CD," ).append("\n"); 
		query.append("                     V.COST_YR||V.COST_WK AS COST_YR_WK," ).append("\n"); 
		query.append("                     '0000000' AS POL_CD   ," ).append("\n"); 
		query.append("                     '0000000' AS POD_CD   ," ).append("\n"); 
		query.append("                     0         AS POL_SEQ  ," ).append("\n"); 
		query.append("                     0         AS POD_SEQ  ," ).append("\n"); 
		query.append("                     ' '       AS POL_CONTI," ).append("\n"); 
		query.append("                     ''        AS POD_CONTI," ).append("\n"); 
		query.append("                     DECODE(SUBSTR(V.TRD_CD, 0, 1), 'I', 'I', 'O') AS IOC_CD," ).append("\n"); 
		query.append("                     ''        AS POL_PAST ," ).append("\n"); 
		query.append("                     DECODE(V.FCAST, '1', '', '2', 'N', '3', 'Y')  AS PAST  ," ).append("\n"); 
		query.append("                     POL_POD," ).append("\n"); 
		query.append("                     HC40   ," ).append("\n"); 
		query.append("                     HC45   ," ).append("\n"); 
		query.append("                     HC53    ," ).append("\n"); 
		query.append("                     REEFER ," ).append("\n"); 
		query.append("                     WEIGHT ," ).append("\n"); 
		query.append("                     VOLUME ," ).append("\n"); 
		query.append("                     OFC_CD ," ).append("\n"); 
		query.append("                     OFC_CONTI," ).append("\n"); 
		query.append("                     '1' AS POL_PORT_SEQ," ).append("\n"); 
		query.append("                     '1' AS POL_PORT_MAX_SEQ," ).append("\n"); 
		query.append("                     '1' AS POL_YD_SEQ," ).append("\n"); 
		query.append("                     '1' AS POD_PORT_SEQ," ).append("\n"); 
		query.append("                     '1' AS POD_PORT_MAX_SEQ," ).append("\n"); 
		query.append("                     '1' AS POD_YD_SEQ" ).append("\n"); 
		query.append("                FROM BASE V" ).append("\n"); 
		query.append("           ) Z" ).append("\n"); 
		query.append("  GROUP BY Z.RLANE_CD  ," ).append("\n"); 
		query.append("           Z.DIR_CD    ," ).append("\n"); 
		query.append("           RHQ_CD    ," ).append("\n"); 
		query.append("           VSL_CD    ," ).append("\n"); 
		query.append("           SKD_VOY_NO," ).append("\n"); 
		query.append("           SKD_DIR_CD," ).append("\n"); 
		query.append("           COST_YR_WK," ).append("\n"); 
		query.append("           POL_CD    ," ).append("\n"); 
		query.append("           POD_CD    ," ).append("\n"); 
		query.append("           POL_CONTI ," ).append("\n"); 
		query.append("           POD_CONTI ," ).append("\n"); 
		query.append("           IOC_CD    ," ).append("\n"); 
		query.append("           POL_PAST  ," ).append("\n"); 
		query.append("           PAST      ," ).append("\n"); 
		query.append("           POL_POD   ," ).append("\n"); 
		query.append("           HC40      ," ).append("\n"); 
		query.append("           HC45      ," ).append("\n"); 
		query.append("           HC53      ," ).append("\n"); 
		query.append("           REEFER    ," ).append("\n"); 
		query.append("           WEIGHT    ," ).append("\n"); 
		query.append("           VOLUME    ," ).append("\n"); 
		query.append("           OFC_CD    ," ).append("\n"); 
		query.append("           OFC_CONTI, " ).append("\n"); 
		query.append("           POL_PORT_SEQ," ).append("\n"); 
		query.append("           POL_PORT_MAX_SEQ," ).append("\n"); 
		query.append("           POL_YD_SEQ," ).append("\n"); 
		query.append("           POD_PORT_SEQ," ).append("\n"); 
		query.append("           POD_PORT_MAX_SEQ," ).append("\n"); 
		query.append("           POD_YD_SEQ" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(", DB_CALL_VVD AS (" ).append("\n"); 
		query.append("     -- DOUBLE CALLING 유무" ).append("\n"); 
		query.append("  SELECT CASE WHEN MAX(DBL_CALL_SEQ) > 1 THEN  'Y' ELSE 'N' END AS POL_DBL_PORT_CHK" ).append("\n"); 
		query.append("    FROM ( -- 반드시 COUNT(*)로 처리" ).append("\n"); 
		query.append("     SELECT COUNT(*) OVER (PARTITION BY B.VPS_PORT_CD) DBL_CALL_SEQ" ).append("\n"); 
		query.append("       FROM BASE_KEY A" ).append("\n"); 
		query.append("          , VSK_VSL_PORT_SKD B" ).append("\n"); 
		query.append("      WHERE A.VSL_CD     = B.VSL_CD" ).append("\n"); 
		query.append("        AND A.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("        AND A.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("        AND NVL(B.SKD_CNG_STS_CD,'X') <> 'S')" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- 주차별 CMB " ).append("\n"); 
		query.append(", WK_CMB AS (" ).append("\n"); 
		query.append("    SELECT RNUM," ).append("\n"); 
		query.append("       	   COST_YRWK," ).append("\n"); 
		query.append("           SLS_OFC_CD," ).append("\n"); 
		query.append("           TS_FLG," ).append("\n"); 
		query.append("           IOC_CD," ).append("\n"); 
		query.append("           NVL(POL_YD_CD, '00000') POL_YD_CD," ).append("\n"); 
		query.append("           NVL(POD_YD_CD, '00000') POD_YD_CD," ).append("\n"); 
		query.append("           SUM(BKG_REV) AS BKG_REV,NVL(SUM(DMDT_COM_AMT),0) AS DMDT_COM_AMT," ).append("\n"); 
		query.append("           SUM(ESTM_CM_COST_AMT) AS ESTM_CM_COST_AMT," ).append("\n"); 
		query.append("           SUM(BKG_TTL_QTY) AS BKG_TTL_QTY," ).append("\n"); 
		query.append("           SUM(USD_BKG_TTL_WGT) AS BKG_TTL_WGT," ).append("\n"); 
		query.append("           NVL(US_MOD, '00000') US_MOD," ).append("\n"); 
		query.append("           NVL(DEL_CD, '00000') DEL_CD," ).append("\n"); 
		query.append("           NVL(ACCOUNT_CD, '000') ACCOUNT_CD" ).append("\n"); 
		query.append("     FROM  (" ).append("\n"); 
		query.append("	SELECT     T.RNUM," ).append("\n"); 
		query.append("           BAR.COST_YRWK," ).append("\n"); 
		query.append("           BAR.SLS_OFC_CD," ).append("\n"); 
		query.append("           BAR.TS_FLG," ).append("\n"); 
		query.append("           BAR.IOC_CD," ).append("\n"); 
		query.append("           BAR.POL_YD_CD," ).append("\n"); 
		query.append("           BAR.POD_YD_CD," ).append("\n"); 
		query.append("           BAR.BKG_REV,BAR.DMDT_COM_AMT," ).append("\n"); 
		query.append("           BAR.ESTM_CM_COST_AMT," ).append("\n"); 
		query.append("           BAR.BKG_TTL_QTY," ).append("\n"); 
		query.append("           BAR.USD_BKG_TTL_WGT," ).append("\n"); 
		query.append("           -- 2014.08.05 변경" ).append("\n"); 
		query.append("           CASE WHEN M.CTRL_USA = 'Y' THEN" ).append("\n"); 
		query.append("           --DECODE(BAR.USA_BKG_MOD_CD,'OTH','OTHERS',BAR.USA_BKG_MOD_CD) -- SPC_BKG_AVG_REV.LOCAL/IPI" ).append("\n"); 
		query.append("           	BAR.USA_BKG_MOD_CD -- SPC_BKG_AVG_REV.LOCAL/IPI" ).append("\n"); 
		query.append("           ELSE" ).append("\n"); 
		query.append("           	'OTH'" ).append("\n"); 
		query.append("           END AS US_MOD,                           " ).append("\n"); 
		query.append("           CASE WHEN M.CTRL_DEST <> 'N' THEN	" ).append("\n"); 
		query.append("           	NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                	FROM SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("                	WHERE P.RLANE_CD         = D.RLANE_CD" ).append("\n"); 
		query.append("                	AND SPC_GET_REP_TRD_FNC(P.RLANE_CD)     = D.TRD_CD" ).append("\n"); 
		query.append("                	AND SPC_GET_REP_SUB_TRD_FNC(P.RLANE_CD) = D.SUB_TRD_CD" ).append("\n"); 
		query.append("                	AND P.SKD_DIR_CD       = D.DIR_CD " ).append("\n"); 
		query.append("                	AND D.ALOC_CTRL_TP_CD  = M.CTRL_DEST" ).append("\n"); 
		query.append("                        	AND D.CTRL_LOC_ACCT_CD = DECODE(M.CTRL_DEST_LVL,'T',DECODE(M.CTRL_DEST,'C',SUBSTR(BAR.BKG_DEL_CD,1,2),'L',BAR.BKG_DEL_CD),DECODE(M.CTRL_DEST,'C',SUBSTR(BAR.BKG_POD_CD,1,2),'L',BAR.BKG_POD_CD))" ).append("\n"); 
		query.append("                	),'XXXXX')  " ).append("\n"); 
		query.append("            ELSE" ).append("\n"); 
		query.append("            	'XXXXX'" ).append("\n"); 
		query.append("            END AS DEL_CD," ).append("\n"); 
		query.append("            CASE WHEN M.CTRL_ACCOUNT = 'Y' THEN" ).append("\n"); 
		query.append("            	NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                	FROM SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("                	WHERE P.RLANE_CD                           = D.RLANE_CD" ).append("\n"); 
		query.append("                	AND SPC_GET_REP_TRD_FNC(P.RLANE_CD)      = D.TRD_CD" ).append("\n"); 
		query.append("                	AND SPC_GET_REP_SUB_TRD_FNC(P.RLANE_CD)  = D.SUB_TRD_CD" ).append("\n"); 
		query.append("                	AND P.SKD_DIR_CD                         = D.DIR_CD " ).append("\n"); 
		query.append("                	AND D.ALOC_CTRL_TP_CD                    = 'A'  " ).append("\n"); 
		query.append("                	AND D.ALOC_CTRL_DTL_CD  = BAR.CUST_CNT_CD ||LPAD(BAR.CUST_SEQ,6,'0')                                        " ).append("\n"); 
		query.append("                 	),'XX999999')   " ).append("\n"); 
		query.append("            ELSE" ).append("\n"); 
		query.append("            	'XX999999'" ).append("\n"); 
		query.append("            END AS ACCOUNT_CD" ).append("\n"); 
		query.append("	FROM SPC_BKG_AVG_REV BAR," ).append("\n"); 
		query.append("             REP_VVDS        P  ," ).append("\n"); 
		query.append("             (SELECT DISTINCT DENSE_RANK() OVER (ORDER BY COST_YRWK) AS RNUM," ).append("\n"); 
		query.append("                     COST_YRWK" ).append("\n"); 
		query.append("              FROM SPC_BKG_AVG_REV" ).append("\n"); 
		query.append("             ) T," ).append("\n"); 
		query.append("             -- 2014.08.05 추가" ).append("\n"); 
		query.append("             (SELECT DIR_CD ," ).append("\n"); 
		query.append("              	     CTRL_USA ," ).append("\n"); 
		query.append("                     CTRL_ACCOUNT," ).append("\n"); 
		query.append("                     CTRL_DEST, -- C = COUNTRY, L = LOCATION" ).append("\n"); 
		query.append("                     CTRL_DEST_LVL -- D = BKG_POD, T = BKG_DEL  " ).append("\n"); 
		query.append("              	FROM BASE" ).append("\n"); 
		query.append("              ) M " ).append("\n"); 
		query.append("     	WHERE BAR.COST_YRWK   = T.COST_YRWK" ).append("\n"); 
		query.append("       	  AND BAR.OFC_KND_CD IN ('1', '3')" ).append("\n"); 
		query.append("       	  AND BAR.RLANE_CD    = P.RLANE_CD" ).append("\n"); 
		query.append("          AND BAR.DIR_CD      = P.DIR_CD" ).append("\n"); 
		query.append("          AND BAR.TRD_CD <> 'IAS'" ).append("\n"); 
		query.append("          AND BAR.DIR_CD      = M.DIR_CD" ).append("\n"); 
		query.append("          AND BAR.POD_YD_CD <> '00000' " ).append("\n"); 
		query.append("	) WK_CMB_BASE" ).append("\n"); 
		query.append("	GROUP BY GROUPING SETS (" ).append("\n"); 
		query.append("                             (RNUM,COST_YRWK,TS_FLG,IOC_CD,SLS_OFC_CD,US_MOD, ACCOUNT_CD,POL_YD_CD,POD_YD_CD,DEL_CD)," ).append("\n"); 
		query.append("                             (RNUM,COST_YRWK,TS_FLG,IOC_CD,SLS_OFC_CD,US_MOD, ACCOUNT_CD,POL_YD_CD,POD_YD_CD)," ).append("\n"); 
		query.append("                             (RNUM,COST_YRWK,TS_FLG,IOC_CD,SLS_OFC_CD,US_MOD, ACCOUNT_CD,POL_YD_CD)," ).append("\n"); 
		query.append("                             (RNUM,COST_YRWK,TS_FLG,IOC_CD,SLS_OFC_CD,US_MOD, ACCOUNT_CD)," ).append("\n"); 
		query.append("                             (RNUM,COST_YRWK,TS_FLG,IOC_CD,SLS_OFC_CD,US_MOD)," ).append("\n"); 
		query.append("                             (RNUM,COST_YRWK,TS_FLG,IOC_CD,SLS_OFC_CD)" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append(")," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("--IAS SECTOR 판매 활성화를 위한 POL-POD PAIR 로직 END" ).append("\n"); 
		query.append("ALL_DATA AS (" ).append("\n"); 
		query.append("    SELECT MAX(TRD_CD)     AS TRD_CD    ," ).append("\n"); 
		query.append("           MAX(SUB_TRD_CD) AS SUB_TRD_CD," ).append("\n"); 
		query.append("           U.BASE_RHQ_CD," ).append("\n"); 
		query.append("           U.RHQ_CD     ," ).append("\n"); 
		query.append("           U.IOC_CD     ," ).append("\n"); 
		query.append("           U.OFC_CD     ," ).append("\n"); 
		query.append("           U.US_MOD     ," ).append("\n"); 
		query.append("           U.ACCOUNT_CD ," ).append("\n"); 
		query.append("           U.POL_CD     ," ).append("\n"); 
		query.append("           U.POD_CD     ," ).append("\n"); 
		query.append("           U.DEL_CD     ," ).append("\n"); 
		query.append("           U.POL_SEQ    ," ).append("\n"); 
		query.append("           U.POD_SEQ    ," ).append("\n"); 
		query.append("           SUM(U.BKG_QUOTA) AS BKG_QUOTA," ).append("\n"); 
		query.append("           SUM(U.BKG_QTA_CMB) AS BKG_QTA_CMB," ).append("\n"); 
		query.append("           SUM(U.CMB1) AS CMB1  ," ).append("\n"); 
		query.append("           SUM(CMB2)   AS CMB2  ," ).append("\n"); 
		query.append("           SUM(FC_TEU) AS FC_TEU," ).append("\n"); 
		query.append("           SUM(FC_20)  AS FC_20 ," ).append("\n"); 
		query.append("           SUM(FC_40)  AS FC_40 ," ).append("\n"); 
		query.append("           SUM(FC_HC)  AS FC_HC ," ).append("\n"); 
		query.append("           SUM(FC_45)  AS FC_45 ," ).append("\n"); 
		query.append("           SUM(FC_53)  AS FC_53 ," ).append("\n"); 
		query.append("           SUM(FC_RF)  AS FC_RF ," ).append("\n"); 
		query.append("           SUM(FC_WGT) AS FC_WGT," ).append("\n"); 
		query.append("           SUM(AP_TEU) AS AP_TEU," ).append("\n"); 
		query.append("           SUM(AP_20)  AS AP_20 ," ).append("\n"); 
		query.append("           SUM(AP_40)  AS AP_40 ," ).append("\n"); 
		query.append("           SUM(AP_HC)  AS AP_HC ," ).append("\n"); 
		query.append("           SUM(AP_45)  AS AP_45 ," ).append("\n"); 
		query.append("           SUM(AP_53)  AS AP_53 ," ).append("\n"); 
		query.append("           SUM(AP_RF)  AS AP_RF ," ).append("\n"); 
		query.append("           SUM(AP_WGT) AS AP_WGT," ).append("\n"); 
		query.append("           SUM(BT_TEU) AS BT_TEU," ).append("\n"); 
		query.append("           SUM(BT_20)  AS BT_20 ," ).append("\n"); 
		query.append("           SUM(BT_40)  AS BT_40 ," ).append("\n"); 
		query.append("           SUM(BT_HC)  AS BT_HC ," ).append("\n"); 
		query.append("           SUM(BT_45)  AS BT_45 ," ).append("\n"); 
		query.append("           SUM(BT_53)  AS BT_53 ," ).append("\n"); 
		query.append("           SUM(BT_RF)  AS BT_RF ," ).append("\n"); 
		query.append("           SUM(BT_WGT) AS BT_WGT, SUM(BKG_VOL_VGM) AS BKG_VOL_VGM,SUM(BKG_WGT_VGM) AS BKG_WGT_VGM," ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           SUM(BS_TEU) AS BS_TEU, --2015.04.30 KIMSW" ).append("\n"); 
		query.append("           SUM(BS_WGT) AS BS_WGT, --2015.04.30 KIMSW" ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           SUM(CM_OP)  AS CM_OP ,   " ).append("\n"); 
		query.append("           SUM(CM_OC)  AS CM_OC ,   " ).append("\n"); 
		query.append("           SUM(CM_VL)  AS CM_VL ," ).append("\n"); 
		query.append("           SUM(DECODE(FLG, 103, 1, 203, 1, 0)) AS AP_MD," ).append("\n"); 
		query.append("           PAST," ).append("\n"); 
		query.append("           SUM(FC_D2)          AS FC_D2  ," ).append("\n"); 
		query.append("           SUM(FC_D4)          AS FC_D4  ," ).append("\n"); 
		query.append("           SUM(FC_RD)          AS FC_RD  ," ).append("\n"); 
		query.append("           SUM(BT_D2)          AS BT_D2  ," ).append("\n"); 
		query.append("           SUM(BT_D4)          AS BT_D4  ," ).append("\n"); 
		query.append("           SUM(BT_RD)          AS BT_RD  ," ).append("\n"); 
		query.append("           SUM(AP_D2)          AS AP_D2  ," ).append("\n"); 
		query.append("           SUM(AP_D4)          AS AP_D4  ," ).append("\n"); 
		query.append("           SUM(AP_RD)          AS AP_RD  ," ).append("\n"); 
		query.append("           DECODE(POD_CD, '00000', MAX(CFM_FLG)) AS CFM_FLG," ).append("\n"); 
		query.append("           MAX(SPC_CTRL_ALOC_RMK)     AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("           MAX(SPC_CTRL_ALOC_POL_RMK) AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("           MAX(SPC_CTRL_ALOC_POD_RMK) AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("      FROM (" ).append("\n"); 
		query.append("              -- Trunk Forecast" ).append("\n"); 
		query.append("              SELECT 101 AS FLG," ).append("\n"); 
		query.append("                     T.TRD_CD    ," ).append("\n"); 
		query.append("                     T.SUB_TRD_CD," ).append("\n"); 
		query.append("                     B.RHQ_CD     AS BASE_RHQ_CD," ).append("\n"); 
		query.append("                     T.SLS_RHQ_CD AS RHQ_CD     ," ).append("\n"); 
		query.append("                     DECODE(T.IOC_TS_CD, 'O', 'OCN', 'I', 'IPC', '') AS IOC_CD," ).append("\n"); 
		query.append("                     T.SLS_RGN_OFC_CD AS OFC_CD," ).append("\n"); 
		query.append("                     -- 2014.08.09" ).append("\n"); 
		query.append("                     CASE WHEN M.CTRL_USA = 'Y' THEN" ).append("\n"); 
		query.append("                        DECODE(NVL(T.USA_BKG_MOD_CD, 'OTH'), 'OTH', 'OTHERS', T.USA_BKG_MOD_CD)" ).append("\n"); 
		query.append("                     ELSE" ).append("\n"); 
		query.append("                        'OTHERS'" ).append("\n"); 
		query.append("                     END AS US_MOD," ).append("\n"); 
		query.append("                     -- 2015.03.27" ).append("\n"); 
		query.append("                     CASE WHEN M.CTRL_ACCOUNT = 'Y' THEN" ).append("\n"); 
		query.append("                        NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                               FROM SPC_ALOC_LANE_CTRL_OPT_DTL D," ).append("\n"); 
		query.append("		       	       	            SPC_ALOC_LANE_CTRL_OFC OFC" ).append("\n"); 
		query.append("                              WHERE D.RLANE_CD          = M.RLANE_CD" ).append("\n"); 
		query.append("                                AND D.TRD_CD            = SPC_GET_REP_TRD_FNC(M.RLANE_CD) " ).append("\n"); 
		query.append("                                AND D.SUB_TRD_CD        = SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                AND D.DIR_CD            = M.SKD_DIR_CD" ).append("\n"); 
		query.append("                                AND D.ALOC_CTRL_TP_CD   = 'A'" ).append("\n"); 
		query.append("                                -- 2015.02.16 control office관련 setting 추가" ).append("\n"); 
		query.append("                                AND D.RLANE_CD          = OFC.RLANE_CD" ).append("\n"); 
		query.append("                                AND D.TRD_CD            = OFC.TRD_CD" ).append("\n"); 
		query.append("                                AND D.SUB_TRD_CD        = OFC.SUB_TRD_CD" ).append("\n"); 
		query.append("                                AND D.DIR_CD            = OFC.DIR_CD " ).append("\n"); 
		query.append("                                AND D.ALOC_CTRL_TP_CD   = OFC.ALOC_CTRL_TP_CD " ).append("\n"); 
		query.append("                                AND D.CTRL_LOC_ACCT_CD  = OFC.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                                AND OFC.OFC_CD          = DECODE(IOC_TS_CD, 'T', DECODE(M.OFC_CD, T.SLS_RHQ_CD, T.SLS_RGN_OFC_CD, T.SLS_RHQ_CD), T.SLS_RGN_OFC_CD)" ).append("\n"); 
		query.append("                                AND D.ALOC_CTRL_DTL_CD  = T.CUST_CNT_CD||LPAD(T.CUST_SEQ,6,'0')                                        " ).append("\n"); 
		query.append("                         ),'OTHERS')" ).append("\n"); 
		query.append("                     ELSE" ).append("\n"); 
		query.append("                        'OTHERS'" ).append("\n"); 
		query.append("                     END AS ACCOUNT_CD," ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("--                     CASE WHEN M.CTRL_ACCOUNT = 'Y' THEN" ).append("\n"); 
		query.append("--                        NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("--                               FROM SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("--                              WHERE M.RLANE_CD                           = D.RLANE_CD" ).append("\n"); 
		query.append("--                                AND SPC_GET_REP_TRD_FNC(M.RLANE_CD)      = D.TRD_CD" ).append("\n"); 
		query.append("--                                AND SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD)  = D.SUB_TRD_CD" ).append("\n"); 
		query.append("--                                AND M.SKD_DIR_CD                         = D.DIR_CD " ).append("\n"); 
		query.append("--                                AND D.ALOC_CTRL_TP_CD                    = 'A'  " ).append("\n"); 
		query.append("--                                AND D.ALOC_CTRL_DTL_CD                   = T.CUST_CNT_CD ||LPAD(T.CUST_SEQ,6,'0')                                        " ).append("\n"); 
		query.append("--                     ),'OTHERS')" ).append("\n"); 
		query.append("--                     ELSE" ).append("\n"); 
		query.append("--                        'OTHERS'" ).append("\n"); 
		query.append("--                     END AS ACCOUNT_CD," ).append("\n"); 
		query.append("                     B.POL_CD ," ).append("\n"); 
		query.append("                     B.POD_CD ," ).append("\n"); 
		query.append("                     CASE WHEN M.CTRL_DEST <> 'N' THEN	                                                      " ).append("\n"); 
		query.append("                        NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                               FROM SPC_ALOC_LANE_CTRL_OPT_DTL D," ).append("\n"); 
		query.append("									SPC_ALOC_LANE_CTRL_OFC OFC" ).append("\n"); 
		query.append("                              WHERE D.RLANE_CD           = M.RLANE_CD" ).append("\n"); 
		query.append("                                AND D.TRD_CD             = SPC_GET_REP_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                AND D.SUB_TRD_CD         = SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                AND D.DIR_CD             = M.SKD_DIR_CD" ).append("\n"); 
		query.append("                                AND D.ALOC_CTRL_TP_CD    = M.CTRL_DEST" ).append("\n"); 
		query.append("                                -- 2015.02.16 control office관련 setting 추가" ).append("\n"); 
		query.append("                                AND D.RLANE_CD			= OFC.RLANE_CD" ).append("\n"); 
		query.append("                                AND D.TRD_CD            = OFC.TRD_CD" ).append("\n"); 
		query.append("                                AND D.SUB_TRD_CD        = OFC.SUB_TRD_CD" ).append("\n"); 
		query.append("                                AND D.DIR_CD            = OFC.DIR_CD " ).append("\n"); 
		query.append("                                AND D.ALOC_CTRL_TP_CD	= OFC.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("                                AND D.CTRL_LOC_ACCT_CD  = OFC.CTRL_LOC_ACCT_CD " ).append("\n"); 
		query.append("                                AND OFC.OFC_CD          = DECODE(IOC_TS_CD, 'T', DECODE(M.OFC_CD, T.SLS_RHQ_CD, T.SLS_RGN_OFC_CD, T.SLS_RHQ_CD), T.SLS_RGN_OFC_CD)" ).append("\n"); 
		query.append("                                AND DECODE(M.CTRL_DEST, 'E', D.CTRL_LOC_ACCT_CD, 'G', D.ALOC_CTRL_DTL_CD) = (SELECT A.ECC_CD" ).append("\n"); 
		query.append("                                                                                                               FROM MDM_EQ_ORZ_CHT A,  " ).append("\n"); 
		query.append("                                                                                                                    MDM_LOCATION B " ).append("\n"); 
		query.append("                                                                                                              WHERE B.LOC_CD = DECODE(M.CTRL_DEST_LVL,'T', T.DEST_LOC_CD, SUBSTR(T.POD_YD_CD, 1, 5))" ).append("\n"); 
		query.append("                                                                                                                AND A.SCC_CD = B.SCC_CD" ).append("\n"); 
		query.append("                                                                                                            )" ).append("\n"); 
		query.append("                        ),'OTHERS')" ).append("\n"); 
		query.append("                     ELSE" ).append("\n"); 
		query.append("                        'OTHERS'" ).append("\n"); 
		query.append("                     END AS DEL_CD," ).append("\n"); 
		query.append("--                     CASE WHEN M.CTRL_DEST <> 'N' THEN	                                                      " ).append("\n"); 
		query.append("--                                       NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("--                                              FROM SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("--                                             WHERE M.RLANE_CD         = D.RLANE_CD" ).append("\n"); 
		query.append("--                                               AND SPC_GET_REP_TRD_FNC(M.RLANE_CD)     = D.TRD_CD" ).append("\n"); 
		query.append("--                                               AND SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD) = D.SUB_TRD_CD" ).append("\n"); 
		query.append("--                                               AND M.SKD_DIR_CD       = D.DIR_CD " ).append("\n"); 
		query.append("--                                               AND D.ALOC_CTRL_TP_CD  = M.CTRL_DEST" ).append("\n"); 
		query.append("--                                               AND D.CTRL_LOC_ACCT_CD = DECODE(M.CTRL_DEST_LVL, 'T', DECODE(M.CTRL_DEST, 'C', SUBSTR(T.DEST_LOC_CD,1,2), 'L', T.DEST_LOC_CD, 'E', " ).append("\n"); 
		query.append("--                                                                                                                                                                (SELECT A.ECC_CD" ).append("\n"); 
		query.append("--                                                                                                                                                                   FROM MDM_EQ_ORZ_CHT A,  " ).append("\n"); 
		query.append("--                                                                                                                                                                        MDM_LOCATION B " ).append("\n"); 
		query.append("--                                                                                                                                                                  WHERE B.LOC_CD = T.DEST_LOC_CD" ).append("\n"); 
		query.append("--                                                                                                                                                                    AND A.SCC_CD = B.SCC_CD" ).append("\n"); 
		query.append("--                                                                                                                                                                 )) ,  -- 'T': DEL CONTROL " ).append("\n"); 
		query.append("--                                                                                                     DECODE(M.CTRL_DEST, 'C',SUBSTR(T.POD_YD_CD,1,2), 'L', SUBSTR(T.POD_YD_CD, 1, 5), 'E'," ).append("\n"); 
		query.append("--                                                                                                                                                                 (SELECT A.ECC_CD" ).append("\n"); 
		query.append("--                                                                                                                                                                   FROM MDM_EQ_ORZ_CHT A,  " ).append("\n"); 
		query.append("--                                                                                                                                                                        MDM_LOCATION B " ).append("\n"); 
		query.append("--                                                                                                                                                                  WHERE B.LOC_CD = SUBSTR(T.POD_YD_CD, 1, 5)" ).append("\n"); 
		query.append("--                                                                                                                                                                    AND A.SCC_CD = B.SCC_CD" ).append("\n"); 
		query.append("--                                                                                                                                                                 ))" ).append("\n"); 
		query.append("--                                                                                                                                                                 ) -- 'D': POD CONTROL " ).append("\n"); 
		query.append("--                                            ),'OTHERS')" ).append("\n"); 
		query.append("--                     ELSE" ).append("\n"); 
		query.append("--                        'OTHERS'" ).append("\n"); 
		query.append("--                     END AS DEL_CD," ).append("\n"); 
		query.append("                     B.POL_SEQ," ).append("\n"); 
		query.append("                     B.POD_SEQ," ).append("\n"); 
		query.append("                     0 AS BKG_QUOTA," ).append("\n"); 
		query.append("                     0 AS BKG_QTA_CMB," ).append("\n"); 
		query.append("                     0 AS CMB1     ," ).append("\n"); 
		query.append("                     0 AS CMB2     ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_TTL_QTY) AS FC_TEU," ).append("\n"); 
		query.append("                     0 AS FC_20," ).append("\n"); 
		query.append("                     0 AS FC_40," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_40FT_HC_QTY) AS FC_HC ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_45FT_HC_QTY) AS FC_45 ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_53FT_QTY)    AS FC_53 ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_RF_QTY)      AS FC_RF ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_TTL_WGT)     AS FC_WGT," ).append("\n"); 
		query.append("                     0 AS AP_TEU," ).append("\n"); 
		query.append("                     0 AS AP_20 ," ).append("\n"); 
		query.append("                     0 AS AP_40 ," ).append("\n"); 
		query.append("                     0 AS AP_HC ," ).append("\n"); 
		query.append("                     0 AS AP_45 ," ).append("\n"); 
		query.append("                     0 AS AP_53 ," ).append("\n"); 
		query.append("                     0 AS AP_RF ," ).append("\n"); 
		query.append("                     0 AS AP_WGT," ).append("\n"); 
		query.append("                     0 AS BT_TEU," ).append("\n"); 
		query.append("                     0 AS BT_20 ," ).append("\n"); 
		query.append("                     0 AS BT_40 ," ).append("\n"); 
		query.append("                     0 AS BT_HC ," ).append("\n"); 
		query.append("                     0 AS BT_45 ," ).append("\n"); 
		query.append("                     0 AS BT_53 ," ).append("\n"); 
		query.append("                     0 AS BT_RF ," ).append("\n"); 
		query.append("                     0 AS BT_WGT,0 AS BKG_VOL_VGM,0 AS BKG_WGT_VGM," ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                     0 AS BS_TEU, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("                     0 AS BS_WGT, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                     0 AS CM_OP	  ,   " ).append("\n"); 
		query.append("                     0 AS CM_OC   ,   " ).append("\n"); 
		query.append("                     0 AS CM_VL   ," ).append("\n"); 
		query.append("                     B.PAST," ).append("\n"); 
		query.append("                     -- 2014.07.25 컬럼 추가" ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_20FT_DRY_QTY) AS FC_D2  ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_40FT_DRY_QTY) AS FC_D4  ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_RD_QTY) AS FC_RD  ," ).append("\n"); 
		query.append("                     0 AS BT_D2  ," ).append("\n"); 
		query.append("                     0 AS BT_D4  ," ).append("\n"); 
		query.append("                     0 AS BT_RD  ," ).append("\n"); 
		query.append("                     0 AS AP_D2  ," ).append("\n"); 
		query.append("                     0 AS AP_D4  ," ).append("\n"); 
		query.append("                     0 AS AP_RD  ," ).append("\n"); 
		query.append("                     NULL AS CFM_FLG              ," ).append("\n"); 
		query.append("                     NULL AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("                     NULL AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("                     NULL AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("                FROM SPC_DLY_FCAST_CUST T," ).append("\n"); 
		query.append("                     VSL_PORT_SKD       B," ).append("\n"); 
		query.append("                     BASE           M" ).append("\n"); 
		query.append("               WHERE T.RLANE_CD   = B.RLANE_CD" ).append("\n"); 
		query.append("                 AND T.DIR_CD     = B.DIR_CD" ).append("\n"); 
		query.append("                 AND T.VSL_CD     = B.VSL_CD" ).append("\n"); 
		query.append("                 AND T.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND T.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                 AND T.POL_YD_CD  = B.POL_CD" ).append("\n"); 
		query.append("                 AND T.POD_YD_CD  = B.POD_CD" ).append("\n"); 
		query.append("                 AND T.POL_YD_IND_SEQ = B.POL_YD_SEQ" ).append("\n"); 
		query.append("                 AND T.POD_YD_IND_SEQ = B.POD_YD_SEQ" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                 AND (T.SLS_RHQ_CD = B.RHQ_CD OR B.OFC_CONTI = B.POL_CONTI)" ).append("\n"); 
		query.append("                 AND T.IOC_TS_CD IN ('I','O')" ).append("\n"); 
		query.append("--                 AND NVL(T.CFM_TTL_QTY,0) + NVL(T.CFM_TTL_WGT,0) > 0" ).append("\n"); 
		query.append("                 AND NVL(T.CFM_TTL_QTY, 0) + NVL(T.CFM_40FT_HC_QTY, 0) + NVL(T.CFM_45FT_HC_QTY, 0) + NVL(T.CFM_53FT_QTY, 0) + NVL(T.CFM_TTL_WGT, 0) + NVL(T.CFM_RF_QTY,0)  > 0" ).append("\n"); 
		query.append("              " ).append("\n"); 
		query.append("	      -- Allocation" ).append("\n"); 
		query.append("              UNION ALL" ).append("\n"); 
		query.append("              SELECT 103 AS FLG," ).append("\n"); 
		query.append("                     D.TRD_CD    ," ).append("\n"); 
		query.append("                     D.SUB_TRD_CD," ).append("\n"); 
		query.append("                     B.RHQ_CD     AS BASE_RHQ_CD," ).append("\n"); 
		query.append("                     D.SLS_RHQ_CD AS RHQ_CD     ," ).append("\n"); 
		query.append("                     DECODE(D.MNL_FLG, 'Y', 'T-','')||DECODE(D.IOC_CD,'O','OCN','I','IPC','') AS IOC_CD," ).append("\n"); 
		query.append("                     D.SLS_RGN_OFC_CD AS OFC_CD," ).append("\n"); 
		query.append("                     -- 2014.08.09 과거 입력 데이타 그대로 보여주므로 OTHERS처리 로직에서 제외" ).append("\n"); 
		query.append("                     DECODE(D.USA_BKG_MOD_CD, 'X', 'OTHERS', 'OTH', 'OTHERS', D.USA_BKG_MOD_CD) AS US_MOD," ).append("\n"); 
		query.append("                     -- 2014.12.04 CTRT_NO 추가 " ).append("\n"); 
		query.append("                     DECODE(D.CTRT_NO||D.CUST_CNT_CD||LPAD(D.CUST_SEQ, 6, '0'), 'XXX999999', 'OTHERS', 'XX999999', 'OTHERS', " ).append("\n"); 
		query.append("                             DECODE(D.CUST_CNT_CD||LPAD(D.CUST_SEQ, 6, '0'), 'XX999999', D.CTRT_NO, D.CUST_CNT_CD||LPAD(D.CUST_SEQ, 6, '0'))) AS ACCOUNT_CD," ).append("\n"); 
		query.append("                     B.POL_CD ," ).append("\n"); 
		query.append("                     B.POD_CD ," ).append("\n"); 
		query.append("                     DECODE(D.DEST_LOC_CD, 'XXXXX', 'OTHERS', D.DEST_LOC_CD) AS DEL_CD," ).append("\n"); 
		query.append("                     B.POL_SEQ," ).append("\n"); 
		query.append("                     B.POD_SEQ," ).append("\n"); 
		query.append("                     0 AS BKG_QUOTA," ).append("\n"); 
		query.append("                     0 AS BKG_QTA_CMB," ).append("\n"); 
		query.append("                     0 AS CMB1     ," ).append("\n"); 
		query.append("                     0 AS CMB2     ," ).append("\n"); 
		query.append("                     0 AS FC_TEU   ," ).append("\n"); 
		query.append("                     0 AS FC_20    ," ).append("\n"); 
		query.append("                     0 AS FC_40    ," ).append("\n"); 
		query.append("                     0 AS FC_HC    ," ).append("\n"); 
		query.append("                     0 AS FC_45    ," ).append("\n"); 
		query.append("                     0 AS FC_53    ," ).append("\n"); 
		query.append("                     0 AS FC_RF    ," ).append("\n"); 
		query.append("                     0 AS FC_WGT   ," ).append("\n"); 
		query.append("                     D.ASGN_TTL_QTY     AS AP_TEU," ).append("\n"); 
		query.append("                     D.ASGN_20FT_QTY    AS AP_20 ," ).append("\n"); 
		query.append("                     D.ASGN_40FT_QTY    AS AP_40 ," ).append("\n"); 
		query.append("                     D.ASGN_40FT_HC_QTY AS AP_HC ," ).append("\n"); 
		query.append("                     D.ASGN_45FT_HC_QTY AS AP_45 ," ).append("\n"); 
		query.append("                     D.ASGN_53FT_QTY    AS AP_53 ," ).append("\n"); 
		query.append("                     D.ASGN_RF_QTY      AS AP_RF ," ).append("\n"); 
		query.append("                     D.ASGN_TTL_WGT     AS AP_WGT," ).append("\n"); 
		query.append("                     0 BT_TEU," ).append("\n"); 
		query.append("                     0 BT_20 ," ).append("\n"); 
		query.append("                     0 BT_40 ," ).append("\n"); 
		query.append("                     0 BT_HC ," ).append("\n"); 
		query.append("                     0 BT_45 ," ).append("\n"); 
		query.append("                     0 BT_53 ," ).append("\n"); 
		query.append("                     0 BT_RF ," ).append("\n"); 
		query.append("                     0 BT_WGT,0 AS BKG_VOL_VGM,0 AS BKG_WGT_VGM," ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                     0 AS BS_TEU, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("                     0 AS BS_WGT, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                     0 AS CM_OP	  ,   " ).append("\n"); 
		query.append("                     0 AS CM_OC   ,   " ).append("\n"); 
		query.append("                     0 AS CM_VL   ,   " ).append("\n"); 
		query.append("                     B.PAST," ).append("\n"); 
		query.append("                     -- 2014.07.25 컬럼 추가" ).append("\n"); 
		query.append("                     0 AS FC_D2  ," ).append("\n"); 
		query.append("                     0 AS FC_D4  ," ).append("\n"); 
		query.append("                     0 AS FC_RD  ," ).append("\n"); 
		query.append("                     0 AS BT_D2  ," ).append("\n"); 
		query.append("                     0 AS BT_D4  ," ).append("\n"); 
		query.append("                     0 AS BT_RD  ," ).append("\n"); 
		query.append("                     D.ASGN_20FT_DRY_QTY AS AP_D2  ," ).append("\n"); 
		query.append("                     D.ASGN_40FT_DRY_QTY AS AP_D4  ," ).append("\n"); 
		query.append("                     D.ASGN_RD_QTY AS AP_RD  ," ).append("\n"); 
		query.append("                     NULL AS CFM_FLG," ).append("\n"); 
		query.append("                     D.SPC_CTRL_ALOC_RMK     AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("                     D.SPC_CTRL_ALOC_POL_RMK AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("                     D.SPC_CTRL_ALOC_POD_RMK AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("                FROM SPC_ALOC_POL_POD D," ).append("\n"); 
		query.append("                     VSL_PORT_SKD     B" ).append("\n"); 
		query.append("               WHERE D.RLANE_CD   = B.RLANE_CD" ).append("\n"); 
		query.append("                 AND D.DIR_CD     = B.DIR_CD" ).append("\n"); 
		query.append("                 AND D.VSL_CD     = B.VSL_CD" ).append("\n"); 
		query.append("                 AND D.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND D.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND D.POL_YD_CD  = B.POL_CD" ).append("\n"); 
		query.append("                 AND D.POD_YD_CD  = B.POD_CD" ).append("\n"); 
		query.append("                 AND D.POL_YD_IND_SEQ = B.POL_YD_SEQ" ).append("\n"); 
		query.append("                 AND D.POD_YD_IND_SEQ = B.POD_YD_SEQ" ).append("\n"); 
		query.append("                 AND (D.SLS_RHQ_CD = B.RHQ_CD OR B.OFC_CONTI = B.POL_CONTI)" ).append("\n"); 
		query.append("                 AND D.TS_FLG     = 'N'" ).append("\n"); 
		query.append("                 AND D.SLS_OFC_CD = D.SLS_RGN_OFC_CD" ).append("\n"); 
		query.append("	      -- Booking" ).append("\n"); 
		query.append("              UNION ALL" ).append("\n"); 
		query.append("              SELECT FLG        ," ).append("\n"); 
		query.append("                     TRD_CD     ," ).append("\n"); 
		query.append("                     SUB_TRD_CD ," ).append("\n"); 
		query.append("                     BASE_RHQ_CD," ).append("\n"); 
		query.append("                     RHQ_CD     ," ).append("\n"); 
		query.append("                     IOC_CD     ," ).append("\n"); 
		query.append("                     OFC_CD     ," ).append("\n"); 
		query.append("                     US_MOD     ," ).append("\n"); 
		query.append("                     ACCOUNT_CD ," ).append("\n"); 
		query.append("                     POL_CD     ," ).append("\n"); 
		query.append("                     POD_CD     ," ).append("\n"); 
		query.append("                     DEL_CD     ," ).append("\n"); 
		query.append("                     POL_SEQ    ," ).append("\n"); 
		query.append("                     POD_SEQ    ," ).append("\n"); 
		query.append("                     BKG_QUOTA  ," ).append("\n"); 
		query.append("                     BKG_QTA_CMB," ).append("\n"); 
		query.append("                     CMB1       ," ).append("\n"); 
		query.append("                     CMB2       ," ).append("\n"); 
		query.append("                     SUM(FC_TEU) AS FC_TEU," ).append("\n"); 
		query.append("                     SUM(FC_20)  AS FC_20 ," ).append("\n"); 
		query.append("                     SUM(FC_40)  AS FC_40 ," ).append("\n"); 
		query.append("                     SUM(FC_HC)  AS FC_HC ," ).append("\n"); 
		query.append("                     SUM(FC_45)  AS FC_45 ," ).append("\n"); 
		query.append("                     SUM(FC_53)  AS FC_53 ," ).append("\n"); 
		query.append("                     SUM(FC_RF)  AS FC_RF ," ).append("\n"); 
		query.append("                     SUM(FC_WGT) AS FC_WGT," ).append("\n"); 
		query.append("                     AP_TEU," ).append("\n"); 
		query.append("                     AP_20 ," ).append("\n"); 
		query.append("                     AP_40 ," ).append("\n"); 
		query.append("                     AP_HC ," ).append("\n"); 
		query.append("                     AP_45 ," ).append("\n"); 
		query.append("                     AP_53 ," ).append("\n"); 
		query.append("                     AP_RF ," ).append("\n"); 
		query.append("                     AP_WGT," ).append("\n"); 
		query.append("                     SUM(BT_TEU) AS BT_TEU," ).append("\n"); 
		query.append("                     SUM(BT_20)  AS BT_20 ," ).append("\n"); 
		query.append("                     SUM(BT_40)  AS BT_40 ," ).append("\n"); 
		query.append("                     SUM(BT_HC)  AS BT_HC ," ).append("\n"); 
		query.append("                     SUM(BT_45)  AS BT_45 ," ).append("\n"); 
		query.append("                     SUM(BT_53)  AS BT_53 ," ).append("\n"); 
		query.append("                     SUM(BT_RF)  AS BT_RF ," ).append("\n"); 
		query.append("                     SUM(BT_WGT) AS BT_WGT,SUM(BKG_VOL_VGM) AS BKG_VOL_VGM,SUM(BKG_WGT_VGM) AS BKG_WGT_VGM," ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                     SUM(DECODE(NVL(ALOC_STS_CD, 'X'), 'S', BT_TEU, 'A' , BT_TEU)) AS BS_TEU," ).append("\n"); 
		query.append("                     SUM(DECODE(NVL(ALOC_STS_CD, 'X'), 'S', BT_WGT, 'A' , BT_WGT)) AS BS_WGT," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                     SUM(CM_OP) AS CM_OP  ,   " ).append("\n"); 
		query.append("                     SUM(CM_OC) AS CM_OC  ,   " ).append("\n"); 
		query.append("                     SUM(CM_VL) AS CM_VL  ,  " ).append("\n"); 
		query.append("                     PAST   ," ).append("\n"); 
		query.append("                     -- 2014.07.25 컬럼 추가" ).append("\n"); 
		query.append("                     SUM(FC_D2) AS FC_D2  ," ).append("\n"); 
		query.append("                     SUM(FC_D4) AS FC_D4  ," ).append("\n"); 
		query.append("                     SUM(FC_RD) AS FC_RD  ," ).append("\n"); 
		query.append("                     SUM(BT_D2) AS BT_D2  ," ).append("\n"); 
		query.append("                     SUM(BT_D4) AS BT_D4  ," ).append("\n"); 
		query.append("                     SUM(BT_RD) AS BT_RD  ," ).append("\n"); 
		query.append("                     0 AS AP_D2  ," ).append("\n"); 
		query.append("                     0 AS AP_D4  ," ).append("\n"); 
		query.append("                     0 AS AP_RD  ," ).append("\n"); 
		query.append("                     CFM_FLG," ).append("\n"); 
		query.append("                     SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("                     SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("                     SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("                FROM (" ).append("\n"); 
		query.append("                        SELECT 104 AS FLG," ).append("\n"); 
		query.append("                               TRD_CD    ," ).append("\n"); 
		query.append("                               SUB_TRD_CD," ).append("\n"); 
		query.append("                               BASE_RHQ_CD," ).append("\n"); 
		query.append("                               RHQ_CD     ," ).append("\n"); 
		query.append("                               IOC_CD," ).append("\n"); 
		query.append("                               OFC_CD," ).append("\n"); 
		query.append("                               US_MOD," ).append("\n"); 
		query.append("                               ACCOUNT_CD," ).append("\n"); 
		query.append("                               POL_CD," ).append("\n"); 
		query.append("                               POD_CD," ).append("\n"); 
		query.append("                               DEL_CD," ).append("\n"); 
		query.append("                               POL_SEQ," ).append("\n"); 
		query.append("                               POD_SEQ," ).append("\n"); 
		query.append("                               0 AS BKG_QUOTA," ).append("\n"); 
		query.append("                               0 AS BKG_QTA_CMB," ).append("\n"); 
		query.append("                               0 AS CMB1     ," ).append("\n"); 
		query.append("                               0 AS CMB2     ," ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL,  1, 14), 0))) AS FC_TEU," ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL, 15, 14), 0))) AS FC_20 ," ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL, 29, 14), 0))) AS FC_40 ," ).append("\n"); 
		query.append("                               --2014.07.25" ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL, 43, 14), 0))) AS FC_D2 ," ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL, 57, 14), 0))) AS FC_D4 ," ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL, 71, 14), 0))) AS FC_HC ," ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL, 85, 14), 0))) AS FC_45 ," ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL, 99, 14), 0))) AS FC_53 ," ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL, 113, 14), 0))) AS FC_RF ," ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL, 127, 14), 0))) AS FC_RD ," ).append("\n"); 
		query.append("                               DECODE(PAST, 'N', 0, TO_NUMBER(NVL(SUBSTR(VAL, 141, 14), 0))) AS FC_WGT ," ).append("\n"); 
		query.append("                               0 AS AP_TEU," ).append("\n"); 
		query.append("                               0 AS AP_20 ," ).append("\n"); 
		query.append("                               0 AS AP_40 ," ).append("\n"); 
		query.append("                               0 AS AP_HC ," ).append("\n"); 
		query.append("                               0 AS AP_45 ," ).append("\n"); 
		query.append("                               0 AS AP_53 ," ).append("\n"); 
		query.append("                               0 AS AP_RF ," ).append("\n"); 
		query.append("                               0 AS AP_WGT," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL,  1, 14), 0)) AS BT_TEU," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL, 15, 14), 0)) AS BT_20 ," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL, 29, 14), 0)) AS BT_40 ," ).append("\n"); 
		query.append("                               --2014.07.25" ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL, 43, 14), 0)) AS BT_D2 ," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL, 57, 14), 0)) AS BT_D4 ," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL, 71, 14), 0)) AS BT_HC ," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL, 85, 14), 0)) AS BT_45 ," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL, 99, 14), 0)) AS BT_53 ," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL, 113, 14), 0)) AS BT_RF ," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL, 127, 14), 0)) AS BT_RD ," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(VAL, 141, 14), 0)) AS BT_WGT ,BKG_VOL_VGM,BKG_WGT_VGM," ).append("\n"); 
		query.append("                               " ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(CM_VAL,  1, 10), 0)) AS CM_OP," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(CM_VAL, 11, 10), 0)) AS CM_OC," ).append("\n"); 
		query.append("                               TO_NUMBER(NVL(SUBSTR(CM_VAL, 21, 10), 0)) AS CM_VL," ).append("\n"); 
		query.append("                               PAST," ).append("\n"); 
		query.append("                               NULL AS CFM_FLG," ).append("\n"); 
		query.append("                               NULL AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("                               NULL AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("                               NULL AS SPC_CTRL_ALOC_POD_RMK," ).append("\n"); 
		query.append("                               ALOC_STS_CD" ).append("\n"); 
		query.append("                          FROM (" ).append("\n"); 
		query.append("                                   SELECT  " ).append("\n"); 
		query.append("                                           D.TRD_CD    ," ).append("\n"); 
		query.append("                                           D.SUB_TRD_CD," ).append("\n"); 
		query.append("                                           B.RHQ_CD     AS BASE_RHQ_CD," ).append("\n"); 
		query.append("                                           V.N2ND_PRNT_OFC_CD AS RHQ_CD     ," ).append("\n"); 
		query.append("                                           DECODE(BV.VSL_PRE_PST_CD, 'T', DECODE(B.IOC_CD, 'O', 'OCN', 'I', 'IPC', ''), 'T/S') AS IOC_CD," ).append("\n"); 
		query.append("                                           V.N4TH_PRNT_OFC_CD AS OFC_CD," ).append("\n"); 
		query.append("                                           -- 2014.08.05" ).append("\n"); 
		query.append("                                           CASE WHEN M.CTRL_USA = 'Y' AND (SUBSTR(BKG.POL_CD,1,2) IN ('US','CA') OR SUBSTR(BKG.POD_CD,1,2) IN ('US','CA')) THEN" ).append("\n"); 
		query.append("                                                NVL(SPC_USA_MODE_FNC(BKG.RCV_TERM_CD, BKG.DE_TERM_CD, BKG.POL_CD, BKG.POL_CD, BKG.POD_CD, BKG.DEL_CD),'OTHERS') " ).append("\n"); 
		query.append("                                           ELSE" ).append("\n"); 
		query.append("                                               'OTHERS'" ).append("\n"); 
		query.append("                                           END AS US_MOD," ).append("\n"); 
		query.append("                                           CASE WHEN M.CTRL_ACCOUNT = 'Y' THEN" ).append("\n"); 
		query.append("							                NVL((" ).append("\n"); 
		query.append("                                            -- A : Individul B: Actual C: Commodity" ).append("\n"); 
		query.append("									        SELECT DISTINCT(D.CTRL_LOC_ACCT_CD)" ).append("\n"); 
		query.append("                                                          FROM ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("                                                         WHERE D.RLANE_CD           = M.RLANE_CD " ).append("\n"); 
		query.append("                                                           AND D.TRD_CD             = SPC_GET_REP_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                                           AND D.SUB_TRD_CD         = SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                                           AND D.DIR_CD             = M.SKD_DIR_CD" ).append("\n"); 
		query.append("                                                           AND D.ALOC_CTRL_TP_CD    IN ('A','B','C') " ).append("\n"); 
		query.append("                                                           -- 2015.02.16 control office관련 setting 추가" ).append("\n"); 
		query.append("                                                           -- 2015.04.06 office가 입력되지 않은 case는 전체 office에 걸리도록 함." ).append("\n"); 
		query.append("                                                           AND (( SPC_SCR_OFC_CONV_FNC(BKG.OB_SLS_OFC_CD) IN " ).append("\n"); 
		query.append("                                                                  (SELECT OFC.OFC_CD" ).append("\n"); 
		query.append("                                                                     FROM SPC_ALOC_LANE_CTRL_OFC OFC" ).append("\n"); 
		query.append("                                                                    WHERE D.RLANE_CD           = OFC.RLANE_CD" ).append("\n"); 
		query.append("                                                                      AND D.TRD_CD             = OFC.TRD_CD" ).append("\n"); 
		query.append("                                                                      AND D.SUB_TRD_CD         = OFC.SUB_TRD_CD" ).append("\n"); 
		query.append("                                                                      AND D.DIR_CD             = OFC.DIR_CD " ).append("\n"); 
		query.append("                                                                      AND D.ALOC_CTRL_TP_CD    = OFC.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("                                                                      AND D.CTRL_LOC_ACCT_CD   = OFC.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                                                                ))" ).append("\n"); 
		query.append("                                                                OR ( NOT EXISTS " ).append("\n"); 
		query.append("                                                                 ( SELECT 1" ).append("\n"); 
		query.append("                                                                     FROM SPC_ALOC_LANE_CTRL_OFC OFC_ALL" ).append("\n"); 
		query.append("                                                                    WHERE D.RLANE_CD           = OFC_ALL.RLANE_CD" ).append("\n"); 
		query.append("                                                                    AND D.TRD_CD             = OFC_ALL.TRD_CD" ).append("\n"); 
		query.append("                                                                    AND D.SUB_TRD_CD         = OFC_ALL.SUB_TRD_CD" ).append("\n"); 
		query.append("                                                                    AND D.DIR_CD             = OFC_ALL.DIR_CD " ).append("\n"); 
		query.append("                                                                    AND D.ALOC_CTRL_TP_CD    = OFC_ALL.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("                                                                    AND D.CTRL_LOC_ACCT_CD   = OFC_ALL.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                                                                    )" ).append("\n"); 
		query.append("                                                                ))" ).append("\n"); 
		query.append("                                                           -- 2015.02.16 add end" ).append("\n"); 
		query.append("                                                           AND (D.CTRL_LOC_ACCT_CD = BKG.SC_NO OR D.CTRL_LOC_ACCT_CD = BKG.RFA_NO)" ).append("\n"); 
		query.append("                                                           AND D.ALOC_CTRL_DTL_CD  = DECODE(D.ALOC_CTRL_TP_CD, 'A', BKG.CTRT_CUST_CNT_CD ||LPAD(BKG.CTRT_CUST_SEQ,6,'0')," ).append("\n"); 
		query.append("                                                                                                               'B', BKG.AGMT_ACT_CNT_CD ||LPAD(BKG.AGMT_ACT_CUST_SEQ,6,'0')," ).append("\n"); 
		query.append("                                                                                                               'C', BKG.CMDT_CD)                                     " ).append("\n"); 
		query.append("                                                   ),'OTHERS')" ).append("\n"); 
		query.append("                                            ELSE" ).append("\n"); 
		query.append("                                                    'OTHERS'" ).append("\n"); 
		query.append("                                            END AS ACCOUNT_CD," ).append("\n"); 
		query.append("                                           B.POL_CD ," ).append("\n"); 
		query.append("                                           B.POD_CD ," ).append("\n"); 
		query.append("                                           CASE WHEN M.CTRL_DEST <> 'N' THEN	                                                      " ).append("\n"); 
		query.append("                                                NVL((" ).append("\n"); 
		query.append("                                                    SELECT DISTINCT(D.CTRL_LOC_ACCT_CD)" ).append("\n"); 
		query.append("                                                      FROM SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("                                                     WHERE D.RLANE_CD			= M.RLANE_CD" ).append("\n"); 
		query.append("                                                       AND D.TRD_CD				= SPC_GET_REP_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                                       AND D.SUB_TRD_CD			= SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                                       AND D.DIR_CD 			= M.SKD_DIR_CD       " ).append("\n"); 
		query.append("                                                       AND D.ALOC_CTRL_TP_CD	= M.CTRL_DEST" ).append("\n"); 
		query.append("                                                       -- 2015.02.16 control office관련 setting 추가" ).append("\n"); 
		query.append("                                                       -- 2015.04.06 office가 입력되지 않은 case는 전체 office에 걸리도록 함." ).append("\n"); 
		query.append("                                                       AND (( SPC_SCR_OFC_CONV_FNC(BKG.OB_SLS_OFC_CD) IN " ).append("\n"); 
		query.append("                                                              (SELECT OFC.OFC_CD" ).append("\n"); 
		query.append("                                                                 FROM SPC_ALOC_LANE_CTRL_OFC OFC" ).append("\n"); 
		query.append("                                                                WHERE D.RLANE_CD           = OFC.RLANE_CD" ).append("\n"); 
		query.append("                                                                  AND D.TRD_CD             = OFC.TRD_CD" ).append("\n"); 
		query.append("                                                                  AND D.SUB_TRD_CD         = OFC.SUB_TRD_CD" ).append("\n"); 
		query.append("                                                                  AND D.DIR_CD             = OFC.DIR_CD " ).append("\n"); 
		query.append("                                                                  AND D.ALOC_CTRL_TP_CD    = OFC.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("                                                                  AND D.CTRL_LOC_ACCT_CD   = OFC.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                                                            ))" ).append("\n"); 
		query.append("                                                            OR ( NOT EXISTS " ).append("\n"); 
		query.append("                                                             ( SELECT 1" ).append("\n"); 
		query.append("                                                                 FROM SPC_ALOC_LANE_CTRL_OFC OFC_ALL" ).append("\n"); 
		query.append("                                                                WHERE D.RLANE_CD           = OFC_ALL.RLANE_CD" ).append("\n"); 
		query.append("                                                                AND D.TRD_CD             = OFC_ALL.TRD_CD" ).append("\n"); 
		query.append("                                                                AND D.SUB_TRD_CD         = OFC_ALL.SUB_TRD_CD" ).append("\n"); 
		query.append("                                                                AND D.DIR_CD             = OFC_ALL.DIR_CD " ).append("\n"); 
		query.append("                                                                AND D.ALOC_CTRL_TP_CD    = OFC_ALL.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("                                                                AND D.CTRL_LOC_ACCT_CD   = OFC_ALL.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                                                                )" ).append("\n"); 
		query.append("                                                            ))" ).append("\n"); 
		query.append("                                                       -- ECC GROUP 관련하여 비교 컬럼 변경" ).append("\n"); 
		query.append("                                                       AND DECODE(M.CTRL_DEST, 'E', D.CTRL_LOC_ACCT_CD, 'G', D.ALOC_CTRL_DTL_CD) = (SELECT DECODE(M.CTRL_DEST, 'E', A.ECC_CD, C.LOC_CD)" ).append("\n"); 
		query.append("                                                                                                                                      FROM MDM_EQ_ORZ_CHT A," ).append("\n"); 
		query.append("                                                                                                                                           MDM_LOCATION C " ).append("\n"); 
		query.append("                                                                                                                                     WHERE C.LOC_CD = DECODE(M.CTRL_DEST_LVL,'T',BKG.DEL_CD, BKG.POD_CD)" ).append("\n"); 
		query.append("                                                                                                                                       AND A.SCC_CD = C.SCC_CD)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                ),'OTHERS')" ).append("\n"); 
		query.append("                                            ELSE" ).append("\n"); 
		query.append("                                                'OTHERS'" ).append("\n"); 
		query.append("                                            END AS DEL_CD," ).append("\n"); 
		query.append("                                           B.POL_SEQ," ).append("\n"); 
		query.append("                                           B.POD_SEQ," ).append("\n"); 
		query.append("                                           B.PAST," ).append("\n"); 
		query.append("                                           BKG.BKG_STS_CD," ).append("\n"); 
		query.append("                                           BD.ACT_WGT," ).append("\n"); 
		query.append("                                           BD.WGT_UT_CD," ).append("\n"); 
		query.append("                                           (" ).append("\n"); 
		query.append("                                            SELECT" ).append("\n"); 
		query.append("                                            TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', 1, 2) * Q.OP_CNTR_QTY), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                            || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                            || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '4', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                            --2014.07.22" ).append("\n"); 
		query.append("                                            || TO_CHAR(SUM(DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,2), 'D2', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000') -- 20에 포함되어 있음" ).append("\n"); 
		query.append("				                            || TO_CHAR(SUM(DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,2), 'D4', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000') " ).append("\n"); 
		query.append("                                            || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '5', Q.OP_CNTR_QTY, '9', Q.OP_CNTR_QTY, '8', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')	--R9,R8에 대해서 R5과 동일하게 HC으로 처리되도록 추가" ).append("\n"); 
		query.append("                                            || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '7', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                            || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), 'W', Q.OP_CNTR_QTY, 0) + DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), 'X', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                            || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_TP_FNC(Q.CNTR_TPSZ_CD), 'R', Q.OP_CNTR_QTY - Q.EQ_SUBST_CGO_QTY, 0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                            --2014.07.22" ).append("\n"); 
		query.append("                                            || TO_CHAR(SUM(CASE WHEN Q.CNTR_TPSZ_CD LIKE 'R%' AND Q.EQ_SUBST_CNTR_TPSZ_CD LIKE 'D%' THEN Q.EQ_SUBST_CGO_QTY ELSE 0 END), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                            || TO_CHAR((BD.ACT_WGT * DECODE(BD.WGT_UT_CD, 'LBS', 0.00045, 0.001))" ).append("\n"); 
		query.append("                                                                 + SUM(Q.OP_CNTR_QTY * ( SELECT TS.CNTR_TPSZ_TARE_WGT" ).append("\n"); 
		query.append("                                                                                           FROM MDM_CNTR_TP_SZ TS" ).append("\n"); 
		query.append("                                                                                          WHERE TS.CNTR_TPSZ_CD = Q.CNTR_TPSZ_CD)) * 0.001, 'FM0000000000.000')" ).append("\n"); 
		query.append("                                                FROM BKG_QUANTITY Q" ).append("\n"); 
		query.append("                                               WHERE BKG.BKG_NO      = Q.BKG_NO" ).append("\n"); 
		query.append("                                                 AND Q.OP_CNTR_QTY > 0    " ).append("\n"); 
		query.append("                                           ) AS VAL," ).append("\n"); 
		query.append("                                           BKG.ALOC_STS_CD," ).append("\n"); 
		query.append("							               SPC_GET_OB_MVMT_FNC(BKG.BKG_NO, B.POL_PAST) AS CM_VAL" ).append("\n"); 
		query.append("										  ,(" ).append("\n"); 
		query.append("											SELECT SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Z.CNTR_TPSZ_CD), '2', 1, 2)* Z.OP_CNTR_QTY) " ).append("\n"); 
		query.append("											FROM BKG_QUANTITY Z " ).append("\n"); 
		query.append("											WHERE Z.BKG_NO= BKG.BKG_NO AND OP_CNTR_QTY > 0 " ).append("\n"); 
		query.append("											AND EXISTS ( SELECT 1 FROM BKG_CONTAINER C WHERE C.BKG_NO= Z.BKG_NO AND VGM_WGT>0 AND VGM_WGT IS NOT NULL )" ).append("\n"); 
		query.append("										   ) AS BKG_VOL_VGM	" ).append("\n"); 
		query.append("										,(SELECT SUM(NVL(Z.VGM_WGT,0) * DECODE(Z.VGM_WGT_UT_CD,'LBS',0.00045,0.001)) FROM BKG_CONTAINER Z WHERE Z.BKG_NO= BKG.BKG_NO AND VGM_WGT>0 AND VGM_WGT IS NOT NULL) AS BKG_WGT_VGM" ).append("\n"); 
		query.append("                                   FROM    BKG_BOOKING  BKG," ).append("\n"); 
		query.append("                                           BKG_VVD      BV," ).append("\n"); 
		query.append("                                           BKG_BL_DOC   BD," ).append("\n"); 
		query.append("                                           MDM_DTL_REV_LANE D," ).append("\n"); 
		query.append("                                           VSL_PORT_SKD B," ).append("\n"); 
		query.append("                                           SPC_OFC_LVL  V," ).append("\n"); 
		query.append("                                           BASE M" ).append("\n"); 
		query.append("                                   WHERE   BKG.BKG_NO = BV.BKG_NO" ).append("\n"); 
		query.append("                                     AND   BV.VSL_CD = B.VSL_CD" ).append("\n"); 
		query.append("                                     AND   BV.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                                     AND   BV.SKD_DIR_CD = B.SKD_DIR_CD                                           " ).append("\n"); 
		query.append("                                     AND   BKG.BKG_NO = BD.BKG_NO" ).append("\n"); 
		query.append("                                     AND   BKG.BKG_STS_CD IN ('W', 'F')" ).append("\n"); 
		query.append("                                     AND   BKG.BKG_CGO_TP_CD IN ('F', 'B', 'R')" ).append("\n"); 
		query.append("                                     AND   V.OFC_CD = SPC_SCR_OFC_CONV_FNC(BKG.OB_SLS_OFC_CD, '')" ).append("\n"); 
		query.append("                                     AND   V.OFC_TP_CD     IN ('BB', 'BA', 'BS')" ).append("\n"); 
		query.append("                                     AND   B.COST_YR_WK BETWEEN V.OFC_APLY_FM_YRWK AND V.OFC_APLY_TO_YRWK" ).append("\n"); 
		query.append("                                     AND   D.RLANE_CD = B.RLANE_CD" ).append("\n"); 
		query.append("                                     AND   D.VSL_SLAN_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("                                     AND   D.FM_CONTI_CD = (SELECT SPC_CONTI_CONV_FNC(CONTI_CD, D.RLANE_CD)" ).append("\n"); 
		query.append("                                                              FROM MDM_LOCATION" ).append("\n"); 
		query.append("                                                             WHERE LOC_CD = SUBSTR(B.POL_CD, 1, 5))" ).append("\n"); 
		query.append("                                     AND   D.TO_CONTI_CD = B.POD_CONTI" ).append("\n"); 
		query.append("                                     AND   (BV.VSL_PRE_PST_CD = 'T' OR B.POL_CONTI <> 'A')" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                     AND ((BV.POL_CD = SUBSTR(B.POL_CD, 1, 5) AND BV.POL_CLPT_IND_SEQ = B.POL_PORT_SEQ) OR (BV.POL_YD_CD = B.POL_CD AND BV.POL_CLPT_IND_SEQ > 1 AND B.POL_PORT_MAX_SEQ = 1))" ).append("\n"); 
		query.append("                                     AND ((BV.POD_CD = SUBSTR(B.POD_CD, 1, 5) AND BV.POD_CLPT_IND_SEQ = B.POD_PORT_SEQ) OR (BV.POD_YD_CD = B.POD_CD AND BV.POD_CLPT_IND_SEQ > 1 AND B.POD_PORT_MAX_SEQ = 1))" ).append("\n"); 
		query.append("                                        " ).append("\n"); 
		query.append("                                     AND B.RLANE_CD      <> 'RBCCO'" ).append("\n"); 
		query.append("                                     AND ((BV.VSL_PRE_PST_CD = 'T' AND (V.N2ND_PRNT_OFC_CD = B.RHQ_CD OR B.OFC_CONTI = B.POL_CONTI)) OR (BV.VSL_PRE_PST_CD <> 'T' AND ((V.N2ND_PRNT_OFC_CD = B.RHQ_CD OR B.OFC_CONTI = B.POL_CONTI) OR B.POL_CONTI = DECODE(B.RHQ_CD, 'NYCRA', 'M', 'E'))))" ).append("\n"); 
		query.append("                               )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("            GROUP BY FLG        ," ).append("\n"); 
		query.append("                     TRD_CD     ," ).append("\n"); 
		query.append("                     SUB_TRD_CD ," ).append("\n"); 
		query.append("                     BASE_RHQ_CD," ).append("\n"); 
		query.append("                     RHQ_CD     ," ).append("\n"); 
		query.append("                     IOC_CD     ," ).append("\n"); 
		query.append("                     OFC_CD     ," ).append("\n"); 
		query.append("                     US_MOD	," ).append("\n"); 
		query.append("                     ACCOUNT_CD	," ).append("\n"); 
		query.append("                     POL_CD     ," ).append("\n"); 
		query.append("                     POD_CD     ," ).append("\n"); 
		query.append("                     DEL_CD	," ).append("\n"); 
		query.append("                     POL_SEQ    ," ).append("\n"); 
		query.append("                     POD_SEQ    ," ).append("\n"); 
		query.append("                     BKG_QUOTA  ," ).append("\n"); 
		query.append("                     BKG_QTA_CMB," ).append("\n"); 
		query.append("                     CMB1       ," ).append("\n"); 
		query.append("                     CMB2       ," ).append("\n"); 
		query.append("                     AP_TEU     ," ).append("\n"); 
		query.append("                     AP_20      ," ).append("\n"); 
		query.append("                     AP_40      ," ).append("\n"); 
		query.append("                     AP_HC      ," ).append("\n"); 
		query.append("                     AP_45      ," ).append("\n"); 
		query.append("                     AP_53      ," ).append("\n"); 
		query.append("                     AP_RF      ," ).append("\n"); 
		query.append("                     AP_WGT     ," ).append("\n"); 
		query.append("                     PAST       ," ).append("\n"); 
		query.append("                     CFM_FLG    ," ).append("\n"); 
		query.append("                     SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("                     SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("                     SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("              UNION ALL" ).append("\n"); 
		query.append("              -- Booking Quota" ).append("\n"); 
		query.append("              SELECT 106 AS FLG," ).append("\n"); 
		query.append("                     MQ.TRD_CD," ).append("\n"); 
		query.append("                     ''        AS SUB_TRD_CD ," ).append("\n"); 
		query.append("                     M.RHQ_CD  AS BASE_RHQ_CD," ).append("\n"); 
		query.append("                     OL.N2ND_PRNT_OFC_CD AS RHQ_CD     ," ).append("\n"); 
		query.append("                     DECODE(SUBSTR(MQ.TRD_CD, 1, 1), 'I', 'IPC', 'OCN') AS IOC_CD," ).append("\n"); 
		query.append("                     NVL(O.CONV_RGN_OFC_CD, MQ.RGN_OFC_CD) AS OFC_CD," ).append("\n"); 
		query.append("                     'OTHERS' AS US_MOD," ).append("\n"); 
		query.append("                     'OTHERS' AS ACCOUNT_CD," ).append("\n"); 
		query.append("                     SUBSTR(VPS.POL_CD, 1, 5)  AS POL_CD, --" ).append("\n"); 
		query.append("                     SUBSTR(VPS.POD_CD, 1, 5)  AS POD_CD, --" ).append("\n"); 
		query.append("                     'OTHERS' AS DEL_CD," ).append("\n"); 
		query.append("                     VPS.POL_SEQ," ).append("\n"); 
		query.append("                     VPS.POD_SEQ," ).append("\n"); 
		query.append("                     ROUND(SUM(MQ.LOD_QTY)) AS BKG_QUOTA," ).append("\n"); 
		query.append("                     SUM(MQ.LOD_QTY * (MQ.GRS_RPB_REV - MQ.PA_CM_UC_AMT)) AS BKG_QTA_CMB," ).append("\n"); 
		query.append("                     0 AS CMB1  ," ).append("\n"); 
		query.append("                     0 AS CMB2  ," ).append("\n"); 
		query.append("                     0 AS FC_TEU," ).append("\n"); 
		query.append("                     0 AS FC_20 ," ).append("\n"); 
		query.append("                     0 AS FC_40 ," ).append("\n"); 
		query.append("                     0 AS FC_HC ," ).append("\n"); 
		query.append("                     0 AS FC_45 ," ).append("\n"); 
		query.append("                     0 AS FC_53 ," ).append("\n"); 
		query.append("                     0 AS FC_RF ," ).append("\n"); 
		query.append("                     0 AS FC_WGT," ).append("\n"); 
		query.append("                     0 AS AP_TEU," ).append("\n"); 
		query.append("                     0 AS AP_20 ," ).append("\n"); 
		query.append("                     0 AS AP_40 ," ).append("\n"); 
		query.append("                     0 AS AP_HC ," ).append("\n"); 
		query.append("                     0 AS AP_45 ," ).append("\n"); 
		query.append("                     0 AS AP_53 ," ).append("\n"); 
		query.append("                     0 AS AP_RF ," ).append("\n"); 
		query.append("                     0 AS AP_WGT," ).append("\n"); 
		query.append("                     0 AS BT_TEU," ).append("\n"); 
		query.append("                     0 AS BT_20 ," ).append("\n"); 
		query.append("                     0 AS BT_40 ," ).append("\n"); 
		query.append("                     0 AS BT_HC ," ).append("\n"); 
		query.append("                     0 AS BT_45 ," ).append("\n"); 
		query.append("                     0 AS BT_53 ," ).append("\n"); 
		query.append("                     0 AS BT_RF ," ).append("\n"); 
		query.append("                     0 AS BT_WGT, 0 AS BKG_VOL_VGM,0 AS BKG_WGT_VGM," ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                     0 AS BS_TEU, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("                     0 AS BS_WGT, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                     0 AS CM_OP	  ,   " ).append("\n"); 
		query.append("                     0 AS CM_OC   ,   " ).append("\n"); 
		query.append("                     0 AS CM_VL   ,   " ).append("\n"); 
		query.append("                     NVL(VPS.PAST, 'N') AS PAST," ).append("\n"); 
		query.append("                     -- 2014.07.25 컬럼 추가" ).append("\n"); 
		query.append("                     0 AS FC_D2  ," ).append("\n"); 
		query.append("                     0 AS FC_D4  ," ).append("\n"); 
		query.append("                     0 AS FC_RD  ," ).append("\n"); 
		query.append("                     0 AS BT_D2  ," ).append("\n"); 
		query.append("                     0 AS BT_D4  ," ).append("\n"); 
		query.append("                     0 AS BT_RD  ," ).append("\n"); 
		query.append("                     0 AS AP_D2  ," ).append("\n"); 
		query.append("                     0 AS AP_D4  ," ).append("\n"); 
		query.append("                     0 AS AP_RD  ," ).append("\n"); 
		query.append("                     NULL AS CFM_FLG," ).append("\n"); 
		query.append("                     NULL AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("                     NULL AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("                     NULL AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("                FROM BASE             M  ," ).append("\n"); 
		query.append("                     VSL_PORT_SKD     VPS," ).append("\n"); 
		query.append("                     SQM_CFM_QTA      MQ ," ).append("\n"); 
		query.append("                     SQM_QTA_RLSE_VER MQR," ).append("\n"); 
		query.append("                     SPC_RGN_OFC_CONV O," ).append("\n"); 
		query.append("                     SPC_OFC_LVL      OL" ).append("\n"); 
		query.append("               WHERE MQR.BSE_YR          = M.BSE_YR" ).append("\n"); 
		query.append("                 AND MQR.BSE_QTR_CD      = M.BSE_QTR_CD--CEIL(TO_NUMBER(DECODE(M.COST_WK,'00','01','53','52',M.COST_WK))/13)||'Q' --CEIL(TO_NUMBER(M.MON) / 3)||'Q'" ).append("\n"); 
		query.append("                 AND MQR.SQM_VER_STS_CD  = 'R'" ).append("\n"); 
		query.append("                 AND MQR.BSE_TP_CD       = 'Q' --" ).append("\n"); 
		query.append("                 AND MQ.QTA_RLSE_VER_NO  = MQR.QTA_RLSE_VER_NO" ).append("\n"); 
		query.append("                 AND MQ.BSE_TP_CD        = MQR.BSE_TP_CD  --" ).append("\n"); 
		query.append("                 AND MQ.BSE_YR           = MQR.BSE_YR" ).append("\n"); 
		query.append("                 AND MQ.BSE_QTR_CD       = MQR.BSE_QTR_CD" ).append("\n"); 
		query.append("                 AND MQ.QTA_TGT_CD       = 'D'" ).append("\n"); 
		query.append("                 AND MQ.OFC_VW_CD        = 'L' " ).append("\n"); 
		query.append("                 AND MQ.RLANE_CD         = M.RLANE_CD" ).append("\n"); 
		query.append("                 AND MQ.DIR_CD           = M.DIR_CD" ).append("\n"); 
		query.append("                 AND MQ.VSL_CD           = M.VSL_CD" ).append("\n"); 
		query.append("                 AND MQ.SKD_VOY_NO       = M.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND MQ.SKD_DIR_CD       = M.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND OL.N2ND_PRNT_OFC_CD = M.RHQ_CD" ).append("\n"); 
		query.append("                 AND MQ.RGN_OFC_CD       = O.SLS_RGN_OFC_CD(+)" ).append("\n"); 
		query.append("                 AND VPS.RLANE_CD        = MQ.RLANE_CD" ).append("\n"); 
		query.append("                 AND VPS.DIR_CD          = MQ.DIR_CD" ).append("\n"); 
		query.append("                 AND VPS.VSL_CD          = MQ.VSL_CD" ).append("\n"); 
		query.append("                 AND VPS.SKD_VOY_NO      = MQ.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND VPS.SKD_DIR_CD      = MQ.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND VPS.POL_CD          = '0000000'" ).append("\n"); 
		query.append("                 AND VPS.POD_CD          = '0000000'" ).append("\n"); 
		query.append("                 AND MQ.LOD_QTY > 0" ).append("\n"); 
		query.append("                 AND M.COST_YR || M.COST_WK BETWEEN OL.OFC_APLY_FM_YRWK AND OL.OFC_APLY_TO_YRWK" ).append("\n"); 
		query.append("                 --AND MQ.RGN_OFC_CD        = OL.OFC_CD" ).append("\n"); 
		query.append("                 AND NVL(O.CONV_RGN_OFC_CD, MQ.RGN_OFC_CD) = OL.OFC_CD" ).append("\n"); 
		query.append("            GROUP BY MQ.TRD_CD," ).append("\n"); 
		query.append("                     M.RHQ_CD ," ).append("\n"); 
		query.append("                     OL.N2ND_PRNT_OFC_CD," ).append("\n"); 
		query.append("                     DECODE(SUBSTR(MQ.TRD_CD, 1, 1), 'I', 'IPC', 'OCN')," ).append("\n"); 
		query.append("                     NVL(O.CONV_RGN_OFC_CD, MQ.RGN_OFC_CD)," ).append("\n"); 
		query.append("                     SUBSTR(VPS.POL_CD, 1, 5)," ).append("\n"); 
		query.append("                     SUBSTR(VPS.POD_CD, 1, 5)," ).append("\n"); 
		query.append("                     VPS.POL_SEQ," ).append("\n"); 
		query.append("                     VPS.POD_SEQ," ).append("\n"); 
		query.append("                     NVL(VPS.PAST, 'N')" ).append("\n"); 
		query.append("              UNION ALL" ).append("\n"); 
		query.append("              -- TS Forecast" ).append("\n"); 
		query.append("              SELECT 201 AS FLG," ).append("\n"); 
		query.append("                     T.TRD_CD    ," ).append("\n"); 
		query.append("                     T.SUB_TRD_CD," ).append("\n"); 
		query.append("                     B.RHQ_CD         AS BASE_RHQ_CD," ).append("\n"); 
		query.append("                     T.SLS_RHQ_CD     AS RHQ_CD     ," ).append("\n"); 
		query.append("                     'T/S'            AS IOC_CD     ," ).append("\n"); 
		query.append("                     T.SLS_RGN_OFC_CD AS OFC_CD     ," ).append("\n"); 
		query.append("                      -- 2014.08.09" ).append("\n"); 
		query.append("                     CASE WHEN M.CTRL_USA = 'Y' THEN" ).append("\n"); 
		query.append("                        DECODE(NVL(T.USA_BKG_MOD_CD, 'OTH'), 'OTH', 'OTHERS', T.USA_BKG_MOD_CD)" ).append("\n"); 
		query.append("                     ELSE" ).append("\n"); 
		query.append("                        'OTHERS'" ).append("\n"); 
		query.append("                     END AS US_MOD," ).append("\n"); 
		query.append("                      -- 2015.03.27" ).append("\n"); 
		query.append("                     CASE WHEN M.CTRL_ACCOUNT = 'Y' THEN" ).append("\n"); 
		query.append("                        NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                               FROM SPC_ALOC_LANE_CTRL_OPT_DTL D," ).append("\n"); 
		query.append("		       	       	            SPC_ALOC_LANE_CTRL_OFC OFC" ).append("\n"); 
		query.append("                              WHERE D.RLANE_CD          = M.RLANE_CD" ).append("\n"); 
		query.append("                                AND D.TRD_CD            = SPC_GET_REP_TRD_FNC(M.RLANE_CD) " ).append("\n"); 
		query.append("                                AND D.SUB_TRD_CD        = SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                AND D.DIR_CD            = M.SKD_DIR_CD" ).append("\n"); 
		query.append("                                AND D.ALOC_CTRL_TP_CD   = 'A'" ).append("\n"); 
		query.append("                                -- 2015.02.16 control office관련 setting 추가" ).append("\n"); 
		query.append("                                AND D.RLANE_CD          = OFC.RLANE_CD" ).append("\n"); 
		query.append("                                AND D.TRD_CD            = OFC.TRD_CD" ).append("\n"); 
		query.append("                                AND D.SUB_TRD_CD        = OFC.SUB_TRD_CD" ).append("\n"); 
		query.append("                                AND D.DIR_CD            = OFC.DIR_CD " ).append("\n"); 
		query.append("                                AND D.ALOC_CTRL_TP_CD   = OFC.ALOC_CTRL_TP_CD " ).append("\n"); 
		query.append("                                AND D.CTRL_LOC_ACCT_CD  = OFC.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                                AND OFC.OFC_CD          = DECODE(IOC_TS_CD, 'T', DECODE(M.OFC_CD, T.SLS_RHQ_CD, T.SLS_RGN_OFC_CD, T.SLS_RHQ_CD), T.SLS_RGN_OFC_CD)" ).append("\n"); 
		query.append("                                AND D.ALOC_CTRL_DTL_CD  = T.CUST_CNT_CD||LPAD(T.CUST_SEQ,6,'0')                                        " ).append("\n"); 
		query.append("                         ),'OTHERS')" ).append("\n"); 
		query.append("                     ELSE" ).append("\n"); 
		query.append("                        'OTHERS'" ).append("\n"); 
		query.append("                     END AS ACCOUNT_CD," ).append("\n"); 
		query.append("--                     CASE WHEN M.CTRL_ACCOUNT = 'Y' THEN" ).append("\n"); 
		query.append("--                        NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("--                               FROM SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("--                              WHERE M.RLANE_CD                           = D.RLANE_CD" ).append("\n"); 
		query.append("--                                AND SPC_GET_REP_TRD_FNC(M.RLANE_CD)      = D.TRD_CD" ).append("\n"); 
		query.append("--                                AND SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD)  = D.SUB_TRD_CD" ).append("\n"); 
		query.append("--                                AND M.SKD_DIR_CD                         = D.DIR_CD " ).append("\n"); 
		query.append("--                                -- 2014.11.17 Account control (I/Acct, A/Acct, CMDT) " ).append("\n"); 
		query.append("--                                AND D.ALOC_CTRL_TP_CD                    = 'A'" ).append("\n"); 
		query.append("--                                AND D.ALOC_CTRL_DTL_CD                  = T.CUST_CNT_CD ||LPAD(T.CUST_SEQ,6,'0') " ).append("\n"); 
		query.append("--                                                                       " ).append("\n"); 
		query.append("--                         ),'OTHERS')" ).append("\n"); 
		query.append("--                     ELSE" ).append("\n"); 
		query.append("--                        'OTHERS'" ).append("\n"); 
		query.append("--                     END AS ACCOUNT_CD," ).append("\n"); 
		query.append("                     B.POL_CD ," ).append("\n"); 
		query.append("                     B.POD_CD ," ).append("\n"); 
		query.append("                     CASE WHEN M.CTRL_DEST <> 'N' THEN	                                                      " ).append("\n"); 
		query.append("                        NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                               FROM SPC_ALOC_LANE_CTRL_OPT_DTL D," ).append("\n"); 
		query.append("									SPC_ALOC_LANE_CTRL_OFC OFC" ).append("\n"); 
		query.append("                              WHERE D.RLANE_CD           = M.RLANE_CD" ).append("\n"); 
		query.append("                                AND D.TRD_CD             = SPC_GET_REP_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                AND D.SUB_TRD_CD         = SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                AND D.DIR_CD             = M.SKD_DIR_CD" ).append("\n"); 
		query.append("                                AND D.ALOC_CTRL_TP_CD    = M.CTRL_DEST" ).append("\n"); 
		query.append("                                -- 2015.02.16 control office관련 setting 추가" ).append("\n"); 
		query.append("                                AND D.RLANE_CD			= OFC.RLANE_CD" ).append("\n"); 
		query.append("                                AND D.TRD_CD            = OFC.TRD_CD" ).append("\n"); 
		query.append("                                AND D.SUB_TRD_CD        = OFC.SUB_TRD_CD" ).append("\n"); 
		query.append("                                AND D.DIR_CD            = OFC.DIR_CD " ).append("\n"); 
		query.append("                                AND D.ALOC_CTRL_TP_CD	= OFC.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("                                AND D.CTRL_LOC_ACCT_CD  = OFC.CTRL_LOC_ACCT_CD " ).append("\n"); 
		query.append("                                AND OFC.OFC_CD          = DECODE(IOC_TS_CD, 'T', DECODE(M.OFC_CD, T.SLS_RHQ_CD, T.SLS_RGN_OFC_CD, T.SLS_RHQ_CD), T.SLS_RGN_OFC_CD)" ).append("\n"); 
		query.append("                                AND DECODE(M.CTRL_DEST, 'E', D.CTRL_LOC_ACCT_CD, 'G', D.ALOC_CTRL_DTL_CD) = (SELECT A.ECC_CD" ).append("\n"); 
		query.append("                                                                                                               FROM MDM_EQ_ORZ_CHT A,  " ).append("\n"); 
		query.append("                                                                                                                    MDM_LOCATION B " ).append("\n"); 
		query.append("                                                                                                              WHERE B.LOC_CD = DECODE(M.CTRL_DEST_LVL,'T', T.DEST_LOC_CD, SUBSTR(T.POD_YD_CD, 1, 5))" ).append("\n"); 
		query.append("                                                                                                                AND A.SCC_CD = B.SCC_CD" ).append("\n"); 
		query.append("                                                                                                            )" ).append("\n"); 
		query.append("                        ),'OTHERS')" ).append("\n"); 
		query.append("                     ELSE" ).append("\n"); 
		query.append("                        'OTHERS'" ).append("\n"); 
		query.append("                     END AS DEL_CD," ).append("\n"); 
		query.append("--                     CASE WHEN M.CTRL_DEST <> 'N' THEN	                                                      " ).append("\n"); 
		query.append("--                                       NVL((SELECT D.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("--                                              FROM SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("--                                             WHERE M.RLANE_CD         = D.RLANE_CD" ).append("\n"); 
		query.append("--                                               AND SPC_GET_REP_TRD_FNC(M.RLANE_CD)     = D.TRD_CD" ).append("\n"); 
		query.append("--                                               AND SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD) = D.SUB_TRD_CD" ).append("\n"); 
		query.append("--                                               AND M.SKD_DIR_CD       = D.DIR_CD " ).append("\n"); 
		query.append("--                                               AND D.ALOC_CTRL_TP_CD  = M.CTRL_DEST" ).append("\n"); 
		query.append("--                                               AND D.CTRL_LOC_ACCT_CD = DECODE(M.CTRL_DEST_LVL, 'T', DECODE(M.CTRL_DEST, 'C', SUBSTR(T.DEST_LOC_CD,1,2), 'L', T.DEST_LOC_CD, 'E', " ).append("\n"); 
		query.append("--                                                                                                                                                                (SELECT A.ECC_CD" ).append("\n"); 
		query.append("--                                                                                                                                                                   FROM MDM_EQ_ORZ_CHT A,  " ).append("\n"); 
		query.append("--                                                                                                                                                                        MDM_LOCATION B " ).append("\n"); 
		query.append("--                                                                                                                                                                  WHERE B.LOC_CD = T.DEST_LOC_CD" ).append("\n"); 
		query.append("--                                                                                                                                                                    AND A.SCC_CD = B.SCC_CD" ).append("\n"); 
		query.append("--                                                                                                                                                                 )) ,  -- 'T': DEL CONTROL " ).append("\n"); 
		query.append("--                                                                                                     DECODE(M.CTRL_DEST, 'C',SUBSTR(T.POD_YD_CD,1,2), 'L', SUBSTR(T.POD_YD_CD, 1, 5), 'E'," ).append("\n"); 
		query.append("--                                                                                                                                                                 (SELECT A.ECC_CD" ).append("\n"); 
		query.append("--                                                                                                                                                                   FROM MDM_EQ_ORZ_CHT A,  " ).append("\n"); 
		query.append("--                                                                                                                                                                        MDM_LOCATION B " ).append("\n"); 
		query.append("--                                                                                                                                                                  WHERE B.LOC_CD = SUBSTR(T.POD_YD_CD, 1, 5)" ).append("\n"); 
		query.append("--                                                                                                                                                                    AND A.SCC_CD = B.SCC_CD" ).append("\n"); 
		query.append("--                                                                                                                                                                 ))" ).append("\n"); 
		query.append("--                                                                                                                                                                 ) -- 'D': POD CONTROL " ).append("\n"); 
		query.append("--                                            ),'OTHERS')" ).append("\n"); 
		query.append("--                     ELSE" ).append("\n"); 
		query.append("--                        'OTHERS'" ).append("\n"); 
		query.append("--                     END AS DEL_CD   ," ).append("\n"); 
		query.append("                     B.POL_SEQ," ).append("\n"); 
		query.append("                     B.POD_SEQ," ).append("\n"); 
		query.append("                     0 AS BKG_QUOTA," ).append("\n"); 
		query.append("                     0 AS BKG_QTA_CMB," ).append("\n"); 
		query.append("                     0 AS CMB1     ," ).append("\n"); 
		query.append("                     0 AS CMB2     ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_TTL_QTY) AS FC_TEU," ).append("\n"); 
		query.append("                     0 AS FC_20," ).append("\n"); 
		query.append("                     0 AS FC_40," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_40FT_HC_QTY) AS FC_HC ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_45FT_HC_QTY) AS FC_45 ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_53FT_QTY)    AS FC_53 ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_RF_QTY)      AS FC_RF ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_TTL_WGT)     AS FC_WGT," ).append("\n"); 
		query.append("                     0 AS AP_TEU," ).append("\n"); 
		query.append("                     0 AS AP_20 ," ).append("\n"); 
		query.append("                     0 AS AP_40 ," ).append("\n"); 
		query.append("                     0 AS AP_HC ," ).append("\n"); 
		query.append("                     0 AS AP_45 ," ).append("\n"); 
		query.append("                     0 AS AP_53 ," ).append("\n"); 
		query.append("                     0 AS AP_RF ," ).append("\n"); 
		query.append("                     0 AS AP_WGT," ).append("\n"); 
		query.append("                     0 AS BT_TEU," ).append("\n"); 
		query.append("                     0 AS BT_20 ," ).append("\n"); 
		query.append("                     0 AS BT_40 ," ).append("\n"); 
		query.append("                     0 AS BT_HC ," ).append("\n"); 
		query.append("                     0 AS BT_45 ," ).append("\n"); 
		query.append("                     0 AS BT_53 ," ).append("\n"); 
		query.append("                     0 AS BT_RF ," ).append("\n"); 
		query.append("                     0 AS BT_WGT, 0 AS BKG_VOL_VGM,0 AS BKG_WGT_VGM," ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                     0 AS BS_TEU, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("                     0 AS BS_WGT, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                     0 AS CM_OP	  ,   " ).append("\n"); 
		query.append("                     0 AS CM_OC   ,   " ).append("\n"); 
		query.append("                     0 AS CM_VL   ,   " ).append("\n"); 
		query.append("                     PAST," ).append("\n"); 
		query.append("                     -- 2014.07.22 컬럼 추가" ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_20FT_DRY_QTY) AS FC_D2  ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_40FT_DRY_QTY) AS FC_D4  ," ).append("\n"); 
		query.append("                     DECODE(B.PAST, 'Y', 0, T.CFM_RD_QTY)  AS FC_RD  ," ).append("\n"); 
		query.append("                     0 AS BT_D2  ," ).append("\n"); 
		query.append("                     0 AS BT_D4  ," ).append("\n"); 
		query.append("                     0 AS BT_RD  ," ).append("\n"); 
		query.append("                     0 AS AP_D2  ," ).append("\n"); 
		query.append("                     0 AS AP_D4  ," ).append("\n"); 
		query.append("                     0 AS AP_RD  ," ).append("\n"); 
		query.append("                     NULL AS CFM_FLG," ).append("\n"); 
		query.append("                     NULL AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("                     NULL AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("                     NULL AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("                FROM SPC_DLY_FCAST_CUST T," ).append("\n"); 
		query.append("                     VSL_PORT_SKD       B," ).append("\n"); 
		query.append("                     BASE           M" ).append("\n"); 
		query.append("               WHERE T.RLANE_CD   = B.RLANE_CD" ).append("\n"); 
		query.append("                 AND T.DIR_CD     = B.DIR_CD" ).append("\n"); 
		query.append("                 AND T.VSL_CD     = B.VSL_CD" ).append("\n"); 
		query.append("                 AND T.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND T.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND T.POL_YD_CD  = B.POL_CD" ).append("\n"); 
		query.append("                 AND T.POD_YD_CD  = B.POD_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                 AND T.POL_YD_IND_SEQ = B.POL_YD_SEQ" ).append("\n"); 
		query.append("                 AND T.POD_YD_IND_SEQ = B.POD_YD_SEQ" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                 AND B.POL_CONTI <> 'A'" ).append("\n"); 
		query.append("--                 AND NVL(T.CFM_TTL_QTY,0) + NVL(T.CFM_TTL_WGT,0) > 0" ).append("\n"); 
		query.append("                 AND NVL(T.CFM_TTL_QTY, 0) + NVL(T.CFM_40FT_HC_QTY, 0) + NVL(T.CFM_45FT_HC_QTY, 0) + NVL(T.CFM_53FT_QTY, 0) + NVL(T.CFM_TTL_WGT, 0) + NVL(T.CFM_RF_QTY,0)  > 0" ).append("\n"); 
		query.append("                 AND ((T.SLS_RHQ_CD = B.RHQ_CD  OR B.OFC_CONTI = B.POL_CONTI) OR B.POL_CONTI = DECODE(B.RHQ_CD, 'NYCRA', 'M', 'E'))" ).append("\n"); 
		query.append("                 AND T.IOC_TS_CD = 'T'" ).append("\n"); 
		query.append("--            GROUP BY T.TRD_CD        ," ).append("\n"); 
		query.append("--                     T.SUB_TRD_CD    ," ).append("\n"); 
		query.append("--                     B.RHQ_CD        ," ).append("\n"); 
		query.append("--                     T.SLS_RHQ_CD    ," ).append("\n"); 
		query.append("--                     T.SLS_RGN_OFC_CD," ).append("\n"); 
		query.append("--                     B.US_MOD        ," ).append("\n"); 
		query.append("--                     B.ACCOUNT_CD    ," ).append("\n"); 
		query.append("--                     B.POL_CD        ," ).append("\n"); 
		query.append("--                     B.POD_CD        ," ).append("\n"); 
		query.append("--                     B.DEL_CD        ," ).append("\n"); 
		query.append("--                     B.POL_SEQ       ," ).append("\n"); 
		query.append("--                     B.POD_SEQ       ," ).append("\n"); 
		query.append("--                     T.IOC_TS_CD     ," ).append("\n"); 
		query.append("--                     B.PAST" ).append("\n"); 
		query.append("              UNION ALL" ).append("\n"); 
		query.append("              -- TS Allocation" ).append("\n"); 
		query.append("              SELECT 203 AS FLG," ).append("\n"); 
		query.append("                     D.TRD_CD    ," ).append("\n"); 
		query.append("                     D.SUB_TRD_CD," ).append("\n"); 
		query.append("                     B.RHQ_CD     AS BASE_RHQ_CD," ).append("\n"); 
		query.append("                     D.SLS_RHQ_CD AS RHQ_CD     ," ).append("\n"); 
		query.append("                     DECODE(D.MNL_FLG, 'Y', 'T-', '')||'T/S' AS IOC_CD," ).append("\n"); 
		query.append("                     D.SLS_RGN_OFC_CD AS OFC_CD," ).append("\n"); 
		query.append("                     -- 2014.08.09 과거 입력 데이타 그대로 보여주므로 OTHERS처리 로직에서 제외" ).append("\n"); 
		query.append("                     DECODE(D.USA_BKG_MOD_CD, 'X', 'OTHERS', 'OTH', 'OTHERS', D.USA_BKG_MOD_CD) AS US_MOD," ).append("\n"); 
		query.append("                      -- 2014.12.04 CTRT_NO 추가 " ).append("\n"); 
		query.append("                     DECODE(D.CTRT_NO||D.CUST_CNT_CD||LPAD(D.CUST_SEQ, 6, '0'), 'XXX999999', 'OTHERS', 'XX999999', 'OTHERS', " ).append("\n"); 
		query.append("                             DECODE(D.CUST_CNT_CD||LPAD(D.CUST_SEQ, 6, '0'), 'XX999999', D.CTRT_NO, D.CUST_CNT_CD||LPAD(D.CUST_SEQ, 6, '0'))) AS ACCOUNT_CD," ).append("\n"); 
		query.append("                     D.POL_YD_CD," ).append("\n"); 
		query.append("                     D.POD_YD_CD," ).append("\n"); 
		query.append("                     DECODE(D.DEST_LOC_CD, 'XXXXX', 'OTHERS', D.DEST_LOC_CD) AS DEL_CD," ).append("\n"); 
		query.append("                     B.POL_SEQ  ," ).append("\n"); 
		query.append("                     B.POD_SEQ  ," ).append("\n"); 
		query.append("                     0 AS BKG_QUOTA," ).append("\n"); 
		query.append("                     0 AS BKG_QTA_CMB," ).append("\n"); 
		query.append("                     0 AS CMB1     ," ).append("\n"); 
		query.append("                     0 AS CMB2     ," ).append("\n"); 
		query.append("                     0 AS FC_TEU   ," ).append("\n"); 
		query.append("                     0 AS FC_20    ," ).append("\n"); 
		query.append("                     0 AS FC_40    ," ).append("\n"); 
		query.append("                     0 AS FC_HC    ," ).append("\n"); 
		query.append("                     0 AS FC_45    ," ).append("\n"); 
		query.append("                     0 AS FC_53    ," ).append("\n"); 
		query.append("                     0 AS FC_RF    ," ).append("\n"); 
		query.append("                     0 AS FC_WGT   ," ).append("\n"); 
		query.append("                     D.ASGN_TTL_QTY     AS AP_TEU," ).append("\n"); 
		query.append("                     D.ASGN_20FT_QTY    AS AP_20 ," ).append("\n"); 
		query.append("                     D.ASGN_40FT_QTY    AS AP_40 ," ).append("\n"); 
		query.append("                     D.ASGN_40FT_HC_QTY AS AP_HC ," ).append("\n"); 
		query.append("                     D.ASGN_45FT_HC_QTY AS AP_45 ," ).append("\n"); 
		query.append("                     D.ASGN_53FT_QTY    AS AP_53 ," ).append("\n"); 
		query.append("                     D.ASGN_RF_QTY      AS AP_RF ," ).append("\n"); 
		query.append("                     D.ASGN_TTL_WGT     AS AP_WGT," ).append("\n"); 
		query.append("                     0 AS BT_TEU," ).append("\n"); 
		query.append("                     0 AS BT_20 ," ).append("\n"); 
		query.append("                     0 AS BT_40 ," ).append("\n"); 
		query.append("                     0 AS BT_HC ," ).append("\n"); 
		query.append("                     0 AS BT_45 ," ).append("\n"); 
		query.append("                     0 AS BT_53 ," ).append("\n"); 
		query.append("                     0 AS BT_RF ," ).append("\n"); 
		query.append("                     0 AS BT_WGT, 0 AS BKG_VOL_VGM,0 AS BKG_WGT_VGM," ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                     0 AS BS_TEU, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("                     0 AS BS_WGT, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                     0 AS CM_OP	  ,   " ).append("\n"); 
		query.append("                     0 AS CM_OC   ,   " ).append("\n"); 
		query.append("                     0 AS CM_VL   , " ).append("\n"); 
		query.append("                     PAST," ).append("\n"); 
		query.append("                     -- 2014.07.25 컬럼 추가" ).append("\n"); 
		query.append("                     0 AS FC_D2  ," ).append("\n"); 
		query.append("                     0 AS FC_D4  ," ).append("\n"); 
		query.append("                     0 AS FC_RD  ," ).append("\n"); 
		query.append("                     0 AS BT_D2  ," ).append("\n"); 
		query.append("                     0 AS BT_D4  ," ).append("\n"); 
		query.append("                     0 AS BT_RD  ," ).append("\n"); 
		query.append("                     D.ASGN_20FT_DRY_QTY AS AP_D2  ," ).append("\n"); 
		query.append("                     D.ASGN_40FT_DRY_QTY AS AP_D4  ," ).append("\n"); 
		query.append("                     D.ASGN_RD_QTY AS AP_RD  ," ).append("\n"); 
		query.append("                     NULL AS CFM_FLG," ).append("\n"); 
		query.append("                     D.SPC_CTRL_ALOC_RMK     AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("                     D.SPC_CTRL_ALOC_POL_RMK AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("                     D.SPC_CTRL_ALOC_POD_RMK AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("                FROM SPC_ALOC_POL_POD D," ).append("\n"); 
		query.append("                     VSL_PORT_SKD     B" ).append("\n"); 
		query.append("               WHERE D.RLANE_CD   = B.RLANE_CD" ).append("\n"); 
		query.append("                 AND D.DIR_CD     = B.DIR_CD" ).append("\n"); 
		query.append("                 AND D.VSL_CD     = B.VSL_CD" ).append("\n"); 
		query.append("                 AND D.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND D.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND D.POL_YD_CD  = B.POL_CD" ).append("\n"); 
		query.append("                 AND D.POD_YD_CD  = B.POD_CD" ).append("\n"); 
		query.append("		 " ).append("\n"); 
		query.append("                 AND D.POL_YD_IND_SEQ = B.POL_YD_SEQ" ).append("\n"); 
		query.append("                 AND D.POD_YD_IND_SEQ = B.POD_YD_SEQ" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                 AND B.POL_CONTI <> 'A'" ).append("\n"); 
		query.append("                 AND D.TS_FLG     = 'Y'" ).append("\n"); 
		query.append("                 AND D.SLS_OFC_CD = D.SLS_RGN_OFC_CD" ).append("\n"); 
		query.append("                 AND ((D.SLS_RHQ_CD = B.RHQ_CD OR B.OFC_CONTI = B.POL_CONTI )OR B.POL_CONTI = DECODE(B.RHQ_CD, 'NYCRA', 'M', 'E'))" ).append("\n"); 
		query.append("              UNION ALL" ).append("\n"); 
		query.append("               --EQ Booking" ).append("\n"); 
		query.append("               SELECT 501  AS FLG," ).append("\n"); 
		query.append("                      TRD_CD           ," ).append("\n"); 
		query.append("                      SUB_TRD_CD       ," ).append("\n"); 
		query.append("                      BASE_RHQ_CD      ," ).append("\n"); 
		query.append("                      'NULL' AS RHQ_CD ," ).append("\n"); 
		query.append("                      IOC_CD           ," ).append("\n"); 
		query.append("                      'NULL' AS OFC_CD ," ).append("\n"); 
		query.append("                      US_MOD           ," ).append("\n"); 
		query.append("                      ACCOUNT_CD       ," ).append("\n"); 
		query.append("                      POL_CD           ," ).append("\n"); 
		query.append("                      POD_CD           ," ).append("\n"); 
		query.append("                      DEL_CD           ," ).append("\n"); 
		query.append("                      POL_SEQ          ," ).append("\n"); 
		query.append("                      POD_SEQ          ," ).append("\n"); 
		query.append("                      0 AS BKG_QUOTA   ," ).append("\n"); 
		query.append("                      0 AS BKG_QTA_CMB," ).append("\n"); 
		query.append("                      0 AS CMB1        ," ).append("\n"); 
		query.append("                      0 AS CMB2        ," ).append("\n"); 
		query.append("                      0 AS FC_TEU      ," ).append("\n"); 
		query.append("                      0 AS FC_20       ," ).append("\n"); 
		query.append("                      0 AS FC_40       ," ).append("\n"); 
		query.append("                      0 AS FC_HC       ," ).append("\n"); 
		query.append("                      0 AS FC_45       ," ).append("\n"); 
		query.append("                      0 AS FC_53       ," ).append("\n"); 
		query.append("                      0 AS FC_RF       ," ).append("\n"); 
		query.append("                      0 AS FC_WGT      ," ).append("\n"); 
		query.append("                      0 AS AP_TEU      ," ).append("\n"); 
		query.append("                      0 AS AP_20       ," ).append("\n"); 
		query.append("                      0 AS AP_40       ," ).append("\n"); 
		query.append("                      0 AS AP_HC       ," ).append("\n"); 
		query.append("                      0 AS AP_45       ," ).append("\n"); 
		query.append("                      0 AS AP_53       ," ).append("\n"); 
		query.append("                      0 AS AP_RF       ," ).append("\n"); 
		query.append("                      0 AS AP_WGT      ," ).append("\n"); 
		query.append("                      SUM(BKG_TTL_QTY)     AS BT_TEU," ).append("\n"); 
		query.append("                      SUM(BKG_20FT_QTY)    AS BT_20 ," ).append("\n"); 
		query.append("                      SUM(BKG_40FT_QTY)    AS BT_40 ," ).append("\n"); 
		query.append("                      SUM(BKG_40FT_HC_QTY) AS BT_HC ," ).append("\n"); 
		query.append("                      SUM(BKG_45FT_HC_QTY) AS BT_45 ," ).append("\n"); 
		query.append("                      SUM(BKG_53FT_QTY)    AS BT_53 ," ).append("\n"); 
		query.append("                      SUM(BKG_RF_QTY)      AS BT_RF ," ).append("\n"); 
		query.append("                      0                 AS BT_WGT,0 AS BKG_VOL_VGM, 0 AS BKG_WGT_VGM," ).append("\n"); 
		query.append("                      " ).append("\n"); 
		query.append("                      0 AS BS_TEU, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("                      0 AS BS_WGT, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                      CM_OP,   " ).append("\n"); 
		query.append("                      CM_OC,   " ).append("\n"); 
		query.append("                      CM_VL,   " ).append("\n"); 
		query.append("                      PAST       ," ).append("\n"); 
		query.append("                      -- 2014.07.22 컬럼 추가" ).append("\n"); 
		query.append("                      0 AS FC_D2  ," ).append("\n"); 
		query.append("                      0 AS FC_D4  ," ).append("\n"); 
		query.append("                      0 AS FC_RD  ," ).append("\n"); 
		query.append("                      SUM(BKG_D2FT_QTY) AS BT_D2  ," ).append("\n"); 
		query.append("                      SUM(BKG_D4FT_QTY) AS BT_D4  ," ).append("\n"); 
		query.append("                      SUM(BKG_RD_QTY) AS BT_RD  ," ).append("\n"); 
		query.append("                      0 AS AP_D2  ," ).append("\n"); 
		query.append("                      0 AS AP_D4  ," ).append("\n"); 
		query.append("                      0 AS AP_RD  ," ).append("\n"); 
		query.append("                      NULL AS CFM_FLG              ," ).append("\n"); 
		query.append("                      NULL AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("                      NULL AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("                      NULL AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("                 FROM (" ).append("\n"); 
		query.append("                         SELECT TRD_CD              ," ).append("\n"); 
		query.append("                                SUB_TRD_CD          ," ).append("\n"); 
		query.append("                                IOC_CD              ," ).append("\n"); 
		query.append("                                BASE_RHQ_CD         ," ).append("\n"); 
		query.append("                                US_MOD              ," ).append("\n"); 
		query.append("                                ACCOUNT_CD          ," ).append("\n"); 
		query.append("                                POL_CD              ," ).append("\n"); 
		query.append("                                POD_CD              ," ).append("\n"); 
		query.append("                                DEL_CD              ," ).append("\n"); 
		query.append("                                POL_SEQ             ," ).append("\n"); 
		query.append("                                POD_SEQ             ," ).append("\n"); 
		query.append("                                PAST                ," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(VAL,  1, 14), 0)) AS BKG_TTL_QTY    ," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(VAL, 15, 14), 0)) AS BKG_20FT_QTY   ," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(VAL, 29, 14), 0)) AS BKG_40FT_QTY   ," ).append("\n"); 
		query.append("                                --2014.07.22" ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(VAL, 43, 14), 0)) AS BKG_D2FT_QTY   ," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(VAL, 57, 14), 0)) AS BKG_D4FT_QTY   ," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(VAL, 71, 14), 0)) AS BKG_40FT_HC_QTY," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(VAL, 85, 14), 0)) AS BKG_45FT_HC_QTY," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(VAL, 99, 14), 0)) AS BKG_53FT_QTY   ," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(VAL, 113, 14), 0)) AS BKG_RF_QTY     ," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(VAL, 127, 14), 0)) AS BKG_RD_QTY     ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(CM_VAL,  1, 10), 0)) AS CM_OP	     ," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(CM_VAL, 11, 10), 0)) AS CM_OC	     ," ).append("\n"); 
		query.append("                                TO_NUMBER(NVL(SUBSTR(CM_VAL, 21, 10), 0)) AS CM_VL" ).append("\n"); 
		query.append("                           FROM (" ).append("\n"); 
		query.append("                                   SELECT D.TRD_CD               ," ).append("\n"); 
		query.append("                                          D.SUB_TRD_CD           ," ).append("\n"); 
		query.append("                                          'EQ'        AS IOC_CD    ," ).append("\n"); 
		query.append("                                          VPP.OFC_CD AS BASE_RHQ_CD," ).append("\n"); 
		query.append("                                          CASE WHEN M.CTRL_USA = 'Y' AND (SUBSTR(B.POL_CD,1,2) IN ('US','CA') OR SUBSTR(B.POD_CD,1,2) IN ('US','CA')) THEN" ).append("\n"); 
		query.append("                                                NVL(SPC_USA_MODE_FNC(B.RCV_TERM_CD, B.DE_TERM_CD, B.POR_CD, B.POL_CD, B.POD_CD, B.DEL_CD),'OTHERS') " ).append("\n"); 
		query.append("                                          ELSE" ).append("\n"); 
		query.append("                                               'OTHERS'" ).append("\n"); 
		query.append("                                          END AS US_MOD            ," ).append("\n"); 
		query.append("                                          'OTHERS' AS ACCOUNT_CD," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                           B.POL_CD ," ).append("\n"); 
		query.append("                                           B.POD_CD ," ).append("\n"); 
		query.append("                                           CASE WHEN M.CTRL_DEST <> 'N' THEN	                                                      " ).append("\n"); 
		query.append("                                                NVL((" ).append("\n"); 
		query.append("                                                    SELECT DISTINCT(D.CTRL_LOC_ACCT_CD)" ).append("\n"); 
		query.append("                                                      FROM SPC_ALOC_LANE_CTRL_OPT_DTL D" ).append("\n"); 
		query.append("                                                     WHERE D.RLANE_CD			= M.RLANE_CD" ).append("\n"); 
		query.append("                                                       AND D.TRD_CD				= SPC_GET_REP_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                                       AND D.SUB_TRD_CD			= SPC_GET_REP_SUB_TRD_FNC(M.RLANE_CD)" ).append("\n"); 
		query.append("                                                       AND D.DIR_CD 			= M.SKD_DIR_CD       " ).append("\n"); 
		query.append("                                                       AND D.ALOC_CTRL_TP_CD	= M.CTRL_DEST" ).append("\n"); 
		query.append("                                                       -- 2015.02.16 control office관련 setting 추가" ).append("\n"); 
		query.append("                                                       -- 2015.04.06 office가 입력되지 않은 case는 전체 office에 걸리도록 함." ).append("\n"); 
		query.append("                                                       AND (( SPC_SCR_OFC_CONV_FNC(B.OB_SLS_OFC_CD) IN " ).append("\n"); 
		query.append("                                                              (SELECT OFC.OFC_CD" ).append("\n"); 
		query.append("                                                                 FROM SPC_ALOC_LANE_CTRL_OFC OFC" ).append("\n"); 
		query.append("                                                                WHERE D.RLANE_CD           = OFC.RLANE_CD" ).append("\n"); 
		query.append("                                                                  AND D.TRD_CD             = OFC.TRD_CD" ).append("\n"); 
		query.append("                                                                  AND D.SUB_TRD_CD         = OFC.SUB_TRD_CD" ).append("\n"); 
		query.append("                                                                  AND D.DIR_CD             = OFC.DIR_CD " ).append("\n"); 
		query.append("                                                                  AND D.ALOC_CTRL_TP_CD    = OFC.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("                                                                  AND D.CTRL_LOC_ACCT_CD   = OFC.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                                                            ))" ).append("\n"); 
		query.append("                                                            OR ( NOT EXISTS " ).append("\n"); 
		query.append("                                                             ( SELECT 1" ).append("\n"); 
		query.append("                                                                 FROM SPC_ALOC_LANE_CTRL_OFC OFC_ALL" ).append("\n"); 
		query.append("                                                                WHERE D.RLANE_CD           = OFC_ALL.RLANE_CD" ).append("\n"); 
		query.append("                                                                AND D.TRD_CD             = OFC_ALL.TRD_CD" ).append("\n"); 
		query.append("                                                                AND D.SUB_TRD_CD         = OFC_ALL.SUB_TRD_CD" ).append("\n"); 
		query.append("                                                                AND D.DIR_CD             = OFC_ALL.DIR_CD " ).append("\n"); 
		query.append("                                                                AND D.ALOC_CTRL_TP_CD    = OFC_ALL.ALOC_CTRL_TP_CD" ).append("\n"); 
		query.append("                                                                AND D.CTRL_LOC_ACCT_CD   = OFC_ALL.CTRL_LOC_ACCT_CD" ).append("\n"); 
		query.append("                                                                )" ).append("\n"); 
		query.append("                                                            ))" ).append("\n"); 
		query.append("                                                       -- ECC GROUP 관련하여 비교 컬럼 변경" ).append("\n"); 
		query.append("                                                       AND DECODE(M.CTRL_DEST, 'E', D.CTRL_LOC_ACCT_CD, 'G', D.ALOC_CTRL_DTL_CD) = (SELECT DECODE(M.CTRL_DEST, 'E', A.ECC_CD, C.LOC_CD)" ).append("\n"); 
		query.append("                                                                                                                                      FROM MDM_EQ_ORZ_CHT A," ).append("\n"); 
		query.append("                                                                                                                                           MDM_LOCATION C " ).append("\n"); 
		query.append("                                                                                                                                     WHERE C.LOC_CD = DECODE(M.CTRL_DEST_LVL,'T', B.DEL_CD, B.POD_CD)" ).append("\n"); 
		query.append("                                                                                                                                       AND A.SCC_CD = C.SCC_CD)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                ),'OTHERS')" ).append("\n"); 
		query.append("                                            ELSE" ).append("\n"); 
		query.append("                                                'OTHERS'" ).append("\n"); 
		query.append("                                            END AS DEL_CD," ).append("\n"); 
		query.append("                                          VPP.POL_SEQ              ," ).append("\n"); 
		query.append("                                          VPP.POD_SEQ              ," ).append("\n"); 
		query.append("                                          VPP.PAST                 ," ).append("\n"); 
		query.append("                                          (" ).append("\n"); 
		query.append("                                             SELECT" ).append("\n"); 
		query.append("                                                       " ).append("\n"); 
		query.append("                                                       TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', 1, 2)*Q.OP_CNTR_QTY), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                                    || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                                    || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '4', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                                    --2014.07.22" ).append("\n"); 
		query.append("                                                    || TO_CHAR(SUM(DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,2), 'D2', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000') -- 20에 포함되어 있음" ).append("\n"); 
		query.append("				                                    || TO_CHAR(SUM(DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,2), 'D4', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000') " ).append("\n"); 
		query.append("                                                    || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '5', Q.OP_CNTR_QTY, '9', Q.OP_CNTR_QTY, '8', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')	--R9,R8에 대해서 R5과 동일하게 HC으로 처리되도록 추가" ).append("\n"); 
		query.append("                                                    || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '7', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                                    || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), 'W', Q.OP_CNTR_QTY, 0) + DECODE(SPC_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), 'X', Q.OP_CNTR_QTY, 0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                                    || TO_CHAR(SUM(DECODE(SPC_GET_CNTR_TP_FNC(Q.CNTR_TPSZ_CD), 'R', Q.OP_CNTR_QTY - Q.EQ_SUBST_CGO_QTY, 0)), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                                    --2014.07.22" ).append("\n"); 
		query.append("                                                    || TO_CHAR(SUM(CASE WHEN Q.CNTR_TPSZ_CD LIKE 'R%' AND Q.EQ_SUBST_CNTR_TPSZ_CD LIKE 'D%' THEN Q.EQ_SUBST_CGO_QTY ELSE 0 END), 'FM0000000000.000')" ).append("\n"); 
		query.append("                                               FROM BKG_QUANTITY Q" ).append("\n"); 
		query.append("                                              WHERE B.BKG_NO      = Q.BKG_NO" ).append("\n"); 
		query.append("                                                AND Q.OP_CNTR_QTY > 0" ).append("\n"); 
		query.append("                                          ) AS VAL," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("									      SPC_GET_OB_MVMT_FNC(B.BKG_NO, VPP.POL_PAST) AS CM_VAL" ).append("\n"); 
		query.append("                                     FROM BKG_BOOKING B  ," ).append("\n"); 
		query.append("                                          BKG_VVD     BV ," ).append("\n"); 
		query.append("                                          VSL_PORT_SKD VPP," ).append("\n"); 
		query.append("                                          MDM_DTL_REV_LANE D," ).append("\n"); 
		query.append("                                          BASE M" ).append("\n"); 
		query.append("                                    WHERE B.BKG_STS_CD   IN ('W', 'F')" ).append("\n"); 
		query.append("                                      AND B.BKG_CGO_TP_CD = 'P'" ).append("\n"); 
		query.append("                                      AND B.BKG_NO        = BV.BKG_NO" ).append("\n"); 
		query.append("                                      AND BV.VSL_CD       = VPP.VSL_CD" ).append("\n"); 
		query.append("                                      AND BV.SKD_VOY_NO   = VPP.SKD_VOY_NO" ).append("\n"); 
		query.append("                                      AND BV.SKD_DIR_CD   = VPP.SKD_DIR_CD" ).append("\n"); 
		query.append("                                      AND D.RLANE_CD = VPP.RLANE_CD" ).append("\n"); 
		query.append("                                      AND D.VSL_SLAN_DIR_CD = VPP.SKD_DIR_CD" ).append("\n"); 
		query.append("                                      AND D.FM_CONTI_CD = (SELECT SPC_CONTI_CONV_FNC(CONTI_CD, D.RLANE_CD)" ).append("\n"); 
		query.append("                                                             FROM MDM_LOCATION" ).append("\n"); 
		query.append("                                                            WHERE LOC_CD = SUBSTR(VPP.POL_CD, 1, 5))" ).append("\n"); 
		query.append("                                      AND D.TO_CONTI_CD = VPP.POD_CONTI" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                      AND ((BV.POL_CD = SUBSTR(VPP.POL_CD, 1, 5) AND BV.POL_CLPT_IND_SEQ = VPP.POL_PORT_SEQ) OR (BV.POL_YD_CD = VPP.POL_CD AND BV.POL_CLPT_IND_SEQ > 1 AND VPP.POL_PORT_MAX_SEQ = 1) OR (BV.POL_YD_CD = VPP.POL_CD AND BV.POL_CLPT_IND_SEQ = VPP.POL_PORT_MAX_SEQ))" ).append("\n"); 
		query.append("                                      AND ((BV.POD_CD = SUBSTR(VPP.POD_CD, 1, 5) AND BV.POD_CLPT_IND_SEQ = VPP.POD_PORT_SEQ) OR (BV.POD_YD_CD = VPP.POD_CD AND BV.POD_CLPT_IND_SEQ > 1 AND VPP.POD_PORT_MAX_SEQ = 1) OR (BV.POD_YD_CD = VPP.POD_CD AND BV.POD_CLPT_IND_SEQ = VPP.POD_PORT_MAX_SEQ))" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                      )  " ).append("\n"); 
		query.append("            GROUP BY TRD_CD           ," ).append("\n"); 
		query.append("                     SUB_TRD_CD       ," ).append("\n"); 
		query.append("                     BASE_RHQ_CD      ," ).append("\n"); 
		query.append("                     US_MOD           ," ).append("\n"); 
		query.append("                     ACCOUNT_CD       ," ).append("\n"); 
		query.append("                     IOC_CD           ," ).append("\n"); 
		query.append("                     POL_CD           ," ).append("\n"); 
		query.append("                     POD_CD           ," ).append("\n"); 
		query.append("                     DEL_CD           ," ).append("\n"); 
		query.append("                     POL_SEQ          ," ).append("\n"); 
		query.append("                     POD_SEQ          ," ).append("\n"); 
		query.append("                     CM_OP,   " ).append("\n"); 
		query.append("                     CM_OC,   " ).append("\n"); 
		query.append("                     CM_VL, " ).append("\n"); 
		query.append("                     PAST                 " ).append("\n"); 
		query.append("           ) U" ).append("\n"); 
		query.append("  GROUP BY U.BASE_RHQ_CD," ).append("\n"); 
		query.append("           U.RHQ_CD     ," ).append("\n"); 
		query.append("           U.IOC_CD     ," ).append("\n"); 
		query.append("           U.OFC_CD     ," ).append("\n"); 
		query.append("           U.US_MOD     ," ).append("\n"); 
		query.append("           U.ACCOUNT_CD ," ).append("\n"); 
		query.append("           U.POL_CD     ," ).append("\n"); 
		query.append("           U.POD_CD     ," ).append("\n"); 
		query.append("           U.DEL_CD     ," ).append("\n"); 
		query.append("           U.POL_SEQ    ," ).append("\n"); 
		query.append("           U.POD_SEQ    ," ).append("\n"); 
		query.append("           U.PAST" ).append("\n"); 
		query.append("#if (${all_pol} != 'Y')" ).append("\n"); 
		query.append("    HAVING U.IOC_CD LIKE 'T-%'" ).append("\n"); 
		query.append("        OR U.POD_CD = '00000'" ).append("\n"); 
		query.append("        OR ROUND(SUM(BKG_QUOTA), 1) > 0" ).append("\n"); 
		query.append("        OR ROUND(SUM(NVL(FC_TEU, 0) + NVL(FC_WGT, 0) + NVL(FC_HC, 0) + NVL(FC_45, 0) + NVL(FC_53, 0) + NVL(FC_RF, 0)), 1) > 0" ).append("\n"); 
		query.append("        OR ROUND(SUM(AP_TEU + AP_WGT), 1) > 0" ).append("\n"); 
		query.append("        OR ROUND(SUM(BT_TEU + BT_WGT), 1) > 0" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("#if (${all_pol} == 'Y')" ).append("\n"); 
		query.append("--IAS SECTOR 판매 활성화를 위한 POL-POD PAIR 로직 START" ).append("\n"); 
		query.append(", CMPR AS (" ).append("\n"); 
		query.append("       SELECT " ).append("\n"); 
		query.append("           SPC_GET_REP_TRD_FNC(V.RLANE_CD) AS TRD_CD," ).append("\n"); 
		query.append("           SPC_GET_REP_SUB_TRD_FNC(V.RLANE_CD) AS SUB_TRD_CD," ).append("\n"); 
		query.append("           T.RGN_OFC_CD AS OFC_CD, " ).append("\n"); 
		query.append("           T.IOC_TS_CD, " ).append("\n"); 
		query.append("           V.POL_CD, " ).append("\n"); 
		query.append("           V.POL_SEQ, " ).append("\n"); 
		query.append("           V.POD_CD,  " ).append("\n"); 
		query.append("           V.POD_SEQ," ).append("\n"); 
		query.append("           V.PAST                ," ).append("\n"); 
		query.append("--           V.LST_LODG_PORT_CD    ," ).append("\n"); 
		query.append("--           V.LST_LODG_PORT_ETD_DT,   " ).append("\n"); 
		query.append("--           V.REP_TRD_CD    ," ).append("\n"); 
		query.append("--           V.REP_SUB_TRD_CD," ).append("\n"); 
		query.append("--           V.TRD_CD        ," ).append("\n"); 
		query.append("--           V.SUB_TRD_CD    , " ).append("\n"); 
		query.append("           V.RLANE_CD           ," ).append("\n"); 
		query.append("           V.OFC_CD   AS BASE_RHQ_CD," ).append("\n"); 
		query.append("           OV.N2ND_PRNT_OFC_CD AS RHQ_CD     ," ).append("\n"); 
		query.append("           OV.N3RD_PRNT_OFC_CD AS AREA_CD    ," ).append("\n"); 
		query.append("           (SELECT DECODE(COUNT(*),0,0,1)" ).append("\n"); 
		query.append("              FROM SPC_ALOC_POL_POD K" ).append("\n"); 
		query.append("             WHERE K.RLANE_CD = V.RLANE_CD" ).append("\n"); 
		query.append("               AND K.DIR_CD = V.DIR_CD" ).append("\n"); 
		query.append("               AND K.VSL_CD = V.VSL_CD" ).append("\n"); 
		query.append("               AND K.SKD_VOY_NO = V.SKD_VOY_NO" ).append("\n"); 
		query.append("               AND K.SKD_DIR_CD = V.SKD_DIR_CD" ).append("\n"); 
		query.append("               AND K.SLS_OFC_CD = T.SUB_OFC_CD" ).append("\n"); 
		query.append("               AND K.POL_YD_CD = V.POL_CD" ).append("\n"); 
		query.append("               AND K.POD_YD_CD = V.POD_CD" ).append("\n"); 
		query.append("               AND K.TS_FLG = DECODE(T.IOC_TS_CD,'T','Y','N')" ).append("\n"); 
		query.append("               AND K.IOC_CD = DECODE(T.IOC_TS_CD,'T','I',T.IOC_TS_CD)" ).append("\n"); 
		query.append("           ) AS AP_MD," ).append("\n"); 
		query.append("           1 AS OTH_MD," ).append("\n"); 
		query.append("           1 AS NQTA_MD," ).append("\n"); 
		query.append("           1 AS NCFM_MD" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("              SELECT M.SLS_OFC_CD     AS SUB_OFC_CD," ).append("\n"); 
		query.append("                     M.SLS_RGN_OFC_CD AS RGN_OFC_CD," ).append("\n"); 
		query.append("                     M.POL_CD," ).append("\n"); 
		query.append("                     M.IOC_TS_CD " ).append("\n"); 
		query.append("                FROM REP_VVDS               V," ).append("\n"); 
		query.append("                     SPC_FCAST_OFC_POL_MAPG M," ).append("\n"); 
		query.append("                     (SELECT distinct a.ioc_cd, a.ofc_cd FROM ALL_DATA A WHERE A.IOC_CD <> 'O') P" ).append("\n"); 
		query.append("               WHERE M.REP_TRD_CD     = V.REP_TRD_CD" ).append("\n"); 
		query.append("                 AND M.REP_SUB_TRD_CD = V.REP_SUB_TRD_CD" ).append("\n"); 
		query.append("--                 AND M.TRD_CD         = V.TRD_CD" ).append("\n"); 
		query.append("--                 AND M.SUB_TRD_CD     = V.SUB_TRD_CD" ).append("\n"); 
		query.append("                 AND M.RLANE_CD       = V.RLANE_CD" ).append("\n"); 
		query.append("                 AND M.DIR_CD         = V.DIR_CD" ).append("\n"); 
		query.append("                 AND P.IOC_CD = DECODE(M.IOC_TS_CD,'T','I',M.IOC_TS_CD)" ).append("\n"); 
		query.append("                 AND P.OFC_CD = M.SLS_OFC_CD" ).append("\n"); 
		query.append("                 AND M.BSE_YRWK       = ( SELECT /*+ INDEX_DESC(MI XPKSPC_FCAST_OFC_POL_MAPG) */" ).append("\n"); 
		query.append("                                                 MI.BSE_YRWK" ).append("\n"); 
		query.append("                                            FROM SPC_FCAST_OFC_POL_MAPG MI" ).append("\n"); 
		query.append("                                           WHERE MI.REP_TRD_CD     = M.REP_TRD_CD" ).append("\n"); 
		query.append("                                             AND MI.REP_SUB_TRD_CD = M.REP_SUB_TRD_CD" ).append("\n"); 
		query.append("                                             AND MI.RLANE_CD       = M.RLANE_CD" ).append("\n"); 
		query.append("                                             AND MI.DIR_CD         = M.DIR_CD" ).append("\n"); 
		query.append("                                             AND MI.IOC_TS_CD      = M.IOC_TS_CD" ).append("\n"); 
		query.append("                                             AND MI.SLS_OFC_CD     = M.SLS_OFC_CD" ).append("\n"); 
		query.append("                                             AND MI.BSE_YRWK      <= COST_YR||COST_WK" ).append("\n"); 
		query.append("                                             AND ROWNUM = 1 )" ).append("\n"); 
		query.append("              UNION ALL" ).append("\n"); 
		query.append("              SELECT M.SLS_OFC_CD      AS SUB_OFC_CD," ).append("\n"); 
		query.append("                     M.SLS_RGN_OFC_CD  AS RGN_OFC_CD," ).append("\n"); 
		query.append("                     M.POL_CD," ).append("\n"); 
		query.append("                     M.IOC_TS_CD     " ).append("\n"); 
		query.append("                FROM REP_VVDS                   V," ).append("\n"); 
		query.append("                     SPC_IRR_FCAST_OFC_POL_MAPG M," ).append("\n"); 
		query.append("                    (SELECT distinct a.ioc_cd, a.ofc_cd FROM ALL_DATA A WHERE A.IOC_CD <> 'O') P" ).append("\n"); 
		query.append("--               WHERE M.REP_TRD_CD     = V.REP_TRD_CD" ).append("\n"); 
		query.append("--               AND M.REP_SUB_TRD_CD = V.REP_SUB_TRD_CD" ).append("\n"); 
		query.append("--               AND M.TRD_CD         = V.TRD_CD" ).append("\n"); 
		query.append("--               AND M.SUB_TRD_CD     = V.SUB_TRD_CD" ).append("\n"); 
		query.append("               WHERE 1 = 1" ).append("\n"); 
		query.append("                 AND M.RLANE_CD       = V.RLANE_CD" ).append("\n"); 
		query.append("                 AND M.DIR_CD         = V.DIR_CD" ).append("\n"); 
		query.append("                 AND P.IOC_CD = DECODE(M.IOC_TS_CD,'T','I',M.IOC_TS_CD)" ).append("\n"); 
		query.append("                 AND M.VSL_CD         = V.VSL_CD" ).append("\n"); 
		query.append("                 AND M.SKD_VOY_NO     = V.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND M.SKD_DIR_CD     = V.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND P.OFC_CD = M.SLS_OFC_CD" ).append("\n"); 
		query.append("    ) T, " ).append("\n"); 
		query.append("    VSL_PORT_SKD   V," ).append("\n"); 
		query.append("    SPC_OFC_LVL   OV " ).append("\n"); 
		query.append("    WHERE T.POL_CD = SUBSTR( V.POL_CD ,1 ,5)" ).append("\n"); 
		query.append("      AND T.RGN_OFC_CD = OV.OFC_CD" ).append("\n"); 
		query.append("      AND V.IOC_CD = DECODE(T.IOC_TS_CD,'T','I',T.IOC_TS_CD)" ).append("\n"); 
		query.append("--      AND V.COST_YR||V.COST_WK BETWEEN OV.OFC_APLY_FM_YRWK AND OV.OFC_APLY_TO_YRWK" ).append("\n"); 
		query.append("#if (${office} == '')" ).append("\n"); 
		query.append("      AND (    V.POL_CONTI = V.OFC_CONTI" ).append("\n"); 
		query.append("            OR V.OFC_CD    = OV.N2ND_PRNT_OFC_CD" ).append("\n"); 
		query.append("            OR V.RLANE_CD = 'WAFIE' " ).append("\n"); 
		query.append("            OR OV.N2ND_PRNT_OFC_CD = 'SINRS' )" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("      AND (    V.POL_CONTI = V.OFC_CONTI" ).append("\n"); 
		query.append("            OR V.OFC_CD    = OV.N2ND_PRNT_OFC_CD" ).append("\n"); 
		query.append("            OR V.RLANE_CD = 'WAFIE' " ).append("\n"); 
		query.append("            OR (V.OFC_CD = 'SINRS' AND V.RLANE_CD = 'WAXIA') )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(", ALL_DATA2 AS (" ).append("\n"); 
		query.append("    SELECT TRD_CD     ," ).append("\n"); 
		query.append("           SUB_TRD_CD   ," ).append("\n"); 
		query.append("           BASE_RHQ_CD  ," ).append("\n"); 
		query.append("           RHQ_CD       ," ).append("\n"); 
		query.append("           IOC_CD       ," ).append("\n"); 
		query.append("           OFC_CD       ," ).append("\n"); 
		query.append("           US_MOD       ," ).append("\n"); 
		query.append("           ACCOUNT_CD   ," ).append("\n"); 
		query.append("           POL_CD       ," ).append("\n"); 
		query.append("           POD_CD       ," ).append("\n"); 
		query.append("           DEL_CD       ," ).append("\n"); 
		query.append("           POL_SEQ      ," ).append("\n"); 
		query.append("           POD_SEQ      ," ).append("\n"); 
		query.append("           MAX(BKG_QUOTA) AS BKG_QUOTA," ).append("\n"); 
		query.append("           MAX(BKG_QTA_CMB) AS BKG_QTA_CMB," ).append("\n"); 
		query.append("           MAX(CMB1)   AS CMB1  ," ).append("\n"); 
		query.append("           MAX(CMB2)   AS CMB2  ," ).append("\n"); 
		query.append("           MAX(FC_TEU) AS FC_TEU," ).append("\n"); 
		query.append("           MAX(FC_20)  AS FC_20 ," ).append("\n"); 
		query.append("           MAX(FC_40)  AS FC_40 ," ).append("\n"); 
		query.append("           MAX(FC_HC)  AS FC_HC ," ).append("\n"); 
		query.append("           MAX(FC_45)  AS FC_45 ," ).append("\n"); 
		query.append("           MAX(FC_53)  AS FC_53 ," ).append("\n"); 
		query.append("           MAX(FC_RF)  AS FC_RF ," ).append("\n"); 
		query.append("           MAX(FC_WGT) AS FC_WGT," ).append("\n"); 
		query.append("           MAX(AP_TEU) AS AP_TEU," ).append("\n"); 
		query.append("           MAX(AP_20)  AS AP_20 ," ).append("\n"); 
		query.append("           MAX(AP_40)  AS AP_40 ," ).append("\n"); 
		query.append("           MAX(AP_HC)  AS AP_HC ," ).append("\n"); 
		query.append("           MAX(AP_45)  AS AP_45 ," ).append("\n"); 
		query.append("           MAX(AP_53)  AS AP_53 ," ).append("\n"); 
		query.append("           MAX(AP_RF)  AS AP_RF ," ).append("\n"); 
		query.append("           MAX(AP_WGT) AS AP_WGT," ).append("\n"); 
		query.append("           MAX(BT_TEU) AS BT_TEU," ).append("\n"); 
		query.append("           MAX(BT_20)  AS BT_20 ," ).append("\n"); 
		query.append("           MAX(BT_40)  AS BT_40 ," ).append("\n"); 
		query.append("           MAX(BT_HC)  AS BT_HC ," ).append("\n"); 
		query.append("           MAX(BT_45)  AS BT_45 ," ).append("\n"); 
		query.append("           MAX(BT_53)  AS BT_53 ," ).append("\n"); 
		query.append("           MAX(BT_RF)  AS BT_RF ," ).append("\n"); 
		query.append("           MAX(BT_WGT) AS BT_WGT,MAX(BKG_VOL_VGM) AS BKG_VOL_VGM,MAX(BKG_WGT_VGM) AS BKG_WGT_VGM," ).append("\n"); 
		query.append("           MAX(BS_TEU) AS BS_TEU,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("           MAX(BS_WGT) AS BS_WGT,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("           MAX(CM_OP)  AS CM_OP ,   " ).append("\n"); 
		query.append("           MAX(CM_OC)  AS CM_OC ,   " ).append("\n"); 
		query.append("           MAX(CM_VL)  AS CM_VL ," ).append("\n"); 
		query.append("           MAX(AP_MD)  AS AP_MD ," ).append("\n"); 
		query.append("           MAX(PAST)   AS PAST  ," ).append("\n"); 
		query.append("           MAX(FC_D2)          AS FC_D2  ," ).append("\n"); 
		query.append("           MAX(FC_D4)          AS FC_D4  ," ).append("\n"); 
		query.append("           MAX(FC_RD)          AS FC_RD  ," ).append("\n"); 
		query.append("           MAX(BT_D2)          AS BT_D2  ," ).append("\n"); 
		query.append("           MAX(BT_D4)          AS BT_D4  ," ).append("\n"); 
		query.append("           MAX(BT_RD)          AS BT_RD  ," ).append("\n"); 
		query.append("           MAX(AP_D2)          AS AP_D2  ," ).append("\n"); 
		query.append("           MAX(AP_D4)          AS AP_D4  ," ).append("\n"); 
		query.append("           MAX(AP_RD)          AS AP_RD  ," ).append("\n"); 
		query.append("           MAX(CFM_FLG)        AS CFM_FLG," ).append("\n"); 
		query.append("           MAX(SPC_CTRL_ALOC_RMK)     AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("           MAX(SPC_CTRL_ALOC_POL_RMK) AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("           MAX(SPC_CTRL_ALOC_POD_RMK) AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("        SELECT TRD_CD     ," ).append("\n"); 
		query.append("           SUB_TRD_CD     ," ).append("\n"); 
		query.append("           BASE_RHQ_CD  ," ).append("\n"); 
		query.append("           RHQ_CD       ," ).append("\n"); 
		query.append("           IOC_TS_CD AS IOC_CD       ," ).append("\n"); 
		query.append("           OFC_CD       ," ).append("\n"); 
		query.append("           U.CTRL_LOC_ACCT_CD  AS US_MOD, " ).append("\n"); 
		query.append("           A.CTRL_LOC_ACCT_CD AS ACCOUNT_CD, " ).append("\n"); 
		query.append("           POL_CD, " ).append("\n"); 
		query.append("           POD_CD, " ).append("\n"); 
		query.append("           D.CTRL_LOC_ACCT_CD AS DEL_CD, " ).append("\n"); 
		query.append("           POL_SEQ      ," ).append("\n"); 
		query.append("           POD_SEQ      ," ).append("\n"); 
		query.append("           0 AS BKG_QUOTA," ).append("\n"); 
		query.append("           0 AS BKG_QTA_CMB," ).append("\n"); 
		query.append("           0 AS CMB1  ," ).append("\n"); 
		query.append("           0 AS CMB2  ," ).append("\n"); 
		query.append("           0 AS FC_TEU," ).append("\n"); 
		query.append("           0 AS FC_20 ," ).append("\n"); 
		query.append("           0 AS FC_40 ," ).append("\n"); 
		query.append("           0 AS FC_HC ," ).append("\n"); 
		query.append("           0 AS FC_45 ," ).append("\n"); 
		query.append("           0 AS FC_53 ," ).append("\n"); 
		query.append("           0 AS FC_RF ," ).append("\n"); 
		query.append("           0 AS FC_WGT," ).append("\n"); 
		query.append("           0 AS AP_TEU," ).append("\n"); 
		query.append("           0 AS AP_20 ," ).append("\n"); 
		query.append("           0 AS AP_40 ," ).append("\n"); 
		query.append("           0 AS AP_HC ," ).append("\n"); 
		query.append("           0 AS AP_45 ," ).append("\n"); 
		query.append("           0 AS AP_53 ," ).append("\n"); 
		query.append("           0 AS AP_RF ," ).append("\n"); 
		query.append("           0 AS AP_WGT," ).append("\n"); 
		query.append("           0 AS BT_TEU," ).append("\n"); 
		query.append("           0 AS BT_20 ," ).append("\n"); 
		query.append("           0 AS BT_40 ," ).append("\n"); 
		query.append("           0 AS BT_HC ," ).append("\n"); 
		query.append("           0 AS BT_45 ," ).append("\n"); 
		query.append("           0 AS BT_53 ," ).append("\n"); 
		query.append("           0 AS BT_RF ," ).append("\n"); 
		query.append("           0 AS BT_WGT,0 AS BKG_VOL_VGM,0 AS BKG_WGT_VGM," ).append("\n"); 
		query.append("           0 AS BS_TEU, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("           0 AS BS_WGT, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("           0 AS CM_OP ,   " ).append("\n"); 
		query.append("           0 AS CM_OC ,   " ).append("\n"); 
		query.append("           0 AS CM_VL ," ).append("\n"); 
		query.append("           0 AS AP_MD ," ).append("\n"); 
		query.append("           PAST  ," ).append("\n"); 
		query.append("           0 AS FC_D2  ," ).append("\n"); 
		query.append("           0 AS FC_D4  ," ).append("\n"); 
		query.append("           0 AS FC_RD  ," ).append("\n"); 
		query.append("           0 AS BT_D2  ," ).append("\n"); 
		query.append("           0 AS BT_D4  ," ).append("\n"); 
		query.append("           0 AS BT_RD  ," ).append("\n"); 
		query.append("           0 AS AP_D2  ," ).append("\n"); 
		query.append("           0 AS AP_D4  ," ).append("\n"); 
		query.append("           0 AS AP_RD  ," ).append("\n"); 
		query.append("           NULL AS CFM_FLG," ).append("\n"); 
		query.append("           NULL AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("           NULL AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("           NULL AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("          FROM CMPR C," ).append("\n"); 
		query.append("               CONTROL_OPT U," ).append("\n"); 
		query.append("               CONTROL_OPT A," ).append("\n"); 
		query.append("               CONTROL_OPT D" ).append("\n"); 
		query.append("         WHERE U.ALOC_CTRL_TP_CD = 'U'" ).append("\n"); 
		query.append("           AND A.ALOC_CTRL_TP_CD = 'A'" ).append("\n"); 
		query.append("           AND D.ALOC_CTRL_TP_CD IN ('L', 'E')" ).append("\n"); 
		query.append("        UNION ALL	" ).append("\n"); 
		query.append("	SELECT TRD_CD     ," ).append("\n"); 
		query.append("           SUB_TRD_CD     ," ).append("\n"); 
		query.append("           BASE_RHQ_CD  ," ).append("\n"); 
		query.append("           RHQ_CD       ," ).append("\n"); 
		query.append("           IOC_CD       ," ).append("\n"); 
		query.append("           OFC_CD       ," ).append("\n"); 
		query.append("           US_MOD       ," ).append("\n"); 
		query.append("           ACCOUNT_CD   ," ).append("\n"); 
		query.append("           POL_CD       ," ).append("\n"); 
		query.append("           POD_CD       ," ).append("\n"); 
		query.append("           DEL_CD       ," ).append("\n"); 
		query.append("           POL_SEQ      ," ).append("\n"); 
		query.append("           POD_SEQ      ," ).append("\n"); 
		query.append("           BKG_QUOTA    ," ).append("\n"); 
		query.append("           BKG_QTA_CMB  ," ).append("\n"); 
		query.append("           CMB1  ," ).append("\n"); 
		query.append("           CMB2  ," ).append("\n"); 
		query.append("           FC_TEU," ).append("\n"); 
		query.append("           FC_20 ," ).append("\n"); 
		query.append("           FC_40 ," ).append("\n"); 
		query.append("           FC_HC ," ).append("\n"); 
		query.append("           FC_45 ," ).append("\n"); 
		query.append("           FC_53 ," ).append("\n"); 
		query.append("           FC_RF ," ).append("\n"); 
		query.append("           FC_WGT," ).append("\n"); 
		query.append("           AP_TEU," ).append("\n"); 
		query.append("           AP_20 ," ).append("\n"); 
		query.append("           AP_40 ," ).append("\n"); 
		query.append("           AP_HC ," ).append("\n"); 
		query.append("           AP_45 ," ).append("\n"); 
		query.append("           AP_53 ," ).append("\n"); 
		query.append("           AP_RF ," ).append("\n"); 
		query.append("           AP_WGT," ).append("\n"); 
		query.append("           BT_TEU," ).append("\n"); 
		query.append("           BT_20 ," ).append("\n"); 
		query.append("           BT_40 ," ).append("\n"); 
		query.append("           BT_HC ," ).append("\n"); 
		query.append("           BT_45 ," ).append("\n"); 
		query.append("           BT_53 ," ).append("\n"); 
		query.append("           BT_RF ," ).append("\n"); 
		query.append("           BT_WGT, BKG_VOL_VGM,BKG_WGT_VGM," ).append("\n"); 
		query.append("           BS_TEU,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("           BS_WGT,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("           CM_OP ,   " ).append("\n"); 
		query.append("           CM_OC ,   " ).append("\n"); 
		query.append("           CM_VL ," ).append("\n"); 
		query.append("           AP_MD ," ).append("\n"); 
		query.append("           PAST  ," ).append("\n"); 
		query.append("           FC_D2  ," ).append("\n"); 
		query.append("           FC_D4  ," ).append("\n"); 
		query.append("           FC_RD  ," ).append("\n"); 
		query.append("           BT_D2  ," ).append("\n"); 
		query.append("           BT_D4  ," ).append("\n"); 
		query.append("           BT_RD  ," ).append("\n"); 
		query.append("           AP_D2  ," ).append("\n"); 
		query.append("           AP_D4  ," ).append("\n"); 
		query.append("           AP_RD  ," ).append("\n"); 
		query.append("           CFM_FLG," ).append("\n"); 
		query.append("           SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("           SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("           SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("          FROM ALL_DATA" ).append("\n"); 
		query.append("          " ).append("\n"); 
		query.append("          UNION ALL	" ).append("\n"); 
		query.append("	SELECT TRD_CD     ," ).append("\n"); 
		query.append("           SUB_TRD_CD     ," ).append("\n"); 
		query.append("           BASE_RHQ_CD  ," ).append("\n"); 
		query.append("           RHQ_CD       ," ).append("\n"); 
		query.append("           IOC_CD       ," ).append("\n"); 
		query.append("           OFC_CD       ," ).append("\n"); 
		query.append("           U.CTRL_LOC_ACCT_CD  AS US_MOD, " ).append("\n"); 
		query.append("           A.CTRL_LOC_ACCT_CD AS ACCOUNT_CD, " ).append("\n"); 
		query.append("           POL_CD, POD_CD, " ).append("\n"); 
		query.append("           D.CTRL_LOC_ACCT_CD AS DEL_CD,  " ).append("\n"); 
		query.append("           POL_SEQ      ," ).append("\n"); 
		query.append("           POD_SEQ      ," ).append("\n"); 
		query.append("           0 AS BKG_QUOTA," ).append("\n"); 
		query.append("           0 AS BKG_QTA_CMB," ).append("\n"); 
		query.append("           0 AS CMB1  ," ).append("\n"); 
		query.append("           0 AS CMB2  ," ).append("\n"); 
		query.append("           0 AS FC_TEU," ).append("\n"); 
		query.append("           0 AS FC_20 ," ).append("\n"); 
		query.append("           0 AS FC_40 ," ).append("\n"); 
		query.append("           0 AS FC_HC ," ).append("\n"); 
		query.append("           0 AS FC_45 ," ).append("\n"); 
		query.append("           0 AS FC_53 ," ).append("\n"); 
		query.append("           0 AS FC_RF ," ).append("\n"); 
		query.append("           0 AS FC_WGT," ).append("\n"); 
		query.append("           0 AS AP_TEU," ).append("\n"); 
		query.append("           0 AS AP_20 ," ).append("\n"); 
		query.append("           0 AS AP_40 ," ).append("\n"); 
		query.append("           0 AS AP_HC ," ).append("\n"); 
		query.append("           0 AS AP_45 ," ).append("\n"); 
		query.append("           0 AS AP_53 ," ).append("\n"); 
		query.append("           0 AS AP_RF ," ).append("\n"); 
		query.append("           0 AS AP_WGT," ).append("\n"); 
		query.append("           0 AS BT_TEU," ).append("\n"); 
		query.append("           0 AS BT_20 ," ).append("\n"); 
		query.append("           0 AS BT_40 ," ).append("\n"); 
		query.append("           0 AS BT_HC ," ).append("\n"); 
		query.append("           0 AS BT_45 ," ).append("\n"); 
		query.append("           0 AS BT_53 ," ).append("\n"); 
		query.append("           0 AS BT_RF ," ).append("\n"); 
		query.append("           0 AS BT_WGT, 0 AS BKG_VOL_VGM,0 AS BKG_WGT_VGM," ).append("\n"); 
		query.append("           0 AS BS_TEU, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("           0 AS BS_WGT, --2015.04.30 KIMSW," ).append("\n"); 
		query.append("           0 AS CM_OP ,   " ).append("\n"); 
		query.append("           0 AS CM_OC ,   " ).append("\n"); 
		query.append("           0 AS CM_VL ," ).append("\n"); 
		query.append("           0 AS AP_MD ," ).append("\n"); 
		query.append("           PAST  ," ).append("\n"); 
		query.append("           0 AS FC_D2  ," ).append("\n"); 
		query.append("           0 AS FC_D4  ," ).append("\n"); 
		query.append("           0 AS FC_RD  ," ).append("\n"); 
		query.append("           0 AS BT_D2  ," ).append("\n"); 
		query.append("           0 AS BT_D4  ," ).append("\n"); 
		query.append("           0 AS BT_RD  ," ).append("\n"); 
		query.append("           0 AS AP_D2  ," ).append("\n"); 
		query.append("           0 AS AP_D4  ," ).append("\n"); 
		query.append("           0 AS AP_RD  ," ).append("\n"); 
		query.append("           NULL AS CFM_FLG," ).append("\n"); 
		query.append("           NULL AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("           NULL AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("           NULL AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("          FROM ALL_DATA C," ).append("\n"); 
		query.append("               CONTROL_OPT U," ).append("\n"); 
		query.append("               CONTROL_OPT A," ).append("\n"); 
		query.append("               CONTROL_OPT D" ).append("\n"); 
		query.append("         WHERE U.ALOC_CTRL_TP_CD = 'U'" ).append("\n"); 
		query.append("           AND A.ALOC_CTRL_TP_CD = 'A' " ).append("\n"); 
		query.append("           AND D.ALOC_CTRL_TP_CD IN ('L', 'E') " ).append("\n"); 
		query.append("          )" ).append("\n"); 
		query.append("GROUP BY   TRD_CD     ," ).append("\n"); 
		query.append("           SUB_TRD_CD     ," ).append("\n"); 
		query.append("           BASE_RHQ_CD  ," ).append("\n"); 
		query.append("           RHQ_CD       ," ).append("\n"); 
		query.append("           IOC_CD       ," ).append("\n"); 
		query.append("           OFC_CD       ," ).append("\n"); 
		query.append("           US_MOD       ," ).append("\n"); 
		query.append("           ACCOUNT_CD   ," ).append("\n"); 
		query.append("           POL_CD       ," ).append("\n"); 
		query.append("           POD_CD       ," ).append("\n"); 
		query.append("           DEL_CD       ," ).append("\n"); 
		query.append("           POL_SEQ      ," ).append("\n"); 
		query.append("           POD_SEQ      " ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append(", HRCH_DATA AS (" ).append("\n"); 
		query.append("  SELECT MAX(TRD_CD)     AS TRD_CD    ," ).append("\n"); 
		query.append("         MAX(SUB_TRD_CD) AS SUB_TRD_CD," ).append("\n"); 
		query.append("         BASE_RHQ_CD," ).append("\n"); 
		query.append("         RHQ_CD     ," ).append("\n"); 
		query.append("         US_MOD     ," ).append("\n"); 
		query.append("         ACCOUNT_CD ," ).append("\n"); 
		query.append("         CASE" ).append("\n"); 
		query.append("            WHEN RHQ_CD IS NOT NULL AND OFC_CD IS NULL AND POL_CD IS NULL AND POD_CD IS NULL THEN 'Y'" ).append("\n"); 
		query.append("            ELSE 'N'" ).append("\n"); 
		query.append("         END AS FLG," ).append("\n"); 
		query.append("         IOC_CD     ," ).append("\n"); 
		query.append("         NVL(OFC_CD, '+') AS OFC_CD   ," ).append("\n"); 
		query.append("         NVL(POL_CD, '+') AS POL_CD   ," ).append("\n"); 
		query.append("         NVL(POD_CD, '+') AS POD_CD   ," ).append("\n"); 
		query.append("         NVL(DEL_CD, '+') AS DEL_CD   ," ).append("\n"); 
		query.append("         POL_SEQ," ).append("\n"); 
		query.append("         POD_SEQ," ).append("\n"); 
		query.append("         SUM(BKG_QUOTA)   AS BKG_QUOTA," ).append("\n"); 
		query.append("         SUM(BKG_QTA_CMB) / DECODE(SUM(BKG_QUOTA), 0, 1, SUM(BKG_QUOTA)) AS BKG_QTA_CMB," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = NVL(NVL(Z.OFC_CD, Z.RHQ_CD), '00000')" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = NVL(SUBSTR(Z.POL_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = NVL(SUBSTR(Z.POD_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = NVL(Z.US_MOD, '00000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = NVL(Z.ACCOUNT_CD, '000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("         ) AS CMB," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = NVL(NVL(Z.OFC_CD, Z.RHQ_CD), '00000')" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = NVL(SUBSTR(Z.POL_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = NVL(SUBSTR(Z.POD_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = NVL(Z.US_MOD, '00000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = NVL(Z.ACCOUNT_CD, '000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("         ) AS CMB_WGT," ).append("\n"); 
		query.append("         -- 주차별 CMB" ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = NVL(NVL(Z.OFC_CD, Z.RHQ_CD), '00000')" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = NVL(SUBSTR(Z.POL_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = NVL(SUBSTR(Z.POD_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = NVL(Z.US_MOD, '00000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = NVL(Z.ACCOUNT_CD, '000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 1" ).append("\n"); 
		query.append("         ) AS CMB1," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = NVL(NVL(Z.OFC_CD, Z.RHQ_CD), '00000')" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = NVL(SUBSTR(Z.POL_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = NVL(SUBSTR(Z.POD_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = NVL(Z.US_MOD, '00000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = NVL(Z.ACCOUNT_CD, '000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 2" ).append("\n"); 
		query.append("         ) AS CMB2," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = NVL(NVL(Z.OFC_CD, Z.RHQ_CD), '00000')" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = NVL(SUBSTR(Z.POL_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = NVL(SUBSTR(Z.POD_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = NVL(Z.US_MOD, '00000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = NVL(Z.ACCOUNT_CD, '000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 3" ).append("\n"); 
		query.append("         ) AS CMB3," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = NVL(NVL(Z.OFC_CD, Z.RHQ_CD), '00000')" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = NVL(SUBSTR(Z.POL_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = NVL(SUBSTR(Z.POD_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = NVL(Z.US_MOD, '00000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = NVL(Z.ACCOUNT_CD, '000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 4" ).append("\n"); 
		query.append("         ) AS CMB4," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = NVL(NVL(Z.OFC_CD, Z.RHQ_CD), '00000')" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = NVL(SUBSTR(Z.POL_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = NVL(SUBSTR(Z.POD_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = NVL(Z.US_MOD, '00000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = NVL(Z.ACCOUNT_CD, '000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 1" ).append("\n"); 
		query.append("         ) AS CMB_WGT1," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = NVL(NVL(Z.OFC_CD, Z.RHQ_CD), '00000')" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = NVL(SUBSTR(Z.POL_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = NVL(SUBSTR(Z.POD_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = NVL(Z.US_MOD, '00000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = NVL(Z.ACCOUNT_CD, '000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 2" ).append("\n"); 
		query.append("         ) AS CMB_WGT2," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = NVL(NVL(Z.OFC_CD, Z.RHQ_CD), '00000')" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = NVL(SUBSTR(Z.POL_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = NVL(SUBSTR(Z.POD_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = NVL(Z.US_MOD, '00000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = NVL(Z.ACCOUNT_CD, '000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 3" ).append("\n"); 
		query.append("         ) AS CMB_WGT3," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) + SUM(BAR.DMDT_COM_AMT) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = NVL(NVL(Z.OFC_CD, Z.RHQ_CD), '00000')" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = NVL(SUBSTR(Z.POL_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = NVL(SUBSTR(Z.POD_CD, 1, 5), '00000')" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = NVL(Z.US_MOD, '00000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = NVL(Z.ACCOUNT_CD, '000')" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 4" ).append("\n"); 
		query.append("         ) AS CMB_WGT4," ).append("\n"); 
		query.append("         " ).append("\n"); 
		query.append("         DECODE(SUM(CMB2), 0, 0, SUM(CMB1) / SUM(CMB2)) AS FCT_CMB," ).append("\n"); 
		query.append("         (SUM(DECODE(@[fcast], '2', NVL(FC_TEU, 0) + NVL(FC_HC, 0) * 2 + NVL(FC_45, 0) * 2 + NVL(FC_53, 0) * 2," ).append("\n"); 
		query.append("                               '3', NVL(FC_TEU, 0)," ).append("\n"); 
		query.append("                               '1', DECODE(PAST, 'Y', NVL(FC_TEU, 0), NVL(FC_TEU, 0) + NVL(FC_HC, 0) * 2 + NVL(FC_45, 0) * 2 + NVL(FC_53, 0) * 2)))" ).append("\n"); 
		query.append("         ) AS FC_TTL_TEU," ).append("\n"); 
		query.append("         SUM(FC_TEU) AS FC_TEU," ).append("\n"); 
		query.append("         SUM(FC_20)  AS FC_20 ," ).append("\n"); 
		query.append("         SUM(FC_D2)  AS FC_D2 ," ).append("\n"); 
		query.append("         SUM(FC_40)  AS FC_40 ," ).append("\n"); 
		query.append("         SUM(FC_D4)  AS FC_D4 ," ).append("\n"); 
		query.append("         SUM(FC_HC)  AS FC_HC ," ).append("\n"); 
		query.append("         SUM(FC_45)  AS FC_45 ," ).append("\n"); 
		query.append("         SUM(FC_53)  AS FC_53 ," ).append("\n"); 
		query.append("         SUM(FC_RF)  AS FC_RF ," ).append("\n"); 
		query.append("         SUM(FC_RD)  AS FC_RD ," ).append("\n"); 
		query.append("         SUM(FC_WGT) AS FC_WGT," ).append("\n"); 
		query.append("         SUM(AP_TEU) AS AP_TEU," ).append("\n"); 
		query.append("         SUM(AP_20)  AS AP_20 ," ).append("\n"); 
		query.append("         SUM(AP_D2)  AS AP_D2 ," ).append("\n"); 
		query.append("         SUM(AP_D4)  AS AP_D4 ," ).append("\n"); 
		query.append("         SUM(AP_40)  AS AP_40 ," ).append("\n"); 
		query.append("         SUM(AP_HC)  AS AP_HC ," ).append("\n"); 
		query.append("         SUM(AP_45)  AS AP_45 ," ).append("\n"); 
		query.append("         SUM(AP_53)  AS AP_53 ," ).append("\n"); 
		query.append("         SUM(AP_RF)  AS AP_RF ," ).append("\n"); 
		query.append("         SUM(AP_RD)  AS AP_RD ," ).append("\n"); 
		query.append("         SUM(AP_WGT) AS AP_WGT," ).append("\n"); 
		query.append("         SUM(BT_TEU) AS BT_TEU," ).append("\n"); 
		query.append("         SUM(BT_20)  AS BT_20 ," ).append("\n"); 
		query.append("         SUM(BT_D2)  AS BT_D2 ," ).append("\n"); 
		query.append("         SUM(BT_40)  AS BT_40 ," ).append("\n"); 
		query.append("         SUM(BT_D4)  AS BT_D4 ," ).append("\n"); 
		query.append("         SUM(BT_HC)  AS BT_HC ," ).append("\n"); 
		query.append("         SUM(BT_45)  AS BT_45 ," ).append("\n"); 
		query.append("         SUM(BT_53)  AS BT_53 ," ).append("\n"); 
		query.append("         SUM(BT_RF)  AS BT_RF ," ).append("\n"); 
		query.append("         SUM(BT_RD)  AS BT_RD ," ).append("\n"); 
		query.append("         SUM(BT_WGT) AS BT_WGT,SUM(BKG_VOL_VGM) AS BKG_VOL_VGM,SUM(BKG_WGT_VGM) AS BKG_WGT_VGM," ).append("\n"); 
		query.append("         " ).append("\n"); 
		query.append("         SUM(BS_TEU) AS BS_TEU,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("         SUM(BS_WGT) AS BS_WGT,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("         SUM(CM_OP) AS CM_OP	  ,   " ).append("\n"); 
		query.append("         SUM(CM_OC) AS CM_OC   ,   " ).append("\n"); 
		query.append("         SUM(CM_VL) AS CM_VL   ,  " ).append("\n"); 
		query.append("         SUM(AP_MD)  AS AP_MD ," ).append("\n"); 
		query.append("         MIN(PAST)   AS PAST  ," ).append("\n"); 
		query.append("         'Y' AS EDIT," ).append("\n"); 
		query.append("         COUNT(DISTINCT DECODE(POL_CD||POD_CD, '0000000000', NULL, POL_CD||POD_CD)) + DECODE(NVL(POL_CD, '+'), '+', COUNT(DISTINCT DECODE(POL_CD, '00000', NULL, POL_CD)), 0) AS CHILD_CNT," ).append("\n"); 
		query.append("         COUNT(DISTINCT DECODE(POL_CD||POD_CD, '0000000000', NULL, POL_CD||POD_CD)) AS LEAF_CNT," ).append("\n"); 
		query.append("         DECODE(NVL(POL_CD, '+'), '+', COUNT(DISTINCT DECODE(POL_CD, '00000', NULL, POL_CD)), 0) AS POD_CNT," ).append("\n"); 
		query.append("         NVL(MAX(CFM_FLG), 'N') AS CFM_FLG," ).append("\n"); 
		query.append("         ( CASE" ).append("\n"); 
		query.append("                WHEN POL_CD IS NULL AND POD_CD IS NULL AND OFC_CD IS NOT NULL THEN MAX(SPC_CTRL_ALOC_RMK)" ).append("\n"); 
		query.append("                                                                              ELSE NULL" ).append("\n"); 
		query.append("            END" ).append("\n"); 
		query.append("         ) AS SPC_CTRL_ALOC_RMK," ).append("\n"); 
		query.append("         ( CASE" ).append("\n"); 
		query.append("                WHEN POL_CD IS NOT NULL AND POD_CD IS NULL THEN MAX(SPC_CTRL_ALOC_POL_RMK)" ).append("\n"); 
		query.append("                                                           ELSE NULL" ).append("\n"); 
		query.append("            END" ).append("\n"); 
		query.append("         ) AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("         ( CASE" ).append("\n"); 
		query.append("                WHEN POD_CD IS NOT NULL THEN MAX(SPC_CTRL_ALOC_POD_RMK)" ).append("\n"); 
		query.append("                                        ELSE NULL" ).append("\n"); 
		query.append("            END" ).append("\n"); 
		query.append("         ) AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("#if (${all_pol} == 'Y')" ).append("\n"); 
		query.append("      FROM ALL_DATA2 Z" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("      FROM ALL_DATA Z" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("GROUP BY GROUPING SETS (" ).append("\n"); 
		query.append("                         (BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD, US_MOD, ACCOUNT_CD, POL_CD, POL_SEQ, POD_CD, POD_SEQ, DEL_CD)," ).append("\n"); 
		query.append("                         (BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD, US_MOD, ACCOUNT_CD, POL_CD, POL_SEQ, POD_CD, POD_SEQ)," ).append("\n"); 
		query.append("                         (BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD, US_MOD, ACCOUNT_CD, POL_CD, POL_SEQ)," ).append("\n"); 
		query.append("                         (BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD, US_MOD, ACCOUNT_CD)," ).append("\n"); 
		query.append("                         (BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD, US_MOD)," ).append("\n"); 
		query.append("                         (BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD)," ).append("\n"); 
		query.append("                         (BASE_RHQ_CD, RHQ_CD, IOC_CD)," ).append("\n"); 
		query.append("                         --(BASE_RHQ_CD, IOC_CD, DEL_CD)," ).append("\n"); 
		query.append("                         (BASE_RHQ_CD, IOC_CD)" ).append("\n"); 
		query.append("                       )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if (${all_pol} == 'Y')" ).append("\n"); 
		query.append("  HAVING (POL_CD IS NULL OR POL_CD <> '00000')" ).append("\n"); 
		query.append("     AND (POD_CD IS NULL OR POD_CD <> '00000')" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("  HAVING (POL_CD IS NULL OR POL_CD <> '00000')" ).append("\n"); 
		query.append("     AND (POD_CD IS NULL OR POD_CD <> '00000')" ).append("\n"); 
		query.append("     AND (    IOC_CD LIKE 'T-%'" ).append("\n"); 
		query.append("           OR ROUND(SUM(BKG_QUOTA), 1) > 0" ).append("\n"); 
		query.append("           OR ROUND(SUM(NVL(FC_TEU, 0) + NVL(FC_WGT, 0) + NVL(FC_HC, 0) + NVL(FC_45, 0) + NVL(FC_53, 0) + NVL(FC_RF, 0)), 1) > 0" ).append("\n"); 
		query.append("           OR ROUND(SUM(AP_TEU + AP_WGT), 1) > 0" ).append("\n"); 
		query.append("           OR ROUND(SUM(BT_TEU + BT_WGT), 1) > 0 )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("  SELECT " ).append("\n"); 
		query.append("         MAX(TRD_CD)     AS TRD_CD    ," ).append("\n"); 
		query.append("         MAX(SUB_TRD_CD) AS SUB_TRD_CD," ).append("\n"); 
		query.append("         BASE_RHQ_CD," ).append("\n"); 
		query.append("         NULL RHQ_CD     ," ).append("\n"); 
		query.append("         NULL US_MOD     ," ).append("\n"); 
		query.append("         NULL ACCOUNT_CD ," ).append("\n"); 
		query.append("         'N' AS FLG," ).append("\n"); 
		query.append("         IOC_CD     ," ).append("\n"); 
		query.append("         '+'  AS OFC_CD   ," ).append("\n"); 
		query.append("         '+'  AS POL_CD   ," ).append("\n"); 
		query.append("         '+'  AS POD_CD   ," ).append("\n"); 
		query.append("         NVL(DEL_CD, '+')  AS DEL_CD   ," ).append("\n"); 
		query.append("         NULL POL_SEQ," ).append("\n"); 
		query.append("         NULL POD_SEQ," ).append("\n"); 
		query.append("         SUM(BKG_QUOTA)   AS BKG_QUOTA," ).append("\n"); 
		query.append("         SUM(BKG_QTA_CMB) / DECODE(SUM(BKG_QUOTA), 0, 1, SUM(BKG_QUOTA)) AS BKG_QTA_CMB," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = '00000'" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = '00000'" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = '00000'" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = '00000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = '000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("         ) AS CMB," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = '00000'" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = '00000'" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = '00000'" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = '00000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = '000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("         ) AS CMB_WGT," ).append("\n"); 
		query.append("         -- 주차별 CMB" ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = '00000'" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = '00000'" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = '00000'" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = '00000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = '000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 1" ).append("\n"); 
		query.append("         ) AS CMB1," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("             WHERE BAR.SLS_OFC_CD  = '00000'" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = '00000'" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = '00000'" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = '00000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = '000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 2" ).append("\n"); 
		query.append("         ) AS CMB2," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = '00000'" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = '00000'" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = '00000'" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = '00000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = '000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 3" ).append("\n"); 
		query.append("         ) AS CMB3," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_QTY), 0, 1, SUM(BAR.BKG_TTL_QTY))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = '00000'" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = '00000'" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = '00000'" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = '00000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = '000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 4" ).append("\n"); 
		query.append("         ) AS CMB4," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = '00000'" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = '00000' " ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = '00000'" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = '00000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = '000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 1" ).append("\n"); 
		query.append("         ) AS CMB_WGT1," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = '00000'" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = '00000'" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = '00000'" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = '00000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = '000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 2" ).append("\n"); 
		query.append("         ) AS CMB_WGT2," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = '00000'" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = '00000'" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = '00000'" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = '00000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = '000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 3" ).append("\n"); 
		query.append("         ) AS CMB_WGT3," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("           SELECT (SUM(BAR.BKG_REV) - SUM(BAR.ESTM_CM_COST_AMT)) / DECODE(SUM(BAR.BKG_TTL_WGT), 0, 1, SUM(BAR.BKG_TTL_WGT))" ).append("\n"); 
		query.append("             FROM WK_CMB BAR" ).append("\n"); 
		query.append("            WHERE BAR.SLS_OFC_CD  = '00000'" ).append("\n"); 
		query.append("              AND BAR.TS_FLG      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'T/S', 'Y', 'N')" ).append("\n"); 
		query.append("              AND BAR.IOC_CD      = DECODE(SUBSTR(Z.IOC_CD, LENGTH(Z.IOC_CD) - 2), 'OCN', 'O', 'I')" ).append("\n"); 
		query.append("              AND BAR.POL_YD_CD   = '00000'" ).append("\n"); 
		query.append("              AND BAR.POD_YD_CD   = '00000'" ).append("\n"); 
		query.append("              -- 20140805 추가(S)" ).append("\n"); 
		query.append("              AND DECODE(BAR.US_MOD, 'OTH', 'OTHERS', BAR.US_MOD) = '00000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.ACCOUNT_CD, 'XX999999', 'OTHERS', BAR.ACCOUNT_CD)   = '000'" ).append("\n"); 
		query.append("              AND DECODE(BAR.DEL_CD, 'XXXXX', 'OTHERS', BAR.DEL_CD)  = NVL(Z.DEL_CD, '00000')" ).append("\n"); 
		query.append("              AND BAR.RNUM = 4" ).append("\n"); 
		query.append("         ) AS CMB_WGT4," ).append("\n"); 
		query.append("         " ).append("\n"); 
		query.append("         DECODE(SUM(CMB2), 0, 0, SUM(CMB1) / SUM(CMB2)) AS FCT_CMB," ).append("\n"); 
		query.append("         (SUM(DECODE(@[fcast], '2', NVL(FC_TEU, 0) + NVL(FC_HC, 0) * 2 + NVL(FC_45, 0) * 2 + NVL(FC_53, 0) * 2," ).append("\n"); 
		query.append("                               '3', NVL(FC_TEU, 0)," ).append("\n"); 
		query.append("                               '1', DECODE(PAST, 'Y', NVL(FC_TEU, 0), NVL(FC_TEU, 0) + NVL(FC_HC, 0) * 2 + NVL(FC_45, 0) * 2 + NVL(FC_53, 0) * 2)))" ).append("\n"); 
		query.append("         ) AS FC_TTL_TEU," ).append("\n"); 
		query.append("         SUM(FC_TEU) AS FC_TEU," ).append("\n"); 
		query.append("         SUM(FC_20)  AS FC_20 ," ).append("\n"); 
		query.append("         SUM(FC_D2)  AS FC_D2 ," ).append("\n"); 
		query.append("         SUM(FC_40)  AS FC_40 ," ).append("\n"); 
		query.append("         SUM(FC_D4)  AS FC_D4 ," ).append("\n"); 
		query.append("         SUM(FC_HC)  AS FC_HC ," ).append("\n"); 
		query.append("         SUM(FC_45)  AS FC_45 ," ).append("\n"); 
		query.append("         SUM(FC_53)  AS FC_53 ," ).append("\n"); 
		query.append("         SUM(FC_RF)  AS FC_RF ," ).append("\n"); 
		query.append("         SUM(FC_RD)  AS FC_RD ," ).append("\n"); 
		query.append("         SUM(FC_WGT) AS FC_WGT," ).append("\n"); 
		query.append("         SUM(AP_TEU) AS AP_TEU," ).append("\n"); 
		query.append("         SUM(AP_20)  AS AP_20 ," ).append("\n"); 
		query.append("         SUM(AP_D2)  AS AP_D2 ," ).append("\n"); 
		query.append("         SUM(AP_D4)  AS AP_D4 ," ).append("\n"); 
		query.append("         SUM(AP_40)  AS AP_40 ," ).append("\n"); 
		query.append("         SUM(AP_HC)  AS AP_HC ," ).append("\n"); 
		query.append("         SUM(AP_45)  AS AP_45 ," ).append("\n"); 
		query.append("         SUM(AP_53)  AS AP_53 ," ).append("\n"); 
		query.append("         SUM(AP_RF)  AS AP_RF ," ).append("\n"); 
		query.append("         SUM(AP_RD)  AS AP_RD ," ).append("\n"); 
		query.append("         SUM(AP_WGT) AS AP_WGT," ).append("\n"); 
		query.append("         SUM(BT_TEU) AS BT_TEU," ).append("\n"); 
		query.append("         SUM(BT_20)  AS BT_20 ," ).append("\n"); 
		query.append("         SUM(BT_D2)  AS BT_D2 ," ).append("\n"); 
		query.append("         SUM(BT_40)  AS BT_40 ," ).append("\n"); 
		query.append("         SUM(BT_D4)  AS BT_D4 ," ).append("\n"); 
		query.append("         SUM(BT_HC)  AS BT_HC ," ).append("\n"); 
		query.append("         SUM(BT_45)  AS BT_45 ," ).append("\n"); 
		query.append("         SUM(BT_53)  AS BT_53 ," ).append("\n"); 
		query.append("         SUM(BT_RF)  AS BT_RF ," ).append("\n"); 
		query.append("         SUM(BT_RD)  AS BT_RD ," ).append("\n"); 
		query.append("         SUM(BT_WGT) AS BT_WGT,SUM(BKG_VOL_VGM) AS BKG_VOL_VGM,SUM(BKG_WGT_VGM) AS BKG_WGT_VGM," ).append("\n"); 
		query.append("         " ).append("\n"); 
		query.append("         SUM(BS_TEU) AS BS_TEU,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("         SUM(BS_WGT) AS BS_WGT,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("         SUM(CM_OP) AS CM_OP	  ,   " ).append("\n"); 
		query.append("         SUM(CM_OC) AS CM_OC   ,   " ).append("\n"); 
		query.append("         SUM(CM_VL) AS CM_VL   ,  " ).append("\n"); 
		query.append("         SUM(AP_MD)  AS AP_MD ," ).append("\n"); 
		query.append("         MIN(PAST)   AS PAST  ," ).append("\n"); 
		query.append("         'Y' AS EDIT," ).append("\n"); 
		query.append("         0 AS CHILD_CNT," ).append("\n"); 
		query.append("         0 AS LEAF_CNT," ).append("\n"); 
		query.append("         0 AS POD_CNT," ).append("\n"); 
		query.append("         NVL(MAX(CFM_FLG), 'N') AS CFM_FLG," ).append("\n"); 
		query.append("         NULL AS SPC_CTRL_ALOC_RMK," ).append("\n"); 
		query.append("         NULL AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("         NULL AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("#if (${all_pol} == 'Y')" ).append("\n"); 
		query.append("      FROM ALL_DATA2 Z" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("      FROM ALL_DATA Z" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("GROUP BY GROUPING SETS (" ).append("\n"); 
		query.append("                         --(BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD, US_MOD, ACCOUNT_CD, POL_CD, POL_SEQ, POD_CD, POD_SEQ, DEL_CD)," ).append("\n"); 
		query.append("                         --(BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD, US_MOD, ACCOUNT_CD, POL_CD, POL_SEQ, POD_CD, POD_SEQ)," ).append("\n"); 
		query.append("                         --(BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD, US_MOD, ACCOUNT_CD, POL_CD, POL_SEQ)," ).append("\n"); 
		query.append("                         --(BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD, US_MOD, ACCOUNT_CD)," ).append("\n"); 
		query.append("                         --(BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD, US_MOD)," ).append("\n"); 
		query.append("                         --(BASE_RHQ_CD, RHQ_CD, IOC_CD, OFC_CD)," ).append("\n"); 
		query.append("                         --(BASE_RHQ_CD, RHQ_CD, IOC_CD)," ).append("\n"); 
		query.append("                         (BASE_RHQ_CD, IOC_CD, DEL_CD)" ).append("\n"); 
		query.append("                         --(BASE_RHQ_CD, IOC_CD)" ).append("\n"); 
		query.append("                       )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if (${all_pol} != 'Y')" ).append("\n"); 
		query.append("  HAVING (    IOC_CD LIKE 'T-%'" ).append("\n"); 
		query.append("           OR ROUND(SUM(BKG_QUOTA), 1) > 0" ).append("\n"); 
		query.append("           OR ROUND(SUM(NVL(FC_TEU, 0) + NVL(FC_WGT, 0) + NVL(FC_HC, 0) + NVL(FC_45, 0) + NVL(FC_53, 0) + NVL(FC_RF, 0)), 1) > 0" ).append("\n"); 
		query.append("           OR ROUND(SUM(AP_TEU + AP_WGT), 1) > 0" ).append("\n"); 
		query.append("           OR ROUND(SUM(BT_TEU + BT_WGT), 1) > 0 )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	" ).append("\n"); 
		query.append("	" ).append("\n"); 
		query.append("SELECT TRD_CD," ).append("\n"); 
		query.append("       SUB_TRD_CD," ).append("\n"); 
		query.append("       BASE_RHQ_CD," ).append("\n"); 
		query.append("       DECODE(RHQ_CD, 'NULL', '', RHQ_CD) AS RHQ_CD, " ).append("\n"); 
		query.append("       IOC_CD," ).append("\n"); 
		query.append("       DECODE(OFC_CD, 'NULL', '', OFC_CD) AS OFC_CD," ).append("\n"); 
		query.append("       DECODE(US_MOD, 'NULL', '', US_MOD) AS US_MOD," ).append("\n"); 
		query.append("       DECODE(ACCOUNT_CD, 'NULL', '', ACCOUNT_CD) AS ACCOUNT_CD," ).append("\n"); 
		query.append("       CASE WHEN ACCOUNT_CD = '+' THEN ''" ).append("\n"); 
		query.append("            WHEN ACCOUNT_CD IS NULL THEN ''" ).append("\n"); 
		query.append("            WHEN ACCOUNT_CD = 'OTHERS' THEN 'OTHERS'" ).append("\n"); 
		query.append("            WHEN LENGTH(TRIM(TRANSLATE(ACCOUNT_CD, '1234567890', '          '))) = 2 THEN " ).append("\n"); 
		query.append("              (SELECT CUST_LGL_ENG_NM " ).append("\n"); 
		query.append("                 FROM MDM_CUSTOMER" ).append("\n"); 
		query.append("                WHERE CUST_CNT_CD||LPAD(CUST_SEQ, 6, '0') = ACCOUNT_CD ) " ).append("\n"); 
		query.append("            ELSE " ).append("\n"); 
		query.append("              -- 2014.12.17 계약의 경우 최신 CONTRACTOR이름 보여짐" ).append("\n"); 
		query.append("              NVL((" ).append("\n"); 
		query.append("              -- SC CASE NAME " ).append("\n"); 
		query.append("              SELECT (SELECT CUST_LGL_ENG_NM " ).append("\n"); 
		query.append("                        FROM MDM_CUSTOMER A " ).append("\n"); 
		query.append("                        WHERE A.CUST_CNT_CD = AC.CUST_CNT_CD " ).append("\n"); 
		query.append("                        AND A.CUST_SEQ = AC.CUST_SEQ ) CUST_LGL_ENG_NM" ).append("\n"); 
		query.append("               FROM     PRI_SP_HDR    HD  ," ).append("\n"); 
		query.append("                        PRI_SP_MN     MN  ," ).append("\n"); 
		query.append("                        PRI_SP_CTRT_PTY AC" ).append("\n"); 
		query.append("              WHERE     HD.SC_NO        = ACCOUNT_CD" ).append("\n"); 
		query.append("                AND     MN.PROP_NO      = HD.PROP_NO" ).append("\n"); 
		query.append("                AND     MN.PROP_STS_CD  = 'F'    -- Filed만 B/L적용 가능 " ).append("\n"); 
		query.append("                AND     AC.PROP_NO      = MN.PROP_NO" ).append("\n"); 
		query.append("                AND     AC.AMDT_SEQ     = MN.AMDT_SEQ" ).append("\n"); 
		query.append("                AND     AC.PRC_CTRT_PTY_TP_CD = 'C'" ).append("\n"); 
		query.append("                AND     AC.AMDT_SEQ   = (SELECT MAX(AMDT_SEQ)" ).append("\n"); 
		query.append("                                           FROM PRI_SP_MN N_MN" ).append("\n"); 
		query.append("                                          WHERE N_MN.PROP_NO = HD.PROP_NO" ).append("\n"); 
		query.append("					                        AND	N_MN.PROP_STS_CD  = 'F'" ).append("\n"); 
		query.append("                                        )" ).append("\n"); 
		query.append("                AND     ROWNUM = 1" ).append("\n"); 
		query.append("              UNION ALL" ).append("\n"); 
		query.append("              SELECT  (SELECT CUST_LGL_ENG_NM " ).append("\n"); 
		query.append("                        FROM MDM_CUSTOMER A " ).append("\n"); 
		query.append("                        WHERE A.CUST_CNT_CD = MN.CTRT_CUST_CNT_CD " ).append("\n"); 
		query.append("                        AND A.CUST_SEQ = MN.CTRT_CUST_SEQ ) CUST_LGL_ENG_NM" ).append("\n"); 
		query.append("               FROM    PRI_RP_HDR    HD  ," ).append("\n"); 
		query.append("                       PRI_RP_MN     MN  " ).append("\n"); 
		query.append("              WHERE     HD.RFA_NO        = ACCOUNT_CD" ).append("\n"); 
		query.append("                AND     MN.PROP_NO       = HD.PROP_NO" ).append("\n"); 
		query.append("                AND     MN.PROP_STS_CD   = 'A'        /*상수*/" ).append("\n"); 
		query.append("                AND     MN.AMDT_SEQ      = (SELECT MAX(AMDT_SEQ)" ).append("\n"); 
		query.append("                                              FROM PRI_RP_MN N_MN" ).append("\n"); 
		query.append("                                             WHERE N_MN.PROP_NO = HD.PROP_NO" ).append("\n"); 
		query.append("                                               AND N_MN.PROP_STS_CD   = 'A'  " ).append("\n"); 
		query.append("                                           )" ).append("\n"); 
		query.append("                AND     ROWNUM = 1" ).append("\n"); 
		query.append("              ), ACCOUNT_CD)" ).append("\n"); 
		query.append("       END AS ACCOUNT_NM," ).append("\n"); 
		query.append("       POL_CD," ).append("\n"); 
		query.append("       POD_CD," ).append("\n"); 
		query.append("       DEL_CD," ).append("\n"); 
		query.append("	   --2014.07.30 level추가" ).append("\n"); 
		query.append("       DECODE(OFC_CD, NULL, 0, '+', 0, 1) + DECODE(US_MOD, NULL, 0, '+', 0, 1) + DECODE(ACCOUNT_CD, NULL, 0, '+', 0, 1) + " ).append("\n"); 
		query.append("       DECODE(POL_CD, NULL, 0, '+', 0, 1) + DECODE(POD_CD, NULL, 0, '+', 0, 1) + DECODE(DEL_CD, NULL, 0, '+', 0, 1) AS LVL," ).append("\n"); 
		query.append("       BKG_QUOTA," ).append("\n"); 
		query.append("       BKG_QTA_CMB," ).append("\n"); 
		query.append("       (CASE WHEN NVL(CMB4, 0) > 0 THEN " ).append("\n"); 
		query.append("                    (CASE WHEN NVL(CMB3, 0) > 0 THEN CMB4 - CMB3" ).append("\n"); 
		query.append("                          WHEN NVL(CMB2, 0) > 0 THEN CMB4 - CMB2" ).append("\n"); 
		query.append("                          WHEN NVL(CMB1, 0) > 0 THEN CMB4 - CMB1" ).append("\n"); 
		query.append("                          ELSE CMB4" ).append("\n"); 
		query.append("                     END)" ).append("\n"); 
		query.append("               WHEN NVL(CMB3, 0) > 0 THEN  " ).append("\n"); 
		query.append("                    (CASE WHEN NVL(CMB2, 0) > 0 THEN CMB3 - CMB2" ).append("\n"); 
		query.append("                          WHEN NVL(CMB1, 0) > 0 THEN CMB3 - CMB1" ).append("\n"); 
		query.append("                          ELSE CMB3" ).append("\n"); 
		query.append("                     END)" ).append("\n"); 
		query.append("               WHEN NVL(CMB2, 0) > 0 THEN " ).append("\n"); 
		query.append("                    (CASE WHEN NVL(CMB1, 0) > 0 THEN CMB2 - CMB1" ).append("\n"); 
		query.append("                          ELSE CMB2" ).append("\n"); 
		query.append("                     END)" ).append("\n"); 
		query.append("               WHEN NVL(CMB1, 0) > 0 THEN CMB1" ).append("\n"); 
		query.append("               ELSE 0" ).append("\n"); 
		query.append("         END) CMB_TREND, " ).append("\n"); 
		query.append("         (CASE WHEN NVL(CMB_WGT4, 0) > 0 THEN " ).append("\n"); 
		query.append("                    (CASE WHEN NVL(CMB_WGT3, 0) > 0 THEN CMB_WGT4 - CMB_WGT3" ).append("\n"); 
		query.append("                          WHEN NVL(CMB_WGT2, 0) > 0 THEN CMB_WGT4 - CMB_WGT2" ).append("\n"); 
		query.append("                          WHEN NVL(CMB_WGT1, 0) > 0 THEN CMB_WGT4 - CMB_WGT1" ).append("\n"); 
		query.append("                          ELSE CMB_WGT4" ).append("\n"); 
		query.append("                     END)" ).append("\n"); 
		query.append("               WHEN NVL(CMB_WGT3, 0) > 0 THEN  " ).append("\n"); 
		query.append("                    (CASE WHEN NVL(CMB_WGT2, 0) > 0 THEN CMB_WGT3 - CMB_WGT2" ).append("\n"); 
		query.append("                          WHEN NVL(CMB_WGT1, 0) > 0 THEN CMB_WGT3 - CMB_WGT1" ).append("\n"); 
		query.append("                          ELSE CMB_WGT3" ).append("\n"); 
		query.append("                     END)" ).append("\n"); 
		query.append("               WHEN NVL(CMB_WGT2, 0) > 0 THEN " ).append("\n"); 
		query.append("                    (CASE WHEN NVL(CMB_WGT1, 0) > 0 THEN CMB_WGT2 - CMB_WGT1" ).append("\n"); 
		query.append("                          ELSE CMB_WGT2" ).append("\n"); 
		query.append("                     END)" ).append("\n"); 
		query.append("               WHEN NVL(CMB_WGT1, 0) > 0 THEN CMB_WGT1" ).append("\n"); 
		query.append("               ELSE 0" ).append("\n"); 
		query.append("         END) CMB_WGT_TREND," ).append("\n"); 
		query.append("       CMB," ).append("\n"); 
		query.append("       CMB_WGT," ).append("\n"); 
		query.append("       CMB1,CMB2,CMB3,CMB4," ).append("\n"); 
		query.append("       CMB_WGT1,CMB_WGT2,CMB_WGT3,CMB_WGT4," ).append("\n"); 
		query.append("       FC_TTL_TEU," ).append("\n"); 
		query.append("       FC_TEU," ).append("\n"); 
		query.append("       FC_20 ," ).append("\n"); 
		query.append("       FC_D2 ," ).append("\n"); 
		query.append("       FC_40 ," ).append("\n"); 
		query.append("       FC_D4 ," ).append("\n"); 
		query.append("       FC_HC ," ).append("\n"); 
		query.append("       FC_45 ," ).append("\n"); 
		query.append("       FC_53 ," ).append("\n"); 
		query.append("       FC_RF ," ).append("\n"); 
		query.append("       FC_RD ," ).append("\n"); 
		query.append("       FC_WGT," ).append("\n"); 
		query.append("       AP_TEU," ).append("\n"); 
		query.append("       AP_20 ," ).append("\n"); 
		query.append("       AP_D2," ).append("\n"); 
		query.append("       AP_40 ," ).append("\n"); 
		query.append("       AP_D4," ).append("\n"); 
		query.append("       AP_HC ," ).append("\n"); 
		query.append("       AP_45 ," ).append("\n"); 
		query.append("       AP_53 ," ).append("\n"); 
		query.append("       AP_RF ," ).append("\n"); 
		query.append("       AP_RD ," ).append("\n"); 
		query.append("       AP_WGT," ).append("\n"); 
		query.append("       BT_TEU," ).append("\n"); 
		query.append("       BT_20 ," ).append("\n"); 
		query.append("       BT_D2," ).append("\n"); 
		query.append("       BT_40 ," ).append("\n"); 
		query.append("       BT_D4," ).append("\n"); 
		query.append("       BT_HC ," ).append("\n"); 
		query.append("       BT_45 ," ).append("\n"); 
		query.append("       BT_53 ," ).append("\n"); 
		query.append("       BT_RF ," ).append("\n"); 
		query.append("       BT_RD," ).append("\n"); 
		query.append("       BT_WGT,BKG_VOL_VGM,BKG_WGT_VGM," ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       BS_TEU AS BKG_BS_TEU,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("       BS_WGT AS BKG_BS_WGT,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       CM_OP," ).append("\n"); 
		query.append("       CM_OC," ).append("\n"); 
		query.append("       CM_VL, " ).append("\n"); 
		query.append("       AP_MD ," ).append("\n"); 
		query.append("       PAST  ," ).append("\n"); 
		query.append("       'Y' AS EDIT," ).append("\n"); 
		query.append("       CHILD_CNT," ).append("\n"); 
		query.append("       LEAF_CNT," ).append("\n"); 
		query.append("       POD_CNT," ).append("\n"); 
		query.append("       CFM_FLG," ).append("\n"); 
		query.append("       SPC_CTRL_ALOC_RMK," ).append("\n"); 
		query.append("       SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("       SPC_CTRL_ALOC_POD_RMK," ).append("\n"); 
		query.append("       (SELECT POL_DBL_PORT_CHK FROM DB_CALL_VVD) AS POL_DBL_PORT_CHK -- POL DOUBLE CALLING 유무" ).append("\n"); 
		query.append("FROM (" ).append("\n"); 
		query.append("        SELECT TRD_CD," ).append("\n"); 
		query.append("               SUB_TRD_CD," ).append("\n"); 
		query.append("               BASE_RHQ_CD," ).append("\n"); 
		query.append("               RHQ_CD, " ).append("\n"); 
		query.append("               IOC_CD," ).append("\n"); 
		query.append("               OFC_CD," ).append("\n"); 
		query.append("               US_MOD," ).append("\n"); 
		query.append("               ACCOUNT_CD," ).append("\n"); 
		query.append("               POL_CD," ).append("\n"); 
		query.append("               POD_CD," ).append("\n"); 
		query.append("               DEL_CD," ).append("\n"); 
		query.append("               POL_SEQ," ).append("\n"); 
		query.append("               POD_SEQ," ).append("\n"); 
		query.append("               BKG_QUOTA," ).append("\n"); 
		query.append("               BKG_QTA_CMB," ).append("\n"); 
		query.append("               CMB," ).append("\n"); 
		query.append("               CMB_WGT," ).append("\n"); 
		query.append("               CMB1,CMB2,CMB3,CMB4," ).append("\n"); 
		query.append("               CMB_WGT1,CMB_WGT2,CMB_WGT3,CMB_WGT4," ).append("\n"); 
		query.append("               FC_TTL_TEU," ).append("\n"); 
		query.append("               FC_TEU," ).append("\n"); 
		query.append("               FC_20 ," ).append("\n"); 
		query.append("                FC_D2 ," ).append("\n"); 
		query.append("                FC_40 ," ).append("\n"); 
		query.append("                FC_D4 ," ).append("\n"); 
		query.append("                FC_HC ," ).append("\n"); 
		query.append("                FC_45 ," ).append("\n"); 
		query.append("                FC_53 ," ).append("\n"); 
		query.append("                FC_RF ," ).append("\n"); 
		query.append("                FC_RD ," ).append("\n"); 
		query.append("                FC_WGT," ).append("\n"); 
		query.append("                AP_TEU," ).append("\n"); 
		query.append("                AP_20 ," ).append("\n"); 
		query.append("                AP_D2," ).append("\n"); 
		query.append("                AP_40 ," ).append("\n"); 
		query.append("                AP_D4," ).append("\n"); 
		query.append("                AP_HC ," ).append("\n"); 
		query.append("                AP_45 ," ).append("\n"); 
		query.append("                AP_53 ," ).append("\n"); 
		query.append("                AP_RF ," ).append("\n"); 
		query.append("                AP_RD ," ).append("\n"); 
		query.append("                AP_WGT," ).append("\n"); 
		query.append("                BT_TEU," ).append("\n"); 
		query.append("                BT_20 ," ).append("\n"); 
		query.append("                BT_D2," ).append("\n"); 
		query.append("                BT_40 ," ).append("\n"); 
		query.append("                BT_D4," ).append("\n"); 
		query.append("                BT_HC ," ).append("\n"); 
		query.append("                BT_45 ," ).append("\n"); 
		query.append("                BT_53 ," ).append("\n"); 
		query.append("                BT_RF ," ).append("\n"); 
		query.append("                BT_RD," ).append("\n"); 
		query.append("                BT_WGT,BKG_VOL_VGM,BKG_WGT_VGM," ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("                BS_TEU,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("                BS_WGT,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("               CM_OP ,   " ).append("\n"); 
		query.append("               CM_OC ,   " ).append("\n"); 
		query.append("               CM_VL ," ).append("\n"); 
		query.append("               AP_MD ," ).append("\n"); 
		query.append("               PAST  ," ).append("\n"); 
		query.append("               'Y' AS EDIT," ).append("\n"); 
		query.append("               CHILD_CNT," ).append("\n"); 
		query.append("               LEAF_CNT," ).append("\n"); 
		query.append("               POD_CNT," ).append("\n"); 
		query.append("               CFM_FLG," ).append("\n"); 
		query.append("               SPC_CTRL_ALOC_RMK," ).append("\n"); 
		query.append("               SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("               SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("         FROM HRCH_DATA" ).append("\n"); 
		query.append("		WHERE FLG = 'N'" ).append("\n"); 
		query.append("-- 2014.10.10 T/S인 경우 DEST SUM제외" ).append("\n"); 
		query.append("          AND NOT ((SUB_TRD_CD = 'IP' OR IOC_CD = 'EQ') AND DEL_CD <> '+' AND OFC_CD = '+')" ).append("\n"); 
		query.append("        UNION ALL  " ).append("\n"); 
		query.append("        --Allocation" ).append("\n"); 
		query.append("        SELECT A.TRD_CD        ," ).append("\n"); 
		query.append("               A.SUB_TRD_CD    ," ).append("\n"); 
		query.append("               P.OFC_CD   AS BASE_RHQ_CD," ).append("\n"); 
		query.append("               A.SLS_RHQ_CD AS RHQ_CD     ," ).append("\n"); 
		query.append("               DECODE(A.MNL_FLG, 'Y', 'T-','')||DECODE(A.TS_FLG, 'Y', 'T/S', DECODE(A.IOC_CD,'O','OCN','I','IPC','')) AS IOC_CD," ).append("\n"); 
		query.append("               A.SLS_RHQ_CD AS OFC_CD ," ).append("\n"); 
		query.append("               'OTHERS' AS US_MOD," ).append("\n"); 
		query.append("               'OTHERS' AS ACCOUNT_CD," ).append("\n"); 
		query.append("               NULL  POL_CD  ," ).append("\n"); 
		query.append("               NULL  POD_CD  ," ).append("\n"); 
		query.append("               'OTHERS' AS DEL_CD," ).append("\n"); 
		query.append("               -1 POL_SEQ   ," ).append("\n"); 
		query.append("               -1 POD_SEQ   ," ).append("\n"); 
		query.append("               0 AS BKG_QUOTA," ).append("\n"); 
		query.append("               0 AS BKG_QTA_CMB," ).append("\n"); 
		query.append("               NULL AS CMB," ).append("\n"); 
		query.append("               NULL AS CMB_WGT," ).append("\n"); 
		query.append("               NULL AS CMB1," ).append("\n"); 
		query.append("               NULL AS CMB2," ).append("\n"); 
		query.append("               NULL AS CMB3," ).append("\n"); 
		query.append("               NULL AS CMB4," ).append("\n"); 
		query.append("               NULL AS CMB_WGT1," ).append("\n"); 
		query.append("               NULL AS CMB_WGT2," ).append("\n"); 
		query.append("               NULL AS CMB_WGT3," ).append("\n"); 
		query.append("               NULL AS CMB_WGT4," ).append("\n"); 
		query.append("               C.FC_TTL_TEU," ).append("\n"); 
		query.append("               C.FC_TEU   ," ).append("\n"); 
		query.append("               C.FC_20    ," ).append("\n"); 
		query.append("               C.FC_D2    ," ).append("\n"); 
		query.append("               C.FC_40    ," ).append("\n"); 
		query.append("               C.FC_D4    ," ).append("\n"); 
		query.append("               C.FC_HC    ," ).append("\n"); 
		query.append("               C.FC_45    ," ).append("\n"); 
		query.append("               C.FC_53    ," ).append("\n"); 
		query.append("               C.FC_RF    ," ).append("\n"); 
		query.append("               C.FC_RD    ," ).append("\n"); 
		query.append("               C.FC_WGT   ," ).append("\n"); 
		query.append("               A.ASGN_TTL_QTY     AS AP_TEU," ).append("\n"); 
		query.append("               A.ASGN_20FT_QTY    AS AP_20 ," ).append("\n"); 
		query.append("               A.ASGN_20FT_DRY_QTY    AS AP_20 ," ).append("\n"); 
		query.append("               A.ASGN_40FT_QTY    AS AP_40 ," ).append("\n"); 
		query.append("               A.ASGN_40FT_DRY_QTY    AS AP_20 ," ).append("\n"); 
		query.append("               A.ASGN_40FT_HC_QTY AS AP_HC ," ).append("\n"); 
		query.append("               A.ASGN_45FT_HC_QTY AS AP_45 ," ).append("\n"); 
		query.append("               A.ASGN_53FT_QTY    AS AP_53 ," ).append("\n"); 
		query.append("               A.ASGN_RF_QTY      AS AP_RF ," ).append("\n"); 
		query.append("               A.ASGN_RD_QTY      AS AP_RF ," ).append("\n"); 
		query.append("               A.ASGN_TTL_WGT     AS AP_WGT," ).append("\n"); 
		query.append("               C.BT_TEU," ).append("\n"); 
		query.append("               C.BT_20 ," ).append("\n"); 
		query.append("               C.BT_D2 ," ).append("\n"); 
		query.append("               C.BT_40 ," ).append("\n"); 
		query.append("               C.BT_D4 ," ).append("\n"); 
		query.append("               C.BT_HC ," ).append("\n"); 
		query.append("               C.BT_45 ," ).append("\n"); 
		query.append("               C.BT_53 ," ).append("\n"); 
		query.append("               C.BT_RF ," ).append("\n"); 
		query.append("               C.BT_RD ," ).append("\n"); 
		query.append("               C.BT_WGT,BKG_VOL_VGM,BKG_WGT_VGM," ).append("\n"); 
		query.append("               " ).append("\n"); 
		query.append("               0 AS BS_TEU,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("               0 AS BS_WGT,--2015.04.30 KIMSW" ).append("\n"); 
		query.append("               " ).append("\n"); 
		query.append("               0 AS CM_OP,   " ).append("\n"); 
		query.append("               0 AS CM_OC,   " ).append("\n"); 
		query.append("               0 AS CM_VL,   " ).append("\n"); 
		query.append("               1 AS AP_MD," ).append("\n"); 
		query.append("               'N' AS PAST," ).append("\n"); 
		query.append("               'Y' AS EDIT," ).append("\n"); 
		query.append("               0 CHILD_CNT," ).append("\n"); 
		query.append("               0 LEAF_CNT," ).append("\n"); 
		query.append("               0 POD_CNT, " ).append("\n"); 
		query.append("               'N' AS CFM_FLG              ," ).append("\n"); 
		query.append("               A.SPC_CTRL_ALOC_RMK     AS SPC_CTRL_ALOC_RMK    ," ).append("\n"); 
		query.append("               A.SPC_CTRL_ALOC_POL_RMK AS SPC_CTRL_ALOC_POL_RMK," ).append("\n"); 
		query.append("               A.SPC_CTRL_ALOC_POD_RMK AS SPC_CTRL_ALOC_POD_RMK" ).append("\n"); 
		query.append("          FROM SPC_ALOC_POL_POD A  ," ).append("\n"); 
		query.append("               BASE_KEY         P  ," ).append("\n"); 
		query.append("               (SELECT TRD_CD, SUB_TRD_CD, RHQ_CD, " ).append("\n"); 
		query.append("					   DECODE(SUBSTR(IOC_CD, LENGTH(IOC_CD) - 2), 'T/S', 'Y', 'N') AS TS_FLG," ).append("\n"); 
		query.append("					   DECODE(SUBSTR(IOC_CD, LENGTH(IOC_CD) - 2), 'OCN', 'O', 'I') AS IOC_CD," ).append("\n"); 
		query.append("                       FC_TTL_TEU, FC_TEU, FC_20, FC_40, FC_HC, FC_45, FC_53, FC_RF, FC_WGT,                     " ).append("\n"); 
		query.append("                       BT_TEU, BT_20, BT_40, BT_HC, BT_45, BT_53, BT_RF, BT_WGT,BKG_VOL_VGM,BKG_WGT_VGM," ).append("\n"); 
		query.append("                       BT_D2, BT_D4, BT_RD, FC_D2, FC_D4, FC_RD" ).append("\n"); 
		query.append("                  FROM HRCH_DATA" ).append("\n"); 
		query.append("                 WHERE FLG = 'Y') C" ).append("\n"); 
		query.append("         WHERE A.RLANE_CD   = P.RLANE_CD" ).append("\n"); 
		query.append("            AND A.DIR_CD     = P.DIR_CD" ).append("\n"); 
		query.append("            AND A.VSL_CD     = P.VSL_CD" ).append("\n"); 
		query.append("            AND A.SKD_VOY_NO = P.SKD_VOY_NO" ).append("\n"); 
		query.append("            AND A.SKD_DIR_CD = P.SKD_DIR_CD" ).append("\n"); 
		query.append("#if (${office} == 'HAMRU')" ).append("\n"); 
		query.append("            AND A.SLS_OFC_CD in ('HAMRU', 'NYCRA')" ).append("\n"); 
		query.append("#else " ).append("\n"); 
		query.append("            AND A.SLS_OFC_CD = @[office]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("	        AND P.RLANE_CD   = 'WAFIE'" ).append("\n"); 
		query.append("	     	AND A.TRD_CD     = C.TRD_CD(+)" ).append("\n"); 
		query.append("	     	AND A.SUB_TRD_CD = C.SUB_TRD_CD(+)" ).append("\n"); 
		query.append("	     	AND A.SLS_RHQ_CD = C.RHQ_CD(+)" ).append("\n"); 
		query.append("	     	AND A.TS_FLG     = C.TS_FLG(+)" ).append("\n"); 
		query.append("	     	AND A.IOC_CD     = C.IOC_CD(+)" ).append("\n"); 
		query.append("       )" ).append("\n"); 
		query.append("ORDER BY DECODE(IOC_CD, 'OCN', 1, 'IPC', 2, 'EQ', 3, 'T/S', 4, 'T-OCN', 5, 'T-IPC', 6, 'T-T/S', 7, 10)," ).append("\n"); 
		query.append("         DECODE(BASE_RHQ_CD, RHQ_CD, 0, 1)," ).append("\n"); 
		query.append("         RHQ_CD," ).append("\n"); 
		query.append("         DECODE(OFC_CD, '+', 'ZZZZZ', RHQ_CD, 'A', OFC_CD)," ).append("\n"); 
		query.append("         DECODE(US_MOD, 'OTHERS', 'ZZZZZ', '', 'AAAAA', US_MOD)," ).append("\n"); 
		query.append("         DECODE(ACCOUNT_CD, 'OTHERS', 'ZZZZZ', '', 'AAAAA', ACCOUNT_CD)," ).append("\n"); 
		query.append("         NVL(POL_SEQ, -1)," ).append("\n"); 
		query.append("         NVL(POD_SEQ, -1)," ).append("\n"); 
		query.append("         DECODE(DEL_CD, 'OTHERS', 'ZZZZZ', '', 'AAAAA', DEL_CD)" ).append("\n"); 
		query.append("/*" ).append("\n"); 
		query.append("CHOI.Y.S - [프로젝트] Ticket ID : CHM-201004171 - 53FT 관련 필드 추가" ).append("\n"); 
		query.append("2011.05.31 [선처리] 이석준 DIRECTION 조건 누락으로 데이터가 중복이 되어" ).append("\n"); 
		query.append("                 ==> AND   D.VSL_SLAN_DIR_CD = B.SKD_DIR_CD  추가" ).append("\n"); 
		query.append("2011.06.01 김종준 [CHM-201111305-01] R5와 동일하게 R9이 적용될 수 있도록 쿼리수정" ).append("\n"); 
		query.append("2011.07.20 김민아 [CHM-201112347-01] 조회 필드 QTA CMB 및 CM Per Ton 항목 추가" ).append("\n"); 
		query.append("2011.08.09 이행지 [CHM-201112741-01] Control by HO/RHQ 화면 보완 1차 -Weekly CMB 추가" ).append("\n"); 
		query.append("2011.08.12 이행지 [CHM-201112741-01] Control by HO/RHQ 화면 보완 2차 -WAFIE 반영" ).append("\n"); 
		query.append("2011.12.22 김종준 [SRM-201122564] QTA 데이터가 확정될때까지 2012년 대상항차부터 QTA 정보를 0으로 보여달라는 요청" ).append("\n"); 
		query.append("2012.05.18 김수정 [CHM-201217822-01] control by RHQ 화면 보완 - Control by HO 와 동일하게 MT 항목 추가" ).append("\n"); 
		query.append("2012.12.03 [CHM-201221639] 김시몬 R9와 동일하게 R8이 적용될 수 있도록 쿼리수정" ).append("\n"); 
		query.append("2012.12.07 김시몬 [CHM-201221639] 대상항차정보가져올때 SLANE_CD -> RLANE_CD로 변경 보완 -Control by HO/RHQ 로직 보완" ).append("\n"); 
		query.append("2013.01.23 [CHM-201322502-01] SPC 프로젝트 - 성수기 선복운영 개선을 위한 T/F추진" ).append("\n"); 
		query.append("2013.11.26 진마리아 [CHM-201326854] SAQ project로 인한 SPC 변경건_FNC 우선제거" ).append("\n"); 
		query.append("2013.12.05 김시몬 [CHM-201326854] SAQ project로 인한 SPC 변경건_테이블 변경" ).append("\n"); 
		query.append("2014.01.13 김시몬 [선처리] SELSA/TYOSC RHQ변경에 따른 SQM SPC_OFC_LVL추가" ).append("\n"); 
		query.append("2014.03.25 김시몬 [선처리] SQM 분기구하는 로직 관련 보완" ).append("\n"); 
		query.append("*/" ).append("\n"); 

	}
}