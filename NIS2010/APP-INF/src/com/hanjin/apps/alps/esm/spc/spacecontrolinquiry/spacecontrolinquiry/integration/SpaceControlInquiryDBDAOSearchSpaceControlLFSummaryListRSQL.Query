<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="SpaceControlInquiryDBDAOSearchSpaceControlLFSummaryListRSQL">
			<desc><![CDATA[2010.11.01 최윤성 [CHM-201006585-01] 2010년 연간개발계획 - full+empty L/F summary 화면 개발
2010.12.21 최윤성 [CHM-201007718-01] L/F Summary 화면 BKG 로직 수정
2011.01.04 최윤성 [CHM-201008093-01] Office Level Table 생성
 - SPC_ORGANIZATION_V 대신 SPC_OFC_LVL 로 대체
2011.01.19 최윤성 [CHM-201108422-01] L/F Summary 화면 하드코딩 및 보완 요청
 - IAS/IP sub-trade 에 한하여 BSA 는 Full BKG volume 과 동일하게 보여지도록 수정
 - IAS 한하여 Empty 값은 From ~ To 의 Conti 가 모두 A 인 값만 보이고 나머지는 0.
 - 화면에 주차별로 display 된 데이터의 총합을 보여주는 열 추가.
2011.05.24 김종준 [CHM-201111032-01] L/F Summary 화면 로직 보완
  - Daily F"cast Status 화면과 동일하도록 로직 보완 
  - RHQ 선택시 loading office 뿐만이 아니라 From conti 까지 일치 하는 BKG 정보만 가지고 오도록 추가
2012.12.10 김시몬 [CHM-201221639]  SQL 튜닝 - USE_HASH(A2, A1, A3, A4) PARALLEL(A2, A4) 삭제
2014.07.14 Arie Im [CHM-201431072]  L/F summary 메뉴 로직 수정
2014.08.07 김시몬 L/F summary 메뉴 로직 수정
2015.12.03 이혜민 [CHM-201538975] VVOBA Office 관련 수정
2017.1.23 SM상선 전환에 따른 소스변경]]></desc>
			<sql><![CDATA[
WITH BSA_FULL AS (
    SELECT TRD_CD    , 
           SUB_TRD_CD,
           RLANE_CD  ,
           DIR_CD    ,
           COST_YR   ,
           COST_MON  ,
           NUM       ,
           COST_WK   ,
           VSL_CD    ,
           SKD_VOY_NO,
           SKD_DIR_CD,
           VVD       ,
           SLAN_CD   ,
           FULL      ,FULL_WGT      ,
           ROUND(MAS_BSA, 10) AS BSA
		   ,ROUND(BSA_WGT, 10) AS BSA_WGT
      FROM (
              SELECT TRD_CD    ,
                     SUB_TRD_CD,
                     RLANE_CD  ,
                     DIR_CD    ,
                     COST_YR   ,
                     COST_MON  ,
                     NUM       ,
                     COST_WK   ,
                     VSL_CD    ,
                     SKD_VOY_NO,
                     SKD_DIR_CD,
                     VVD       ,
                     SLAN_CD   ,
                     NVL(SUM(MAS_QTY), 0)      AS FULL   ,
                     NVL(SUM(MAS_WGT), 0)      AS FULL_WGT   , 
                     NVL(SUM(VVD_BSA_CAPA), 0) AS MAS_BSA,
					 NVL(SUM(BSA_WGT), 0) AS BSA_WGT
                FROM (
                        SELECT --/*+ USE_HASH(A2, A1, A3, A4) PARALLEL(A2, A4) */ -- 2012.12.10 SQL 튜닝으로 제거
                               A1.TRD_CD    ,
                               A1.SUB_TRD_CD,
                               A1.RLANE_CD  ,
                               A1.DIR_CD    ,
                               SUBSTR(A1.SLS_YRMON, 1, 4) AS COST_YR ,
                               SUBSTR(A1.SLS_YRMON, 5)    AS COST_MON,
                               P.RNUM AS NUM,
                               A1.COST_WK   ,
                               A1.VSL_CD    ,
                               A1.SKD_VOY_NO,
                               A1.DIR_CD AS SKD_DIR_CD,
                               A1.VSL_CD||A1.SKD_VOY_NO||A1.DIR_CD AS VVD,
                               A1.SLAN_CD   ,
                               NVL(A3.LOD_SPL_CNG_FLG,'N') AS LOD_SPL_CNG_FLG,
                               DECODE(NVL(A3.LOD_SPL_CNG_FLG,'N'), 'Y', SUM(DECODE(SPC_GET_CNTR_SZ_FNC(A2.CNTR_TPSZ_CD)
                                                                 , '2', NVL(A2.BKG_QTY, 0), NVL(A2.BKG_QTY, 0) * 2))
                                                                 , 'N', MAX(A1.VVD_BSA_CAPA)
                               ) AS VVD_BSA_CAPA,

					 		   SUM(DECODE(SPC_GET_CNTR_SZ_FNC(A2.SPCL_CNTR_TPSZ_CD),'2', A2.BKG_QTY, '3', A2.BKG_QTY, A2.BKG_QTY*2)) AS MAS_QTY
							, MAX(SPC_GET_WK_VVD_BSA_FNC('WGT', A1.TRD_CD, A1.RLANE_CD, A1.DIR_CD, SUBSTR(A1.COST_YRMON, 1, 4)||A1.COST_WK, A1.VSL_CD||A1.SKD_VOY_NO||A1.DIR_CD)) AS BSA_WGT 
                             
                             ,(TO_CHAR((MAX(A2.BKG_CGO_WGT) * DECODE(MAX(A2.BKG_WGT_TP_CD), 'LBS', 0.00045, 0.001))
                              + SUM(A2.BKG_QTY * (SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD = A2.CNTR_TPSZ_CD)) * 0.001, 'FM0000000000.000')
                             ) AS MAS_WGT
                         FROM  MAS_MON_VVD   A1,
                               MAS_BKG_EXPN_DTL_WK A2,
                               MAS_LANE_RGST A3,
							   --SPC_OFC_LVL   A4,
                               (
                                  SELECT /*+ INDEX (P XPKMAS_WK_PRD)*/
                                         P.COST_YR||P.COST_WK AS COST_YRWK,
                                         ROWNUM               AS RNUM
                                    FROM MAS_WK_PRD P
                                   WHERE P.COST_YR > ' '
                                     AND P.COST_WK > ' '
                                     AND P.COST_YR||P.COST_WK >= @[year]||@[week]
                                     AND ROWNUM               <= @[duration]
                               ) P
                         WHERE A1.TRD_CD              = A2.TRD_CD
                           AND A1.RLANE_CD            = A2.RLANE_CD
                           AND A1.IOC_CD              = A2.IOC_CD
                           AND A1.VSL_CD              = A2.VSL_CD
                           AND A1.SKD_VOY_NO          = A2.SKD_VOY_NO
                           AND A1.DIR_CD              = A2.DIR_CD
                           AND A1.TRD_CD              = A3.TRD_CD
                           AND A1.RLANE_CD            = A3.RLANE_CD
                           AND A1.IOC_CD              = A3.IOC_CD
                           AND A1.DIR_CD              = A3.DIR_CD
                           AND SUBSTR(A1.SLS_YRMON, 1, 4)||A1.COST_WK = P.COST_YRWK
                           AND SUBSTR(A1.SLS_YRMON, 1, 4)||A1.COST_WK = SUBSTR(A2.SLS_YRMON, 1, 4)||A2.COST_WK
#if (${mon_flg} == 'Y')
                           AND A1.COST_YRMON              = @[rev_month]
#end
                           --AND SUBSTR(A1.SLS_YRMON, 1, 4)||A1.COST_WK = A2.BKG_WK
                           AND NVL(A1.DELT_FLG,'N')   = 'N'
                           AND A2.BKG_STS_CD         IN ('F','S')
                           AND A2.BKG_CGO_TP_CD      <> 'P'
                           AND A2.BL_NO_TP           IN ('M','0')
                           AND A1.TRD_CD              = @[trade]
                           --AND A4.OFC_TP_CD          IN ('BB', 'BA', 'BS')
                           --AND A4.OFC_CD              = SPC_SCR_OFC_CONV_FNC(A2.SLS_OFC_CD)
                           --AND P.COST_YRWK BETWEEN A4.OFC_APLY_FM_YRWK AND A4.OFC_APLY_TO_YRWK
#if (${mon_flg} == 'Y')
    #if (${rhq} == 'SHARC')
                              AND A2.RHQ_CD IN ('SHARC', 'SINRS', 'TYOIB', 'SELIB', 'VVOIA')
    #else
                              AND A2.RHQ_CD IN @[rhq]
    #end
#else
    #if (${rhq} != '')
	    #if (${rhq} == 'SHARC')
							AND (SPC_SCR_OFC_CONV_FNC(A2.SLS_OFC_CD) IN (SELECT OFC_CD
                                                                           FROM SPC_OFC_LVL A4
                                                                          WHERE A4.N2ND_PRNT_OFC_CD = 'SHARC'
                                                                            AND A4.OFC_TP_CD IN ('BB', 'BA', 'BS')
                                                                            AND SUBSTR(A1.SLS_YRMON, 1, 4)||A1.COST_WK BETWEEN A4.OFC_APLY_FM_YRWK AND A4.OFC_APLY_TO_YRWK )
							    OR EXISTS ( SELECT O.OFC_CD
							                  FROM SPC_OFC_LVL O
							                 WHERE O.OFC_TP_CD IN ('BB', 'BA', 'BS')
							                   AND SPC_SCR_OFC_CONV_FNC(A2.BKG_OFC_CD) = O.OFC_CD
							                   AND P.COST_YRWK BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK
							               CONNECT BY NOCYCLE O.PRNT_OFC_CD = PRIOR O.OFC_CD 
							                 START WITH O.PRNT_OFC_CD ='SINRS' )
							   )							               
	    #else
						   AND EXISTS ( SELECT O.OFC_CD
                                          FROM SPC_OFC_LVL O
                                         WHERE O.OFC_TP_CD IN ('BB', 'BA', 'BS')
                                           AND SPC_SCR_OFC_CONV_FNC(A2.BKG_OFC_CD) = O.OFC_CD
                                           AND P.COST_YRWK BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK
                                       CONNECT BY NOCYCLE O.PRNT_OFC_CD = PRIOR O.OFC_CD
                                                 START WITH O.PRNT_OFC_CD = @[rhq] )
	    #end
    #end

    #if (${rhq} != '')
	    #if (${rhq} == 'SHARC')
	                       AND (( SPC_SCR_OFC_CONV_FNC(A2.SLS_OFC_CD) IN (SELECT OFC_CD
                                                                            FROM SPC_OFC_LVL A4
                                                                           WHERE A4.N2ND_PRNT_OFC_CD = 'SHARC'
                                                                             AND A4.OFC_TP_CD IN ('BB', 'BA', 'BS')
                                                                             AND SUBSTR(A1.SLS_YRMON, 1, 4)||A1.COST_WK BETWEEN A4.OFC_APLY_FM_YRWK AND A4.OFC_APLY_TO_YRWK )
	                            AND 'A' = ( SELECT SPC_CONTI_CONV_FNC(L.CONTI_CD, A1.RLANE_CD, A1.DIR_CD)
                                              FROM MDM_LOCATION L, BKG_BOOKING B
                                             WHERE L.LOC_CD = NVL(B.PRE_RLY_PORT_CD, B.POL_CD)
                                               AND B.BKG_NO = A2.BKG_NO ))
                                OR SPC_SCR_OFC_CONV_FNC(A2.SLS_OFC_CD) IN (SELECT OFC_CD
                                                                             FROM SPC_OFC_LVL A4
                                                                            WHERE A4.N2ND_PRNT_OFC_CD = 'SINRS'
                                                                              AND A4.OFC_TP_CD IN ('BB', 'BA', 'BS')
                                                                              AND SUBSTR(A1.SLS_YRMON, 1, 4)||A1.COST_WK BETWEEN A4.OFC_APLY_FM_YRWK AND A4.OFC_APLY_TO_YRWK )                               
                               )    
	    #else
						   AND SPC_SCR_OFC_CONV_FNC(A2.SLS_OFC_CD) IN (SELECT OFC_CD
                                                                         FROM SPC_OFC_LVL A4
                                                                        WHERE A4.N2ND_PRNT_OFC_CD = @[rhq]
                                                                          AND A4.OFC_TP_CD IN ('BB', 'BA', 'BS')
                                                                          AND SUBSTR(A1.SLS_YRMON, 1, 4)||A1.COST_WK BETWEEN A4.OFC_APLY_FM_YRWK AND A4.OFC_APLY_TO_YRWK )
	    #end
    #end
#end

#if (${subtrade} != '')
                           AND A1.SUB_TRD_CD          = @[subtrade]
#end

#if (${bound} != '')
                           AND A1.DIR_CD              = @[bound]
#end
                      GROUP BY A1.TRD_CD    ,
                               A1.SUB_TRD_CD,
                               A1.RLANE_CD  ,
                               A1.DIR_CD    ,
                               SUBSTR(A1.SLS_YRMON, 1, 4),
                               SUBSTR(A1.SLS_YRMON, 5)   ,
                               P.RNUM       ,
                               A1.COST_WK   ,
                               A1.VSL_CD    ,
                               A1.SKD_VOY_NO,
                               A1.DIR_CD    ,
                               A1.VSL_CD||A1.SKD_VOY_NO||A1.DIR_CD,
                               A1.SLAN_CD   ,
                               NVL(A3.LOD_SPL_CNG_FLG, 'N')
                     )
            GROUP BY TRD_CD    ,
                     SUB_TRD_CD,
                     RLANE_CD  ,
                     DIR_CD    ,
                     COST_YR   ,
                     COST_MON  ,
                     NUM       ,
                     COST_WK   ,
                     VSL_CD    ,
                     SKD_VOY_NO,
                     SKD_DIR_CD,
                     VVD       ,
                     SLAN_CD
            ORDER BY TRD_CD    ,
                     SUB_TRD_CD,
                     RLANE_CD  ,
                     DIR_CD    ,
                     COST_YR   ,
                     COST_MON  ,
                     NUM       ,
                     COST_WK   ,
                     VSL_CD    ,
                     SKD_VOY_NO,
                     SKD_DIR_CD,
                     VVD       ,
                     SLAN_CD
           )
     WHERE FULL + MAS_BSA <> 0
)
, RDR_MTY AS (
    SELECT C.TRD_CD    ,
           C.SUB_TRD_CD,
           C.RLANE_CD  ,
           C.DIR_CD    ,
           SUBSTR(C.SLS_YRMON, 1, 4) AS COST_YR ,
           SUBSTR(c.SLS_YRMON, 5)    AS COST_MON,
           P.RNUM AS NUM,
           C.COST_WK   ,
           C.VSL_CD    ,
           C.SKD_VOY_NO,
           C.DIR_CD AS SKD_DIR_CD,
           C.VSL_CD||C.SKD_VOY_NO||C.DIR_CD AS VVD,
           C.SLAN_CD   ,
           SUM(M.SLOT_QTY) AS EMPTY, SUM(M.WEIGHT) AS EMPTY_WGT, 
           MAX(C.VVD_BSA_CAPA) AS BSA -- 2014.07.14 [CHM-201431072]   
		   ,MAX(NVL(B.BSA_WGT, 0)) AS BSA_WGT
     FROM  RDR_HEADER  H,
           RDR_UTILIZE M,
		   RDR_ALLOCATION B,
           (
              SELECT /*+ INDEX (P XPKMAS_WK_PRD)*/
                     P.COST_YR||P.COST_WK AS COST_YRWK,
                     ROWNUM               AS RNUM
                FROM MAS_WK_PRD P
               WHERE P.COST_YR > ' '
                 AND P.COST_WK > ' '
                 AND P.COST_YR||P.COST_WK >= @[year]||@[week]
                 AND ROWNUM               <= @[duration]
           ) P,
           MAS_MON_VVD C
     WHERE 1=1
       AND SUBSTR(C.SLS_YRMON, 1, 4)||C.COST_WK = P.COST_YRWK
#if (${mon_flg} == 'Y')
       AND C.COST_YRMON              = @[rev_month]
#end
       AND (C.DELT_FLG IS NULL OR C.DELT_FLG = 'N')
       AND C.IOC_CD     = 'O'
       AND M.OPR_CD     = 'SML'
       AND M.TYPE       = 'E'
       
       AND C.TRD_CD     = @[trade]
       AND M.VSL_CD = B.VSL_CD (+)
	   AND M.VOY_NO = B.VOY_NO (+)
	   AND M.DIR_CD = B.DIR_CD (+)
	   AND M.OPR_CD = B.OPR_CD (+)
	   AND M.REGION = B.REGION (+)

#if (${subtrade} != '')
       AND C.SUB_TRD_CD = @[subtrade]
#end

#if (${bound} != '')
       AND C.DIR_CD     = @[bound]
#end

#if (${rhq} == 'SHARC')
       AND M.REGION    IN ('A', 'D', 'F')
#else
	#if (${rhq} == 'NYCRA')
       AND M.REGION    IN ('M', 'S')
	#else
       AND M.REGION     = DECODE(@[rhq], 'HAMRU', 'E', '')
	#end
#end
       AND H.VSL_CD     = M.VSL_CD
       AND H.VOY_NO     = M.VOY_NO
       AND H.DIR_CD     = M.DIR_CD
       AND H.REGION     = M.REGION
       AND H.VSL_CD     = C.VSL_CD
       AND H.VOY_NO     = C.SKD_VOY_NO
       AND H.DIR_CD     = C.DIR_CD
  GROUP BY C.TRD_CD    ,
           C.SUB_TRD_CD,
           C.RLANE_CD  ,
           C.DIR_CD    ,
           SUBSTR(C.SLS_YRMON, 1, 4),
           SUBSTR(C.SLS_YRMON, 5)   ,
           P.RNUM      ,
           C.COST_WK   ,
           C.VSL_CD    ,
           C.SKD_VOY_NO,
           C.DIR_CD    ,
           C.VSL_CD||C.SKD_VOY_NO||C.DIR_CD,
           C.SLAN_CD
)
#if (${trade} == 'IAS' || ${trade} == 'IES' || ${trade} == 'IMS')
, INTRA_MTY AS (
    SELECT TRD_CD    ,
           SUB_TRD_CD,
           RLANE_CD  ,
           DIR_CD    ,
           COST_YR   ,
           COST_MON  ,
           NUM       ,
           COST_WK   ,
           VSL_CD    ,
           SKD_VOY_NO,
           SKD_DIR_CD,
           VVD       ,
           SLAN_CD   ,
           SUM(MTY) AS EMPTY
      FROM (
              SELECT M.TRD_CD    ,
                     M.SUB_TRD_CD,
                     M.RLANE_CD  ,
                     M.DIR_CD    ,
                     M.COST_YR ,
                     M.COST_MON,
                     M.NUM,
                     M.COST_WK   ,
                     M.VSL_CD    ,
                     M.SKD_VOY_NO,
                     M.DIR_CD AS SKD_DIR_CD,
                     M.VSL_CD||M.SKD_VOY_NO||M.DIR_CD AS VVD,
                     M.SLAN_CD   ,
                     NVL(DECODE(BKG_CGO_TP_CD, 'P', DECODE(SPC_GET_CNTR_SZ_FNC(CNTR_TPSZ_CD), '2', OP_CNTR_QTY, OP_CNTR_QTY * 2)),0) AS MTY
                FROM BKG_BOOKING  BKG,
                     BKG_VVD      VVD,
                     BKG_QUANTITY QUA,
                     MDM_LOCATION ORG,
                     MDM_LOCATION DES,
                     (
                        SELECT M.VSL_CD,  
							   M.SKD_VOY_NO, 
							   M.DIR_CD, 
							   M.TRD_CD, 
							   M.SUB_TRD_CD,
							   M.RLANE_CD, 
							   P.COST_YRWK,
                               SUBSTR(M.SLS_YRMON, 1, 4) AS COST_YR ,
                               SUBSTR(M.SLS_YRMON, 5)    AS COST_MON,
                               P.RNUM AS NUM,
                               M.COST_WK   ,
                               M.SLAN_CD
                        FROM 
                             MAS_MON_VVD  M,
                             (
                               SELECT /*+ INDEX (P XPKMAS_WK_PRD)*/
                                      P.COST_YR||P.COST_WK AS COST_YRWK,
                                      ROWNUM               AS RNUM
                                 FROM MAS_WK_PRD P
                                WHERE P.COST_YR > ' '
                                  AND P.COST_WK > ' '
                                  AND P.COST_YR||P.COST_WK >= @[year]||@[week]
                                  AND ROWNUM               <= @[duration]
                             ) P
                        WHERE SUBSTR(M.SLS_YRMON, 1, 4)||M.COST_WK = P.COST_YRWK
                          AND NVL(M.DELT_FLG, 'N') = 'N'
                          AND M.WKY_TGT_FLG   = 'Y'
                 		  AND M.TRD_CD        = @[trade]

#if (${subtrade} != '')
                 		  AND M.SUB_TRD_CD    = @[subtrade]
#end

#if (${bound} != '')
                 		  AND M.DIR_CD        = @[bound]
#end
                    ) M
               WHERE BKG.BKG_NO      = VVD.BKG_NO
                 AND BKG.BKG_NO      = QUA.BKG_NO
                 AND BKG.BKG_STS_CD <> 'X'
                 AND BKG.POL_CD      = ORG.LOC_CD
                 AND BKG.POD_CD      = DES.LOC_CD
                 AND SPC_CONTI_CONV_FNC(ORG.CONTI_CD, M.RLANE_CD, M.DIR_CD) = DECODE(M.TRD_CD||M.SUB_TRD_CD, 'IASIA', 'A',
                                                                                                             'IASIP', 'A',
                                                                                                             'IMSIP', 'M',
                                                                                                             'IESIP', 'E',
                                                                                                             SPC_CONTI_CONV_FNC(ORG.CONTI_CD, M.RLANE_CD, M.DIR_CD))
                 AND SPC_CONTI_CONV_FNC(DES.CONTI_CD, M.RLANE_CD, M.DIR_CD) = DECODE(M.TRD_CD||M.SUB_TRD_CD, 'IASIA', 'A',
                                                                                                             'IASIP', 'A',
                                                                                                             'IMSIP', 'M',
                                                                                                             'IESIP', 'E',
                                                                                                             SPC_CONTI_CONV_FNC(DES.CONTI_CD, M.RLANE_CD, M.DIR_CD))
                 AND VVD.VSL_CD      = M.VSL_CD
                 AND VVD.SKD_VOY_NO  = M.SKD_VOY_NO
                 AND VVD.SKD_DIR_CD  = M.DIR_CD
                 --AND (M.DELT_FLG IS NULL OR M.DELT_FLG = 'N')

                 --AND SKD.VSL_CD      = M.VSL_CD 
                 --AND SKD.SKD_VOY_NO  = M.SKD_VOY_NO
                 --AND SKD.SKD_DIR_CD  = M.DIR_CD
                 --AND SKD.SLAN_CD     = M.SLAN_CD
              	AND EXISTS (SELECT 'X' FROM VSK_VSL_PORT_SKD SKD
             				 WHERE SKD.VSL_CD     = M.VSL_CD 
             				   AND SKD.SKD_VOY_NO = M.SKD_VOY_NO
           					   AND SKD.SKD_DIR_CD = M.DIR_CD
           					   AND SKD.SLAN_CD    = M.SLAN_CD
           					   AND ROWNUM = 1)

                 --AND M.WKY_TGT_FLG   = 'Y'
                 --AND SPC_SCR_OFC_CONV_FNC(BKG.OB_SLS_OFC_CD)  = O.OFC_CD
                 --AND P.COST_YRWK BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK
                AND SPC_SCR_OFC_CONV_FNC(BKG.OB_SLS_OFC_CD) IN (SELECT OFC_CD 
																  FROM SPC_OFC_LVL 
																 WHERE 1=1
#if (${rhq} != '')
	#if (${rhq} == 'SHARC')
						   										   AND N2ND_PRNT_OFC_CD		IN ('SHARC', 'SINRS')
	#else
															       AND N2ND_PRNT_OFC_CD    IN @[rhq]
	#end
#end
                                                                   AND M.COST_YRWK BETWEEN OFC_APLY_FM_YRWK AND OFC_APLY_TO_YRWK)
           )
     WHERE MTY > 0
  GROUP BY TRD_CD    ,
           SUB_TRD_CD,
           RLANE_CD  ,
           DIR_CD    ,
           COST_YR   ,
           COST_MON  ,
           NUM       ,
           COST_WK   ,
           VSL_CD    ,
           SKD_VOY_NO,
           SKD_DIR_CD,
           VVD       ,
           SLAN_CD
)
#end

, BASE_DATA AS (
    SELECT TRD_CD
         , SUB_TRD_CD
         , RLANE_CD
         , DIR_CD
         , COST_YR
         , COST_MON
         , NUM
         , COST_WK
         , VSL_CD
         , SKD_VOY_NO
         , SKD_DIR_CD
         , VVD
         , SLAN_CD
         , MAX(BSA) BSA , MAX(DECODE(BSA_WGT,0, FULL_WGT+EMPTY_WGT,BSA_WGT)) BSA_WGT
         , MAX(FULL) FULL, MAX(FULL_WGT) FULL_WGT
         , MAX(EMPTY) EMPTY, MAX(EMPTY_WGT) EMPTY_WGT
      FROM (
        SELECT 'BSA_FULL' AS TY,
               TRD_CD    ,
               SUB_TRD_CD,
               RLANE_CD  ,
               DIR_CD    ,
               COST_YR   ,
               COST_MON  ,
               NUM       ,
               COST_WK   ,
               VSL_CD    ,
               SKD_VOY_NO,
               SKD_DIR_CD,
               VVD       ,
               SLAN_CD   ,
               BSA       ,BSA_WGT,
               FULL      ,FULL_WGT,
               0 AS EMPTY,
               0 AS EMPTY_WGT
          FROM BSA_FULL
        UNION ALL
        SELECT 'MTY' AS TY,
               TRD_CD    ,
               SUB_TRD_CD,
               RLANE_CD  ,
               DIR_CD    ,
               COST_YR   ,
               COST_MON  ,
               NUM       ,
               COST_WK   ,
               VSL_CD    ,
               SKD_VOY_NO,
               SKD_DIR_CD,
               VVD       ,
               SLAN_CD   ,
               --NULL AS BSA,
               BSA,BSA_WGT, --2014.07.14 Arie Im [CHM-201431072]  L/F summary 메뉴 로직 수정
               0 AS FULL,
               0 AS FULL_WGT,
               EMPTY, EMPTY_WGT
          FROM RDR_MTY
#if (${trade} == 'IAS' || ${trade} == 'IES' || ${trade} == 'IMS')
        UNION ALL
        SELECT 'INTRA_MTY' AS TY,
               TRD_CD    ,
               SUB_TRD_CD,
               RLANE_CD  ,
               DIR_CD    ,
               COST_YR   ,
               COST_MON  ,
               NUM       ,
               COST_WK   ,
               VSL_CD    ,
               SKD_VOY_NO,
               SKD_DIR_CD,
               VVD       ,
               SLAN_CD   ,
               0 AS BSA,0 AS BSA_WGT,
               0 AS FULL, 0 AS FULL_WGT,
               EMPTY,  0 AS EMPTY_WGT
          FROM INTRA_MTY

          
#end
		)
       GROUP BY TRD_CD , SUB_TRD_CD, RLANE_CD , DIR_CD , COST_YR , COST_MON , NUM , COST_WK , VSL_CD , SKD_VOY_NO, SKD_DIR_CD, VVD , SLAN_CD
)
, BASE_DATA2 AS (
    SELECT 1 AS BSA_AVG ,
           Z1.TRD_CD    ,
           Z1.SUB_TRD_CD,
           Z1.RLANE_CD  ,
           Z1.DIR_CD    ,

#set($primate = 'new_dur')
#if(${duration} == '1')
	#set($new_dur = ['1'])
#elseif(${duration} == '2')
	#set($new_dur = ['1','2'])
#elseif(${duration} == '3')
	#set($new_dur = ['1','2','3'])
#elseif(${duration} == '4')
	#set($new_dur = ['1','2','3','4'])
#elseif(${duration} == '5')
	#set($new_dur = ['1','2','3','4','5'])
#elseif(${duration} == '6')
	#set($new_dur = ['1','2','3','4','5','6'])
#elseif(${duration} == '7')
	#set($new_dur = ['1','2','3','4','5','6','7'])
#elseif(${duration} == '8')
	#set($new_dur = ['1','2','3','4','5','6','7','8'])
#elseif(${duration} == '9')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9'])
#elseif(${duration} == '10')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10'])
#elseif(${duration} == '11')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10','11'])
#elseif(${duration} == '12')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10','11','12'])
#elseif(${duration} == '13')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10','11','12','13'])
#elseif(${duration} == '14')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14'])
#elseif(${duration} == '15')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15'])
#elseif(${duration} == '16')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16'])
#elseif(${duration} == '17')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17'])
#elseif(${duration} == '18')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18'])
#elseif(${duration} == '19')
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19'])
#else 
	#set($new_dur = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20'])
	
#end

#foreach( $key in $new_dur )
           MIN(DECODE(Z1.NUM, ${key}, Z1.VVD))              AS MIN_VVD$key,
           MAX(DECODE(Z1.NUM, ${key}, Z1.VVD))              AS MAX_VVD$key,
           SUM(DECODE(Z1.NUM, ${key}, NVL(Z1.BSA  , 0), 0)) AS BSA$key    ,
           SUM(DECODE(Z1.NUM, 1, NVL(Z1.BSA_WGT  , 0), 0)) AS BSA_WGT$key    ,
           SUM(DECODE(Z1.NUM, ${key}, NVL(Z1.FULL , 0), 0)) AS FULL$key   ,
		   SUM(DECODE(Z1.NUM, 1, NVL(Z1.FULL_WGT , 0), 0)) AS FULL_WGT$key   ,
           SUM(DECODE(Z1.NUM, ${key}, NVL(Z1.EMPTY, 0), 0)) AS EMPTY$key  ,
		   SUM(DECODE(Z1.NUM, 1, NVL(Z1.EMPTY_WGT, 0), 0)) AS EMPTY_WGT$key  ,
#end

           ''
      FROM BASE_DATA Z1
  GROUP BY Z1.TRD_CD    ,
           Z1.SUB_TRD_CD,
           Z1.RLANE_CD  ,
           Z1.DIR_CD
  ORDER BY Z1.TRD_CD    ,
           Z1.SUB_TRD_CD,
           Z1.RLANE_CD  ,
           Z1.DIR_CD
)
  SELECT Z3.TRD_CD    ,
         Z3.SUB_TRD_CD,
         Z3.RLANE_CD  ,
         Z3.DIR_CD    ,

#foreach( $key in $new_dur )
         Z3.VVD$key    ,
         Z3.BSA$key    ,
         Z3.FULL$key   ,
         Z3.EMPTY$key  ,
         Z3.TTL_LOAD$key,
         ROUND(DECODE(Z3.BSA$key, 0, 0, DECODE(Z3.FULL$key    , 0, 0, Z3.FULL$key     * 100 / Z3.BSA$key)), 1) AS FULL_LF$key,
         ROUND(DECODE(Z3.BSA$key, 0, 0, DECODE(Z3.TTL_LOAD$key, 0, 0, Z3.TTL_LOAD$key * 100 / Z3.BSA$key)), 1) AS TTL_LF$key ,
         Z3.BSA_WGT$key    ,
         Z3.FULL_WGT$key   ,
         Z3.EMPTY_WGT$key  ,
         Z3.TTL_LOAD_WGT$key,
         ROUND(DECODE(Z3.BSA_WGT$key, 0, 0, DECODE(Z3.TTL_LOAD_WGT$key, 0, 0, Z3.TTL_LOAD_WGT$key * 100 / Z3.BSA_WGT$key)), 1) AS TTL_WGT_LF$key ,
         
#end

         Z3.T_BSA  ,
         Z3.T_FULL ,
         Z3.T_EMPTY,
         Z3.T_LOAD ,
         ROUND(DECODE(Z3.T_BSA, 0, 0, DECODE(Z3.T_FULL, 0, 0, Z3.T_FULL * 100 / Z3.T_BSA)), 1) AS T_FULL_LF,
         ROUND(DECODE(Z3.T_BSA, 0, 0, DECODE(Z3.T_LOAD, 0, 0, Z3.T_LOAD * 100 / Z3.T_BSA)), 1) AS T_TTL_LF ,

         Z3.T_BSA_WGT  ,
         Z3.T_FULL_WGT ,
         Z3.T_EMPTY_WGT,
         Z3.T_LOAD_WGT ,
         ROUND(DECODE(Z3.T_BSA_WGT, 0, 0, DECODE(Z3.T_LOAD_WGT, 0, 0, Z3.T_LOAD_WGT * 100 / Z3.T_BSA_WGT)), 1) AS T_TTL_WGT_LF ,
         '' AS T
    FROM (
            SELECT NVL(( SELECT SUM(BSA) / COUNT(1) AS BSA
                           FROM BSA_FULL L
                          WHERE L.SUB_TRD_CD = Z2.SUB_TRD_CD
                            AND L.RLANE_CD   = Z2.RLANE_CD
                            AND L.DIR_CD     = Z2.DIR_CD), 0) AS BSA_AVG,
                   NVL(Z2.TRD_CD    , 'TOTAL') AS TRD_CD    ,
                   NVL(Z2.SUB_TRD_CD, 'TOTAL') AS SUB_TRD_CD,
                   NVL(Z2.RLANE_CD  , 'TOTAL') AS RLANE_CD  ,
                   NVL(Z2.DIR_CD    , 'TOTAL') AS DIR_CD    ,

#foreach( $key in $new_dur )
                   MAX(DECODE((NVL(Z2.MIN_VVD$key, ' ')), (NVL(Z2.MAX_VVD$key, ' ')), Z2.MIN_VVD$key, Z2.MAX_VVD$key || '/' || Z2.MIN_VVD$key)) AS VVD${key},
                   SUM(DECODE(Z2.TRD_CD||Z2.SUB_TRD_CD, 'IASIP', Z2.FULL$key, Z2.BSA$key)) AS BSA$key,
				   SUM(DECODE(Z2.TRD_CD||Z2.SUB_TRD_CD, 'IASIP', Z2.FULL_WGT$key, Z2.BSA_WGT$key)) AS BSA_WGT$key,
                   SUM(Z2.FULL$key)  AS FULL$key ,
                   SUM(Z2.EMPTY$key) AS EMPTY$key,
                   SUM(Z2.FULL$key + Z2.EMPTY$key) AS TTL_LOAD$key,

				   SUM(Z2.FULL_WGT$key)  AS FULL_WGT$key ,
                   SUM(Z2.EMPTY_WGT$key) AS EMPTY_WGT$key,
                   SUM(Z2.FULL_WGT$key + Z2.EMPTY_WGT$key) AS TTL_LOAD_WGT$key,
#end

                   SUM( 0 
#foreach( $key in $new_dur )
                        + DECODE(Z2.TRD_CD||Z2.SUB_TRD_CD, 'IASIP', Z2.FULL$key, Z2.BSA$key)
#end
                   ) AS T_BSA,

                   SUM( 0 
#foreach( $key in $new_dur )
                        + DECODE(Z2.TRD_CD||Z2.SUB_TRD_CD, 'IASIP', Z2.FULL_WGT$key, Z2.BSA_WGT$key)
#end
                   ) AS T_BSA_WGT,

                   SUM( 0 
#foreach( $key in $new_dur )
                        + Z2.FULL$key
#end
                   ) AS T_FULL,

                   SUM( 0 
#foreach( $key in $new_dur )
                        + Z2.EMPTY$key
#end
                   ) AS T_EMPTY,

                   SUM( 0 
#foreach( $key in $new_dur )
                        + Z2.FULL$key + Z2.EMPTY$key
#end
                   ) AS T_LOAD,

                   SUM( 0 
#foreach( $key in $new_dur )
                        + Z2.FULL_WGT$key
#end
                   ) AS T_FULL_WGT,

                   SUM( 0 
#foreach( $key in $new_dur )
                        + Z2.EMPTY_WGT$key 
#end
                   ) AS T_EMPTY_WGT,

                   SUM( 0 
#foreach( $key in $new_dur )
                        + Z2.FULL_WGT$key + Z2.EMPTY_WGT$key
#end
                   ) AS T_LOAD_WGT,
                   ''
              FROM BASE_DATA2 Z2
          GROUP BY Z2.TRD_CD,
                   CUBE(Z2.SUB_TRD_CD, Z2.RLANE_CD, Z2.DIR_CD)
            HAVING     (NOT (SUB_TRD_CD IS NULL     AND RLANE_CD IS NOT NULL))
                   AND (NOT (SUB_TRD_CD IS NOT NULL AND RLANE_CD IS NOT NULL AND DIR_CD IS NULL))
                   AND (NOT (SUB_TRD_CD IS NULL     AND RLANE_CD IS NULL     AND DIR_CD IS NOT NULL))
                   AND (NOT (SUB_TRD_CD IS NOT NULL AND RLANE_CD IS NULL     AND DIR_CD IS NOT NULL))
         ) Z3
ORDER BY DECODE(SUB_TRD_CD, 'TOTAL', '00', SUB_TRD_CD) DESC,
         BSA_AVG DESC,
         DECODE(RLANE_CD, 'TOTAL', 'ZZZZZ', RLANE_CD),
		 DECODE(DIR_CD  , 'TOTAL', 'ZZZZZ', DIR_CD)			]]></sql>
			<params>
				<param name="year" type="12" value="" out="N"/>
				<param name="week" type="12" value="" out="N"/>
				<param name="duration" type="12" value="" out="N"/>
				<param name="rev_month" type="12" value="" out="N"/>
				<param name="trade" type="12" value="" out="N"/>
				<param name="rhq" type="12" value="" out="N"/>
				<param name="subtrade" type="12" value="" out="N"/>
				<param name="bound" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
