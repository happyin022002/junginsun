<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="Jp24ManifestListDownloadDBDAOSearchCargoInfoDetailBLDataRSQL">
			<desc><![CDATA[]]></desc>
			<sql><![CDATA[
---------------------------------------------------------------------------------- BL Data 조회
---------------------- Phone Number 로그인 오피스로 BKG_IB_CUST_CNTC와 매핑하기가 불가: 사전신고 및 MFR신고가 오피스가 다르므로
---------------------- SHIPPER는 POL의 MDM SLS_OFC_CD, CNEE/NTFY DEL는 EQ_CTRL_OFC_CD로 매핑한다.
---------------------- 없으면 MDM_CUST_CNTC_PNT.PHN_NO 정보를 이용한다.

SELECT DENSE_RANK() OVER (ORDER BY BL_NO, POL_CD, POD_CD, BKG_DEL_CD) AS SEQ,
       BL_NO,
       MST_BL,
       BKG_POL_CD,
       POL_CD,
	   POD_CD,
       BKG_POD_CD,
       BKG_DEL_CD,
       BB_CGO_FLG, -- 2014.07.08 HN.LEE
       A_S_TYPE,
       A_CMR_KIND,
       
/* 
   1. AMR/CMR 구분 2. ATD 체크 3. SA111 체크 ---------------------------------------------------------------------- 수정
              미 전송 BL이고, VVD,POD등이 최초전송이거나 바뀐 상태, ATD신고 전이면 AMR 최초 전송 , 후이면 CMR-ADD로 전송
               AMR/CMR 기신고 BL > ATD 신고 전이면 CMR, 후이면 초치 사항이 없으면 CMR전송하지 않는다.
               AMR/CMR 기신고 BL > VVD,POL등이 바뀐 상태(T/S건) > ATD신고 전이면 AMR, 후이면 CMR  
       CASE WHEN A_S_TYPE = ' '            AND PRE_T_S_TYPE = 'AMR' THEN DECODE(ATD_SND, ' ', 'AMR','CMR') 
            WHEN A_S_TYPE IN ('AMR','CMR') AND PRE_T_S_TYPE = 'CMR' THEN DECODE(ATD_SND, ' ', 'CMR', DECODE(SA111_RST, ' ', ' ', 'CMR'))
            WHEN A_S_TYPE IN ('AMR','CMR') AND PRE_T_S_TYPE = 'AMR' THEN DECODE(ATD_SND, ' ', 'AMR','CMR')
       END AS T_S_TYPE,
       
      
               해당 BL은 전송 안했어도, VVD의 타 BL들이 AMR 신고 및 ATD 전이면 AMR 최초전송, 후이면 CMR-ADD로 전송, 
               AMR/CMR 기신고 BL > ATD 신고 전이면 CMR, 후이면 초치 사항이 없으면 CMR전송하지 않는다.
               CMR 신고 BL       > ATD 신고 전이면 CMR, 후이면 초치 사항이 없으면 CMR 전송하지 않음. 조치사항이 있고 기존 전송이 ADD(2)이면 ADD, 아니면 Correction 5
               AMR/CMR 기신고 BL > VVD,POL등이 바뀐 상태(T/S건) > ATD신고 전이면 최초전송 9, 후이면 기 Add전송이고 조치사항이 없거나 Error일경우 Add 2, 아니면 Correction 5
               AMR 기신고 BL     > VVD,POL등이 바뀐 상태(T/S건) > ATD신고 전이면 최초전송 9, 후이면 기 Add 2 전송
             
       CASE WHEN A_S_TYPE = ' '   AND PRE_T_S_TYPE = 'AMR' THEN DECODE(ATD_SND, ' ', '9', '2')
            WHEN A_S_TYPE = 'AMR' AND PRE_T_S_TYPE = 'CMR' THEN DECODE(ATD_SND, ' ', '5', DECODE(SA111_RST, ' ', ' ', '5'))
            WHEN A_S_TYPE = 'CMR' AND PRE_T_S_TYPE = 'CMR' THEN DECODE(ATD_SND, ' ', '5', DECODE(SA111_RST, ' ', ' ', DECODE(A_CMR_KIND||SCMR_RST, '2 ', '2', '5')))
           
            WHEN A_S_TYPE = 'CMR' AND PRE_T_S_TYPE = 'AMR' THEN CASE WHEN ATD_SND = ' ' THEN '9' ELSE CASE WHEN A_CMR_KIND = '2' AND (SCMR_RST = ' ' OR SCMR_RST = 'Error') THEN '2' ELSE '5' END   END
            WHEN A_S_TYPE = 'AMR' AND PRE_T_S_TYPE = 'AMR' THEN CASE WHEN ATD_SND = ' ' THEN '9' ELSE '2'   END
       END AS T_CMR_KIND,
*/
       -- 1. AMR/CMR 구분 2. ATD 체크 3. SA111 체크
       CASE WHEN A_S_TYPE = ' '   AND PRE_T_S_TYPE = 'AMR' THEN 
                 CASE WHEN ATD_SND = ' ' THEN 'AMR' 
                      ELSE 'CMR' 
                 END
            WHEN A_S_TYPE = 'AMR' AND PRE_T_S_TYPE = 'CMR' THEN
                 CASE WHEN ATD_SND <> ' ' THEN
                           CASE WHEN SA111_RST <> ' ' THEN 'CMR'
                                ELSE ' '
                           END
                      ELSE 'CMR'
                 END
            WHEN A_S_TYPE = 'CMR' AND PRE_T_S_TYPE = 'CMR' THEN 
                 CASE WHEN ATD_SND <> ' ' THEN
                           CASE WHEN SA111_RST <> ' ' THEN 'CMR'
                                ELSE ' '
                           END
                      ELSE 'CMR'
                 END
            WHEN A_S_TYPE = 'CMR' AND PRE_T_S_TYPE = 'AMR' THEN 
                 CASE WHEN ATD_SND = ' ' THEN 'AMR' 
                      ELSE 'CMR' 
                 END
            WHEN A_S_TYPE = 'AMR' AND PRE_T_S_TYPE = 'AMR' THEN 
                 CASE WHEN ATD_SND = ' ' THEN 'AMR' 
                      ELSE 'CMR' 
                 END
       END AS T_S_TYPE,
       
       CASE WHEN A_S_TYPE = ' '   AND PRE_T_S_TYPE = 'AMR' THEN 
                 CASE WHEN ATD_SND = ' ' THEN '9' 
                      ELSE '2'   
                 END
            WHEN A_S_TYPE = 'AMR' AND PRE_T_S_TYPE = 'CMR' THEN
                 CASE WHEN ATD_SND <> ' ' THEN
                           CASE WHEN SA111_RST <> ' ' THEN '5'
                                ELSE ' '
                           END
                      ELSE '5'
                 END
            WHEN A_S_TYPE = 'CMR' AND PRE_T_S_TYPE = 'CMR' THEN
                 CASE WHEN ATD_SND <> ' ' THEN
                           CASE WHEN SA111_RST <> ' ' THEN 
                                     CASE WHEN A_CMR_KIND = '2' AND SCMR_RST = ' ' THEN '2' 
                                          ELSE '5' 
                                     END
                                ELSE ' '
                           END
                      ELSE '5'
                 END
            WHEN A_S_TYPE = 'CMR' AND PRE_T_S_TYPE = 'AMR' THEN 
                 CASE WHEN ATD_SND = ' ' THEN '9' 
                      ELSE CASE WHEN A_CMR_KIND = '2' AND (SCMR_RST = ' ' OR SCMR_RST = 'Error') THEN '2' 
                                ELSE '5' 
                           END   
                 END
            WHEN A_S_TYPE = 'AMR' AND PRE_T_S_TYPE = 'AMR' THEN 
                 CASE WHEN ATD_SND = ' ' THEN '9' 
                      ELSE '2'   
                 END
       END AS T_CMR_KIND,
       --  T_CMR_KIND,
       S_DT,
       SAMR_DT,
       SAMR_RST,
       SA111_DT,
       SA111_RST,
       SCMR_DT,
       SCMR_RST,
       SC108_DT,
       SC108_RST,
       SC108_RST_DTL,
       SHPR_NM,
       SHPR_ADDR,
       SHPR_CNT_CD,
	   SHPR_PHN_NO,
       ' ' AS SHPR_VIA,
	   ----------------------추가
	   DECODE(CUST_TO_ORD_FLG, 'Y','Y', CNEE_NM)            AS CNEE_NM,    -- 2017.08.01 TO_ORDER CHECK CUST_TO_ORD_FLG Y이면 'TO ORDER로 전송
	   DECODE(CUST_TO_ORD_FLG, 'Y','Y', CNEE_ADDR)          AS CNEE_ADDR,  -- 2017.08.01 TO_ORDER CHECK CUST_TO_ORD_FLG Y이면 'TO ORDER로 전송
	   DECODE(CUST_TO_ORD_FLG, 'Y',NTFY_CNT_CD,CNEE_CNT_CD) AS CNEE_CNT_CD,-- 2017.08.01 TO_ORDER CHECK CUST_TO_ORD_FLG Y이면 Notify Party Country Code 
	   DECODE(CUST_TO_ORD_FLG, 'Y','Y', CNEE_PHN_NO)        AS CNEE_PHN_NO,-- 2017.08.01 TO_ORDER CHECK CUST_TO_ORD_FLG Y이면 'TO ORDER로 전송
       ' ' AS CNEE_VIA,
       NTFY_NM,
       NTFY_ADDR,
       NTFY_CNT_CD,
	   NTFY_PHN_NO,
       ' ' AS NTFY_VIA,
       USR_EML,
       OLD_USR_EML,
       CMDT_CD,
       CMDT_HS_CD,
       MK_DESC,
       PCK_QTY,
       PCK_TP_CD,
       ACT_WGT,
       WGT_UT_CD,
       MEAS_QTY,
       MEAS_UT_CD,
       IMDG_CLS,
       UN_NO,
       CNTR_NO,
       POD_DIV,
       RVIS_CNTR_CUST_TP_CD,
       SHPR_NM||SHPR_ADDR||SHPR_CNT_CD||SHPR_PHN_NO||CNEE_NM||CNEE_ADDR||CNEE_CNT_CD||CNEE_PHN_NO||NTFY_NM||NTFY_ADDR||NTFY_CNT_CD||NTFY_PHN_NO||CMDT_CD||CMDT_HS_CD||MK_DESC||PCK_QTY||PCK_TP_CD||ACT_WGT||WGT_UT_CD||MEAS_QTY||MEAS_UT_CD||IMDG_CLS||UN_NO AS ERR_INFO,
       S_INFO
--,       ATD_SND

  FROM
       (SELECT BL_NO,
               MST_BL,
               BKG_POL_CD,
               POL_CD,
			   POD_CD,
               BKG_POD_CD,
               BKG_DEL_CD,
               BB_CGO_FLG, -- 2014.07.08 HN.LEE
               CUST_TO_ORD_FLG, -- 2017.08.01 TO_ORDER CHECK
			   NVL(SUBSTR(S_INFO, 17, 3), ' ') AS A_S_TYPE,
               NVL(SUBSTR(S_INFO, 35, 1), ' ') AS A_CMR_KIND,
               CASE
                  WHEN S_INFO IS NULL OR SUBSTR(S_INFO, 20, 9) <> @[vvd] OR SUBSTR(S_INFO, 29, 6) <> @[pol_cd]||NVL(@[pol_split_no], ' ') OR NVL(SUBSTR(AMR_SAMR, 17, 5), ' ') <> '00000'
                     THEN 'AMR'
                  ELSE 'CMR'
               END AS PRE_T_S_TYPE,
               NVL(SUBSTR(S_INFO, 1, 16), ' ') AS S_DT,
               NVL(SUBSTR(AMR_SAMR, 1, 16), ' ') AS SAMR_DT,
               --NVL(SUBSTR(AMR_SAMR, 17), ' ') AS SAMR_RST,
               NVL(DECODE(SUBSTR(AMR_SAMR, 17, 5), '00000', 'Success', NULL, ' ', 'Error'), ' ') AS SAMR_RST,
               NVL(SUBSTR(AMR_SAS111, 1, 16), ' ') AS SA111_DT,
               --NVL(SUBSTR(AMR_SAS111, 17), ' ') AS SA111_RST,
               NVL(DECODE(SUBSTR(AMR_SAS111, 20, 1), '1', 'Clear', SUBSTR(AMR_SAS111, 17, 3)), ' ') AS SA111_RST,
               NVL(SUBSTR(CMR_SCMR, 1, 16), ' ') AS SCMR_DT,
               --NVL(SUBSTR(CMR_SCMR, 17), ' ') AS SCMR_RST,
               NVL(DECODE(SUBSTR(CMR_SCMR, 17, 5), '00000', 'Success', NULL, ' ', 'Error'), ' ') AS SCMR_RST,
               NVL(SUBSTR(CMR_SAS108, 1, 16), ' ') AS SC108_DT,
               --NVL(SUBSTR(CMR_SAS108, 17), ' ') AS SC108_RST,
               NVL(DECODE(SUBSTR(CMR_SAS108, 17, 11), '/////', 'Success', NULL, ' ', 'Error'), ' ') AS SC108_RST,
               NVL(DECODE(SUBSTR(CMR_SAS108, 17, 11), '/////', ' ', NULL, ' ', SUBSTR(CMR_SAS108, 17)), ' ') AS SC108_RST_DTL,
               SHPR_NM,
               SHPR_ADDR,
               SHPR_CNT_CD,
			   SHPR_PHN_NO,
               CNEE_NM,
               CNEE_ADDR,
               CNEE_CNT_CD,
			   CNEE_PHN_NO,
               NTFY_NM,
               NTFY_ADDR,
               NTFY_CNT_CD,
			   NTFY_PHN_NO,
               ' ' AS USR_EML,
               ' ' AS OLD_USR_EML,
               CMDT_CD,
               CMDT_HS_CD,
               MK_DESC,
               PCK_QTY,
               PCK_TP_CD,
               ACT_WGT,
               WGT_UT_CD,
               MEAS_QTY,
               MEAS_UT_CD,
               IMDG_CLS,
               UN_NO,
               CNTR_NO,
               POD_DIV,
               RVIS_CNTR_CUST_TP_CD,
               S_INFO,
               NVL(ATD_SND, ' ') AS ATD_SND

          FROM
               (SELECT DOC.BKG_NO AS BL_NO,
                       BKG.POL_CD AS BKG_POL_CD,
                       VVD.POL_CD,
					   VVD.POD_CD POD_CD,
                       BKG.POD_CD AS BKG_POD_CD,
                       BKG.DEL_CD AS BKG_DEL_CD,
                       BKG.BB_CGO_FLG, -- 2014.07.08 HN.LEE
                       BKG.CUST_TO_ORD_FLG, -- 2017.08.01 TO_ORDER CHECK
                       DECODE(BKG.KR_CSTMS_CUST_TP_CD, 'C', 'C', 'S', 'S', 'E') AS MST_BL,
                       CNTR.CNTR_NO,
                       DECODE(SHPR.CUST_NM, NULL, 'N', 'Y') AS SHPR_NM,
                       DECODE(SHPR.CUST_ADDR, NULL, 'N', 'Y') AS SHPR_ADDR,
                       DECODE(SHPR.CUST_CNT_CD, NULL, 'N', 'Y') AS SHPR_CNT_CD,
          			   ----------------------추가
            		   DECODE(SHPR.EORI_NO, NULL, 'N', 'Y') AS SHPR_PHN_NO,

                       DECODE(CNEE.CUST_NM, NULL, 'N', 'Y') AS CNEE_NM,
                       DECODE(CNEE.CUST_ADDR, NULL, 'N', 'Y') AS CNEE_ADDR,
                       DECODE(CNEE.CUST_CNT_CD, NULL, 'N', 'Y') AS CNEE_CNT_CD,
           			   ----------------------추가
           	           DECODE(CNEE.EORI_NO, NULL, 'N', 'Y') AS CNEE_PHN_NO,

                       DECODE(NTFY.CUST_NM, NULL, 'N', 'Y') AS NTFY_NM,
                       DECODE(NTFY.CUST_ADDR, NULL, 'N', 'Y') AS NTFY_ADDR,
                       DECODE(NTFY.CUST_CNT_CD, NULL, 'N', 'Y') AS NTFY_CNT_CD,
           			   ----------------------추가
           			   DECODE(NTFY.EORI_NO, NULL, 'N', 'Y') AS NTFY_PHN_NO,      

 					   DECODE(BKG.CMDT_CD, NULL, DECODE(DOC.CSTMS_DESC, NULL, 'N', 'Y'), 'Y') AS CMDT_CD,
                       --DECODE(CMD.CMDT_HS_CD, NULL, 'N', 'Y') AS CMDT_HS_CD,
                       NVL((SELECT DECODE(MAX(CMD.CMDT_HS_CD), NULL, 'N', 'Y') FROM BKG_CNTR_MF_DESC CMD WHERE CMD.BKG_NO = DOC.BKG_NO), 'N') AS CMDT_HS_CD,
                       DECODE(LENGTH(RTRIM(BMD.MK_DESC)), NULL, 'N', 'Y') AS MK_DESC,
                       DECODE(DOC.PCK_QTY, NULL, 'N', 'Y') AS PCK_QTY,
                       DECODE(DOC.PCK_TP_CD, NULL, 'N', 'Y') AS PCK_TP_CD,
                       DECODE(DOC.ACT_WGT, NULL, 'N', 'Y') AS ACT_WGT,
                       DECODE(DOC.WGT_UT_CD, NULL, 'N', 'Y') AS WGT_UT_CD,
                       DECODE(DOC.MEAS_QTY, NULL, 'N', 'Y') AS MEAS_QTY,
                       DECODE(DOC.MEAS_UT_CD, NULL, 'N', 'Y') AS MEAS_UT_CD,
					   decode(BKG.DCGO_FLG, 'Y', (select decode(max(DG.IMDG_CLSS_CD), null, 'N', 'Y') from BKG_DG_CGO DG  WHERE DG.BKG_NO = DOC.BKG_NO), 'Y') AS IMDG_CLS,
                       decode(BKG.DCGO_FLG, 'Y', (select decode(max(DG.IMDG_UN_NO),   null, 'N', 'Y') from BKG_DG_CGO DG  WHERE DG.BKG_NO = DOC.BKG_NO), 'Y') AS UN_NO,
                       (SELECT /*+ INDEX_DESC(RCV XAK1BKG_CSTMS_ADV_JP_RCV_LOG) */
                               TO_CHAR(RCV.RCV_DT, 'YYYY-MM-DD HH24:MI')||RCV.RCV_KEY_DAT_CTNT
                          FROM BKG_CSTMS_ADV_JP_RCV_LOG RCV
                         WHERE RCV.BKG_NO = BKG.BKG_NO
                           AND RCV.JP_SVC_ID = 'SAMR'
                           AND RCV.JP_MSG_TP_ID = 'SAMR'
                           AND RCV.RCV_KEY_DAT_CTNT not like 'W%'
                           AND ROWNUM = 1) AS AMR_SAMR,
                       (SELECT /*+ INDEX_DESC(RCV XAK1BKG_CSTMS_ADV_JP_RCV_LOG) */
                               TO_CHAR(RCV.UPD_DT, 'YYYY-MM-DD HH24:MI')||RCV.RCV_KEY_DAT_CTNT||DECODE(RCV.JP_BAT_NO, NULL, ' ', RCV.JP_BAT_NO)
                          FROM BKG_CSTMS_ADV_JP_RCV_LOG RCV
                         WHERE RCV.BKG_NO = BKG.BKG_NO
                           AND RCV.JP_SVC_ID = 'SAS111'
                           AND RCV.JP_MSG_TP_ID = 'SAS111'
                           AND ROWNUM = 1) AS AMR_SAS111,
                       (SELECT /*+ INDEX_DESC(RCV XAK1BKG_CSTMS_ADV_JP_RCV_LOG) */
                              TO_CHAR(RCV.RCV_DT, 'YYYY-MM-DD HH24:MI')||RCV.RCV_KEY_DAT_CTNT
                          FROM BKG_CSTMS_ADV_JP_RCV_LOG RCV
                         WHERE RCV.BKG_NO = BKG.BKG_NO
                           AND RCV.JP_SVC_ID = 'SCMR'
                           AND RCV.JP_MSG_TP_ID = 'SCMR'
                           AND RCV.RCV_KEY_DAT_CTNT not like 'W%'
                           AND ROWNUM = 1) AS CMR_SCMR,
                       (SELECT /*+ INDEX_DESC(RCV XAK1BKG_CSTMS_ADV_JP_RCV_LOG) */
                               TO_CHAR(RCV.RCV_DT, 'YYYY-MM-DD HH24:MI')||RCV.RCV_KEY_DAT_CTNT
                          FROM BKG_CSTMS_ADV_JP_RCV_LOG RCV
                         WHERE RCV.BKG_NO = BKG.BKG_NO
                           AND RCV.JP_SVC_ID = 'SAS108'
                           AND RCV.JP_MSG_TP_ID = 'SAS108'
                           AND ROWNUM = 1) AS CMR_SAS108,
                       (SELECT /*+ INDEX_DESC(SND XAK1BKG_CSTMS_ADV_JP_SND_LOG) */
                               TO_CHAR(SND.SND_DT, 'YYYY-MM-DD HH24:MI')||SND.JP_SND_LOG_ID||VSL_CD||SKD_VOY_NO||SKD_DIR_CD||POL_CD||DECODE(YD_SEQ, NULL, ' ', YD_SEQ)||LOG_SEQ
                          FROM BKG_CSTMS_ADV_JP_SND_LOG SND
                         WHERE BKG.BKG_NO = SND.BL_NO(+)
                           AND ROWNUM = 1) AS S_INFO,
                       (SELECT JP_SND_LOG_ID ATD_SND
                          FROM BKG_CSTMS_ADV_JP_SND_LOG SND
                         WHERE SND.VSL_CD = SUBSTR(@[vvd], 1, 4)
                           and SND.SKD_VOY_NO = SUBSTR(@[vvd], 5, 4)
                           and SND.SKD_DIR_CD = SUBSTR(@[vvd], 9, 1)
                           AND SND.JP_SND_LOG_ID = 'ATD'
                           AND SND.POL_CD = VVD.POL_CD
                           AND ROWNUM = 1 ) AS ATD_SND,
                       DECODE(BKG.POD_CD, VVD.POD_CD, 'DIR', 'T/S') AS POD_DIV,
                       DECODE(BKG.KR_CSTMS_CUST_TP_CD, 'C', 'N', 'S', 'B', 'E') AS RVIS_CNTR_CUST_TP_CD

                  FROM BKG_VVD VVD,
                       BKG_BOOKING BKG,
                       BKG_BL_DOC DOC,
                       BKG_CUSTOMER SHPR,
                       BKG_CUSTOMER CNEE,
                       BKG_CUSTOMER NTFY,
                       BKG_BL_MK_DESC BMD,
                       --BKG_CNTR_MF_DESC CMD,
                       --BKG_DG_CGO DG,
                       BKG_CONTAINER CNTR

                 WHERE 1 = 1
                   AND VVD.VSL_CD = SUBSTR(@[vvd], 1, 4)
                   AND VVD.SKD_VOY_NO = SUBSTR(@[vvd], 5, 4)
                   AND VVD.SKD_DIR_CD = SUBSTR(@[vvd], 9, 1)
                   AND VVD.POL_CD = @[pol_cd]
        #if (${lt_div} == 'L')
                   AND VVD.POL_CD = BKG.POL_CD
        #elseif (${lt_div} == 'T')
                   AND VVD.POL_CD <> BKG.POL_CD
        #end
                   AND VVD.POD_CD LIKE @[pod_prefix]||@[pod_postfix]||'%'
        #if (${bl_no} != '')
                   AND DOC.BKG_NO = @[bl_no]
        #end
        #if (${bkg_ofc_cd} != '')
                   AND BKG.BKG_OFC_CD = @[bkg_ofc_cd]
        #end
        #if (${doc_usr_id} != '')
                   AND BKG.DOC_USR_ID = @[doc_usr_id]
        #end
                   AND VVD.BKG_NO = BKG.BKG_NO
                   AND VVD.BKG_NO = DOC.BKG_NO
                   AND VVD.BKG_NO = CNTR.BKG_NO(+)
                   AND BKG.BKG_NO = SHPR.BKG_NO(+)
                   AND SHPR.BKG_CUST_TP_CD(+) = 'S'
                   AND BKG.BKG_NO = CNEE.BKG_NO(+)
                   AND CNEE.BKG_CUST_TP_CD(+) = 'C'
                   AND BKG.BKG_NO = NTFY.BKG_NO(+)
                   AND NTFY.BKG_CUST_TP_CD(+) = 'N'
                   AND BKG.BKG_STS_CD IN ('F', 'W')
                   AND BKG.BKG_CGO_TP_CD = 'F'
                   AND BKG.BKG_NO = BMD.BKG_NO(+)
                   --AND CNTR.BKG_NO = CMD.BKG_NO(+)
                   --AND CNTR.CNTR_NO = CMD.CNTR_NO(+)
                   --AND CNTR.BKG_NO = DG.BKG_NO(+)
                   --AND CNTR.CNTR_NO = DG.CNTR_NO(+)
                   --AND CMD.CNTR_MF_SEQ(+) = '1'
                   --AND DG.DCGO_SEQ(+) = '1'
             )
     )

 WHERE 1 = 1
#if (${error_div} == 'ERR')
   AND (MST_BL = 'E' OR
        SHPR_NM = 'N' OR SHPR_ADDR = 'N' OR SHPR_CNT_CD = 'N' OR SHPR_PHN_NO = 'N' OR
        CNEE_NM = 'N' OR CNEE_ADDR = 'N' OR CNEE_CNT_CD = 'N' OR CNEE_PHN_NO = 'N' OR
        NTFY_NM = 'N' OR NTFY_ADDR = 'N' OR NTFY_CNT_CD = 'N' OR NTFY_PHN_NO = 'N' OR
        CMDT_CD = 'N' OR CMDT_HS_CD = 'N' OR MK_DESC = 'N' OR
        PCK_QTY = 'N' OR PCK_TP_CD = 'N' OR ACT_WGT = 'N' OR WGT_UT_CD = 'N' OR
        MEAS_QTY = 'N' OR MEAS_UT_CD = 'N' OR IMDG_CLS = 'N' OR UN_NO = 'N' OR
        CNTR_NO IS NULL)
#end
#if (${cstms_rslts} == 'ALL_RSLT')
   AND (SA111_RST <> ' ' OR SC108_RST <> ' ' OR SAMR_RST <> ' ' OR SCMR_RST <> ' ')
#elseif (${cstms_rslts} == 'SAS111')
   AND SA111_RST <> ' '
#elseif (${cstms_rslts} == 'SAS108')
   AND SC108_RST <> ' '
#elseif (${cstms_rslts} == 'SAMR')
   AND SAMR_RST <> ' '
#elseif (${cstms_rslts} == 'SCMR')
   AND SCMR_RST <> ' '
#end

  ORDER BY BL_NO,
           CNTR_NO			]]></sql>
			<params>
				<param name="vvd" type="12" value="" out="N"/>
				<param name="pol_cd" type="12" value="" out="N"/>
				<param name="pol_split_no" type="12" value="" out="N"/>
				<param name="pod_prefix" type="12" value="" out="N"/>
				<param name="pod_postfix" type="12" value="" out="N"/>
				<param name="bl_no" type="12" value="" out="N"/>
				<param name="bkg_ofc_cd" type="12" value="" out="N"/>
				<param name="doc_usr_id" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
