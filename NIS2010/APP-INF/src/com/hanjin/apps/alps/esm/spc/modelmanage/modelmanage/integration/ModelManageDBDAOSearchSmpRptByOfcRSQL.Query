<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ModelManageDBDAOSearchSmpRptByOfcRSQL">
			<desc><![CDATA[조건에 맞는 SMP Loading 정보 Office 관점에서 조회합니다.
[CHM-201322502-01] SPC 프로젝트 - 성수기 선복운영 개선을 위한 T/F추진
2013.06.25 진마리아 [선처리] CRM Customer Flag 정보 개편에 따른 작업
2013.08.01 진마리아 guide 값을 잘못 조회함
2013.12.05 김시몬 [CHM-201326854] SAQ project로 인한 SPC 변경건_테이블 변경
2014.01.03 진마리아 [SRM-201341166] Yield Group의 확대
2014.02.04 [CHM-201428383-01] RFA 로직 추가
2014.05.16 [CHM-201430353] SMP / AES 보완요청 - SC 입력 기능 추가
2015.06.19 Arie Im 쿼리튜닝, MAS_MON_VVD, QTA, Grouping Set]]></desc>
			<sql><![CDATA[
WITH MAS_MON_VVD_LV AS(
              SELECT M.TRD_CD    ,
                     M.SUB_TRD_CD,
                     M.RLANE_CD  ,
                     M.DIR_CD    ,
                     SUBSTR(M.SLS_YRMON, 1, 4) AS COST_YR,
                     M.COST_WK   ,
                     SUBSTR(M.SLS_YRMON, 1, 4) || M.COST_WK AS COST_YRWK,
                     TO_CHAR(M.N1ST_LODG_PORT_ETD_DT,'YYYYMMDD') AS N1ST_LODG_PORT_ETD_DT,
                     M.VSL_CD    ,
                     M.SKD_VOY_NO,
                     H.DIR_CD        AS SKD_DIR_CD
                     , SUBSTR(M.COST_YRMON, 1, 4) AS BSE_YR
                     , CASE WHEN M.COST_YRMON >= '201501' 
                            THEN CEIL(TO_NUMBER(SUBSTR(M.COST_YRMON, -2))/3)||'Q' 
                            ELSE CEIL(TO_NUMBER(DECODE(M.COST_WK, '00', '01', '53', '52', M.COST_WK))/13)||'Q' 
                             END BSE_QTR_CD

                FROM MAS_MON_VVD     M,
                     SPC_HD_HUL_MST H
               WHERE --SUBSTR(M.SLS_YRMON, 1, 4) = SUBSTR(TO_CHAR(SYSDATE,'YYYYMM'),1,4)
					 SUBSTR(M.SLS_YRMON, 1, 4)||M.COST_WK LIKE TO_CHAR(SYSDATE, 'YYYY')||'%'
                 AND (M.DELT_FLG IS NULL OR M.DELT_FLG = 'N')
                 AND M.TRD_CD = @[trade]
                 AND M.TRD_CD = H.TRD_CD
                 AND M.RLANE_CD = H.RLANE_CD
                 AND M.SUB_TRD_CD = H.SUB_TRD_CD
                 AND M.DIR_CD     = H.DIR_CD --2013.03.13 추가
)
, QTA AS ( 
            SELECT OFC_CD,
                   TRD_CD,
                   SUB_TRD_CD,
                   ROUND(SUM(LOAD)) AS LOAD_QTY
              FROM (
                   SELECT 
                          OFC_CD,
                          TRD_CD,
                          SUB_TRD_CD,
                          RLANE_CD,
                          COST_YRWK,
                          VSL_CD,
                          SKD_VOY_NO,
                          SKD_DIR_CD,
                          RLANE_CD,MAX_CNT,
                          SUM(LOD_QTY) OVER(PARTITION BY OFC_CD, TRD_CD, SUB_TRD_CD,RLANE_CD,COST_YRWK, VSL_CD,SKD_VOY_NO, SKD_DIR_CD)    AS LOAD,
                          RANK() OVER(PARTITION BY OFC_CD, TRD_CD, SUB_TRD_CD, RLANE_CD ORDER BY OFC_CD, TRD_CD, SUB_TRD_CD,RLANE_CD,MAX_CNT DESC, COST_YRWK ASC, N1ST_LODG_PORT_ETD_DT ASC) AS CNT
                     FROM (     
                           SELECT /*+ LEADING(B T1 C LV) */
                                  T2.SAQ_RGN_OFC_CD      AS OFC_CD,
                                  T1.TRD_CD,
                                  LV.SUB_TRD_CD,
                                  T1.RLANE_CD,
                                  LV.COST_YRWK,
                                  LV.N1ST_LODG_PORT_ETD_DT,
                                  T1.VSL_CD,
                                  T1.SKD_VOY_NO,
                                  T1.SKD_DIR_CD,
                                  T1.LOD_QTY,
                                  COUNT(1) OVER(PARTITION BY C.FNL_BSA_CAPA,C.DIR_CD) AS MAX_CNT
                              FROM SQM_CFM_QTA      T1 ,
                                   SQM_QTA_RLSE_VER MQR,
                                   MAS_MON_VVD_LV   LV,
                                   SQM_CFM_TGT_VVD  C,
                                   SPC_OFC_LVL      T2
                             WHERE 1 = 1
                               AND MQR.BSE_YR           = LV.BSE_YR
                               AND MQR.BSE_QTR_CD       = LV.BSE_QTR_CD
                               AND MQR.SQM_VER_STS_CD   = 'R' 
                               AND MQR.BSE_TP_CD        = 'Q'
                               AND T1.QTA_RLSE_VER_NO   = MQR.QTA_RLSE_VER_NO
                               AND T1.BSE_TP_CD         = MQR.BSE_TP_CD
                               AND T1.BSE_YR            = MQR.BSE_YR
                               AND T1.BSE_QTR_CD        = MQR.BSE_QTR_CD
                               AND T1.QTA_TGT_CD        = 'D'
                               AND T1.OFC_VW_CD         = 'L'  
                       
                              AND SPC_SCR_OFC_CONV_FNC(T1.RGN_OFC_CD,'') = T2.OFC_CD
                              AND LV.COST_YRWK BETWEEN T2.OFC_APLY_FM_YRWK AND T2.OFC_APLY_TO_YRWK
                              AND T2.DELT_FLG         = 'N'
                              AND T1.TRD_CD           = LV.TRD_CD
                              AND T1.RLANE_CD         = LV.RLANE_CD
                              AND T1.DIR_CD           = LV.SKD_DIR_CD
                              AND T1.VSL_CD           = LV.VSL_CD
                              AND T1.SKD_VOY_NO       = LV.SKD_VOY_NO
                              AND T1.SKD_DIR_CD       = LV.SKD_DIR_CD                               
                              AND T1.QTA_RLSE_VER_NO  = C.QTA_RLSE_VER_NO
                              AND T1.BSE_TP_CD        = C.BSE_TP_CD -- 분기 20131205추가
                              AND T1.BSE_YR           = C.BSE_YR
                              AND T1.BSE_QTR_CD       = C.BSE_QTR_CD
                              AND T1.QTA_TGT_CD       = C.QTA_TGT_CD
                              AND T1.TRD_CD           = C.TRD_CD
                              AND T1.RLANE_CD         = C.RLANE_CD
                              AND T1.DIR_CD           = C.DIR_CD
                              AND T1.VSL_CD           = C.VSL_CD
                              AND T1.SKD_VOY_NO       = C.SKD_VOY_NO
                              AND T1.SKD_DIR_CD       = C.SKD_DIR_CD 
                              AND EXISTS (
                                          SELECT 1                                    
                                            FROM SPC_MDL_CUST_REV_LANE   MCP
                                           WHERE MCP.COST_YRWK      = @[season]
                                             AND MCP.VER_SEQ        = @[version]
                                             AND MCP.TRD_CD         = LV.TRD_CD
                                             AND MCP.SUB_TRD_CD     = LV.SUB_TRD_CD
                                             AND MCP.RLANE_CD       = LV.RLANE_CD
                                             AND MCP.SLS_RGN_OFC_CD = T2.SAQ_RGN_OFC_CD               
                                         ) 
                              AND T1.LOD_QTY > 0  
                             )                        
                   )
             WHERE CNT = 1
             GROUP BY OFC_CD,
                   TRD_CD,
                   SUB_TRD_CD
             HAVING ROUND(SUM(LOAD)) <> 0  
)

, RHQ AS ( -- RHQ를 화면에서 받는다 MULTI
          SELECT DISTINCT
		  	     SUBSTR(AA,
 			  	     INSTR(AA,',',1,LEVEL)+1,
   				     INSTR(AA,',',1,LEVEL+1) - INSTR(AA,',',1,LEVEL)
  				     -1
  				    ) AS RHQ_CD
		    FROM (SELECT ','||@[rhq]||',' AA FROM DUAL)
			  	  CONNECT BY LEVEL <= LENGTH(AA) - LENGTH(REPLACE(AA,','))-1  
	     )

, MODEL_STRD AS ( -- 조회 버전 이전에만 존재하는 ACCT/SC/CUST_CTRL 비교하여 DELETE된건 까지 조회(N = 정상, D = DELETE)
                SELECT DTL.TRD_CD,
                       DTL.SUB_TRD_CD,
                       DTL.SLS_RGN_OFC_CD,                       
                       DTL.CUST_CNT_CD,
                       DTL.CUST_SEQ,
                       DTL.CTRT_OFC_CD,
                       DTL.SC_NO,
                       DTL.RFA_NO,
                       CASE WHEN NVL(MC.NEW_KEY_ACCT_FLG,'N') = 'Y' THEN 'CC'
                            WHEN NVL(MC.GLO_ACCT_FLG,'N')     = 'Y' THEN 'CC'
                            WHEN NVL(MC.RGN_ACCT_FLG,'N')     = 'Y' THEN 'RC'
                       ELSE 
                            'LC'
                       END ACCT_CLSS, 
                       MC.CUST_LGL_ENG_NM,
                       DTL.CUST_CTRL_CD,
                       DTL.SUB_TRD_ADJ_QTY            
                  FROM (
                        SELECT MCP.TRD_CD,
                               MCP.SUB_TRD_CD,
                               MCP.SLS_RGN_OFC_CD,                       
                               MCP.CUST_CNT_CD,
                               MCP.CUST_SEQ,
                               MCP.CTRT_OFC_CD,
                               MCP.CUST_CTRL_CD,
                               MCP.SC_NO,
                               MCP.RFA_NO,
                               SUM(MCP.RLANE_ADJ_QTY) AS SUB_TRD_ADJ_QTY
                          FROM SPC_MDL_CUST_REV_LANE   MCP,
                               RHQ                     RHQ_V,
                               SPC_MDL_CUST_CTRL       MCC
                         WHERE MCP.TRD_CD      = @[trade]
                           AND MCP.COST_YRWK   = @[season]
                           AND MCP.VER_SEQ     = @[version]
                           AND MCP.SLS_RHQ_CD  = NVL(RHQ_V.RHQ_CD,MCP.SLS_RHQ_CD)
                           AND MCP.DELT_FLG    = 'N'
                           AND MCP.COST_YRWK   = MCC.COST_YRWK
                           AND MCP.VER_SEQ     = MCC.VER_SEQ
                           AND MCP.TRD_CD      = MCC.TRD_CD
                           AND MCP.CUST_CNT_CD = MCC.CUST_CNT_CD
                           AND MCP.CUST_SEQ    = MCC.CUST_SEQ
                           AND NVL(MCP.SC_NO , ' ') = NVL(MCC.SC_NO , NVL(MCP.SC_NO, ' '))
                           AND NVL(MCP.RFA_NO, ' ') = NVL(MCC.RFA_NO, ' ')
                         GROUP BY MCP.TRD_CD,
                               MCP.SUB_TRD_CD,
                               MCP.SLS_RHQ_CD,
                               MCP.SLS_RGN_OFC_CD,                       
                               MCP.CUST_CNT_CD,
                               MCP.CUST_SEQ,
                               MCP.CTRT_OFC_CD,
                               MCP.CUST_CTRL_CD,
                               MCP.SC_NO,
                               MCP.RFA_NO
                       ) DTL,
                       MDM_CUSTOMER MC
                 WHERE DTL.CUST_CNT_CD = MC.CUST_CNT_CD
                   AND DTL.CUST_SEQ    = MC.CUST_SEQ
)

,BASE_DATA AS (
  
SELECT TRD_CD         ,
       SUB_TRD_CD     ,
       NUM            ,
       OFC_CD         ,
       CUST_CTRL_CD   , 
       ACCT_CLSS      ,      
       CUST_LGL_ENG_NM,
       CTRT_OFC_CD    ,
       SC_NO          ,
       RFA_NO         ,
       SUB_TRD_ADJ_QTY,
       C_LOAD_QTA     ,
       LOAD_QTA       
  FROM (
        SELECT TRD_CD,
               SUB_TRD_CD,
               NUM,
               OFC_CD,
               ACCT_CLSS,
               CUST_LGL_ENG_NM,
               CTRT_OFC_CD,
               SC_NO,
               RFA_NO,
               CUST_CTRL_CD,
               SUB_TRD_ADJ_QTY,
               CASE WHEN CUST_CTRL_CD <> 'C'
                    THEN SUB_TRD_ADJ_QTY
                    ELSE (LOAD_QTA - SUM(SUB_TRD_ADJ_QTY) OVER(PARTITION BY TRD_CD,SUB_TRD_CD,OFC_CD))
               END AS C_LOAD_QTA,
               --DECODE(CUST_CTRL_CD,'A',SUB_TRD_ADJ_QTY,'B',SUB_TRD_ADJ_QTY,'C',(LOAD_QTA - SUM(SUB_TRD_ADJ_QTY) OVER(PARTITION BY TRD_CD,SUB_TRD_CD,OFC_CD))) C_LOAD_QTA,
               LOAD_QTA,
               RANK() OVER(PARTITION BY TRD_CD,SUB_TRD_CD,OFC_CD,CUST_CTRL_CD ORDER BY TRD_CD,SUB_TRD_CD,OFC_CD,CUST_LGL_ENG_NM, CUST_CTRL_CD ) AS CNT
          FROM (  
                SELECT TRD_CD,
                       SUB_TRD_CD,
                       OFC_CD,
                       CUST_CNT_CD,
                       CUST_SEQ,
                       CTRT_OFC_CD,
                       SC_NO,
                       RFA_NO,
                       ACCT_CLSS,
                       CUST_LGL_ENG_NM,
                       CUST_CTRL_CD,
                       MAX(NUM) AS NUM,
                       SUM(SUB_TRD_ADJ_QTY) AS SUB_TRD_ADJ_QTY,
                       SUM(LOAD_QTY) AS LOAD_QTA                       
                  FROM (
                        SELECT B.TRD_CD,
                               B.SUB_TRD_CD,
                               B.OFC_CD,
                               B.CUST_CNT_CD,
                               B.CUST_SEQ,
                               B.CTRT_OFC_CD,
                               B.SC_NO,
                               B.RFA_NO,
                               B.ACCT_CLSS,
                               B.CUST_LGL_ENG_NM AS CUST_LGL_ENG_NM,
                               B.CUST_CTRL_CD,
                               DENSE_RANK() OVER(PARTITION BY B.TRD_CD ORDER BY B.TRD_CD, B.SUB_TRD_CD) AS NUM,
                               NVL(B.SUB_TRD_ADJ_QTY,0) AS SUB_TRD_ADJ_QTY,
                               NVL(A.LOAD_QTY,0) AS LOAD_QTY
                          FROM (
                                SELECT TRD_CD,
                                       SUB_TRD_CD,
                                       SLS_RGN_OFC_CD AS OFC_CD,
                                       CUST_CNT_CD,
                                       CUST_SEQ,
                                       CTRT_OFC_CD,
                                       SC_NO,
                                       RFA_NO,
                                       ACCT_CLSS,
                                       CUST_LGL_ENG_NM,
                                       CUST_CTRL_CD,
                                       SUB_TRD_ADJ_QTY
                                  FROM (
                                        SELECT B.TRD_CD,
                                               B.SUB_TRD_CD,
                                               B.SLS_RGN_OFC_CD,
                                               B.CUST_CNT_CD,
                                               B.CUST_SEQ,
                                               B.CTRT_OFC_CD,
                                               B.SC_NO,
                                               B.RFA_NO,
                                               B.ACCT_CLSS,
                                               B.CUST_LGL_ENG_NM,
                                               B.CUST_CTRL_CD,
                                               NVL(B.SUB_TRD_ADJ_QTY,0) AS SUB_TRD_ADJ_QTY
                                          FROM MODEL_STRD B
                                        UNION ALL
                                        SELECT DISTINCT
                                               C.TRD_CD,
                                               C.SUB_TRD_CD,
                                               C.SLS_RGN_OFC_CD,                       
                                               '' AS CUST_CNT_CD,
                                               NULL AS CUST_SEQ,
                                               '' AS CTRT_OFC_CD,
                                               '' AS SC_NO,
                                               '' AS RFA_NO,
                                               '' AS ACCT_CLSS, 
                                               '' AS CUST_LGL_ENG_NM,
                                               'C' AS CUST_CTRL_CD,
                                               0 AS SUB_TRD_ADJ_QTY  
                                          FROM MODEL_STRD C
                                       ) 
                               )    B, 
                               QTA  A
                         WHERE B.TRD_CD         = A.TRD_CD(+)
                           AND B.SUB_TRD_CD     = A.SUB_TRD_CD(+)
                           AND B.OFC_CD         = A.OFC_CD(+)
                       )
                 GROUP BY TRD_CD,
                       SUB_TRD_CD,
                       OFC_CD,
                       CUST_CNT_CD,
                       CUST_SEQ,
                       CTRT_OFC_CD,
                       SC_NO,
                       RFA_NO,
                       ACCT_CLSS,
                       CUST_LGL_ENG_NM,
                       CUST_CTRL_CD
              ) DTL
       )
 WHERE NOT (CNT > 1 AND CUST_LGL_ENG_NM IS NULL)
 
)


SELECT TRD_CD,
       SLS_RHQ_CD,
       OFC_CD ,
       CUST_CTRL_CD,
       ACCT_CLSS,
       CUST_LGL_ENG_NM,
       CTRT_OFC_CD,
       SC_NO,
       NVL(RFA_NO, SC_NO) AS RFA_NO,
       LVL
#foreach( $key in ${dur} )
       ,SUB_TRD_CD_${key}
       ,SUB_TRD_ADJ_QTY_${key}
       ,DECODE(SUB_TRD_ADJ_RATIO_${key},0,SUB_TRD_ADJ_RATIO_${key},DECODE(SUM_SUB_TRD_ADJ_RATIO_${key},100,SUB_TRD_ADJ_RATIO_${key},DECODE(SUB_TRD_ADJ_RATIO_NUM${key},1,SUB_TRD_ADJ_RATIO_${key} + (100 - SUM_SUB_TRD_ADJ_RATIO_${key}),SUB_TRD_ADJ_RATIO_${key}))) AS SUB_TRD_ADJ_RATIO_${key}
       ,C_LOAD_QTA_${key}
       ,DECODE(C_LOAD_QTA_RATIO_${key},0,C_LOAD_QTA_RATIO_${key},DECODE(SUM_C_LOAD_QTA_RATIO_${key},100,C_LOAD_QTA_RATIO_${key},DECODE(C_LOAD_QTA_RATIO_NUM${key},1,C_LOAD_QTA_RATIO_${key} + (100 - SUM_C_LOAD_QTA_RATIO_${key}),C_LOAD_QTA_RATIO_${key}))) AS C_LOAD_QTA_RATIO_${key}
#end
  FROM (  
        SELECT TRD_CD,
               SLS_RHQ_CD,
               OFC_CD ,
               CUST_CTRL_CD,
               ACCT_CLSS,
               CUST_LGL_ENG_NM,
               CTRT_OFC_CD,
               SC_NO,
               RFA_NO,
               LVL
#foreach( $key in ${dur} )
               ,SUB_TRD_CD_${key}
               ,SUB_TRD_ADJ_QTY_${key}
               ,SUB_TRD_ADJ_RATIO_${key}
               ,C_LOAD_QTA_${key}
               ,C_LOAD_QTA_RATIO_${key}
               -----       
               ,SUM(SUB_TRD_ADJ_RATIO_${key}) OVER(PARTITION BY TRD_CD,SLS_RHQ_CD,OFC_CD,LVL,SUB_TRD_CD_${key}) AS SUM_SUB_TRD_ADJ_RATIO_${key}
               ,SUM(C_LOAD_QTA_RATIO_${key}) OVER(PARTITION BY TRD_CD,SLS_RHQ_CD,OFC_CD,LVL,SUB_TRD_CD_${key})  AS SUM_C_LOAD_QTA_RATIO_${key}
               ----
               ,ROW_NUMBER() OVER(PARTITION BY TRD_CD,SUB_TRD_CD_${key},SLS_RHQ_CD,OFC_CD,LVL ORDER BY TRD_CD,SUB_TRD_CD_${key},SLS_RHQ_CD,OFC_CD,LVL,SUB_TRD_ADJ_RATIO_${key} DESC) AS SUB_TRD_ADJ_RATIO_NUM${key}
               ,ROW_NUMBER() OVER(PARTITION BY TRD_CD,SUB_TRD_CD_${key},SLS_RHQ_CD,OFC_CD,LVL ORDER BY TRD_CD,SUB_TRD_CD_${key},SLS_RHQ_CD,OFC_CD,LVL,C_LOAD_QTA_RATIO_${key} DESC)  AS C_LOAD_QTA_RATIO_NUM${key} 
#end
          FROM (
        
                SELECT TRD_CD,
                       SLS_RHQ_CD,
                       OFC_CD             AS OFC_CD,
                       CUST_CTRL_CD       AS CUST_CTRL_CD,
                       ACCT_CLSS,
                       CUST_LGL_ENG_NM,
                       CTRT_OFC_CD,
                       SC_NO,
                       RFA_NO,
                       LVL
#foreach( $key in ${dur} )
                       ,MAX(SUB_TRD_CD_${key})        AS SUB_TRD_CD_${key}
                       ,NVL(MAX(SUB_TRD_ADJ_QTY_${key}),0)   AS SUB_TRD_ADJ_QTY_${key}
                       ,NVL(ROUND(SUM(DECODE(LVL,7,0,8,0,9,0,SUB_TRD_ADJ_RATIO_${key}))),0) AS SUB_TRD_ADJ_RATIO_${key}
                       ,NVL(MAX(C_LOAD_QTA_${key}),0)        AS C_LOAD_QTA_${key}
                       ,NVL(ROUND(SUM(DECODE(LVL,7,0,8,0,9,0,C_LOAD_QTA_RATIO_${key}))),0)  AS C_LOAD_QTA_RATIO_${key}
#end
                  FROM (   
                        SELECT TRD_CD,
                               SLS_RHQ_CD,
                               OFC_CD             AS OFC_CD,
                               CUST_CTRL_CD       AS CUST_CTRL_CD,
                               ACCT_CLSS,
                               CUST_LGL_ENG_NM,
                               CTRT_OFC_CD,
                               SC_NO,
                               RFA_NO,
                               LVL
#foreach( $key in ${dur} )
                               ,SUB_TRD_CD_${key}
                               ,SUB_TRD_ADJ_QTY_${key}
                               ,RATIO_TO_REPORT(SUB_TRD_ADJ_QTY_${key}) OVER(PARTITION BY TRD_CD,SUB_TRD_CD_${key},SLS_RHQ_CD,OFC_CD,LVL) * 100  AS SUB_TRD_ADJ_RATIO_${key}
                               ,C_LOAD_QTA_${key}
                               ,RATIO_TO_REPORT(C_LOAD_QTA_${key}) OVER(PARTITION BY TRD_CD,SUB_TRD_CD_${key},SLS_RHQ_CD,OFC_CD,LVL) * 100 AS C_LOAD_QTA_RATIO_${key}
#end
                          FROM (
                                  SELECT DISTINCT
                                         Z3.TRD_CD,
                                         DECODE(Z3.SLS_RHQ_CD,'',DECODE(Z3.OFC_CD,'',DECODE(Z3.CUST_CTRL_CD,'','00000','00001'),'00002'),Z3.SLS_RHQ_CD) AS SLS_RHQ_CD,
                                         DECODE(Z3.OFC_CD,'',DECODE(Z3.CUST_CTRL_CD,'','00000','00001'),Z3.OFC_CD) AS OFC_CD,
                                         NVL(Z3.CUST_CTRL_CD,'0')  AS CUST_CTRL_CD,
                                         Z3.ACCT_CLSS,
                                         Z3.CUST_LGL_ENG_NM        AS CUST_LGL_ENG_NM,
                                         Z3.CTRT_OFC_CD            AS CTRT_OFC_CD,
                                         Z3.SC_NO                  AS SC_NO,
                                         Z3.RFA_NO                 AS RFA_NO,
                                         
                                         CASE WHEN Z3.SLS_RHQ_CD IS NULL AND Z3.OFC_CD IS NULL AND Z3.CUST_CTRL_CD IS NULL THEN
                                                     1
                                              WHEN Z3.SLS_RHQ_CD IS NULL AND Z3.OFC_CD IS NULL AND Z3.CUST_CTRL_CD IS NOT NULL THEN
                                                     2
                                              WHEN Z3.SLS_RHQ_CD IS NOT NULL AND Z3.OFC_CD IS NULL AND Z3.CUST_CTRL_CD IS NULL THEN
                                                     3
                                              WHEN Z3.SLS_RHQ_CD IS NOT NULL AND Z3.OFC_CD IS NULL AND Z3.CUST_CTRL_CD IS NOT NULL THEN
                                                     4
                                              WHEN Z3.SLS_RHQ_CD IS NOT NULL AND Z3.OFC_CD IS NOT NULL AND Z3.CUST_CTRL_CD IS NULL THEN
                                                     5
                                              WHEN Z3.SLS_RHQ_CD IS NOT NULL AND Z3.OFC_CD IS NOT NULL AND Z3.CUST_CTRL_CD IS NOT NULL AND ACCT_CLSS IS NULL AND CUST_LGL_ENG_NM IS NULL THEN
                                                     6
                                              WHEN Z3.SLS_RHQ_CD IS NOT NULL AND Z3.OFC_CD IS NOT NULL AND Z3.CUST_CTRL_CD IS NOT NULL AND ACCT_CLSS IS NOT NULL AND CUST_LGL_ENG_NM IS NULL THEN
                                                     7
                                              WHEN Z3.SLS_RHQ_CD IS NOT NULL AND Z3.OFC_CD IS NOT NULL AND Z3.CUST_CTRL_CD IS NOT NULL AND ACCT_CLSS IS NOT NULL AND CUST_LGL_ENG_NM IS NOT NULL THEN
                                                     8
                                              ELSE
                                                     9
                                         END LVL
#foreach( $key in ${dur} )
                                         ,Z3.SUB_TRD_CD_${key}
                                         ,Z3.SUB_TRD_ADJ_QTY_${key}
                                         ,Z3.C_LOAD_QTA_${key}
#end
                                    FROM (
                                            SELECT 
                                                   Z2.TRD_CD,
                                                   O.N2ND_PRNT_OFC_CD      AS SLS_RHQ_CD,
                                                   NVL(Z2.OFC_CD,'TOTAL')  AS OFC_CD,
                                                   Z2.CUST_CTRL_CD,
                                                   Z2.ACCT_CLSS,      
                                                   Z2.CUST_LGL_ENG_NM,
                                                   Z2.CTRT_OFC_CD,
                                                   Z2.SC_NO,
                                                   Z2.RFA_NO
#foreach( $key in ${dur} )
                                                   ,MAX(DECODE(Z2.NUM,${key},Z2.SUB_TRD_CD))      AS SUB_TRD_CD_${key}                                   
                                                   ,SUM(DECODE(Z2.NUM,${key},Z2.SUB_TRD_ADJ_QTY)) AS SUB_TRD_ADJ_QTY_${key}
                                                   ,SUM(DECODE(Z2.NUM,${key},Z2.C_LOAD_QTA))      AS C_LOAD_QTA_${key}
#end
                                              FROM BASE_DATA Z2,
                                                   SPC_OFC_LVL O
                                             WHERE O.OFC_CD = NVL(SPC_SCR_OFC_CONV_FNC(Z2.OFC_CD),O.OFC_CD) 
                                               AND O.DELT_FLG = 'N'
                                               AND (SELECT COST_YR||COST_WK FROM MAS_WK_PRD WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SLS_FM_DT AND SLS_TO_DT) BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK
                                             GROUP BY GROUPING SETS(
                                                                    (Z2.TRD_CD),
                                                                    --(Z2.TRD_CD, Z2.CUST_CTRL_CD),
                                                                    (Z2.TRD_CD, O.N2ND_PRNT_OFC_CD),
                                                                    --(Z2.TRD_CD, O.N2ND_PRNT_OFC_CD, NVL(Z2.OFC_CD,'TOTAL')),
                                                                    (Z2.TRD_CD, O.N2ND_PRNT_OFC_CD, Z2.CUST_CTRL_CD),
                                                                    (Z2.TRD_CD, O.N2ND_PRNT_OFC_CD, NVL(Z2.OFC_CD,'TOTAL'), Z2.CUST_CTRL_CD),
                                                                    (Z2.TRD_CD, O.N2ND_PRNT_OFC_CD, NVL(Z2.OFC_CD,'TOTAL'), Z2.CUST_CTRL_CD, Z2.ACCT_CLSS),
                                                                    (Z2.TRD_CD, O.N2ND_PRNT_OFC_CD, NVL(Z2.OFC_CD,'TOTAL'), Z2.CUST_CTRL_CD, Z2.ACCT_CLSS, Z2.CUST_LGL_ENG_NM, Z2.CTRT_OFC_CD, Z2.RFA_NO, Z2.SC_NO)
                                                                   )
											UNION ALL
                                            SELECT 
                                                   Z2.TRD_CD,
                                                   O.N2ND_PRNT_OFC_CD      AS SLS_RHQ_CD,
                                                   NVL(Z2.OFC_CD,'TOTAL')  AS OFC_CD,
                                                   Z2.CUST_CTRL_CD,
                                                   NULL ACCT_CLSS,      
                                                   NULL CUST_LGL_ENG_NM,
                                                   NULL CTRT_OFC_CD,
                                                   NULL SC_NO,
                                                   NULL RFA_NO
#foreach( $key in ${dur} )
                                                   ,MAX(DECODE(Z2.NUM,${key},Z2.SUB_TRD_CD))      AS SUB_TRD_CD_${key}                                   
                                                   ,SUM(DECODE(Z2.NUM,${key},Z2.SUB_TRD_ADJ_QTY)) AS SUB_TRD_ADJ_QTY_${key}
                                                   ,SUM(DECODE(Z2.NUM,${key},Z2.C_LOAD_QTA))      AS C_LOAD_QTA_${key}
#end
                                              FROM BASE_DATA Z2,
                                                   SPC_OFC_LVL O
                                             WHERE O.OFC_CD = NVL(SPC_SCR_OFC_CONV_FNC(Z2.OFC_CD),O.OFC_CD) 
                                               AND O.DELT_FLG = 'N'
                                               AND (SELECT COST_YR||COST_WK FROM MAS_WK_PRD WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN SLS_FM_DT AND SLS_TO_DT) BETWEEN O.OFC_APLY_FM_YRWK AND O.OFC_APLY_TO_YRWK
                                             GROUP BY GROUPING SETS(
                                                                    --(Z2.TRD_CD),
                                                                    (Z2.TRD_CD, Z2.CUST_CTRL_CD),
                                                                    --(Z2.TRD_CD, O.N2ND_PRNT_OFC_CD),
                                                                    (Z2.TRD_CD, O.N2ND_PRNT_OFC_CD, NVL(Z2.OFC_CD,'TOTAL'))--,
                                                                    --(Z2.TRD_CD, O.N2ND_PRNT_OFC_CD, Z2.CUST_CTRL_CD),
                                                                    --(Z2.TRD_CD, O.N2ND_PRNT_OFC_CD, NVL(Z2.OFC_CD,'TOTAL'), Z2.CUST_CTRL_CD),
                                                                    --(Z2.TRD_CD, O.N2ND_PRNT_OFC_CD, NVL(Z2.OFC_CD,'TOTAL'), Z2.CUST_CTRL_CD, Z2.ACCT_CLSS),
                                                                    --(Z2.TRD_CD, O.N2ND_PRNT_OFC_CD, NVL(Z2.OFC_CD,'TOTAL'), Z2.CUST_CTRL_CD, Z2.ACCT_CLSS, Z2.CUST_LGL_ENG_NM, Z2.CTRT_OFC_CD, Z2.RFA_NO, Z2.SC_NO)
                                                                   )
	
                                         ) Z3                                         
                               ) 
                               
                       )
                 GROUP BY TRD_CD,
                       SLS_RHQ_CD,
                       OFC_CD,
                       CUST_CTRL_CD,
                       ACCT_CLSS,
                       CUST_LGL_ENG_NM,
                       CTRT_OFC_CD,
                       SC_NO,
                       RFA_NO,
                       LVL  
                ) 
       )                         
 ORDER BY TRD_CD,
       SLS_RHQ_CD,
       OFC_CD,
       CUST_CTRL_CD,
       DECODE(ACCT_CLSS, NULL, '0', 'CC', '1', 'RC', '2', '3'),
       NVL(CUST_LGL_ENG_NM,0)			]]></sql>
			<params>
				<param name="trade" type="12" value="" out="N"/>
				<param name="season" type="12" value="" out="N"/>
				<param name="version" type="12" value="" out="N"/>
				<param name="rhq" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
