<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="CMSummaryDBDAOPriPrsCtrtSmryCostTmpVOUSQL">
			<desc><![CDATA[Simulatoin을 위해 temp데이터에 실제 데이터 update
* 2011.06.29 김민아 [CHM-201111837] Split 20-R4J Rule Upgrade 관련 소스품질 향상을 위한 조치 건 : DUAL Table을 부적절하게 사용한 DBDAO의 SQL을 .Query로 이동]]></desc>
			<sql><![CDATA[
MERGE INTO PRI_PRS_CTRT_SMRY_COST_TMP TBL
USING (
	SELECT PRS_YRMON, PRS_WK, PRC_CTRT_TP_CD, PRC_CTRT_NO, SVC_SCP_CD, VSL_SLAN_DIR_CD, TRD_CD, SUB_TRD_CD, RLANE_CD, PRC_CGO_TP_CD, ORG_LOC_TP_CD, ORG_LOC_DEF_CD, DEST_LOC_TP_CD, DEST_LOC_DEF_CD
		
#if (${virtual_query_tp_cd}== 'LOAD') 
		, ( PRS_CRNT_LOD_QTY +  DECODE(DT_CALC_TP_CD,'+', DT_AMOUNT , (PRS_CRNT_LOD_QTY  * DT_AMOUNT /100 ) ) ) AS SIMUL_DT
#elseif (${virtual_query_tp_cd} == 'REV') 
		, ( TEU_FRT_REV +  DECODE(DT_CALC_TP_CD,'+', DT_AMOUNT , (TEU_FRT_REV  * DT_AMOUNT /100 ) ) ) AS SIMUL_DT
#elseif (${virtual_query_tp_cd} == 'COST') 
			, ( PRS_RESPB_CM_UC_AMT +  DECODE(DT_CALC_TP_CD,'+', DT_AMOUNT , (PRS_RESPB_CM_UC_AMT  * DT_AMOUNT /100 ) ) ) AS SIMUL1_DT
			, ( PRS_PFIT_CM_UC_AMT  +  DECODE(DT_CALC_TP_CD,'+', DT_AMOUNT , (PRS_PFIT_CM_UC_AMT   * DT_AMOUNT /100 ) ) ) AS SIMUL2_DT
			, ( PRS_RESPB_OPFIT_UC_AMT  +  DECODE(DT_CALC_TP_CD,'+', DT_AMOUNT , (PRS_RESPB_OPFIT_UC_AMT   * DT_AMOUNT /100 ) ) ) AS SIMUL3_DT
#end
		
	FROM (
		SELECT   
			SR_CST_DTL.PRS_YRMON, SR_CST_DTL.PRS_WK, SR_CST_DTL.PRC_CTRT_TP_CD, SR_CST_DTL.PRC_CTRT_NO
			, SR_CST_DTL.SVC_SCP_CD, SR_CST_DTL.VSL_SLAN_DIR_CD, SR_CST_DTL.TRD_CD, SR_CST_DTL.SUB_TRD_CD
			, SR_CST_DTL.RLANE_CD, SR_CST_DTL.PRC_CGO_TP_CD, SR_CST_DTL.ORG_LOC_TP_CD, SR_CST_DTL.ORG_LOC_DEF_CD,SR_CST_DTL. DEST_LOC_TP_CD, SR_CST_DTL.DEST_LOC_DEF_CD
			, SR_CST_DTL.PRS_CRNT_LOD_QTY  
			, SR_CST_DTL.PRS_RESPB_CM_UC_AMT  
			, SR_CST_DTL.PRS_PFIT_CM_UC_AMT 
			, SR_CST_DTL.PRS_RESPB_OPFIT_UC_AMT 
			, SR_CST_DTL.TEU_FRT_REV  
			, SR_CST_DTL.PRS_RESPB_CMPB_AMT   
			, SR_CST_DTL.PRS_PFIT_CMPB_AMT    
			, SR_CST_DTL.PRS_RESPB_OPB_AMT     
			, DT.SUB_TRD_CD        AS DT_SUB_TRD_CD      
			, DT.RLANE_CD	   AS DT_RLANE_CD        
			, DT.ORG_LOC_TP_CD	   AS DT_ORG_LOC_TP_CD   
			, DT.ORG_LOC_DEF_CD	   AS DT_ORG_LOC_DEF_CD  
			, DT.DEST_LOC_TP_CD    AS DT_DEST_LOC_TP_CD  
			, DT.DEST_LOC_DEF_CD   AS DT_DEST_LOC_DEF_CD 
			, DT.APR_OFC_CD	   AS DT_APR_OFC_CD      
			, DT.CALC_TP_CD	   AS DT_CALC_TP_CD
			, DT.AMOUNT	           AS DT_AMOUNT
			, DT.EFF_YRWK          AS DT_EFF_YRWK
			, DT.EXP_YRWK          AS DT_EXP_YRWK
 			, ROW_NUMBER() OVER( PARTITION BY 
							SR_CST_DTL.PRS_YRMON, SR_CST_DTL.PRS_WK, SR_CST_DTL.PRC_CTRT_TP_CD, SR_CST_DTL.PRC_CTRT_NO
							, SR_CST_DTL.SVC_SCP_CD, SR_CST_DTL.VSL_SLAN_DIR_CD, SR_CST_DTL.TRD_CD, SR_CST_DTL.SUB_TRD_CD
							, SR_CST_DTL.RLANE_CD, SR_CST_DTL.PRC_CGO_TP_CD, SR_CST_DTL.ORG_LOC_TP_CD, SR_CST_DTL.ORG_LOC_DEF_CD,SR_CST_DTL. DEST_LOC_TP_CD, SR_CST_DTL.DEST_LOC_DEF_CD
					ORDER BY (DT.SCORE) DESC ) RN
		FROM    PRI_PRS_CTRT_SMRY_COST_TMP SR_CST_DTL
			, (
                                SELECT  'NULL' AS SUB_TRD_CD
                                        , 'NULL' AS RLANE_CD
                                        , 'NULL' AS ORG_LOC_TP_CD
                                        , 'NULL' AS ORG_LOC_DEF_CD
                                        , 'NULL' AS DEST_LOC_TP_CD
                                        , 'NULL' AS DEST_LOC_DEF_CD 
                                        , 'NULL' AS APR_OFC_CD
                                        , 'IAON' AS CUST_TP_CD
                                        , '' AS SCG_CD
                                        , 0 AS SCORE
                                        , NULL AS EFF_YRWK
                                        , NULL AS EXP_YRWK
                                        , 'NULL' AS CALC_TP_CD
                                        , 0 AS AMOUNT
                                FROM DUAL

                                #foreach( ${obj} in ${list_obj} )
                                UNION ALL
                                SELECT
                                        DECODE('$obj.getSubTrdCd()', NULL, 'NULL', '$obj.getSubTrdCd()') AS SUB_TRD_CD 
                                       ,DECODE('$obj.getRlaneCd()', NULL, 'NULL', '$obj.getRlaneCd()') AS RLANE_CD 
                                       ,DECODE('$obj.getOriLocTp()', NULL, 'NULL', '$obj.getOriLocTp()') AS ORG_LOC_TP_CD 
                                       ,DECODE('$obj.getOriRoutCd()', NULL, 'NULL' ,'$obj.getOriRoutCd()') AS ORG_LOC_DEF_CD 
                                       ,DECODE('$obj.getDestLocTp()', NULL, 'NULL', '$obj.getDestLocTp()') AS DEST_LOC_TP_CD 
                                       ,DECODE('$obj.getDestRoutCd()', NULL, 'NULL', '$obj.getDestRoutCd()') AS DEST_LOC_DEF_CD 
                                       ,DECODE('$obj.getAprOfcCd() ', NULL, 'NULL', '$obj.getAprOfcCd()') AS APR_OFC_CD 
                                       ,'$obj.getCustTpCd()' AS CUST_TP_CD 
                                       ,'$obj.getChgCd()' AS SCG_CD 
                                       ,$obj.getScore() AS SCORE 
                                       ,REPLACE('$obj.getEffYrwk()', '-', '') AS EFF_YRWK 
                                       ,REPLACE('$obj.getExpYrwk()', '-', '') AS EXP_YRWK 
                                       ,'$obj.getCalcTpCd()' AS CALC_TP_CD 
                                       ,$obj.getAmount() AS AMOUNT 
                                  FROM  DUAL
                                #end

                        ) DT
		WHERE  -- SR_CST_DTL.PRC_CTRT_TP_CD = 'S' -- S/C
			-- LOAD
			 SR_CST_DTL.SUB_TRD_CD = DECODE(DT.SUB_TRD_CD,'NULL', SR_CST_DTL.SUB_TRD_CD, DT.SUB_TRD_CD)
			AND DECODE(DT.RLANE_CD,'NULL',1, INSTR(DT.RLANE_CD,  SR_CST_DTL.RLANE_CD  )) > 0
			--AND SR_CST_DTL.RLANE_CD = DECODE(DT.RLANE_CD,'NULL', SR_CST_DTL.RLANE_CD, DT.RLANE_CD)
			AND SR_CST_DTL.ORG_LOC_TP_CD = DECODE(DT.ORG_LOC_TP_CD,'NULL', SR_CST_DTL.ORG_LOC_TP_CD, DT.ORG_LOC_TP_CD)
			AND SR_CST_DTL.ORG_LOC_DEF_CD = DECODE(DT.ORG_LOC_DEF_CD,'NULL', SR_CST_DTL.ORG_LOC_DEF_CD, DT.ORG_LOC_DEF_CD)
			AND SR_CST_DTL.DEST_LOC_TP_CD = DECODE(DT.DEST_LOC_TP_CD,'NULL', SR_CST_DTL.DEST_LOC_TP_CD, DT.DEST_LOC_TP_CD)
			AND SR_CST_DTL.DEST_LOC_DEF_CD = DECODE(DT.DEST_LOC_DEF_CD,'NULL', SR_CST_DTL.DEST_LOC_DEF_CD, DT.DEST_LOC_DEF_CD)
			AND INSTR(DT.CUST_TP_CD,  SR_CST_DTL.PRS_CUST_TP_CD ) > 0
			AND SR_CST_DTL.PROP_APRO_OFC_CD = DECODE(DT.APR_OFC_CD,'NULL', SR_CST_DTL.PROP_APRO_OFC_CD, DT.APR_OFC_CD)
			AND (SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) >= DT.EFF_YRWK  AND (SUBSTR(SR_CST_DTL.PRS_YRMON,1,4)  || SR_CST_DTL.PRS_WK) <= DT.EXP_YRWK
	) 
	WHERE  RN = 1
) RSLT
ON (
	TBL.PRS_YRMON         =  RSLT.PRS_YRMON       
	AND TBL.PRS_WK            =	 RSLT.PRS_WK          
	AND TBL.PRC_CTRT_TP_CD    =	 RSLT.PRC_CTRT_TP_CD  
	AND TBL.PRC_CTRT_NO       =	 RSLT.PRC_CTRT_NO     
	AND TBL.SVC_SCP_CD        =	 RSLT.SVC_SCP_CD      
	AND TBL.VSL_SLAN_DIR_CD   =	 RSLT.VSL_SLAN_DIR_CD 
	AND TBL.TRD_CD	      =	 RSLT.TRD_CD	    
	AND TBL.SUB_TRD_CD        =	 RSLT.SUB_TRD_CD      
	AND TBL.RLANE_CD          =	 RSLT.RLANE_CD        
	AND TBL.PRC_CGO_TP_CD     =	 RSLT.PRC_CGO_TP_CD   
	AND TBL.ORG_LOC_TP_CD     =  RSLT.ORG_LOC_TP_CD   
	AND TBL.ORG_LOC_DEF_CD    =	 RSLT.ORG_LOC_DEF_CD  
	AND TBL.DEST_LOC_TP_CD    =	 RSLT.DEST_LOC_TP_CD  
	AND TBL.DEST_LOC_DEF_CD   =	 RSLT.DEST_LOC_DEF_CD 
)
WHEN MATCHED THEN
UPDATE SET 
#if (${virtual_query_tp_cd}== 'LOAD') 
		TBL.PRS_CRNT_LOD_QTY = RSLT.SIMUL_DT
#elseif (${virtual_query_tp_cd} == 'REV') 
		TBL.TEU_FRT_REV = RSLT.SIMUL_DT
#elseif (${virtual_query_tp_cd} == 'COST') 
		TBL.PRS_RESPB_CM_UC_AMT = RSLT.SIMUL1_DT
		,TBL.PRS_PFIT_CM_UC_AMT = RSLT.SIMUL2_DT
		,TBL.PRS_RESPB_OPFIT_UC_AMT = RSLT.SIMUL3_DT
#end
, TBL.UPD_USR_ID = 'Y'			]]></sql>
			<params>
			</params>
		</query>
	</querys>
</sqls>
