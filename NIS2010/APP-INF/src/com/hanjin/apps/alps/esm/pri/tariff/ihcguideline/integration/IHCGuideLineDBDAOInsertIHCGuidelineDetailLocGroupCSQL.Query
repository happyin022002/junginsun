<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="IHCGuideLineDBDAOInsertIHCGuidelineDetailLocGroupCSQL">
			<desc><![CDATA[2013.07.23 전윤주 [CHM-201325898] 화면(ESM_PRI_7001) 화면을 통한 PRI_TRF_IHC_RT 입력 후 
                                                     입력한 Cost의 범위에 따라 비어있는 Location Group No를 할당해준다.
2013.09.23 전윤주 [CHM-201326761] local curr. 기준으로 하는 scope에 EAN, EAS 추가]]></desc>
			<sql><![CDATA[
MERGE INTO PRI_TRF_IHC_RT A1
      USING (
              SELECT SVC_SCP_CD 
                    ,ORG_DEST_TP_CD
                    ,IHC_TRF_NO  
                    ,AMDT_SEQ  
                    ,IHC_CGO_TP_CD
                    ,RT_SEQ
                    ,PNT_LOC_CD
                    ,BSE_PORT_LOC_CD
                    ,HUB_LOC_CD
                    ,IHC_COST_LOC_GRP_NO
                    ,GLINE_40FT_FRT_RT_AMT
                    ,SEL_LOC_GROUP
              
              FROM (
                        SELECT SVC_SCP_CD
                              ,ORG_DEST_TP_CD
                              ,IHC_TRF_NO
                              ,AMDT_SEQ
                              ,IHC_CGO_TP_CD
                              ,RT_SEQ
                              ,PNT_LOC_CD
                              ,BSE_PORT_LOC_CD
                              ,HUB_LOC_CD
                              ,IHC_COST_LOC_GRP_NO
                              ,GLINE_40FT_FRT_RT_AMT
                              ,CASE
                            	 WHEN HIGH_DIFF< LOW_DIFF THEN COALESCE(HIGH_LOC_GROUP, LOW_LOC_GROUP) --입력받은 AMT가 큰 값과 가까운 값이면 그 AMT의 Loc.Group 할당
                                 WHEN HIGH_DIFF > LOW_DIFF THEN COALESCE(LOW_LOC_GROUP, HIGH_LOC_GROUP) --입력받은 AMT가 작은 값과 가까운 값이면 그 AMT의 Loc.Group 할당
                                 ELSE COALESCE(LOW_LOC_GROUP, HIGH_LOC_GROUP) -- 같으면 작은 쪽의 Loc.Group 할당
                               END SEL_LOC_GROUP
                         FROM (
                               SELECT SVC_SCP_CD
                                     ,ORG_DEST_TP_CD
                                     ,IHC_TRF_NO
                                     ,AMDT_SEQ
                                     ,IHC_CGO_TP_CD
                                     ,RT_SEQ
                                     ,PNT_LOC_CD
                                     ,BSE_PORT_LOC_CD
                                     ,HUB_LOC_CD
                                     ,IHC_COST_LOC_GRP_NO
#if(${svc_scp_cd} == 'TAE' || ${svc_scp_cd} == 'TAW' || ${svc_scp_cd} == 'ASE' || ${svc_scp_cd} == 'ASW' || ${svc_scp_cd} == 'EAS' || ${svc_scp_cd} == 'EAN')
                                     --특정 6개 scope의 경우에는 local Curr를 기준으로 계산함
                                    ,GLINE_LOCL_CURR_40FT_AMT AS GLINE_40FT_FRT_RT_AMT
                                    ,NVL(LEAD(GLINE_LOCL_CURR_40FT_AMT) OVER(ORDER BY GLINE_LOCL_CURR_40FT_AMT), 99999999) AS HIGH_GLINE_40FT_FRT_RT_AMT -- 입력받은 AMT 다음으로 큰 금액
                                    ,NVL(LAG(GLINE_LOCL_CURR_40FT_AMT)  OVER(ORDER BY GLINE_LOCL_CURR_40FT_AMT), 0) AS LOW_GLINE_40FT_FRT_RT_AMT -- 입력받은 AMT 바로 이전 작은 금액
                                    ,NVL(LEAD(GLINE_LOCL_CURR_40FT_AMT) OVER(ORDER BY GLINE_LOCL_CURR_40FT_AMT), 99999999) - GLINE_LOCL_CURR_40FT_AMT AS HIGH_DIFF -- 큰 금액과의 차이
                                    ,GLINE_LOCL_CURR_40FT_AMT - NVL(LAG(GLINE_LOCL_CURR_40FT_AMT) OVER(ORDER BY GLINE_LOCL_CURR_40FT_AMT), 0) AS LOW_DIFF -- 작은 금액과의 차이
                                    ,LEAD(IHC_COST_LOC_GRP_NO) OVER(ORDER BY GLINE_LOCL_CURR_40FT_AMT) AS HIGH_LOC_GROUP --큰 쪽의 Loc.group
                                    ,LAG(IHC_COST_LOC_GRP_NO) OVER(ORDER BY GLINE_LOCL_CURR_40FT_AMT) AS LOW_LOC_GROUP --작은 쪽의 Loc.group
#else                
                                    ,GLINE_40FT_FRT_RT_AMT   
                                    ,NVL(LEAD(GLINE_40FT_FRT_RT_AMT) OVER(ORDER BY GLINE_40FT_FRT_RT_AMT), 99999999) AS HIGH_GLINE_40FT_FRT_RT_AMT -- 입력받은 AMT 다음으로 큰 금액
                                    ,NVL(LAG(GLINE_40FT_FRT_RT_AMT)  OVER(ORDER BY GLINE_40FT_FRT_RT_AMT), 0) AS LOW_GLINE_40FT_FRT_RT_AMT -- 입력받은 AMT 바로 이전 작은 금액
                                    ,NVL(LEAD(GLINE_40FT_FRT_RT_AMT) OVER(ORDER BY GLINE_40FT_FRT_RT_AMT), 99999999) - GLINE_40FT_FRT_RT_AMT AS HIGH_DIFF -- 큰 금액과의 차이
                                    ,GLINE_40FT_FRT_RT_AMT - NVL(LAG(GLINE_40FT_FRT_RT_AMT) OVER(ORDER BY GLINE_40FT_FRT_RT_AMT), 0) AS LOW_DIFF -- 작은 금액과의 차이
                                    ,LEAD(IHC_COST_LOC_GRP_NO) OVER(ORDER BY GLINE_40FT_FRT_RT_AMT) AS HIGH_LOC_GROUP --큰 쪽의 Loc.group
                                    ,LAG(IHC_COST_LOC_GRP_NO) OVER(ORDER BY GLINE_40FT_FRT_RT_AMT) AS LOW_LOC_GROUP --작은 쪽의 Loc.group
#end
                               FROM PRI_TRF_IHC_RT
                               WHERE SVC_SCP_CD = @[svc_scp_cd]
                                 AND ORG_DEST_TP_CD = @[org_dest_tp_cd]
                                 AND IHC_TRF_NO = @[ihc_trf_no]
                                 AND AMDT_SEQ = @[amdt_seq]
                                 AND IHC_CGO_TP_CD = @[ihc_cgo_tp_cd]
                                 AND OPTM_TRSP_MOD_FLG = 'Y' -- Optimum인 Route만 Loc.group 들어가 있음
#if(${svc_scp_cd} == 'TAE' || ${svc_scp_cd} == 'TAW' || ${svc_scp_cd} == 'ASE' || ${svc_scp_cd} == 'ASW' || ${svc_scp_cd} == 'EAN' || ${svc_scp_cd} == 'EAS')
                               ORDER BY GLINE_LOCL_CURR_40FT_AMT
#else
                               ORDER BY GLINE_40FT_FRT_RT_AMT
#end
                                )
                         WHERE IHC_COST_LOC_GRP_NO IS NULL --insert 할 때 loc.group 할당 
                         ORDER BY CASE
                            	      WHEN HIGH_DIFF< LOW_DIFF THEN COALESCE(HIGH_LOC_GROUP, LOW_LOC_GROUP) --입력받은 AMT가 큰 값과 가까운 값이면 그 AMT의 Loc.Group 할당
                                      WHEN HIGH_DIFF > LOW_DIFF THEN COALESCE(LOW_LOC_GROUP, HIGH_LOC_GROUP) --입력받은 AMT가 작은 값과 가까운 값이면 그 AMT의 Loc.Group 할당
                                      ELSE COALESCE(LOW_LOC_GROUP, HIGH_LOC_GROUP) -- 같으면 작은 쪽의 Loc.Group 할당
                                  END
                    )
              WHERE ROWNUM = 1 --먼저 입력된 것부터 순차적으로 넣는다.
            ) A2
      ON (    A1.SVC_SCP_CD     = A2.SVC_SCP_CD
          AND A1.ORG_DEST_TP_CD = A2.ORG_DEST_TP_CD
          AND A1.IHC_TRF_NO     = A2.IHC_TRF_NO
          AND A1.AMDT_SEQ       = A2.AMDT_SEQ
          AND A1.IHC_CGO_TP_CD  = A2.IHC_CGO_TP_CD
          AND A1.RT_SEQ         = A2.RT_SEQ
)
      WHEN MATCHED THEN
         UPDATE
            SET A1.IHC_COST_LOC_GRP_NO = A2.SEL_LOC_GROUP              
               ,UPD_USR_ID = @[upd_usr_id]
               ,UPD_DT = SYSDATE			]]></sql>
			<params>
				<param name="svc_scp_cd" type="12" value="" out="N"/>
				<param name="org_dest_tp_cd" type="12" value="" out="N"/>
				<param name="ihc_trf_no" type="12" value="" out="N"/>
				<param name="amdt_seq" type="12" value="" out="N"/>
				<param name="ihc_cgo_tp_cd" type="12" value="" out="N"/>
				<param name="upd_usr_id" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
