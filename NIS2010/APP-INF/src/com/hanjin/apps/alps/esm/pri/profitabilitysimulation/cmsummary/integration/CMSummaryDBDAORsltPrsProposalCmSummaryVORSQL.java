/*=========================================================
*Copyright(c) 2010 CyberLogitec
*@FileName : CMSummaryDBDAORsltPrsProposalCmSummaryVORSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2010.05.24
*@LastModifier : 송민석
*@LastVersion : 1.0
* 2010.05.24 송민석
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esm.pri.profitabilitysimulation.cmsummary.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author SONG MIN SEOK
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class CMSummaryDBDAORsltPrsProposalCmSummaryVORSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  *    
	  * </pre>
	  */
	public CMSummaryDBDAORsltPrsProposalCmSummaryVORSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ctrt_exp_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_prop_srep_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ori_rout_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_prop_ofc_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ctrt_eff_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_pfmc_unit",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_svc_scp_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_ori_loc_tp",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_dest_rout_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_prop_apro_ofc_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frm_dest_loc_tp",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esm.pri.profitabilitysimulation.cmsummary.integration").append("\n"); 
		query.append("FileName : CMSummaryDBDAORsltPrsProposalCmSummaryVORSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("WITH " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- SC 선택시에만 아래 쿼리 조회" ).append("\n"); 
		query.append("#if (${frm_contract_type_s} == 'S') " ).append("\n"); 
		query.append("-- data가 cargo type, route등 조회 조건에 의해 빠지더라도" ).append("\n"); 
		query.append("-- 계약 번호는 list 되야 한다. 그래서 계약 번호를 따로 조회 하고" ).append("\n"); 
		query.append("-- data를 outer join으로 join 한다." ).append("\n"); 
		query.append("-- 이 쿼리는 기준이 되는 계약번호 list 인다." ).append("\n"); 
		query.append("VW_MAIN_NEW_SET AS (" ).append("\n"); 
		query.append("	SELECT	/*+ MATERIALIZE */   MN.PROP_OFC_CD" ).append("\n"); 
		query.append("		, M_ORG.OFC_ENG_NM  AS PROP_OFC_NM--  AS PROP_OFC_NM -- REQUEST OFFICE" ).append("\n"); 
		query.append("		, NVL(MN.REAL_CUST_CNT_CD, PTY.CUST_CNT_CD) AS CUST_CNT_CD" ).append("\n"); 
		query.append("		, NVL(MN.REAL_CUST_SEQ, PTY.CUST_SEQ) AS CUST_SEQ" ).append("\n"); 
		query.append("		, MN.PROP_NO" ).append("\n"); 
		query.append("		, MN.AMDT_SEQ" ).append("\n"); 
		query.append("		, DUR.CTRT_EFF_DT, DUR.CTRT_EXP_DT" ).append("\n"); 
		query.append("		, (TO_DATE(TO_CHAR(CTRT_EXP_DT,'YYYYMMDD'),'YYYYMMDD')- TO_DATE(TO_CHAR(CTRT_EFF_DT,'YYYYMMDD'),'YYYYMMDD')) / 7 AS WEEK_NEW	-- WEEK(NEW)" ).append("\n"); 
		query.append("		, DECODE( MN.REAL_CUST_CNT_CD, NULL, PTY.CTRT_PTY_NM, (SELECT CUST_LGL_ENG_NM FROM MDM_CUSTOMER WHERE CUST_CNT_CD = MN.REAL_CUST_CNT_CD AND CUST_SEQ =MN.REAL_CUST_SEQ  )) AS CTRT_PTY_NM -- CTRT_PTY_NM/ CUSTOMER NAME" ).append("\n"); 
		query.append("		, MAX( " ).append("\n"); 
		query.append("		       CASE WHEN MQ.CNTR_LOD_UT_CD = 'F' AND @[frm_pfmc_unit] = 'TEU' THEN " ).append("\n"); 
		query.append("			   MQ.PROP_MQC_QTY * 2" ).append("\n"); 
		query.append("		       WHEN MQ.CNTR_LOD_UT_CD = 'T' AND @[frm_pfmc_unit] = 'FEU' THEN" ).append("\n"); 
		query.append("			   MQ.PROP_MQC_QTY /2" ).append("\n"); 
		query.append("		       ELSE MQ.PROP_MQC_QTY" ).append("\n"); 
		query.append("		       END" ).append("\n"); 
		query.append("		    ) PROP_MQC_QTY  -- PROP_MQC_QTY								-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("		, SCP_MN.SVC_SCP_CD" ).append("\n"); 
		query.append("		, MAX( CTP.PRC_CTRT_CUST_TP_CD) AS CUST_TP_CD " ).append("\n"); 
		query.append("		,MAX(MN.PROP_APRO_OFC_CD) AS PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("		,MAX(MN.RESPB_SREP_CD) AS RESPB_SREP_CD" ).append("\n"); 
		query.append("	FROM	PRI_SP_MN MN" ).append("\n"); 
		query.append("		, PRI_SP_HDR HDR" ).append("\n"); 
		query.append("		, PRI_SP_CTRT_PTY PTY" ).append("\n"); 
		query.append("		, PRI_SP_MQC MQ" ).append("\n"); 
		query.append("		, PRI_SP_SCP_DUR DUR" ).append("\n"); 
		query.append("		, PRI_SP_SCP_MN SCP_MN" ).append("\n"); 
		query.append("		, MDM_ORGANIZATION M_ORG" ).append("\n"); 
		query.append("		, PRI_SP_CTRT_CUST_TP CTP" ).append("\n"); 
		query.append("	WHERE	MN.PROP_OFC_CD = M_ORG.OFC_CD" ).append("\n"); 
		query.append("		AND MN.PROP_NO   = HDR.PROP_NO" ).append("\n"); 
		query.append("		AND MN.PROP_NO = PTY.PROP_NO" ).append("\n"); 
		query.append("		AND MN.AMDT_SEQ = PTY.AMDT_SEQ" ).append("\n"); 
		query.append("		AND PTY.PRC_CTRT_PTY_TP_CD = 'C'" ).append("\n"); 
		query.append("		AND MN.PROP_NO = MQ.PROP_NO" ).append("\n"); 
		query.append("		AND MN.AMDT_SEQ = MQ.AMDT_SEQ" ).append("\n"); 
		query.append("		AND MN.AMDT_SEQ = 0" ).append("\n"); 
		query.append("		AND MN.PROP_NO = DUR.PROP_NO" ).append("\n"); 
		query.append("		AND MN.AMDT_SEQ = DUR.AMDT_SEQ" ).append("\n"); 
		query.append("		AND MN.PROP_NO = SCP_MN.PROP_NO" ).append("\n"); 
		query.append("		AND MN.AMDT_SEQ = SCP_MN.AMDT_SEQ" ).append("\n"); 
		query.append("		AND MN.PROP_NO = CTP.PROP_NO" ).append("\n"); 
		query.append("		AND MN.AMDT_SEQ = CTP.AMDT_SEQ" ).append("\n"); 
		query.append("		AND CTP.PRC_CTRT_PTY_TP_CD = 'C'" ).append("\n"); 
		query.append(" 		AND SCP_MN.SVC_SCP_CD = DUR.SVC_SCP_CD" ).append("\n"); 
		query.append(" " ).append("\n"); 
		query.append("	#if(${frm_customer_type} == 'B')" ).append("\n"); 
		query.append("		AND CTP.PRC_CTRT_CUST_TP_CD IN ('I','A','O')" ).append("\n"); 
		query.append("	#elseif(${frm_customer_type} == 'N')" ).append("\n"); 
		query.append("		AND CTP.PRC_CTRT_CUST_TP_CD IN ('N')" ).append("\n"); 
		query.append("	#else " ).append("\n"); 
		query.append("		AND CTP.PRC_CTRT_CUST_TP_CD IN ('I','A','O','N')" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_prop_ofc_cd} != '')" ).append("\n"); 
		query.append("		AND MN.PROP_OFC_CD = @[frm_prop_ofc_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_prop_srep_cd} != '')" ).append("\n"); 
		query.append("		AND MN.PROP_SREP_CD = @[frm_prop_srep_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_prop_apro_ofc_cd} != '')" ).append("\n"); 
		query.append("		AND MN.PROP_APRO_OFC_CD = @[frm_prop_apro_ofc_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_ctrt_eff_dt} != '' )" ).append("\n"); 
		query.append("		AND DUR.CTRT_EFF_DT >= TO_DATE(@[frm_ctrt_eff_dt],'YYYY-MM-DD')" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("	#if ( ${frm_ctrt_exp_dt} != '' )" ).append("\n"); 
		query.append("		AND DUR.CTRT_EXP_DT  <= TO_DATE(@[frm_ctrt_exp_dt],'YYYY-MM-DD') " ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_svc_scp_cd} != '' )" ).append("\n"); 
		query.append("		AND SCP_MN.SVC_SCP_CD = @[frm_svc_scp_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("			-- STATUS" ).append("\n"); 
		query.append("	#if (${frm_status} == 'Q') " ).append("\n"); 
		query.append("		AND  MN.PROP_STS_CD IN ( 'I', 'Q', 'R' ) /* REQUESTED */" ).append("\n"); 
		query.append("	#elseif(${frm_status} == 'A') " ).append("\n"); 
		query.append("		AND  MN.PROP_STS_CD IN ( 'A' ,'F') /* APPROVED */" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if( $cust_list.size() != 0 ) " ).append("\n"); 
		query.append("		AND (PTY.CUST_CNT_CD , PTY.CUST_SEQ) IN (" ).append("\n"); 
		query.append("		#foreach( ${key} in ${cust_list}) " ).append("\n"); 
		query.append("			#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("				UNION ALL" ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("			SELECT " ).append("\n"); 
		query.append("					substr('$key',1,2),substr('$key',3)" ).append("\n"); 
		query.append("			FROM DUAL" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("	#end " ).append("\n"); 
		query.append("	GROUP BY MN.PROP_OFC_CD,M_ORG.OFC_ENG_NM , MN.REAL_CUST_CNT_CD, PTY.CUST_CNT_CD,MN.REAL_CUST_SEQ, PTY.CUST_SEQ, PTY.CTRT_PTY_NM, MN.PROP_NO, MN.AMDT_SEQ, SCP_MN.SVC_SCP_CD, DUR.CTRT_EFF_DT, DUR.CTRT_EXP_DT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")," ).append("\n"); 
		query.append("-- 화면상의 New 에 해당하는 data를 select하는 부분으로" ).append("\n"); 
		query.append("-- SC, RFA Proposal 입력시 Calculate button으로 만들어진 데이터이다." ).append("\n"); 
		query.append("VW_NEW_DATA AS (" ).append("\n"); 
		query.append("	SELECT /*+ MATERIALIZE */  PROP_OFC_CD" ).append("\n"); 
		query.append("		, PROP_OFC_NM" ).append("\n"); 
		query.append("		, PROP_NO" ).append("\n"); 
		query.append("		, AMDT_SEQ" ).append("\n"); 
		query.append("		, CUST_CNT_CD" ).append("\n"); 
		query.append("		, CUST_SEQ" ).append("\n"); 
		query.append("		, CTRT_EFF_DT" ).append("\n"); 
		query.append("		, CTRT_EXP_DT" ).append("\n"); 
		query.append("		, WEEK_NEW						-- WEEK(NEW)" ).append("\n"); 
		query.append("		, CTRT_PTY_NM						-- CUSTOMER NAME" ).append("\n"); 
		query.append("		, PROP_MQC_QTY						-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("		, G_REV							-- GROSS REVENUE" ).append("\n"); 
		query.append("		, COST_NEW_CM_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("		, COST_NEW_CM_TRADE					-- COST(NEW)" ).append("\n"); 
		query.append("		, COST_NEW_OP_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		, LOAD_NEW              -- LOAD(NEW)" ).append("\n"); 
		query.append("		, NEW_RESPB_CM_AMT	-- OFFICE PROPIT/CM" ).append("\n"); 
		query.append("		, NEW_PFIT_CM_AMT	-- TRADE PROPIT/CM" ).append("\n"); 
		query.append("		, NEW_RESPB_OP_AMT	-- OP(NEW)" ).append("\n"); 
		query.append("		, CMPB_NEW_OFFICE	-- OFFICE PROPIT/CMPB" ).append("\n"); 
		query.append("		, CMPB_NEW_TRADE	-- TRADE PROPIT/CMPB" ).append("\n"); 
		query.append("		, OPB_NEW_OFFICE	-- OPB(NEW)" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT" ).append("\n"); 
		query.append("			PROP_OFC_CD" ).append("\n"); 
		query.append("			, MAX(PROP_OFC_NM) AS PROP_OFC_NM -- REQUEST OFFICE" ).append("\n"); 
		query.append("			, PROP_NO" ).append("\n"); 
		query.append("			, AMDT_SEQ" ).append("\n"); 
		query.append("			, CUST_CNT_CD" ).append("\n"); 
		query.append("			, CUST_SEQ" ).append("\n"); 
		query.append("			, CTRT_EFF_DT, CTRT_EXP_DT" ).append("\n"); 
		query.append("			, MAX(WEEK_NEW) AS WEEK_NEW" ).append("\n"); 
		query.append("			, MAX(CTRT_PTY_NM) AS CTRT_PTY_NM								-- CUSTOMER NAME" ).append("\n"); 
		query.append("			, MAX(PROP_MQC_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ) AS PROP_MQC_QTY								-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("			, SUM((PROP_FRT_RT_AMT + PRS_SCG_AMT) * PRS_ESTM_LOD_QTY_FOR_RATE) AS G_REV						-- GROSS REVENUE" ).append("\n"); 
		query.append("			, SUM(PRS_RESPB_CM_UC_AMT * PRS_ESTM_LOD_QTY_FOR_RATE) AS COST_NEW_CM_OFFICE -- COST-NEW-OFFICE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("			, SUM(PRS_PFIT_CM_UC_AMT * PRS_ESTM_LOD_QTY_FOR_RATE) AS COST_NEW_CM_TRADE	-- COST-NEW-TRADE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("			, SUM(PRS_RESPB_OPFIT_UC_AMT * PRS_ESTM_LOD_QTY_FOR_RATE) AS COST_NEW_OP_OFFICE		-- COST-NEW-OFFICE_PROFIT/OP	-- COST(NEW)" ).append("\n"); 
		query.append("			, SUM(PRS_ESTM_LOD_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ) AS LOAD_NEW-- LOAD(NEW)" ).append("\n"); 
		query.append("			, SUM(ESTM_RESPB_CM_AMT) AS NEW_RESPB_CM_AMT	   -- Office Profit -- CM(NEW)" ).append("\n"); 
		query.append("			, SUM(ESTM_PFIT_CM_AMT) AS NEW_PFIT_CM_AMT	   -- Trade Profit -- CM(NEW)" ).append("\n"); 
		query.append("			, SUM(ESTM_RESPB_OP_AMT) AS NEW_RESPB_OP_AMT	    --OP(NEW)" ).append("\n"); 
		query.append("			, DECODE(SUM(PRS_ESTM_LOD_QTY),0,0,SUM(ESTM_RESPB_CM_AMT) / SUM(PRS_ESTM_LOD_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )) AS CMPB_NEW_OFFICE	-- OFFICE PROPIT/CMPB" ).append("\n"); 
		query.append("			, DECODE(SUM(PRS_ESTM_LOD_QTY),0,0,SUM(ESTM_PFIT_CM_AMT) / SUM(PRS_ESTM_LOD_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )) AS CMPB_NEW_TRADE	-- TRADE PROPIT/CM" ).append("\n"); 
		query.append("			, DECODE(SUM(PRS_ESTM_LOD_QTY),0,0,SUM(ESTM_RESPB_OP_AMT) / SUM(PRS_ESTM_LOD_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )) AS OPB_NEW_OFFICE	 --OPB(NEW)" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT	MN.PROP_OFC_CD" ).append("\n"); 
		query.append("				, MN.PROP_OFC_NM --  AS PROP_OFC_NM -- REQUEST OFFICE" ).append("\n"); 
		query.append("				, MN.CUST_CNT_CD" ).append("\n"); 
		query.append("				, MN.CUST_SEQ" ).append("\n"); 
		query.append("				, MN.PROP_NO" ).append("\n"); 
		query.append("				, MN.AMDT_SEQ" ).append("\n"); 
		query.append("				, MN.CTRT_EFF_DT, MN.CTRT_EXP_DT" ).append("\n"); 
		query.append("				, MN.CTRT_PTY_NM -- CTRT_PTY_NM								-- CUSTOMER NAME" ).append("\n"); 
		query.append("				, MN.PROP_MQC_QTY  -- PROP_MQC_QTY								-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("				, MN.WEEK_NEW" ).append("\n"); 
		query.append("				, RT.PROP_FRT_RT_AMT" ).append("\n"); 
		query.append("				, RT.PRS_SCG_AMT" ).append("\n"); 
		query.append("				, RT.PRS_RESPB_CM_UC_AMT  -- COST_NEW_CM_OFFICE -- COST-NEW-OFFICE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("				, RT.PRS_PFIT_CM_UC_AMT  -- COST_NEW_CM_TRADE	-- COST-NEW-TRADE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("				, RT.PRS_RESPB_OPFIT_UC_AMT  -- COST_NEW_OP_OFFICE		-- COST-NEW-OFFICE_PROFIT/OP	-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("				, CMDT_ROUT.PRS_ESTM_LOD_QTY   AS PRS_ESTM_LOD_QTY -- LOAD(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  " ).append("\n"); 
		query.append("	       				ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  / 2" ).append("\n"); 
		query.append("	       		  END  AS ESTM_RESPB_CM_AMT  -- AS CM_NEW_OFFICE" ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT " ).append("\n"); 
		query.append("	       				ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT  / 2" ).append("\n"); 
		query.append("	       		  END  AS ESTM_PFIT_CM_AMT    --  CM_NEW_OP_TRADE " ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  " ).append("\n"); 
		query.append("	       				ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  / 2" ).append("\n"); 
		query.append("	       		  END  AS ESTM_RESPB_OP_AMT    --  CM_NEW_OP_TRADE " ).append("\n"); 
		query.append("		-- CMDT_ROUT.PRS_ESTM_LOD_QTY  값은 무조건  TEU(D2) 기준으로 가지고 있고" ).append("\n"); 
		query.append("		-- AMT 정보는 TEU(D2) , FEU(D4) 에 따라 해당 하는 단위로 값을 가지고 있기 때문에" ).append("\n"); 
		query.append("        -- Load 를 AMT 기준으로 맞추기 위해 아래와 같이 값을 조정한다." ).append("\n"); 
		query.append("			----------------------------------------------------------------------------------" ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY  " ).append("\n"); 
		query.append("	       				ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY    / 2" ).append("\n"); 
		query.append("	       		  END  AS PRS_ESTM_LOD_QTY_FOR_RATE    --  " ).append("\n"); 
		query.append("			FROM	VW_MAIN_NEW_SET MN" ).append("\n"); 
		query.append("				, PRI_SP_SCP_RT_CMDT_ROUT CMDT_ROUT" ).append("\n"); 
		query.append("				, PRI_SP_SCP_RT RT  " ).append("\n"); 
		query.append("-- Origin 을 조회조건에 입력 하게 되면 해당 route만 실적에 잡히 도록 조건(join)을 추가한다." ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("				,(" ).append("\n"); 
		query.append("				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, GEN_SPCL_RT_TP_CD, CMDT_HDR_SEQ, ROUT_SEQ" ).append("\n"); 
		query.append("				       FROM (" ).append("\n"); 
		query.append("						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.GEN_SPCL_RT_TP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ" ).append("\n"); 
		query.append("							, DECODE(@[frm_ori_loc_tp]" ).append("\n"); 
		query.append("								, 'C'," ).append("\n"); 
		query.append("								       (" ).append("\n"); 
		query.append("									  SELECT CNT_CD " ).append("\n"); 
		query.append("									  FROM MDM_LOCATION " ).append("\n"); 
		query.append("									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) " ).append("\n"); 
		query.append("								       )" ).append("\n"); 
		query.append("								, 'R', " ).append("\n"); 
		query.append("									(" ).append("\n"); 
		query.append("									    SELECT RGN_CD " ).append("\n"); 
		query.append("									    FROM MDM_LOCATION " ).append("\n"); 
		query.append("									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)" ).append("\n"); 
		query.append("									 )" ).append("\n"); 
		query.append("								, NULL " ).append("\n"); 
		query.append("							)   AS LOC_CD " ).append("\n"); 
		query.append("						FROM VW_MAIN_NEW_SET MN_SET" ).append("\n"); 
		query.append("							, PRI_SP_SCP_RT_ROUT_PNT A" ).append("\n"); 
		query.append("							, PRI_SP_SCP_GRP_LOC B" ).append("\n"); 
		query.append("							, PRI_SP_SCP_GRP_LOC_DTL C" ).append("\n"); 
		query.append("						WHERE MN_SET.PROP_NO = A.PROP_NO" ).append("\n"); 
		query.append("							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ" ).append("\n"); 
		query.append("							AND MN_SET.SVC_SCP_CD = A.SVC_SCP_CD" ).append("\n"); 
		query.append("							AND A.ORG_DEST_TP_CD = 'O'" ).append("\n"); 
		query.append("							AND A.SRC_INFO_CD <> 'AD'" ).append("\n"); 
		query.append("							AND A.PROP_NO     = B.PROP_NO(+)" ).append("\n"); 
		query.append("							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)" ).append("\n"); 
		query.append("							AND B.PROP_NO     = C.PROP_NO(+)" ).append("\n"); 
		query.append("							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)" ).append("\n"); 
		query.append("							AND C.SRC_INFO_CD(+) <> 'AD'" ).append("\n"); 
		query.append("					)" ).append("\n"); 
		query.append("					WHERE LOC_CD  = @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("				) ORI_LOC" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("-- Dest.를 조회조건에 입력 하게 되면 해당 route만 실적에 잡히 도록 조건(join)을 추가한다." ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("				,(" ).append("\n"); 
		query.append("				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, GEN_SPCL_RT_TP_CD, CMDT_HDR_SEQ, ROUT_SEQ" ).append("\n"); 
		query.append("				       FROM (" ).append("\n"); 
		query.append("						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.GEN_SPCL_RT_TP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ" ).append("\n"); 
		query.append("							, DECODE(@[frm_dest_loc_tp]" ).append("\n"); 
		query.append("								, 'C'," ).append("\n"); 
		query.append("								       (" ).append("\n"); 
		query.append("									  SELECT CNT_CD " ).append("\n"); 
		query.append("									  FROM MDM_LOCATION " ).append("\n"); 
		query.append("									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) " ).append("\n"); 
		query.append("								       )" ).append("\n"); 
		query.append("								, 'R', " ).append("\n"); 
		query.append("									(" ).append("\n"); 
		query.append("									    SELECT RGN_CD " ).append("\n"); 
		query.append("									    FROM MDM_LOCATION " ).append("\n"); 
		query.append("									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)" ).append("\n"); 
		query.append("									 )" ).append("\n"); 
		query.append("								, NULL " ).append("\n"); 
		query.append("							)   AS LOC_CD " ).append("\n"); 
		query.append("						FROM VW_MAIN_NEW_SET MN_SET" ).append("\n"); 
		query.append("							, PRI_SP_SCP_RT_ROUT_PNT A" ).append("\n"); 
		query.append("							, PRI_SP_SCP_GRP_LOC B" ).append("\n"); 
		query.append("							, PRI_SP_SCP_GRP_LOC_DTL C" ).append("\n"); 
		query.append("						WHERE MN_SET.PROP_NO = A.PROP_NO" ).append("\n"); 
		query.append("							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ" ).append("\n"); 
		query.append("							AND MN_SET.SVC_SCP_CD = A.SVC_SCP_CD" ).append("\n"); 
		query.append("							AND A.ORG_DEST_TP_CD = 'D'" ).append("\n"); 
		query.append("							AND A.SRC_INFO_CD <> 'AD'" ).append("\n"); 
		query.append("							AND A.PROP_NO     = B.PROP_NO(+)" ).append("\n"); 
		query.append("							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)" ).append("\n"); 
		query.append("							AND B.PROP_NO     = C.PROP_NO(+)" ).append("\n"); 
		query.append("							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)" ).append("\n"); 
		query.append("							AND C.SRC_INFO_CD(+) <> 'AD'" ).append("\n"); 
		query.append("					)" ).append("\n"); 
		query.append("					WHERE LOC_CD  = @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("				) DEST_LOC" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("-- SVC Lane을  조회조건에 입력 하게 되면 해당 route만 실적에 잡히 도록 조건(join)을 추가한다." ).append("\n"); 
		query.append("#if( $slane_list.size() != 0 ) " ).append("\n"); 
		query.append("				,(" ).append("\n"); 
		query.append("					SELECT  DISTINCT RT.PROP_NO, RT.AMDT_SEQ, RT.SVC_SCP_CD, RT.GEN_SPCL_RT_TP_CD, RT.CMDT_HDR_SEQ, RT.ROUT_SEQ" ).append("\n"); 
		query.append("					FROM VW_MAIN_NEW_SET MN_SET" ).append("\n"); 
		query.append("						, PRI_SP_SCP_RT RT" ).append("\n"); 
		query.append("					WHERE MN_SET.PROP_NO = RT.PROP_NO" ).append("\n"); 
		query.append("						AND MN_SET.AMDT_SEQ = RT.AMDT_SEQ" ).append("\n"); 
		query.append("						AND MN_SET.SVC_SCP_CD = RT.SVC_SCP_CD" ).append("\n"); 
		query.append("	#if( $slane_list.size() != 0 ) " ).append("\n"); 
		query.append("		AND (RT.VSL_SLAN_CD) IN (" ).append("\n"); 
		query.append("		#foreach( ${key} in ${slane_list}) " ).append("\n"); 
		query.append("			#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("				," ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("				'$key'" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("	#end " ).append("\n"); 
		query.append("				) SLANE" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("			WHERE	 MN.PROP_NO = CMDT_ROUT.PROP_NO" ).append("\n"); 
		query.append("				AND MN.AMDT_SEQ = CMDT_ROUT.AMDT_SEQ" ).append("\n"); 
		query.append("				AND MN.SVC_SCP_CD = CMDT_ROUT.SVC_SCP_CD" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = ORI_LOC.PROP_NO" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = ORI_LOC.AMDT_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = ORI_LOC.SVC_SCP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.GEN_SPCL_RT_TP_CD = ORI_LOC.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  ORI_LOC.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = ORI_LOC.ROUT_SEQ" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = DEST_LOC.PROP_NO" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = DEST_LOC.AMDT_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = DEST_LOC.SVC_SCP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.GEN_SPCL_RT_TP_CD = DEST_LOC.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  DEST_LOC.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = DEST_LOC.ROUT_SEQ" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( $slane_list.size() != 0 ) " ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = SLANE.PROP_NO" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = SLANE.AMDT_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = SLANE.SVC_SCP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.GEN_SPCL_RT_TP_CD = SLANE.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  SLANE.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = SLANE.ROUT_SEQ" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = RT.PROP_NO(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = RT.AMDT_SEQ(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = RT.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.GEN_SPCL_RT_TP_CD = RT.GEN_SPCL_RT_TP_CD(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  RT.CMDT_HDR_SEQ(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = RT.ROUT_SEQ(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PRS_RAT_UT_CD = RT.RAT_UT_CD(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PRS_CGO_TP_CD = RT.PRC_CGO_TP_CD(+)" ).append("\n"); 
		query.append("				-- BY CARGO TYPE" ).append("\n"); 
		query.append("				#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("					AND CMDT_ROUT.PRS_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("	 " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("		GROUP BY PROP_OFC_CD,CUST_CNT_CD,CUST_SEQ, PROP_NO, AMDT_SEQ, CTRT_EFF_DT, CTRT_EXP_DT" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("-- 과거 실적와 현재 Calculate에 의해 계산된 값을 연결하는" ).append("\n"); 
		query.append("-- 연결 고리가 되는 쿼리로 Filing 된 데이터중 가장 최근 SC No를 select한다." ).append("\n"); 
		query.append("-- 이렇게 해서 propsal no와 과거 실적 조회에 쓰일 SC No의 매핑이 될수 있다." ).append("\n"); 
		query.append("VW_PRE_CONDITION AS (" ).append("\n"); 
		query.append("    SELECT /*+ MATERIALIZE */    'S' AS CTRT_TP_CD, OLD_PROP_NO, OLD_AMDT_SEQ, SVC_SCP_CD, SUBSTR(SC_NO, 17, 37) AS SC_NO ,SUBSTR(SC_NO, 1, 8) AS CTRT_EXP_DT,SUBSTR(SC_NO, 9, 8) AS CTRT_EFF_DT" ).append("\n"); 
		query.append("      FROM (" ).append("\n"); 
		query.append("           SELECT /*+ ORDERED USE_HASH(M H D S) FULL(S) */  OLD_PROP_NO, OLD_AMDT_SEQ, S.SVC_SCP_CD, MAX(TO_CHAR(D.CTRT_EXP_DT, 'YYYYMMDD')||TO_CHAR(D.CTRT_EFF_DT, 'YYYYMMDD')||H.SC_NO) SC_NO " ).append("\n"); 
		query.append("             FROM (SELECT /*+ ORDERED */  M.PROP_NO, MAX(M.AMDT_SEQ) AS AMDT_SEQ " ).append("\n"); 
		query.append("                          ,NW.PROP_NO AS OLD_PROP_NO, NW.AMDT_SEQ AS OLD_AMDT_SEQ" ).append("\n"); 
		query.append("                     FROM VW_MAIN_NEW_SET NW, PRI_SP_CTRT_PTY C, PRI_SP_MN M" ).append("\n"); 
		query.append("                    WHERE  M.PROP_NO = C.PROP_NO " ).append("\n"); 
		query.append("                      AND  M.AMDT_SEQ = C.AMDT_SEQ" ).append("\n"); 
		query.append("                      AND  NVL(M.REAL_CUST_CNT_CD,C.CUST_CNT_CD) = NW.CUST_CNT_CD" ).append("\n"); 
		query.append("                      AND  NVL(M.REAL_CUST_SEQ,C.CUST_SEQ)    = NW.CUST_SEQ" ).append("\n"); 
		query.append("                      AND  C.PRC_CTRT_PTY_TP_CD = 'C'" ).append("\n"); 
		query.append("                      AND  M.PROP_STS_CD IN ( 'F')" ).append("\n"); 
		query.append("					  AND  NW.PROP_NO <> M.PROP_NO" ).append("\n"); 
		query.append("				      AND  ROWNUM >=1" ).append("\n"); 
		query.append("                   GROUP BY M.PROP_NO, NW.PROP_NO, NW.AMDT_SEQ     ) M, " ).append("\n"); 
		query.append("                  PRI_SP_HDR H," ).append("\n"); 
		query.append("                  PRI_SP_SCP_DUR D, " ).append("\n"); 
		query.append("                  PRI_SP_SCP_MN S          " ).append("\n"); 
		query.append("            WHERE H.PROP_NO  = M.PROP_NO" ).append("\n"); 
		query.append("              AND M.PROP_NO  = D.PROP_NO" ).append("\n"); 
		query.append("              AND M.AMDT_SEQ = D.AMDT_SEQ" ).append("\n"); 
		query.append("              AND M.PROP_NO  = S.PROP_NO" ).append("\n"); 
		query.append("              AND M.AMDT_SEQ = S.AMDT_SEQ" ).append("\n"); 
		query.append("			  AND S.SVC_SCP_CD = D.SVC_SCP_CD" ).append("\n"); 
		query.append("              AND S.SVC_SCP_CD =  @[frm_svc_scp_cd]" ).append("\n"); 
		query.append("           GROUP BY OLD_PROP_NO, OLD_AMDT_SEQ, S.SVC_SCP_CD   " ).append("\n"); 
		query.append("           )" ).append("\n"); 
		query.append(")," ).append("\n"); 
		query.append("-- 과거 실적 데이터 화면상의 Previous" ).append("\n"); 
		query.append("-- Batch Program에 의해 데이터가 생성된다." ).append("\n"); 
		query.append("VW_PREVIOUS AS (" ).append("\n"); 
		query.append("	SELECT	 	/*+ MATERIALIZE ORDERED */    VC.OLD_PROP_NO,VC.OLD_AMDT_SEQ" ).append("\n"); 
		query.append("		, MAX(TO_DATE(VC.CTRT_EXP_DT,'YYYYMMDD')- TO_DATE(VC.CTRT_EFF_DT,'YYYYMMDD')) / 7 AS WEEK_PREVIOUS	-- WEEK(PREVIOUS)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD_PREVIOUS            -- Load(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_RESPB_CM_UC_AMT  * SR_CST_DTL.PRS_CRNT_LOD_QTY )   AS COST_PREVIOUS_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_PFIT_CM_UC_AMT  * SR_CST_DTL.PRS_CRNT_LOD_QTY )    AS COST_PREVIOUS_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_RESPB_OPFIT_UC_AMT  * SR_CST_DTL.PRS_CRNT_LOD_QTY ) AS COST_PREVIOUS_OP_OFFICE -- Office Profit/ OP -- Cost(Previous)" ).append("\n"); 
		query.append("		, DECODE(SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY),0,0, SUM(SR_CST_DTL.PRS_RESPB_CMPB_AMT *  SR_CST_DTL.PRS_CRNT_LOD_QTY      ) / SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ))     AS CMPB_PREVIOUS_OFFICE     -- Office Profit/ CM -- CMPB(Previous)" ).append("\n"); 
		query.append("		, DECODE(SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY),0,0, SUM(SR_CST_DTL.PRS_PFIT_CMPB_AMT *  SR_CST_DTL.PRS_CRNT_LOD_QTY      ) / SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ))       AS CMPB_PREVIOUS_TRADE      -- Trade Profit/ CM  -- CMPB(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  * SR_CST_DTL.PRS_RESPB_CMPB_AMT) AS CM_PREVIOUS_OFFICE -- Office Profit/ CM -- CM(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY    * SR_CST_DTL.PRS_PFIT_CMPB_AMT) AS CM_PREVIOUS_TRADE   -- Trade Profit/ CM  -- CM(Previous)" ).append("\n"); 
		query.append("		, DECODE(SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY),0,0, SUM(SR_CST_DTL.PRS_RESPB_OPB_AMT *  SR_CST_DTL.PRS_CRNT_LOD_QTY     ) / SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ))        AS OPB_PREVIOUS             -- Office Profit/ OP -- OPB(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  * SR_CST_DTL.PRS_RESPB_OPB_AMT) AS OP_PREVIOUS         -- OP(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.TEU_FRT_REV  * SR_CST_DTL.PRS_CRNT_LOD_QTY  )         AS G_REV_PREVIOUS            -- Gross Revenue(Previous)" ).append("\n"); 
		query.append("	FROM VW_PRE_CONDITION VC" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY SR_MN" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY_COST_DTL SR_CST_DTL" ).append("\n"); 
		query.append("	WHERE SR_MN.PRS_YRMON = SR_CST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		AND SR_MN.PRS_WK = SR_CST_DTL.PRS_WK" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_TP_CD= VC.CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_NO    = VC.SC_NO" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_TP_CD= SR_CST_DTL.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_NO   = SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		AND SR_CST_DTL.SVC_SCP_CD  = @[frm_svc_scp_cd]" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_TP_CD = 'S' --S/C" ).append("\n"); 
		query.append("		-- BY CARGO TYPE" ).append("\n"); 
		query.append("		#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("			AND SR_CST_DTL.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- origin" ).append("\n"); 
		query.append("		AND SR_CST_DTL.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- DEST" ).append("\n"); 
		query.append("		AND SR_CST_DTL.DEST_LOC_TP_CD= @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( $slane_list.size() != 0 ) " ).append("\n"); 
		query.append("		-- SLANE" ).append("\n"); 
		query.append("	#if( $slane_list.size() != 0 ) " ).append("\n"); 
		query.append("		AND substr(SR_CST_DTL.RLANE_CD,0,3) IN (" ).append("\n"); 
		query.append("		#foreach( ${key} in ${slane_list}) " ).append("\n"); 
		query.append("			#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("				," ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("				'$key'" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("	#end " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	GROUP BY VC.OLD_PROP_NO, VC.OLD_AMDT_SEQ" ).append("\n"); 
		query.append(" " ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if (${frm_contract_type_s} == 'S' && ${frm_contract_type_r} == 'R') " ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- SC와 모든 내용이 동일한데 단지 대상 데이터(테이블)이 RFA 가 된다." ).append("\n"); 
		query.append("#if (${frm_contract_type_r} == 'R') " ).append("\n"); 
		query.append("VW_RFA_MAIN_NEW_SET AS (" ).append("\n"); 
		query.append("	SELECT	/*+ ORDERED USE_HASH(DUR MN HDR SCP_MN) INDEX_FFS(SCP_MN XPKPRI_RP_SCP_MN)*/   MN.PROP_OFC_CD" ).append("\n"); 
		query.append("		, M_ORG.OFC_ENG_NM  AS PROP_OFC_NM--  AS PROP_OFC_NM -- REQUEST OFFICE" ).append("\n"); 
		query.append("		, MN.CTRT_CUST_CNT_CD AS CUST_CNT_CD" ).append("\n"); 
		query.append("		, MN.CTRT_CUST_SEQ AS CUST_SEQ" ).append("\n"); 
		query.append("		, MN.PROP_NO" ).append("\n"); 
		query.append("		, MN.AMDT_SEQ" ).append("\n"); 
		query.append("		, DUR.CTRT_EFF_DT, DUR.CTRT_EXP_DT" ).append("\n"); 
		query.append("		, (TO_DATE(TO_CHAR(CTRT_EXP_DT,'YYYYMMDD'),'YYYYMMDD')- TO_DATE(TO_CHAR(CTRT_EFF_DT,'YYYYMMDD'),'YYYYMMDD')) / 7 AS WEEK_NEW	-- WEEK(NEW)" ).append("\n"); 
		query.append("		, CUST.CUST_LGL_ENG_NM AS CTRT_PTY_NM--PTY.CTRT_PTY_NM --  -- CUSTOMER NAME" ).append("\n"); 
		query.append("		, (" ).append("\n"); 
		query.append("			CASE WHEN MN.CNTR_LOD_UT_CD = 'F' AND @[frm_pfmc_unit] = 'TEU' THEN" ).append("\n"); 
		query.append("			MN.TGT_MVC_QTY * 2" ).append("\n"); 
		query.append("			WHEN MN.CNTR_LOD_UT_CD = 'T' AND @[frm_pfmc_unit] = 'FEU' THEN" ).append("\n"); 
		query.append("			MN.TGT_MVC_QTY /2" ).append("\n"); 
		query.append("			ELSE MN.TGT_MVC_QTY" ).append("\n"); 
		query.append("			END" ).append("\n"); 
		query.append("		) PROP_MQC_QTY  -- PROP_MQC_QTY								-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("		, SCP_MN.SVC_SCP_CD" ).append("\n"); 
		query.append("		, MN.PRC_CTRT_CUST_TP_CD AS CUST_TP_CD" ).append("\n"); 
		query.append("		,MN.PROP_APRO_OFC_CD AS PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("		,MN.RESPB_SREP_CD AS RESPB_SREP_CD" ).append("\n"); 
		query.append("	FROM  PRI_RP_SCP_DUR DUR" ).append("\n"); 
		query.append("        , PRI_RP_MN MN" ).append("\n"); 
		query.append("        , PRI_RP_HDR HDR" ).append("\n"); 
		query.append("        , PRI_RP_SCP_MN SCP_MN" ).append("\n"); 
		query.append("        , MDM_ORGANIZATION M_ORG" ).append("\n"); 
		query.append("        , MDM_CUSTOMER CUST" ).append("\n"); 
		query.append("	WHERE	MN.PROP_OFC_CD = M_ORG.OFC_CD" ).append("\n"); 
		query.append("		AND MN.PROP_NO   = HDR.PROP_NO" ).append("\n"); 
		query.append("		AND MN.AMDT_SEQ = 0" ).append("\n"); 
		query.append("		AND MN.PROP_NO = DUR.PROP_NO" ).append("\n"); 
		query.append("		AND MN.AMDT_SEQ = DUR.AMDT_SEQ" ).append("\n"); 
		query.append("		AND MN.PROP_NO = SCP_MN.PROP_NO" ).append("\n"); 
		query.append("		AND MN.AMDT_SEQ = SCP_MN.AMDT_SEQ" ).append("\n"); 
		query.append("		AND SCP_MN.SVC_SCP_CD = DUR.SVC_SCP_CD" ).append("\n"); 
		query.append("		AND CUST.CUST_CNT_CD = MN.CTRT_CUST_CNT_CD" ).append("\n"); 
		query.append("		AND CUST.CUST_SEQ = MN.CTRT_CUST_SEQ" ).append("\n"); 
		query.append("	#if(${frm_customer_type} == 'B')" ).append("\n"); 
		query.append("				AND MN.PRC_CTRT_CUST_TP_CD IN ('I','A','O')" ).append("\n"); 
		query.append("	#elseif(${frm_customer_type} == 'N')" ).append("\n"); 
		query.append("				AND MN.PRC_CTRT_CUST_TP_CD IN ('N')" ).append("\n"); 
		query.append("	#else " ).append("\n"); 
		query.append("			AND MN.PRC_CTRT_CUST_TP_CD IN ('I','A','O','N')" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_prop_ofc_cd} != '')" ).append("\n"); 
		query.append("				AND MN.PROP_OFC_CD = @[frm_prop_ofc_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_prop_srep_cd} != '')" ).append("\n"); 
		query.append("				AND MN.PROP_SREP_CD = @[frm_prop_srep_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_prop_apro_ofc_cd} != '')" ).append("\n"); 
		query.append("				AND MN.PROP_APRO_OFC_CD = @[frm_prop_apro_ofc_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_ctrt_eff_dt} != '' )" ).append("\n"); 
		query.append("		AND DUR.CTRT_EFF_DT >= TO_DATE(@[frm_ctrt_eff_dt],'YYYY-MM-DD')" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("	#if ( ${frm_ctrt_exp_dt} != '' )" ).append("\n"); 
		query.append("		AND DUR.CTRT_EXP_DT  <= TO_DATE(@[frm_ctrt_exp_dt],'YYYY-MM-DD') " ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_svc_scp_cd} != '' )" ).append("\n"); 
		query.append("				AND SCP_MN.SVC_SCP_CD = @[frm_svc_scp_cd]" ).append("\n"); 
		query.append("				AND DUR.SVC_SCP_CD = @[frm_svc_scp_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("			-- STATUS" ).append("\n"); 
		query.append("	#if (${frm_status} == 'Q') " ).append("\n"); 
		query.append("				AND  MN.PROP_STS_CD IN ( 'I', 'Q', 'R' ) /* REQUESTED */" ).append("\n"); 
		query.append("	#elseif(${frm_status} == 'A') " ).append("\n"); 
		query.append("				AND  MN.PROP_STS_CD IN ( 'A' ) /* APPROVED */" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if( $cust_list.size() != 0 ) " ).append("\n"); 
		query.append("		AND (MN.CTRT_CUST_CNT_CD ,MN.CTRT_CUST_SEQ) IN (" ).append("\n"); 
		query.append("		#foreach( ${key} in ${cust_list}) " ).append("\n"); 
		query.append("			#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("				UNION ALL" ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("			SELECT " ).append("\n"); 
		query.append("					substr('$key',1,2),substr('$key',3)" ).append("\n"); 
		query.append("			FROM DUAL" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("	#end " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")," ).append("\n"); 
		query.append("VW_RFA_NEW_DATA AS (" ).append("\n"); 
		query.append("	SELECT PROP_OFC_CD" ).append("\n"); 
		query.append("		, PROP_OFC_NM" ).append("\n"); 
		query.append("		, PROP_NO" ).append("\n"); 
		query.append("		, AMDT_SEQ" ).append("\n"); 
		query.append("		, CUST_CNT_CD" ).append("\n"); 
		query.append("		, CUST_SEQ" ).append("\n"); 
		query.append("		, CTRT_EFF_DT" ).append("\n"); 
		query.append("		, CTRT_EXP_DT" ).append("\n"); 
		query.append("		, WEEK_NEW						-- WEEK(NEW)" ).append("\n"); 
		query.append("		, CTRT_PTY_NM						-- CUSTOMER NAME" ).append("\n"); 
		query.append("		, PROP_MQC_QTY						-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("		, G_REV							-- GROSS REVENUE" ).append("\n"); 
		query.append("		, COST_NEW_CM_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("		, COST_NEW_CM_TRADE					-- COST(NEW)" ).append("\n"); 
		query.append("		, COST_NEW_OP_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		, LOAD_NEW              -- LOAD(NEW)" ).append("\n"); 
		query.append("		, NEW_RESPB_CM_AMT	-- OFFICE PROPIT/CM" ).append("\n"); 
		query.append("		, NEW_PFIT_CM_AMT	-- TRADE PROPIT/CM" ).append("\n"); 
		query.append("		, NEW_RESPB_OP_AMT	-- OP(NEW)" ).append("\n"); 
		query.append("		, CMPB_NEW_OFFICE	-- OFFICE PROPIT/CMPB" ).append("\n"); 
		query.append("		, CMPB_NEW_TRADE	-- TRADE PROPIT/CMPB" ).append("\n"); 
		query.append("		, OPB_NEW_OFFICE	-- OPB(NEW)" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT" ).append("\n"); 
		query.append("			PROP_OFC_CD" ).append("\n"); 
		query.append("			, MAX(PROP_OFC_NM) AS PROP_OFC_NM -- REQUEST OFFICE" ).append("\n"); 
		query.append("			, PROP_NO" ).append("\n"); 
		query.append("			, AMDT_SEQ" ).append("\n"); 
		query.append("			, CUST_CNT_CD" ).append("\n"); 
		query.append("			, CUST_SEQ" ).append("\n"); 
		query.append("			, CTRT_EFF_DT, CTRT_EXP_DT" ).append("\n"); 
		query.append("			, MAX(WEEK_NEW) AS WEEK_NEW" ).append("\n"); 
		query.append("			, MAX(CTRT_PTY_NM) AS CTRT_PTY_NM								-- CUSTOMER NAME" ).append("\n"); 
		query.append("			, MAX(PROP_MQC_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ) AS PROP_MQC_QTY								-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("			, SUM((PROP_FRT_RT_AMT + PRS_SCG_AMT) * PRS_ESTM_LOD_QTY_FOR_RATE  ) AS G_REV						-- GROSS REVENUE" ).append("\n"); 
		query.append("			, SUM(PRS_RESPB_CM_UC_AMT * PRS_ESTM_LOD_QTY_FOR_RATE  ) AS COST_NEW_CM_OFFICE -- COST-NEW-OFFICE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("			, SUM(PRS_PFIT_CM_UC_AMT * PRS_ESTM_LOD_QTY_FOR_RATE  ) AS COST_NEW_CM_TRADE	-- COST-NEW-TRADE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("			, SUM(PRS_RESPB_OPFIT_UC_AMT * PRS_ESTM_LOD_QTY_FOR_RATE  ) AS COST_NEW_OP_OFFICE		-- COST-NEW-OFFICE_PROFIT/OP	-- COST(NEW)" ).append("\n"); 
		query.append("			, SUM(PRS_ESTM_LOD_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ) AS LOAD_NEW-- LOAD(NEW)" ).append("\n"); 
		query.append("			, SUM(ESTM_RESPB_CM_AMT) AS NEW_RESPB_CM_AMT	   -- Office Profit -- CM(NEW)" ).append("\n"); 
		query.append("			, SUM(ESTM_PFIT_CM_AMT) AS NEW_PFIT_CM_AMT	   -- Trade Profit -- CM(NEW)" ).append("\n"); 
		query.append("			, SUM(ESTM_RESPB_OP_AMT) AS NEW_RESPB_OP_AMT	    --OP(NEW)" ).append("\n"); 
		query.append("			, DECODE(SUM(PRS_ESTM_LOD_QTY),0,0,SUM(ESTM_RESPB_CM_AMT) / SUM(PRS_ESTM_LOD_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )) AS CMPB_NEW_OFFICE	-- OFFICE PROPIT/CMPB" ).append("\n"); 
		query.append("			, DECODE(SUM(PRS_ESTM_LOD_QTY),0,0,SUM(ESTM_PFIT_CM_AMT) / SUM(PRS_ESTM_LOD_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )) AS CMPB_NEW_TRADE	-- TRADE PROPIT/CM" ).append("\n"); 
		query.append("			, DECODE(SUM(PRS_ESTM_LOD_QTY),0,0,SUM(ESTM_RESPB_OP_AMT) / SUM(PRS_ESTM_LOD_QTY / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )) AS OPB_NEW_OFFICE	 --OPB(NEW)" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT	MN.PROP_OFC_CD" ).append("\n"); 
		query.append("				, MN.PROP_OFC_NM --  AS PROP_OFC_NM -- REQUEST OFFICE" ).append("\n"); 
		query.append("				, MN.CUST_CNT_CD" ).append("\n"); 
		query.append("				, MN.CUST_SEQ" ).append("\n"); 
		query.append("				, MN.PROP_NO" ).append("\n"); 
		query.append("				, MN.AMDT_SEQ" ).append("\n"); 
		query.append("				, MN.CTRT_EFF_DT, MN.CTRT_EXP_DT" ).append("\n"); 
		query.append("				, MN.CTRT_PTY_NM -- CTRT_PTY_NM								-- CUSTOMER NAME" ).append("\n"); 
		query.append("				, MN.PROP_MQC_QTY  -- PROP_MQC_QTY								-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("				, MN.WEEK_NEW" ).append("\n"); 
		query.append("				, RT.PROP_FRT_RT_AMT" ).append("\n"); 
		query.append("				, RT.PRS_SCG_AMT" ).append("\n"); 
		query.append("				, RT.PRS_RESPB_CM_UC_AMT  -- COST_NEW_CM_OFFICE -- COST-NEW-OFFICE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("				, RT.PRS_PFIT_CM_UC_AMT  -- COST_NEW_CM_TRADE	-- COST-NEW-TRADE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("				, RT.PRS_RESPB_OPFIT_UC_AMT  -- COST_NEW_OP_OFFICE		-- COST-NEW-OFFICE_PROFIT/OP	-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("				, CMDT_ROUT.PRS_ESTM_LOD_QTY AS PRS_ESTM_LOD_QTY -- LOAD(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2'" ).append("\n"); 
		query.append("				THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT" ).append("\n"); 
		query.append("				ELSE" ).append("\n"); 
		query.append("				CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_CMPB_AMT  / 2" ).append("\n"); 
		query.append("				END  AS ESTM_RESPB_CM_AMT  -- AS CM_NEW_OFFICE" ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2'" ).append("\n"); 
		query.append("				THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT" ).append("\n"); 
		query.append("				ELSE" ).append("\n"); 
		query.append("				CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_PFIT_CMPB_AMT  / 2" ).append("\n"); 
		query.append("				END  AS ESTM_PFIT_CM_AMT    --  CM_NEW_OP_TRADE" ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2'" ).append("\n"); 
		query.append("				THEN CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT" ).append("\n"); 
		query.append("				ELSE" ).append("\n"); 
		query.append("				CMDT_ROUT.PRS_ESTM_LOD_QTY * CMDT_ROUT.PRS_ESTM_RESPB_OPB_AMT  / 2" ).append("\n"); 
		query.append("				END  AS ESTM_RESPB_OP_AMT    --  CM_NEW_OP_TRADE" ).append("\n"); 
		query.append("		-- CMDT_ROUT.PRS_ESTM_LOD_QTY  값은 무조건  TEU(D2) 기준으로 가지고 있고" ).append("\n"); 
		query.append("		-- AMT 정보는 TEU(D2) , FEU(D4) 에 따라 해당 하는 단위로 값을 가지고 있기 때문에" ).append("\n"); 
		query.append("        -- Load 를 AMT 기준으로 맞추기 위해 아래와 같이 값을 조정한다." ).append("\n"); 
		query.append("			----------------------------------------------------------------------------------" ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,2,1) = '2' OR SUBSTR(CMDT_ROUT.PRS_RAT_UT_CD,1,1) = '2' " ).append("\n"); 
		query.append("						THEN CMDT_ROUT.PRS_ESTM_LOD_QTY  " ).append("\n"); 
		query.append("	       				ELSE	" ).append("\n"); 
		query.append("							 CMDT_ROUT.PRS_ESTM_LOD_QTY    / 2" ).append("\n"); 
		query.append("	       		  END  AS PRS_ESTM_LOD_QTY_FOR_RATE    " ).append("\n"); 
		query.append("			FROM	VW_RFA_MAIN_NEW_SET MN" ).append("\n"); 
		query.append("				, PRI_RP_SCP_RT_CMDT_ROUT CMDT_ROUT" ).append("\n"); 
		query.append("				, PRI_RP_SCP_RT RT" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("				,(" ).append("\n"); 
		query.append("				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD, CMDT_HDR_SEQ, ROUT_SEQ" ).append("\n"); 
		query.append("				       FROM (" ).append("\n"); 
		query.append("						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ" ).append("\n"); 
		query.append("							, DECODE( @[frm_ori_loc_tp]" ).append("\n"); 
		query.append("								, 'C'," ).append("\n"); 
		query.append("								       (" ).append("\n"); 
		query.append("									  SELECT CNT_CD " ).append("\n"); 
		query.append("									  FROM MDM_LOCATION " ).append("\n"); 
		query.append("									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) " ).append("\n"); 
		query.append("								       )" ).append("\n"); 
		query.append("								, 'R', " ).append("\n"); 
		query.append("									(" ).append("\n"); 
		query.append("									    SELECT RGN_CD " ).append("\n"); 
		query.append("									    FROM MDM_LOCATION " ).append("\n"); 
		query.append("									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)" ).append("\n"); 
		query.append("									 )" ).append("\n"); 
		query.append("								, NULL " ).append("\n"); 
		query.append("							)   AS LOC_CD " ).append("\n"); 
		query.append("						FROM VW_RFA_MAIN_NEW_SET MN_SET" ).append("\n"); 
		query.append("							, PRI_RP_SCP_RT_ROUT_PNT A" ).append("\n"); 
		query.append("							, PRI_RP_SCP_GRP_LOC B" ).append("\n"); 
		query.append("							, PRI_RP_SCP_GRP_LOC_DTL C" ).append("\n"); 
		query.append("						WHERE MN_SET.PROP_NO = A.PROP_NO" ).append("\n"); 
		query.append("							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ" ).append("\n"); 
		query.append("							AND MN_SET.SVC_SCP_CD = A.SVC_SCP_CD" ).append("\n"); 
		query.append("							AND A.ORG_DEST_TP_CD = 'O'" ).append("\n"); 
		query.append("							AND A.SRC_INFO_CD <> 'AD'" ).append("\n"); 
		query.append("							AND A.PROP_NO     = B.PROP_NO(+)" ).append("\n"); 
		query.append("							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)" ).append("\n"); 
		query.append("							AND B.PROP_NO     = C.PROP_NO(+)" ).append("\n"); 
		query.append("							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)" ).append("\n"); 
		query.append("							AND C.SRC_INFO_CD(+) <> 'AD'" ).append("\n"); 
		query.append("					)" ).append("\n"); 
		query.append("					WHERE LOC_CD  = @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("				) ORI_LOC" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("				,(" ).append("\n"); 
		query.append("				       SELECT DISTINCT PROP_NO, AMDT_SEQ, SVC_SCP_CD,  CMDT_HDR_SEQ, ROUT_SEQ" ).append("\n"); 
		query.append("				       FROM (" ).append("\n"); 
		query.append("						SELECT A.PROP_NO, A.AMDT_SEQ, A.SVC_SCP_CD, A.CMDT_HDR_SEQ, A.ROUT_SEQ" ).append("\n"); 
		query.append("							, DECODE( @[frm_dest_loc_tp]" ).append("\n"); 
		query.append("								, 'C'," ).append("\n"); 
		query.append("								       (" ).append("\n"); 
		query.append("									  SELECT CNT_CD " ).append("\n"); 
		query.append("									  FROM MDM_LOCATION " ).append("\n"); 
		query.append("									  WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD) " ).append("\n"); 
		query.append("								       )" ).append("\n"); 
		query.append("								, 'R', " ).append("\n"); 
		query.append("									(" ).append("\n"); 
		query.append("									    SELECT RGN_CD " ).append("\n"); 
		query.append("									    FROM MDM_LOCATION " ).append("\n"); 
		query.append("									    WHERE LOC_CD = DECODE(A.ROUT_PNT_LOC_TP_CD, 'G', C.LOC_CD, A.ROUT_PNT_LOC_DEF_CD)" ).append("\n"); 
		query.append("									 )" ).append("\n"); 
		query.append("								, NULL " ).append("\n"); 
		query.append("							)   AS LOC_CD " ).append("\n"); 
		query.append("						FROM VW_RFA_MAIN_NEW_SET MN_SET" ).append("\n"); 
		query.append("							, PRI_RP_SCP_RT_ROUT_PNT A" ).append("\n"); 
		query.append("							, PRI_RP_SCP_GRP_LOC B" ).append("\n"); 
		query.append("							, PRI_RP_SCP_GRP_LOC_DTL C" ).append("\n"); 
		query.append("						WHERE MN_SET.PROP_NO = A.PROP_NO" ).append("\n"); 
		query.append("							AND MN_SET.AMDT_SEQ = A.AMDT_SEQ" ).append("\n"); 
		query.append("							AND MN_SET.SVC_SCP_CD = A.SVC_SCP_CD" ).append("\n"); 
		query.append("							AND A.ORG_DEST_TP_CD = 'D'" ).append("\n"); 
		query.append("							AND A.SRC_INFO_CD <> 'AD'" ).append("\n"); 
		query.append("							AND A.PROP_NO     = B.PROP_NO(+)" ).append("\n"); 
		query.append("							AND A.AMDT_SEQ    = B.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND A.SVC_SCP_CD  = B.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND A.ROUT_PNT_LOC_DEF_CD = B.PRC_GRP_LOC_CD(+)" ).append("\n"); 
		query.append("							AND B.PROP_NO     = C.PROP_NO(+)" ).append("\n"); 
		query.append("							AND B.AMDT_SEQ    = C.AMDT_SEQ(+)" ).append("\n"); 
		query.append("							AND B.SVC_SCP_CD  = C.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("							AND B.GRP_LOC_SEQ = C.GRP_LOC_SEQ(+)" ).append("\n"); 
		query.append("							AND C.SRC_INFO_CD(+) <> 'AD'" ).append("\n"); 
		query.append("					)" ).append("\n"); 
		query.append("					WHERE LOC_CD  = @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("				) DEST_LOC" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( $slane_list.size() != 0 ) " ).append("\n"); 
		query.append("				,(" ).append("\n"); 
		query.append("					SELECT  DISTINCT RT.PROP_NO, RT.AMDT_SEQ, RT.SVC_SCP_CD, RT.CMDT_HDR_SEQ, RT.ROUT_SEQ" ).append("\n"); 
		query.append("					FROM VW_RFA_MAIN_NEW_SET MN_SET" ).append("\n"); 
		query.append("						, PRI_RP_SCP_RT RT" ).append("\n"); 
		query.append("					WHERE MN_SET.PROP_NO = RT.PROP_NO" ).append("\n"); 
		query.append("						AND MN_SET.AMDT_SEQ = RT.AMDT_SEQ" ).append("\n"); 
		query.append("						AND MN_SET.SVC_SCP_CD = RT.SVC_SCP_CD" ).append("\n"); 
		query.append("	#if( $slane_list.size() != 0 ) " ).append("\n"); 
		query.append("		AND RT.VSL_SLAN_CD IN (" ).append("\n"); 
		query.append("		#foreach( ${key} in ${slane_list}) " ).append("\n"); 
		query.append("			#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("				," ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("				'$key'" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("	#end " ).append("\n"); 
		query.append("				) SLANE" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("			WHERE	 MN.PROP_NO = CMDT_ROUT.PROP_NO" ).append("\n"); 
		query.append("				AND MN.AMDT_SEQ = CMDT_ROUT.AMDT_SEQ" ).append("\n"); 
		query.append("				AND MN.SVC_SCP_CD = CMDT_ROUT.SVC_SCP_CD" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = ORI_LOC.PROP_NO" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = ORI_LOC.AMDT_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = ORI_LOC.SVC_SCP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  ORI_LOC.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = ORI_LOC.ROUT_SEQ" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = DEST_LOC.PROP_NO" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = DEST_LOC.AMDT_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = DEST_LOC.SVC_SCP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  DEST_LOC.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = DEST_LOC.ROUT_SEQ" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( $slane_list.size() != 0 ) " ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = SLANE.PROP_NO" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = SLANE.AMDT_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = SLANE.SVC_SCP_CD" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  SLANE.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = SLANE.ROUT_SEQ" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PROP_NO = RT.PROP_NO(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.AMDT_SEQ = RT.AMDT_SEQ(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.SVC_SCP_CD = RT.SVC_SCP_CD(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.CMDT_HDR_SEQ =  RT.CMDT_HDR_SEQ(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.ROUT_SEQ  = RT.ROUT_SEQ(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PRS_RAT_UT_CD = RT.RAT_UT_CD(+)" ).append("\n"); 
		query.append("				AND CMDT_ROUT.PRS_CGO_TP_CD = RT.PRC_CGO_TP_CD(+)" ).append("\n"); 
		query.append("				-- BY CARGO TYPE" ).append("\n"); 
		query.append("				#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("					AND CMDT_ROUT.PRS_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("		GROUP BY PROP_OFC_CD,CUST_CNT_CD,CUST_SEQ, PROP_NO, AMDT_SEQ, CTRT_EFF_DT, CTRT_EXP_DT" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("VW_RFA_PRE_CONDITION AS (" ).append("\n"); 
		query.append("	SELECT  /*+ MATERIALIZE ORDERED USE_HASH(M H D S) */ 'R' AS CTRT_TP_CD, OLD_PROP_NO, OLD_AMDT_SEQ, SVC_SCP_CD, SUBSTR(RFA_NO, 17, 37) AS RFA_NO ,SUBSTR(RFA_NO, 1, 8) AS CTRT_EXP_DT,SUBSTR(RFA_NO, 9, 8) AS CTRT_EFF_DT" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT OLD_PROP_NO, OLD_AMDT_SEQ, S.SVC_SCP_CD, MAX(TO_CHAR(D.CTRT_EXP_DT, 'YYYYMMDD')||TO_CHAR(D.CTRT_EFF_DT, 'YYYYMMDD')||H.RFA_NO) RFA_NO" ).append("\n"); 
		query.append("		FROM (SELECT   /*+ ORDERED */ M.PROP_NO, MAX(M.AMDT_SEQ) AS AMDT_SEQ" ).append("\n"); 
		query.append("			,	NW.PROP_NO AS OLD_PROP_NO, NW.AMDT_SEQ AS OLD_AMDT_SEQ" ).append("\n"); 
		query.append("			FROM  VW_RFA_MAIN_NEW_SET NW,PRI_RP_MN M" ).append("\n"); 
		query.append("			WHERE  M.CTRT_CUST_CNT_CD = NW.CUST_CNT_CD" ).append("\n"); 
		query.append("				AND  M.CTRT_CUST_SEQ    = NW.CUST_SEQ" ).append("\n"); 
		query.append("				AND  M.PROP_STS_CD IN ( 'A' ) /* APPROVED */" ).append("\n"); 
		query.append("				AND  NW.PROP_NO <> M.PROP_NO" ).append("\n"); 
		query.append(" 				AND  ROWNUM >=1" ).append("\n"); 
		query.append("			GROUP BY M.PROP_NO, NW.PROP_NO, NW.AMDT_SEQ     ) M," ).append("\n"); 
		query.append("			PRI_RP_HDR H," ).append("\n"); 
		query.append("			PRI_RP_SCP_DUR D," ).append("\n"); 
		query.append("			PRI_RP_SCP_MN S" ).append("\n"); 
		query.append("		WHERE H.PROP_NO  = M.PROP_NO" ).append("\n"); 
		query.append("			AND M.PROP_NO  = D.PROP_NO" ).append("\n"); 
		query.append("			AND M.AMDT_SEQ = D.AMDT_SEQ" ).append("\n"); 
		query.append("			AND M.PROP_NO  = S.PROP_NO" ).append("\n"); 
		query.append("			AND M.AMDT_SEQ = S.AMDT_SEQ" ).append("\n"); 
		query.append("			AND S.SVC_SCP_CD = D.SVC_SCP_CD" ).append("\n"); 
		query.append("            AND S.SVC_SCP_CD =  @[frm_svc_scp_cd]" ).append("\n"); 
		query.append("            AND H.RFA_NO is not null" ).append("\n"); 
		query.append("		GROUP BY OLD_PROP_NO, OLD_AMDT_SEQ, S.SVC_SCP_CD" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(")," ).append("\n"); 
		query.append("VW_RFA_PREVIOUS AS (" ).append("\n"); 
		query.append("	SELECT		/*+ MATERIALIZE ORDERED */    	VC.OLD_PROP_NO,VC.OLD_AMDT_SEQ" ).append("\n"); 
		query.append("		, MAX(TO_DATE(VC.CTRT_EXP_DT,'YYYYMMDD')- TO_DATE(VC.CTRT_EFF_DT,'YYYYMMDD')) / 7 AS WEEK_PREVIOUS	-- WEEK(PREVIOUS)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD_PREVIOUS            -- Load(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_RESPB_CM_UC_AMT  * SR_CST_DTL.PRS_CRNT_LOD_QTY )   AS COST_PREVIOUS_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_PFIT_CM_UC_AMT  * SR_CST_DTL.PRS_CRNT_LOD_QTY )    AS COST_PREVIOUS_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_RESPB_OPFIT_UC_AMT  * SR_CST_DTL.PRS_CRNT_LOD_QTY ) AS COST_PREVIOUS_OP_OFFICE -- Office Profit/ OP -- Cost(Previous) " ).append("\n"); 
		query.append("		, DECODE(SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY ),0,0, SUM(SR_CST_DTL.PRS_RESPB_CMPB_AMT *  SR_CST_DTL.PRS_CRNT_LOD_QTY      ) / SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ))     AS CMPB_PREVIOUS_OFFICE     -- Office Profit/ CM -- CMPB(Previous)" ).append("\n"); 
		query.append("		, DECODE(SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY ),0,0, SUM(SR_CST_DTL.PRS_PFIT_CMPB_AMT *  SR_CST_DTL.PRS_CRNT_LOD_QTY      ) / SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ))       AS CMPB_PREVIOUS_TRADE      -- Trade Profit/ CM  -- CMPB(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  * SR_CST_DTL.PRS_RESPB_CMPB_AMT) AS CM_PREVIOUS_OFFICE -- Office Profit/ CM -- CM(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY    * SR_CST_DTL.PRS_PFIT_CMPB_AMT) AS CM_PREVIOUS_TRADE   -- Trade Profit/ CM  -- CM(Previous)" ).append("\n"); 
		query.append("		, DECODE(SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY ),0,0, SUM(SR_CST_DTL.PRS_RESPB_OPB_AMT *  SR_CST_DTL.PRS_CRNT_LOD_QTY     ) / SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ))        AS OPB_PREVIOUS             -- Office Profit/ OP -- OPB(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  * SR_CST_DTL.PRS_RESPB_OPB_AMT) AS OP_PREVIOUS         -- OP(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.TEU_FRT_REV   * SR_CST_DTL.PRS_CRNT_LOD_QTY )         AS G_REV_PREVIOUS            -- Gross Revenue(Previous)" ).append("\n"); 
		query.append("	FROM VW_RFA_PRE_CONDITION VC" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY SR_MN" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY_COST_DTL SR_CST_DTL" ).append("\n"); 
		query.append("	WHERE SR_MN.PRS_YRMON = SR_CST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		AND SR_MN.PRS_WK = SR_CST_DTL.PRS_WK" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_TP_CD= VC.CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_NO    = VC.RFA_NO" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_TP_CD= SR_CST_DTL.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_NO   = SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		AND SR_CST_DTL.SVC_SCP_CD =  @[frm_svc_scp_cd]" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_TP_CD = 'R'--S/C OR RFA" ).append("\n"); 
		query.append("		-- BY CARGO TYPE" ).append("\n"); 
		query.append("		#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("			AND SR_CST_DTL.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if( ${frm_ori_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- origin" ).append("\n"); 
		query.append("		AND SR_CST_DTL.ORG_LOC_DEF_CD= @[frm_ori_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( ${frm_dest_rout_cd} != '' )" ).append("\n"); 
		query.append("		-- DEST" ).append("\n"); 
		query.append("		AND SR_CST_DTL.DEST_LOC_TP_CD= @[frm_dest_rout_cd]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if( $slane_list.size() != 0 ) " ).append("\n"); 
		query.append("		-- SLANE" ).append("\n"); 
		query.append("	#if( $slane_list.size() != 0 ) " ).append("\n"); 
		query.append("		AND substr(SR_CST_DTL.RLANE_CD,0,3) IN (" ).append("\n"); 
		query.append("		#foreach( ${key} in ${slane_list}) " ).append("\n"); 
		query.append("			#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("				," ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("				'$key'" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("	#end " ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	GROUP BY VC.OLD_PROP_NO, VC.OLD_AMDT_SEQ" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-----------------------------------------------------" ).append("\n"); 
		query.append("-- 원래 TRI가 있었으나 요구사항 변경에 따라 TRI 부분은 현재 쓰이지 않는다." ).append("\n"); 
		query.append("-- 추후 삭제해야 한다." ).append("\n"); 
		query.append("-- TRI 시작" ).append("\n"); 
		query.append("#if ( (${frm_contract_type_s} == 'S' || ${frm_contract_type_r} == 'R') && ${frm_contract_type_t} == 'T' ) " ).append("\n"); 
		query.append("," ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if (${frm_contract_type_t} == 'T') " ).append("\n"); 
		query.append("VW_TRI_MAIN_NEW_SET AS (" ).append("\n"); 
		query.append("	SELECT	/*+ USE_HASH(MN HDR DUR SCP_MN M_ORG CUST ) */  MN.RESPB_SLS_OFC_CD AS PROP_OFC_CD" ).append("\n"); 
		query.append("		, M_ORG.OFC_ENG_NM  AS PROP_OFC_NM--  AS PROP_OFC_NM -- REQUEST OFFICE" ).append("\n"); 
		query.append("		, MN.CTRT_CUST_CNT_CD AS CUST_CNT_CD" ).append("\n"); 
		query.append("		, MN.CTRT_CUST_SEQ AS CUST_SEQ" ).append("\n"); 
		query.append("		, MN.TAA_PROP_NO" ).append("\n"); 
		query.append("		, MN.AMDT_SEQ" ).append("\n"); 
		query.append("		, MN.EFF_DT AS CTRT_EFF_DT, MN.EXP_DT AS CTRT_EXP_DT" ).append("\n"); 
		query.append("		, (TO_DATE(TO_CHAR(MN.EXP_DT,'YYYYMMDD'),'YYYYMMDD')- TO_DATE(TO_CHAR(MN.EFF_DT,'YYYYMMDD'),'YYYYMMDD')) / 7 AS WEEK_NEW	-- WEEK(NEW)" ).append("\n"); 
		query.append("		, CUST.CUST_LGL_ENG_NM AS CTRT_PTY_NM--PTY.CTRT_PTY_NM --  -- CUSTOMER NAME" ).append("\n"); 
		query.append("		, TO_NUMBER(NULL) AS PROP_MQC_QTY  -- PROP_MQC_QTY								-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("		, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("		, MN.PRC_CTRT_CUST_TP_CD AS CUST_TP_CD" ).append("\n"); 
		query.append("		,'' AS PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("		,MN.RESPB_SREP_CD AS RESPB_SREP_CD" ).append("\n"); 
		query.append("                ,HDR.TAA_NO" ).append("\n"); 
		query.append("	FROM	PRI_TAA_MN MN" ).append("\n"); 
		query.append("		, PRI_TAA_HDR HDR" ).append("\n"); 
		query.append("		, MDM_ORGANIZATION M_ORG" ).append("\n"); 
		query.append("		, MDM_CUSTOMER CUST" ).append("\n"); 
		query.append("	WHERE	MN.RESPB_SLS_OFC_CD = M_ORG.OFC_CD" ).append("\n"); 
		query.append("		AND MN.TAA_PROP_NO   = HDR.TAA_PROP_NO" ).append("\n"); 
		query.append("		AND MN.AMDT_SEQ = 0" ).append("\n"); 
		query.append("		AND CUST.CUST_CNT_CD = MN.CTRT_CUST_CNT_CD" ).append("\n"); 
		query.append("		AND CUST.CUST_SEQ = MN.CTRT_CUST_SEQ" ).append("\n"); 
		query.append("	#if(${frm_customer_type} == 'B')" ).append("\n"); 
		query.append("				AND MN.PRC_CTRT_CUST_TP_CD IN ('I','A','O')" ).append("\n"); 
		query.append("	#elseif(${frm_customer_type} == 'N')" ).append("\n"); 
		query.append("				AND MN.PRC_CTRT_CUST_TP_CD IN ('N')" ).append("\n"); 
		query.append("	#else " ).append("\n"); 
		query.append("			AND MN.PRC_CTRT_CUST_TP_CD IN ('I','A','O','N')" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_prop_ofc_cd} != '')" ).append("\n"); 
		query.append("				AND MN.RESPB_SLS_OFC_CD = @[frm_prop_ofc_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_prop_srep_cd} != '')" ).append("\n"); 
		query.append("				AND MN.RESPB_SREP_CD = @[frm_prop_srep_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_prop_apro_ofc_cd} != '')" ).append("\n"); 
		query.append("				AND 1 = 0" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_ctrt_eff_dt} != '' )" ).append("\n"); 
		query.append("		AND MN.EFF_DT >= TO_DATE(@[frm_ctrt_eff_dt],'YYYY-MM-DD')" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("	#if ( ${frm_ctrt_exp_dt} != '' )" ).append("\n"); 
		query.append("		AND MN.EXP_DT  <= TO_DATE(@[frm_ctrt_exp_dt],'YYYY-MM-DD') " ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if(${frm_svc_scp_cd} != '' )" ).append("\n"); 
		query.append("				AND MN.SVC_SCP_CD = @[frm_svc_scp_cd]" ).append("\n"); 
		query.append("	#end" ).append("\n"); 
		query.append(" " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	#if( $cust_list.size() != 0 ) " ).append("\n"); 
		query.append("		AND (MN.CTRT_CUST_CNT_CD ,MN.CTRT_CUST_SEQ) IN (" ).append("\n"); 
		query.append("		#foreach( ${key} in ${cust_list}) " ).append("\n"); 
		query.append("			#if($velocityCount != 1 ) " ).append("\n"); 
		query.append("				UNION ALL" ).append("\n"); 
		query.append("			#end" ).append("\n"); 
		query.append("			SELECT " ).append("\n"); 
		query.append("					substr('$key',1,2),substr('$key',3)" ).append("\n"); 
		query.append("			FROM DUAL" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("	#end " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(")," ).append("\n"); 
		query.append("VW_TRI_PRE_CONDITION AS (" ).append("\n"); 
		query.append("	SELECT  /*+ USE_HASH(M H D S) */ 'T' AS CTRT_TP_CD, OLD_PROP_NO, OLD_AMDT_SEQ, SVC_SCP_CD, SUBSTR(TAA_NO, 17, 37) AS TAA_NO ,SUBSTR(TAA_NO, 1, 8) AS CTRT_EXP_DT,SUBSTR(TAA_NO, 9, 8) AS CTRT_EFF_DT" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT OLD_PROP_NO, OLD_AMDT_SEQ, S.SVC_SCP_CD, MAX(TO_CHAR(S.EXP_DT, 'YYYYMMDD')||TO_CHAR(S.EFF_DT, 'YYYYMMDD')||H.TAA_NO) TAA_NO" ).append("\n"); 
		query.append("		FROM (SELECT  M.TAA_PROP_NO, MAX(M.AMDT_SEQ) AS AMDT_SEQ" ).append("\n"); 
		query.append("			,	NW.TAA_PROP_NO AS OLD_PROP_NO, NW.AMDT_SEQ AS OLD_AMDT_SEQ" ).append("\n"); 
		query.append("			FROM  PRI_TAA_MN M,  VW_TRI_MAIN_NEW_SET NW" ).append("\n"); 
		query.append("			WHERE  M.CTRT_CUST_CNT_CD = NW.CUST_CNT_CD" ).append("\n"); 
		query.append("				AND  M.CTRT_CUST_SEQ    = NW.CUST_SEQ" ).append("\n"); 
		query.append("				 AND  ROWNUM >=1" ).append("\n"); 
		query.append("			GROUP BY M.TAA_PROP_NO, NW.TAA_PROP_NO, NW.AMDT_SEQ     ) M," ).append("\n"); 
		query.append("			PRI_TAA_HDR H," ).append("\n"); 
		query.append("			PRI_TAA_MN S" ).append("\n"); 
		query.append("		WHERE H.TAA_PROP_NO  = M.TAA_PROP_NO" ).append("\n"); 
		query.append("			AND M.TAA_PROP_NO  = S.TAA_PROP_NO" ).append("\n"); 
		query.append("			AND M.AMDT_SEQ = S.AMDT_SEQ" ).append("\n"); 
		query.append("            AND S.SVC_SCP_CD =  @[frm_svc_scp_cd]" ).append("\n"); 
		query.append("		GROUP BY OLD_PROP_NO, OLD_AMDT_SEQ, S.SVC_SCP_CD" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(")," ).append("\n"); 
		query.append("VW_TRI_PREVIOUS AS (" ).append("\n"); 
		query.append("	SELECT	/*+ USE_HASH(SR_MN SR_CST_DTL VC) */	VC.OLD_PROP_NO,VC.OLD_AMDT_SEQ" ).append("\n"); 
		query.append("		, MAX(TO_DATE(VC.CTRT_EXP_DT,'YYYYMMDD')- TO_DATE(VC.CTRT_EFF_DT,'YYYYMMDD')) / 7 AS WEEK_PREVIOUS	-- WEEK(PREVIOUS)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) )      AS LOAD_PREVIOUS            -- Load(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_RESPB_CM_UC_AMT  * SR_CST_DTL.PRS_CRNT_LOD_QTY )   AS COST_PREVIOUS_CM_OFFICE  -- Office Profit/ CM -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_PFIT_CM_UC_AMT  * SR_CST_DTL.PRS_CRNT_LOD_QTY )    AS COST_PREVIOUS_CM_TRADE   --Trade Profit/ CM   -- Cost(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_RESPB_OPFIT_UC_AMT  * SR_CST_DTL.PRS_CRNT_LOD_QTY ) AS COST_PREVIOUS_OP_OFFICE -- Office Profit/ OP -- Cost(Previous) " ).append("\n"); 
		query.append("		, DECODE(SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY),0,0,SUM(SR_CST_DTL.PRS_RESPB_CMPB_AMT *  SR_CST_DTL.PRS_CRNT_LOD_QTY      ) / SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ))     AS CMPB_PREVIOUS_OFFICE     -- Office Profit/ CM -- CMPB(Previous)" ).append("\n"); 
		query.append("		, DECODE(SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY),0,0,SUM(SR_CST_DTL.PRS_PFIT_CMPB_AMT *  SR_CST_DTL.PRS_CRNT_LOD_QTY      ) / SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ))       AS CMPB_PREVIOUS_TRADE      -- Trade Profit/ CM  -- CMPB(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  * SR_CST_DTL.PRS_RESPB_CMPB_AMT) AS CM_PREVIOUS_OFFICE -- Office Profit/ CM -- CM(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY    * SR_CST_DTL.PRS_PFIT_CMPB_AMT) AS CM_PREVIOUS_TRADE   -- Trade Profit/ CM  -- CM(Previous)" ).append("\n"); 
		query.append("		, DECODE(SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY),0,0,SUM(SR_CST_DTL.PRS_RESPB_OPB_AMT *  SR_CST_DTL.PRS_CRNT_LOD_QTY     ) / SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  / DECODE(@[frm_pfmc_unit],'FEU',2,'TEU',1) ))        AS OPB_PREVIOUS             -- Office Profit/ OP -- OPB(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.PRS_CRNT_LOD_QTY  * SR_CST_DTL.PRS_RESPB_OPB_AMT) AS OP_PREVIOUS         -- OP(Previous)" ).append("\n"); 
		query.append("		, SUM(SR_CST_DTL.TEU_FRT_REV   * SR_CST_DTL.PRS_CRNT_LOD_QTY )         AS G_REV_PREVIOUS            -- Gross Revenue(Previous)" ).append("\n"); 
		query.append("	FROM PRI_PRS_CTRT_SMRY SR_MN" ).append("\n"); 
		query.append("		, PRI_PRS_CTRT_SMRY_COST_DTL SR_CST_DTL" ).append("\n"); 
		query.append("		, VW_TRI_PRE_CONDITION VC" ).append("\n"); 
		query.append("	WHERE SR_MN.PRS_YRMON = SR_CST_DTL.PRS_YRMON" ).append("\n"); 
		query.append("		AND SR_MN.PRS_WK = SR_CST_DTL.PRS_WK" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_TP_CD= VC.CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_NO    = VC.TAA_NO" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_TP_CD= SR_CST_DTL.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_NO   = SR_CST_DTL.PRC_CTRT_NO" ).append("\n"); 
		query.append("		AND VC.SVC_SCP_CD       = SR_CST_DTL.SVC_SCP_CD" ).append("\n"); 
		query.append("		AND SR_MN.PRC_CTRT_TP_CD = 'T'--S/C OR RFA" ).append("\n"); 
		query.append("	GROUP BY VC.OLD_PROP_NO, VC.OLD_AMDT_SEQ" ).append("\n"); 
		query.append(")," ).append("\n"); 
		query.append("VW_TRI_NEW_DATA AS (" ).append("\n"); 
		query.append("	SELECT PROP_OFC_CD" ).append("\n"); 
		query.append("		, PROP_OFC_NM" ).append("\n"); 
		query.append("		, TAA_PROP_NO" ).append("\n"); 
		query.append("		, AMDT_SEQ" ).append("\n"); 
		query.append("		, CUST_CNT_CD" ).append("\n"); 
		query.append("		, CUST_SEQ" ).append("\n"); 
		query.append("		, CTRT_EFF_DT" ).append("\n"); 
		query.append("		, CTRT_EXP_DT" ).append("\n"); 
		query.append("		, WEEK_NEW						-- WEEK(NEW)" ).append("\n"); 
		query.append("		, CTRT_PTY_NM						-- CUSTOMER NAME" ).append("\n"); 
		query.append("		, PROP_MQC_QTY						-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("		, G_REV							-- GROSS REVENUE" ).append("\n"); 
		query.append("		, COST_NEW_CM_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("		, COST_NEW_CM_TRADE					-- COST(NEW)" ).append("\n"); 
		query.append("		, COST_NEW_OP_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("		, LOAD_NEW              -- LOAD(NEW)" ).append("\n"); 
		query.append("		, NEW_RESPB_CM_AMT	-- OFFICE PROPIT/CM" ).append("\n"); 
		query.append("		, NEW_PFIT_CM_AMT	-- TRADE PROPIT/CM" ).append("\n"); 
		query.append("		, NEW_RESPB_OP_AMT	-- OP(NEW)" ).append("\n"); 
		query.append("		, CMPB_NEW_OFFICE	-- OFFICE PROPIT/CMPB" ).append("\n"); 
		query.append("		, CMPB_NEW_TRADE	-- TRADE PROPIT/CMPB" ).append("\n"); 
		query.append("		, OPB_NEW_OFFICE	-- OPB(NEW)" ).append("\n"); 
		query.append("	FROM (" ).append("\n"); 
		query.append("		SELECT" ).append("\n"); 
		query.append("			PROP_OFC_CD" ).append("\n"); 
		query.append("			, MAX(PROP_OFC_NM) AS PROP_OFC_NM -- REQUEST OFFICE" ).append("\n"); 
		query.append("			, TAA_PROP_NO" ).append("\n"); 
		query.append("			, AMDT_SEQ" ).append("\n"); 
		query.append("			, CUST_CNT_CD" ).append("\n"); 
		query.append("			, CUST_SEQ" ).append("\n"); 
		query.append("			, CTRT_EFF_DT, CTRT_EXP_DT" ).append("\n"); 
		query.append("			, MAX(WEEK_NEW) AS WEEK_NEW" ).append("\n"); 
		query.append("			, MAX(CTRT_PTY_NM) AS CTRT_PTY_NM								-- CUSTOMER NAME" ).append("\n"); 
		query.append("			, MAX(PROP_MQC_QTY) AS PROP_MQC_QTY								-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("			, SUM((PROP_FRT_RT_AMT + PRS_SCG_AMT)*PRS_ESTM_LOD_QTY) AS G_REV						-- GROSS REVENUE" ).append("\n"); 
		query.append("			, SUM(PRS_RESPB_CM_UC_AMT * PRS_ESTM_LOD_QTY) AS COST_NEW_CM_OFFICE -- COST-NEW-OFFICE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("			, SUM(PRS_PFIT_CM_UC_AMT * PRS_ESTM_LOD_QTY) AS COST_NEW_CM_TRADE	-- COST-NEW-TRADE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("			, SUM(PRS_RESPB_OPFIT_UC_AMT * PRS_ESTM_LOD_QTY) AS COST_NEW_OP_OFFICE		-- COST-NEW-OFFICE_PROFIT/OP	-- COST(NEW)" ).append("\n"); 
		query.append("			, SUM(PRS_ESTM_LOD_QTY) AS LOAD_NEW-- LOAD(NEW)" ).append("\n"); 
		query.append("			, SUM(ESTM_RESPB_CM_AMT) AS NEW_RESPB_CM_AMT	   -- Office Profit -- CM(NEW)" ).append("\n"); 
		query.append("			, SUM(ESTM_PFIT_CM_AMT) AS NEW_PFIT_CM_AMT	   -- Trade Profit -- CM(NEW)" ).append("\n"); 
		query.append("			, SUM(ESTM_RESPB_OP_AMT) AS NEW_RESPB_OP_AMT	    --OP(NEW)" ).append("\n"); 
		query.append("			, DECODE(SUM(PRS_ESTM_LOD_QTY),0,0,SUM(ESTM_RESPB_CM_AMT) / SUM(PRS_ESTM_LOD_QTY)) AS CMPB_NEW_OFFICE	-- OFFICE PROPIT/CMPB" ).append("\n"); 
		query.append("			, DECODE(SUM(PRS_ESTM_LOD_QTY),0,0,SUM(ESTM_PFIT_CM_AMT) / SUM(PRS_ESTM_LOD_QTY)) AS CMPB_NEW_TRADE	-- TRADE PROPIT/CM" ).append("\n"); 
		query.append("			, DECODE(SUM(PRS_ESTM_LOD_QTY),0,0,SUM(ESTM_RESPB_OP_AMT) / SUM(PRS_ESTM_LOD_QTY)) AS OPB_NEW_OFFICE	 --OPB(NEW)" ).append("\n"); 
		query.append("		FROM (" ).append("\n"); 
		query.append("			SELECT	MN.PROP_OFC_CD AS PROP_OFC_CD" ).append("\n"); 
		query.append("				, MN.PROP_OFC_NM --  AS PROP_OFC_NM -- REQUEST OFFICE" ).append("\n"); 
		query.append("				, MN.CUST_CNT_CD" ).append("\n"); 
		query.append("				, MN.CUST_SEQ" ).append("\n"); 
		query.append("				, MN.TAA_PROP_NO" ).append("\n"); 
		query.append("				, MN.AMDT_SEQ" ).append("\n"); 
		query.append("				, MN.CTRT_EFF_DT AS CTRT_EFF_DT, MN.CTRT_EXP_DT AS CTRT_EXP_DT" ).append("\n"); 
		query.append("				, MN.CTRT_PTY_NM -- CTRT_PTY_NM								-- CUSTOMER NAME" ).append("\n"); 
		query.append("				, MN.PROP_MQC_QTY  -- PROP_MQC_QTY								-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("				, MN.WEEK_NEW" ).append("\n"); 
		query.append("				, RT.PROP_FRT_RT_AMT" ).append("\n"); 
		query.append("				, RT.PRS_SCG_AMT" ).append("\n"); 
		query.append("				, RT.PRS_RESPB_CM_UC_AMT  -- COST_NEW_CM_OFFICE -- COST-NEW-OFFICE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("				, RT.PRS_PFIT_CM_UC_AMT  -- COST_NEW_CM_TRADE	-- COST-NEW-TRADE_PROFIT/CM		-- COST(NEW)" ).append("\n"); 
		query.append("				, RT.PRS_RESPB_OPFIT_UC_AMT  -- COST_NEW_OP_OFFICE		-- COST-NEW-OFFICE_PROFIT/OP	-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                " ).append("\n"); 
		query.append("				, (P_DT.LOAD_PREVIOUS / P_DT.WEEK_PREVIOUS * MN.WEEK_NEW)  AS PRS_ESTM_LOD_QTY -- LOAD(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(RT.RAT_UT_CD,2,1) = '2' OR SUBSTR(RT.RAT_UT_CD,1,1) = '2'" ).append("\n"); 
		query.append("				THEN (P_DT.LOAD_PREVIOUS / P_DT.WEEK_PREVIOUS * MN.WEEK_NEW) * RT.PRS_RESPB_CMPB_AMT" ).append("\n"); 
		query.append("				ELSE" ).append("\n"); 
		query.append("				(P_DT.LOAD_PREVIOUS / P_DT.WEEK_PREVIOUS * MN.WEEK_NEW) * RT.PRS_RESPB_CMPB_AMT  / 2" ).append("\n"); 
		query.append("				END  AS ESTM_RESPB_CM_AMT  -- AS CM_NEW_OFFICE" ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(RT.RAT_UT_CD,2,1) = '2' OR SUBSTR(RT.RAT_UT_CD,1,1) = '2'" ).append("\n"); 
		query.append("				THEN (P_DT.LOAD_PREVIOUS / P_DT.WEEK_PREVIOUS * MN.WEEK_NEW) * RT.PRS_PFIT_CMPB_AMT" ).append("\n"); 
		query.append("				ELSE" ).append("\n"); 
		query.append("				(P_DT.LOAD_PREVIOUS / P_DT.WEEK_PREVIOUS * MN.WEEK_NEW) * RT.PRS_PFIT_CMPB_AMT  / 2" ).append("\n"); 
		query.append("				END  AS ESTM_PFIT_CM_AMT    --  CM_NEW_OP_TRADE" ).append("\n"); 
		query.append("				, CASE WHEN SUBSTR(RT.RAT_UT_CD,2,1) = '2' OR SUBSTR(RT.RAT_UT_CD,1,1) = '2'" ).append("\n"); 
		query.append("				THEN (P_DT.LOAD_PREVIOUS / P_DT.WEEK_PREVIOUS * MN.WEEK_NEW) * RT.PRS_RESPB_OPB_AMT" ).append("\n"); 
		query.append("				ELSE" ).append("\n"); 
		query.append("				(P_DT.LOAD_PREVIOUS / P_DT.WEEK_PREVIOUS * MN.WEEK_NEW) * RT.PRS_RESPB_OPB_AMT  / 2" ).append("\n"); 
		query.append("				END  AS ESTM_RESPB_OP_AMT    --  CM_NEW_OP_TRADE" ).append("\n"); 
		query.append("			FROM	VW_TRI_MAIN_NEW_SET MN" ).append("\n"); 
		query.append("                                , PRI_TAA_TRI_LIST LIST" ).append("\n"); 
		query.append("				, PRI_TRI_RT RT" ).append("\n"); 
		query.append("                                , VW_TRI_PREVIOUS P_DT" ).append("\n"); 
		query.append("			WHERE	MN.TAA_PROP_NO = LIST.TAA_PROP_NO" ).append("\n"); 
		query.append("				AND MN.AMDT_SEQ = LIST.AMDT_SEQ" ).append("\n"); 
		query.append("                                AND RT.TRI_PROP_NO = LIST.TRI_PROP_NO" ).append("\n"); 
		query.append("                                AND MN.TAA_PROP_NO = P_DT.OLD_PROP_NO(+)" ).append("\n"); 
		query.append("                                AND MN.AMDT_SEQ = P_DT.OLD_AMDT_SEQ(+)" ).append("\n"); 
		query.append("				-- BY CARGO TYPE" ).append("\n"); 
		query.append("				#if (${crg_tp_str} != '' )" ).append("\n"); 
		query.append("					AND RT.PRC_CGO_TP_CD IN ( ${crg_tp_str} )" ).append("\n"); 
		query.append("				#end" ).append("\n"); 
		query.append("		)" ).append("\n"); 
		query.append("		GROUP BY PROP_OFC_CD,CUST_CNT_CD,CUST_SEQ, TAA_PROP_NO, AMDT_SEQ, CTRT_EFF_DT, CTRT_EXP_DT" ).append("\n"); 
		query.append("	)" ).append("\n"); 
		query.append(") " ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("-- TRI 종료" ).append("\n"); 
		query.append("----------------------------------------------------" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if (${frm_contract_type_s} == 'S') " ).append("\n"); 
		query.append("SELECT " ).append("\n"); 
		query.append("	round(N.CMPB_NEW_OFFICE,2) as CMPB_NEW_OFFICE					-- OFFICE PROPIT/CM " ).append("\n"); 
		query.append("	, round(N.CMPB_NEW_TRADE,2) as 	CMPB_NEW_TRADE			-- TRADE PROPIT/CM " ).append("\n"); 
		query.append("	,MN.PROP_OFC_CD" ).append("\n"); 
		query.append("	, MN.PROP_OFC_NM" ).append("\n"); 
		query.append("	, MN.PROP_NO" ).append("\n"); 
		query.append("	, MN.AMDT_SEQ" ).append("\n"); 
		query.append("	, MN.CUST_CNT_CD" ).append("\n"); 
		query.append("	, MN.CUST_SEQ" ).append("\n"); 
		query.append("	, MN.CUST_CNT_CD || TO_CHAR(MN.CUST_SEQ,'FM000000') || ' - ' || MN.CTRT_PTY_NM  AS CUST_NM " ).append("\n"); 
		query.append("	, TO_CHAR(MN.CTRT_EFF_DT,'YYYY-MM-DD') AS CTRT_EFF_DT" ).append("\n"); 
		query.append("	, TO_CHAR(MN.CTRT_EXP_DT,'YYYY-MM-DD') AS CTRT_EXP_DT" ).append("\n"); 
		query.append("	, N.WEEK_NEW						-- WEEK(NEW)" ).append("\n"); 
		query.append("	, MN.CTRT_PTY_NM						-- CUSTOMER NAME" ).append("\n"); 
		query.append("	, MN.PROP_MQC_QTY					-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("	, N.G_REV						-- GROSS REVENUE" ).append("\n"); 
		query.append("	, N.COST_NEW_CM_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("	, N.COST_NEW_CM_TRADE					-- COST(NEW)" ).append("\n"); 
		query.append("	, N.COST_NEW_OP_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	, N.OPB_NEW_OFFICE  as OPB_NEW     -- OPB(NEW)" ).append("\n"); 
		query.append("	, N.LOAD_NEW						-- LOAD(NEW)" ).append("\n"); 
		query.append("	, N.NEW_RESPB_CM_AMT AS  CM_NEW_OFFICE" ).append("\n"); 
		query.append("	, N.NEW_PFIT_CM_AMT AS CM_NEW_TRADE		" ).append("\n"); 
		query.append("	, N.NEW_RESPB_OP_AMT AS OP_NEW" ).append("\n"); 
		query.append("	, P.LOAD_PREVIOUS					-- Load(Previous)               " ).append("\n"); 
		query.append("	, P.COST_PREVIOUS_CM_OFFICE	-- Office Profit/ CM	-- Cost(Previous)               " ).append("\n"); 
		query.append("	, P.COST_PREVIOUS_CM_TRADE	-- Trade Profit/ CM	-- Cost(Previous)               " ).append("\n"); 
		query.append("	, P.COST_PREVIOUS_OP_OFFICE	-- Office Profit/ OP	-- Cost(Previous)               " ).append("\n"); 
		query.append("	, P.CMPB_PREVIOUS_OFFICE	-- Office Profit/ CM	-- CMPB(Previous)               " ).append("\n"); 
		query.append("	, P.CMPB_PREVIOUS_TRADE		-- Trade Profit/ CM 	-- CMPB(Previous)               " ).append("\n"); 
		query.append("	, P.CM_PREVIOUS_OFFICE		-- Office Profit/ CM	-- CM(Previous)                 " ).append("\n"); 
		query.append("	, P.CM_PREVIOUS_TRADE		-- Trade Profit/ CM	-- CM(Previous)                 " ).append("\n"); 
		query.append("	, P.OPB_PREVIOUS		-- Office Profit/ OP  	-- OPB(Previous)                " ).append("\n"); 
		query.append("	, P.OP_PREVIOUS						-- OP(Previous)                 " ).append("\n"); 
		query.append("	, P.G_REV_PREVIOUS					-- Gross Revenue(Previous)      " ).append("\n"); 
		query.append("	, P.WEEK_PREVIOUS					-- WEEK(Previous)       " ).append("\n"); 
		query.append("	, (N.LOAD_NEW		- P.LOAD_PREVIOUS		) / DECODE(P.LOAD_PREVIOUS, 0,		DECODE(N.LOAD_NEW,0,1,N.LOAD_NEW)			, ABS(P.LOAD_PREVIOUS)) * 100 AS LOAD_DIFF -- NEW/PREIOUS * 100 (%)" ).append("\n"); 
		query.append("	, (N.G_REV		- P.G_REV_PREVIOUS		) / DECODE(P.G_REV_PREVIOUS, 0,		DECODE(N.G_REV,0,1,N.G_REV)				, ABS(P.G_REV_PREVIOUS)) * 100 AS G_REV_DIFF -- GROSS REVENUE -DIFF(%)" ).append("\n"); 
		query.append("	, (N.COST_NEW_CM_OFFICE	- P.COST_PREVIOUS_CM_OFFICE	) / DECODE(P.COST_PREVIOUS_CM_OFFICE, 0,DECODE(N.COST_NEW_CM_OFFICE,0,1,N.COST_NEW_CM_OFFICE)	, ABS(P.COST_PREVIOUS_CM_OFFICE)) * 100 AS COST_DIFF_CM_OFFICE -- COST - DIFF(%)" ).append("\n"); 
		query.append("	, (N.COST_NEW_CM_TRADE	- P.COST_PREVIOUS_CM_TRADE	) / DECODE(P.COST_PREVIOUS_CM_TRADE, 0, DECODE(N.COST_NEW_CM_TRADE,0,1,N.COST_NEW_CM_TRADE)	, ABS(P.COST_PREVIOUS_CM_TRADE)) * 100 AS COST_DIFF_CM_TRADE -- COST - DIFF(%)" ).append("\n"); 
		query.append("	, (N.COST_NEW_OP_OFFICE - P.COST_PREVIOUS_OP_OFFICE	) / DECODE(P.COST_PREVIOUS_OP_OFFICE, 0,DECODE(N.COST_NEW_OP_OFFICE,0,1,N.COST_NEW_OP_OFFICE)	, ABS(P.COST_PREVIOUS_OP_OFFICE)) * 100 AS COST_DIFF_OP_OFFICE -- COST - DIFF(%)" ).append("\n"); 
		query.append("	, (N.WEEK_NEW		- P.WEEK_PREVIOUS		) / DECODE(P.WEEK_PREVIOUS, 0,		DECODE(N.WEEK_NEW,0,1,N.WEEK_NEW)			, ABS(P.WEEK_PREVIOUS)) * 100 AS WEEK_DIFF" ).append("\n"); 
		query.append("	, (N.CMPB_NEW_OFFICE	- P.CMPB_PREVIOUS_OFFICE	) / DECODE(P.CMPB_PREVIOUS_OFFICE, 0,	DECODE(N.CMPB_NEW_OFFICE,0,1,N.CMPB_NEW_OFFICE)		, ABS(P.CMPB_PREVIOUS_OFFICE)) * 100 AS CMPB_DIFF_OFFICE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.CMPB_NEW_TRADE	- P.CMPB_PREVIOUS_TRADE		) / DECODE(P.CMPB_PREVIOUS_TRADE, 0,	DECODE(N.CMPB_NEW_TRADE,0,1,N.CMPB_NEW_TRADE)		, ABS(P.CMPB_PREVIOUS_TRADE)) * 100 AS CMPB_DIFF_TRADE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.NEW_RESPB_CM_AMT	- P.CM_PREVIOUS_OFFICE		) / DECODE(P.CM_PREVIOUS_OFFICE, 0,	DECODE(N.NEW_RESPB_CM_AMT,0,1,N.NEW_RESPB_CM_AMT)	, ABS(P.CM_PREVIOUS_OFFICE)) * 100 AS CM_DIFF_OFFICE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.NEW_PFIT_CM_AMT	- P.CM_PREVIOUS_TRADE		) / DECODE(P.CM_PREVIOUS_TRADE, 0,	DECODE(N.NEW_PFIT_CM_AMT,0,1,N.NEW_PFIT_CM_AMT)		, ABS(P.CM_PREVIOUS_TRADE)) * 100 AS CM_DIFF_TRADE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.NEW_RESPB_OP_AMT	- P.OP_PREVIOUS			) / DECODE(P.OP_PREVIOUS, 0,		DECODE(N.NEW_RESPB_OP_AMT,0,1,N.NEW_RESPB_OP_AMT)	, ABS(P.OP_PREVIOUS)) * 100 AS OP_DIFF  -- OP DIFF(%)" ).append("\n"); 
		query.append("	, (N.OPB_NEW_OFFICE	- P.OPB_PREVIOUS		) / DECODE(P.OPB_PREVIOUS, 0,	DECODE(N.OPB_NEW_OFFICE,0,1,N.OPB_NEW_OFFICE)		, ABS(P.OPB_PREVIOUS)) * 100 AS OPB_DIFF" ).append("\n"); 
		query.append("	, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("	, (" ).append("\n"); 
		query.append("		SELECT INTG_CD_VAL_DP_DESC " ).append("\n"); 
		query.append("		FROM COM_INTG_CD_DTL  " ).append("\n"); 
		query.append("		WHERE INTG_CD_ID = 'CD01714'" ).append("\n"); 
		query.append("			AND INTG_CD_VAL_CTNT = MN.CUST_TP_CD" ).append("\n"); 
		query.append("	  ) AS CUST_TP_CD " ).append("\n"); 
		query.append("	, MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("	, MN.RESPB_SREP_CD" ).append("\n"); 
		query.append("	, 'S' AS DATA_TP_CD" ).append("\n"); 
		query.append("	, 'SC' AS CONTRACT_NM" ).append("\n"); 
		query.append("FROM	VW_MAIN_NEW_SET MN" ).append("\n"); 
		query.append("	,VW_NEW_DATA N" ).append("\n"); 
		query.append("	, VW_PREVIOUS P" ).append("\n"); 
		query.append("WHERE MN.PROP_NO = N.PROP_NO(+)" ).append("\n"); 
		query.append("	AND   MN.AMDT_SEQ = N.AMDT_SEQ(+)" ).append("\n"); 
		query.append("	AND   MN.PROP_NO = P.OLD_PROP_NO(+)" ).append("\n"); 
		query.append("	AND   MN.AMDT_SEQ = P.OLD_AMDT_SEQ(+)" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if (${frm_contract_type_s} == 'S' && ${frm_contract_type_r} == 'R') " ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if (${frm_contract_type_r} == 'R') " ).append("\n"); 
		query.append("SELECT" ).append("\n"); 
		query.append("	round(N.CMPB_NEW_OFFICE,2) as CMPB_NEW_OFFICE					-- OFFICE PROPIT/CM" ).append("\n"); 
		query.append("	, round(N.CMPB_NEW_TRADE,2) as 	CMPB_NEW_TRADE			-- TRADE PROPIT/CM" ).append("\n"); 
		query.append("	,MN.PROP_OFC_CD" ).append("\n"); 
		query.append("	, MN.PROP_OFC_NM" ).append("\n"); 
		query.append("	, MN.PROP_NO" ).append("\n"); 
		query.append("	, MN.AMDT_SEQ" ).append("\n"); 
		query.append("	, MN.CUST_CNT_CD" ).append("\n"); 
		query.append("	, MN.CUST_SEQ" ).append("\n"); 
		query.append("	, MN.CUST_CNT_CD || TO_CHAR(MN.CUST_SEQ,'FM000000') || ' - ' || MN.CTRT_PTY_NM  AS CUST_NM" ).append("\n"); 
		query.append("	, TO_CHAR(MN.CTRT_EFF_DT,'YYYY-MM-DD') AS CTRT_EFF_DT" ).append("\n"); 
		query.append("	, TO_CHAR(MN.CTRT_EXP_DT,'YYYY-MM-DD') AS CTRT_EXP_DT" ).append("\n"); 
		query.append("	, N.WEEK_NEW						-- WEEK(NEW)" ).append("\n"); 
		query.append("	, MN.CTRT_PTY_NM						-- CUSTOMER NAME" ).append("\n"); 
		query.append("	, MN.PROP_MQC_QTY					-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("	, N.G_REV						-- GROSS REVENUE" ).append("\n"); 
		query.append("	, N.COST_NEW_CM_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("	, N.COST_NEW_CM_TRADE					-- COST(NEW)" ).append("\n"); 
		query.append("	, N.COST_NEW_OP_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	, N.OPB_NEW_OFFICE  as OPB_NEW     -- OPB(NEW)" ).append("\n"); 
		query.append("	, N.LOAD_NEW						-- LOAD(NEW)" ).append("\n"); 
		query.append("	, N.NEW_RESPB_CM_AMT AS  CM_NEW_OFFICE" ).append("\n"); 
		query.append("	, N.NEW_PFIT_CM_AMT AS CM_NEW_TRADE" ).append("\n"); 
		query.append("	, N.NEW_RESPB_OP_AMT AS OP_NEW" ).append("\n"); 
		query.append("	, P.LOAD_PREVIOUS					-- Load(Previous)" ).append("\n"); 
		query.append("	, P.COST_PREVIOUS_CM_OFFICE	-- Office Profit/ CM	-- Cost(Previous)" ).append("\n"); 
		query.append("	, P.COST_PREVIOUS_CM_TRADE	-- Trade Profit/ CM	-- Cost(Previous)" ).append("\n"); 
		query.append("	, P.COST_PREVIOUS_OP_OFFICE	-- Office Profit/ OP	-- Cost(Previous)" ).append("\n"); 
		query.append("	, P.CMPB_PREVIOUS_OFFICE	-- Office Profit/ CM	-- CMPB(Previous)" ).append("\n"); 
		query.append("	, P.CMPB_PREVIOUS_TRADE		-- Trade Profit/ CM 	-- CMPB(Previous)" ).append("\n"); 
		query.append("	, P.CM_PREVIOUS_OFFICE		-- Office Profit/ CM	-- CM(Previous)" ).append("\n"); 
		query.append("	, P.CM_PREVIOUS_TRADE		-- Trade Profit/ CM	-- CM(Previous)" ).append("\n"); 
		query.append("	, P.OPB_PREVIOUS		-- Office Profit/ OP  	-- OPB(Previous)" ).append("\n"); 
		query.append("	, P.OP_PREVIOUS						-- OP(Previous)" ).append("\n"); 
		query.append("	, P.G_REV_PREVIOUS					-- Gross Revenue(Previous)" ).append("\n"); 
		query.append("	, P.WEEK_PREVIOUS					-- WEEK(Previous)" ).append("\n"); 
		query.append("	, (N.LOAD_NEW		- P.LOAD_PREVIOUS		) / DECODE(P.LOAD_PREVIOUS, 0,		DECODE(N.LOAD_NEW,0,1,N.LOAD_NEW)			, ABS(P.LOAD_PREVIOUS)) * 100 AS LOAD_DIFF -- NEW/PREIOUS * 100 (%)" ).append("\n"); 
		query.append("	, (N.G_REV		- P.G_REV_PREVIOUS		) / DECODE(P.G_REV_PREVIOUS, 0,		DECODE(N.G_REV,0,1,N.G_REV)				, ABS(P.G_REV_PREVIOUS)) * 100 AS G_REV_DIFF -- GROSS REVENUE -DIFF(%)" ).append("\n"); 
		query.append("	, (N.COST_NEW_CM_OFFICE	- P.COST_PREVIOUS_CM_OFFICE	) / DECODE(P.COST_PREVIOUS_CM_OFFICE, 0,DECODE(N.COST_NEW_CM_OFFICE,0,1,N.COST_NEW_CM_OFFICE)	, ABS(P.COST_PREVIOUS_CM_OFFICE)) * 100 AS COST_DIFF_CM_OFFICE -- COST - DIFF(%)" ).append("\n"); 
		query.append("	, (N.COST_NEW_CM_TRADE	- P.COST_PREVIOUS_CM_TRADE	) / DECODE(P.COST_PREVIOUS_CM_TRADE, 0, DECODE(N.COST_NEW_CM_TRADE,0,1,N.COST_NEW_CM_TRADE)	, ABS(P.COST_PREVIOUS_CM_TRADE)) * 100 AS COST_DIFF_CM_TRADE -- COST - DIFF(%)" ).append("\n"); 
		query.append("	, (N.COST_NEW_OP_OFFICE - P.COST_PREVIOUS_OP_OFFICE	) / DECODE(P.COST_PREVIOUS_OP_OFFICE, 0,DECODE(N.COST_NEW_OP_OFFICE,0,1,N.COST_NEW_OP_OFFICE)	, ABS(P.COST_PREVIOUS_OP_OFFICE)) * 100 AS COST_DIFF_OP_OFFICE -- COST - DIFF(%)" ).append("\n"); 
		query.append("	, (N.WEEK_NEW		- P.WEEK_PREVIOUS		) / DECODE(P.WEEK_PREVIOUS, 0,		DECODE(N.WEEK_NEW,0,1,N.WEEK_NEW)			, ABS(P.WEEK_PREVIOUS)) * 100 AS WEEK_DIFF" ).append("\n"); 
		query.append("	, (N.CMPB_NEW_OFFICE	- P.CMPB_PREVIOUS_OFFICE	) / DECODE(P.CMPB_PREVIOUS_OFFICE, 0,	DECODE(N.CMPB_NEW_OFFICE,0,1,N.CMPB_NEW_OFFICE)		, ABS(P.CMPB_PREVIOUS_OFFICE)) * 100 AS CMPB_DIFF_OFFICE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.CMPB_NEW_TRADE	- P.CMPB_PREVIOUS_TRADE		) / DECODE(P.CMPB_PREVIOUS_TRADE, 0,	DECODE(N.CMPB_NEW_TRADE,0,1,N.CMPB_NEW_TRADE)		, ABS(P.CMPB_PREVIOUS_TRADE)) * 100 AS CMPB_DIFF_TRADE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.NEW_RESPB_CM_AMT	- P.CM_PREVIOUS_OFFICE		) / DECODE(P.CM_PREVIOUS_OFFICE, 0,	DECODE(N.NEW_RESPB_CM_AMT,0,1,N.NEW_RESPB_CM_AMT)	, ABS(P.CM_PREVIOUS_OFFICE)) * 100 AS CM_DIFF_OFFICE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.NEW_PFIT_CM_AMT	- P.CM_PREVIOUS_TRADE		) / DECODE(P.CM_PREVIOUS_TRADE, 0,	DECODE(N.NEW_PFIT_CM_AMT,0,1,N.NEW_PFIT_CM_AMT)		, ABS(P.CM_PREVIOUS_TRADE)) * 100 AS CM_DIFF_TRADE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.NEW_RESPB_OP_AMT	- P.OP_PREVIOUS			) / DECODE(P.OP_PREVIOUS, 0,		DECODE(N.NEW_RESPB_OP_AMT,0,1,N.NEW_RESPB_OP_AMT)	, ABS(P.OP_PREVIOUS)) * 100 AS OP_DIFF  -- OP DIFF(%)" ).append("\n"); 
		query.append("	, (N.OPB_NEW_OFFICE	- P.OPB_PREVIOUS		) / DECODE(P.OPB_PREVIOUS, 0,	DECODE(N.OPB_NEW_OFFICE,0,1,N.OPB_NEW_OFFICE)		, ABS(P.OPB_PREVIOUS)) * 100 AS OPB_DIFF" ).append("\n"); 
		query.append("	, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("	, (" ).append("\n"); 
		query.append("		SELECT INTG_CD_VAL_DP_DESC" ).append("\n"); 
		query.append("		FROM COM_INTG_CD_DTL" ).append("\n"); 
		query.append("		WHERE INTG_CD_ID = 'CD01714'" ).append("\n"); 
		query.append("		AND INTG_CD_VAL_CTNT = MN.CUST_TP_CD" ).append("\n"); 
		query.append("	) AS CUST_TP_CD" ).append("\n"); 
		query.append("	, MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("	, MN.RESPB_SREP_CD" ).append("\n"); 
		query.append("	, 'R' AS DATA_TP_CD" ).append("\n"); 
		query.append("	, 'RFA' AS CONTRACT_NM" ).append("\n"); 
		query.append("FROM	VW_RFA_MAIN_NEW_SET MN" ).append("\n"); 
		query.append("	,VW_RFA_NEW_DATA N" ).append("\n"); 
		query.append("	, VW_RFA_PREVIOUS P" ).append("\n"); 
		query.append("WHERE MN.PROP_NO = N.PROP_NO(+)" ).append("\n"); 
		query.append("	AND   MN.AMDT_SEQ = N.AMDT_SEQ(+)" ).append("\n"); 
		query.append("	AND   MN.PROP_NO = P.OLD_PROP_NO(+)" ).append("\n"); 
		query.append("	AND   MN.AMDT_SEQ = P.OLD_AMDT_SEQ(+)" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if ( (${frm_contract_type_s} == 'S' && ${frm_contract_type_t} == 'T') || (${frm_contract_type_r} == 'R' && ${frm_contract_type_t} == 'T')) " ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if (${frm_contract_type_t} == 'T') " ).append("\n"); 
		query.append("SELECT" ).append("\n"); 
		query.append("	round(N.CMPB_NEW_OFFICE,2) as CMPB_NEW_OFFICE					-- OFFICE PROPIT/CM" ).append("\n"); 
		query.append("	, round(N.CMPB_NEW_TRADE,2) as 	CMPB_NEW_TRADE			-- TRADE PROPIT/CM" ).append("\n"); 
		query.append("	,MN.PROP_OFC_CD" ).append("\n"); 
		query.append("	, MN.PROP_OFC_NM" ).append("\n"); 
		query.append("	, MN.TAA_NO AS PROP_NO" ).append("\n"); 
		query.append("	, MN.AMDT_SEQ" ).append("\n"); 
		query.append("	, MN.CUST_CNT_CD" ).append("\n"); 
		query.append("	, MN.CUST_SEQ" ).append("\n"); 
		query.append("	, MN.CUST_CNT_CD || TO_CHAR(MN.CUST_SEQ,'FM000000') || ' - ' || MN.CTRT_PTY_NM  AS CUST_NM" ).append("\n"); 
		query.append("	, TO_CHAR(MN.CTRT_EFF_DT,'YYYY-MM-DD') AS CTRT_EFF_DT" ).append("\n"); 
		query.append("	, TO_CHAR(MN.CTRT_EXP_DT,'YYYY-MM-DD') AS CTRT_EXP_DT" ).append("\n"); 
		query.append("	, N.WEEK_NEW						-- WEEK(NEW)" ).append("\n"); 
		query.append("	, MN.CTRT_PTY_NM						-- CUSTOMER NAME" ).append("\n"); 
		query.append("	, MN.PROP_MQC_QTY					-- MQC( TARGET VVD )" ).append("\n"); 
		query.append("	, N.G_REV						-- GROSS REVENUE" ).append("\n"); 
		query.append("	, N.COST_NEW_CM_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("	, N.COST_NEW_CM_TRADE					-- COST(NEW)" ).append("\n"); 
		query.append("	, N.COST_NEW_OP_OFFICE					-- COST(NEW)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	, N.OPB_NEW_OFFICE  as OPB_NEW     -- OPB(NEW)" ).append("\n"); 
		query.append("	, N.LOAD_NEW						-- LOAD(NEW)" ).append("\n"); 
		query.append("	, N.NEW_RESPB_CM_AMT AS  CM_NEW_OFFICE" ).append("\n"); 
		query.append("	, N.NEW_PFIT_CM_AMT AS CM_NEW_TRADE" ).append("\n"); 
		query.append("	, N.NEW_RESPB_OP_AMT AS OP_NEW" ).append("\n"); 
		query.append("	, P.LOAD_PREVIOUS					-- Load(Previous)" ).append("\n"); 
		query.append("	, P.COST_PREVIOUS_CM_OFFICE	-- Office Profit/ CM	-- Cost(Previous)" ).append("\n"); 
		query.append("	, P.COST_PREVIOUS_CM_TRADE	-- Trade Profit/ CM	-- Cost(Previous)" ).append("\n"); 
		query.append("	, P.COST_PREVIOUS_OP_OFFICE	-- Office Profit/ OP	-- Cost(Previous)" ).append("\n"); 
		query.append("	, P.CMPB_PREVIOUS_OFFICE	-- Office Profit/ CM	-- CMPB(Previous)" ).append("\n"); 
		query.append("	, P.CMPB_PREVIOUS_TRADE		-- Trade Profit/ CM 	-- CMPB(Previous)" ).append("\n"); 
		query.append("	, P.CM_PREVIOUS_OFFICE		-- Office Profit/ CM	-- CM(Previous)" ).append("\n"); 
		query.append("	, P.CM_PREVIOUS_TRADE		-- Trade Profit/ CM	-- CM(Previous)" ).append("\n"); 
		query.append("	, P.OPB_PREVIOUS		-- Office Profit/ OP  	-- OPB(Previous)" ).append("\n"); 
		query.append("	, P.OP_PREVIOUS						-- OP(Previous)" ).append("\n"); 
		query.append("	, P.G_REV_PREVIOUS					-- Gross Revenue(Previous)" ).append("\n"); 
		query.append("	, P.WEEK_PREVIOUS					-- WEEK(Previous)" ).append("\n"); 
		query.append("	, (N.LOAD_NEW		- P.LOAD_PREVIOUS		) / DECODE(P.LOAD_PREVIOUS, 0,		DECODE(N.LOAD_NEW,0,1,N.LOAD_NEW)			, ABS(P.LOAD_PREVIOUS)) * 100 AS LOAD_DIFF -- NEW/PREIOUS * 100 (%)" ).append("\n"); 
		query.append("	, (N.G_REV		- P.G_REV_PREVIOUS		) / DECODE(P.G_REV_PREVIOUS, 0,		DECODE(N.G_REV,0,1,N.G_REV)				, ABS(P.G_REV_PREVIOUS)) * 100 AS G_REV_DIFF -- GROSS REVENUE -DIFF(%)" ).append("\n"); 
		query.append("	, (N.COST_NEW_CM_OFFICE	- P.COST_PREVIOUS_CM_OFFICE	) / DECODE(P.COST_PREVIOUS_CM_OFFICE, 0,DECODE(N.COST_NEW_CM_OFFICE,0,1,N.COST_NEW_CM_OFFICE)	, ABS(P.COST_PREVIOUS_CM_OFFICE)) * 100 AS COST_DIFF_CM_OFFICE -- COST - DIFF(%)" ).append("\n"); 
		query.append("	, (N.COST_NEW_CM_TRADE	- P.COST_PREVIOUS_CM_TRADE	) / DECODE(P.COST_PREVIOUS_CM_TRADE, 0, DECODE(N.COST_NEW_CM_TRADE,0,1,N.COST_NEW_CM_TRADE)	, ABS(P.COST_PREVIOUS_CM_TRADE)) * 100 AS COST_DIFF_CM_TRADE -- COST - DIFF(%)" ).append("\n"); 
		query.append("	, (N.COST_NEW_OP_OFFICE - P.COST_PREVIOUS_OP_OFFICE	) / DECODE(P.COST_PREVIOUS_OP_OFFICE, 0,DECODE(N.COST_NEW_OP_OFFICE,0,1,N.COST_NEW_OP_OFFICE)	, ABS(P.COST_PREVIOUS_OP_OFFICE)) * 100 AS COST_DIFF_OP_OFFICE -- COST - DIFF(%)" ).append("\n"); 
		query.append("	, (N.WEEK_NEW		- P.WEEK_PREVIOUS		) / DECODE(P.WEEK_PREVIOUS, 0,		DECODE(N.WEEK_NEW,0,1,N.WEEK_NEW)			, ABS(P.WEEK_PREVIOUS)) * 100 AS WEEK_DIFF" ).append("\n"); 
		query.append("	, (N.CMPB_NEW_OFFICE	- P.CMPB_PREVIOUS_OFFICE	) / DECODE(P.CMPB_PREVIOUS_OFFICE, 0,	DECODE(N.CMPB_NEW_OFFICE,0,1,N.CMPB_NEW_OFFICE)		, ABS(P.CMPB_PREVIOUS_OFFICE)) * 100 AS CMPB_DIFF_OFFICE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.CMPB_NEW_TRADE	- P.CMPB_PREVIOUS_TRADE		) / DECODE(P.CMPB_PREVIOUS_TRADE, 0,	DECODE(N.CMPB_NEW_TRADE,0,1,N.CMPB_NEW_TRADE)		, ABS(P.CMPB_PREVIOUS_TRADE)) * 100 AS CMPB_DIFF_TRADE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.NEW_RESPB_CM_AMT	- P.CM_PREVIOUS_OFFICE		) / DECODE(P.CM_PREVIOUS_OFFICE, 0,	DECODE(N.NEW_RESPB_CM_AMT,0,1,N.NEW_RESPB_CM_AMT)	, ABS(P.CM_PREVIOUS_OFFICE)) * 100 AS CM_DIFF_OFFICE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.NEW_PFIT_CM_AMT	- P.CM_PREVIOUS_TRADE		) / DECODE(P.CM_PREVIOUS_TRADE, 0,	DECODE(N.NEW_PFIT_CM_AMT,0,1,N.NEW_PFIT_CM_AMT)		, ABS(P.CM_PREVIOUS_TRADE)) * 100 AS CM_DIFF_TRADE  -- CM DIFF(%)" ).append("\n"); 
		query.append("	, (N.NEW_RESPB_OP_AMT	- P.OP_PREVIOUS			) / DECODE(P.OP_PREVIOUS, 0,		DECODE(N.NEW_RESPB_OP_AMT,0,1,N.NEW_RESPB_OP_AMT)	, ABS(P.OP_PREVIOUS)) * 100 AS OP_DIFF  -- OP DIFF(%)" ).append("\n"); 
		query.append("	, (N.OPB_NEW_OFFICE	- P.OPB_PREVIOUS		) / DECODE(P.OPB_PREVIOUS, 0,	DECODE(N.OPB_NEW_OFFICE,0,1,N.OPB_NEW_OFFICE)		, ABS(P.OPB_PREVIOUS)) * 100 AS OPB_DIFF" ).append("\n"); 
		query.append("	, MN.SVC_SCP_CD" ).append("\n"); 
		query.append("	, (" ).append("\n"); 
		query.append("		SELECT INTG_CD_VAL_DP_DESC" ).append("\n"); 
		query.append("		FROM COM_INTG_CD_DTL" ).append("\n"); 
		query.append("		WHERE INTG_CD_ID = 'CD01714'" ).append("\n"); 
		query.append("		AND INTG_CD_VAL_CTNT = MN.CUST_TP_CD" ).append("\n"); 
		query.append("	) AS CUST_TP_CD" ).append("\n"); 
		query.append("	, MN.PROP_APRO_OFC_CD" ).append("\n"); 
		query.append("	, MN.RESPB_SREP_CD" ).append("\n"); 
		query.append("	, 'T' AS DATA_TP_CD" ).append("\n"); 
		query.append("	, 'TAA' AS CONTRACT_NM" ).append("\n"); 
		query.append("FROM	VW_TRI_MAIN_NEW_SET MN" ).append("\n"); 
		query.append("	,VW_TRI_NEW_DATA N" ).append("\n"); 
		query.append("	, VW_TRI_PREVIOUS P" ).append("\n"); 
		query.append("WHERE MN.TAA_PROP_NO = N.TAA_PROP_NO(+)" ).append("\n"); 
		query.append("	AND   MN.AMDT_SEQ = N.AMDT_SEQ(+)" ).append("\n"); 
		query.append("	AND   MN.TAA_PROP_NO = P.OLD_PROP_NO(+)" ).append("\n"); 
		query.append("	AND   MN.AMDT_SEQ = P.OLD_AMDT_SEQ(+)" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("ORDER BY CONTRACT_NM DESC,PROP_OFC_CD, PROP_NO" ).append("\n"); 

	}
}