/*=========================================================
*Copyright(c) 2018 CyberLogitec
*@FileName : UnmatchBLDBDAOCheckTaaSurchargeDiscrepancyRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2018.03.13
*@LastModifier : 
*@LastVersion : 1.0
* 2018.03.13 
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esm.bkg.revenueaudit.unmatchbl.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class UnmatchBLDBDAOCheckTaaSurchargeDiscrepancyRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * checkTaaSurchargeDiscrepancy
	  * 
	  * [20170706]  김동호 모든걸 다 무시하고, 요금 코드별 금액(단가 X)만 비교 (김경남 부장님 요청)
	  * </pre>
	  */
	public UnmatchBLDBDAOCheckTaaSurchargeDiscrepancyRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("ca_flg",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("bkg_no",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esm.bkg.revenueaudit.unmatchbl.integration").append("\n"); 
		query.append("FileName : UnmatchBLDBDAOCheckTaaSurchargeDiscrepancyRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("WITH" ).append("\n"); 
		query.append("XR AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("환율 정보 조회" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  CURR_CD         ," ).append("\n"); 
		query.append("        USD_LOCL_XCH_RT" ).append("\n"); 
		query.append("FROM    GL_MON_XCH_RT" ).append("\n"); 
		query.append("WHERE   ACCT_XCH_RT_YRMON = LEAST(( SELECT TO_CHAR(RT_APLY_DT, 'YYYYMM') FROM BKG_RATE WHERE BKG_NO = @[bkg_no] ), (SELECT MAX(ACCT_XCH_RT_YRMON) FROM GL_MON_XCH_RT ))" ).append("\n"); 
		query.append("AND     ACCT_XCH_RT_LVL   = '1'" ).append("\n"); 
		query.append("AND     @[ca_flg]         = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  CURR_CD         ," ).append("\n"); 
		query.append("        USD_LOCL_XCH_RT" ).append("\n"); 
		query.append("FROM    GL_MON_XCH_RT" ).append("\n"); 
		query.append("WHERE   ACCT_XCH_RT_YRMON = LEAST(( SELECT TO_CHAR(RT_APLY_DT, 'YYYYMM') FROM BKG_RT_HIS WHERE BKG_NO = @[bkg_no] AND CORR_NO = 'TMP0000001' ), (SELECT MAX(ACCT_XCH_RT_YRMON) FROM GL_MON_XCH_RT ))" ).append("\n"); 
		query.append("AND     ACCT_XCH_RT_LVL   = '1'" ).append("\n"); 
		query.append("AND     @[ca_flg]         = 'Y'" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("BK AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("B/L TYPE CODE 를 SELECT 한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  (" ).append("\n"); 
		query.append("        SELECT  NVL(RT_BL_TP_CD, 'N')" ).append("\n"); 
		query.append("        FROM    BKG_RATE" ).append("\n"); 
		query.append("        WHERE   BKG_NO        = @[bkg_no]" ).append("\n"); 
		query.append("        AND     @[ca_flg]     = 'N'" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("        SELECT  NVL(RT_BL_TP_CD, 'N')" ).append("\n"); 
		query.append("        FROM    BKG_RT_HIS" ).append("\n"); 
		query.append("        WHERE   BKG_NO        = @[bkg_no]" ).append("\n"); 
		query.append("        AND     CORR_NO       = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값" ).append("\n"); 
		query.append("        AND     @[ca_flg]     = 'Y'" ).append("\n"); 
		query.append("        ) RT_BL_TP_CD ," ).append("\n"); 
		query.append("        DECODE(" ).append("\n"); 
		query.append("          (" ).append("\n"); 
		query.append("          SELECT  SPLIT_RSN_CD" ).append("\n"); 
		query.append("          FROM    BKG_BOOKING" ).append("\n"); 
		query.append("          WHERE   BKG_NO        = ( SELECT FM_BKG_NO FROM BKG_BOOKING WHERE BKG_NO = @[bkg_no] )" ).append("\n"); 
		query.append("          AND     @[ca_flg]     = 'N'" ).append("\n"); 
		query.append("          UNION ALL" ).append("\n"); 
		query.append("          SELECT  SPLIT_RSN_CD" ).append("\n"); 
		query.append("          FROM    BKG_BOOKING" ).append("\n"); 
		query.append("          WHERE   BKG_NO        = ( SELECT FM_BKG_NO FROM BKG_BKG_HIS WHERE BKG_NO = @[bkg_no] AND CORR_NO = 'TMP0000001' )" ).append("\n"); 
		query.append("          AND     @[ca_flg]     = 'Y'" ).append("\n"); 
		query.append("          )" ).append("\n"); 
		query.append("          , 'M', 'Y', 'N')  MEMO_BL_FLG ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  MAX(BB_CGO_FLG)" ).append("\n"); 
		query.append("        FROM    BKG_QTY_DTL" ).append("\n"); 
		query.append("        WHERE   BKG_NO        = @[bkg_no]" ).append("\n"); 
		query.append("        AND     @[ca_flg]     = 'N'" ).append("\n"); 
		query.append("        HAVING  MAX(BB_CGO_FLG) IS NOT NULL" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("        SELECT  MAX(BB_CGO_FLG)" ).append("\n"); 
		query.append("        FROM    BKG_QTY_DTL_HIS" ).append("\n"); 
		query.append("        WHERE   BKG_NO        = @[bkg_no]" ).append("\n"); 
		query.append("        AND     CORR_NO       = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값" ).append("\n"); 
		query.append("        AND     @[ca_flg]     = 'Y'" ).append("\n"); 
		query.append("        HAVING  MAX(BB_CGO_FLG) IS NOT NULL" ).append("\n"); 
		query.append("        ) BB_CGO_FLG" ).append("\n"); 
		query.append("FROM    DUAL" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("BR AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("INCLUDE 를 제외한 BKG RATE DATA" ).append("\n"); 
		query.append("COVERED B/L 일 경우는 'DHF', 'NMS', 'CMS', 'ODF' 만 심사 대상으로 처리함." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  CHG_CD        ," ).append("\n"); 
		query.append("        CGO_CATE_CD   ," ).append("\n"); 
		query.append("        RCV_TERM_CD   ," ).append("\n"); 
		query.append("        DE_TERM_CD    ," ).append("\n"); 
		query.append("        RAT_AS_QTY    ," ).append("\n"); 
		query.append("        RAT_UT_CD     ," ).append("\n"); 
		query.append("        CURR_CD       ," ).append("\n"); 
		query.append("        CHG_UT_AMT    ," ).append("\n"); 
		query.append("        CHG_AMT       ," ).append("\n"); 
		query.append("        ( SELECT BR.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = BR.CURR_CD )  CHG_USD_AMT," ).append("\n"); 
		query.append("        SUM (( SELECT BR.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = BR.CURR_CD )) OVER (PARTITION BY CHG_CD, CHG_AMT) AS CHK_CHG_AMT" ).append("\n"); 
		query.append("FROM    BKG_CHG_RT  BR" ).append("\n"); 
		query.append("WHERE   BKG_NO        = @[bkg_no]" ).append("\n"); 
		query.append("AND     NVL(FRT_INCL_XCLD_DIV_CD, 'N')  = 'N'" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            ( SELECT RT_BL_TP_CD FROM BK ) <> 'C'" ).append("\n"); 
		query.append("        OR  CHG_CD  IN ( 'DHF', 'NMS', 'CMS', 'ODF' )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("AND     @[ca_flg]     = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  CHG_CD        ," ).append("\n"); 
		query.append("        CGO_CATE_CD   ," ).append("\n"); 
		query.append("        RCV_TERM_CD   ," ).append("\n"); 
		query.append("        DE_TERM_CD    ," ).append("\n"); 
		query.append("        RAT_AS_QTY    ," ).append("\n"); 
		query.append("        RAT_UT_CD     ," ).append("\n"); 
		query.append("        CURR_CD       ," ).append("\n"); 
		query.append("        CHG_UT_AMT    ," ).append("\n"); 
		query.append("        CHG_AMT       ," ).append("\n"); 
		query.append("        ( SELECT BR.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = BR.CURR_CD )  CHG_USD_AMT," ).append("\n"); 
		query.append("        SUM (( SELECT BR.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = BR.CURR_CD )) OVER (PARTITION BY CHG_CD, CHG_AMT) AS CHK_CHG_AMT" ).append("\n"); 
		query.append("FROM    BKG_CHG_RT_HIS  BR" ).append("\n"); 
		query.append("WHERE   BKG_NO        = @[bkg_no]" ).append("\n"); 
		query.append("AND     CORR_NO       = 'TMP0000001'" ).append("\n"); 
		query.append("AND     NVL(FRT_INCL_XCLD_DIV_CD, 'N')  = 'N'" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            ( SELECT RT_BL_TP_CD FROM BK ) <> 'C'" ).append("\n"); 
		query.append("        OR  CHG_CD  IN ( 'DHF', 'NMS', 'CMS', 'ODF' )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("AND     @[ca_flg]     = 'Y'" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("B1 AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("BKG 의 OFT ( OFT, OAR, DAR )" ).append("\n"); 
		query.append("BL RATING UNIT 을 고려하여 변환한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BR.*  ," ).append("\n"); 
		query.append("        ( SELECT BR.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = BR.CURR_CD )  CHG_USD_AMT," ).append("\n"); 
		query.append("        SUM (( SELECT BR.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = BR.CURR_CD )) OVER (PARTITION BY OFT_CMB_SEQ, CHG_CD, CHG_AMT) AS CHK_CHG_AMT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  BR.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                BR.CHG_CD       ," ).append("\n"); 
		query.append("                BR.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                BR.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                BR.DE_TERM_CD   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 1" ).append("\n"); 
		query.append("                ELSE BR.RAT_AS_QTY" ).append("\n"); 
		query.append("                END RAT_AS_QTY  ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 'BL'" ).append("\n"); 
		query.append("                ELSE BR.RAT_UT_CD" ).append("\n"); 
		query.append("                END RAT_UT_CD   ," ).append("\n"); 
		query.append("                BR.CURR_CD      ," ).append("\n"); 
		query.append("                SUM(BR.CHG_AMT) CHG_AMT" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  RA.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                        BR.*" ).append("\n"); 
		query.append("                FROM    BR    ," ).append("\n"); 
		query.append("                        (" ).append("\n"); 
		query.append("                        SELECT  DISTINCT" ).append("\n"); 
		query.append("                                OFT_CMB_SEQ" ).append("\n"); 
		query.append("                        FROM    BKG_REV_AUD_CHG_TMP" ).append("\n"); 
		query.append("                        ) RA" ).append("\n"); 
		query.append("                WHERE   CHG_CD  IN ( 'OFT', 'OAR', 'DAR' )" ).append("\n"); 
		query.append("                ) BR  ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                        CHG_CD      ," ).append("\n"); 
		query.append("                        MAX(DECODE(RAT_UT_CD, 'BL', 'Y', 'N'))  BL_FLG" ).append("\n"); 
		query.append("                FROM  BKG_REV_AUD_CHG_TMP" ).append("\n"); 
		query.append("                WHERE   CHG_CD  IN ( 'OFT', 'OAR', 'DAR' )" ).append("\n"); 
		query.append("                GROUP BY" ).append("\n"); 
		query.append("                        OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                        CHG_CD" ).append("\n"); 
		query.append("                ) CK" ).append("\n"); 
		query.append("        WHERE   CK.OFT_CMB_SEQ(+) = BR.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     CK.CHG_CD(+)      = BR.CHG_CD" ).append("\n"); 
		query.append("        GROUP BY" ).append("\n"); 
		query.append("                BR.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                BR.CHG_CD       ," ).append("\n"); 
		query.append("                BR.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                BR.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                BR.DE_TERM_CD   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 1" ).append("\n"); 
		query.append("                ELSE BR.RAT_AS_QTY" ).append("\n"); 
		query.append("                END             ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 'BL'" ).append("\n"); 
		query.append("                ELSE BR.RAT_UT_CD" ).append("\n"); 
		query.append("                END             ," ).append("\n"); 
		query.append("                BR.CURR_CD" ).append("\n"); 
		query.append("        ) BR" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("R1 AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("AUDIT 의 OFT ( OFT, OAR, DAR )" ).append("\n"); 
		query.append("BL RATING UNIT 을 고려하여 변환한다." ).append("\n"); 
		query.append("COVERED B/L 일 경우는 'DHF', 'NMS', 'CMS', 'ODF' 만 심사 대상으로 처리함." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  RA.*  ," ).append("\n"); 
		query.append("        ( SELECT RA.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = RA.CURR_CD )  CHG_USD_AMT," ).append("\n"); 
		query.append("        SUM (( SELECT RA.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = RA.CURR_CD )) OVER (PARTITION BY OFT_CMB_SEQ, CHG_CD, CHG_AMT) AS CHK_CHG_AMT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  RA.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                RA.CHG_CD       ," ).append("\n"); 
		query.append("                RA.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                RA.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                RA.DE_TERM_CD   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 1" ).append("\n"); 
		query.append("                ELSE RA.RAT_AS_QTY" ).append("\n"); 
		query.append("                END RAT_AS_QTY  ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 'BL'" ).append("\n"); 
		query.append("                ELSE RA.RAT_UT_CD" ).append("\n"); 
		query.append("                END RAT_UT_CD   ," ).append("\n"); 
		query.append("                RA.CURR_CD      ," ).append("\n"); 
		query.append("                SUM(RA.CHG_AMT) CHG_AMT" ).append("\n"); 
		query.append("        FROM    BKG_REV_AUD_CHG_TMP RA  ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  CHG_CD      ," ).append("\n"); 
		query.append("                        MAX(DECODE(RAT_UT_CD, 'BL', 'Y', 'N'))  BL_FLG" ).append("\n"); 
		query.append("                FROM  BR" ).append("\n"); 
		query.append("                GROUP BY" ).append("\n"); 
		query.append("                        CHG_CD" ).append("\n"); 
		query.append("                ) CK" ).append("\n"); 
		query.append("        WHERE   CK.CHG_CD(+)      = RA.CHG_CD" ).append("\n"); 
		query.append("        AND     RA.CHG_CD         IN ( 'OFT', 'OAR', 'DAR' )" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    ( SELECT RT_BL_TP_CD FROM BK ) <> 'C'" ).append("\n"); 
		query.append("                OR  RA.CHG_CD IN ( 'DHF', 'NMS', 'CMS', 'ODF' )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        GROUP BY" ).append("\n"); 
		query.append("                RA.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                RA.CHG_CD       ," ).append("\n"); 
		query.append("                RA.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                RA.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                RA.DE_TERM_CD   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 1" ).append("\n"); 
		query.append("                ELSE RA.RAT_AS_QTY" ).append("\n"); 
		query.append("                END             ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 'BL'" ).append("\n"); 
		query.append("                ELSE RA.RAT_UT_CD" ).append("\n"); 
		query.append("                END             ," ).append("\n"); 
		query.append("                RA.CURR_CD" ).append("\n"); 
		query.append("        ) RA" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("C1 AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("OFT 가 일치하는 OFT_CMB_SEQ 를 SELECT 한다." ).append("\n"); 
		query.append("B1 와 R1 가 모두 값이 없으면 C1 이 값이 없어서 불일치하는 것으로 표현되므로," ).append("\n"); 
		query.append("UNION ALL 로 전체 OFT_CMB_SEQ 를 가져오는 부분을 추가하였음." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT  OFT_CMB_SEQ" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  R1.OFT_CMB_SEQ        ," ).append("\n"); 
		query.append("                SUM(DECODE(B1.CHG_CD, NULL, 1, 0))  UMCH_CNT" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                        CHG_CD        ," ).append("\n"); 
		query.append("                        CGO_CATE_CD   ," ).append("\n"); 
		query.append("                        RCV_TERM_CD   ," ).append("\n"); 
		query.append("                        DE_TERM_CD    ," ).append("\n"); 
		query.append("                        RAT_AS_QTY    ," ).append("\n"); 
		query.append("                        RAT_UT_CD     ," ).append("\n"); 
		query.append("                        CURR_CD       ," ).append("\n"); 
		query.append("                        CHG_AMT       ," ).append("\n"); 
		query.append("                        CHG_USD_AMT   ," ).append("\n"); 
		query.append("                        CHK_CHG_AMT" ).append("\n"); 
		query.append("                FROM    R1" ).append("\n"); 
		query.append("                WHERE   OFT_CMB_SEQ   NOT IN  (" ).append("\n"); 
		query.append("                                              SELECT  DISTINCT" ).append("\n"); 
		query.append("                                                      A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                                              FROM    (" ).append("\n"); 
		query.append("                                                      SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                                                              CHG_CD        ," ).append("\n"); 
		query.append("                                                              COUNT(1)  CNT" ).append("\n"); 
		query.append("                                                      FROM    R1" ).append("\n"); 
		query.append("                                                      GROUP BY" ).append("\n"); 
		query.append("                                                              OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                                                              CHG_CD" ).append("\n"); 
		query.append("                                                      ) A ," ).append("\n"); 
		query.append("                                                      (" ).append("\n"); 
		query.append("                                                      SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                                                              CHG_CD        ," ).append("\n"); 
		query.append("                                                              COUNT(1)  CNT" ).append("\n"); 
		query.append("                                                      FROM    B1" ).append("\n"); 
		query.append("                                                      GROUP BY" ).append("\n"); 
		query.append("                                                              OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                                                              CHG_CD" ).append("\n"); 
		query.append("                                                      ) B" ).append("\n"); 
		query.append("                                              WHERE   B.OFT_CMB_SEQ(+)  = A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                                              AND     B.CHG_CD(+)       = A.CHG_CD" ).append("\n"); 
		query.append("                                              AND     B.CNT(+)          = A.CNT" ).append("\n"); 
		query.append("                                              AND     B.CHG_CD          IS NULL" ).append("\n"); 
		query.append("                                              )" ).append("\n"); 
		query.append("                ) R1" ).append("\n"); 
		query.append("                LEFT OUTER JOIN B1" ).append("\n"); 
		query.append("                ON      B1.OFT_CMB_SEQ  = R1.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                AND     B1.CHG_CD       = R1.CHG_CD" ).append("\n"); 
		query.append("                AND     B1.CHK_CHG_AMT  = R1.CHK_CHG_AMT" ).append("\n"); 
		query.append("                AND     ABS(B1.CHG_USD_AMT - R1.CHG_USD_AMT) <= 5" ).append("\n"); 
		query.append("        GROUP BY  R1.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("WHERE   UMCH_CNT  = 0" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("INTERSECT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  B1.OFT_CMB_SEQ" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                SUM(CHG_USD_AMT)  CHG_USD_AMT" ).append("\n"); 
		query.append("        FROM    B1" ).append("\n"); 
		query.append("        GROUP BY  OFT_CMB_SEQ" ).append("\n"); 
		query.append("        ) B1  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                SUM(CHG_USD_AMT)  CHG_USD_AMT" ).append("\n"); 
		query.append("        FROM    R1" ).append("\n"); 
		query.append("        GROUP BY  OFT_CMB_SEQ" ).append("\n"); 
		query.append("        ) R1" ).append("\n"); 
		query.append("WHERE   R1.OFT_CMB_SEQ  = B1.OFT_CMB_SEQ" ).append("\n"); 
		query.append("AND     ABS(B1.CHG_USD_AMT - R1.CHG_USD_AMT) <= 5" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  DISTINCT" ).append("\n"); 
		query.append("        OFT_CMB_SEQ" ).append("\n"); 
		query.append("FROM    BKG_REV_AUD_CHG_TMP A" ).append("\n"); 
		query.append("WHERE ( SELECT COUNT(1) FROM B1 WHERE B1.OFT_CMB_SEQ = A.OFT_CMB_SEQ ) = 0" ).append("\n"); 
		query.append("AND   ( SELECT COUNT(1) FROM R1 WHERE R1.OFT_CMB_SEQ = A.OFT_CMB_SEQ ) = 0" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("RA AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("OFT 가 일치여부, 금액 등을 고려하여 비교대상이 되는 AUDIT DATA 를 SELECT 한다." ).append("\n"); 
		query.append("COVERED B/L 일 경우는 'DHF', 'NMS', 'CMS', 'ODF' 만 심사 대상으로 처리함." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  CHG_CD        ," ).append("\n"); 
		query.append("        CGO_CATE_CD   ," ).append("\n"); 
		query.append("        RCV_TERM_CD   ," ).append("\n"); 
		query.append("        DE_TERM_CD    ," ).append("\n"); 
		query.append("        RAT_AS_QTY    ," ).append("\n"); 
		query.append("        RAT_UT_CD     ," ).append("\n"); 
		query.append("        CURR_CD       ," ).append("\n"); 
		query.append("        CHG_UT_AMT    ," ).append("\n"); 
		query.append("        CHG_AMT       ," ).append("\n"); 
		query.append("        ( SELECT RA.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = RA.CURR_CD )  CHG_USD_AMT," ).append("\n"); 
		query.append("        SUM (( SELECT RA.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = RA.CURR_CD )) OVER (PARTITION BY OFT_CMB_SEQ, CHG_CD, CHG_AMT) AS CHK_CHG_AMT" ).append("\n"); 
		query.append("FROM    BKG_REV_AUD_CHG_TMP RA" ).append("\n"); 
		query.append("WHERE   OFT_CMB_SEQ" ).append("\n"); 
		query.append("        =" ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  OFT_CMB_SEQ" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                        ROW_NUMBER() OVER ( ORDER BY OFT_MTCH_PRIO, CHG_AMT, OFT_CMB_SEQ )  ROW_NUMBER" ).append("\n"); 
		query.append("                FROM    (" ).append("\n"); 
		query.append("                        SELECT  RA.OFT_CMB_SEQ    ," ).append("\n"); 
		query.append("                                CASE" ).append("\n"); 
		query.append("                                WHEN OFT_CMB_SEQ  IN ( SELECT OFT_CMB_SEQ FROM C1 ) THEN 1" ).append("\n"); 
		query.append("                                ELSE 2" ).append("\n"); 
		query.append("                                END OFT_MTCH_PRIO ," ).append("\n"); 
		query.append("                                SUM(RA.RAT_AS_QTY * RA.CHG_UT_AMT / DECODE(RA.RAT_UT_CD, 'PC', 100, 1) / XR.USD_LOCL_XCH_RT)  CHG_AMT" ).append("\n"); 
		query.append("                        FROM    BKG_REV_AUD_CHG_TMP RA  ," ).append("\n"); 
		query.append("                                XR" ).append("\n"); 
		query.append("                        WHERE   XR.CURR_CD      = RA.CURR_CD" ).append("\n"); 
		query.append("                        AND     (" ).append("\n"); 
		query.append("                                    ( SELECT RT_BL_TP_CD FROM BK ) <> 'C'" ).append("\n"); 
		query.append("                                OR  RA.CHG_CD IN ( 'DHF', 'NMS', 'CMS', 'ODF' )" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                        GROUP BY" ).append("\n"); 
		query.append("                                RA.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        WHERE   ROW_NUMBER  = 1" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            ( SELECT RT_BL_TP_CD FROM BK ) <> 'C'" ).append("\n"); 
		query.append("        OR  CHG_CD  IN ( 'DHF', 'NMS', 'CMS', 'ODF' )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("B2 AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("BKG 의 OFT ( OFT, OAR, DAR ) 를 제외한 SURCHARGE" ).append("\n"); 
		query.append("BL RATING UNIT 을 고려하여 변환한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BR.*  ," ).append("\n"); 
		query.append("        ( SELECT BR.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = BR.CURR_CD )  CHG_USD_AMT," ).append("\n"); 
		query.append("        SUM (( SELECT BR.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = BR.CURR_CD )) OVER (PARTITION BY OFT_CMB_SEQ, CHG_CD, CHG_AMT) AS CHK_CHG_AMT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  BR.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                BR.CHG_CD       ," ).append("\n"); 
		query.append("                BR.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                BR.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                BR.DE_TERM_CD   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 1" ).append("\n"); 
		query.append("                ELSE BR.RAT_AS_QTY" ).append("\n"); 
		query.append("                END RAT_AS_QTY  ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 'BL'" ).append("\n"); 
		query.append("                ELSE BR.RAT_UT_CD" ).append("\n"); 
		query.append("                END RAT_UT_CD   ," ).append("\n"); 
		query.append("                BR.CURR_CD      ," ).append("\n"); 
		query.append("                SUM(BR.CHG_AMT) CHG_AMT" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  RA.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                        BR.*" ).append("\n"); 
		query.append("                FROM    BR    ," ).append("\n"); 
		query.append("                        (" ).append("\n"); 
		query.append("                        SELECT  DISTINCT" ).append("\n"); 
		query.append("                                OFT_CMB_SEQ" ).append("\n"); 
		query.append("                        FROM    BKG_REV_AUD_CHG_TMP" ).append("\n"); 
		query.append("                        ) RA" ).append("\n"); 
		query.append("                WHERE   CHG_CD  NOT IN ( 'OFT', 'OAR', 'DAR' )" ).append("\n"); 
		query.append("                ) BR  ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                        CHG_CD      ," ).append("\n"); 
		query.append("                        MAX(DECODE(RAT_UT_CD, 'BL', 'Y', 'N'))  BL_FLG" ).append("\n"); 
		query.append("                FROM  BKG_REV_AUD_CHG_TMP" ).append("\n"); 
		query.append("                GROUP BY" ).append("\n"); 
		query.append("                        OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                        CHG_CD" ).append("\n"); 
		query.append("                ) CK" ).append("\n"); 
		query.append("        WHERE   CK.OFT_CMB_SEQ(+) = BR.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     CK.CHG_CD(+)      = BR.CHG_CD" ).append("\n"); 
		query.append("        GROUP BY" ).append("\n"); 
		query.append("                BR.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                BR.CHG_CD       ," ).append("\n"); 
		query.append("                BR.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                BR.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                BR.DE_TERM_CD   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 1" ).append("\n"); 
		query.append("                ELSE BR.RAT_AS_QTY" ).append("\n"); 
		query.append("                END             ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 'BL'" ).append("\n"); 
		query.append("                ELSE BR.RAT_UT_CD" ).append("\n"); 
		query.append("                END             ," ).append("\n"); 
		query.append("                BR.CURR_CD" ).append("\n"); 
		query.append("        ) BR" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("BS AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("BKG 의 OFT ( OFT, OAR, DAR ) 를 제외한 SURCHARGE" ).append("\n"); 
		query.append("BL RATING UNIT 을 고려하여 변환한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BR.*  ," ).append("\n"); 
		query.append("        ( SELECT BR.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = BR.CURR_CD )  CHG_USD_AMT," ).append("\n"); 
		query.append("        SUM (( SELECT BR.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = BR.CURR_CD )) OVER (PARTITION BY OFT_CMB_SEQ, CHG_CD, CHG_AMT) AS CHK_CHG_AMT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  BR.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                BR.CHG_CD       ," ).append("\n"); 
		query.append("                BR.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                BR.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                BR.DE_TERM_CD   ," ).append("\n"); 
		query.append("                SUM(CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 1" ).append("\n"); 
		query.append("                WHEN BR.RAT_UT_CD = 'PC' THEN BR.CHG_UT_AMT" ).append("\n"); 
		query.append("                ELSE BR.RAT_AS_QTY" ).append("\n"); 
		query.append("                END) RAT_AS_QTY ," ).append("\n"); 
		query.append("                BR.RAT_UT_CD    ," ).append("\n"); 
		query.append("                BR.CURR_CD      ," ).append("\n"); 
		query.append("                SUM(BR.CHG_AMT) CHG_AMT" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  RA.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                        BR.*" ).append("\n"); 
		query.append("                FROM    BR    ," ).append("\n"); 
		query.append("                        (" ).append("\n"); 
		query.append("                        SELECT  DISTINCT" ).append("\n"); 
		query.append("                                OFT_CMB_SEQ" ).append("\n"); 
		query.append("                        FROM    BKG_REV_AUD_CHG_TMP" ).append("\n"); 
		query.append("                        ) RA" ).append("\n"); 
		query.append("                WHERE   CHG_CD  NOT IN ( 'OFT', 'OAR', 'DAR' )" ).append("\n"); 
		query.append("                ) BR  ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                        CHG_CD      ," ).append("\n"); 
		query.append("                        MAX(DECODE(RAT_UT_CD, 'BL', 'Y', 'N'))  BL_FLG" ).append("\n"); 
		query.append("                FROM  BKG_REV_AUD_CHG_TMP" ).append("\n"); 
		query.append("                GROUP BY" ).append("\n"); 
		query.append("                        OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                        CHG_CD" ).append("\n"); 
		query.append("                ) CK," ).append("\n"); 
		query.append("                BKG_BOOKING B" ).append("\n"); 
		query.append("        WHERE   CK.OFT_CMB_SEQ(+) = BR.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     CK.CHG_CD(+)      = BR.CHG_CD" ).append("\n"); 
		query.append("        AND     B.BKG_NO = @[bkg_no]" ).append("\n"); 
		query.append("        GROUP BY" ).append("\n"); 
		query.append("                BR.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                BR.CHG_CD       ," ).append("\n"); 
		query.append("                BR.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                BR.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                BR.DE_TERM_CD   , " ).append("\n"); 
		query.append("                BR.RAT_UT_CD    ," ).append("\n"); 
		query.append("                BR.CURR_CD" ).append("\n"); 
		query.append("        ) BR" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("R2 AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("AUDIT 의 OFT ( OFT, OAR, DAR ) 를 제외한 SURCHARGE" ).append("\n"); 
		query.append("BL RATING UNIT 을 고려하여 변환한다." ).append("\n"); 
		query.append("COVERED B/L 일 경우는 'DHF', 'NMS', 'CMS', 'ODF' 만 심사 대상으로 처리함." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  RA.*  ," ).append("\n"); 
		query.append("        ( SELECT RA.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = RA.CURR_CD )  CHG_USD_AMT," ).append("\n"); 
		query.append("        SUM (( SELECT RA.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = RA.CURR_CD )) OVER (PARTITION BY OFT_CMB_SEQ, CHG_CD, CHG_AMT) AS CHK_CHG_AMT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  RA.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                RA.CHG_CD       ," ).append("\n"); 
		query.append("                RA.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                RA.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                RA.DE_TERM_CD   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 1" ).append("\n"); 
		query.append("                ELSE RA.RAT_AS_QTY" ).append("\n"); 
		query.append("                END RAT_AS_QTY  ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 'BL'" ).append("\n"); 
		query.append("                ELSE RA.RAT_UT_CD" ).append("\n"); 
		query.append("                END RAT_UT_CD   ," ).append("\n"); 
		query.append("                RA.CURR_CD      ," ).append("\n"); 
		query.append("                SUM(RA.CHG_AMT) CHG_AMT" ).append("\n"); 
		query.append("        FROM    BKG_REV_AUD_CHG_TMP RA  ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  CHG_CD      ," ).append("\n"); 
		query.append("                        MAX(DECODE(RAT_UT_CD, 'BL', 'Y', 'N'))  BL_FLG" ).append("\n"); 
		query.append("                FROM  BR" ).append("\n"); 
		query.append("                GROUP BY" ).append("\n"); 
		query.append("                        CHG_CD" ).append("\n"); 
		query.append("                ) CK" ).append("\n"); 
		query.append("        WHERE   CK.CHG_CD(+)      = RA.CHG_CD" ).append("\n"); 
		query.append("        AND     RA.CHG_CD         NOT IN ( 'OFT', 'OAR', 'DAR' )" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    ( SELECT RT_BL_TP_CD FROM BK ) <> 'C'" ).append("\n"); 
		query.append("                OR  RA.CHG_CD IN ( 'DHF', 'NMS', 'CMS', 'ODF' )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        AND     RA.CHG_CD         NOT IN (  SELECT H.ATTR_CTNT1" ).append("\n"); 
		query.append("                			                FROM BKG_BOOKING B, BKG_HRD_CDG_CTNT H" ).append("\n"); 
		query.append("                			                WHERE BKG_NO = @[bkg_no]" ).append("\n"); 
		query.append("                			                AND H.HRD_CDG_ID = 'SUR_AUDIT_EXPT'" ).append("\n"); 
		query.append("                			                AND SUBSTR(B.POD_CD,1,2) = H.ATTR_CTNT4" ).append("\n"); 
		query.append("                			                AND @[ca_flg] = 'N'" ).append("\n"); 
		query.append("                			                UNION ALL" ).append("\n"); 
		query.append("                			                SELECT H.ATTR_CTNT1" ).append("\n"); 
		query.append("                			                FROM BKG_BKG_HIS, BKG_HRD_CDG_CTNT H" ).append("\n"); 
		query.append("                			                WHERE BKG_NO = @[bkg_no]" ).append("\n"); 
		query.append("                			                AND CORR_NO = 'TMP0000001'" ).append("\n"); 
		query.append("                			                AND H.HRD_CDG_ID = 'SUR_AUDIT_EXPT'" ).append("\n"); 
		query.append("                			                AND SUBSTR(POD_CD,1,2) = H.ATTR_CTNT4" ).append("\n"); 
		query.append("                			                AND @[ca_flg] = 'Y')" ).append("\n"); 
		query.append("        GROUP BY" ).append("\n"); 
		query.append("                RA.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                RA.CHG_CD       ," ).append("\n"); 
		query.append("                RA.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                RA.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                RA.DE_TERM_CD   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 1" ).append("\n"); 
		query.append("                ELSE RA.RAT_AS_QTY" ).append("\n"); 
		query.append("                END             ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 'BL'" ).append("\n"); 
		query.append("                ELSE RA.RAT_UT_CD" ).append("\n"); 
		query.append("                END             ," ).append("\n"); 
		query.append("                RA.CURR_CD" ).append("\n"); 
		query.append("        ) RA" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("RS AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("AUDIT 의 OFT ( OFT, OAR, DAR ) 를 제외한 SURCHARGE" ).append("\n"); 
		query.append("BL RATING UNIT 을 고려하여 변환한다." ).append("\n"); 
		query.append("COVERED B/L 일 경우는 'DHF', 'NMS', 'CMS', 'ODF' 만 심사 대상으로 처리함." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  RA.*  ," ).append("\n"); 
		query.append("        ( SELECT RA.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = RA.CURR_CD )  CHG_USD_AMT," ).append("\n"); 
		query.append("        SUM (( SELECT RA.CHG_AMT / XR.USD_LOCL_XCH_RT FROM XR WHERE XR.CURR_CD = RA.CURR_CD )) OVER (PARTITION BY OFT_CMB_SEQ, CHG_CD, CHG_AMT) AS CHK_CHG_AMT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  RA.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                RA.CHG_CD       ," ).append("\n"); 
		query.append("                RA.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                RA.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                RA.DE_TERM_CD   ," ).append("\n"); 
		query.append("                SUM(CASE" ).append("\n"); 
		query.append("                WHEN DECODE(CK.BL_FLG, 'Y', 'Y', 'N') = 'Y' THEN 1" ).append("\n"); 
		query.append("                WHEN RA.RAT_UT_CD = 'PC' THEN RA.CHG_UT_AMT" ).append("\n"); 
		query.append("                ELSE RA.RAT_AS_QTY" ).append("\n"); 
		query.append("                END) RAT_AS_QTY ," ).append("\n"); 
		query.append("                RA.RAT_UT_CD    ," ).append("\n"); 
		query.append("                RA.CURR_CD      ," ).append("\n"); 
		query.append("                SUM(RA.CHG_AMT) CHG_AMT" ).append("\n"); 
		query.append("        FROM    BKG_REV_AUD_CHG_TMP RA  ," ).append("\n"); 
		query.append("                BKG_BOOKING B," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  CHG_CD      ," ).append("\n"); 
		query.append("                        MAX(DECODE(RAT_UT_CD, 'BL', 'Y', 'N'))  BL_FLG" ).append("\n"); 
		query.append("                FROM  BR" ).append("\n"); 
		query.append("                GROUP BY" ).append("\n"); 
		query.append("                        CHG_CD" ).append("\n"); 
		query.append("                ) CK" ).append("\n"); 
		query.append("        WHERE   CK.CHG_CD(+)      = RA.CHG_CD" ).append("\n"); 
		query.append("        AND     RA.CHG_CD         NOT IN ( 'OFT', 'OAR', 'DAR' )" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    ( SELECT RT_BL_TP_CD FROM BK ) <> 'C'" ).append("\n"); 
		query.append("                OR  RA.CHG_CD IN ( 'DHF', 'NMS', 'CMS', 'ODF' )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        AND     B.BKG_NO = @[bkg_no]" ).append("\n"); 
		query.append("        GROUP BY" ).append("\n"); 
		query.append("                RA.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                RA.CHG_CD       ," ).append("\n"); 
		query.append("                RA.CGO_CATE_CD  ," ).append("\n"); 
		query.append("                RA.RCV_TERM_CD  ," ).append("\n"); 
		query.append("                RA.DE_TERM_CD   ," ).append("\n"); 
		query.append("                RA.RAT_UT_CD    ," ).append("\n"); 
		query.append("                RA.CURR_CD" ).append("\n"); 
		query.append("        ) RA" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("C2 AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("SURCHARGE 가 일치하는 OFT_CMB_SEQ 를 SELECT 한다." ).append("\n"); 
		query.append("B2 와 R2 가 모두 값이 없으면 C1 이 값이 없어서 불일치하는 것으로 표현되므로," ).append("\n"); 
		query.append("UNION ALL 로 전체 OFT_CMB_SEQ 를 가져오는 부분을 추가하였음." ).append("\n"); 
		query.append("Tax성 Charge는 Rating 여부만 심사함(GST, VDT, VST, VTT, AST)" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT  OFT_CMB_SEQ" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  R2.OFT_CMB_SEQ        ," ).append("\n"); 
		query.append("                SUM(DECODE(B2.CHG_CD, NULL, 1, 0))  UMCH_CNT" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                        CHG_CD        ," ).append("\n"); 
		query.append("                        CGO_CATE_CD   ," ).append("\n"); 
		query.append("                        RCV_TERM_CD   ," ).append("\n"); 
		query.append("                        DE_TERM_CD    ," ).append("\n"); 
		query.append("                        RAT_AS_QTY    ," ).append("\n"); 
		query.append("                        RAT_UT_CD     ," ).append("\n"); 
		query.append("                        CURR_CD       ," ).append("\n"); 
		query.append("                        CHG_AMT       ," ).append("\n"); 
		query.append("                        CHG_USD_AMT   ," ).append("\n"); 
		query.append("                        CHK_CHG_AMT   " ).append("\n"); 
		query.append("                FROM    R2" ).append("\n"); 
		query.append("                WHERE   OFT_CMB_SEQ   NOT IN  (" ).append("\n"); 
		query.append("                                              SELECT  DISTINCT" ).append("\n"); 
		query.append("                                                      A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                                              FROM    (" ).append("\n"); 
		query.append("                                                      SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                                                              CHG_CD        ," ).append("\n"); 
		query.append("                                                              COUNT(1)  CNT" ).append("\n"); 
		query.append("                                                      FROM    R2" ).append("\n"); 
		query.append("                                                      GROUP BY" ).append("\n"); 
		query.append("                                                              OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                                                              CHG_CD" ).append("\n"); 
		query.append("                                                      ) A ," ).append("\n"); 
		query.append("                                                      (" ).append("\n"); 
		query.append("                                                      SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                                                              CHG_CD        ," ).append("\n"); 
		query.append("                                                              COUNT(1)  CNT" ).append("\n"); 
		query.append("                                                      FROM    B2" ).append("\n"); 
		query.append("                                                      GROUP BY" ).append("\n"); 
		query.append("                                                              OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                                                              CHG_CD" ).append("\n"); 
		query.append("                                                      ) B" ).append("\n"); 
		query.append("                                              WHERE   B.OFT_CMB_SEQ(+)  = A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                                              AND     B.CHG_CD(+)       = A.CHG_CD" ).append("\n"); 
		query.append("                                              AND     B.CNT(+)          = A.CNT" ).append("\n"); 
		query.append("                                              AND     B.CHG_CD          IS NULL" ).append("\n"); 
		query.append("                                              )" ).append("\n"); 
		query.append("                ) R2" ).append("\n"); 
		query.append("                LEFT OUTER JOIN B2" ).append("\n"); 
		query.append("                ON      B2.OFT_CMB_SEQ  = R2.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                AND     B2.CHG_CD       = R2.CHG_CD" ).append("\n"); 
		query.append("                AND    (" ).append("\n"); 
		query.append("							(" ).append("\n"); 
		query.append("                			      ABS(B2.CHG_USD_AMT - R2.CHG_USD_AMT) <= 5" ).append("\n"); 
		query.append("                                      AND     B2.CHK_CHG_AMT  = R2.CHK_CHG_AMT" ).append("\n"); 
		query.append("                        	 OR  (R2.CHG_CD IN ( 'OIH', 'DIH' ) AND R2.CHG_AMT = 0)" ).append("\n"); 
		query.append("                        	)" ).append("\n"); 
		query.append("                            OR" ).append("\n"); 
		query.append("                            (           R2.CHG_CD IN (SELECT ATTR_CTNT1 FROM BKG_HRD_CDG_CTNT WHERE HRD_CDG_ID = 'SUR_AUDIT_EXPT' AND ATTR_CTNT2 = 'TAX')" ).append("\n"); 
		query.append("								AND     B2.CHG_USD_AMT >= R2.CHG_USD_AMT " ).append("\n"); 
		query.append("                			" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("						)" ).append("\n"); 
		query.append("        GROUP BY  R2.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("WHERE   UMCH_CNT  = 0" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("INTERSECT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  B2.OFT_CMB_SEQ" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                SUM(CHG_USD_AMT)  CHG_USD_AMT" ).append("\n"); 
		query.append("        FROM    B2" ).append("\n"); 
		query.append("        WHERE   CHG_CD IN ( SELECT CHG_CD FROM R2 WHERE R2.OFT_CMB_SEQ = B2.OFT_CMB_SEQ AND R2.CHG_AMT <> 0 )" ).append("\n"); 
		query.append("        AND CHG_CD NOT IN (SELECT ATTR_CTNT1 FROM BKG_HRD_CDG_CTNT WHERE HRD_CDG_ID = 'SUR_AUDIT_EXPT' AND ATTR_CTNT2 = 'TAX')" ).append("\n"); 
		query.append("        GROUP BY  OFT_CMB_SEQ" ).append("\n"); 
		query.append("        ) B2  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                SUM(CHG_USD_AMT)  CHG_USD_AMT" ).append("\n"); 
		query.append("        FROM    R2" ).append("\n"); 
		query.append("        WHERE CHG_CD NOT IN (SELECT ATTR_CTNT1 FROM BKG_HRD_CDG_CTNT WHERE HRD_CDG_ID = 'SUR_AUDIT_EXPT' AND ATTR_CTNT2 = 'TAX')" ).append("\n"); 
		query.append("        GROUP BY  OFT_CMB_SEQ" ).append("\n"); 
		query.append("        ) R2" ).append("\n"); 
		query.append("WHERE   R2.OFT_CMB_SEQ  = B2.OFT_CMB_SEQ" ).append("\n"); 
		query.append("AND     ABS(B2.CHG_USD_AMT - R2.CHG_USD_AMT) <= 5" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  OFT_CMB_SEQ" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  RS.OFT_CMB_SEQ        ," ).append("\n"); 
		query.append("                SUM(DECODE(BS.CHG_CD, NULL, 1, 0))  UMCH_CNT" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                        CHG_CD        ," ).append("\n"); 
		query.append("                        CGO_CATE_CD   ," ).append("\n"); 
		query.append("                        RCV_TERM_CD   ," ).append("\n"); 
		query.append("                        DE_TERM_CD    ," ).append("\n"); 
		query.append("                        RAT_AS_QTY    ," ).append("\n"); 
		query.append("                        RAT_UT_CD     ," ).append("\n"); 
		query.append("                        CURR_CD       ," ).append("\n"); 
		query.append("                        CHG_AMT       ," ).append("\n"); 
		query.append("                        CHG_USD_AMT   ," ).append("\n"); 
		query.append("                        CHK_CHG_AMT" ).append("\n"); 
		query.append("                FROM    RS" ).append("\n"); 
		query.append("                WHERE   OFT_CMB_SEQ   NOT IN  (" ).append("\n"); 
		query.append("                                              SELECT  DISTINCT" ).append("\n"); 
		query.append("                                                      A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                                              FROM    (" ).append("\n"); 
		query.append("                                                      SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                                                              CHG_CD        ," ).append("\n"); 
		query.append("                                                              COUNT(1)  CNT" ).append("\n"); 
		query.append("                                                      FROM    RS" ).append("\n"); 
		query.append("                                                      GROUP BY" ).append("\n"); 
		query.append("                                                              OFT_CMB_SEQ ," ).append("\n"); 
		query.append("                                                              CHG_CD" ).append("\n"); 
		query.append("                                                      ) A ," ).append("\n"); 
		query.append("                                                      (" ).append("\n"); 
		query.append("                                                      SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                                                              CHG_CD        ," ).append("\n"); 
		query.append("                                                              COUNT(1)  CNT" ).append("\n"); 
		query.append("                                                      FROM    RS" ).append("\n"); 
		query.append("                                                      GROUP BY" ).append("\n"); 
		query.append("                                                              OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                                                              CHG_CD" ).append("\n"); 
		query.append("                                                      ) B" ).append("\n"); 
		query.append("                                              WHERE   B.OFT_CMB_SEQ(+)  = A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                                              AND     B.CHG_CD(+)       = A.CHG_CD" ).append("\n"); 
		query.append("                                              AND     B.CNT(+)          = A.CNT" ).append("\n"); 
		query.append("                                              AND     B.CHG_CD          IS NULL" ).append("\n"); 
		query.append("                                              )" ).append("\n"); 
		query.append("                ) RS" ).append("\n"); 
		query.append("                LEFT OUTER JOIN BS" ).append("\n"); 
		query.append("                ON      BS.OFT_CMB_SEQ  = RS.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                AND     BS.CHG_CD       = RS.CHG_CD" ).append("\n"); 
		query.append("                AND     BS.CHK_CHG_AMT  = RS.CHK_CHG_AMT" ).append("\n"); 
		query.append("                AND     ABS(BS.CHG_USD_AMT - RS.CHG_USD_AMT) <= 5" ).append("\n"); 
		query.append("        GROUP BY  RS.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("WHERE   UMCH_CNT  = 0" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  DISTINCT" ).append("\n"); 
		query.append("        OFT_CMB_SEQ" ).append("\n"); 
		query.append("FROM    BKG_REV_AUD_CHG_TMP A" ).append("\n"); 
		query.append("WHERE   (" ).append("\n"); 
		query.append("        SELECT  COUNT(1)" ).append("\n"); 
		query.append("        FROM    B2" ).append("\n"); 
		query.append("        WHERE B2.OFT_CMB_SEQ  = A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND   B2.CHG_CD       IN ( SELECT R2.CHG_CD FROM R2 WHERE R2.OFT_CMB_SEQ = A.OFT_CMB_SEQ )" ).append("\n"); 
		query.append("        AND   B2.CHG_CD       NOT IN  (" ).append("\n"); 
		query.append("                                      SELECT  R2.CHG_CD" ).append("\n"); 
		query.append("                                      FROM    R2" ).append("\n"); 
		query.append("                                      WHERE   R2.OFT_CMB_SEQ  = A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                                      AND     R2.CHG_CD       IN ( 'OIH', 'DIH' )" ).append("\n"); 
		query.append("                                      AND     R2.CHG_AMT      = 0" ).append("\n"); 
		query.append("                                      )" ).append("\n"); 
		query.append("        ) = 0" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("        SELECT  COUNT(1)" ).append("\n"); 
		query.append("        FROM    R2" ).append("\n"); 
		query.append("        WHERE   R2.OFT_CMB_SEQ = A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     NOT" ).append("\n"); 
		query.append("                ( R2.CHG_CD IN ( 'OIH', 'DIH' ) AND R2.CHG_AMT = 0 )" ).append("\n"); 
		query.append("        ) = 0" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("D1 AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT  B.BKG_ITM_LOG   ," ).append("\n"); 
		query.append("        C.CTRT_ITM_LOG" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  REPLACE(LTRIM(SYS_CONNECT_BY_PATH(" ).append("\n"); 
		query.append("                  '[' || CHG_CD || ']['" ).append("\n"); 
		query.append("                      || SUBSTR(TO_CHAR(CHG_AMT, '999,999,999.00'), 2) || ' ' || CURR_CD || ']['" ).append("\n"); 
		query.append("                      || SUBSTR(TO_CHAR(CHG_USD_AMT, '999,999.00'), 2) || ' USD' || ']['" ).append("\n"); 
		query.append("                      || RAT_UT_CD || ']['" ).append("\n"); 
		query.append("                      || CGO_CATE_CD || ']['" ).append("\n"); 
		query.append("                      || RCV_TERM_CD || '/' || DE_TERM_CD || ']'" ).append("\n"); 
		query.append("                  ,'^|^'), '^|^'), '^|^', CHR(10)) BKG_ITM_LOG" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  CHG_CD        ," ).append("\n"); 
		query.append("                        CURR_CD       ," ).append("\n"); 
		query.append("                        CHG_UT_AMT    ," ).append("\n"); 
		query.append("                        RAT_AS_QTY    ," ).append("\n"); 
		query.append("                        RAT_UT_CD     ," ).append("\n"); 
		query.append("                        CGO_CATE_CD   ," ).append("\n"); 
		query.append("                        RCV_TERM_CD   ," ).append("\n"); 
		query.append("                        DE_TERM_CD    ," ).append("\n"); 
		query.append("                        CHG_AMT       ," ).append("\n"); 
		query.append("                        CHG_USD_AMT   ," ).append("\n"); 
		query.append("                        ROW_NUMBER() OVER ( ORDER BY DECODE(CHG_CD, 'OFT', 1, 'OAR', 2, 'DAR', 3, 4), RAT_UT_CD, CGO_CATE_CD )  ROW_NUMBER  ," ).append("\n"); 
		query.append("                        COUNT(1) OVER () CNT" ).append("\n"); 
		query.append("                FROM    BR" ).append("\n"); 
		query.append("                WHERE   CHG_CD  NOT IN ( 'OFT', 'OAR', 'DAR' )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        WHERE   LEVEL   = CNT" ).append("\n"); 
		query.append("        START WITH ROW_NUMBER = 1" ).append("\n"); 
		query.append("        CONNECT BY" ).append("\n"); 
		query.append("                ROW_NUMBER        = PRIOR ROW_NUMBER + 1" ).append("\n"); 
		query.append("        ) B" ).append("\n"); 
		query.append("        FULL OUTER JOIN" ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  REPLACE(LTRIM(SYS_CONNECT_BY_PATH(" ).append("\n"); 
		query.append("                  '[' || CHG_CD || ']['" ).append("\n"); 
		query.append("                      || SUBSTR(TO_CHAR(CHG_AMT, '999,999,999.00'), 2) || ' ' || CURR_CD || ']['" ).append("\n"); 
		query.append("                      || SUBSTR(TO_CHAR(CHG_USD_AMT, '999,999.00'), 2) || ' USD' || ']['" ).append("\n"); 
		query.append("                      || RAT_UT_CD || ']['" ).append("\n"); 
		query.append("                      || CGO_CATE_CD || ']['" ).append("\n"); 
		query.append("                      || RCV_TERM_CD || '/' || DE_TERM_CD || ']'" ).append("\n"); 
		query.append("                  ,'^|^'), '^|^'), '^|^', CHR(10)) CTRT_ITM_LOG" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  CHG_CD        ," ).append("\n"); 
		query.append("                        CURR_CD       ," ).append("\n"); 
		query.append("                        CHG_UT_AMT    ," ).append("\n"); 
		query.append("                        RAT_AS_QTY    ," ).append("\n"); 
		query.append("                        RAT_UT_CD     ," ).append("\n"); 
		query.append("                        CGO_CATE_CD   ," ).append("\n"); 
		query.append("                        RCV_TERM_CD   ," ).append("\n"); 
		query.append("                        DE_TERM_CD    ," ).append("\n"); 
		query.append("                        CHG_AMT       ," ).append("\n"); 
		query.append("                        CHG_USD_AMT   ," ).append("\n"); 
		query.append("                        ROW_NUMBER() OVER ( ORDER BY DECODE(CHG_CD, 'OFT', 1, 'OAR', 2, 'DAR', 3, 4), RAT_UT_CD, CGO_CATE_CD )  ROW_NUMBER  ," ).append("\n"); 
		query.append("                        COUNT(1) OVER () CNT" ).append("\n"); 
		query.append("                FROM    RA" ).append("\n"); 
		query.append("                WHERE   CHG_CD  NOT IN ( 'OFT', 'OAR', 'DAR' )" ).append("\n"); 
		query.append("                AND     NOT EXISTS  (" ).append("\n"); 
		query.append("                                    SELECT  'X'" ).append("\n"); 
		query.append("                                    FROM    BR" ).append("\n"); 
		query.append("                                    WHERE   BR.CHG_CD       = RA.CHG_CD" ).append("\n"); 
		query.append("                                    AND     BR.CHG_USD_AMT  = RA.CHG_USD_AMT" ).append("\n"); 
		query.append("                                    AND     BR.CHK_CHG_AMT  = RA.CHK_CHG_AMT" ).append("\n"); 
		query.append("                                        OR  BR.CHG_CD       = RA.CHG_CD" ).append("\n"); 
		query.append("                                    AND     BR.CHG_USD_AMT  = RA.CHG_USD_AMT" ).append("\n"); 
		query.append("                                    AND     BR.CHK_CHG_AMT <> RA.CHK_CHG_AMT" ).append("\n"); 
		query.append("                                    AND     BR.RAT_UT_CD    = RA.RAT_UT_CD" ).append("\n"); 
		query.append("                                    AND     BR.CGO_CATE_CD  = RA.CGO_CATE_CD" ).append("\n"); 
		query.append("                                    AND     BR.RCV_TERM_CD  = RA.RCV_TERM_CD" ).append("\n"); 
		query.append("                                    AND     BR.DE_TERM_CD   = RA.DE_TERM_CD" ).append("\n"); 
		query.append("                                    UNION ALL" ).append("\n"); 
		query.append("                                    SELECT  'X'" ).append("\n"); 
		query.append("                                    FROM    RS, BS" ).append("\n"); 
		query.append("                                    WHERE   BS.CHG_CD       = RS.CHG_CD" ).append("\n"); 
		query.append("                                    AND     BS.CGO_CATE_CD  = RS.CGO_CATE_CD" ).append("\n"); 
		query.append("                                    AND     BS.RCV_TERM_CD  = RS.RCV_TERM_CD" ).append("\n"); 
		query.append("                                    AND     BS.DE_TERM_CD   = RS.DE_TERM_CD" ).append("\n"); 
		query.append("                                    AND     BS.RAT_AS_QTY   = RS.RAT_AS_QTY" ).append("\n"); 
		query.append("                                    AND     BS.CURR_CD      = RS.CURR_CD" ).append("\n"); 
		query.append("                                    AND     BS.CHG_AMT      = RS.CHG_AMT" ).append("\n"); 
		query.append("                                    AND     BS.RAT_UT_CD    = RS.RAT_UT_CD" ).append("\n"); 
		query.append("                                    --" ).append("\n"); 
		query.append("                                    AND     BS.CHG_CD       = RA.CHG_CD" ).append("\n"); 
		query.append("                                    AND     BS.CHG_USD_AMT  = RA.CHG_USD_AMT" ).append("\n"); 
		query.append("                                    AND     BS.CHK_CHG_AMT  = RA.CHK_CHG_AMT" ).append("\n"); 
		query.append("                                        OR  BS.CHG_CD       = RA.CHG_CD" ).append("\n"); 
		query.append("                                    AND     BS.CHG_USD_AMT  = RA.CHG_USD_AMT" ).append("\n"); 
		query.append("                                    AND     BS.CHK_CHG_AMT <> RA.CHK_CHG_AMT" ).append("\n"); 
		query.append("                                    AND     BS.RAT_UT_CD    = RA.RAT_UT_CD" ).append("\n"); 
		query.append("                                    AND     BS.CGO_CATE_CD  = RA.CGO_CATE_CD" ).append("\n"); 
		query.append("                                    AND     BS.RCV_TERM_CD  = RA.RCV_TERM_CD" ).append("\n"); 
		query.append("                                    AND     BS.DE_TERM_CD   = RA.DE_TERM_CD" ).append("\n"); 
		query.append("                                  )" ).append("\n"); 
		query.append("                AND     CHG_UT_AMT  <> 0" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        WHERE   LEVEL   = CNT" ).append("\n"); 
		query.append("        START WITH ROW_NUMBER = 1" ).append("\n"); 
		query.append("        CONNECT BY" ).append("\n"); 
		query.append("                ROW_NUMBER        = PRIOR ROW_NUMBER + 1" ).append("\n"); 
		query.append("        ) C" ).append("\n"); 
		query.append("        ON 1 = 1" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("D2 AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("SELECT  B.BKG_ITM_LOG   ," ).append("\n"); 
		query.append("        C.CTRT_ITM_LOG" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  'TOTAL AMOUNT : [USD][' || ( SELECT SUBSTR(TO_CHAR(SUM(BR.CHG_USD_AMT), '999,999,999.00'), 2)  FROM BR WHERE BR.CHG_CD NOT IN ( 'OFT', 'OAR', 'DAR' ) ) || ']' BKG_ITM_LOG" ).append("\n"); 
		query.append("        FROM    DUAL" ).append("\n"); 
		query.append("        ) B" ).append("\n"); 
		query.append("        FULL OUTER JOIN" ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  'TOTAL AMOUNT : [USD][' || ( SELECT SUBSTR(TO_CHAR(SUM(RA.CHG_USD_AMT), '999,999,999.00'), 2)  FROM RA WHERE RA.CHG_CD NOT IN ( 'OFT', 'OAR', 'DAR' ) ) || ']'  CTRT_ITM_LOG" ).append("\n"); 
		query.append("        FROM    DUAL" ).append("\n"); 
		query.append("        ) C" ).append("\n"); 
		query.append("        ON 1 = 1" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("SELECT  'F'   UMCH_TP_CD      ," ).append("\n"); 
		query.append("        ( SELECT BKG_ITM_LOG FROM D1 )  || CHR(10) || '-----------------------------------------------' || CHR(10) || ( SELECT BKG_ITM_LOG FROM D2 )  BKG_ITM_LOG     ," ).append("\n"); 
		query.append("        ( SELECT CTRT_ITM_LOG FROM D1 ) || CHR(10) || '-----------------------------------------------' || CHR(10) || ( SELECT CTRT_ITM_LOG FROM D2 ) CTRT_ITM_LOG    ," ).append("\n"); 
		query.append("        'U'   MTCH_UMCH_TP_CD ," ).append("\n"); 
		query.append("        ( SELECT UMCH_TP_DESC FROM BKG_REV_UMCH_TP WHERE UMCH_TP_CD = 'F' ) UMCH_TP_DESC  ," ).append("\n"); 
		query.append("        ( SELECT INTG_CD_VAL_DP_DESC FROM COM_INTG_CD_DTL WHERE INTG_CD_ID = 'CD02456' AND INTG_CD_VAL_CTNT = 'U' ) MTCH_UMCH_TP_DESC" ).append("\n"); 
		query.append("FROM    BK    ," ).append("\n"); 
		query.append("        ( SELECT COUNT(1) CNT FROM C2 ) X1" ).append("\n"); 
		query.append("WHERE   X1.CNT          = 0" ).append("\n"); 
		query.append("AND     BK.RT_BL_TP_CD  NOT IN ( 'B', 'M' )" ).append("\n"); 
		query.append("AND     BK.MEMO_BL_FLG  = 'N'" ).append("\n"); 
		query.append("--AND     BK.BB_CGO_FLG   = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("'D' ERROR 가 아닌 경우에만 'F' 를 표시한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     EXISTS  (" ).append("\n"); 
		query.append("            SELECT  'X'" ).append("\n"); 
		query.append("            FROM    BKG_CHG_RT  CR" ).append("\n"); 
		query.append("            WHERE   CR.BKG_NO   = @[bkg_no]" ).append("\n"); 
		query.append("            AND     NVL(CR.FRT_INCL_XCLD_DIV_CD, 'N') = 'N'" ).append("\n"); 
		query.append("            AND     ROWNUM      = 1" ).append("\n"); 
		query.append("            AND     @[ca_flg]   = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("            UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("            SELECT  'X'" ).append("\n"); 
		query.append("            FROM    BKG_CHG_RT_HIS  CR" ).append("\n"); 
		query.append("            WHERE   CR.BKG_NO   = @[bkg_no]" ).append("\n"); 
		query.append("            AND     CR.CORR_NO  = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값" ).append("\n"); 
		query.append("            AND     NVL(CR.FRT_INCL_XCLD_DIV_CD, 'N') = 'N'" ).append("\n"); 
		query.append("            AND     ROWNUM      = 1" ).append("\n"); 
		query.append("            AND     @[ca_flg]   = 'Y'" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("신규 BKG 만 대상으로 한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     LENGTH(@[bkg_no]) = 12" ).append("\n"); 

	}
}