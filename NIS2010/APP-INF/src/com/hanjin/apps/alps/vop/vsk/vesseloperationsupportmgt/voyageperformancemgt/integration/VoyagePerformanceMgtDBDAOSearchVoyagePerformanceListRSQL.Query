<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="VoyagePerformanceMgtDBDAOSearchVoyagePerformanceListRSQL">
			<desc><![CDATA[Voyage Performance List 조회]]></desc>
			<sql><![CDATA[
SELECT  T1.VSL_SLAN_CD, T1.PF_SKD_TP_CD, T1.VVD, T1.VSL_CD, T1.SKD_VOY_NO, T1.SKD_DIR_CD, T1.CLPT_IND_SEQ
        , T1.VSL_STS
        , T1.FROM_PORT_CD, T1.TO_PORT_CD
        , T1.FM_YD_CD, T1.TO_YD_CD 
        , T1.TO_CLPT_IND_SEQ
        , T1.SKD_DELAY_COLOR_FLAG      AS SIGNAL_SKED_IDX
        , T1.NAVI_SPD_COLOR_FLAG       AS SIGNAL_NAVI_IDX
        , T1.CSM_DAILY_FOC_COLOR_FLAG  AS SIGNAL_FOC_IDX
        , DECODE(T1.SKD_DELAY_COLOR_FLAG    , 'YELLOW', ' SKED', 'RED', ' SKED') ||
          DECODE(T1.NAVI_SPD_COLOR_FLAG     , 'YELLOW', ' Nav' , 'RED', ' Nav' ) ||
          DECODE(T1.CSM_DAILY_FOC_COLOR_FLAG, 'YELLOW', ' FOC' , 'RED', ' FOC' ) AS SIGNAL_INDEX
        , T1.CNTR_DZN_CAPA
        , TO_CHAR(T1.CST_NXT_PORT_ETD_DT,'YYYY-MM-DD HH24:MI') AS CST_NXT_PORT_ETD_DT
        , TO_CHAR(T1.NOON_RPT_DT,'YYYY-MM-DD HH24:MI') AS NOON_RPT_DT 
        , T1.CNTR_DZN_CAPA
        , TO_CHAR(T1.CST_NXT_PF_ETA_DT  ,'YYYY-MM-DD HH24:MI') AS SKD_PF_ETA_DT
        , TO_CHAR(T1.CST_NXT_PORT_ETA_DT,'YYYY-MM-DD HH24:MI') AS SKD_LOC_ETA_DT
        , TO_CHAR(T1.NXT_PORT_ETA_DT    ,'YYYY-MM-DD HH24:MI') AS SKD_RPT_ETA_DT
        , T1.SKD_DELAY_HRS,  T1.SKD_DELAY_COLOR_FLAG, T1.NAVI_RUN_HRS AS NAVI_RUN_HRS
        , ( 
          SELECT  S.OPMZ_SEA_SPD
          FROM    FCM_VSL_PORT_STND_FUEL_OIL  S
          WHERE   S.VSL_CD          = T1.VSL_CD
          AND     S.SKD_VOY_NO      = T1.SKD_VOY_NO
          AND     S.SKD_DIR_CD      = T1.SKD_DIR_CD
          AND     S.VPS_PORT_CD     = T1.FROM_PORT_CD
          AND     S.CLPT_IND_SEQ    = T1.CLPT_IND_SEQ
          ) * T1.NAVI_RUN_HRS                                                   AS NAVI_OPT_DIST  -- Distance Short
        , ROUND(TO_NUMBER(REGEXP_SUBSTR(T1.PPS_SAIL_DIST, '[^@]+', 1, 1)), 1)   AS NAVI_DR_DIST   -- Distance PPS
        , T1.NAVI_NOON_DIST                                                                       -- Distance Noon
        , T1.NAVI_ETA_SPD                                                                         -- Speed ETA
        , TO_NUMBER(REGEXP_SUBSTR(T1.PPS_SAIL_DIST, '[^@]+', 1, 2))             AS NAVI_PPS_SPD   -- Speed PPS
        , T1.NAVI_NOON_SPD                                                                        -- Speed Noon
        , '   Received Date' ||'       '|| 'LAT' ||'       '|| 'LONG' ||'     '|| 'Term' ||'    '|| 'Distance' ||'    '|| 'Speed' ||CHR(13)||'\n'||
          '---------------------------------------------------------------------'                                                 ||CHR(13)||'\n'||
          REGEXP_SUBSTR(T1.PPS_SAIL_DIST, '[^@]+', 1, 3)                        AS PPS_DESC-- NAVI_PPS_POPUP_MSG   -- PPS Message
        , T1.NAVI_SPD_COLOR_FLAG
        , T1.NAVI_RPM, ROUND(T1.NAVI_AVG_SLIP, 1) AS NAVI_AVG_SLIP,  T1.NAVI_NOON_SLIP,  T1.NOON_RPT_EXIST_FLG,  T1.NOON_AVG_SPD,  T1.NOON_SAIL_DIST, '' AS CSM_DAILY_FOC_STD
        , '' AS CSM_DAILY_FOC_T_LINE, T1.PPS_AVG_SPD
        , TO_NUMBER(REGEXP_SUBSTR(T1.PPS_SAIL_DIST, '[^@]+', 1, 1))             AS PPS_SAIL_DIST
        , '' AS CSM_DAILY_FOC_PPS,  T1.CSM_DAILY_FOC_NOON,  T1.CSM_DAILY_FOC_COLOR_FLAG,  '' AS CSM_DAILY_FOC_DIFF
        , T1.CSM_FROM_FOC_STD, '' AS CSM_FROM_AVG_STD, T1.CSM_FROM_AVG_FOC, '' AS CSM_FROM_BALANCE_FOC, '' AS CSM_FROM_ACH_PERCENTAGE,  T1.OPT_FWD_TRIM
        , T1.OPT_AFT_TRIM
        , T1.OPT_TRM
        , T1.OPT_TRM_IMG
        , T1.OPT_BOW_HGT
        , T1.OPT_TRSM_HGT
        , T1.CST_NXT_PORT_ETA_DT
        , T1.TZTM_HRS
#if (${sel_cargo} != '')
        , (
          SELECT  ROUND(S1.GROSS_GC, 1)
          FROM    TDR_HEADER S1
          WHERE   1=1
          AND     S1.VSL_CD       = T1.VSL_CD
          AND     S1.VOY_NO       = T1.SKD_VOY_NO
          AND     S1.DIR_CD       = T1.SKD_DIR_CD
          AND     S1.PORT_CD      = T1.FROM_PORT_CD
          AND     S1.CALL_IND     = T1.CLPT_IND_SEQ
          )                                                                                                                         AS CGO_FROM_GROSS_PROD          -- Productivity/Previous
        , (
          WITH TB_TML_PRD AS (
          SELECT  VSL_CD, VOY_NO, DIR_CD, PORT_CD, CALL_IND, GROSS_GC, ROW_NUMBER() OVER (PARTITION BY VSL_CD, PORT_CD, DIR_CD ORDER BY UPDATE_TIME DESC) AS UPD_RANK_SEQ
          FROM    TDR_HEADER
          WHERE   1=1
          AND     GROSS_GC    > 0
          )
          SELECT  ROUND(AVG(S1.GROSS_GC), 1)
          FROM    TB_TML_PRD S1
          WHERE   1=1
          AND     S1.VSL_CD       = T1.VSL_CD
          AND     S1.PORT_CD      = T1.TO_PORT_CD
          AND     S1.DIR_CD       = T1.CST_NXT_DIR_CD
          AND     S1.UPD_RANK_SEQ <= 3
          )                                                                                                                         AS CGO_TO_GROSS_PROD            -- Productivity/Next
        , (
          SELECT  COUNT(DISTINCT CRANE_ID)
          FROM    BAY_CRANE S1
          WHERE   1 = 1
          AND     T1.VSL_CD        = S1.VSL_CD
          AND     T1.SKD_VOY_NO    = S1.VOY_NO
          AND     T1.SKD_DIR_CD    = S1.DIR_CD
          AND     T1.FROM_PORT_CD  = S1.PORT_CD
          AND     T1.CLPT_IND_SEQ  = S1.CALL_IND
          )                                                                                                                         AS CGO_FROM_STWG_ARRANGEMENT    -- No. of used Crane/Provious/ISTWG
        , (
          WITH TB_AVG_CRANE AS (
          SELECT  S1.VSL_CD,  S1.VOY_NO, S1.DIR_CD, S1.PORT_CD, S1.CALL_IND,
                  ROUND((S1.MVS / (DECODE(TO_NUMBER(SUBSTR(S1.GROSS_WORK,1,INSTR(S1.GROSS_WORK,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_WORK,INSTR(S1.GROSS_WORK,':')+1)/60),0,1,
                  TO_NUMBER(SUBSTR(S1.GROSS_WORK,1,INSTR(S1.GROSS_WORK,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_WORK,INSTR(S1.GROSS_WORK,':')+1)/60)))) /
                  DECODE(S1.MVS / (DECODE(TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60),0,1,
                  TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60))),0,1,
                  (S1.MVS / (DECODE(TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60),0,1,
                  TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60))))),2) AS AVG_CRANE
                 , ROW_NUMBER() OVER (PARTITION BY S1.VSL_CD, S1.DIR_CD, S1.PORT_CD ORDER BY S2.VPS_ETA_DT DESC) AS UPD_RANK_SEQ
                 , ETA
          FROM    TDR_HEADER       S1,
                  VSK_VSL_PORT_SKD S2
          WHERE   1=1
          AND     S1.VSL_CD   = S2.VSL_CD
          AND     S1.VOY_NO   = S2.SKD_VOY_NO
          AND     S1.DIR_CD   = S2.SKD_DIR_CD
          AND     S1.PORT_CD  = S2.VPS_PORT_CD
          AND     S1.CALL_IND = S2.CLPT_IND_SEQ
          )
          SELECT  ROUND(AVG(S1.AVG_CRANE), 2)
          FROM    TB_AVG_CRANE S1
          WHERE   1=1
          AND     S1.VSL_CD       = T1.VSL_CD
          AND     S1.PORT_CD      = T1.FROM_PORT_CD
          AND     S1.DIR_CD       = T1.SKD_DIR_CD
          AND     S1.UPD_RANK_SEQ <= 3
          )                                                                                                                        AS CGO_FROM_AVG_ARRANGEMENT   -- No. of used Crane/Provious/AVG
        , (
          SELECT  ROUND((S1.MVS / (DECODE(TO_NUMBER(SUBSTR(S1.GROSS_WORK,1,INSTR(S1.GROSS_WORK,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_WORK,INSTR(S1.GROSS_WORK,':')+1)/60),0,1,
                  TO_NUMBER(SUBSTR(S1.GROSS_WORK,1,INSTR(S1.GROSS_WORK,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_WORK,INSTR(S1.GROSS_WORK,':')+1)/60)))) /
                  DECODE(S1.MVS / (DECODE(TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60),0,1,
                  TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60))),0,1,
                  (S1.MVS / (DECODE(TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60),0,1,
                  TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60))))),2) AS AVG_CRANE
          FROM    TDR_HEADER       S1
          WHERE   1=1
          AND     S1.VSL_CD         = T1.VSL_CD
          AND     S1.VOY_NO         = T1.SKD_VOY_NO
          AND     S1.DIR_CD         = T1.SKD_DIR_CD
          AND     S1.PORT_CD        = T1.FROM_PORT_CD
          AND     S1.CALL_IND       = T1.CLPT_IND_SEQ         
          )                                                                                                                         AS CGO_FROM_USED_ARRANGEMENT -- No. of used Crane/Provious/USED
        , (
          WITH TB_AVG_CRANE AS (
          SELECT  S1.VSL_CD,  S1.VOY_NO, S1.DIR_CD, S1.PORT_CD, S1.CALL_IND,
                  ROUND((S1.MVS / (DECODE(TO_NUMBER(SUBSTR(S1.GROSS_WORK,1,INSTR(S1.GROSS_WORK,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_WORK,INSTR(S1.GROSS_WORK,':')+1)/60),0,1,
                  TO_NUMBER(SUBSTR(S1.GROSS_WORK,1,INSTR(S1.GROSS_WORK,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_WORK,INSTR(S1.GROSS_WORK,':')+1)/60)))) /
                  DECODE(S1.MVS / (DECODE(TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60),0,1,
                  TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60))),0,1,
                  (S1.MVS / (DECODE(TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60),0,1,
                  TO_NUMBER(SUBSTR(S1.GROSS_GANG,1,INSTR(S1.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(S1.GROSS_GANG,INSTR(S1.GROSS_GANG,':')+1)/60))))),2) AS AVG_CRANE
                 , ROW_NUMBER() OVER (PARTITION BY S1.VSL_CD, S1.DIR_CD, S1.PORT_CD ORDER BY S2.VPS_ETA_DT DESC) AS UPD_RANK_SEQ
                 , ETA
          FROM    TDR_HEADER       S1,
                  VSK_VSL_PORT_SKD S2
          WHERE   1=1
          AND     S1.VSL_CD   = S2.VSL_CD
          AND     S1.VOY_NO   = S2.SKD_VOY_NO
          AND     S1.DIR_CD   = S2.SKD_DIR_CD
          AND     S1.PORT_CD  = S2.VPS_PORT_CD
          AND     S1.CALL_IND = S2.CLPT_IND_SEQ
          )
          SELECT  ROUND(AVG(S1.AVG_CRANE), 2)
          FROM    TB_AVG_CRANE S1
          WHERE   1=1
          AND     S1.VSL_CD       = T1.VSL_CD
          AND     S1.PORT_CD      = T1.TO_PORT_CD
          AND     S1.DIR_CD       = T1.CST_NXT_DIR_CD
          AND     S1.UPD_RANK_SEQ <= 3
          )                                                                                                                         AS CGO_TO_AVG_ARRANGEMENT    -- No. of used Crane/Next/AVG
        , T1.CGO_VOL_TEU_QTY                                                                                                                                     -- Operation/TEU
        , T1.CGO_VOL_WGT                                                                                                                                         -- Operation/WT
        , T1.CGO_BSA_HJS_QTY                                                                                                                                     -- BSA/SML
        , T1.CGO_BSA_ALLIANCE_QTY                                                                                                                                -- BSA/Alliance
        , REGEXP_SUBSTR(CGO_FM_TEU_WGT_BSA_SCG, '[^:]+', 1, 1)                                                                      AS CGO_ONBOARD_TEU_QTY       -- On Board/TEU
        , REGEXP_SUBSTR(CGO_FM_TEU_WGT_BSA_SCG, '[^:]+', 1, 2)                                                                      AS CGO_ONBOARD_WGT           -- On Board/WT
        , CASE
          WHEN T1.CGO_BSA_HJS_QTY+T1.CGO_BSA_ALLIANCE_QTY 	= 0                           THEN '0.0'||'%'
          WHEN T1.CGO_BSA_HJS_QTY+T1.CGO_BSA_ALLIANCE_QTY 	                     IS NULL  THEN '0.0'||'%'
          WHEN TO_NUMBER(REGEXP_SUBSTR(CGO_FM_TEU_WGT_BSA_SCG, '[^:]+', 1, 1))   IS NULL  THEN '0.0'||'%'
          ELSE ROUND(TO_NUMBER(REGEXP_SUBSTR(CGO_FM_TEU_WGT_BSA_SCG, '[^:]+', 1, 1)) / (T1.CGO_BSA_HJS_QTY + T1.CGO_BSA_ALLIANCE_QTY )*100,1)||'%'
          END                                                                                                                       AS CGO_TOTAL_LF_RATIO        -- L/F / TTL
        , CGO_TO_IB_TEU_QTY                                                                                                         AS CGO_TO_IB_TEU_QTY         -- Next Port(TEU) I/B
        , CGO_TO_OB_TEU_QTY                                                                                                         AS CGO_TO_OB_TEU_QTY         -- Next Port(TEU) O/B
        , (
          SELECT  SUM(CASE WHEN (S1.STATUS = 'ST' AND TRIM(S1.PRECELL) IS NOT NULL) THEN 1 ELSE 0 END)
          FROM    TDR_CNTR_DETAIL  S1
          WHERE   1=1
          AND     S1.VSL_CD         = T1.VSL_CD
          AND     S1.VOY_NO         = T1.SKD_VOY_NO
          AND     S1.DIR_CD         = T1.SKD_DIR_CD
          AND     S1.PORT_CD        = T1.FROM_PORT_CD
          AND     S1.CALL_IND       = T1.CLPT_IND_SEQ
          )                                                                                                                         AS CGO_RHDL_QTY              -- R/H RF
        , REGEXP_SUBSTR(CGO_FM_TEU_WGT_BSA_SCG  , '[^:]+', 1, 5)                                                                    AS CGO_RF_QTY                -- On Board/RF
        , REGEXP_SUBSTR(CGO_FM_TEU_WGT_BSA_SCG  , '[^:]+', 1, 6)                                                                    AS CGO_AK_QTY                -- Special Cargo/AWK
        , REGEXP_SUBSTR(CGO_FM_TEU_WGT_BSA_SCG  , '[^:]+', 1, 7)                                                                    AS CGO_BB_QTY                -- Special Cargo/BB
        , CASE
          WHEN NVL(T1.CGO_BSA_ALLIANCE_QTY, 0) = 0 THEN 0
          ELSE (
               TO_NUMBER(REGEXP_SUBSTR(CGO_FM_TEU_WGT_BSA_SCG, '[^:]+', 1, 4))
               ) / DECODE(T1.CGO_BSA_ALLIANCE_QTY, NULL, 1, 0, 1, T1.CGO_BSA_ALLIANCE_QTY) * 100
          END                                                                                                                       AS CGO_LF_ALLIANCE_QTY       -- 화면에서 미사용          
        , CASE
          WHEN NVL(T1.CGO_BSA_HJS_QTY, 0) = 0 THEN 0
          ELSE (
               TO_NUMBER(REGEXP_SUBSTR(CGO_FM_TEU_WGT_BSA_SCG, '[^:]+', 1, 3))
               ) / DECODE(T1.CGO_BSA_HJS_QTY + T1.CGO_BSA_ALLIANCE_QTY, NULL, 1, 0, 1, T1.CGO_BSA_HJS_QTY) * 100
          END                                                                                                                       AS CGO_LF_HJS_QTY            -- 화면에서 미사용
          
#end
FROM    (
        SELECT  T1.VSL_CD
                , T1.SKD_VOY_NO
                , T1.SKD_DIR_CD
                , T1.VPS_PORT_CD                                                                                           AS FROM_PORT_CD
                , T1.CLPT_SEQ
                , T1.CLPT_IND_SEQ
                , T1.CST_NXT_DIR_CD
                , T1.CST_NXT_PORT_CD                                                                                       AS TO_PORT_CD
                , T1.CST_NXT_CLPT_IND_SEQ                                                                                  AS TO_CLPT_IND_SEQ
                , T1.VSL_SLAN_CD                                                                                           AS VSL_SLAN_CD
                , T1.PF_SKD_TP_CD
                , T1.VSL_CD || T1.SKD_VOY_NO || T1.SKD_DIR_CD                                                              AS VVD
                , CASE
                  WHEN NR.NOON_RPT_DT IS NULL THEN
                       CASE 
                       WHEN @[curr_dt] IS NULL THEN
                            CASE
                            WHEN SYSDATE >  T1.VPS_ETD_DT                              THEN 'Underway'
                            WHEN SYSDATE >= T1.VPS_ETB_DT AND SYSDATE <= T1.VPS_ETD_DT THEN 'Berthed'
                            END
                       ELSE
                           CASE
                           WHEN TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD') >  TO_DATE(TO_CHAR(T1.VPS_ETD_DT,'YYYYMMDD'),'YYYYMMDD') THEN
                                'Underway'
                           WHEN (TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD') >= TO_DATE(TO_CHAR(T1.VPS_ETB_DT,'YYYYMMDD'),'YYYYMMDD') AND
                                 TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD') <= TO_DATE(TO_CHAR(T1.VPS_ETD_DT,'YYYYMMDD'),'YYYYMMDD')) THEN
                                'Berthed'
                           END
                       END
                  ELSE
                      'Underway'
                  END                                                                                                      AS VSL_STS
                , T1.YD_CD                                                                                                 AS FM_YD_CD
                , T1.CST_NXT_YD_CD                                                                                         AS TO_YD_CD
                , T1.CST_NXT_PORT_ETD_DT
                , T1.CNTR_DZN_CAPA
                , T1.VPS_ETB_DT
                , T1.PF_ETA_DT 
                , T1.CST_NXT_PF_ETA_DT
                , T1.CST_NXT_PORT_ETA_DT
                , NR.NXT_PORT_ETA_DT
                , ROUND(NVL(NR.NXT_PORT_ETA_DT - T1.CST_NXT_PF_ETA_DT,0)*24,2)                                             AS SKD_DELAY_HRS
                , CASE
                  WHEN NR.NXT_PORT_ETA_DT - T1.CST_NXT_PF_ETA_DT        IS NULL      THEN 'GREEN'
                  WHEN ROUND((NR.NXT_PORT_ETA_DT - T1.CST_NXT_PF_ETA_DT)*24,2) >= 24 THEN 'RED'
                  WHEN ROUND((NR.NXT_PORT_ETA_DT - T1.CST_NXT_PF_ETA_DT)*24,2) <= 0  THEN 'GREEN'
                  ELSE
                      'YELLOW'
                  END                                                                                                      AS SKD_DELAY_COLOR_FLAG
                , NVL2(NR.SAIL_HRMNT,(TO_NUMBER(SUBSTR(NR.SAIL_HRMNT,0,2))+TO_NUMBER(SUBSTR(NR.SAIL_HRMNT,3,2))/60),24.0)  AS NAVI_RUN_HRS
                , NR.NVGT_ML_DIST                                                                                          AS NAVI_NOON_DIST
                , NR.RMN_AVG_SPD                                                                                           AS NAVI_ETA_SPD
                , NR.SAIL_AVG_SPD                                                                                          AS NAVI_NOON_SPD
                , CASE
                  WHEN NR.RMN_AVG_SPD >= 0.3 THEN 'RED'
                  WHEN NR.RMN_AVG_SPD <= 0   THEN 'YELLOW'
                  ELSE 'GREEN'
                  END                                                                                                      AS NAVI_SPD_COLOR_FLAG
                , NR.SAIL_AVG_RPM_PWR                                                                                      AS NAVI_RPM
                , (
                  SELECT  AVG(S3.SLP_RT)
                  FROM    VSK_VSL_PORT_SKD    S1,
                          VSK_VSL_PORT_SKD    S2,
                          FCM_NOON_RPT        S3
                  WHERE   1=1
                  AND     S1.VSL_CD       = S2.VSL_CD
                  AND     S1.SKD_VOY_NO   = S2.SKD_VOY_NO
                  AND     S1.SKD_DIR_CD   = S2.SKD_DIR_CD
                  AND     S1.VPS_PORT_CD  = 'CNYIT'
                  AND     S2.VPS_PORT_CD  = T1.VPS_PORT_CD
                  AND     S1.CLPT_SEQ + 1 = S2.CLPT_SEQ
                  AND     S1.TURN_PORT_IND_CD IN ('Y', 'N')
                  AND     S2.TURN_PORT_IND_CD IN ('Y', 'N')
                  AND     'S'            != NVL(S1.SKD_CNG_STS_CD, ' ')
                  AND     'S'            != NVL(S2.SKD_CNG_STS_CD, ' ')
                  AND     S2.VSL_CD       = S3.VSL_CD
                  AND     S2.SKD_VOY_NO   = S3.SKD_VOY_NO
                  AND     S2.SKD_DIR_CD   = S3.SKD_DIR_CD
                  AND     S2.VPS_PORT_CD  = S3.NXT_PORT_CD                        
                  AND     S3.NOON_RPT_DT  BETWEEN CASE TO_CHAR(NVL(TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD'),SYSDATE),'Q')
                                                  WHEN '1' THEN TO_DATE(TO_CHAR(NVL(TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD'),SYSDATE),'YYYY')||'0101','YYYYMMDD')
                                                  WHEN '2' THEN TO_DATE(TO_CHAR(NVL(TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD'),SYSDATE),'YYYY')||'0401','YYYYMMDD')
                                                  WHEN '3' THEN TO_DATE(TO_CHAR(NVL(TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD'),SYSDATE),'YYYY')||'0701','YYYYMMDD')
                                                  WHEN '4' THEN TO_DATE(TO_CHAR(NVL(TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD'),SYSDATE),'YYYY')||'1001','YYYYMMDD')
                                                  END
                                          AND     CASE TO_CHAR(NVL(TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD'),SYSDATE),'Q')
                                                  WHEN '1' THEN TO_DATE(TO_CHAR(NVL(TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD'),SYSDATE),'YYYY')||'0331','YYYYMMDD')+0.99999
                                                  WHEN '2' THEN TO_DATE(TO_CHAR(NVL(TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD'),SYSDATE),'YYYY')||'0630','YYYYMMDD')+0.99999
                                                  WHEN '3' THEN TO_DATE(TO_CHAR(NVL(TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD'),SYSDATE),'YYYY')||'0930','YYYYMMDD')+0.99999
                                                  WHEN '4' THEN TO_DATE(TO_CHAR(NVL(TO_DATE(REPLACE(@[curr_dt],'-'),'YYYYMMDD'),SYSDATE),'YYYY')||'1231','YYYYMMDD')+0.99999
                                          END
                  )                                                                                                        AS NAVI_AVG_SLIP
                , NR.SLP_RT                                                                                                AS NAVI_NOON_SLIP
                , NVL2(NR.VSL_CD,'Y','N')                                                                                  AS NOON_RPT_EXIST_FLG
                , NR.RMN_AVG_SPD                                                                                           AS NOON_AVG_SPD
                , NR.ENG_ML_DIST                                                                                           AS NOON_SAIL_DIST
                , (
                  SELECT  /*+INDEX_DESC(S XAK01VSK_VSL_PSN_PLNG_DTL) */
                          (S.VSL_SPD + S.VSL_PRE_SPD) / 2
                  FROM    VSK_VSL_PSN_PLNG_DTL     S
                  WHERE   S.VSL_CD                = T1.VSL_CD
                  AND     S.SKD_VOY_NO            = T1.SKD_VOY_NO
                  AND     S.SKD_DIR_CD            = T1.SKD_DIR_CD
                  AND     S.VSL_SPD               > 0
                  AND     S.VSL_PRE_SPD           > 0
                  AND     ROWNUM    = 1
                  )                                                                                                        AS PPS_AVG_SPD
                , (
                    WITH TB_PPS_DIST AS
                    (
                    SELECT  VSL_CD, SKD_VOY_NO, SKD_DIR_CD, VSL_PLNG_DIST, VSL_PRE_SPD, SUM(SUM(CNT)) OVER (PARTITION BY VSL_CD) AS CNT
                            , MSG|| TO_CHAR(ROUND(VSL_PLNG_DIST, 7), '00.0000000') ||'   '|| TO_CHAR( DECODE(VSL_PLNG_DIST, 0, 0, VSL_SPD), '00.0') AS MSG
                    FROM    (
                            SELECT  S.VSL_CD, S.SKD_VOY_NO, S.SKD_DIR_CD, S.VSL_PRE_SPD
                                    , CASE
                                      WHEN  VSL_PLNG_DIST = LAG(S.VSL_PLNG_DIST) OVER (PARTITION BY S.VSL_CD, S.SKD_VOY_NO, S.SKD_DIR_CD ORDER BY PLNG_GEN_LOCL_DT) THEN
                                            0
                                      ELSE
                                            VSL_PLNG_DIST * (6 / PLNG_GEN_DIFF_HRS) -- 6 시간 진행한 거리로 환산
                                      END                 AS VSL_PLNG_DIST
                                    , SUM(
                                      CASE
                                      WHEN  TO_CHAR(S.PLNG_GEN_LOCL_DT, 'YYYYMMDDHH24') = TO_CHAR(SYSDATE - 1, 'YYYYMMDD')||'12' THEN
                                            0
                                      ELSE
                                            1
                                      END
                                      )                     AS CNT
                                    , TO_CHAR(S.PLNG_GEN_LOCL_DT, 'YYYY-MM-DD HH24:MI:SS') ||'   '|| S.VSL_PRE_LAT ||'   '|| S.VSL_PRE_LON ||'   '|| TO_CHAR(ROUND(S.PLNG_GEN_DIFF_HRS), '00') ||'   ' AS MSG
                                    , VSL_SPD
                            FROM    VSK_VSL_PSN_PLNG_DTL     S
                            WHERE   1=1
                            AND     TO_CHAR(S.PLNG_GEN_LOCL_DT, 'YYYYMMDDHH24') IN
                                    (	-- 6 시간 단위로 하루 4번 입력된 것으로 처리.
                                    TO_CHAR(TO_DATE(NVL(REPLACE(@[curr_dt],'-'), TO_CHAR(SYSDATE, 'YYYYMMDD')), 'YYYYMMDD') - 1, 'YYYYMMDD')||'12',
                                    TO_CHAR(TO_DATE(NVL(REPLACE(@[curr_dt],'-'), TO_CHAR(SYSDATE, 'YYYYMMDD')), 'YYYYMMDD') - 1, 'YYYYMMDD')||'18',
                                    TO_CHAR(TO_DATE(NVL(REPLACE(@[curr_dt],'-'), TO_CHAR(SYSDATE, 'YYYYMMDD')), 'YYYYMMDD')    , 'YYYYMMDD')||'00',
                                    TO_CHAR(TO_DATE(NVL(REPLACE(@[curr_dt],'-'), TO_CHAR(SYSDATE, 'YYYYMMDD')), 'YYYYMMDD')    , 'YYYYMMDD')||'06',
                                    TO_CHAR(TO_DATE(NVL(REPLACE(@[curr_dt],'-'), TO_CHAR(SYSDATE, 'YYYYMMDD')), 'YYYYMMDD')    , 'YYYYMMDD')||'12'
                                    )
                            GROUP BY S.VSL_CD, S.SKD_VOY_NO, S.SKD_DIR_CD, S.PLNG_GEN_LOCL_DT, S.VSL_PLNG_DIST, S.PLNG_GEN_DIFF_HRS, S.VSL_PRE_SPD
                                    , TO_CHAR(S.PLNG_GEN_LOCL_DT, 'YYYY-MM-DD HH24:MI:SS') ||'   '|| S.VSL_PRE_LAT ||'   '|| S.VSL_PRE_LON ||'   '|| TO_CHAR(ROUND(S.PLNG_GEN_DIFF_HRS), '00') ||'   '
                                    , VSL_SPD
                            )
                    WHERE   1=1
                    AND     CNT = 1
                    GROUP BY VSL_CD, SKD_VOY_NO, SKD_DIR_CD, VSL_PLNG_DIST, VSL_PRE_SPD, MSG, VSL_SPD
                    ORDER BY VSL_CD, SKD_VOY_NO, SKD_DIR_CD, MSG|| ROUND(VSL_PLNG_DIST, 7) ||'   '|| TO_CHAR( DECODE(VSL_PLNG_DIST, 0, 0, VSL_SPD), '00.0')
                    )
                    SELECT  -- 조회 시점까지 접수된 Position polling 값을 이용하여 좌표간 시간당 Distance x Running Hrs로 PPS로 계산한 평균 운항 거리를 표시함 .
                            -- 만일 Position polling 값이 24시간을 채우지 못할 시에는 접수하지 못한구간은  구간의 평균값으로 계산하여 표시함.
                            SUM(VSL_PLNG_DIST) + SUM( VSL_PLNG_DIST / 6  * (4 - CNT)) ||'@'|| AVG(VSL_PRE_SPD) ||'@'|| REPLACE(WM_CONCAT(MSG), ',', CHR(13))||'@'
                    FROM    TB_PPS_DIST S
                    WHERE   1=1
                    AND     S.VSL_CD         = T1.VSL_CD
                    AND     S.SKD_VOY_NO     IN (T1.SKD_VOY_NO, TURN_SKD_VOY_NO2)
                    AND     S.SKD_DIR_CD     IN (T1.SKD_DIR_CD, TURN_SKD_DIR_CD2)
                  )                                                                                                        AS PPS_SAIL_DIST
                , NVL(NR.MN_FOIL_CSM_QTY,0) + NVL(NR.MN_LOW_SULP_FOIL_CSM_QTY,0) + NVL(NR.MN_DOIL_CSM_QTY,0) + NVL(NR.MN_LOW_SULP_DOIL_CSM_QTY,0) AS CSM_DAILY_FOC_NOON
                , ''                                                                                                       AS CSM_DAILY_FOC_COLOR_FLAG
                , (
                  SELECT  NVL(FO.RVIS_FOIL_CSM,FO.INIT_FOIL_CSM)
                  FROM    FCM_VSL_PORT_STND_FUEL_OIL   FO
                  WHERE   1 = 1
                  AND     FO.VSL_CD         = T1.VSL_CD
                  AND     FO.SKD_VOY_NO     = T1.SKD_VOY_NO
                  AND     FO.SKD_DIR_CD     = T1.SKD_DIR_CD
                  AND     FO.VPS_PORT_CD    = T1.VPS_PORT_CD
                  AND     FO.CLPT_IND_SEQ   = T1.CLPT_IND_SEQ
                  )                                                                                                        AS CSM_FROM_FOC_STD
                , (
                  SELECT  SUM  ( NVL(NR.MN_FOIL_CSM_QTY          , 0) 
                               + NVL(NR.MN_LOW_SULP_FOIL_CSM_QTY , 0) 
                               + NVL(NR.MN_DOIL_CSM_QTY          , 0) 
                               + NVL(NR.MN_LOW_SULP_DOIL_CSM_QTY , 0) 
                               + NVL(NR.GNR_FOIL_CSM_QTY         , 0) 
                               + NVL(NR.GNR_LOW_SULP_FOIL_CSM_QTY, 0)
                               )
                  FROM    FCM_NOON_RPT                 NR
                  WHERE   1 = 1
                  AND     NR.VSL_CD          =  T1.VSL_CD
                  AND     NR.SKD_VOY_NO      =  T1.SKD_VOY_NO
                  AND     NR.SKD_DIR_CD      =  T1.SKD_DIR_CD
                  AND     NR.NXT_PORT_CD     =  T1.CST_NXT_PORT_CD
                  AND     NR.NOON_RPT_DT     <= NR.NOON_RPT_DT
                  )                                                                                                         AS CSM_FROM_AVG_FOC
                , DR.DEP_FWDDR_HGT                                                                                          AS OPT_FWD_TRIM
                , DR.DEP_AFTDR_HGT                                                                                          AS OPT_AFT_TRIM
                , DR.DEP_FWDDR_HGT - DR.DEP_AFTDR_HGT                                                                       AS OPT_TRM
                , DR.DEP_FWDDR_HGT - DR.DEP_AFTDR_HGT                                                                       AS OPT_TRM_IMG
                , AD.BOW_HGT                                                                                                AS OPT_BOW_HGT
                , AD.TRSM_HGT                                                                                               AS OPT_TRSM_HGT
                , NR.NOON_RPT_DT, T1.VPS_ETD_DT
                , NVL(T1.TZTM_HRS,  (
                                    SELECT S.TZTM_HRS
                                    FROM   VSK_PF_SKD_DTL S
                                    WHERE  1=1
                                    AND    T1.VSL_SLAN_CD   = S.VSL_SLAN_CD
                                    AND    T1.PF_SKD_TP_CD  = S.PF_SVC_TP_CD
                                    AND    T1.SKD_DIR_CD    = S.SKD_DIR_CD
                                    AND    T1.VPS_PORT_CD   = S.PORT_CD
                                    AND    T1.CLPT_IND_SEQ  = S.CLPT_SEQ
                                    )
                  )                                                                                                         AS TZTM_HRS
#if (${sel_cargo} != '')
                , CASE (SELECT X.VSL_SLAN_DIR_SEQ FROM MDM_VSL_SVC_LANE_DIR X WHERE X.VSL_SLAN_CD = T1.VSL_SLAN_CD AND X.VSL_SLAN_DIR_CD = T1.SKD_DIR_CD)
                        WHEN 1 THEN LC.HD_HUL_HC_INCL_QTY
                        WHEN 2 THEN LC.BAK_HUL_HC_INCL_QTY
                        ELSE NULL
                  END                                                                                                       AS CGO_VOL_TEU_QTY
                , CASE (SELECT X.VSL_SLAN_DIR_SEQ FROM MDM_VSL_SVC_LANE_DIR X WHERE X.VSL_SLAN_CD = T1.VSL_SLAN_CD AND X.VSL_SLAN_DIR_CD = T1.SKD_DIR_CD)
                        WHEN 1 THEN LC.HD_HUL_TTL_WGT
                        WHEN 2 THEN LC.BAK_HUL_TTL_WGT
                        ELSE NULL
                  END                                                                                                       AS CGO_VOL_WGT
                , TO_NUMBER(REGEXP_SUBSTR(T1.BSA, '[^:]+', 1, 1))                                                           AS CGO_BSA_HJS_QTY
                , TO_NUMBER(REGEXP_SUBSTR(T1.BSA, '[^:]+', 1, 2))                                                           AS CGO_BSA_ALLIANCE_QTY
                , (
                  SELECT  SUM(CASE
                              WHEN (SUBSTR(S1.SZTP, 2, 1) = '2') THEN 1
                              ELSE                                    2
                              END
                              )                                                                                   ||':'||
                          SUM(TO_NUMBER(S1.WEIGHT))                                                               ||':'||
                          SUM(CASE
                              WHEN (S1.OPR_CD || S1.FE || SUBSTR(S1.SZTP, 2, 1) = 'SMLF2') THEN 1
                              WHEN (S1.OPR_CD || S1.FE                          = 'SMLF' ) THEN 2
                              ELSE                                                              0
                              END
                              )                                                                                   ||':'||
                          SUM(CASE
                              WHEN (S1.OPR_CD                                   = 'SML'  ) THEN 0
                              WHEN (S1.FE || SUBSTR(S1.SZTP, 2, 1)              = 'F2'   ) THEN 1
                              WHEN (S1.FE                                       = 'F'    ) THEN 2
                              ELSE                                                              0
                              END
                              )                                                                                   ||':'||
                          SUM(CASE WHEN S1.FE || S1.CARGO_TYPE = 'FRF' AND S1.TEMP IS NOT NULL THEN 1 ELSE 0 END) ||':'||
                          SUM(CASE WHEN S1.FE || S1.CARGO_TYPE = 'FAK'                         THEN 1 ELSE 0 END) ||':'||
                          SUM(CASE WHEN S1.FE || S1.CARGO_TYPE = 'FBB'                         THEN 1 ELSE 0 END) ||':'
                  FROM    BAY_PLAN     S1
                  WHERE   1=1
                  AND     S1.PLAN_TYPE     = 'F'
                  AND     S1.VSL_CD         = T1.VSL_CD
                  AND     S1.VOY_NO         = T1.SKD_VOY_NO
                  AND     S1.DIR_CD         = T1.SKD_DIR_CD
                  AND     S1.PORT_CD        = T1.VPS_PORT_CD
                  AND     S1.CALL_IND       = T1.CLPT_IND_SEQ
                  )                                                                                                         AS CGO_FM_TEU_WGT_BSA_SCG
                , (
                  SELECT  SUM(CASE
                              WHEN (SUBSTR(S1.SZTP, 2, 1) = '2') THEN 1
                              ELSE                                    2
                              END
                             ) 
                  FROM    BAY_PLAN     S1
                  WHERE   1=1
                  AND     S1.PLAN_TYPE       = 'F'
                  AND     S1.VSL_CD          = T1.VSL_CD
                  AND     S1.VOY_NO          = T1.SKD_VOY_NO
                  AND     S1.DIR_CD          = T1.SKD_DIR_CD
                  AND     S1.PORT_CD         = T1.VPS_PORT_CD
                  AND     S1.CALL_IND        = T1.CLPT_IND_SEQ
                  AND     S1.POD_ISO         = T1.CST_NXT_PORT_CD
                  )                                                                                                         AS CGO_TO_IB_TEU_QTY
                , (
                  SELECT  NVL(SUM(CASE
                              WHEN (SUBSTR(S2.CNTR_TPSZ_CD, 2, 1) = '2') THEN 1
                              ELSE                                    2
                              END
                              ), 0)  AS OB_TEU        -- SML Q'ty (FULL, EMPTY 포함)
                  FROM    BKG_VVD         S1,
                          BKG_CONTAINER   S2
                  WHERE   S1.BKG_NO           = S2.BKG_NO
                  AND     S1.VSL_CD           = T1.VSL_CD
                  AND     S1.SKD_VOY_NO       = T1.CST_NXT_VOY_NO
                  AND     S1.SKD_DIR_CD       = T1.CST_NXT_DIR_CD
                  AND     S1.POL_CD           = T1.CST_NXT_PORT_CD
                  AND     S1.POL_CLPT_IND_SEQ = T1.CST_NXT_CLPT_IND_SEQ
                  ) +
                  (
                  SELECT  /*+ INDEX_DESC (S1 XAK12VSK_VSL_PORT_SKD)*/
                          ROUND(AVG(
                                      (
                                      SELECT  SUM(CASE
                                              WHEN (SUBSTR(S2.SZTP, 2, 1) = '2') THEN 1
                                              ELSE                                    2
                                              END
                                              ) AS QTY
                                      FROM   BAY_PLAN          S2
                                      WHERE  1=1
                                      AND    S2.PLAN_TYPE  = 'F'
                                      AND    S2.OPR_CD    <> 'SML'
                                      AND    S1.VSL_CD       = S2.VSL_CD
                                      AND    S1.SKD_VOY_NO   = S2.VOY_NO
                                      AND    S1.SKD_DIR_CD   = S2.DIR_CD
                                      AND    S1.VPS_PORT_CD  = S2.PORT_CD
                                      AND    S1.CLPT_IND_SEQ = S2.CALL_IND
                                      AND    S1.VPS_PORT_CD  = S2.POL 
                                      )
                          ))                              AS AVG_QTY  -- SML 제외 최근 기항 3개 VVD 평균
                  FROM    VSK_VSL_PORT_SKD S1
                  WHERE   S1.VSL_CD           = T1.VSL_CD
                  AND     S1.VPS_PORT_CD      = T1.CST_NXT_PORT_CD
                  AND     S1.SKD_DIR_CD       = T1.CST_NXT_DIR_CD
                  AND     EXISTS
                          (
                          SELECT  'Y'
                          FROM    BAY_PLAN S2
                          WHERE   S1.VSL_CD       = S2.VSL_CD
                          AND     S1.SKD_VOY_NO   = S2.VOY_NO
                          AND     S1.SKD_DIR_CD   = S2.DIR_CD
                          AND     S1.VPS_PORT_CD  = S2.PORT_CD
                          AND     S1.CLPT_IND_SEQ = S2.CALL_IND
                          AND     ROWNUM          = 1
                          )
                  AND     ROWNUM  <= 3                  
                  )                                                                                                         AS CGO_TO_OB_TEU_QTY
#end
        FROM      (
                  SELECT  T1.*
                          , (
                            SELECT  NVL(S2.FNL_HJS_BSA_CAPA, 0) ||':'|| DECODE(S2.HJS_BSA_RTO, 1, 0, NVL(S2.BSA_CAPA, 0) - NVL(S2.FNL_HJS_BSA_CAPA, 0))||':'
                            FROM    MDM_DTL_REV_LANE S1, BSA_VVD_MST S2
                            WHERE   S1.RLANE_CD         = S2.RLANE_CD
                            AND     S1.VSL_SLAN_DIR_CD  = S2.SKD_DIR_CD
                            AND     S2.VSL_CD           = T1.VSL_CD
                            AND     S2.SKD_VOY_NO       = T1.SKD_VOY_NO
                            AND     S2.SKD_DIR_CD       = T1.SKD_DIR_CD            
                            AND     S1.FM_CONTI_CD      = T1.FM_CONTI_CD    
                            AND     S1.TO_CONTI_CD      = T1.TO_CONTI_CD
                            AND     S1.RLANE_CD         LIKE T1.VSL_SLAN_CD || '%'
                            AND     S1.DELT_FLG         = 'N'
                            )                                                   AS BSA
                          , (
                            SELECT  /*+INDEX_DESC(S1 XPKFCM_NOON_RPT) */
                                    S1.NOON_RPT_DT
                            FROM    FCM_NOON_RPT    S1
                            WHERE   S1.VSL_CD       = T1.VSL_CD
                            AND     S1.SKD_VOY_NO   = T1.SKD_VOY_NO
                            AND     S1.SKD_DIR_CD   = T1.SKD_DIR_CD
                            AND     S1.NXT_PORT_CD  = T1.CST_NXT_PORT_CD
                            AND     ROWNUM          = 1
                            )                                                   AS PK_NN_RPT_DT
                  FROM    (
                          SELECT    T3.VSL_CD
                                  , T3.SKD_VOY_NO
                                  , T3.SKD_DIR_CD
                                  , T4.VSL_SLAN_DIR_SEQ
                                  , T3.VPS_PORT_CD
                                  , T3.CLPT_IND_SEQ
                                  , T3.CLPT_SEQ
                                  , T3.YD_CD
                                  , T3.PF_ETA_DT
                                  , T3.VPS_ETA_DT
                                  , T3.VPS_ETB_DT
                                  , T3.VPS_ETD_DT
                                  , T3.TZTM_HRS
                                  , T3.SLAN_CD AS VSL_SLAN_CD
                                  , T2.PF_SKD_TP_CD
                                  , LAG (T3.SKD_VOY_NO   ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_PRE_VOY_NO
                                  , LAG (T3.SKD_DIR_CD   ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_PRE_DIR_CD
                                  , LAG (T3.VPS_PORT_CD  ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_PRE_PORT_CD
                                  , LAG (T3.CLPT_IND_SEQ ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_PRE_IND_SEQ
                                  , LEAD(T3.SKD_VOY_NO   ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_NXT_VOY_NO
                                  , LEAD(T3.SKD_DIR_CD   ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_NXT_DIR_CD
                                  , LEAD(T3.VPS_PORT_CD  ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_NXT_PORT_CD
                                  , LEAD(T3.CLPT_IND_SEQ ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_NXT_CLPT_IND_SEQ
                                  , LEAD(T3.VPS_ETA_DT   ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_NXT_PORT_ETA_DT
                                  , LEAD(T3.VPS_ETD_DT   ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_NXT_PORT_ETD_DT
                                  , LEAD(T3.YD_CD        ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_NXT_YD_CD
                                  , LEAD(T3.PF_ETA_DT    ) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS CST_NXT_PF_ETA_DT
                                  , FIRST_VALUE(T3.TURN_SKD_VOY_NO) OVER (PARTITION BY T3.VSL_CD, T3.SKD_VOY_NO, T3.SKD_DIR_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS TURN_SKD_VOY_NO2
                                  , FIRST_VALUE(T3.TURN_SKD_DIR_CD) OVER (PARTITION BY T3.VSL_CD, T3.SKD_VOY_NO, T3.SKD_DIR_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)        AS TURN_SKD_DIR_CD2
                                  , T1.CNTR_DZN_CAPA
                                  , T1.RF_RCPT_MAX_KNT
                                  ,  CASE
                                     WHEN T3.VPS_PORT_CD IN ('EGSUZ', 'PAPAC') THEN
                                          LAG(T5.CONTI_CD) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)
                                     ELSE
                                          T5.CONTI_CD
                                     END     AS FM_CONTI_CD
                                  ,  CASE
                                     WHEN LEAD(T3.VPS_PORT_CD) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ) IN ('EGSUZ', 'PAPAC') THEN
                                          T5.CONTI_CD
                                     ELSE
                                          LEAD(T5.CONTI_CD) OVER (PARTITION BY T3.VSL_CD ORDER BY T3.SKD_VOY_NO, T4.VSL_SLAN_DIR_SEQ, T3.CLPT_SEQ)
                                     END     AS TO_CONTI_CD
                          FROM    (
                                  SELECT  T2.VSL_CD, T1.CNTR_DZN_CAPA, T1.RF_RCPT_MAX_KNT
                                  FROM    MDM_VSL_CNTR        T1,
                                          FCM_VSL_CNTR_RGST   T2
                                  WHERE   1=1
                                  AND     T1.VSL_CD             = T2.VSL_CD
                                  AND     T2.TRND_LINE_USE_FLG  = 'Y'
                                  AND     'N'                   = NVL(T1.VSL_CLSS_FLG, ' ')
                                  AND     T1.DELT_FLG           = 'N'
                                  AND     T1.FDR_DIV_CD         = 'T'
                                  #if (${vvd} != '')
                                  AND     T1.VSL_CD             = SUBSTR(@[vvd], 1, 4)
                                  #end
                                  AND     T1.VSL_CD             IN (
                                                                  SELECT  SUBSTR(MAX(S1.VSL_CD || TO_CHAR(EXP_DT, 'YYYYMMDD')), 1, 4)
                                                                  FROM    FMS_CONTRACT S1
                                                                  WHERE   1=1
                                                                  AND     S1.FLET_CTRT_TP_CD  != 'TO'
                                                                  AND     S1.EXP_DT           > TO_DATE('2011-08-01', 'YYYY-MM-DD')
                                                                  GROUP BY S1.VSL_CD
                                                                  )
                                  #if (${vsl_class_list} != '')
                                  AND     (
                                           #foreach($cntr_dzn_capa in ${vsl_class_list} )
                                               #if($velocityCount < $vsl_class_list.size()) 
                                          T1.CNTR_DZN_CAPA   = '$cntr_dzn_capa' OR
                                               #else 
                                          T1.CNTR_DZN_CAPA   = '$cntr_dzn_capa'
                                               #end
                                           #end
                                          )
                                  #end
                                  )                           T1
                                  , VSK_VSL_SKD               T2 
                                  , VSK_VSL_PORT_SKD          T3
                                  , MDM_VSL_SVC_LANE_DIR      T4
                                  , MDM_LOCATION              T5
                          WHERE   1 = 1
                          AND     T1.VSL_CD           = T2.VSL_CD
                          AND     T2.VSL_CD           = T3.VSL_CD
                          AND     T2.SKD_VOY_NO       = T3.SKD_VOY_NO
                          AND     T2.SKD_DIR_CD       = T3.SKD_DIR_CD
                          AND     T3.SLAN_CD          = T4.VSL_SLAN_CD
                          AND     T3.SKD_DIR_CD       = T4.VSL_SLAN_DIR_CD
                          AND     T3.VPS_PORT_CD      = T5.LOC_CD
                          AND     T3.VPS_ETB_DT       BETWEEN  ADD_MONTHS(TO_DATE(NVL(REPLACE(@[curr_dt],'-'), TO_CHAR(SYSDATE, 'YYYYMMDD')) || SUBSTR(TO_CHAR(T3.VPS_ETB_DT, 'YYYYMMDDHH24MI'), 9, 4), 'YYYYMMDDHH24MI'), -1)
                                                      AND      ADD_MONTHS(TO_DATE(NVL(REPLACE(@[curr_dt],'-'), TO_CHAR(SYSDATE, 'YYYYMMDD')) || SUBSTR(TO_CHAR(T3.VPS_ETB_DT, 'YYYYMMDDHH24MI'), 9, 4), 'YYYYMMDDHH24MI'),  1)
                          AND     T3.TURN_PORT_IND_CD IN ('Y', 'N')
                          AND     'S'                 <> NVL(T3.SKD_CNG_STS_CD, ' ')
                          ) T1
                  WHERE   1=1
                  AND     T1.CST_NXT_PORT_CD IS NOT NULL
                  AND     TO_DATE(NVL(REPLACE(@[curr_dt], '-'), TO_CHAR(SYSDATE, 'YYYYMMDD')) || TO_CHAR(GLOBALDATE_PKG.TIME_CONV_FNC('KRPUS', SYSDATE, T1.CST_NXT_PORT_CD), 'HH24MI'), 'YYYYMMDDHH24MI')
                          BETWEEN T1.VPS_ETB_DT        -- 입력한 날짜 + 도착 PORT Local HH24:MI로 조회 기준을 맞춤.
                          AND     T1.CST_NXT_PORT_ETA_DT
                  #if (${vvd} != '')
                  AND     T1.VSL_CD           = SUBSTR(@[vvd], 1, 4)
                  AND     T1.SKD_VOY_NO       = SUBSTR(@[vvd], 5, 4)
                  AND     T1.SKD_DIR_CD       = SUBSTR(@[vvd], 9, 1)
                  #end
                  #if (${vsl_slan_cd} != '')
                  AND     T1.VSL_SLAN_CD      = @[vsl_slan_cd]
                  #end
                  )                                      T1
                , FCM_NOON_RPT                           NR
                , FCM_DEP_RPT                            DR
                , VSK_VSL_ADD_SPEC                       AD
                , VSK_VSL_LANE_LDB_CAPA                  LC
        WHERE   1 = 1
        AND     T1.VSL_CD               = NR.VSL_CD       (+)
        AND     T1.SKD_VOY_NO           = NR.SKD_VOY_NO   (+)
        AND     T1.SKD_DIR_CD           = NR.SKD_DIR_CD   (+)
        AND     T1.CST_NXT_PORT_CD      = NR.NXT_PORT_CD  (+)
        AND     T1.PK_NN_RPT_DT         = NR.NOON_RPT_DT  (+)
        AND     T1.VSL_CD               = DR.VSL_CD       (+)
        AND     T1.SKD_VOY_NO           = DR.SKD_VOY_NO   (+)
        AND     T1.SKD_DIR_CD           = DR.SKD_DIR_CD   (+)
        AND     T1.VPS_PORT_CD          = DR.DEP_PORT_CD  (+)
        AND     T1.CST_NXT_PORT_CD      = DR.NXT_PORT_CD  (+)
        AND     T1.VSL_CD               = AD.VSL_CD       (+)
        AND     T1.VSL_SLAN_CD          = LC.VSL_SLAN_CD  (+)
        AND     T1.CNTR_DZN_CAPA        = LC.CNTR_DZN_CAPA(+)
        AND     1                       = LC.CAPA_SEQ     (+)
        )  T1
WHERE   1=1
AND     T1.TO_PORT_CD      IS NOT NULL
AND     T1.FROM_PORT_CD    <> T1.TO_PORT_CD
#if (${curr_dt} != '')
AND     DECODE(T1.NOON_RPT_DT,NULL,'y',TO_CHAR(T1.NOON_RPT_DT,'YYYYMMDD')) =
        CASE
        WHEN T1.NOON_RPT_DT IS NULL THEN
             CASE
             WHEN  (REPLACE(@[curr_dt],'-') >= TO_CHAR(T1.VPS_ETB_DT, 'YYYYMMDD') AND REPLACE(@[curr_dt],'-') <= TO_CHAR(T1.CST_NXT_PORT_ETA_DT,'YYYYMMDD')) THEN
                    'y'
             ELSE
                    'X'
             END 
        ELSE
             TO_CHAR(T1.NOON_RPT_DT,'YYYYMMDD')
        END
#end
          -- Signal Index : GREEN,YELLOW,RED --
#if (${signal_idx_green} != '' && ${signal_idx_yellow} != '' && ${signal_idx_red} != '')
AND     1 = 1
#elseif (${signal_idx_green} == '' && ${signal_idx_yellow} == '' && ${signal_idx_red} == '')
AND     1 = 2
#elseif (${signal_idx_green} != '' && ${signal_idx_yellow} != '')
AND     (
        T1.SKD_DELAY_COLOR_FLAG               IN (@[signal_idx_green],@[signal_idx_yellow]) OR
        T1.NAVI_SPD_COLOR_FLAG                IN (@[signal_idx_green],@[signal_idx_yellow]) OR
        T1.CSM_DAILY_FOC_COLOR_FLAG           IN (@[signal_idx_green],@[signal_idx_yellow])
        )
#elseif (${signal_idx_green} != '' && ${signal_idx_red} != '')
AND     (
        T1.SKD_DELAY_COLOR_FLAG               IN (@[signal_idx_green],@[signal_idx_red]) OR
        T1.NAVI_SPD_COLOR_FLAG                IN (@[signal_idx_green],@[signal_idx_red]) OR
        T1.CSM_DAILY_FOC_COLOR_FLAG           IN (@[signal_idx_green],@[signal_idx_red])
        )
#elseif (${signal_idx_yellow} != '' && ${signal_idx_red} != '')
AND     (
        T1.SKD_DELAY_COLOR_FLAG               IN (@[signal_idx_yellow],@[signal_idx_red]) OR
        T1.NAVI_SPD_COLOR_FLAG                IN (@[signal_idx_yellow],@[signal_idx_red]) OR
        T1.CSM_DAILY_FOC_COLOR_FLAG           IN (@[signal_idx_yellow],@[signal_idx_red])
        )
#elseif (${signal_idx_green} != '')
AND     (
        T1.SKD_DELAY_COLOR_FLAG               = @[signal_idx_green] OR
        T1.NAVI_SPD_COLOR_FLAG                = @[signal_idx_green] OR
        T1.CSM_DAILY_FOC_COLOR_FLAG           = @[signal_idx_green]
        )
#elseif (${signal_idx_yellow} != '')
AND     (
        T1.SKD_DELAY_COLOR_FLAG               = @[signal_idx_yellow] OR
        T1.NAVI_SPD_COLOR_FLAG                = @[signal_idx_yellow] OR
        T1.CSM_DAILY_FOC_COLOR_FLAG           = @[signal_idx_yellow]
        )
#elseif (${signal_idx_red} != '')
AND     (
        T1.SKD_DELAY_COLOR_FLAG                 = @[signal_idx_red] OR
        T1.NAVI_SPD_COLOR_FLAG                  = @[signal_idx_red] OR
        T1.CSM_DAILY_FOC_COLOR_FLAG             = @[signal_idx_red]
        )
#end
           -- Port Pair --
#if (${vsl_port_list} != '')
AND    (T1.FROM_PORT_CD, T1.TO_PORT_CD) IN (
      #foreach($vsl_port in ${vsl_port_list} )
          #if($velocityCount < $vsl_port_list.size())
        (SUBSTR('$vsl_port',1,5),SUBSTR('$vsl_port',9,5)) ,
          #else
        (SUBSTR('$vsl_port',1,5),SUBSTR('$vsl_port',9,5))
          #end
      #end
      )
#end
#if (${vvd} != '')
ORDER BY  T1.CLPT_SEQ           ASC
        , T1.NOON_RPT_DT        ASC
#else
ORDER BY  T1.VSL_CD             ASC
        , T1.SKD_VOY_NO         ASC
        , T1.SKD_DIR_CD         ASC
        , T1.FROM_PORT_CD       ASC
        , T1.TO_PORT_CD         ASC
        , T1.VPS_ETB_DT         ASC
#end			]]></sql>
			<params>
				<param name="curr_dt" type="12" value="" out="N"/>
				<param name="vvd" type="12" value="" out="N"/>
				<param name="vsl_slan_cd" type="12" value="" out="N"/>
				<param name="signal_idx_green" type="12" value="" out="N"/>
				<param name="signal_idx_yellow" type="12" value="" out="N"/>
				<param name="signal_idx_red" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
