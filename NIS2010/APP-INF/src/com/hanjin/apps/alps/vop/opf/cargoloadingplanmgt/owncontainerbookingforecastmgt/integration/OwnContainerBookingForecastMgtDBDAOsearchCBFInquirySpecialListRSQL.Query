<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="OwnContainerBookingForecastMgtDBDAOsearchCBFInquirySpecialListRSQL">
			<desc><![CDATA[searchCBFInquirySpecialList
2011.06.27 
Ticket ID : [CHM-201111635-01]
개발자  : 이준범
제   목 : R9신규코드추가 관련 로직 추가
내   용 : Ultra Freezer container (R9) 추가로 인하여 해당 R9을 D5로 인식하여 표시될수 있도록 SQL문 수정
-------------------------------------------------------------------------------------------------------------------
2012.12.03 CHM-201221299-01 이혜민 신규 장비 R8 을 40’HC으로 분류하여 CBF 및 COD 메뉴에 반영
2013.06.20 CHM-201324915 SKY  CBF – POD TMNL code로 구분]]></desc>
			<sql><![CDATA[
SELECT DECODE(POD,'G.Total','G.Total',SUBSTR(POD,1,5)) AS POD,
       DECODE(POD,'','',SUBSTR(POD,12,2)) AS POD_YD_CD,
       MLB,
#if (${qty1} != '')
       OPR1,
       DG_20_OPR1, DG_2H_OPR1, DG_40_OPR1, DG_4H_OPR1,
       DG_45_OPR1, RF_20_OPR1, RF_2H_OPR1, RF_40_OPR1,
       RF_4H_OPR1, RF_45_OPR1, AK_20_OPR1, AK_40_OPR1,
       AK_4H_OPR1, AK_45_OPR1, BB_20_OPR1, BB_40_OPR1,
	   STWG_20_OPR1, STWG_2H_OPR1, STWG_40_OPR1, STWG_4H_OPR1, STWG_45_OPR1,
#end
#if (${qty2} != '')
       OPR2,
       DG_20_OPR2, DG_2H_OPR2, DG_40_OPR2, DG_4H_OPR2,
       DG_45_OPR2, RF_20_OPR2, RF_2H_OPR2, RF_40_OPR2,
       RF_4H_OPR2, RF_45_OPR2, AK_20_OPR2, AK_40_OPR2,
       AK_4H_OPR2, AK_45_OPR2, BB_20_OPR2, BB_40_OPR2,
	   STWG_20_OPR2, STWG_2H_OPR2, STWG_40_OPR2, STWG_4H_OPR2, STWG_45_OPR2,
#end
#if (${qty3} != '')
       OPR3,
       DG_20_OPR3, DG_2H_OPR3, DG_40_OPR3, DG_4H_OPR3,
       DG_45_OPR3, RF_20_OPR3, RF_2H_OPR3, RF_40_OPR3,
       RF_4H_OPR3, RF_45_OPR3, AK_20_OPR3, AK_40_OPR3,
       AK_4H_OPR3, AK_45_OPR3, BB_20_OPR3, BB_40_OPR3,
	   STWG_20_OPR3, STWG_2H_OPR3, STWG_40_OPR3, STWG_4H_OPR3, STWG_45_OPR3,
#end
#if (${qty4} != '')
       OPR4,
       DG_20_OPR4, DG_2H_OPR4, DG_40_OPR4, DG_4H_OPR4,
       DG_45_OPR4, RF_20_OPR4, RF_2H_OPR4, RF_40_OPR4,
       RF_4H_OPR4, RF_45_OPR4, AK_20_OPR4, AK_40_OPR4,
       AK_4H_OPR4, AK_45_OPR4, BB_20_OPR4, BB_40_OPR4,
	   STWG_20_OPR4, STWG_2H_OPR4, STWG_40_OPR4, STWG_4H_OPR4, STWG_45_OPR4,
#end
#if (${qty5} != '')
       OPR5,
       DG_20_OPR5, DG_2H_OPR5, DG_40_OPR5, DG_4H_OPR5,
       DG_45_OPR5, RF_20_OPR5, RF_2H_OPR5, RF_40_OPR5,
       RF_4H_OPR5, RF_45_OPR5, AK_20_OPR5, AK_40_OPR5,
       AK_4H_OPR5, AK_45_OPR5, BB_20_OPR5, BB_40_OPR5,
	   STWG_20_OPR5, STWG_2H_OPR5, STWG_40_OPR5, STWG_4H_OPR5, STWG_45_OPR5,
#end
       DG_20_OPR1+DG_20_OPR2+DG_20_OPR3+DG_20_OPR4+DG_20_OPR5 DG_20_TOT,
       DG_2H_OPR1+DG_2H_OPR2+DG_2H_OPR3+DG_2H_OPR4+DG_2H_OPR5 DG_2H_TOT,
       DG_40_OPR1+DG_40_OPR2+DG_40_OPR3+DG_40_OPR4+DG_40_OPR5 DG_40_TOT,
       DG_4H_OPR1+DG_4H_OPR2+DG_4H_OPR3+DG_4H_OPR4+DG_4H_OPR5 DG_4H_TOT,
       DG_45_OPR1+DG_45_OPR2+DG_45_OPR3+DG_45_OPR4+DG_45_OPR5 DG_45_TOT,
       RF_20_OPR1+RF_20_OPR2+RF_20_OPR3+RF_20_OPR4+RF_20_OPR5 RF_20_TOT,
       RF_2H_OPR1+RF_2H_OPR2+RF_2H_OPR3+RF_2H_OPR4+RF_2H_OPR5 RF_2H_TOT,
       RF_40_OPR1+RF_40_OPR2+RF_40_OPR3+RF_40_OPR4+RF_40_OPR5 RF_40_TOT,
       RF_4H_OPR1+RF_4H_OPR2+RF_4H_OPR3+RF_4H_OPR4+RF_4H_OPR5 RF_4H_TOT,
       RF_45_OPR1+RF_45_OPR2+RF_45_OPR3+RF_45_OPR4+RF_45_OPR5 RF_45_TOT,
       AK_20_OPR1+AK_20_OPR2+AK_20_OPR3+AK_20_OPR4+AK_20_OPR5 AK_20_TOT,
       AK_40_OPR1+AK_40_OPR2+AK_40_OPR3+AK_40_OPR4+AK_40_OPR5 AK_40_TOT,
       AK_4H_OPR1+AK_4H_OPR2+AK_4H_OPR3+AK_4H_OPR4+AK_4H_OPR5 AK_4H_TOT,
       AK_45_OPR1+AK_45_OPR2+AK_45_OPR3+AK_45_OPR4+AK_45_OPR5 AK_45_TOT,
       BB_20_OPR1+BB_20_OPR2+BB_20_OPR3+BB_20_OPR4+BB_20_OPR5 BB_20_TOT,
       BB_40_OPR1+BB_40_OPR2+BB_40_OPR3+BB_40_OPR4+BB_40_OPR5 BB_40_TOT,
	   STWG_20_OPR1+STWG_20_OPR2+STWG_20_OPR3+STWG_20_OPR4+STWG_20_OPR5 STWG_20_TOT,
       STWG_2H_OPR1+STWG_2H_OPR2+STWG_2H_OPR3+STWG_2H_OPR4+STWG_2H_OPR5 STWG_2H_TOT,
       STWG_40_OPR1+STWG_40_OPR2+STWG_40_OPR3+STWG_40_OPR4+STWG_40_OPR5 STWG_40_TOT,
       STWG_4H_OPR1+STWG_4H_OPR2+STWG_4H_OPR3+STWG_4H_OPR4+STWG_4H_OPR5 STWG_4H_TOT,
       STWG_45_OPR1+STWG_45_OPR2+STWG_45_OPR3+STWG_45_OPR4+STWG_45_OPR5 STWG_45_TOT
FROM ( SELECT CASE 
              WHEN P=1 AND M=1 THEN 'G.Total'
              ELSE POD
              END  POD,
              CASE 
              WHEN P=0 AND M=1 THEN 'S.Total'
              ELSE MLB
              END  MLB,
              OPR1,
              DG_20_OPR1, DG_2H_OPR1, DG_40_OPR1, DG_4H_OPR1,
              DG_45_OPR1, RF_20_OPR1, RF_2H_OPR1, RF_40_OPR1,
              RF_4H_OPR1, RF_45_OPR1, AK_20_OPR1, AK_40_OPR1,
              AK_4H_OPR1, AK_45_OPR1, BB_20_OPR1, BB_40_OPR1,
			  STWG_20_OPR1, STWG_2H_OPR1, STWG_40_OPR1, STWG_4H_OPR1, STWG_45_OPR1,
              OPR2,
              DG_20_OPR2, DG_2H_OPR2, DG_40_OPR2, DG_4H_OPR2,
              DG_45_OPR2, RF_20_OPR2, RF_2H_OPR2, RF_40_OPR2,
              RF_4H_OPR2, RF_45_OPR2, AK_20_OPR2, AK_40_OPR2,
              AK_4H_OPR2, AK_45_OPR2, BB_20_OPR2, BB_40_OPR2,
			  STWG_20_OPR2, STWG_2H_OPR2, STWG_40_OPR2, STWG_4H_OPR2, STWG_45_OPR2,
              OPR3,
              DG_20_OPR3, DG_2H_OPR3, DG_40_OPR3, DG_4H_OPR3,
              DG_45_OPR3, RF_20_OPR3, RF_2H_OPR3, RF_40_OPR3,
              RF_4H_OPR3, RF_45_OPR3, AK_20_OPR3, AK_40_OPR3,
              AK_4H_OPR3, AK_45_OPR3, BB_20_OPR3, BB_40_OPR3,
			  STWG_20_OPR3, STWG_2H_OPR3, STWG_40_OPR3, STWG_4H_OPR3, STWG_45_OPR3,
              OPR4,
              DG_20_OPR4, DG_2H_OPR4, DG_40_OPR4, DG_4H_OPR4,
              DG_45_OPR4, RF_20_OPR4, RF_2H_OPR4, RF_40_OPR4,
              RF_4H_OPR4, RF_45_OPR4, AK_20_OPR4, AK_40_OPR4,
              AK_4H_OPR4, AK_45_OPR4, BB_20_OPR4, BB_40_OPR4,
			  STWG_20_OPR4, STWG_2H_OPR4, STWG_40_OPR4, STWG_4H_OPR4, STWG_45_OPR4,
              OPR5,
              DG_20_OPR5, DG_2H_OPR5, DG_40_OPR5, DG_4H_OPR5,
              DG_45_OPR5, RF_20_OPR5, RF_2H_OPR5, RF_40_OPR5,
              RF_4H_OPR5, RF_45_OPR5, AK_20_OPR5, AK_40_OPR5,
              AK_4H_OPR5, AK_45_OPR5, BB_20_OPR5, BB_40_OPR5,
			  STWG_20_OPR5, STWG_2H_OPR5, STWG_40_OPR5, STWG_4H_OPR5, STWG_45_OPR5,
              P.SEQ
       FROM   ( SELECT (POD||POD_CLPT_IND_SEQ||POD_YD_CD) AS POD, MLB,
                       GROUPING(POD||POD_CLPT_IND_SEQ||POD_YD_CD) P, GROUPING(MLB) M,
                       CASE
                       WHEN GROUPING(POD||POD_CLPT_IND_SEQ||POD_YD_CD)=0 AND GROUPING(MLB)=1 THEN 1
                       WHEN GROUPING(POD||POD_CLPT_IND_SEQ||POD_YD_CD)=0 AND GROUPING(MLB)=0 THEN 1
                       WHEN GROUPING(POD||POD_CLPT_IND_SEQ||POD_YD_CD)=0 AND GROUPING(MLB)=1 THEN 1
                       WHEN GROUPING(POD||POD_CLPT_IND_SEQ||POD_YD_CD)=1 AND GROUPING(MLB)=1 THEN 1
                       ELSE 0
                       END C2,
                       MAX(OPR1) OPR1,
                       SUM(DG_20_OPR1) DG_20_OPR1, SUM(DG_2H_OPR1) DG_2H_OPR1, SUM(DG_40_OPR1) DG_40_OPR1, SUM(DG_4H_OPR1) DG_4H_OPR1,
                       SUM(DG_45_OPR1) DG_45_OPR1, SUM(RF_20_OPR1) RF_20_OPR1, SUM(RF_2H_OPR1) RF_2H_OPR1, SUM(RF_40_OPR1) RF_40_OPR1,
                       SUM(RF_4H_OPR1) RF_4H_OPR1, SUM(RF_45_OPR1) RF_45_OPR1, SUM(AK_20_OPR1) AK_20_OPR1, SUM(AK_40_OPR1) AK_40_OPR1,
                       SUM(AK_4H_OPR1) AK_4H_OPR1, SUM(AK_45_OPR1) AK_45_OPR1, SUM(BB_20_OPR1) BB_20_OPR1, SUM(BB_40_OPR1) BB_40_OPR1,
					   SUM(STWG_20_OPR1) STWG_20_OPR1, SUM(STWG_2H_OPR1) STWG_2H_OPR1, SUM(STWG_40_OPR1) STWG_40_OPR1, SUM(STWG_4H_OPR1) STWG_4H_OPR1, SUM(STWG_45_OPR1) STWG_45_OPR1,
                       MAX(OPR2) OPR2,
                       SUM(DG_20_OPR2) DG_20_OPR2, SUM(DG_2H_OPR2) DG_2H_OPR2, SUM(DG_40_OPR2) DG_40_OPR2, SUM(DG_4H_OPR2) DG_4H_OPR2,
                       SUM(DG_45_OPR2) DG_45_OPR2, SUM(RF_20_OPR2) RF_20_OPR2, SUM(RF_2H_OPR2) RF_2H_OPR2, SUM(RF_40_OPR2) RF_40_OPR2,
                       SUM(RF_4H_OPR2) RF_4H_OPR2, SUM(RF_45_OPR2) RF_45_OPR2, SUM(AK_20_OPR2) AK_20_OPR2, SUM(AK_40_OPR2) AK_40_OPR2,
                       SUM(AK_4H_OPR2) AK_4H_OPR2, SUM(AK_45_OPR2) AK_45_OPR2, SUM(BB_20_OPR2) BB_20_OPR2, SUM(BB_40_OPR2) BB_40_OPR2,
					   SUM(STWG_20_OPR2) STWG_20_OPR2, SUM(STWG_2H_OPR2) STWG_2H_OPR2, SUM(STWG_40_OPR2) STWG_40_OPR2, SUM(STWG_4H_OPR2) STWG_4H_OPR2, SUM(STWG_45_OPR2) STWG_45_OPR2,
                       MAX(OPR3) OPR3,
                       SUM(DG_20_OPR3) DG_20_OPR3, SUM(DG_2H_OPR3) DG_2H_OPR3, SUM(DG_40_OPR3) DG_40_OPR3, SUM(DG_4H_OPR3) DG_4H_OPR3,
                       SUM(DG_45_OPR3) DG_45_OPR3, SUM(RF_20_OPR3) RF_20_OPR3, SUM(RF_2H_OPR3) RF_2H_OPR3, SUM(RF_40_OPR3) RF_40_OPR3,
                       SUM(RF_4H_OPR3) RF_4H_OPR3, SUM(RF_45_OPR3) RF_45_OPR3, SUM(AK_20_OPR3) AK_20_OPR3, SUM(AK_40_OPR3) AK_40_OPR3,
                       SUM(AK_4H_OPR3) AK_4H_OPR3, SUM(AK_45_OPR3) AK_45_OPR3, SUM(BB_20_OPR3) BB_20_OPR3, SUM(BB_40_OPR3) BB_40_OPR3,
					   SUM(STWG_20_OPR3) STWG_20_OPR3, SUM(STWG_2H_OPR3) STWG_2H_OPR3, SUM(STWG_40_OPR3) STWG_40_OPR3, SUM(STWG_4H_OPR3) STWG_4H_OPR3, SUM(STWG_45_OPR3) STWG_45_OPR3,
                       MAX(OPR4) OPR4,
                       SUM(DG_20_OPR4) DG_20_OPR4, SUM(DG_2H_OPR4) DG_2H_OPR4, SUM(DG_40_OPR4) DG_40_OPR4, SUM(DG_4H_OPR4) DG_4H_OPR4,
                       SUM(DG_45_OPR4) DG_45_OPR4, SUM(RF_20_OPR4) RF_20_OPR4, SUM(RF_2H_OPR4) RF_2H_OPR4, SUM(RF_40_OPR4) RF_40_OPR4,
                       SUM(RF_4H_OPR4) RF_4H_OPR4, SUM(RF_45_OPR4) RF_45_OPR4, SUM(AK_20_OPR4) AK_20_OPR4, SUM(AK_40_OPR4) AK_40_OPR4,
                       SUM(AK_4H_OPR4) AK_4H_OPR4, SUM(AK_45_OPR4) AK_45_OPR4, SUM(BB_20_OPR4) BB_20_OPR4, SUM(BB_40_OPR4) BB_40_OPR4,
					   SUM(STWG_20_OPR4) STWG_20_OPR4, SUM(STWG_2H_OPR4) STWG_2H_OPR4, SUM(STWG_40_OPR4) STWG_40_OPR4, SUM(STWG_4H_OPR4) STWG_4H_OPR4, SUM(STWG_45_OPR4) STWG_45_OPR4,
                       MAX(OPR5) OPR5,
                       SUM(DG_20_OPR5) DG_20_OPR5, SUM(DG_2H_OPR5) DG_2H_OPR5, SUM(DG_40_OPR5) DG_40_OPR5, SUM(DG_4H_OPR5) DG_4H_OPR5,
                       SUM(DG_45_OPR5) DG_45_OPR5, SUM(RF_20_OPR5) RF_20_OPR5, SUM(RF_2H_OPR5) RF_2H_OPR5, SUM(RF_40_OPR5) RF_40_OPR5,
                       SUM(RF_4H_OPR5) RF_4H_OPR5, SUM(RF_45_OPR5) RF_45_OPR5, SUM(AK_20_OPR5) AK_20_OPR5, SUM(AK_40_OPR5) AK_40_OPR5,
                       SUM(AK_4H_OPR5) AK_4H_OPR5, SUM(AK_45_OPR5) AK_45_OPR5, SUM(BB_20_OPR5) BB_20_OPR5, SUM(BB_40_OPR5) BB_40_OPR5,
					   SUM(STWG_20_OPR5) STWG_20_OPR5, SUM(STWG_2H_OPR5) STWG_2H_OPR5, SUM(STWG_40_OPR5) STWG_40_OPR5, SUM(STWG_4H_OPR5) STWG_4H_OPR5, SUM(STWG_45_OPR5) STWG_45_OPR5
                FROM ( SELECT POD,
                              POD_CLPT_IND_SEQ,
                              POD_YD_CD,
                              MLB,
                              MAX(DECODE(ROW_NUM,1,OPR,0))   OPR1,
                              MAX(DECODE(ROW_NUM,1,DG_20,0)) DG_20_OPR1,
                              MAX(DECODE(ROW_NUM,1,DG_2H,0)) DG_2H_OPR1,
                              MAX(DECODE(ROW_NUM,1,DG_40,0)) DG_40_OPR1,
                              MAX(DECODE(ROW_NUM,1,DG_4H,0)) DG_4H_OPR1,
                              MAX(DECODE(ROW_NUM,1,DG_45,0)) DG_45_OPR1,
                              MAX(DECODE(ROW_NUM,1,RF_20,0)) RF_20_OPR1,
                              MAX(DECODE(ROW_NUM,1,RF_2H,0)) RF_2H_OPR1,
                              MAX(DECODE(ROW_NUM,1,RF_40,0)) RF_40_OPR1,
                              MAX(DECODE(ROW_NUM,1,RF_4H,0)) RF_4H_OPR1,
                              MAX(DECODE(ROW_NUM,1,RF_45,0)) RF_45_OPR1,
                              MAX(DECODE(ROW_NUM,1,AK_20,0)) AK_20_OPR1,
                              MAX(DECODE(ROW_NUM,1,AK_40,0)) AK_40_OPR1,
                              MAX(DECODE(ROW_NUM,1,AK_4H,0)) AK_4H_OPR1,
                              MAX(DECODE(ROW_NUM,1,AK_45,0)) AK_45_OPR1,
                              MAX(DECODE(ROW_NUM,1,BB_20,0)) BB_20_OPR1,
                              MAX(DECODE(ROW_NUM,1,BB_40,0)) BB_40_OPR1,
							  MAX(DECODE(ROW_NUM,1,STWG_20,0)) STWG_20_OPR1,
                              MAX(DECODE(ROW_NUM,1,STWG_2H,0)) STWG_2H_OPR1,
                              MAX(DECODE(ROW_NUM,1,STWG_40,0)) STWG_40_OPR1,
                              MAX(DECODE(ROW_NUM,1,STWG_4H,0)) STWG_4H_OPR1,
                              MAX(DECODE(ROW_NUM,1,STWG_45,0)) STWG_45_OPR1,
                              MAX(DECODE(ROW_NUM,2,OPR,0))   OPR2,
                              MAX(DECODE(ROW_NUM,2,DG_20,0)) DG_20_OPR2,
                              MAX(DECODE(ROW_NUM,2,DG_2H,0)) DG_2H_OPR2,
                              MAX(DECODE(ROW_NUM,2,DG_40,0)) DG_40_OPR2,
                              MAX(DECODE(ROW_NUM,2,DG_4H,0)) DG_4H_OPR2,
                              MAX(DECODE(ROW_NUM,2,DG_45,0)) DG_45_OPR2,
                              MAX(DECODE(ROW_NUM,2,RF_20,0)) RF_20_OPR2,
                              MAX(DECODE(ROW_NUM,2,RF_2H,0)) RF_2H_OPR2,
                              MAX(DECODE(ROW_NUM,2,RF_40,0)) RF_40_OPR2,
                              MAX(DECODE(ROW_NUM,2,RF_4H,0)) RF_4H_OPR2,
                              MAX(DECODE(ROW_NUM,2,RF_45,0)) RF_45_OPR2,
                              MAX(DECODE(ROW_NUM,2,AK_20,0)) AK_20_OPR2,
                              MAX(DECODE(ROW_NUM,2,AK_40,0)) AK_40_OPR2,
                              MAX(DECODE(ROW_NUM,2,AK_4H,0)) AK_4H_OPR2,
                              MAX(DECODE(ROW_NUM,2,AK_45,0)) AK_45_OPR2,
                              MAX(DECODE(ROW_NUM,2,BB_20,0)) BB_20_OPR2,
                              MAX(DECODE(ROW_NUM,2,BB_40,0)) BB_40_OPR2,
							  MAX(DECODE(ROW_NUM,2,STWG_20,0)) STWG_20_OPR2,
                              MAX(DECODE(ROW_NUM,2,STWG_2H,0)) STWG_2H_OPR2,
                              MAX(DECODE(ROW_NUM,2,STWG_40,0)) STWG_40_OPR2,
                              MAX(DECODE(ROW_NUM,2,STWG_4H,0)) STWG_4H_OPR2,
                              MAX(DECODE(ROW_NUM,2,STWG_45,0)) STWG_45_OPR2,
                              MAX(DECODE(ROW_NUM,3,OPR,0))   OPR3,
                              MAX(DECODE(ROW_NUM,3,DG_20,0)) DG_20_OPR3,
                              MAX(DECODE(ROW_NUM,3,DG_2H,0)) DG_2H_OPR3,
                              MAX(DECODE(ROW_NUM,3,DG_40,0)) DG_40_OPR3,
                              MAX(DECODE(ROW_NUM,3,DG_4H,0)) DG_4H_OPR3,
                              MAX(DECODE(ROW_NUM,3,DG_45,0)) DG_45_OPR3,
                              MAX(DECODE(ROW_NUM,3,RF_20,0)) RF_20_OPR3,
                              MAX(DECODE(ROW_NUM,3,RF_2H,0)) RF_2H_OPR3,
                              MAX(DECODE(ROW_NUM,3,RF_40,0)) RF_40_OPR3,
                              MAX(DECODE(ROW_NUM,3,RF_4H,0)) RF_4H_OPR3,
                              MAX(DECODE(ROW_NUM,3,RF_45,0)) RF_45_OPR3,
                              MAX(DECODE(ROW_NUM,3,AK_20,0)) AK_20_OPR3,
                              MAX(DECODE(ROW_NUM,3,AK_40,0)) AK_40_OPR3,
                              MAX(DECODE(ROW_NUM,3,AK_4H,0)) AK_4H_OPR3,
                              MAX(DECODE(ROW_NUM,3,AK_45,0)) AK_45_OPR3,
                              MAX(DECODE(ROW_NUM,3,BB_20,0)) BB_20_OPR3,
                              MAX(DECODE(ROW_NUM,3,BB_40,0)) BB_40_OPR3,
							  MAX(DECODE(ROW_NUM,3,STWG_20,0)) STWG_20_OPR3,
                              MAX(DECODE(ROW_NUM,3,STWG_2H,0)) STWG_2H_OPR3,
                              MAX(DECODE(ROW_NUM,3,STWG_40,0)) STWG_40_OPR3,
                              MAX(DECODE(ROW_NUM,3,STWG_4H,0)) STWG_4H_OPR3,
                              MAX(DECODE(ROW_NUM,3,STWG_45,0)) STWG_45_OPR3,
                              MAX(DECODE(ROW_NUM,4,OPR,0))   OPR4,
                              MAX(DECODE(ROW_NUM,4,DG_20,0)) DG_20_OPR4,
                              MAX(DECODE(ROW_NUM,4,DG_2H,0)) DG_2H_OPR4,
                              MAX(DECODE(ROW_NUM,4,DG_40,0)) DG_40_OPR4,
                              MAX(DECODE(ROW_NUM,4,DG_4H,0)) DG_4H_OPR4,
                              MAX(DECODE(ROW_NUM,4,DG_45,0)) DG_45_OPR4,
                              MAX(DECODE(ROW_NUM,4,RF_20,0)) RF_20_OPR4,
                              MAX(DECODE(ROW_NUM,4,RF_2H,0)) RF_2H_OPR4,
                              MAX(DECODE(ROW_NUM,4,RF_40,0)) RF_40_OPR4,
                              MAX(DECODE(ROW_NUM,4,RF_4H,0)) RF_4H_OPR4,
                              MAX(DECODE(ROW_NUM,4,RF_45,0)) RF_45_OPR4,
                              MAX(DECODE(ROW_NUM,4,AK_20,0)) AK_20_OPR4,
                              MAX(DECODE(ROW_NUM,4,AK_40,0)) AK_40_OPR4,
                              MAX(DECODE(ROW_NUM,4,AK_4H,0)) AK_4H_OPR4,
                              MAX(DECODE(ROW_NUM,4,AK_45,0)) AK_45_OPR4,
                              MAX(DECODE(ROW_NUM,4,BB_20,0)) BB_20_OPR4,
                              MAX(DECODE(ROW_NUM,4,BB_40,0)) BB_40_OPR4,
							  MAX(DECODE(ROW_NUM,4,STWG_20,0)) STWG_20_OPR4,
                              MAX(DECODE(ROW_NUM,4,STWG_2H,0)) STWG_2H_OPR4,
                              MAX(DECODE(ROW_NUM,4,STWG_40,0)) STWG_40_OPR4,
                              MAX(DECODE(ROW_NUM,4,STWG_4H,0)) STWG_4H_OPR4,
                              MAX(DECODE(ROW_NUM,4,STWG_45,0)) STWG_45_OPR4,
                              MAX(DECODE(ROW_NUM,5,OPR,0))   OPR5,
                              MAX(DECODE(ROW_NUM,5,DG_20,0)) DG_20_OPR5,
                              MAX(DECODE(ROW_NUM,5,DG_2H,0)) DG_2H_OPR5,
                              MAX(DECODE(ROW_NUM,5,DG_40,0)) DG_40_OPR5,
                              MAX(DECODE(ROW_NUM,5,DG_4H,0)) DG_4H_OPR5,
                              MAX(DECODE(ROW_NUM,5,DG_45,0)) DG_45_OPR5,
                              MAX(DECODE(ROW_NUM,5,RF_20,0)) RF_20_OPR5,
                              MAX(DECODE(ROW_NUM,5,RF_2H,0)) RF_2H_OPR5,
                              MAX(DECODE(ROW_NUM,5,RF_40,0)) RF_40_OPR5,
                              MAX(DECODE(ROW_NUM,5,RF_4H,0)) RF_4H_OPR5,
                              MAX(DECODE(ROW_NUM,5,RF_45,0)) RF_45_OPR5,
                              MAX(DECODE(ROW_NUM,5,AK_20,0)) AK_20_OPR5,
                              MAX(DECODE(ROW_NUM,5,AK_40,0)) AK_40_OPR5,
                              MAX(DECODE(ROW_NUM,5,AK_4H,0)) AK_4H_OPR5,
                              MAX(DECODE(ROW_NUM,5,AK_45,0)) AK_45_OPR5,
                              MAX(DECODE(ROW_NUM,5,BB_20,0)) BB_20_OPR5,
                              MAX(DECODE(ROW_NUM,5,BB_40,0)) BB_40_OPR5,
							  MAX(DECODE(ROW_NUM,5,STWG_20,0)) STWG_20_OPR5,
                              MAX(DECODE(ROW_NUM,5,STWG_2H,0)) STWG_2H_OPR5,
                              MAX(DECODE(ROW_NUM,5,STWG_40,0)) STWG_40_OPR5,
                              MAX(DECODE(ROW_NUM,5,STWG_4H,0)) STWG_4H_OPR5,
                              MAX(DECODE(ROW_NUM,5,STWG_45,0)) STWG_45_OPR5
                       FROM ( SELECT POD,
                                     POD_CLPT_IND_SEQ,
                                     POD_YD_CD,
                                     OPR,
                                     MLB,
                                     SUM(DECODE(DCGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'2',1,0),0)) DG_20,
                                     SUM(DECODE(DCGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'3',1,0),0)) DG_2H,
                                     SUM(DECODE(DCGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'4',1,0),0)) DG_40,
                                     SUM(DECODE(DCGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'5',1,CASE WHEN CNTR_TPSZ_CD IN ('R8', 'R9') THEN 1 ELSE 0 END),0)) DG_4H,
                                     SUM(DECODE(DCGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'7',1,0),0)) DG_45,
                                     SUM(DECODE(RC_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'2',1,0),0)) RF_20,
                                     SUM(DECODE(RC_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'3',1,0),0)) RF_2H,
                                     SUM(DECODE(RC_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'4',1,0),0)) RF_40,
                                     SUM(DECODE(RC_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'5',1,CASE WHEN CNTR_TPSZ_CD IN ('R8', 'R9') THEN 1 ELSE 0 END),0)) RF_4H,
                                     SUM(DECODE(RC_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'7',1,0),0)) RF_45,
                                     SUM(DECODE(AWK_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'2',1,0),0)) AK_20,
                                     SUM(DECODE(AWK_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'4',1,0),0)) AK_40,
                                     SUM(DECODE(AWK_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'5',1,CASE WHEN CNTR_TPSZ_CD IN ('R8', 'R9') THEN 1 ELSE 0 END),0)) AK_4H,
                                     SUM(DECODE(AWK_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'7',1,0),0)) AK_45,
                                     SUM(DECODE(BB_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'2',1,0),0)) BB_20,
                                     SUM(DECODE(BB_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'2',0,1),0)) BB_40,
									 SUM(DECODE(STWG_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'2',1,0),0)) STWG_20,
                                     SUM(DECODE(STWG_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'3',1,0),0)) STWG_2H,
                                     SUM(DECODE(STWG_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'4',1,0),0)) STWG_40,
                                     SUM(DECODE(STWG_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'5',1,CASE WHEN CNTR_TPSZ_CD IN ('R8', 'R9') THEN 1 ELSE 0 END),0)) STWG_4H,
                                     SUM(DECODE(STWG_CGO_FLG,'Y',DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'7',1,0),0)) STWG_45,
                                     MIN(ROW_NUM) ROW_NUM
                              FROM ( SELECT DISTINCT 
                                            POD,
                                            POD_CLPT_IND_SEQ,
                                            POD_YD_CD,
                                            OPR,
                                            MLB,
                                            BKG_NO,
                                            CNTR_NO,
                                            DCGO_FLG,
                                            RC_FLG,
                                            AWK_CGO_FLG,
                                            BB_CGO_FLG,
											STWG_CGO_FLG,
                                            CNTR_TPSZ_CD,
                                            ROW_NUM,
                                            CNTR_RN
                                     FROM   ( SELECT D.POD_CD   POD,
                                                     D.POD_CLPT_IND_SEQ,
                                                     D.POD_YD_CD,
                                                     D.CRR_CD   OPR,
                                                     D.MLB_CD   MLB,
                                                     DECODE(H.BKG_SHPR_OWNR_FLG, 'Y', D.BKG_NO, D.PRNR_BKG_REF_NO) BKG_NO,
                                                     DECODE(H.BKG_SHPR_OWNR_FLG, 'Y', D.CNTR_NO, D.PRNR_CNTR_REF_NO) CNTR_NO,
                                                     D.DCGO_FLG,
                                                     D.RC_FLG,
                                                     D.AWK_CGO_FLG,
                                                     D.BB_CGO_FLG,
													 D.STWG_CGO_FLG,
                                                     D.CNTR_TPSZ_CD,
                                                     ( CASE WHEN D.CRR_CD = @[qty1]    THEN 1
                                            			 					WHEN D.CRR_CD = @[qty2]  THEN 2
                                            			 					WHEN D.CRR_CD = @[qty3]  THEN 3
                                            			 					WHEN D.CRR_CD = @[qty4]  THEN 4
                                            			 					WHEN D.CRR_CD = @[qty5]  THEN 5
                                                       END) ROW_NUM,
                                                     DECODE(DECODE(H.BKG_SHPR_OWNR_FLG, 'Y', D.CNTR_NO, D.PRNR_CNTR_REF_NO),NULL,1,ROW_NUMBER() OVER (PARTITION BY D.CRR_CD, DECODE(H.BKG_SHPR_OWNR_FLG, 'Y', D.CNTR_NO, D.PRNR_CNTR_REF_NO), D.CNTR_SEQ ORDER BY DECODE(H.BKG_SHPR_OWNR_FLG, 'Y', D.BKG_NO, D.PRNR_BKG_REF_NO))) CNTR_RN
                                              FROM   OPF_CGO_BKG_FCAST H, OPF_CGO_BKG_FCAST_CNTR D
                              			 					WHERE  H.VSL_CD                    = @[vsl_cd]
                              			 					AND    H.SKD_VOY_NO                = @[skd_voy_no]
                              			 					AND    H.SKD_DIR_CD                = @[skd_dir_cd]
                              			 					AND    H.YD_CD||H.POL_CLPT_IND_SEQ = @[yd_cd]
                                              AND    H.VSL_CD            = D.VSL_CD
                                              AND    H.SKD_VOY_NO        = D.SKD_VOY_NO
                                              AND    H.SKD_DIR_CD        = D.SKD_DIR_CD
                                              AND    H.BKG_SHPR_OWNR_FLG = D.BKG_SHPR_OWNR_FLG
                                              AND    H.CRR_CD            = D.CRR_CD
                                              AND    H.YD_CD             = D.YD_CD
                                              AND    H.POL_CLPT_IND_SEQ  = D.POL_CLPT_IND_SEQ
                                              AND    D.CBF_DP_CD         = 'S'
                                              AND    D.CRR_CD IN ( @[qty1], @[qty2], @[qty3], @[qty4], @[qty5] )
#if (${pod_cd} != '')
					   AND	   D.POD_CD||D.POD_CLPT_IND_SEQ LIKE @[pod_cd]
#end
#if (${mlb_cd} != '')
					   AND	   D.MLB_CD LIKE @[mlb_cd]
#end
                                  			      AND    CASE WHEN @[dcgo_flg] IS NULL AND @[rc_flg] IS NULL AND @[awk_cgo_flg] IS NULL AND @[bb_cgo_flg] IS NULL AND @[stwg_cgo_flg] IS NULL THEN 1 
                                                          ELSE DECODE(D.DCGO_FLG,@[dcgo_flg],1,0)+DECODE(D.RC_FLG,@[rc_flg],1,0)+DECODE(D.AWK_CGO_FLG,@[awk_cgo_flg],1,0)+DECODE(D.BB_CGO_FLG,@[bb_cgo_flg],1,0)+DECODE(DECODE(D.STWG_CD,NULL,'N','Y'),@[stwg_cgo_flg],1,0)
                                                     END  >=1 )
                                     WHERE CNTR_RN = 1 )
                              GROUP BY POD, POD_CLPT_IND_SEQ, POD_YD_CD, OPR, MLB )
                       GROUP BY POD, POD_CLPT_IND_SEQ, POD_YD_CD, MLB )
               GROUP BY CUBE(POD||POD_CLPT_IND_SEQ||POD_YD_CD, MLB) ) A,
               ( SELECT V.VPS_PORT_CD PORT, V.CLPT_IND_SEQ, V.CLPT_SEQ SEQ
                 FROM   VSK_VSL_PORT_SKD V
                 WHERE  V.VSL_CD     = @[vsl_cd]
                 AND    V.SKD_VOY_NO = @[skd_voy_no]
                 AND    V.SKD_DIR_CD = @[skd_dir_cd]
                 AND    V.CLPT_SEQ   > ( SELECT CLPT_SEQ
                                         FROM   VSK_VSL_PORT_SKD R
                                         WHERE  R.VSL_CD                = @[vsl_cd]
                                         AND    R.SKD_VOY_NO            = @[skd_voy_no]
                                         AND    R.SKD_DIR_CD            = @[skd_dir_cd]
                                         AND    R.YD_CD||R.CLPT_IND_SEQ = @[yd_cd]
                                         AND    ROWNUM = 1 ) ) P
       WHERE NVL(C2,0) = 1
       AND   SUBSTR(A.POD,1,5) = P.PORT(+) 
       AND   SUBSTR(A.POD,6,1) = P.CLPT_IND_SEQ(+))
ORDER BY SEQ, DECODE(POD,'G.Total','ZZZZZ',SUBSTR(POD,1,5)),DECODE(POD,'','ZZZZZ',SUBSTR(POD,12,2)), DECODE(NVL(MLB,'YYY'),'S.Total','ZZZ',NVL(MLB,'YYY')) ASC			]]></sql>
			<params>
				<param name="qty1" type="12" value="" out="N"/>
				<param name="qty2" type="12" value="" out="N"/>
				<param name="qty3" type="12" value="" out="N"/>
				<param name="qty4" type="12" value="" out="N"/>
				<param name="qty5" type="12" value="" out="N"/>
				<param name="vsl_cd" type="12" value="" out="N"/>
				<param name="skd_voy_no" type="12" value="" out="N"/>
				<param name="skd_dir_cd" type="12" value="" out="N"/>
				<param name="yd_cd" type="12" value="" out="N"/>
				<param name="pod_cd" type="12" value="" out="N"/>
				<param name="mlb_cd" type="12" value="" out="N"/>
				<param name="dcgo_flg" type="12" value="" out="N"/>
				<param name="rc_flg" type="12" value="" out="N"/>
				<param name="awk_cgo_flg" type="12" value="" out="N"/>
				<param name="bb_cgo_flg" type="12" value="" out="N"/>
				<param name="stwg_cgo_flg" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
