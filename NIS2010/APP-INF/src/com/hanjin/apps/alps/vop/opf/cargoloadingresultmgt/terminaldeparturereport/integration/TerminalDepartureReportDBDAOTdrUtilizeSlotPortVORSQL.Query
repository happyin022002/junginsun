<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="TerminalDepartureReportDBDAOTdrUtilizeSlotPortVORSQL">
			<desc><![CDATA[DESC Enter..]]></desc>
			<sql><![CDATA[
SELECT  X.OPR_CD,
        X.TRADE_FULL,
        X.TRADE_MT,
        X.TRADE_AB,
        X.TRADE_45,
        X.TRADE_SUB_SLOT,
        X.TRADE_SUB_WGT,
        X.INTER_FULL,
        X.INTER_MT,
        X.INTER_AB,
        X.INTER_45,
        X.INTER_SUB_SLOT,
        X.INTER_SUB_WGT,
        X.GRAND_TTL_SLOT,
        X.GRAND_TTL_WGT,
		Y.RATIO_TYPE,
        Y.BSA_TYPE,
        Y.BSA_SLOT,
        Y.BSA_WGT,
        Z.TEU,
		Y.RELEASE_SLOT,
		Y.RELEASE_WGT,
        CASE WHEN X.GRAND_TTL_SLOT > Y.BSA_SLOT THEN X.GRAND_TTL_SLOT - Y.BSA_SLOT ELSE 0 END AS OVER_SLOT,
        CASE WHEN X.GRAND_TTL_WGT > Y.BSA_WGT THEN X.GRAND_TTL_WGT - Y.BSA_WGT ELSE 0 END AS OVER_WGT,
		--------------------------
		-- RATIO_TYPE
		--------------------------
		CASE WHEN Y.RATIO_TYPE = 'T' AND Y.BSA_TYPE = 'U' THEN
				  CASE WHEN X.GRAND_TTL_SLOT > Y.BSA_SLOT THEN X.GRAND_TTL_SLOT - Y.BSA_SLOT ELSE 0 END
			 WHEN Y.RATIO_TYPE = 'T' AND Y.BSA_TYPE = 'F' THEN
				  NVL(Y.RELEASE_SLOT,0)
			 WHEN  Y.RATIO_TYPE = 'W' AND Y.BSA_TYPE = 'U' THEN
				   CASE WHEN TEU IS NOT NULL AND TEU > 0 THEN
						(CASE WHEN X.GRAND_TTL_WGT > Y.BSA_WGT THEN X.GRAND_TTL_WGT - Y.BSA_WGT ELSE 0 END) / NVL(TEU, 0)
				   ELSE
						0
				   END
			  WHEN  Y.RATIO_TYPE = 'W' AND Y.BSA_TYPE = 'F' THEN
				   CASE WHEN TEU IS NOT NULL AND TEU > 0 THEN
					   NVL(Y.RELEASE_WGT, 0) / NVL(TEU, 0)
				   ELSE
						 0
				   END
			  ELSE 0
		END AS OVER_SETTLE,
        Y.BSA_TYPE  OVER_SETTLE_BY
FROM    
(
    SELECT	OPR_CD,
			------------------
			-- Trade 
			------------------
			TRADE_FULL,
			TRADE_MT,
			TRADE_AB,
            TRADE_45,
			(NVL(TRADE_FULL, 0) + NVL(TRADE_MT, 0) + NVL(TRADE_AB, 0)) AS TRADE_SUB_SLOT,
			(NVL(TRADE_FULL_W, 0) + NVL(TRADE_MT_W, 0) + NVL(TRADE_AB_W, 0)) AS TRADE_SUB_WGT,
			------------------
			-- Inter
			------------------
			INTER_FULL,
			INTER_MT,
			INTER_AB,
            INTER_45,
			(NVL(INTER_FULL, 0) + NVL(INTER_MT, 0) + NVL(INTER_AB, 0)) AS INTER_SUB_SLOT,
			(NVL(INTER_FULL_W, 0) + NVL(INTER_MT_W, 0) + NVL(INTER_AB_W, 0)) AS INTER_SUB_WGT,
			------------------
			-- Grand TTL
			------------------
			(NVL(TRADE_FULL, 0) + NVL(TRADE_MT, 0) + NVL(TRADE_AB, 0))  + 
			(NVL(INTER_FULL, 0) + NVL(INTER_MT, 0) + NVL(INTER_AB, 0) + NVL(INTER_45, 0))
			AS GRAND_TTL_SLOT,
			(NVL(TRADE_FULL_W, 0) + NVL(TRADE_MT_W, 0) + NVL(TRADE_AB_W, 0))  + 
			(NVL(INTER_FULL_W, 0) + NVL(INTER_MT_W, 0) + NVL(INTER_AB_W, 0) + NVL(INTER_45_W, 0))
			AS GRAND_TTL_WGT
    FROM(
        SELECT  C.OPR_CD,

		        SUM(DECODE(C.STATUS, @[sl_status1], DECODE(C.CNTR_TYPE, 'F', DECODE(C.CNTR_SIZE, 'A', 0, C.QTY), 0),0))     TRADE_FULL,
		        SUM(DECODE(C.STATUS, @[sl_status1], DECODE(C.CNTR_TYPE, 'E', DECODE(C.CNTR_SIZE, 'A', 0, C.QTY), 0),0))     TRADE_MT,
		        SUM(DECODE(C.STATUS, @[sl_status1], DECODE(C.CNTR_SIZE, 'A', C.QTY, 0),0))                                	TRADE_AB,
                SUM(DECODE(C.STATUS, @[sl_status1], DECODE(C.CNTR_TYPE, 'A', DECODE(C.CNTR_SIZE, '3', C.QTY, 'H', C.QTY, 'L', C.QTY, 0), 0), 0))  TRADE_45,
	
		        SUM(DECODE(C.STATUS, @[sl_status1], DECODE(C.CNTR_TYPE, 'F', DECODE(C.CNTR_SIZE, 'A', 0, C.WEIGHT), 0),0))  TRADE_FULL_W,
		        SUM(DECODE(C.STATUS, @[sl_status1], DECODE(C.CNTR_TYPE, 'E', DECODE(C.CNTR_SIZE, 'A', 0, C.WEIGHT), 0),0))  TRADE_MT_W,
		        SUM(DECODE(C.STATUS, @[sl_status1], DECODE(C.CNTR_SIZE, 'A', C.WEIGHT, 0),0))                               TRADE_AB_W,
                SUM(DECODE(C.STATUS, @[sl_status1], DECODE(C.CNTR_TYPE, 'A', DECODE(C.CNTR_SIZE, '3', C.QTY, 'H', C.QTY, 'L', C.QTY, 0), 0), 0))  TRADE_45_W,
	
		        SUM(DECODE(C.STATUS, @[sl_status2], DECODE(C.CNTR_TYPE, 'F', DECODE(C.CNTR_SIZE, 'A', 0, C.QTY), 0), 0))    INTER_FULL,
		        SUM(DECODE(C.STATUS, @[sl_status2], DECODE(C.CNTR_TYPE, 'E', DECODE(C.CNTR_SIZE, 'A', 0, C.QTY), 0), 0))    INTER_MT,
		        SUM(DECODE(C.STATUS, @[sl_status2], DECODE(C.CNTR_SIZE, 'A', C.QTY, 0),0))                                	INTER_AB,

				SUM(DECODE(C.STATUS, @[sl_status1], DECODE(C.CNTR_TYPE, 'A', DECODE(C.CNTR_SIZE, '3', C.QTY, 'H', C.QTY, 'L', C.QTY, 0),
									 @[sl_status2], DECODE(C.CNTR_TYPE, 'A', DECODE(C.CNTR_SIZE, '3', C.QTY, 'H', C.QTY, 'L', C.QTY, 0)
							, 0), 0), 0)) AS INTER_45,
	
		        SUM(DECODE(C.STATUS, @[sl_status2], DECODE(C.CNTR_TYPE, 'F', DECODE(C.CNTR_SIZE, 'A', 0, C.WEIGHT), 0), 0)) INTER_FULL_W,
		        SUM(DECODE(C.STATUS, @[sl_status2], DECODE(C.CNTR_TYPE, 'E', DECODE(C.CNTR_SIZE, 'A', 0, C.WEIGHT), 0), 0)) INTER_MT_W,
		        SUM(DECODE(C.STATUS, @[sl_status2], DECODE(C.CNTR_TYPE, 'A', C.WEIGHT, 0),0))                               INTER_AB_W,
		        SUM(DECODE(C.STATUS, @[sl_status2], DECODE(C.CNTR_TYPE, 'A', DECODE(C.CNTR_SIZE, '3', C.QTY, 'H', C.QTY, 'L', C.QTY, 0), 0), 0))  INTER_45_W
        FROM   VSK_VSL_PORT_SKD V, TDR_HEADER H, TDR_UTILIZE C
        WHERE  V.VSL_CD       = @[vsl_cd]
        AND    V.SKD_VOY_NO   = @[voy_no]
        AND    V.SKD_DIR_CD   = @[dir_cd]
        AND	   V.YD_CD		  = @[yd_cd]
        AND    V.CLPT_IND_SEQ = @[clpt_ind_seq]
        AND    V.VSL_CD       = H.VSL_CD
        AND    V.SKD_VOY_NO   = H.VOY_NO
        AND    V.SKD_DIR_CD   = H.DIR_CD
        AND    V.VPS_PORT_CD  = H.PORT_CD
        AND    V.CLPT_IND_SEQ = H.CALL_IND
        AND    H.VSL_CD       = C.VSL_CD
        AND    H.VOY_NO       = C.VOY_NO
        AND    H.DIR_CD       = C.DIR_CD
        AND    H.PORT_CD      = C.PORT_CD
        AND    H.CALL_IND     = C.CALL_IND
        AND	   C.STATUS		  IN (@[sl_status1], @[sl_status2])
		AND	   (  -- INTERNAL(ALPS)
		          ( 
    		          H.UPDATE_SYS = 'N' AND C.CNTR_SIZE   IN ('9', '2', 'A')
            	       OR (C.CNTR_SIZE IN ('3', 'H', 'L') AND  CNTR_TYPE = 'A')
        	       )
        	       OR
        	   	  (   -- EXTERNAL(I-STOWGE)
        	       	  NVL(H.UPDATE_SYS, '-') != 'N' OR CNTR_SIZE LIKE '%'  
                  ) 
        	   )
        GROUP BY C.OPR_CD, H.UPDATE_SYS
    )
)X,
(
    SELECT  OPR_CD, 
            BSA_TYPE,
			RATIO_TYPE,
			SUM(NVL(RELEASE_SLOT, 0))                        AS  RELEASE_SLOT,
			SUM(NVL(RELEASE_WGT, 0))                         AS  RELEASE_WGT,
            SUM(NVL(C.BSA_SLOT, 0))+SUM(NVL(C.SWAP_SLOT, 0)) AS  BSA_SLOT,
            SUM(NVL(C.BSA_WGT, 0))+SUM(NVL(C.SWAP_WGT, 0))   AS  BSA_WGT
    FROM    VSK_VSL_PORT_SKD V, TDR_HEADER H, TDR_ALLOCATION C
    WHERE  V.VSL_CD       = @[vsl_cd]
    AND    V.SKD_VOY_NO   = @[voy_no]
    AND    V.SKD_DIR_CD   = @[dir_cd]
    AND	   V.YD_CD		  = @[yd_cd]
    AND    V.CLPT_IND_SEQ = @[clpt_ind_seq]
    AND    V.VSL_CD		   = H.VSL_CD
    AND    V.SKD_VOY_NO    = H.VOY_NO   
    AND    V.SKD_DIR_CD    = H.DIR_CD   
    AND    V.VPS_PORT_CD   = H.PORT_CD  
    AND    V.CLPT_IND_SEQ  = H.CALL_IND 
    AND    H.VSL_CD        = C.VSL_CD   
    AND    H.VOY_NO        = C.VOY_NO   
    AND    H.DIR_CD        = C.DIR_CD   
    AND    H.PORT_CD       = C.PORT_CD  
    AND    H.CALL_IND      = C.CALL_IND 
    GROUP BY C.OPR_CD, BSA_TYPE, RATIO_TYPE
)Y,
(   SELECT A.CRR_CD,
           SUM(DECODE(A.BSA_OP_JB_CD,'008',DECODE(B.PORT_BSA_CAPA,NULL,A.CRR_BSA_CAPA,0,A.CRR_BSA_CAPA,B.PORT_BSA_CAPA))) AS TEU
    FROM   BSA_VVD_OTR_CRR A,
            ( SELECT B.RLANE_CD, B.DIR_CD, B.TRD_CD, B.CRR_CD, B.BSA_OP_JB_CD,
                     SUBSTR(MAX('0'||B.BSA_SEQ||B.PORT_BSA_CAPA),3) PORT_BSA_CAPA
              FROM   BSA_SLT_CHTR_PORT_DWN B
              WHERE  PORT_CD(+) = @[port_cd]  --:port_cd
              AND    RLANE_CD = ( SELECT D.RLANE_CD
                                  FROM   MDM_REV_LANE R, MDM_DTL_REV_LANE D, VSK_VSL_PORT_SKD V
                                  WHERE  D.RLANE_CD    = R.RLANE_CD
                                  AND    V.VSL_CD      = @[vsl_cd]   --:vsl_cd
                                  AND    V.SKD_VOY_NO  = @[voy_no]   --:skd_voy_no
                                  AND    V.SKD_DIR_CD  = @[dir_cd]   --:skd_dir_cd
                                  AND    V.VPS_PORT_CD = @[port_cd]  --:port_cd
                                  AND    V.CLPT_IND_SEQ = @[clpt_ind_seq]
                                  AND    R.VSL_SLAN_CD = V.SLAN_CD
                                  AND    ( D.FM_CONTI_CD, D.TO_CONTI_CD ) IN (
                                           SELECT CONTI_CD, NVL(LEAD_CONTI_CD, CONTI_CD)
                                           FROM   ( SELECT V.CLPT_SEQ, V.VPS_PORT_CD, L.CONTI_CD,
                                                           LEAD(CONTI_CD) OVER (PARTITION BY V.VSL_CD, V.SKD_VOY_NO, V.SKD_DIR_CD ORDER BY V.CLPT_SEQ) LEAD_CONTI_CD
                                                    FROM   VSK_VSL_PORT_SKD V, MDM_LOCATION L
                                                    WHERE  V.VSL_CD      = @[vsl_cd]       --:vsl_cd
                                                    AND    V.SKD_VOY_NO  = @[voy_no]       --:skd_voy_no
                                                    AND    V.SKD_DIR_CD  = @[dir_cd]       --:skd_dir_cd
                                                    AND    V.CLPT_IND_SEQ = @[clpt_ind_seq]
                                                    AND    V.VPS_PORT_CD = L.LOC_CD )
                                           WHERE  CONTI_CD = 'A'
                                           AND    CONTI_CD <> NVL(LEAD_CONTI_CD,'X') )
                                  AND    D.VSL_SLAN_DIR_CD = NVL('W',D.VSL_SLAN_DIR_CD)  --:skd_dir_cd
                                  AND    D.DELT_FLG       = 'N'
                                  AND    ROWNUM = 1 )
              AND    DIR_CD       = @[dir_cd]                                                  --:skd_dir_cd
              AND    BSA_OP_JB_CD IN ('008')
              GROUP BY RLANE_CD, DIR_CD, TRD_CD, CRR_CD, BSA_OP_JB_CD ) B
     WHERE  A.RLANE_CD     = B.RLANE_CD(+)
     AND    A.SKD_DIR_CD   = B.DIR_CD(+)
     AND    A.TRD_CD       = B.TRD_CD(+)
     AND    A.CRR_CD       = B.CRR_CD(+)
     AND    A.BSA_OP_JB_CD = B.BSA_OP_JB_CD(+)
     AND    A.VSL_CD       = @[vsl_cd]
     AND    A.SKD_VOY_NO   = @[voy_no]
     AND    A.SKD_DIR_CD   = @[dir_cd]
     AND    A.BSA_OP_JB_CD IN ('008')
     AND    ( A.CRR_BSA_CAPA > 0 OR B.PORT_BSA_CAPA > 0 )
     GROUP BY A.CRR_CD, A.VSL_CD, A.SKD_VOY_NO, A.SKD_DIR_CD 
) Z
WHERE   X.OPR_CD = Y.OPR_CD(+)
AND     X.OPR_CD = Z.CRR_CD(+)
ORDER 	BY X.OPR_CD			]]></sql>
			<params>
				<param name="sl_status1" type="12" value="" out="N"/>
				<param name="sl_status2" type="12" value="" out="N"/>
				<param name="vsl_cd" type="12" value="" out="N"/>
				<param name="voy_no" type="12" value="" out="N"/>
				<param name="dir_cd" type="12" value="" out="N"/>
				<param name="yd_cd" type="12" value="" out="N"/>
				<param name="clpt_ind_seq" type="12" value="" out="N"/>
				<param name="port_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
