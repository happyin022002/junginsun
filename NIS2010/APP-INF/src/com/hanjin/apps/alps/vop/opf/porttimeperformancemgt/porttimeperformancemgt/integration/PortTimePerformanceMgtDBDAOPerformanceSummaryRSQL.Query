<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="PortTimePerformanceMgtDBDAOPerformanceSummaryRSQL">
			<desc><![CDATA[Port Time Performance Report 조회
--------------------------------------------------------------------------------------------
2012.01.16 김민아 [CHM-201215697-01] Port Time Reduction관리 시스템 개발(1차)
2012.01.25 김민아 [CHM-201215832-01] 2012 Port Time Reduction Project 시스템 개발 (1차_추가사항)
2012.01.31 김민아 [CHM-201215910-01] 2012 Port Time Reduction Project 시스템 개발 (1차) 추가사항(Port time외1건)
2012.02.20 김민아 [CHM-201215901-01] Port Time Reduction project 개발 (2차)
2012.03.19 김민아 [CHM-201216890-01] Port Time Reduction project (2차) 수정사항 (Direction, 2nd Call추가)
2012.04.13 김민아 [CHM-201217193-01] HJS VVD 판별 logic 수정 (PTRP)
2015.08.17 김기원 CHM-201537021  조직코드 변경
2016.04.28 Arie Im CHM-201641178 아프리카 대륙 구주지역본부/동서남아지역본부 구분 로직 추가]]></desc>
			<sql><![CDATA[
#if(${gubun} == 'KPI' || ${gubun} == 'KPI_PFMC' || ${gubun} == 'PFMC')
WITH KPI AS
(
SELECT  KPI_TGT_YR        , KPI_VER_SEQ       , SLAN_CD            , TO_CHAR(COMMENCE, 'YYYY-MM-DD HH24:MI') AS COMMENCE 
	  , VSL_CD			  , SKD_VOY_NO		  , SKD_DIR_CD		   , YD_CD     
      , PORT_KPI_DIR_CD   , VPS_PORT_CD       , CLPT_IND_SEQ       , CLPT_SEQ
      , VPS_ETD_DT        , FM_EFF_DT         , TO_EFF_DT          , TTL_CNTR_MV_KNT    ,MVS  , STM_IN_HRS
      , VSL_ARR_HRS       , TML_OP_HRS        , VSL_DEP_HRS        , STM_OUT_HRS
      , PORT_STAY_HRS     , GRS_TML_PROD_HRS  , GRS_CRN_PROD_HRS   , NET_CRN_PROD_HRS
      , TWN_LFT_HRS       , DUL_CYC_HRS       , RSTWG_HRS          , RHQ
FROM    (
        SELECT  KPI_TGT_YR        , T.SLAN_CD         , T.VPS_PORT_CD      , KPI_VER_SEQ	, T2.VPS_ETD_DT
              , FM_EFF_DT         , TO_EFF_DT         , TTL_CNTR_MV_KNT    , STM_IN_HRS
              , VSL_ARR_HRS       , TML_OP_HRS        , VSL_DEP_HRS        , STM_OUT_HRS
              , PORT_STAY_HRS     , GRS_TML_PROD_HRS  , GRS_CRN_PROD_HRS   , NET_CRN_PROD_HRS
              , TWN_LFT_HRS       , DUL_CYC_HRS       , RSTWG_HRS          
              , (
                SELECT  CASE WHEN NVL(ML.DELT_FLG,'N') <> 'N' OR ML.CALL_PORT_FLG <> 'Y' THEN ''
                        ELSE (SELECT O.OFC_N3RD_LVL_CD FROM MAS_OFC_LVL O WHERE O.OFC_CD = ML.EQ_CTRL_OFC_CD AND O.OFC_APLY_TO_YRMON ='999912' AND O.OFC_LVL < 9)
--                                 CASE WHEN ML.CONTI_CD  IN ('E','F') AND ML.LOC_CD NOT IN('EGAIS','ZADUR','RUVVO')               THEN 'HAMRU'
--                                      WHEN ML.CONTI_CD  = 'M'                                                                    THEN 'NYCRA'
--                                      WHEN ML.CONTI_CD = 'A' AND ML.SCONTI_CD = 'AF'  THEN DECODE(ML.CNT_CD,'KR','SELIB','JP','TYOIB','SHARC')
--                                      WHEN (ML.CONTI_CD = 'A'        AND ML.SCONTI_CD <> 'AF') OR ML.LOC_CD IN ('EGAIS','ZADUR') THEN 'SINRS'
--									  WHEN ML.CONTI_CD  IN ('E') AND ML.LOC_CD = 'RUVVO' THEN 'VVOIA'
--                                      ELSE ''
--                                 END
                       END
                FROM   MDM_LOCATION  ML
                WHERE  ML.LOC_CD = T.VPS_PORT_CD
                )                                              AS RHQ
              , T.PORT_KPI_DIR_CD
              , T.CLPT_IND_SEQ  
              , T3.VSL_CD
              , T3.SKD_VOY_NO
              , T3.SKD_DIR_CD
              , T2.CLPT_SEQ
              , T1.MVS
              , T2.YD_CD AS YD_CD
              , T1.COMMENCE
        FROM    OPF_PORT_TM_KPI T
              , TDR_HEADER       T1
              , VSK_VSL_PORT_SKD T2
              , VSK_VSL_SKD      T3 
        WHERE   1=1
        AND     T1.VSL_CD            = T2.VSL_CD
        AND     T1.VOY_NO            = T2.SKD_VOY_NO
        AND     T1.DIR_CD            = T2.SKD_DIR_CD
        AND     T1.PORT_CD           = T2.VPS_PORT_CD
        AND     T1.CALL_IND          = T2.CLPT_IND_SEQ
        AND     T2.VSL_CD            = T3.VSL_CD
        AND     T2.SKD_VOY_NO        = T3.SKD_VOY_NO
        AND     T2.SKD_DIR_CD        = T3.SKD_DIR_CD  
        AND     T2.SLAN_CD           = T3.VSL_SLAN_CD
        AND     T.SLAN_CD            = T2.SLAN_CD
        AND     T.VPS_PORT_CD        = T2.VPS_PORT_CD        
        AND     CASE WHEN T.PORT_KPI_DIR_CD = 'A' THEN T2.SKD_DIR_CD
             	     ELSE T.PORT_KPI_DIR_CD 
        	     END                 = T2.SKD_DIR_CD
        AND     T.CLPT_IND_SEQ       = T2.CLPT_IND_SEQ
        AND     T2.PORT_SKD_STS_CD   = 'D'
        AND     T2.TURN_PORT_IND_CD IN ('Y','N')
        AND     NVL(T2.SKD_CNG_STS_CD, ' ') <> 'S'
        AND     T2.VPS_PORT_CD      NOT IN ('PAPAC','EGSUZ')
        AND     T2.VPS_ETD_DT       BETWEEN T.FM_EFF_DT	AND	T.TO_EFF_DT+1   
        AND     T3.ACT_CRR_CD = 'SML'
#if(${slan_cd} != '')
        AND     T.SLAN_CD      = @[slan_cd]
#end
#if(${port_cd} != '')
        AND     T.VPS_PORT_CD  = @[port_cd]
#end
#if(${kpi_tgt_yr} != '')
        AND     T.KPI_TGT_YR   = @[kpi_tgt_yr]
#end
#if(${kpi_ver_seq} != '')
        AND     T.KPI_VER_SEQ  = @[kpi_ver_seq]
#end
        )
WHERE   1=1
#if(${rhq_ofc_cd} != '')
AND     RHQ    = @[rhq_ofc_cd]
#end
)

#elseif(${gubun} == 'BASE' || ${gubun} == 'BASE_PFMC')

WITH KPI AS
(
SELECT  KPI_TGT_YR        , KPI_VER_SEQ       , SLAN_CD            , TO_CHAR(COMMENCE, 'YYYY-MM-DD HH24:MI') AS COMMENCE , VSL_CD, SKD_VOY_NO, SKD_DIR_CD, YD_CD     
      , PORT_KPI_DIR_CD   , VPS_PORT_CD       , CLPT_IND_SEQ       , CLPT_SEQ
      , VPS_ETD_DT        , FM_EFF_DT         , TO_EFF_DT          , TTL_CNTR_MV_KNT    ,MVS  , STM_IN_HRS
      , VSL_ARR_HRS       , TML_OP_HRS        , VSL_DEP_HRS        , STM_OUT_HRS
      , PORT_STAY_HRS     , GRS_TML_PROD_HRS  , GRS_CRN_PROD_HRS   , NET_CRN_PROD_HRS
      , TWN_LFT_HRS       , DUL_CYC_HRS       , RSTWG_HRS          , RHQ
FROM    (
        SELECT  BSEL_YR AS KPI_TGT_YR                 , T.SLAN_CD          , T.VPS_PORT_CD      , BSEL_VER_SEQ AS KPI_VER_SEQ     
              , T2.VPS_ETD_DT     , FM_EFF_DT         , TO_EFF_DT          , TTL_CNTR_MV_KNT    , STM_IN_HRS
              , VSL_ARR_HRS       , TML_OP_HRS        , VSL_DEP_HRS        , STM_OUT_HRS
              , PORT_STAY_HRS     , GRS_TML_PROD_HRS  , GRS_CRN_PROD_HRS   , NET_CRN_PROD_HRS
              , TWN_LFT_HRS       , DUL_CYC_HRS       , RSTWG_HRS          
              , (
                SELECT  CASE WHEN NVL(ML.DELT_FLG,'N') <> 'N' OR ML.CALL_PORT_FLG <> 'Y' THEN ''
                        ELSE (SELECT O.OFC_N3RD_LVL_CD FROM MAS_OFC_LVL O WHERE O.OFC_CD = ML.EQ_CTRL_OFC_CD AND O.OFC_APLY_TO_YRMON ='999912' AND O.OFC_LVL < 9)
--                                 CASE WHEN ML.CONTI_CD  IN ('E','F') AND ML.LOC_CD NOT IN('EGAIS','ZADUR','RUVVO')               THEN 'HAMRU'
--                                      WHEN ML.CONTI_CD  = 'M'                                                                    THEN 'NYCRA'
--                                      WHEN ML.CONTI_CD = 'A' AND ML.SCONTI_CD = 'AF'  THEN DECODE(ML.CNT_CD,'KR','SELIB','JP','TYOIB','SHARC')
--                                      WHEN (ML.CONTI_CD = 'A'        AND ML.SCONTI_CD <> 'AF') OR ML.LOC_CD IN ('EGAIS','ZADUR') THEN 'SINRS'
--									  WHEN ML.CONTI_CD  IN ('E') AND ML.LOC_CD = 'RUVVO' THEN 'VVOIA'
--                                      ELSE ''
--                                 END
                       END
                FROM   MDM_LOCATION  ML
                WHERE  ML.LOC_CD = T.VPS_PORT_CD
                )                            AS RHQ
              , T.PORT_BSEL_DIR_CD AS PORT_KPI_DIR_CD
              , T.CLPT_IND_SEQ  
              , T3.VSL_CD
              , T3.SKD_VOY_NO
              , T3.SKD_DIR_CD
              , T2.CLPT_SEQ
              , T1.MVS
              , T2.YD_CD AS YD_CD
              , T1.COMMENCE
        FROM    OPF_PORT_TM_BSEL T
              , TDR_HEADER       T1
              , VSK_VSL_PORT_SKD T2
              , VSK_VSL_SKD      T3        
        WHERE   1=1
        AND     T1.VSL_CD            = T2.VSL_CD
        AND     T1.VOY_NO            = T2.SKD_VOY_NO
        AND     T1.DIR_CD            = T2.SKD_DIR_CD
        AND     T1.PORT_CD           = T2.VPS_PORT_CD
        AND     T1.CALL_IND          = T2.CLPT_IND_SEQ
        AND     T2.VSL_CD            = T3.VSL_CD
        AND     T2.SKD_VOY_NO        = T3.SKD_VOY_NO
        AND     T2.SKD_DIR_CD        = T3.SKD_DIR_CD  
        AND     T2.SLAN_CD           = T3.VSL_SLAN_CD
        AND     T.SLAN_CD            = T2.SLAN_CD
        AND     T.VPS_PORT_CD        = T2.VPS_PORT_CD        
        AND     CASE WHEN T.PORT_BSEL_DIR_CD = 'A' THEN T2.SKD_DIR_CD
             	     ELSE T.PORT_BSEL_DIR_CD 
        	     END                 = T2.SKD_DIR_CD
        AND     T.CLPT_IND_SEQ       = T2.CLPT_IND_SEQ
        AND     T2.PORT_SKD_STS_CD   = 'D'
        AND     T2.TURN_PORT_IND_CD IN ('Y','N')
        AND     NVL(T2.SKD_CNG_STS_CD, ' ') <> 'S'
        AND     T2.VPS_PORT_CD      NOT IN ('PAPAC','EGSUZ')
        AND     T2.VPS_ETD_DT       BETWEEN T.FM_EFF_DT   
                                    AND     T.TO_EFF_DT+1   
        AND     T3.ACT_CRR_CD = 'SML' 
        
#if(${slan_cd} != '')
        AND     T.SLAN_CD      = @[slan_cd]
#end
#if(${port_cd} != '')
        AND     T.VPS_PORT_CD  = @[port_cd]
#end
#if(${kpi_tgt_yr} != '')
        AND     T.BSEL_YR   = @[kpi_tgt_yr]
#end
#if(${kpi_ver_seq} != '')
        AND     T.BSEL_VER_SEQ  = @[kpi_ver_seq]
#end
        )
WHERE   1=1
#if(${rhq_ofc_cd} != '')
AND     RHQ    = @[rhq_ofc_cd]
#end
) 

#end

SELECT  RHQ
      , DECODE(NO, 1, 'KPI', 'PFMC') AS GUBUN
      , VPS_PORT_CD
      , SLAN_CD
        --::JSK::----------
      , DECODE(PORT_KPI_DIR_CD, 'A', '', PORT_KPI_DIR_CD) AS PORT_KPI_DIR_CD
      , CLPT_IND_SEQ
      , DECODE(CLPT_IND_SEQ, 2, 1, 0) AS CLPT_IND_SEQ_VIEW
        -------------------
      , VSL_CD		 
      , SKD_VOY_NO 
      , SKD_DIR_CD 
      , PORT_CD
      , DECODE(NO, 1, NULL, KPI_ACHIVE) AS KPI_ACHIVE
      , VVD_CD
      , TTL_MVS
	  , TTL_MVS		AS TTL_MVS2
      , STEAM_IN_TIME
      , ARRIVAL_TIME
      , OPERATION_TIME
      , DEPARTURE_TIME
      , PORT_TIME
      , GROSS_TML_PROD
      , GROSS_CRANE_PROD
      , NET_CRANE_PROD
      , TWIN_LIFT
      , DUAL_CYCLE
      , RESTOW
      , PORT_ACT_CTNT 
      , PORT_ACT_COUNT
      , CRANE_NO
      , STW_DIF_HRS_FLG
      , STW_DIF_HRS
      , ACT_DEP_DT, WORK_COMMENCED, WORK_COPLETED
      , VVD_CD_GROUP
		, EXCEPT_CD
		, EXCEPT_POB_FLG
		, UPDATE_SYS
        , DECODE(FULL_D_20,0, NULL, FULL_D_20) FULL_D_20  
        , DECODE(FULL_D_40,0, NULL, FULL_D_40) FULL_D_40
        , DECODE(ET_D_20  ,0, NULL, ET_D_20  ) ET_D_20
        , DECODE(ET_D_40  ,0, NULL, ET_D_40  ) ET_D_40 
        , DECODE(FULL_L_20,0, NULL, FULL_L_20) FULL_L_20 
        , DECODE(FULL_L_40,0, NULL, FULL_L_40) FULL_L_40 
        , DECODE(ET_L_20  ,0, NULL, ET_L_20  ) ET_L_20 
        , DECODE(ET_L_40  ,0, NULL, ET_L_40  ) ET_L_40
FROM    (
                SELECT  ROW_NUMBER () OVER (ORDER BY KPI.RHQ
                                            , CASE WHEN (VVD_CD_GROUP = 1 AND RHQ_GROUP = 1) THEN NULL
                                                   ELSE KPI.VPS_PORT_CD || KPI.SLAN_CD
                                              END
                                            , KPI.PORT_KPI_DIR_CD     ASC
                                            , KPI.CLPT_IND_SEQ        ASC
                                            , CASE WHEN KPI.NO = 1 THEN NVL(KPI.YD_CD,'ZZZZZZZ')  
                                                   ELSE NVL(T21.YD_CD,'AAAAAAA')
                                              END DESC
                                            , CASE WHEN KPI.NO = 1 THEN KPI.COMMENCE 
                                                   ELSE WORK_COMMENCED
                                              END 
                                            , KPI.NO
                                            , VVD_CD
                                            , VVD_CD_GROUP  NULLS FIRST
                                            , RHQ_GROUP  NULLS FIRST
                                            ) AS ROW_SEQ
                      , VVD_CD_GROUP
                      , RHQ_GROUP
                      , KPI.NO
                      , KPI.RHQ
                      , KPI.VPS_PORT_CD
                      , KPI.SLAN_CD                       
                      , KPI.PORT_KPI_DIR_CD
                      , KPI.CLPT_IND_SEQ
                      , DECODE(KPI.NO, 1, KPI.VSL_CD	    	, T21.VSL_CD	  )    AS VSL_CD		 
                      , DECODE(KPI.NO, 1, KPI.SKD_VOY_NO		, T21.SKD_VOY_NO  )    AS SKD_VOY_NO
                      , DECODE(KPI.NO, 1, KPI.SKD_DIR_CD		, T21.SKD_DIR_CD  )    AS SKD_DIR_CD
                      , DECODE(KPI.NO, 1, KPI.VPS_PORT_CD		, T21.PORT_CD     )    AS PORT_CD
                      , CASE WHEN KPI.PORT_STAY_HRS <= T21.PORT_TIME THEN 'N'
                               ELSE 'Y'
                               END  KPI_ACHIVE 
                      , DECODE(KPI.NO, 1, KPI.VSL_CD||KPI.SKD_VOY_NO||KPI.SKD_DIR_CD,    T21.VVD_CD ) AS VVD_CD                               
                      , VSL_CALL_NO
					  , NVL2(T21.YD_CD, SUBSTR(T21.YD_CD, 1, 5) ||'('|| SUBSTR(T21.YD_CD, 6, 2) ||')', NULL)    AS YD_CD
					  , DECODE(KPI.NO, 1, KPI.MVS               , T21.TTL_MVS           ) AS TTL_MVS                   
                      , DECODE(KPI.NO, 1, KPI.TTL_CNTR_MV_KNT   , ''                    ) AS TTL_MVS_KPI
                      , DECODE(KPI.NO, 1, KPI.STM_IN_HRS        , T21.STEAM_IN_TIME     ) AS STEAM_IN_TIME
                      , DECODE(KPI.NO, 1, KPI.VSL_ARR_HRS       , T21.ARRIVAL_TIME      ) AS ARRIVAL_TIME
                      , DECODE(KPI.NO, 1, KPI.TML_OP_HRS        , T21.OPERATION_TIME    ) AS OPERATION_TIME
                      , DECODE(KPI.NO, 1, KPI.VSL_DEP_HRS       , T21.DEPARTURE_TIME    ) AS DEPARTURE_TIME
                      , DECODE(KPI.NO, 1, KPI.PORT_STAY_HRS     , T21.PORT_TIME         ) AS PORT_TIME
                      , DECODE(KPI.NO, 1, KPI.GRS_TML_PROD_HRS  , T21.GROSS_TML_PROD    ) AS GROSS_TML_PROD
                      , DECODE(KPI.NO, 1, KPI.GRS_CRN_PROD_HRS  , T21.GROSS_CRANE_PROD  ) AS GROSS_CRANE_PROD
                      , DECODE(KPI.NO, 1, KPI.NET_CRN_PROD_HRS  , T21.NET_CRANE_PROD    ) AS NET_CRANE_PROD
                      , DECODE(KPI.NO, 1, KPI.TWN_LFT_HRS       , T21.TWIN_LIFT         ) AS TWIN_LIFT
                      , DECODE(KPI.NO, 1, KPI.DUL_CYC_HRS       , T21.DUAL_CYCLE        ) AS DUAL_CYCLE
                      , DECODE(KPI.NO, 1, KPI.RSTWG_HRS         , T21.RESTOW            ) AS RESTOW

                      , PORT_ACT_CTNT 
                      , PORT_ACT_COUNT                      

                      , CRANE_NO
                      , ACT_DEP_DT
					  , DECODE(KPI.NO, 1, COMMENCE	    , WORK_COMMENCED	  )    AS WORK_COMMENCED
				      , WORK_COPLETED
						, DECODE(KPI.NO, 1, ''   , T21.EXCEPT_CD)       AS EXCEPT_CD
						, DECODE(KPI.NO, 1, ''   , T21.EXCEPT_POB_FLG)  AS EXCEPT_POB_FLG
                        , DECODE(KPI.NO, 1, ''   , T21.UPDATE_SYS)      AS UPDATE_SYS
                        , DECODE(KPI.NO, 1, ''   , T21.FULL_D_20)       AS FULL_D_20
                        , DECODE(KPI.NO, 1, ''	 , T21.FULL_D_40)	 	AS FULL_D_40  
                        , DECODE(KPI.NO, 1, ''	 , T21.ET_D_20  )	 	AS ET_D_20   
                        , DECODE(KPI.NO, 1, ''	 , T21.ET_D_40  )	 	AS ET_D_40 
                        , DECODE(KPI.NO, 1, ''	 , T21.FULL_L_20)	 	AS FULL_L_20
                        , DECODE(KPI.NO, 1, ''	 , T21.FULL_L_40)	 	AS FULL_L_40 
                        , DECODE(KPI.NO, 1, ''	 , T21.ET_L_20  )	 	AS ET_L_20
                        , DECODE(KPI.NO, 1, ''	 , T21.ET_L_40  )	 	AS ET_L_40 
                        , DECODE(KPI.NO, 1, ''	 , T21.STW_DIF_HRS_FLG  )	AS STW_DIF_HRS_FLG
                        , DECODE(KPI.NO, 1, ''	 , T21.STW_DIF_HRS  )	AS STW_DIF_HRS                                                                                                                                                                      

                FROM    (
                        SELECT   2 NO
                               , GROUPING(KPI.RHQ)                                                    AS RHQ_GROUP   
                               , GROUPING(VVD_CD)                                                     AS VVD_CD_GROUP  
                               , CASE WHEN (GROUPING(KPI.RHQ) = 1 AND GROUPING(VVD_CD) = 1) THEN
                                           LAG(KPI.RHQ) OVER (ORDER BY KPI.RHQ, KPI.VPS_PORT_CD, KPI.SLAN_CD)
                                           ELSE 
                                           KPI.RHQ
                                           END                                                        AS RHQ
                               , CASE WHEN (GROUPING(KPI.RHQ) = 1 AND GROUPING(VVD_CD) = 1) THEN
                                          LAG(KPI.SLAN_CD) OVER (ORDER BY KPI.RHQ, KPI.VPS_PORT_CD, KPI.SLAN_CD)
                                           ELSE 
                                           KPI.SLAN_CD
                                           END                                                        AS SLAN_CD
                               , CASE WHEN (GROUPING(KPI.RHQ) = 1 AND GROUPING(VVD_CD) = 1) THEN
                                           LAG(KPI.VPS_PORT_CD) OVER (ORDER BY KPI.RHQ, KPI.VPS_PORT_CD, KPI.SLAN_CD)
                                           ELSE
                                           KPI.VPS_PORT_CD 
                                           END                                                        AS VPS_PORT_CD

                               , CASE WHEN (GROUPING(KPI.RHQ) = 1 AND GROUPING(VVD_CD) = 1) THEN
                                           LAG(KPI.PORT_KPI_DIR_CD) OVER (ORDER BY KPI.RHQ, KPI.VPS_PORT_CD, KPI.SLAN_CD, KPI.PORT_KPI_DIR_CD, KPI.CLPT_IND_SEQ)
                                           ELSE
                                           KPI.PORT_KPI_DIR_CD 
                                           END                                                        AS PORT_KPI_DIR_CD   
                               , CASE WHEN (GROUPING(KPI.RHQ) = 1 AND GROUPING(VVD_CD) = 1) THEN
                                           LAG(KPI.CLPT_IND_SEQ) OVER (ORDER BY KPI.RHQ, KPI.VPS_PORT_CD, KPI.SLAN_CD, KPI.PORT_KPI_DIR_CD, KPI.CLPT_IND_SEQ)
                                           ELSE
                                           KPI.CLPT_IND_SEQ 
                                           END                                                        AS CLPT_IND_SEQ                                                                                                                      

                               , MAX(T11.VSL_CD	     )  VSL_CD			 
                               , MAX(T11.SKD_VOY_NO  )  SKD_VOY_NO   
                               , MAX(T11.SKD_DIR_CD  )  SKD_DIR_CD 
                               , MAX(T11.PORT_CD     )  PORT_CD 
                               , T11.YD_CD
                               , T11.VVD_CD
                               , ACT_DEP_DT
                               , WORK_COMMENCED
                               , WORK_COPLETED
                               , CASE WHEN (GROUPING(KPI.RHQ) = 1 AND GROUPING(VVD_CD) = 1) THEN COUNT(DECODE(MAX(T11.EXCEPT_CD),'1','', T11.VVD_CD)) OVER ()
                                      ELSE COUNT(DECODE(MAX(T11.EXCEPT_CD),'1','', T11.VVD_CD)) OVER (PARTITION BY KPI.RHQ, KPI.VPS_PORT_CD, KPI.SLAN_CD, KPI.PORT_KPI_DIR_CD, KPI.CLPT_IND_SEQ)
                                 END                                                        AS VSL_CALL_NO
                               , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','', T11.TTL_MVS)), 0)              AS TTL_MVS
                               , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','', STEAM_IN_TIME)), 1)            AS STEAM_IN_TIME
                               , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','', ARRIVAL_TIME)), 1)             AS ARRIVAL_TIME
                               , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',
                                 CASE WHEN KPI.TTL_CNTR_MV_KNT IS NULL  THEN NULL
                                      WHEN T11.OPERATION_TIME = 0       THEN 0
                                      WHEN T11.TTL_MVS        = 0       THEN 0
                                      ELSE T11.OPERATION_TIME
                                 END                         )), 1)                                    AS OPERATION_TIME
                               , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','', DEPARTURE_TIME )), 1)          AS DEPARTURE_TIME
                               , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','', STEAM_IN_TIME )), 1) + ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',ARRIVAL_TIME )), 1) + ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',DEPARTURE_TIME )), 1) +
                                 ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',
                                 CASE WHEN KPI.TTL_CNTR_MV_KNT IS NULL  THEN NULL
                                      WHEN T11.OPERATION_TIME = 0       THEN 0
                                      WHEN T11.TTL_MVS        = 0       THEN 0
                                      ELSE KPI.MVS / (T11.TTL_MVS / T11.OPERATION_TIME)
                                 END                        )), 1)                                    AS PORT_TIME
                               , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',GROSS_TML_PROD    )), 1)       AS GROSS_TML_PROD
                               , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',GROSS_CRANE_PROD  )), 1)       AS GROSS_CRANE_PROD
                               , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',NET_CRANE_PROD    )), 1)       AS NET_CRANE_PROD
                               , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',CRANE_NO          )), 1)       AS CRANE_NO

                               , MAX(DECODE(T11.EXCEPT_CD,'1','', T11.PORT_ACT_CTNT  )) 	AS PORT_ACT_CTNT
                               , MAX(DECODE(T11.EXCEPT_CD,'1','', T11.PORT_ACT_COUNT )) 	AS PORT_ACT_COUNT  
                                , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','', T11.TWIN_LIFT  )), 1) AS TWIN_LIFT                
                                , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','', T11.DUAL_CYCLE )), 1) AS DUAL_CYCLE               
                                , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','', T11.RESTOW     )), 1) AS RESTOW 
								
								, MAX(T11.EXCEPT_CD)  EXCEPT_CD
								, MAX(T11.EXCEPT_POB_FLG)  EXCEPT_POB_FLG
								, MAX(T11.UPDATE_SYS) UPDATE_SYS
								, ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',T11.FULL_D_20)), 0)     AS FULL_D_20
                                , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',T11.FULL_D_40)), 0)		AS FULL_D_40 
                                , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',T11.ET_D_20  )), 0)		AS ET_D_20
                                , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',T11.ET_D_40  )), 0)		AS ET_D_40
                                , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',T11.FULL_L_20)), 0)		AS FULL_L_20
                                , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',T11.FULL_L_40)), 0)		AS FULL_L_40  
                                , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',T11.ET_L_20  )), 0)		AS ET_L_20 
                                , ROUND(AVG(DECODE(T11.EXCEPT_CD,'1','',T11.ET_L_40  )), 0)		AS ET_L_40 
                                , MAX(NVL2(STW_DIF_HRS, DECODE(SIGN(STW_DIF_HRS), -1, 'N', 'Y') ,'N')) STW_DIF_HRS_FLG
                                , MAX(STW_DIF_HRS) STW_DIF_HRS
                        FROM    (
                                SELECT     (
                                            SELECT  CASE WHEN NVL(ML.DELT_FLG,'N') <> 'N' OR ML.CALL_PORT_FLG <> 'Y' THEN ''
                                                    ELSE (SELECT O.OFC_N3RD_LVL_CD FROM MAS_OFC_LVL O WHERE O.OFC_CD = ML.EQ_CTRL_OFC_CD AND O.OFC_APLY_TO_YRMON ='999912' AND O.OFC_LVL < 9)
--                                                             CASE WHEN ML.CONTI_CD  IN ('E','F') AND ML.LOC_CD NOT IN('EGAIS','ZADUR','RUVVO')               THEN 'HAMRU'
--                                                                  WHEN ML.CONTI_CD  = 'M'                                                                    THEN 'NYCRA'
--                                                                  WHEN ML.CONTI_CD = 'A' AND ML.SCONTI_CD = 'AF'  THEN DECODE(ML.CNT_CD,'KR','SELIB','JP','TYOIB','SHARC')
--                                                                  WHEN (ML.CONTI_CD = 'A'        AND ML.SCONTI_CD <> 'AF') OR ML.LOC_CD IN ('EGAIS','ZADUR') THEN 'SINRS'
--																  WHEN ML.CONTI_CD  IN ('E') AND ML.LOC_CD = 'RUVVO' THEN 'VVOIA'
--                                                                  ELSE ''
--                                                             END
                                                   END
                                             FROM   MDM_LOCATION  ML
                                             WHERE  ML.LOC_CD = M.VPS_PORT_CD
                                             )                                              AS RHQ
                                           , M.VSL_CD
                                           , M.SKD_VOY_NO
                                           , M.SKD_DIR_CD         
                                           , M.VSL_CD||M.SKD_VOY_NO||M.SKD_DIR_CD           AS VVD_CD  
                                           , M.VPS_PORT_CD                                  AS PORT_CD
                                           , M.CLPT_IND_SEQ
                                           , M.SLAN_CD
                                           , M.YD_CD       
                                           , M.MVS                                         AS TTL_MVS
                                           , M.TOR_POB
								           , M.EXCEPT_POB_FLG
								           , CASE WHEN M.EXCEPT_POB_FLG <> '1' THEN
								                         CASE WHEN NVL(M.PLT_IN_DT, M.VPS_ETA_DT) > M.VPS_ETA_DT AND NVL(M.PLT_IN_DT, M.VPS_ETA_DT) < M.VPS_ETB_DT THEN NVL((M.VPS_ETB_DT  - M.PLT_IN_DT )*24, 0)   
								                              ELSE NVL((M.VPS_ETB_DT  - M.VPS_ETA_DT  )*24, 0)
								                               END    
								                  ELSE      
								                         CASE WHEN NVL(M.TOR_POB, M.VPS_ETA_DT) > M.VPS_ETA_DT AND NVL(M.TOR_POB, M.VPS_ETA_DT) < M.VPS_ETB_DT THEN NVL((M.VPS_ETB_DT  - NVL(M.TOR_POB, M.VPS_ETA_DT) )*24, 0)   
								                              ELSE NVL((M.VPS_ETB_DT  - M.VPS_ETA_DT  )*24, 0)
								                               END    
								                  END AS STEAM_IN_TIME 
								            , CASE WHEN NVL(M.TOR_POB, M.VPS_ETA_DT) > M.VPS_ETA_DT AND NVL(M.TOR_POB, M.VPS_ETA_DT) < M.VPS_ETB_DT THEN NVL((M.VPS_ETB_DT  - NVL(M.TOR_POB, M.VPS_ETA_DT) )*24, 0)   
								                              ELSE NVL((M.VPS_ETB_DT  - M.VPS_ETA_DT  )*24, 0)
								              END TOR_STEAM_IN_TIME                                  
                                           , NVL((M.COMMENCE    - M.VPS_ETB_DT  )*24, 0)   AS ARRIVAL_TIME
                                           , NVL((M.COMPLETE    - M.COMMENCE    )*24, 0)   AS OPERATION_TIME
                                           , NVL((M.VPS_ETD_DT  - M.COMPLETE    )*24, 0)   AS DEPARTURE_TIME
                                           , NVL((M.VPS_ETD_DT  - M.VPS_ETA_DT  )*24, 0)   AS PORT_TIME
                                           , CASE WHEN NVL(TO_NUMBER(SUBSTR(M.GROSS_WORK,1,INSTR(M.GROSS_WORK,':')-1)) + TO_NUMBER(SUBSTR(M.GROSS_WORK,INSTR(M.GROSS_WORK,':')+1)/60),0) = 0 THEN 0
                                                  ELSE M.MVS / (NVL(TO_NUMBER(SUBSTR(M.GROSS_WORK,1,INSTR(M.GROSS_WORK,':')-1)) + TO_NUMBER(SUBSTR(M.GROSS_WORK,INSTR(M.GROSS_WORK,':')+1)/60),0))
                                             END                                             AS GROSS_TML_PROD     /* TOTAL MOVES / GROSS_WORK */     
                                           , CASE WHEN NVL(TO_NUMBER(SUBSTR(M.GROSS_GANG,1,INSTR(M.GROSS_GANG,':')-1)) + TO_NUMBER(SUBSTR(M.GROSS_GANG,INSTR(M.GROSS_GANG,':')+1)/60),0) = 0 THEN 0
                                                  ELSE M.MVS / (NVL(TO_NUMBER(SUBSTR(M.GROSS_GANG,1,INSTR(M.GROSS_GANG,':')-1)) + TO_NUMBER(SUBSTR(M.GROSS_GANG,INSTR(M.GROSS_GANG,':')+1)/60),0)) 
                                             END                                             AS GROSS_CRANE_PROD   /* TOTAL MOVES / GROSS_GANG */
                                           , CASE WHEN NVL(TO_NUMBER(SUBSTR(M.NET_GANG,1,INSTR(M.NET_GANG,':')-1)) + TO_NUMBER(SUBSTR(M.NET_GANG,INSTR(M.NET_GANG,':')+1)/60),0) = 0 THEN 0
                                                  ELSE M.MVS / (NVL(TO_NUMBER(SUBSTR(M.NET_GANG,1,INSTR(M.NET_GANG,':')-1)) + TO_NUMBER(SUBSTR(M.NET_GANG,INSTR(M.NET_GANG,':')+1)/60),0))
                                             END                                             AS NET_CRANE_PROD     /* TOTAL MOVES / NET_GANG   */
                                           , CASE WHEN NVL(TO_NUMBER(SUBSTR(M.GROSS_WORK,1,INSTR(M.GROSS_WORK,':')-1)) + TO_NUMBER(SUBSTR(M.GROSS_WORK,INSTR(M.GROSS_WORK,':')+1)/60),0) = 0 THEN 0
                                                  ELSE (NVL(TO_NUMBER(SUBSTR(M.GROSS_GANG,1,INSTR(M.GROSS_GANG,':')-1)) + TO_NUMBER(SUBSTR(M.GROSS_GANG,INSTR(M.GROSS_GANG,':')+1)/60),0)) / (NVL(TO_NUMBER(SUBSTR(M.GROSS_WORK,1,INSTR(M.GROSS_WORK,':')-1)) + TO_NUMBER(SUBSTR(M.GROSS_WORK,INSTR(M.GROSS_WORK,':')+1)/60),0))
                                             END                                             AS CRANE_NO           /* GROSS_GANG / GROSS_WORK    */
                                           , M.VPS_ETD_DT                                   AS ACT_DEP_DT
                                           , TO_CHAR(M.COMMENCE, 'YYYY-MM-DD HH24:MI')      AS WORK_COMMENCED
                                           , TO_CHAR(M.COMPLETE, 'YYYY-MM-DD HH24:MI')      AS WORK_COPLETED

											, PORT_ACT_CTNT
											, PORT_ACT_COUNT
                                          , CASE WHEN ACT_CTNT1='CHT0001' THEN NULLIF(ACT_COUNT1,'0')
                                                 WHEN ACT_CTNT2='CHT0001' THEN NULLIF(ACT_COUNT2,'0')
                                                 WHEN ACT_CTNT3='CHT0001' THEN NULLIF(ACT_COUNT3,'0')
                                                 ELSE ''
                                            END TWIN_LIFT                
                                          , CASE WHEN ACT_CTNT1='CHT0002' THEN NULLIF(ACT_COUNT1,'0')
                                                 WHEN ACT_CTNT2='CHT0002' THEN NULLIF(ACT_COUNT2,'0')
                                                 WHEN ACT_CTNT3='CHT0002' THEN NULLIF(ACT_COUNT3,'0')
                                                 ELSE ''
                                            END DUAL_CYCLE                
                                          , CASE WHEN ACT_CTNT1='CHT0003' THEN NULLIF(ACT_COUNT1,'0')
                                                 WHEN ACT_CTNT2='CHT0003' THEN NULLIF(ACT_COUNT2,'0')
                                                 WHEN ACT_CTNT3='CHT0003' THEN NULLIF(ACT_COUNT3,'0')
                                                 ELSE ''
                                            END RESTOW 
                                           
                                            , EXCEPT_CD
											, UPDATE_SYS
                                            , FULL_D_20
											, FULL_D_40
                                            , ET_D_20  
                                            , ET_D_40 
                                            , FULL_L_20
                                            , FULL_L_40
                                            , ET_L_20 
                                            , ET_L_40
                                            , (SELECT NVL(ROUND((ACT_BRTH_DT - TRSM_LOCL_DT)*24,2), -1) 
												 FROM (
                                                        SELECT
                                                        H.VSL_CD,
                                                        H.SKD_VOY_NO,
                                                        H.SKD_DIR_CD,
                                                        H.VPS_PORT_CD,
                                                        H.CLPT_IND_SEQ, 
                                                        AK.ACT_BRTH_DT,
                                                        H.TRSM_LOCL_DT,
                                                        ROW_NUMBER() OVER(PARTITION BY 
                                                        H.VSL_CD,
                                                        H.SKD_VOY_NO,
                                                        H.SKD_DIR_CD,
                                                        H.VPS_PORT_CD,
                                                        H.CLPT_IND_SEQ
                                                        ORDER BY H.TRSM_HIS_SEQ DESC) RN
                                                        FROM
                                                        VSK_VSL_PORT_SKD_TRSM_HIS H,
                                                        VSK_ACT_PORT_SKD AK
                                                        WHERE 1=1
                                                        AND H.VSL_CD         = AK.VSL_CD           (+)
                                                        AND H.SKD_VOY_NO     = AK.SKD_VOY_NO       (+)
                                                        AND H.SKD_DIR_CD     = AK.SKD_DIR_CD       (+)
                                                        AND H.VPS_PORT_CD    = AK.VPS_PORT_CD      (+)
                                                        AND H.CLPT_IND_SEQ   = AK.CLPT_IND_SEQ     (+) 
                                                        AND H.ACT_CRR_CD    = 'SML'
                                                        AND H.TRSM_PURP_CD	= 'STW'
                                                       )
                                                  WHERE RN = 1 
                                                    AND VSL_CD         = M.VSL_CD
                                                    AND SKD_VOY_NO     = M.SKD_VOY_NO
                                                    AND SKD_DIR_CD     = M.SKD_DIR_CD
                                                    AND VPS_PORT_CD    = M.VPS_PORT_CD
                                                    AND CLPT_IND_SEQ   = M.CLPT_IND_SEQ                                               
                                                 ) AS STW_DIF_HRS     -- VSK > Pre stowage plan CHECK
									FROM   (

									SELECT C.VSL_CD      
                                         , C.SKD_VOY_NO  
                                         , C.SKD_DIR_CD  
                                         , C.VPS_PORT_CD 
                                         , C.CLPT_IND_SEQ
                                         , C.SLAN_CD     
                                         , C.YD_CD       
                                         , MAX(C.MVS       )    AS MVS   
                                         , MAX(C.VPS_ETA_DT)    AS VPS_ETA_DT
                                         , MAX(C.PLT_IN_DT )    AS PLT_IN_DT  
                                         , MAX(C.VPS_ETB_DT)    AS VPS_ETB_DT
                                         , MAX(C.COMMENCE  )    AS COMMENCE  
                                         , MAX(C.COMPLETE  )    AS COMPLETE  
                                         , MAX(C.VPS_ETD_DT)    AS VPS_ETD_DT
                                         , MAX((SELECT WRK_PERF_DT FROM OPF_PORT_TM_ACT A
								               WHERE C.VSL_CD      = A.VSL_CD
								                AND C.SKD_VOY_NO   = A.SKD_VOY_NO
								                AND C.SKD_DIR_CD   = A.SKD_DIR_CD
								                AND C.VPS_PORT_CD  = A.VPS_PORT_CD
								                AND C.CLPT_IND_SEQ = A.CLPT_IND_SEQ 
								                AND A.PORT_ACT_CTNT IN ('PTA0001')   -- TOR POB(Pilot on board)
								           )) TOR_POB
                                         , MAX(C.GROSS_WORK)    AS GROSS_WORK
                                         , MAX(C.GROSS_GANG)    AS GROSS_GANG
                                         , MAX(C.NET_GANG  )    AS NET_GANG  
                                         , MAX(C.PORT_ACT_CTNT) AS PORT_ACT_CTNT
                                         , MAX(C.PORT_ACT_COUNT)AS PORT_ACT_COUNT
                                          , REGEXP_SUBSTR(MAX(C.PORT_ACT_CTNT),'[^,]+',1,1)  AS ACT_CTNT1
                                          , REGEXP_SUBSTR(MAX(C.PORT_ACT_CTNT),'[^,]+',1,2)  AS ACT_CTNT2
                                          , REGEXP_SUBSTR(MAX(C.PORT_ACT_CTNT),'[^,]+',1,3)  AS ACT_CTNT3                      
                                          , REGEXP_SUBSTR(MAX(C.PORT_ACT_COUNT),'[^,]+',1,1) AS ACT_COUNT1 
                                          , REGEXP_SUBSTR(MAX(C.PORT_ACT_COUNT),'[^,]+',1,2) AS ACT_COUNT2 
                                          , REGEXP_SUBSTR(MAX(C.PORT_ACT_COUNT),'[^,]+',1,3) AS ACT_COUNT3
                                         , MAX(C.EXCEPT_CD)     AS EXCEPT_CD
                                         , MAX(C.EXCEPT_POB_FLG)     AS EXCEPT_POB_FLG
                                         , MAX(C.UPDATE_SYS)    AS UPDATE_SYS                                         
                                        , MAX(C.FULL_D_20) AS FULL_D_20
                                        , MAX(C.FULL_D_40) AS FULL_D_40
                                        , MAX(C.ET_D_20  ) AS ET_D_20  
                                        , MAX(C.ET_D_40  ) AS ET_D_40  
                                        , MAX(C.FULL_L_20) AS FULL_L_20
                                        , MAX(C.FULL_L_40) AS FULL_L_40
                                        , MAX(C.ET_L_20  ) AS ET_L_20  
                                        , MAX(C.ET_L_40  ) AS ET_L_40    
									    FROM (

											SELECT 
    									               WM_CONCAT(B2.PORT_ACT_CTNT) OVER(PARTITION BY   B.VSL_CD 
    									                                                        ,B.SKD_VOY_NO  
                                                                                                ,B.SKD_DIR_CD  
                                                                                                ,B.VPS_PORT_CD 
                                                                                                ,B.CLPT_IND_SEQ									                
									                                                       ) PORT_ACT_CTNT
                                                      ,WM_CONCAT(B2.CNTR_HNDL_KNT) OVER(PARTITION BY   B.VSL_CD      
                                                                                                ,B.SKD_VOY_NO  
                                                                                                ,B.SKD_DIR_CD  
                                                                                                ,B.VPS_PORT_CD 
                                                                                                ,B.CLPT_IND_SEQ	
                                                                                            ) PORT_ACT_COUNT                                
                                                       ,B.*                                                       
    	       								FROM (			
                                              SELECT 
                                                     T2.VSL_CD        		AS VSL_CD
                                                   , T2.SKD_VOY_NO    		AS SKD_VOY_NO
                                                   , T2.SKD_DIR_CD    		AS SKD_DIR_CD
                                                   , T2.VPS_PORT_CD   		AS VPS_PORT_CD
                                                   , T2.CLPT_IND_SEQ  		AS CLPT_IND_SEQ 
                                                   , T2.SLAN_CD       		AS SLAN_CD
                                                   , T2.YD_CD         		AS YD_CD
                                                   , MAX(T1.MVS       )    AS MVS   
                                                   , MAX(T2.VPS_ETA_DT)    AS VPS_ETA_DT
                                                   , MAX(T4.PLT_IN_DT )    AS PLT_IN_DT  
                                                   , MAX(T2.VPS_ETB_DT)    AS VPS_ETB_DT
                                                   , MAX(T1.COMMENCE  )    AS COMMENCE  
                                                   , MAX(T1.COMPLETE  )    AS COMPLETE  
                                                   , MAX(T2.VPS_ETD_DT)    AS VPS_ETD_DT
                                                   , MAX(T1.GROSS_WORK)    AS GROSS_WORK
                                                   , MAX(T1.GROSS_GANG)    AS GROSS_GANG
                                                   , MAX(T1.NET_GANG  )    AS NET_GANG                                                    
												   , MAX(DECODE(NVL(T1.EXCEPT_CD,'N'), 'Y', 1, 0)) AS EXCEPT_CD
												   , MAX(DECODE(NVL(T1.EXCEPT_POB_FLG,'N'), 'Y', 1, 0)) AS EXCEPT_POB_FLG
                                                   , MAX(T1.UPDATE_SYS)    AS UPDATE_SYS
                                                    , SUM(DECODE(S.CNTR_TYPE, 'E', NULL, DECODE(S.STATUS, 'DS', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'DT', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0))) FULL_D_20  --DS+DT
                                                    , SUM(DECODE(S.CNTR_TYPE, 'E', NULL, DECODE(S.STATUS, 'DS', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'DT', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0))) FULL_D_40
                                                    , SUM(DECODE(S.CNTR_TYPE, 'E', DECODE(S.STATUS, 'DS', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'DT', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0), 0)) ET_D_20
                                                    , SUM(DECODE(S.CNTR_TYPE, 'E', DECODE(S.STATUS, 'DS', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'DT', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0), 0)) ET_D_40
                                                      
                                                    , SUM(DECODE(S.CNTR_TYPE, 'E', NULL, DECODE(S.STATUS, 'LM', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'OT', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0) +
                                                                                  DECODE(S.STATUS, 'LI', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'LT', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0))) FULL_L_20  --LM+OT+LI+LT
                                                    , SUM(DECODE(S.CNTR_TYPE, 'E', NULL, DECODE(S.STATUS, 'LM', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'OT', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0) +
                                                                                  DECODE(S.STATUS, 'LI', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'LT', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0))) FULL_L_40
                                                                                
                                                    , SUM(DECODE(S.CNTR_TYPE, 'E', DECODE(S.STATUS, 'LM', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'OT', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0) +
                                                                                  DECODE(S.STATUS, 'LI', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'LT', DECODE(S.CNTR_SIZE, '2', DECODE(QTY,NULL,0, QTY), 0),0), 0)) ET_L_20 
                                                    , SUM(DECODE(S.CNTR_TYPE, 'E', DECODE(S.STATUS, 'LM', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'OT', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0) +
                                                                                  DECODE(S.STATUS, 'LI', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0) + DECODE(S.STATUS, 'LT', DECODE(S.CNTR_SIZE, '4', DECODE(QTY,NULL,0, QTY), 0),0), 0)) ET_L_40
			                                FROM     TDR_HEADER       T1
			                                       , VSK_VSL_PORT_SKD T2
			                                       , VSK_VSL_SKD      T3
												   , FCM_DEP_RPT      T4
												   , TDR_SUMMARY      S
			                                WHERE     1 = 1
			                                AND     T1.VSL_CD            = T2.VSL_CD
			                                AND     T1.VOY_NO            = T2.SKD_VOY_NO
			                                AND     T1.DIR_CD            = T2.SKD_DIR_CD
			                                AND     T1.PORT_CD           = T2.VPS_PORT_CD
			                                AND     T1.CALL_IND          = T2.CLPT_IND_SEQ
			                                AND     T2.VSL_CD            = T3.VSL_CD
			                                AND     T2.SKD_VOY_NO        = T3.SKD_VOY_NO
			                                AND     T2.SKD_DIR_CD        = T3.SKD_DIR_CD  
			                                AND     T2.SLAN_CD           = T3.VSL_SLAN_CD
			        						AND     T1.VSL_CD            = T4.VSL_CD(+)
											AND     T1.VOY_NO            = T4.SKD_VOY_NO(+)
											AND     T1.DIR_CD            = T4.SKD_DIR_CD(+)
											AND     T1.PORT_CD           = T4.DEP_PORT_CD(+)
											AND     T1.CALL_IND          = T4.CLPT_IND_SEQ(+)
											AND   	T1.VSL_CD      		 = S.VSL_CD
											AND   	T1.VOY_NO      		 = S.VOY_NO
			                                AND   	T1.DIR_CD      		 = S.DIR_CD
			                                AND   	T1.PORT_CD     		 = S.PORT_CD
			                                AND   	T1.CALL_IND    		 = S.CALL_IND 
			                                AND     T2.PORT_SKD_STS_CD   = 'D'
			                                AND     T2.TURN_PORT_IND_CD IN ('Y','N')
			                                AND     NVL(T2.SKD_CNG_STS_CD, ' ') <> 'S'
			                                AND     T2.VPS_PORT_CD      NOT IN ('PAPAC','EGSUZ')
			                                AND     T2.VPS_ETD_DT       BETWEEN TO_DATE(REPLACE(@[fr_dt], '-', '')||'000000', 'YYYYMMDDHH24MISS') 
			                                                            AND     TO_DATE(REPLACE(@[to_dt], '-', '')||'235959', 'YYYYMMDDHH24MISS')
			                                AND     T3.ACT_CRR_CD = 'SML'
											AND   	S.STATUS   IN ('DS','DT','LM','OT','LI','LT')
											AND    ((T1.UPDATE_SYS = 'N' AND S.CNTR_TYPE NOT IN ('D', 'R', 'A')) OR T1.UPDATE_SYS = 'I')   --ALPS(N): D,R,A 포함하지 않고 F/E CNTR COUNT계산, ISTOWG(I): D,R,A 포함하여  CNTR COUNT계산
			#if (${gubun} == 'KPI')
			                                AND      1 = 2        -- KPI가 입력될 경우 실적 정보는 조회될 필요가 없다.
			#end
			#if(${slan_cd} != '')
			                                AND     SLAN_CD             = @[slan_cd]
			#end
			#if(${port_cd} != '')
			                                AND     T2.VPS_PORT_CD      = @[port_cd]
			#end
			                                            GROUP BY                               
			                                              T2.VSL_CD      
			                                            , T2.SKD_VOY_NO  
			                                            , T2.SKD_DIR_CD  
			                                            , T2.VPS_PORT_CD 
			                                            , T2.CLPT_IND_SEQ
			                                            , T2.SLAN_CD     
			                                            , T2.YD_CD 
        			                        ) B LEFT OUTER JOIN
        			                          OPF_PORT_TM_ACT B2
        			                             ON B2.VSL_CD       = B.VSL_CD
                                                AND B2.SKD_VOY_NO   = B.SKD_VOY_NO
                                                AND B2.SKD_DIR_CD   = B.SKD_DIR_CD
                                                AND B2.VPS_PORT_CD  = B.VPS_PORT_CD
                                                AND B2.CLPT_IND_SEQ = B.CLPT_IND_SEQ
                                                AND B2.PORT_ACT_CTNT IN ('CHT0001','CHT0002','CHT0003')  -- TWIN_LIFT, DUAL_CYCLE, RESTOW
                                         ) C 
                                         GROUP BY         C.VSL_CD      
			                                            , C.SKD_VOY_NO  
			                                            , C.SKD_DIR_CD  
			                                            , C.VPS_PORT_CD 
			                                            , C.CLPT_IND_SEQ
			                                            , C.SLAN_CD     
			                                            , C.YD_CD      
			                           ) M
                                )   T11
                              , KPI
                        WHERE   1 = 1
                        AND     KPI.SLAN_CD     = T11.SLAN_CD
                        AND     KPI.VPS_PORT_CD = T11.PORT_CD
#if(${rhq_ofc_cd} != '')
                        AND     KPI.RHQ         = @[rhq_ofc_cd]
#end

                        AND     CASE WHEN KPI.PORT_KPI_DIR_CD = 'A' THEN T11.SKD_DIR_CD
                                     ELSE KPI.PORT_KPI_DIR_CD 
                                END                 = T11.SKD_DIR_CD
                        AND     KPI.CLPT_IND_SEQ    = T11.CLPT_IND_SEQ

                        AND     KPI.VSL_CD      = T11.VSL_CD
                        AND     KPI.SKD_VOY_NO  = T11.SKD_VOY_NO
                        AND     KPI.SKD_DIR_CD  = T11.SKD_DIR_CD

                        --::JSK::--GROUP BY GROUPING SETS( (KPI.RHQ, KPI.VPS_PORT_CD, YD_CD, KPI.SLAN_CD, VVD_CD, ACT_DEP_DT, WORK_COMMENCED, WORK_COPLETED), (KPI.RHQ, KPI.VPS_PORT_CD, YD_CD, KPI.SLAN_CD), ())
      GROUP BY GROUPING SETS( (KPI.RHQ, KPI.VPS_PORT_CD, KPI.PORT_KPI_DIR_CD, KPI.CLPT_IND_SEQ, T11.YD_CD, KPI.SLAN_CD, VVD_CD, ACT_DEP_DT, WORK_COMMENCED, WORK_COPLETED), (KPI.RHQ, KPI.VPS_PORT_CD, KPI.PORT_KPI_DIR_CD, KPI.CLPT_IND_SEQ, T11.YD_CD, KPI.SLAN_CD), ())
                        )   T21, 
                        (
                        SELECT    NO
                                , KPI_TGT_YR        , SLAN_CD           , VPS_PORT_CD        , KPI_VER_SEQ
                                , FM_EFF_DT         , TO_EFF_DT         , TTL_CNTR_MV_KNT    , STM_IN_HRS
                                , VSL_ARR_HRS       , ROUND(MVS/GRS_TML_PROD_HRS,1)  AS TML_OP_HRS    
								, VSL_DEP_HRS       , STM_OUT_HRS
                                , PORT_STAY_HRS     , GRS_TML_PROD_HRS  , GRS_CRN_PROD_HRS   , NET_CRN_PROD_HRS
                                , TWN_LFT_HRS       , DUL_CYC_HRS       , RSTWG_HRS          , RHQ
                                , PORT_KPI_DIR_CD   , CLPT_IND_SEQ   
                                , VSL_CD           
                                , SKD_VOY_NO
                                , SKD_DIR_CD
                                , MVS    
                                , YD_CD
                                , COMMENCE                                 

                        FROM      KPI
        , (SELECT LEVEL AS NO FROM DUAL CONNECT BY LEVEL <=2)
		   ORDER BY KPI.RHQ, KPI.VPS_PORT_CD, KPI.PORT_KPI_DIR_CD, KPI.CLPT_IND_SEQ, KPI.SLAN_CD, KPI.YD_CD, KPI.COMMENCE, NO, VSL_CD ,SKD_VOY_NO ,SKD_DIR_CD
                        )   KPI
                WHERE   1 = 1
                AND     KPI.NO               = T21.NO        (+)
                AND     KPI.SLAN_CD          = T21.SLAN_CD      (+)
                AND     KPI.VPS_PORT_CD      = T21.VPS_PORT_CD  (+)
                AND     KPI.PORT_KPI_DIR_CD  = T21.PORT_KPI_DIR_CD  (+)
                AND     KPI.CLPT_IND_SEQ     = T21.CLPT_IND_SEQ     (+)   
                AND     KPI.VSL_CD      	 = T21.VSL_CD(+)  
                AND     KPI.SKD_VOY_NO  	 = T21.SKD_VOY_NO(+)
                AND     KPI.SKD_DIR_CD  	 = T21.SKD_DIR_CD(+) 

        )
WHERE   1=1
#if(${gubun} == 'KPI' || ${gubun} == 'BASE')
AND     NO = 1
#elseif(${gubun} == 'PFMC')
AND     NO = 2
#end
AND     1 = CASE WHEN (NO = 2 AND VVD_CD IS NULL) THEN 0 ELSE 1 END
ORDER BY ROW_SEQ			]]></sql>
			<params>
				<param name="slan_cd" type="12" value=" " out="N"/>
				<param name="port_cd" type="12" value="" out="N"/>
				<param name="kpi_tgt_yr" type="12" value="" out="N"/>
				<param name="kpi_ver_seq" type="12" value="" out="N"/>
				<param name="rhq_ofc_cd" type="12" value="" out="N"/>
				<param name="fr_dt" type="12" value="" out="N"/>
				<param name="to_dt" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
