<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="PerformanceDBDAOSearchFcmMasterTableInquiryRSQL">
			<desc><![CDATA[Fuel Consumption Master Table Inquiry 정보를 조회합니다.

History
2015.01.23 이병훈 [CHM-201430612] Fuel Consumption Master table 개발]]></desc>
			<sql><![CDATA[
/***** ERP & PF_SKD DATA *****/
WITH ERP_DATA AS (
    SELECT
    REV_YEAR
    ,REV_MONTH
    ,REV_VESSEL
    ,REV_VOYNO
    ,REV_DIR
    ,REV_TRADE
    ,REV_LANE
    ,REV_FO_QTY
    ,REV_FO_PRICE
    ,REV_FO_AMNT
    ,REV_DO_QTY
    ,REV_DO_PRICE
    ,REV_DO_AMNT
    ,SKED_START_PORT
    ,SKED_START_ZD
    ,TO_CHAR(SKED_START_ETA, 'yyyy-mm-dd hh24:mi') AS SKED_START_ETA
    ,SKED_END_PORT
    ,SKED_END_ZD
    ,TO_CHAR(SKED_END_ETA, 'yyyy-mm-dd hh24:mi') AS SKED_END_ETA
    ,SKED_VOYAGE
    ,PF_TYPE
    ,(
        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_DISTANCE_NOTURN
             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_DISTANCE_TURN
        END
    ) AS PF_DISTANCE
    ,(
        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL AND PF_SEA_TIME_NOTURN > 0 THEN ROUND((PF_DISTANCE_NOTURN / PF_SEA_TIME_NOTURN), 1)
             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL AND PF_SEA_TIME_TURN > 0 THEN ROUND((PF_DISTANCE_TURN / PF_SEA_TIME_TURN), 1)
        END
    ) AS PF_SPD
    ,(
        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_SEA_TIME_NOTURN
             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_SEA_TIME_TURN
        END
    ) AS PF_SEA_TIME
    ,(
        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_BUFFER_TIME_NOTURN
             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_BUFFER_TIME_TURN
        END
    ) AS PF_BUFFER_TIME
    ,(
        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL AND (PF_SEA_TIME_NOTURN + PF_BUFFER_TIME_NOTURN) > 0
             THEN ROUND((PF_DISTANCE_NOTURN / (PF_SEA_TIME_NOTURN + PF_BUFFER_TIME_NOTURN)), 1)
             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL AND (PF_SEA_TIME_TURN + PF_BUFFER_TIME_TURN) > 0
             THEN ROUND((PF_DISTANCE_TURN / (PF_SEA_TIME_TURN + PF_BUFFER_TIME_TURN)), 1)
        END
    ) AS PF_CSPEED
    ,(
        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_MANU_IN_NOTURN
             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_MANU_IN_TURN
        END
    ) AS PF_MANU_IN
    ,(
        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_MANU_OUT_NOTURN
             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_MANU_OUT_TURN
        END
    ) AS PF_MANU_OUT
    ,(
        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_PORT_TIME_NOTURN
             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_PORT_TIME_TURN
        END
    ) AS PF_PORT_TIME
    ,(
        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_SEA_TIME_NOTURN + PF_BUFFER_TIME_NOTURN + PF_MANU_IN_NOTURN + PF_MANU_OUT_NOTURN + PF_PORT_TIME_NOTURN
             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_SEA_TIME_TURN + PF_BUFFER_TIME_TURN + PF_MANU_IN_TURN + PF_MANU_OUT_TURN + PF_PORT_TIME_TURN
        END
    ) AS PF_TTL_TIME
    ,EEOI_BSA
    ,EEOI_DCAPA
    ,EEOI_OC
    ,EEOI_GUBUN
    FROM (
        SELECT
        T3.REV_YEAR
        ,T3.REV_MONTH
        ,T3.REV_VESSEL
        ,T3.REV_VOYNO
        ,T3.REV_DIR
        ,T3.REV_TRADE
        ,T3.REV_LANE
        ,T3.REV_FO_QTY
        ,T3.REV_FO_PRICE
        ,T3.REV_FO_AMNT
        ,T3.REV_DO_QTY
        ,T3.REV_DO_PRICE
        ,T3.REV_DO_AMNT
        ,T3.SKED_START_PORT
        ,T3.SKED_START_ZD
        ,T3.SKED_START_ETA
        ,T3.SKED_END_PORT
        ,T3.SKED_END_ZD
        ,T3.SKED_END_ETA
        ,T3.SKED_VOYAGE
        ,T3.PF_TYPE
        ,(
            SELECT SUM(LNK_DIST)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ
            -- TTL DISTANCE 는 TO PORT의 이전 PORT 까지만
            AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_NOTURN
        ) AS PF_DISTANCE_NOTURN
        ,(
            SELECT SUM(LNK_DIST)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)
                -- TTL DISTANCE 는 TO PORT의 이전 PORT 까지만
                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_TURN))
        ) AS PF_DISTANCE_TURN
        ,(
            SELECT SUM(TZTM_HRS)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ
            -- TTL SEA TIME 는 TO PORT의 이전 PORT 까지만
            AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_NOTURN
        ) AS PF_SEA_TIME_NOTURN
        ,(
            SELECT SUM(TZTM_HRS)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)
                -- TTL SEA TIME 는 TO PORT의 이전 PORT 까지만
                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_TURN))
        ) AS PF_SEA_TIME_TURN
        ,(
            SELECT SUM(SEA_BUF_HRS)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ
            -- TTL SEA BUFFER TIME 는 TO PORT의 이전 PORT 까지만
            AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_NOTURN
        ) AS PF_BUFFER_TIME_NOTURN
        ,(
            SELECT SUM(SEA_BUF_HRS)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)
                -- TTL SEA BUFFER TIME 는 TO PORT의 이전 PORT 까지만
                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_TURN))
        ) AS PF_BUFFER_TIME_TURN
        ,(
            SELECT SUM(MNVR_IN_HRS)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ
            -- TTL MANEUVERING IN TIME 는 TO PORT의 이전 PORT 까지만
            AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_NOTURN
        ) AS PF_MANU_IN_NOTURN
        ,(
            SELECT SUM(MNVR_IN_HRS)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)
                -- TTL MANEUVERING IN TIME 는 TO PORT의 이전 PORT 까지만
                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_TURN))
        ) AS PF_MANU_IN_TURN
        ,(
            SELECT SUM(MNVR_OUT_HRS)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ
            -- TTL MANEUVERING OUT TIME 는 TO PORT까지
            AND PORT_ROTN_SEQ <= T3.TO_PORT_ROTN_SEQ_NOTURN
        ) AS PF_MANU_OUT_NOTURN
        ,(
            SELECT SUM(MNVR_OUT_HRS)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)
                -- TTL MANEUVERING OUT TIME 는 TO PORT까지
                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ <= T3.TO_PORT_ROTN_SEQ_TURN))
        ) AS PF_MANU_OUT_TURN
        ,(
            SELECT SUM(ACT_WRK_HRS)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ
            -- TTL PORT TIME 는 TO PORT까지
            AND PORT_ROTN_SEQ <= T3.TO_PORT_ROTN_SEQ_NOTURN
        ) AS PF_PORT_TIME_NOTURN
        ,(
            SELECT SUM(ACT_WRK_HRS)
            FROM VSK_PF_SKD_DTL
            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)
            AND PF_SVC_TP_CD = T3.PF_TYPE
            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)
                -- TTL PORT TIME 는 TO PORT까지
                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ <= T3.TO_PORT_ROTN_SEQ_TURN))
        ) AS PF_PORT_TIME_TURN
        ,T3.EEOI_BSA
        ,T3.EEOI_DCAPA
        ,T3.EEOI_OC
        ,T3.EEOI_GUBUN
        ,T3.TO_PORT_ROTN_SEQ_NOTURN
        ,T3.TO_PORT_ROTN_SEQ_TURN
        FROM (
            SELECT
            T2.REV_YEAR
            ,T2.REV_MONTH
            ,T2.REV_VESSEL
            ,T2.REV_VOYNO
            ,T2.REV_DIR
            ,T2.REV_TRADE
            ,T2.REV_LANE
            ,T2.REV_FO_QTY
            ,T2.REV_FO_PRICE
            ,T2.REV_FO_AMNT
            ,T2.REV_DO_QTY
            ,T2.REV_DO_PRICE
            ,T2.REV_DO_AMNT
            ,T2.SKED_START_PORT
            ,T2.SKED_START_ZD
            ,T2.SKED_START_ETA
            ,T2.SKED_END_PORT
            ,T2.SKED_END_ZD
            ,T2.SKED_END_ETA
            ,T2.SKED_VOYAGE
            ,T2.PF_TYPE
            ,FR_PORT_ROTN_SEQ
            ,(
                SELECT MIN(PORT_ROTN_SEQ)
                FROM VSK_PF_SKD_DTL
                WHERE VSL_SLAN_CD = SUBSTR(T2.REV_LANE, 1, 3)
                AND PF_SVC_TP_CD = T2.PF_TYPE
                AND PORT_CD = T2.SKED_END_PORT
                AND PORT_ROTN_SEQ > T2.FR_PORT_ROTN_SEQ
            ) AS TO_PORT_ROTN_SEQ_NOTURN
            ,(
                SELECT MIN(PORT_ROTN_SEQ)
                FROM VSK_PF_SKD_DTL
                WHERE VSL_SLAN_CD = SUBSTR(T2.REV_LANE, 1, 3)
                AND PF_SVC_TP_CD = T2.PF_TYPE
                AND PORT_CD = T2.SKED_END_PORT
                AND PORT_ROTN_SEQ >= 1
            ) AS TO_PORT_ROTN_SEQ_TURN
            ,(
                SELECT MAX(PORT_ROTN_SEQ)
                FROM VSK_PF_SKD_DTL
                WHERE VSL_SLAN_CD = SUBSTR(T2.REV_LANE, 1, 3)
                AND PF_SVC_TP_CD = T2.PF_TYPE
            ) AS MAX_PORT_ROTN_SEQ
            ,T2.EEOI_BSA
            ,T2.EEOI_DCAPA
            ,T2.EEOI_OC
            ,(
                CASE
                    WHEN T2.EEOI_DCAPA >= 13000 THEN '13,000 TEU 이상'
                    WHEN T2.EEOI_DCAPA >= 10000 AND T2.EEOI_DCAPA < 13000 THEN '10,000 ~ 12,999 TEU'
                    WHEN T2.EEOI_DCAPA >= 9000 AND T2.EEOI_DCAPA < 10000 THEN '9,000 ~ 9,999 TEU'
                    WHEN T2.EEOI_DCAPA >= 8000 AND T2.EEOI_DCAPA < 9000 THEN '8,000 ~ 8,999 TEU'
                    WHEN T2.EEOI_DCAPA >= 7000 AND T2.EEOI_DCAPA < 8000 THEN '7,000 ~ 7,999 TEU'
                    WHEN T2.EEOI_DCAPA >= 6000 AND T2.EEOI_DCAPA < 7000 THEN '6,000 ~ 6,999 TEU'
                    WHEN T2.EEOI_DCAPA >= 5000 AND T2.EEOI_DCAPA < 6000 THEN '5,000 ~ 5,999 TEU'
                    WHEN T2.EEOI_DCAPA >= 4000 AND T2.EEOI_DCAPA < 5000 THEN '4,000 ~ 4,999 TEU'
                    WHEN T2.EEOI_DCAPA >= 3000 AND T2.EEOI_DCAPA < 4000  THEN '3,000 ~ 3,999 TEU'
                    WHEN T2.EEOI_DCAPA >= 2000 AND T2.EEOI_DCAPA < 3000  THEN '2,000 ~ 2,999 TEU'
                    WHEN T2.EEOI_DCAPA >= 1000 AND T2.EEOI_DCAPA < 2000  THEN '1,000 ~ 1,999 TEU'
                    WHEN T2.EEOI_DCAPA < 1000  THEN '1,000 TEU 이하'
                END
            ) AS EEOI_GUBUN
            FROM (
                SELECT
                T1.REV_YEAR
                ,T1.REV_MONTH
                ,T1.REV_VESSEL
                ,T1.REV_VOYNO
                ,T1.REV_DIR
                ,T1.REV_TRADE
                ,T1.REV_LANE
                ,T1.REV_FO_QTY
                ,T1.REV_FO_PRICE
                ,T1.REV_FO_AMNT
                ,T1.REV_DO_QTY
                ,T1.REV_DO_PRICE
                ,T1.REV_DO_AMNT
                ,T1.SKED_START_PORT
                ,T1.SKED_START_ZD
                ,T1.SKED_START_ETA
                ,T1.SKED_END_PORT
                ,T1.SKED_END_ZD
                ,T1.SKED_END_ETA
                ,(T1.SKED_END_ETA-T1.SKED_START_ETA) * 24 - (T1.SKED_START_ZD-T1.SKED_END_ZD) AS SKED_VOYAGE
                ,T1.PF_TYPE
                ,(
                    SELECT PORT_ROTN_SEQ
                    FROM VSK_PF_SKD_DTL
                    WHERE VSL_SLAN_CD = SUBSTR(T1.REV_LANE, 1, 3)
                    AND PF_SVC_TP_CD = T1.PF_TYPE
                    AND PORT_CD = T1.SKED_START_PORT
                    AND SKD_DIR_CD = SUBSTR(T1.REV_DIR, 1, 1)
                    AND CLPT_SEQ = 1
                ) AS FR_PORT_ROTN_SEQ
                ,(
                    SELECT BSA_CAPA
                    FROM BSA_VVD_MST
                    WHERE TRD_CD = T1.REV_TRADE
                    AND RLANE_CD = T1.REV_LANE
                    AND VSL_CD = T1.REV_VESSEL
                    AND SKD_VOY_NO = T1.REV_VOYNO
                    AND SKD_DIR_CD = SUBSTR(T1.REV_DIR, 1, 1)
                ) AS EEOI_BSA
                ,(
                    SELECT CNTR_DZN_CAPA
                    FROM MDM_VSL_CNTR
                    WHERE VSL_CD = T1.REV_VESSEL
                ) AS EEOI_DCAPA
                ,(
                    SELECT DECODE(VSL_OWN_IND_CD, 'C', 'CHR', 'O', 'OWN')
                    FROM MDM_VSL_CNTR
                    WHERE VSL_CD = T1.REV_VESSEL
                ) AS EEOI_OC
                FROM (
                    SELECT
                    SUBSTR(REV_YRMON, 1, 4) AS REV_YEAR
                    ,SUBSTR(REV_YRMON, 5, 2) AS REV_MONTH
                    ,SUBSTR(REV_VVD_CD, 1, 4) AS REV_VESSEL
                    ,SUBSTR(REV_VVD_CD, 5, 4) AS REV_VOYNO
                    ,SUBSTR(REV_VVD_CD, 9, 2) AS REV_DIR
                    ,SUBSTR(RLANE_CD, 4, 2) || 'S' AS REV_TRADE
                    ,RLANE_CD AS REV_LANE
                    ,ISS_FOIL_WGT AS REV_FO_QTY
                    ,ISS_FOIL_UT_PRC AS REV_FO_PRICE
                    ,ISS_FOIL_AMT AS REV_FO_AMNT
                    ,ISS_DOIL_WGT AS REV_DO_QTY
                    ,ISS_DOIL_UT_PRC AS REV_DO_PRICE
                    ,ISS_DOIL_AMT AS REV_DO_AMNT
                    ,ST_PORT_CD AS SKED_START_PORT
                    ,(SELECT GMT_HRS/60 FROM MDM_LOCATION WHERE LOC_CD=ST_PORT_CD) AS SKED_START_ZD
                    ,ST_PORT_ETA_DT AS SKED_START_ETA
                    ,END_PORT_CD AS SKED_END_PORT
                    ,(SELECT GMT_HRS/60 FROM MDM_LOCATION WHERE LOC_CD=END_PORT_CD) AS SKED_END_ZD
                    ,END_PORT_ETA_DT AS SKED_END_ETA
                    ,(
                        SELECT PF_SKD_TP_CD 
                        FROM VSK_VSL_SKD
                        WHERE VSL_CD = SUBSTR(REV_VVD_CD, 1, 4) 
                        AND SKD_VOY_NO = SUBSTR(REV_VVD_CD, 5, 4) 
                        AND SKD_DIR_CD = SUBSTR(REV_VVD_CD, 9, 1)
                    ) PF_TYPE
                    FROM FCM_MON_INVT_TJ_SMRY
                    WHERE REV_YRMON BETWEEN @[fm_yrmon] AND @[to_yrmon]
                    #if (${vsl_slan_cd} != '') 
                    AND SUBSTR(RLANE_CD, 1, 3) = @[vsl_slan_cd]
                    #end
                    #if (${vsl_cd} != '') 
                    AND SUBSTR(REV_VVD_CD, 1, 4) = @[vsl_cd]
                    #end
                ) T1
            ) T2
        ) T3
    )
)

/***** VSK Joined DEP_RPT DATA *****/
,DEP_RPT_TMP AS (
    SELECT
    VSK.VSL_CD
    ,VSK.SKD_VOY_NO
    ,VSK.SKD_DIR_CD
    ,RPT.NVGT_ML_DIST
    ,RPT.ENG_ML_DIST
    ,RPT.MNVR_IN_ML_DIST
    ,RPT.MNVR_OUT_ML_DIST
    ,(
        CASE WHEN TO_NUMBER(NVL(RPT.AVG_SPD, '0')) > 0 THEN ROUND(RPT.NVGT_ML_DIST / RPT.AVG_SPD, 1)
        ELSE 0
        END
    ) AS SAIL_TIME
    ,(
        NVL(PORT_MN_FOIL_CSM_QTY, 0)
        + NVL(PORT_GNR_FOIL_CSM_QTY, 0)
        + NVL(PORT_BLR_FOIL_CSM_QTY, 0)
        + NVL(PORT_MN_LOW_SULP_FOIL_CSM_QTY, 0)
        + NVL(PORT_GNR_LOW_SULP_FOIL_CSM_QTY, 0)
        + NVL(PORT_BLR_LOW_SULP_FOIL_CSM_QTY, 0)
    ) AS PORT_FO
    ,(
        NVL(PORT_MN_DOIL_CSM_QTY, 0)
        + NVL(PORT_GNR_DOIL_CSM_QTY, 0)
        + NVL(PORT_BLR_DOIL_CSM_QTY, 0)
        + NVL(PORT_MN_LOW_SULP_DOIL_CSM_QTY , 0)
        + NVL(PORT_GNR_LOW_SULP_DOIL_CSM_QTY, 0)
        + NVL(PORT_BLR_LOW_SULP_DOIL_CSM_QTY, 0)
    ) AS PORT_DO
    FROM (
        SELECT
        VSL_CD
        ,SKD_VOY_NO
        ,SKD_DIR_CD
        ,DEP_PORT_CD
        ,RANK() OVER (PARTITION BY VSL_CD, SKD_VOY_NO, SKD_DIR_CD, DEP_PORT_CD ORDER BY CLPT_IND_SEQ) AS CLPT_IND_SEQ
        ,NXT_PORT_CD
        ,NVGT_ML_DIST
        ,ENG_ML_DIST
        ,MNVR_IN_ML_DIST
        ,MNVR_OUT_ML_DIST
        ,AVG_SPD
        ,PORT_MN_FOIL_CSM_QTY
        ,PORT_GNR_FOIL_CSM_QTY
        ,PORT_BLR_FOIL_CSM_QTY
        ,PORT_MN_LOW_SULP_FOIL_CSM_QTY
        ,PORT_GNR_LOW_SULP_FOIL_CSM_QTY
        ,PORT_BLR_LOW_SULP_FOIL_CSM_QTY
        ,PORT_MN_DOIL_CSM_QTY
        ,PORT_GNR_DOIL_CSM_QTY
        ,PORT_BLR_DOIL_CSM_QTY
        ,PORT_MN_LOW_SULP_DOIL_CSM_QTY
        ,PORT_GNR_LOW_SULP_DOIL_CSM_QTY
        ,PORT_BLR_LOW_SULP_DOIL_CSM_QTY
        FROM FCM_DEP_RPT
		#if (${vsl_cd} != '') 
		WHERE VSL_CD = @[vsl_cd]
		#end
    ) RPT
    ,(
        SELECT
        VSL_CD
        ,SKD_VOY_NO
        ,SKD_DIR_CD
        ,VPS_PORT_CD
        ,CLPT_IND_SEQ
        ,LEAD(VSL_CD)         OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_VSL_CD
        ,LEAD(SKD_VOY_NO)     OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_SKD_VOY_NO
        ,LEAD(SKD_DIR_CD)  	  OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_SKD_DIR_CD
        ,LEAD(VPS_PORT_CD)    OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_PORT_CD
        ,LEAD(CLPT_IND_SEQ)   OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_CLPT_IND_SEQ
        ,LEAD(VPS_PORT_CD, 2) OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_NXT_PORT_CD
        FROM VSK_VSL_PORT_SKD T1, MDM_VSL_SVC_LANE_DIR T2
        WHERE T1.SLAN_CD = T2.VSL_SLAN_CD
        AND T1.SKD_DIR_CD = T2.VSL_SLAN_DIR_CD
        AND T1.TURN_PORT_IND_CD NOT IN ('D', 'V', 'F')
		#if (${vsl_slan_cd} != '') 
		AND SLAN_CD = @[vsl_slan_cd]
		#end
		#if (${vsl_cd} != '') 
		AND T1.VSL_CD = @[vsl_cd]
		#end
    ) VSK
    WHERE RPT.VSL_CD = VSK.NXT_VSL_CD
    AND RPT.SKD_VOY_NO = VSK.NXT_SKD_VOY_NO
    AND RPT.SKD_DIR_CD= VSK.NXT_SKD_DIR_CD
    AND RPT.DEP_PORT_CD = VSK.NXT_PORT_CD
    AND RPT.CLPT_IND_SEQ = VSK.NXT_CLPT_IND_SEQ
    AND RPT.NXT_PORT_CD = VSK.NXT_NXT_PORT_CD
)

/***** 여기서부터 본 쿼리 *****/
SELECT
    REV_YEAR
    ,REV_MONTH
    ,REV_VESSEL
    ,REV_VOYNO
    ,REV_DIR
    ,REV_TRADE
    ,REV_LANE
    ,REV_FO_QTY
    ,REV_FO_PRICE
    ,REV_FO_AMNT
    ,REV_DO_QTY
    ,REV_DO_PRICE
    ,REV_DO_AMNT
    ,SKED_START_PORT
    ,SKED_START_ZD
    ,SKED_START_ETA
    ,SKED_END_PORT
    ,SKED_END_ZD
    ,SKED_END_ETA
    ,SKED_VOYAGE
    ,PF_TYPE
    ,PF_DISTANCE
    ,PF_SPD
    ,PF_SEA_TIME
    ,PF_BUFFER_TIME
    ,PF_CSPEED
    ,PF_MANU_IN
    ,PF_MANU_OUT
    ,PF_PORT_TIME
    ,PF_TTL_TIME
    ,ROUND(REV_FO_QTY + REV_DO_QTY) AS CON_FO_DO
    ,ROUND((REV_FO_QTY + REV_DO_QTY) - (TOTAL_PORT_FO + TOTAL_PORT_DO)) AS CON_SEA
    ,(TOTAL_PORT_FO + TOTAL_PORT_DO) AS CON_PORT
    ,TOTAL_OBS_MILE
    ,TOTAL_MILES_ENG
    ,TOTAL_MILES_IN
    ,TOTAL_MILES_OUT
    ,(TOTAL_OBS_MILE + TOTAL_MILES_IN + TOTAL_MILES_OUT) AS TOTAL_MILES
    ,TOTAL_SAIL_TIME
    ,TOTAL_PORT_FO
    ,TOTAL_PORT_DO
    ,(
        CASE WHEN TOTAL_SAIL_TIME > 0 THEN ROUND(TOTAL_OBS_MILE / TOTAL_SAIL_TIME, 1)
        END
    ) AS TOTAL_AVER_SPD
    ,EEOI_BSA
    ,EEOI_DCAPA
    ,EEOI_OC
    ,EEOI_GUBUN
    ,(
        CASE WHEN (EEOI_DCAPA*TOTAL_OBS_MILE) > 0 THEN ROUND((REV_FO_QTY+REV_DO_QTY) * 1000000 / (EEOI_DCAPA*TOTAL_OBS_MILE), 1)
        END
    ) AS EEOI_CAL_BSA
    ,(
        CASE WHEN (EEOI_BSA*TOTAL_OBS_MILE) > 0 THEN ROUND((REV_FO_QTY+REV_DO_QTY) * 1000000 / (EEOI_BSA*TOTAL_OBS_MILE), 1)
        END
    ) AS EEOI_CAL_DCAPA
FROM (
    SELECT
        T1.REV_YEAR
        ,T1.REV_MONTH
        ,T1.REV_VESSEL
        ,T1.REV_VOYNO
        ,T1.REV_DIR
        ,T1.REV_TRADE
        ,T1.REV_LANE
        ,T1.REV_FO_QTY
        ,T1.REV_FO_PRICE
        ,T1.REV_FO_AMNT
        ,T1.REV_DO_QTY
        ,T1.REV_DO_PRICE
        ,T1.REV_DO_AMNT
        ,T1.SKED_START_PORT
        ,T1.SKED_START_ZD
        ,T1.SKED_START_ETA
        ,T1.SKED_END_PORT
        ,T1.SKED_END_ZD
        ,T1.SKED_END_ETA
        ,T1.SKED_VOYAGE
        ,T1.PF_TYPE
        ,T1.PF_DISTANCE
        ,T1.PF_SPD
        ,T1.PF_SEA_TIME
        ,T1.PF_BUFFER_TIME
        ,T1.PF_CSPEED
        ,T1.PF_MANU_IN
        ,T1.PF_MANU_OUT
        ,T1.PF_PORT_TIME
        ,T1.PF_TTL_TIME
        ,SUM(T2.NVGT_ML_DIST) AS TOTAL_OBS_MILE
        ,SUM(T2.ENG_ML_DIST) AS TOTAL_MILES_ENG
        ,SUM(T2.MNVR_IN_ML_DIST) AS TOTAL_MILES_IN
        ,SUM(T2.MNVR_OUT_ML_DIST) AS TOTAL_MILES_OUT
        ,SUM(T2.SAIL_TIME) AS TOTAL_SAIL_TIME
        ,SUM(T2.PORT_FO) AS TOTAL_PORT_FO
        ,SUM(T2.PORT_DO) AS TOTAL_PORT_DO
        ,T1.EEOI_BSA
        ,T1.EEOI_DCAPA
        ,T1.EEOI_OC
        ,T1.EEOI_GUBUN
    FROM ERP_DATA T1, DEP_RPT_TMP T2
    WHERE T1.REV_VESSEL = T2.VSL_CD(+)
    AND T1.REV_VOYNO = T2.SKD_VOY_NO(+)
    AND SUBSTR(T1.REV_DIR, 1, 1) = T2.SKD_DIR_CD(+)
    GROUP BY T1.REV_YEAR
        ,T1.REV_MONTH
        ,T1.REV_VESSEL
        ,T1.REV_VOYNO
        ,T1.REV_DIR
        ,T1.REV_TRADE
        ,T1.REV_LANE
        ,T1.REV_FO_QTY
        ,T1.REV_FO_PRICE
        ,T1.REV_FO_AMNT
        ,T1.REV_DO_QTY
        ,T1.REV_DO_PRICE
        ,T1.REV_DO_AMNT
        ,T1.SKED_START_PORT
        ,T1.SKED_START_ZD
        ,T1.SKED_START_ETA
        ,T1.SKED_END_PORT
        ,T1.SKED_END_ZD
        ,T1.SKED_END_ETA
        ,T1.SKED_VOYAGE
        ,T1.PF_TYPE
        ,T1.PF_DISTANCE
        ,T1.PF_SPD
        ,T1.PF_SEA_TIME
        ,T1.PF_BUFFER_TIME
        ,T1.PF_CSPEED
        ,T1.PF_MANU_IN
        ,T1.PF_MANU_OUT
        ,T1.PF_PORT_TIME
        ,T1.PF_TTL_TIME
        ,T1.EEOI_BSA
        ,T1.EEOI_DCAPA
        ,T1.EEOI_OC
        ,T1.EEOI_GUBUN
)
ORDER BY REV_YEAR, REV_MONTH, REV_VESSEL, REV_VOYNO, SKED_START_ETA			]]></sql>
			<params>
				<param name="fm_yrmon" type="12" value="" out="N"/>
				<param name="to_yrmon" type="12" value="" out="N"/>
				<param name="vsl_slan_cd" type="12" value="" out="N"/>
				<param name="vsl_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
