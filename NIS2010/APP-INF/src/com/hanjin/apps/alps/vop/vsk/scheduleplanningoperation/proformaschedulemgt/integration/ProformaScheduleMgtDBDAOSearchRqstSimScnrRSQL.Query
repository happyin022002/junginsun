<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ProformaScheduleMgtDBDAOSearchRqstSimScnrRSQL">
			<desc><![CDATA[searchRqstSimScnr]]></desc>
			<sql><![CDATA[
SELECT ROW_NUMBER() OVER ( ORDER BY PORT_ROTN_SEQ ASC) AS ROW_SEQ ,
  	T.VSL_SLAN_CD ,
	T.PF_SVC_TP_CD ,
	T.PORT_CD ,
	T.SKD_DIR_CD ,
    (SELECT
        CASE WHEN DIR1 IS NULL AND DIR2 IS NULL THEN
            'W|E|N|S'
        WHEN DIR1 IS NULL OR DIR2 IS NULL THEN
            NVL(DIR1, '') || NVL(DIR2, '')
        ELSE
            DIR1 || '|' || DIR2
        END AS MDM_SKD_DIR_CD
    FROM (
        SELECT MAX(DIR1) DIR1, MAX(DIR2) DIR2
        FROM (
            SELECT
                DECODE(VSL_SLAN_DIR_SEQ, 1, VSL_SLAN_DIR_CD) AS DIR1,  
                DECODE(VSL_SLAN_DIR_SEQ, 2, VSL_SLAN_DIR_CD) AS DIR2
            FROM (
                SELECT VSL_SLAN_DIR_CD, ROW_NUMBER() OVER(PARTITION BY VSL_SLAN_CD ORDER BY VSL_SLAN_DIR_SEQ) VSL_SLAN_DIR_SEQ
                FROM MDM_VSL_SVC_LANE_DIR T1, VSK_SIM_INFO T2
                WHERE 1=1
                AND T1.VSL_SLAN_CD=T2.SLAN_CD
                AND T1.DELT_FLG='N'
                AND	T2.SIM_DT			= @[sim_dt]
                AND	T2.SIM_NO			= TRIM(TO_CHAR(TO_NUMBER(@[sim_no]), '000'))				      	
            )
        )
    )) AS MDM_SKD_DIR_CD,
	T.CLPT_SEQ ,
	T.PORT_ROTN_SEQ ,
	T.YD_CD ,
	T.CALL_YD_IND_SEQ ,
	T.TURN_PORT_FLG ,
	T.TURN_PORT_IND_CD ,
	T.ETB_DY_CD ,
	NVL(T.ETB_DY_NO,0) AS ETB_DY_NO,
	T.ETB_TM_HRMNT ,
	T.ETD_DY_CD ,
	NVL(T.ETD_DY_NO,0) AS ETD_DY_NO ,
	T.ETD_TM_HRMNT ,
	NVL(T.LNK_DIST,0) AS LNK_DIST ,
	NVL(T.LNK_SPD,0) AS LNK_SPD ,
	NVL(T.TZTM_HRS,0) AS TZTM_HRS ,
	NVL(T.SEA_BUF_HRS,0) AS SEA_BUF_HRS ,
	NVL(T.SEA_BUF_SPD,0) AS SEA_BUF_SPD ,
	NVL(T.MNVR_IN_HRS,0) AS MNVR_IN_HRS ,
	NVL(T.MNVR_OUT_HRS,0) AS MNVR_OUT_HRS ,
	NVL(T.IB_IPCGO_QTY,0) AS IB_IPCGO_QTY ,
	NVL(T.IB_OCN_CGO_QTY,0) AS IB_OCN_CGO_QTY ,
	NVL(T.OB_IPCGO_QTY,0) AS OB_IPCGO_QTY ,
	NVL(T.OB_OCN_CGO_QTY,0) AS OB_OCN_CGO_QTY ,
	NVL(T.TML_PROD_QTY,0) AS TML_PROD_QTY ,
	NVL(T.CRN_KNT,0) AS CRN_KNT,
	NVL(T.ACT_WRK_HRS,0) AS ACT_WRK_HRS ,
	NVL(T.PORT_BUF_HRS,0) AS PORT_BUF_HRS ,
  	T.ZD ,
  	T.SLAN_STND_FLG ,
  	T.SVC_DUR_DYS ,
  	T.AVG_SPD 	AS STND_SVC_SPD ,
  	T.BRTH_ITVAL_DYS ,
  	T.MML_USD_FLG ,
  	T.SIM_DT ,
  	T.SIM_NO ,
--	'4000' AS N1ST_VSL_CLSS_CD ,
--	'1'	AS N1ST_VSL_CLSS_KNT , 
  	T.N1ST_VSL_CLSS_CD ,
  	T.N1ST_VSL_CLSS_KNT ,
  	T.N2ND_VSL_CLSS_CD ,
  	T.N2ND_VSL_CLSS_KNT ,
  	T.N3RD_VSL_CLSS_CD ,
  	T.N3RD_VSL_CLSS_KNT ,
  	T.CLPT_KNT ,
  	T.TTL_DIST ,
  	T.MAX_SPD ,
  	T.AVG_SPD ,
  	T.DELT_FLG ,
  	T.PF_SKD_RMK ,
  	T.MAX_SPD	AS TOT_MAX_SPD ,
  	T.AVG_SPD AS TOT_AVG_SPD ,
  	ROUND(T.AVG_SEA_BUF_SPD, 1) AS SEA_BUF_SPD ,
  	DECODE(T.BOT_TOT_BUF_RAT,0,0,ROUND((DECODE(T.SUM_SEA_BUFF_HRS, NULL, 0, T.SUM_SEA_BUFF_HRS) +DECODE(T.SUM_PORT_BUF_HRS, NULL, 0, T.SUM_PORT_BUF_HRS))/ T.BOT_TOT_BUF_RAT, 1)) AS TOT_BUF_RAT ,
  	DECODE(T.BOT_SEA_BUF_RAT,0,0,ROUND(DECODE(T.SUM_SEA_BUFF_HRS, NULL, 0, T.SUM_SEA_BUFF_HRS)/T.BOT_SEA_BUF_RAT, 1)) AS SEA_BUF_RAT ,
  	DECODE(T.BOT_PORT_BUF_RAT,0,0,ROUND(DECODE(T.SUM_PORT_BUF_HRS, NULL, 0, T.SUM_PORT_BUF_HRS)/T.BOT_PORT_BUF_RAT, 1)) AS PORT_BUF_RAT ,
	'11' AS PF_SPD_RAT ,
	'22' AS BUF_SPD_RAT ,
	'33' AS MIN_MAX_SPD ,
--  	ROUND(DECODE(T.AVG_SPD, NULL, 0, T.AVG_SPD) / DECODE(T.MIN_MAX_SPD, NULL, 1, 0, 1, MIN_MAX_SPD)*100, 1) AS PF_SPD_RAT ,
--  	DECODE(T.BOT_BUF_SPD_RAT,0,0,ROUND(DECODE(T.SUM_LNK_DIST, NULL, 1, 0, 1, SUM_LNK_DIST)/T.BOT_BUF_SPD_RAT )/DECODE(T.MIN_MAX_SPD, NULL, 1, 0, 1, MIN_MAX_SPD)*100, 1) AS BUF_SPD_RAT ,
--  	MIN_MAX_SPD ,
  	T.CHECK_WK_TM ,
  	CRANE_WK_TM
FROM(
		SELECT SLAN_CD				AS VSL_SLAN_CD
	      , '' 						AS PF_SVC_TP_CD
	      , SUBSTR(T2.TML_CD, 1, 5) AS PORT_CD
	      , T2.SKD_DIR_CD
	      , T2.VSL_DBL_CALL_SEQ		AS CLPT_SEQ
	      , T2.PORT_SEQ				AS PORT_ROTN_SEQ
	      , SUBSTR(T2.TML_CD, 6, 7)	AS YD_CD
	      , ROW_NUMBER() OVER (PARTITION BY T2.TML_CD ORDER BY T2.PORT_SEQ) AS CALL_YD_IND_SEQ
	      , T2.TURN_PORT_FLG						      
	      ,	CASE	WHEN T2.PORT_SEQ		= 1 			THEN 'N'
	      			WHEN T2.PORT_SEQ 		= T4.TTL_CNT	THEN 'F'
	      			WHEN T2.TURN_PORT_FLG	= 'Y'			THEN 'Y'
	      			WHEN T2.TURN_PORT_FLG	= 'N'			THEN 'N'
	      	END AS TURN_PORT_IND_CD	      
	      , T2.ETB_DY_CD
	      , T2.ETB_DY_NO
	      , T2.ETB_TM_HRMNT
	      , T2.ETD_DY_CD
	      , T2.ETD_DY_NO
	      , T2.ETD_TM_HRMNT
	      , T2.LNK_DIST
	      , T2.LNK_SPD
	      , T2.TZTM_HRS
	      , T2.SEA_BUF_HRS
	      , T2.SEA_BUF_SPD
	      , T2.MNVR_IN_HRS
	      , T2.MNVR_OUT_HRS
	      , T2.IB_IPCGO_QTY
	      , T2.IB_OCN_CGO_QTY
	      , T2.OB_IPCGO_QTY
	      , T2.OB_OCN_CGO_QTY
	      , T2.TML_PROD_QTY
	      , T2.CRN_KNT
	      , T2.ACT_WRK_HRS
	      , T2.PORT_BUF_HRS
	      , (
	        SELECT GMT_HRS / 60
	        FROM MDM_LOCATION
	        WHERE LOC_CD = SUBSTR(T2.TML_CD, 1, 5) ) AS ZD
	      , 'N'					AS SLAN_STND_FLG
	      , T1.SVC_DUR_DYS		AS SVC_DUR_DYS
	      , DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.LNK_SPD )) OVER (), 0, 0,
	      		SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.LNK_SPD )) OVER ()  / (TTL_CNT - 1 )
	      	)						AS STND_SVC_SPD
	      , BRTH_ITVAL_DYS			AS BRTH_ITVAL_DYS
	      , 'N'						AS MML_USD_FLG
	      , T1.SIM_DT				AS SIM_DT
	      , T1.SIM_NO				AS SIM_NO
	      , T2.N1ST_VSL_CLSS_CD		AS N1ST_VSL_CLSS_CD
	      , T2.N1ST_VSL_CLSS_KNT	AS N1ST_VSL_CLSS_KNT
	      , T2.N2ND_VSL_CLSS_CD		AS N2ND_VSL_CLSS_CD
	      , T2.N2ND_VSL_CLSS_KNT	AS N2ND_VSL_CLSS_KNT
	      , T2.N3RD_VSL_CLSS_CD		AS N3RD_VSL_CLSS_CD
	      , T2.N3RD_VSL_CLSS_KNT	AS N3RD_VSL_CLSS_KNT
	      ,	DECODE(TTL_CNT, 0, 0, TTL_CNT - 1)								AS CLPT_KNT		/* 마지막 PORT를 제외한 CALLING PORT 수		*/
	      ,	SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.LNK_DIST)) OVER () AS TTL_DIST	/* 마지막 ROW에 DISTANCE 제외한 총 거리 	*/
	      ,	MAX ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.LNK_SPD )) OVER () AS MAX_SPD		/* 마지막 ROW에 DISTANCE 제외한 최대 속도	*/
	      , DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.LNK_SPD )) OVER (), 0, 0,
	      		SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.LNK_SPD )) OVER ()  / (TTL_CNT - 1 )
	      	)				AS AVG_SPD		/* 마지막 ROW에 DISTANCE 제외한 평균 속도	*/
	      , 'N'				AS DELT_FLG
	      , T1.SIM_RMK		AS PF_SKD_RMK
	      , DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.SEA_BUF_SPD)) OVER (), 0, 0,
	      		 SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.SEA_BUF_SPD)) OVER () / (TTL_CNT - 1 ) 
	      	) 					AS AVG_SEA_BUF_SPD
	      , (DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.TZTM_HRS		)) OVER (), 0, 0, T2.TZTM_HRS)
	       +DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.SEA_BUF_HRS	)) OVER (), 0, 0, T2.SEA_BUF_HRS)
	       +DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.MNVR_IN_HRS	)) OVER (), 0, 0, T2.MNVR_IN_HRS)
	       +DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.MNVR_OUT_HRS	)) OVER (), 0, 0, T2.MNVR_OUT_HRS)
	       +DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.ACT_WRK_HRS	)) OVER (), 0, 0, T2.ACT_WRK_HRS)
	       +DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.PORT_BUF_HRS	)) OVER (), 0, 0, T2.PORT_BUF_HRS))*100 AS BOT_TOT_BUF_RAT
	      ,(DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.TZTM_HRS		)) OVER (), 0, 0, T2.TZTM_HRS)
	       +DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.SEA_BUF_HRS	)) OVER (), 0, 0, T2.SEA_BUF_HRS)
	       +DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.MNVR_IN_HRS	)) OVER (), 0, 0, T2.MNVR_IN_HRS)
	       +DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.MNVR_OUT_HRS	)) OVER (), 0, 0, T2.MNVR_OUT_HRS))*100 AS BOT_SEA_BUF_RAT
	      ,(DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.ACT_WRK_HRS	)) OVER (), 0, 0, T2.ACT_WRK_HRS)
	       +DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.PORT_BUF_HRS	)) OVER (), 0, 0, T2.PORT_BUF_HRS))*100 AS BOT_PORT_BUF_RAT
	      ,(DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.TZTM_HRS		)) OVER (), 0, 0, T2.TZTM_HRS)
	       +DECODE(SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.SEA_BUF_HRS	)) OVER (), 0, 0, T2.SEA_BUF_HRS)) AS BOT_BUF_SPD_RAT
	      , SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.SEA_BUF_SPD	)) OVER () AS SUM_SEA_BUF_SPD	
	      , SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.ACT_WRK_HRS	)) OVER () AS SUM_ACT_WRK_HRS	
		  , SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.MNVR_IN_HRS	)) OVER () AS SUM_MNVR_IN_HRS
		  , SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.MNVR_OUT_HRS	)) OVER () AS SUM_MNVR_OUT_HRS
		  , SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.PORT_BUF_HRS	)) OVER () AS SUM_PORT_BUF_HRS							  
	      , SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.TZTM_HRS		)) OVER () AS SUM_TZTH_HRS
	      , SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.SEA_BUF_HRS	)) OVER () AS SUM_SEA_BUFF_HRS
	      , SUM ( DECODE( T2.PORT_SEQ, T4.TTL_CNT, 0,  T2.LNK_DIST		)) OVER () AS SUM_LNK_DIST
--	      , (
--	        SELECT NVL(MIN(MAX_SPD), 1)
--	        FROM MDM_VSL_CNTR
--	        WHERE (CNTR_VSL_CLSS_CAPA	= T5.N1ST_VSL_CLSS_CD
--	              OR CNTR_VSL_CLSS_CAPA = T5.N2ND_VSL_CLSS_CD
--	              OR CNTR_VSL_CLSS_CAPA = T5.N3RD_VSL_CLSS_CD)
--	          AND NVL(MAX_SPD, 0) > 0 )      AS MIN_MAX_SPD		/* 입력된 CLASS 중에 가장 작은 MAX SPEED	*/
	      , NVL((
	            SELECT 'N' /* 입력 받은 PORT, GANG WORK START TIME이 일치 : 'N', 불일치 : 'Y' 표시. */
	            FROM DUAL /* P/F SKD 작성시 'N'일 경우를 정상 작업 가능 시간으로 판단한다. */
	            WHERE 1 = 1
	              AND EXISTS (
	                SELECT 'X'
	                FROM VSK_PORT_GNG_STRC S
	                WHERE S.LOC_CD = SUBSTR(T2.TML_CD, 1, 5)
	                  AND S.GNG_WRK_ST_HRMNT = T2.ETB_TM_HRMNT )), 'Y') AS CHECK_WK_TM ,
	      T3.CRANE_WK_TM
	    FROM VSK_SIM_INFO T1,
	      VSK_SIM_TML_INFO T2 ,
	      (
	        SELECT LOC_CD,
	          MAX( DECODE(SEQ, 01, TM)) || DECODE(SIGN(CNT + 1 - 02), 1, CHR(10)|| MAX( DECODE(SEQ, 02, TM))) || DECODE(SIGN(CNT + 1 - 03), 1, CHR(10)|| MAX( DECODE(SEQ, 03, TM))) || DECODE(SIGN(CNT + 1 - 04), 1, CHR(10)|| MAX( DECODE(SEQ, 04, TM))) || DECODE(SIGN(CNT + 1 - 05), 1, CHR(10)|| MAX( DECODE(SEQ, 05, TM))) || DECODE(SIGN(CNT + 1 - 06), 1, CHR(10)|| MAX( DECODE(SEQ, 06, TM))) || DECODE(SIGN(CNT + 1 - 07), 1, CHR(10)|| MAX( DECODE(SEQ, 07, TM))) || DECODE(SIGN(CNT + 1 - 08), 1, CHR(10)|| MAX( DECODE(SEQ, 08, TM))) || DECODE(SIGN(CNT + 1 - 09), 1, CHR(10)|| MAX( DECODE(SEQ, 09, TM))) || DECODE(SIGN(CNT + 1 - 10), 1, CHR(10)|| MAX( DECODE(SEQ, 10, TM))) || DECODE(SIGN(CNT + 1 - 11), 1, CHR(10)|| MAX( DECODE(SEQ, 11, TM))) || DECODE(SIGN(CNT + 1 - 12), 1, CHR(10)|| MAX( DECODE(SEQ, 12, TM))) || DECODE(SIGN(CNT + 1 - 13), 1, CHR(10)|| MAX( DECODE(SEQ, 13, TM))) || DECODE(SIGN(CNT + 1 - 14), 1, CHR(10)|| MAX( DECODE(SEQ, 14, TM))) || DECODE(SIGN(CNT + 1 - 15), 1, CHR(10)|| MAX( DECODE(SEQ, 15, TM))) || DECODE(SIGN(CNT + 1 - 16), 1, CHR(10)|| MAX( DECODE(SEQ, 16, TM))) || DECODE(SIGN(CNT + 1 - 17), 1, CHR(10)|| MAX( DECODE(SEQ, 17, TM))) || DECODE(SIGN(CNT + 1 - 18), 1, CHR(10)|| MAX( DECODE(SEQ, 18, TM))) || DECODE(SIGN(CNT + 1 - 19), 1, CHR(10)|| MAX( DECODE(SEQ, 19, TM))) || DECODE(SIGN(CNT + 1 - 20), 1, CHR(10)|| MAX( DECODE(SEQ, 20, TM))) AS CRANE_WK_TM
	        FROM (
	            SELECT LOC_CD ,
	              ROW_NUMBER() OVER (PARTITION BY LOC_CD
	                ORDER BY CRN_SEQ) AS SEQ ,
	              SUBSTR(GNG_WRK_ST_HRMNT, 1, 2) || ':' || SUBSTR(GNG_WRK_ST_HRMNT, 3, 2) AS TM ,
	              COUNT(*) OVER (PARTITION BY LOC_CD) AS CNT
	            FROM VSK_PORT_GNG_STRC )
	        GROUP BY LOC_CD, CNT ) T3,
	        (
	        	SELECT	COUNT(*)		AS TTL_CNT	/* 총 ROW 수 */
	        	FROM	VSK_SIM_TML_INFO
	        	WHERE	1		= 1
	        	AND 	SIM_DT	= @[sim_dt]
	      		AND		SIM_NO	= TRIM(TO_CHAR(TO_NUMBER(@[sim_no]), '000'))
	        ) T4
--,
--	        (	SELECT	MAX(DECODE(NO, 1, VSL_CLSS_CAPA	)) AS N1ST_VSL_CLSS_CD	/* 투입 VESSEL CAPA, 척수를 분리한다.*/
--						, MAX(DECODE(NO, 1, VSL_CNT		, 0	)) AS N1ST_VSL_CLSS_KNT
--						, MAX(DECODE(NO, 2, VSL_CLSS_CAPA	)) AS N2ND_VSL_CLSS_CD
--						, MAX(DECODE(NO, 2, VSL_CNT		, 0	)) AS N2ND_VSL_CLSS_KNT
--						, MAX(DECODE(NO, 3, VSL_CLSS_CAPA	)) AS N3RD_VSL_CLSS_CD
--						, MAX(DECODE(NO, 3, VSL_CNT		, 0	)) AS N3RD_VSL_CLSS_KNT
--				FROM	(
--						SELECT ROWNUM NO, VSL_CLSS_CAPA, VSL_CNT
--						FROM	(
--									SELECT	VSL_CLSS_CAPA
--											,COUNT(DISTINCT VSL_CD) AS VSL_CNT 
--									FROM	COA_SIM_VSL_SET_INFO
--									WHERE	1		= 1
--									AND		SIM_DT	= '20140721'
--									AND		SIM_NO	= TRIM(TO_CHAR(TO_NUMBER('1'), '000'))
--									AND		VSL_CLSS_CAPA IS NOT NULL
--									GROUP BY VSL_CLSS_CAPA
--									ORDER BY 1 DESC
--						    	)
--						WHERE	ROWNUM <= 3
--				    	)
--	        )	T5						        
	    WHERE	T1.SIM_DT			= T2.SIM_DT
	    AND		T1.SIM_NO			= T2.SIM_NO
		AND		T1.SIM_DT			= @[sim_dt]
	    AND		T1.SIM_NO			= TRIM(TO_CHAR(TO_NUMBER(@[sim_no]), '000'))				      	
		AND		T3.LOC_CD	(+)		= SUBSTR(T2.TML_CD, 1, 5)				      	
	    AND		SUBSTR(T2.TML_CD, 1, 5)	= T3.LOC_CD (+)
      )T
ORDER BY T.PORT_ROTN_SEQ			]]></sql>
			<params>
				<param name="sim_dt" type="12" value=" " out="N"/>
				<param name="sim_no" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
