<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="TerminalDepartureReportDBDAOTmnlPerformInputPortRSQL">
			<desc><![CDATA[dummy]]></desc>
			<sql><![CDATA[
SELECT LANE,
       VVD,
       TO_CHAR(ETB,'yyyy-mm-dd hh24:mi') ETB,
       TO_CHAR(ETD,'yyyy-mm-dd hh24:mi') ETD,
       TO_CHAR(ATA,'yyyy-mm-dd hh24:mi') ATA,
       TO_CHAR(ATB,'yyyy-mm-dd hh24:mi') ATB,
       TO_CHAR(ATD,'yyyy-mm-dd hh24:mi') ATD,
       ARR_DELAY,
       ARR_WAIT,
       PORT_DELAY,
       PORT_WORK,
       DEP_DELAY,
       TUG_IN,
       TUG_OUT,
       CGO_FL,
       CGO_MT,
       RH_MVS,
       RH_RATIO,
       TOT_MVS,
       WORK_GROSS,
       WORK_NET,
       GANG_GROSS,
       GANG_NET,
       WORK_PRD_GROSS,
       WORK_PRD_NET,
       GANG_PRD_GROSS,
       GANG_PRD_NET
FROM ( SELECT DECODE(C3,1,'G.Sum',LANE) LANE,
              DECODE(C2,1,'S.Sum',VVD) VVD,
              C1, C2, C3,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ETB
              END ETB,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ETD
              END ETD,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ATA
              END ATA,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ATB
              END ATB,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ATD
              END ATD,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ARR_DELAY
              END ARR_DELAY,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ARR_WAIT
              END ARR_WAIT,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE PORT_DELAY
              END PORT_DELAY,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE PORT_WORK
              END PORT_WORK,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE DEP_DELAY
              END DEP_DELAY,
              TUG_IN,
              TUG_OUT,
              CGO_FL,
              CGO_MT,
              RH_MVS,
              RH_RATIO,
              TOT_MVS,
              WORK_GROSS,
              WORK_NET,
              GANG_GROSS,
              GANG_NET,
              WORK_PRD_GROSS,
              WORK_PRD_NET,
              GANG_PRD_GROSS,
              GANG_PRD_NET
       FROM ( SELECT S.VSL_SLAN_CD                                                 LANE,
                     C.VVD,
                     MAX(R.PF_ETB_DT)                                              ETB,
                     MAX(R.PF_ETD_DT)                                              ETD,
                     MAX(C.ARR)                                                    ATA,
                     MAX(C.BRTH)                                                   ATB,
                     MAX(C.DEP)                                                    ATD,
                     CASE
                     WHEN GROUPING(S.VSL_SLAN_CD)=0 AND GROUPING(C.VVD)=0 THEN 1
                     ELSE 0
                     END C1,
                     CASE
                     WHEN GROUPING(S.VSL_SLAN_CD)=0 AND GROUPING(C.VVD)=1 THEN 1
                     ELSE 0
                     END C2,
                     CASE
                     WHEN GROUPING(S.VSL_SLAN_CD)=1 AND GROUPING(C.VVD)=1 THEN 1
                     ELSE 0
                     END C3,
                     ROUND(SUM(NVL(C.ARR - R.PF_ETB_DT + (@[manu_in_time]/24),0)) * 24, 1)                             ARR_DELAY,
                     ROUND(SUM(NVL(C.BRTH - C.ARR - (@[manu_in_time]/24),0)) * 24, 1)                                  ARR_WAIT,
                     ROUND(SUM(NVL((C.DEP - C.BRTH) - (R.PF_ETD_DT - R.PF_ETB_DT),0)) * 24, 1)                       PORT_DELAY,
                     ROUND(SUM(NVL((C.DEP - C.BRTH),0)) * 24, 1)                                                     PORT_WORK,
                     ROUND(SUM(NVL((C.DEP - R.PF_ETD_DT),0)) * 24, 1)                                                DEP_DELAY,
                     ROUND(SUM(NVL(C.ATUG,0)),1)                                                                     TUG_IN,
                     ROUND(SUM(NVL(C.DTUG,0)),1)                                                                     TUG_OUT,
                     ROUND(SUM(NVL(C.FL,0)),1)                                                                       CGO_FL,
                     ROUND(SUM(NVL(C.MT,0)),1)                                                                       CGO_MT,
                     ROUND(SUM(NVL(C.MVS,0)),1)                                                                      RH_MVS,
                     ROUND((SUM(NVL(C.MVS,0))/NVL((SUM(NVL(C.FL,0))+SUM(NVL(C.MT,0))+SUM(NVL(C.MVS,0))),1))*100,1)   RH_RATIO,
                     ROUND(SUM(NVL(C.FL,0))+SUM(NVL(C.MT,0))+SUM(NVL(C.MVS,0)),1)                                    TOT_MVS,
                     ROUND(SUM(NVL(TO_NUMBER(SUBSTR(T.GROSS_WORK,1,INSTR(T.GROSS_WORK,':')-1))+TO_NUMBER(SUBSTR(T.GROSS_WORK,INSTR(T.GROSS_WORK,':')+1)/60),0)),1) WORK_GROSS,
                     ROUND(SUM(NVL(TO_NUMBER(SUBSTR(T.NET_WORK,1,INSTR(T.NET_WORK,':')-1))+TO_NUMBER(SUBSTR(T.NET_WORK,INSTR(T.NET_WORK,':')+1)/60),0)),1)         WORK_NET,
                     ROUND(SUM(NVL(TO_NUMBER(SUBSTR(T.GROSS_GANG,1,INSTR(T.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(T.GROSS_GANG,INSTR(T.GROSS_GANG,':')+1)/60),0)),1) GANG_GROSS,
                     ROUND(SUM(NVL(TO_NUMBER(SUBSTR(T.NET_GANG,1,INSTR(T.NET_GANG,':')-1))+TO_NUMBER(SUBSTR(T.NET_GANG,INSTR(T.NET_GANG,':')+1)/60),0)),1)         GANG_NET,
                     ROUND(SUM(NVL(T.GROSS_TML,0)),1)                              WORK_PRD_GROSS,
                     ROUND(SUM(NVL(T.NET_TML,0)),1)                                WORK_PRD_NET,
                     ROUND(SUM(NVL(T.GROSS_GC,0)),1)                               GANG_PRD_GROSS,
                     ROUND(SUM(NVL(T.NET_GC,0)),1)                                 GANG_PRD_NET
              FROM   ( SELECT A.VVD,
                              A.CAL,
                              A.PORT,
                              A.STS,
                              A.ARR,
                              A.BRTH,
                              A.DEP,
                              A.ATUG,
                              A.DTUG,
                              A.ETD,
                              A.ETB,
                              A.FL,
                              A.MT,
                              B.MVS
                       FROM   ( SELECT S.PORT_CD                    PORT,
                                       V.LANE                       LANE,
                                       S.VSL_CD||S.VOY_NO||S.DIR_CD VVD,
                                       M.CRR_CD                     OPR,
                                       V.CAL,
                                       V.STS,
                                       V.ARR,
                                       V.BRTH,
                                       V.DEP,
                                       V.ATUG,
                                       V.DTUG,
                                       V.ETD,
                                       V.ETB,
                                     --  SUM(DECODE(S.CNTR_TYPE,'E',0,QTY)) FL,
                                       SUM(  CASE WHEN H.UPDATE_SYS = 'I' OR H.UPDATE_SYS IS NULL THEN DECODE(S.CNTR_TYPE, 'E', 0, S.QTY)
                   					   WHEN H.UPDATE_SYS = 'N' THEN DECODE(S.CNTR_TYPE, 'F', S.QTY, 0) ELSE 0
                   					   END ) FL,
                                       SUM(DECODE(S.CNTR_TYPE,'E',QTY,0)) MT
                                FROM   TDR_SUMMARY S, MDM_VSL_CNTR M,  TDR_HEADER H,
                                       ( SELECT   A.VSL_CD          VSL, 
                                                  A.SKD_VOY_NO      VOY, 
                                                  A.SKD_DIR_CD      DIR, 
                                                  A.VPS_PORT_CD     LOC, 
                                                  A.CLPT_IND_SEQ    CAL, 
                                                  A.SLAN_CD         LANE,
                                                  B.PORT_SKD_STS_CD STS,
                                                  B.ACT_ARR_DT      ARR,
                                                  B.ACT_BRTH_DT     BRTH,
                                                  B.ACT_DEP_DT      DEP,
                                                  B.ARR_TUG_BOT_KNT ATUG,
                                                  B.DEP_TUG_BOT_KNT DTUG,
                                                  A.VPS_ETD_DT      ETD,
                                                  A.VPS_ETB_DT      ETB
                                         FROM     VSK_VSL_PORT_SKD A, VSK_ACT_PORT_SKD B  
                                         WHERE    A.VSL_CD          = B.VSL_CD 
                                         AND      A.SKD_VOY_NO      = B.SKD_VOY_NO 
                                         AND      A.SKD_DIR_CD      = B.SKD_DIR_CD 
                                         AND      A.VPS_PORT_CD     = B.VPS_PORT_CD 
                                         AND      A.CLPT_IND_SEQ    = B.CLPT_IND_SEQ
#if (${slan_cd} != '')
                                         AND      A.SLAN_CD         LIKE @[slan_cd]||'%'                                  --:lane_cd
#end                                         
#if (${yd_cd} == 'All')
                                         AND      A.YD_CD           LIKE @[loc_cd]||'%' 
#else
                                         AND      A.YD_CD           LIKE @[loc_cd]||@[yd_cd]||'%' 
#end                                          
                                         AND      B.PORT_SKD_STS_CD = 'D'
                                         AND      B.ACT_DEP_DT      BETWEEN TO_DATE(REPLACE(@[from_date],'-',''),'YYYYMMDD')              --:fm_dt
                                                                    AND     TO_DATE(REPLACE(@[to_date],'-',''),'YYYYMMDD') + 0.99999 ) V  --:to_dt
                                WHERE  S.VSL_CD   = V.VSL 
                                AND    S.VOY_NO   = V.VOY 
                                AND    S.DIR_CD   = V.DIR 
                                AND    S.PORT_CD  = V.LOC 
                                AND    S.CALL_IND = V.CAL
                                AND    H.VSL_CD   = S.VSL_CD
			                    AND    H.VOY_NO   = S.VOY_NO
			                    AND    H.DIR_CD   = S.DIR_CD
			                    AND    H.PORT_CD  = S.PORT_CD
			                    AND    H.CALL_IND = S.CALL_IND 
                                AND    S.VSL_CD   = M.VSL_CD(+)
#if (${carr_cd} == 'SML')
                                AND    M.CRR_CD   =@[carr_cd]                                                                  --:carr_cd('SML')
#end
#if (${carr_cd} == 'O')
                                AND    M.CRR_CD   <>'SML'                                                                 --:carr_cd('Other')
#end
#if (${dir_cd} != '')
                                AND    S.DIR_CD   LIKE @[dir_cd]||'%'                                                            --:dir_cd
#end
                                GROUP BY S.PORT_CD, V.LANE, S.VSL_CD||S.VOY_NO||S.DIR_CD, M.CRR_CD,
                                         V.CAL, V.STS, V.ARR, V.BRTH, V.DEP, V.ATUG, V.DTUG, V.ETD, V.ETB ) A,
                              ( SELECT C.PORT_CD                    PORT,
                                       V.LANE                       LANE,
                                       C.VSL_CD||C.VOY_NO||C.DIR_CD VVD,
                                       M.CRR_CD                     OPR,
                                       V.CAL,
                                       V.STS,
                                       V.ARR,
                                       V.BRTH,
                                       V.DEP,
                                       V.ATUG,
                                       V.DTUG,
                                       V.ETD,
                                       V.ETB,
                                  --   SUM(DECODE(C.SHIFT_TYPE,'B',1,0))+SUM(DECODE(C.SHIFT_TYPE,'Q',1,0)*2) MVS
                                       SUM( CASE WHEN C.STATUS = 'ST' AND LENGTH(TRIM(C.PRECELL)) > 0 THEN DECODE(C.SHIFT_TYPE, 'Q', 2, 1) -- ST : Restow(Rehandling)
                            		   WHEN C.STATUS = 'MI' AND C.MISHANDLE_CHK IN ('OD', 'OL', 'SD', 'SL') THEN DECODE(SUBSTR(C.MISHANDLE_CHK, 1, 1), 'O', 1, -1) -- Mis Handling
                            		   ELSE 0 END ) MVS
                                FROM   TDR_CNTR_DETAIL C, MDM_VSL_CNTR M,
                                       ( SELECT   A.VSL_CD          VSL, 
                                                  A.SKD_VOY_NO      VOY, 
                                                  A.SKD_DIR_CD      DIR, 
                                                  A.VPS_PORT_CD     LOC, 
                                                  A.CLPT_IND_SEQ    CAL, 
                                                  A.SLAN_CD         LANE,
                                                  B.PORT_SKD_STS_CD STS,
                                                  B.ACT_ARR_DT      ARR,
                                                  B.ACT_BRTH_DT     BRTH,
                                                  B.ACT_DEP_DT      DEP,
                                                  B.ARR_TUG_BOT_KNT ATUG,
                                                  B.DEP_TUG_BOT_KNT DTUG,
                                                  A.VPS_ETD_DT      ETD,
                                                  A.VPS_ETB_DT      ETB
                                         FROM     VSK_VSL_PORT_SKD A, VSK_ACT_PORT_SKD B  
                                         WHERE    A.VSL_CD          = B.VSL_CD 
                                         AND      A.SKD_VOY_NO      = B.SKD_VOY_NO 
                                         AND      A.SKD_DIR_CD      = B.SKD_DIR_CD 
                                         AND      A.VPS_PORT_CD     = B.VPS_PORT_CD 
                                         AND      A.CLPT_IND_SEQ    = B.CLPT_IND_SEQ
#if (${slan_cd} != '')
                                         AND      A.SLAN_CD         LIKE @[slan_cd]||'%'                                          --:lane_cd
#end
#if (${yd_cd} == 'All')
                                         AND      A.YD_CD           LIKE @[loc_cd]||'%' 
#else
                                         AND      A.YD_CD           LIKE @[loc_cd]||@[yd_cd]||'%' 
#end
                                         AND      B.PORT_SKD_STS_CD = 'D'
                                         AND      B.ACT_DEP_DT      BETWEEN TO_DATE(REPLACE(@[from_date],'-',''),'YYYYMMDD')              --:fm_dt
                                                                    AND     TO_DATE(REPLACE(@[to_date],'-',''),'YYYYMMDD') + 0.99999 ) V  --:to_dt
                                WHERE  C.VSL_CD   = V.VSL 
                                AND    C.VOY_NO   = V.VOY 
                                AND    C.DIR_CD   = V.DIR 
                                AND    C.PORT_CD  = V.LOC 
                                AND    C.CALL_IND = V.CAL
                       --         AND    TRIM(C.PRECELL) IS NOT NULL
                                AND    C.VSL_CD   = M.VSL_CD(+)
#if (${carr_cd} == 'SML')
                                AND    M.CRR_CD   =@[carr_cd]                                                                  --:carr_cd('SML')
#end
#if (${carr_cd} == 'O')
                                AND    M.CRR_CD   <>'SML'                                                                 --:carr_cd('Other')
#end
#if (${dir_cd} != '')
                                AND    C.DIR_CD   LIKE @[dir_cd]||'%'                                                            --:dir_cd
#end
                                GROUP BY C.PORT_CD, V.LANE, C.VSL_CD||C.VOY_NO||C.DIR_CD, M.CRR_CD,
                                         V.CAL, V.STS, V.ARR, V.BRTH, V.DEP, V.ATUG, V.DTUG, V.ETD, V.ETB ) B
                       WHERE A.PORT     = B.PORT(+)
                       AND   A.LANE     = B.LANE(+)
                       AND   A.VVD      = B.VVD(+)
                       AND   A.OPR      = B.OPR(+)
                       AND   A.CAL      = B.CAL(+)
                       AND   A.STS      = B.STS(+)
                       AND   A.ARR      = B.ARR(+)
                       AND   A.BRTH     = B.BRTH(+)
                       AND   A.DEP      = B.DEP(+)
                       AND   A.ATUG     = B.ATUG(+)
                       AND   A.DTUG     = B.DTUG(+)
                       AND   A.ETD      = B.ETD(+)
                       AND   A.ETB      = B.ETB(+) ) C,
                     TDR_HEADER T, VSK_VSL_PORT_SKD R, VSK_VSL_SKD S
              WHERE  SUBSTR(C.VVD,1,4) = T.VSL_CD(+)
              AND    SUBSTR(C.VVD,5,4) = T.VOY_NO(+)
              AND    SUBSTR(C.VVD,9,1) = T.DIR_CD(+)
              AND    C.PORT            = T.PORT_CD(+)
              AND    C.CAL             = T.CALL_IND(+)
              AND    SUBSTR(C.VVD,1,4) = R.VSL_CD(+)
              AND    SUBSTR(C.VVD,5,4) = R.SKD_VOY_NO(+)
              AND    SUBSTR(C.VVD,9,1) = R.SKD_DIR_CD(+)
              AND    C.PORT            = R.VPS_PORT_CD(+)
              AND    C.CAL             = R.CLPT_IND_SEQ(+)
              AND    SUBSTR(C.VVD,1,4) = S.VSL_CD
              AND    SUBSTR(C.VVD,5,4) = S.SKD_VOY_NO
              AND    SUBSTR(C.VVD,9,1) = S.SKD_DIR_CD        
              --GROUP BY CUBE( S.VSL_SLAN_CD, C.VVD ) )
			  GROUP BY GROUPING SETS((S.VSL_SLAN_CD, C.VVD, C.CAL), (S.VSL_SLAN_CD), ()) )	
       WHERE C1 = 1 OR C2 = 1 OR C3 = 1
       UNION ALL
       SELECT DECODE(C3,1,'G.AVG',LANE) LANE,
              DECODE(C2,1,'S.AVG',VVD) VVD,
              C1, C2, C3,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ETB
              END ETB,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ETD
              END ETD,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ATA
              END ATA,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ATB
              END ATB,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE ATD
              END ATD,
              ARR_DELAY,
              ARR_WAIT,
              PORT_DELAY,
              PORT_WORK,
              DEP_DELAY,
              TUG_IN,
              TUG_OUT,
              CGO_FL,
              CGO_MT,
              RH_MVS,
              CASE
              WHEN ( C1=0 AND C2= 1 AND C3 = 0 ) OR C3 = 1 THEN NULL
              ELSE RH_RATIO
              END RH_RATIO,
              TOT_MVS,
              WORK_GROSS,
              WORK_NET,
              GANG_GROSS,
              GANG_NET,
              WORK_PRD_GROSS,
              WORK_PRD_NET,
              GANG_PRD_GROSS,
              GANG_PRD_NET
       FROM ( SELECT S.VSL_SLAN_CD                                                 LANE,
                     C.VVD,
                     MAX(R.PF_ETB_DT)                                              ETB,
                     MAX(R.PF_ETD_DT)                                              ETD,
                     MAX(C.ARR)                                                    ATA,
                     MAX(C.BRTH)                                                   ATB,
                     MAX(C.DEP)                                                    ATD,
                     CASE
                     WHEN GROUPING(S.VSL_SLAN_CD)=0 AND GROUPING(C.VVD)=0 THEN 1
                     ELSE 0
                     END C1,
                     CASE
                     WHEN GROUPING(S.VSL_SLAN_CD)=0 AND GROUPING(C.VVD)=1 THEN 1
                     ELSE 0
                     END C2,
                     CASE
                     WHEN GROUPING(S.VSL_SLAN_CD)=1 AND GROUPING(C.VVD)=1 THEN 1
                     ELSE 0
                     END C3,
                     ROUND(DECODE(SUM(DECODE(R.PF_ETB_DT,NULL,0,1)),0,0,
                       (SUM(NVL(C.ARR - R.PF_ETB_DT + (@[manu_in_time]/24),0)) * 24) / 
                        SUM(DECODE(R.PF_ETB_DT,NULL,0,1))),1)                                     ARR_DELAY,
                     ROUND(AVG(NVL(C.BRTH - C.ARR - (@[manu_in_time]/24),0)) * 24, 1)               ARR_WAIT,
                     ROUND(DECODE(SUM(DECODE(R.PF_ETB_DT,NULL,0,1)),0,0,
                       (SUM(NVL((C.DEP - C.BRTH) - (R.PF_ETD_DT - R.PF_ETB_DT),0)) * 24) / 
                        SUM(DECODE(R.PF_ETB_DT,NULL,0,1))),1)                                     PORT_DELAY,
                     ROUND(AVG(NVL((C.DEP - C.BRTH),0)) * 24, 1)                                  PORT_WORK,
                     ROUND(DECODE(SUM(DECODE(R.PF_ETB_DT,NULL,0,1)),0,0,
                       (SUM(NVL((C.DEP - R.PF_ETD_DT),0)) * 24) / 
                        SUM(DECODE(R.PF_ETB_DT,NULL,0,1))),1)                                     DEP_DELAY,
                     ROUND(AVG(NVL(C.ATUG,0)),1)                                                  TUG_IN,
                     ROUND(AVG(NVL(C.DTUG,0)),1)                                                  TUG_OUT,
                     ROUND(AVG(NVL(C.FL,0)),1)                                                    CGO_FL,
                     ROUND(AVG(NVL(C.MT,0)),1)                                                    CGO_MT,
                     ROUND(AVG(NVL(C.MVS,0)),1)                                                   RH_MVS,
                     ROUND(AVG(NVL(C.MVS/NVL((NVL(C.FL,0)+NVL(C.MT,0)+NVL(C.MVS,0)),1),0))*100,1) RH_RATIO,
                     ROUND(AVG(NVL(C.FL,0)+NVL(C.MT,0)+NVL(C.MVS,0)),1)                           TOT_MVS,
                     ROUND(AVG(NVL(TO_NUMBER(SUBSTR(T.GROSS_WORK,1,INSTR(T.GROSS_WORK,':')-1))+TO_NUMBER(SUBSTR(T.GROSS_WORK,INSTR(T.GROSS_WORK,':')+1)/60),0)),1) WORK_GROSS,
                     ROUND(AVG(NVL(TO_NUMBER(SUBSTR(T.NET_WORK,1,INSTR(T.NET_WORK,':')-1))+TO_NUMBER(SUBSTR(T.NET_WORK,INSTR(T.NET_WORK,':')+1)/60),0)),1)         WORK_NET,
                     ROUND(AVG(NVL(TO_NUMBER(SUBSTR(T.GROSS_GANG,1,INSTR(T.GROSS_GANG,':')-1))+TO_NUMBER(SUBSTR(T.GROSS_GANG,INSTR(T.GROSS_GANG,':')+1)/60),0)),1) GANG_GROSS,
                     ROUND(AVG(NVL(TO_NUMBER(SUBSTR(T.NET_GANG,1,INSTR(T.NET_GANG,':')-1))+TO_NUMBER(SUBSTR(T.NET_GANG,INSTR(T.NET_GANG,':')+1)/60),0)),1)         GANG_NET,
                     ROUND(AVG(NVL(T.GROSS_TML,0)),1)                              WORK_PRD_GROSS,
                     ROUND(AVG(NVL(T.NET_TML,0)),1)                                WORK_PRD_NET,
                     ROUND(AVG(NVL(T.GROSS_GC,0)),1)                               GANG_PRD_GROSS,
                     ROUND(AVG(NVL(T.NET_GC,0)),1)                                 GANG_PRD_NET
              FROM   ( SELECT A.VVD,
                              A.CAL,
                              A.PORT,
                              A.STS,
                              A.ARR,
                              A.BRTH,
                              A.DEP,
                              A.ATUG,
                              A.DTUG,
                              A.ETD,
                              A.ETB,
                              A.FL,
                              A.MT,
                              B.MVS
                       FROM   ( SELECT S.PORT_CD                    PORT,
                                       V.LANE                       LANE,
                                       S.VSL_CD||S.VOY_NO||S.DIR_CD VVD,
                                       M.CRR_CD                     OPR,
                                       V.CAL,
                                       V.STS,
                                       V.ARR,
                                       V.BRTH,
                                       V.DEP,
                                       V.ATUG,
                                       V.DTUG,
                                       V.ETD,
                                       V.ETB,
                                    --   SUM(DECODE(S.CNTR_TYPE,'E',0,QTY)) FL,
                                       SUM(  CASE WHEN H.UPDATE_SYS = 'I' OR H.UPDATE_SYS IS NULL THEN DECODE(S.CNTR_TYPE, 'E', 0, S.QTY)
                   					   WHEN H.UPDATE_SYS = 'N' THEN DECODE(S.CNTR_TYPE, 'F', S.QTY, 0) ELSE 0
                   					   END ) FL,
                                       SUM(DECODE(S.CNTR_TYPE,'E',QTY,0)) MT
                                FROM   TDR_SUMMARY S, MDM_VSL_CNTR M, TDR_HEADER H,
                                       ( SELECT   A.VSL_CD          VSL, 
                                                  A.SKD_VOY_NO      VOY, 
                                                  A.SKD_DIR_CD      DIR, 
                                                  A.VPS_PORT_CD     LOC, 
                                                  A.CLPT_IND_SEQ    CAL, 
                                                  A.SLAN_CD         LANE,
                                                  B.PORT_SKD_STS_CD STS,
                                                  B.ACT_ARR_DT      ARR,
                                                  B.ACT_BRTH_DT     BRTH,
                                                  B.ACT_DEP_DT      DEP,
                                                  B.ARR_TUG_BOT_KNT ATUG,
                                                  B.DEP_TUG_BOT_KNT DTUG,
                                                  A.VPS_ETD_DT      ETD,
                                                  A.VPS_ETB_DT      ETB
                                         FROM     VSK_VSL_PORT_SKD A, VSK_ACT_PORT_SKD B  
                                         WHERE    A.VSL_CD          = B.VSL_CD 
                                         AND      A.SKD_VOY_NO      = B.SKD_VOY_NO 
                                         AND      A.SKD_DIR_CD      = B.SKD_DIR_CD 
                                         AND      A.VPS_PORT_CD     = B.VPS_PORT_CD 
                                         AND      A.CLPT_IND_SEQ    = B.CLPT_IND_SEQ
#if (${slan_cd} != '')
                                         AND      A.SLAN_CD         LIKE @[slan_cd]||'%'                                          --:lane_cd
#end
#if (${yd_cd} == 'All')
                                         AND      A.YD_CD           LIKE @[loc_cd]||'%' 
#else
                                         AND      A.YD_CD           LIKE @[loc_cd]||@[yd_cd]||'%' 
#end
                                         AND      B.PORT_SKD_STS_CD = 'D'
                                         AND      B.ACT_DEP_DT      BETWEEN TO_DATE(REPLACE(@[from_date],'-',''),'YYYYMMDD')              --:fm_dt
                                                                    AND     TO_DATE(REPLACE(@[to_date],'-',''),'YYYYMMDD') + 0.99999 ) V  --:to_dt
                                WHERE  S.VSL_CD   = V.VSL 
                                AND    S.VOY_NO   = V.VOY 
                                AND    S.DIR_CD   = V.DIR 
                                AND    S.PORT_CD  = V.LOC 
                                AND    S.CALL_IND = V.CAL
                                AND    H.VSL_CD   = S.VSL_CD
			                    AND    H.VOY_NO   = S.VOY_NO
			                    AND    H.DIR_CD   = S.DIR_CD
			                    AND    H.PORT_CD  = S.PORT_CD
			                    AND    H.CALL_IND = S.CALL_IND 
                                AND    S.VSL_CD   = M.VSL_CD(+)
#if (${carr_cd} == 'SML')
                                AND    M.CRR_CD   =@[carr_cd]                                                                  --:carr_cd('SML')
#end
#if (${carr_cd} == 'O')
                                AND    M.CRR_CD   <>'SML'                                                                 --:carr_cd('Other')
#end
#if (${dir_cd} != '')
                                AND    S.DIR_CD   LIKE @[dir_cd]||'%'                                                            --:dir_cd
#end                                
                                GROUP BY S.PORT_CD, V.LANE, S.VSL_CD||S.VOY_NO||S.DIR_CD, M.CRR_CD,
                                         V.CAL, V.STS, V.ARR, V.BRTH, V.DEP, V.ATUG, V.DTUG, V.ETD, V.ETB ) A,
                              ( SELECT C.PORT_CD                    PORT,
                                       V.LANE                       LANE,
                                       C.VSL_CD||C.VOY_NO||C.DIR_CD VVD,
                                       M.CRR_CD                     OPR,
                                       V.CAL,
                                       V.STS,
                                       V.ARR,
                                       V.BRTH,
                                       V.DEP,
                                       V.ATUG,
                                       V.DTUG,
                                       V.ETD,
                                       V.ETB,
                                  --   SUM(DECODE(C.SHIFT_TYPE,'B',1,0))+SUM(DECODE(C.SHIFT_TYPE,'Q',1,0)*2) MVS
                                       SUM( CASE WHEN C.STATUS = 'ST' AND LENGTH(TRIM(C.PRECELL)) > 0 THEN DECODE(C.SHIFT_TYPE, 'Q', 2, 1) -- ST : Restow(Rehandling)
                            		   WHEN C.STATUS = 'MI' AND C.MISHANDLE_CHK IN ('OD', 'OL', 'SD', 'SL') THEN DECODE(SUBSTR(C.MISHANDLE_CHK, 1, 1), 'O', 1, -1) -- Mis Handling
                            		   ELSE 0 END ) MVS
                                FROM   TDR_CNTR_DETAIL C, MDM_VSL_CNTR M,
                                       ( SELECT   A.VSL_CD          VSL, 
                                                  A.SKD_VOY_NO      VOY, 
                                                  A.SKD_DIR_CD      DIR, 
                                                  A.VPS_PORT_CD     LOC, 
                                                  A.CLPT_IND_SEQ    CAL, 
                                                  A.SLAN_CD         LANE,
                                                  B.PORT_SKD_STS_CD STS,
                                                  B.ACT_ARR_DT      ARR,
                                                  B.ACT_BRTH_DT     BRTH,
                                                  B.ACT_DEP_DT      DEP,
                                                  B.ARR_TUG_BOT_KNT ATUG,
                                                  B.DEP_TUG_BOT_KNT DTUG,
                                                  A.VPS_ETD_DT      ETD,
                                                  A.VPS_ETB_DT      ETB
                                         FROM     VSK_VSL_PORT_SKD A, VSK_ACT_PORT_SKD B  
                                         WHERE    A.VSL_CD          = B.VSL_CD 
                                         AND      A.SKD_VOY_NO      = B.SKD_VOY_NO 
                                         AND      A.SKD_DIR_CD      = B.SKD_DIR_CD 
                                         AND      A.VPS_PORT_CD     = B.VPS_PORT_CD 
                                         AND      A.CLPT_IND_SEQ    = B.CLPT_IND_SEQ
#if (${slan_cd} != '')
                                         AND      A.SLAN_CD         LIKE @[slan_cd]||'%'                                          --:lane_cd
#end
#if (${yd_cd} == 'All')
                                         AND      A.YD_CD           LIKE @[loc_cd]||'%' 
#else
                                         AND      A.YD_CD           LIKE @[loc_cd]||@[yd_cd]||'%' 
#end                                     
                                         AND      B.PORT_SKD_STS_CD = 'D'
                                         AND      B.ACT_DEP_DT      BETWEEN TO_DATE(REPLACE(@[from_date],'-',''),'YYYYMMDD')              --:fm_dt
                                                                    AND     TO_DATE(REPLACE(@[to_date],'-',''),'YYYYMMDD') + 0.99999 ) V  --:to_dt
                                WHERE  C.VSL_CD   = V.VSL 
                                AND    C.VOY_NO   = V.VOY 
                                AND    C.DIR_CD   = V.DIR 
                                AND    C.PORT_CD  = V.LOC 
                                AND    C.CALL_IND = V.CAL
                     --         AND    TRIM(C.PRECELL) IS NOT NULL
                                AND    C.VSL_CD   = M.VSL_CD(+)
                                
#if (${carr_cd} == 'SML')
                                AND    M.CRR_CD   =@[carr_cd]                                                                  --:carr_cd('SML')
#end
#if (${carr_cd} == 'O')
                                AND    M.CRR_CD   <>'SML'                                                                 --:carr_cd('Other')
#end
#if (${dir_cd} != '')
                                AND    C.DIR_CD   LIKE @[dir_cd]||'%'                                                            --:dir_cd
#end
                                GROUP BY C.PORT_CD, V.LANE, C.VSL_CD||C.VOY_NO||C.DIR_CD, M.CRR_CD,
                                         V.CAL, V.STS, V.ARR, V.BRTH, V.DEP, V.ATUG, V.DTUG, V.ETD, V.ETB ) B
                       WHERE A.PORT     = B.PORT(+)
                       AND   A.LANE     = B.LANE(+)
                       AND   A.VVD      = B.VVD(+)
                       AND   A.OPR      = B.OPR(+)
                       AND   A.CAL      = B.CAL(+)
                       AND   A.STS      = B.STS(+)
                       AND   A.ARR      = B.ARR(+)
                       AND   A.BRTH     = B.BRTH(+)
                       AND   A.DEP      = B.DEP(+)
                       AND   A.ATUG     = B.ATUG(+)
                       AND   A.DTUG     = B.DTUG(+)
                       AND   A.ETD      = B.ETD(+)
                       AND   A.ETB      = B.ETB(+) ) C,
                     TDR_HEADER T, VSK_VSL_PORT_SKD R, VSK_VSL_SKD S
              WHERE  SUBSTR(C.VVD,1,4) = T.VSL_CD(+)
              AND    SUBSTR(C.VVD,5,4) = T.VOY_NO(+)
              AND    SUBSTR(C.VVD,9,1) = T.DIR_CD(+)
              AND    C.PORT            = T.PORT_CD(+)
              AND    C.CAL             = T.CALL_IND(+)
              AND    SUBSTR(C.VVD,1,4) = R.VSL_CD(+)
              AND    SUBSTR(C.VVD,5,4) = R.SKD_VOY_NO(+)
              AND    SUBSTR(C.VVD,9,1) = R.SKD_DIR_CD(+)
              AND    C.PORT            = R.VPS_PORT_CD(+)
              AND    C.CAL             = R.CLPT_IND_SEQ(+)
              AND    SUBSTR(C.VVD,1,4) = S.VSL_CD
              AND    SUBSTR(C.VVD,5,4) = S.SKD_VOY_NO
              AND    SUBSTR(C.VVD,9,1) = S.SKD_DIR_CD        
              GROUP BY CUBE( S.VSL_SLAN_CD, C.VVD) )
       WHERE ( C1 = 0 AND C2 = 0 AND C3 = 1 ) OR ( C1 = 0 AND C2 = 1 AND C3 = 0 ) )
ORDER BY DECODE(LANE,'G.AVG','ZZZ','G.Sum','YYY',LANE), DECODE(VVD,'S.AVG','ZZZZZZZZZ','S.Sum','YYYYYYYYY',VVD), ETD			]]></sql>
			<params>
				<param name="manu_in_time" type="12" value="" out="N"/>
				<param name="slan_cd" type="12" value="" out="N"/>
				<param name="loc_cd" type="12" value="" out="N"/>
				<param name="yd_cd" type="12" value="" out="N"/>
				<param name="from_date" type="12" value="" out="N"/>
				<param name="to_date" type="12" value="" out="N"/>
				<param name="carr_cd" type="12" value="" out="N"/>
				<param name="dir_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
