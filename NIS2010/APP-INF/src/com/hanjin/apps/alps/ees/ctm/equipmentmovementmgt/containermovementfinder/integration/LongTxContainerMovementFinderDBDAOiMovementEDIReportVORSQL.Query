<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="LongTxContainerMovementFinderDBDAOiMovementEDIReportVORSQL">
			<desc><![CDATA[--------------------------------------------------------
History
2010.08.18 나상보 [CHM-201005413-01] MVNT timely update ratio 기능보완
                  : [EES_CTM_0418] 1. LCC 선택시 Yard 단위로 Download 가능 하도록 처리
					             2. 검색 조건 추가 (mvmt status 멀티 선택 가능)
2010.09.09 김상수 [CHM-201006478-01] Full/Mty Option기능 추가 (Movement 적시 update 비율 및 row data를 조회하는 화면)
                  1.Movement 적시 update 비율 및 row data를 조회하는 화면에 Full/Mty Option기능 추가
                    ->Service Management > CNTR Movement > Monitoring > MVMT Timely Update Ratio
                  2. Default 값은 All 로 하고, 필요시 Full 혹은 Mty별 조회 기능 추가
]]></desc>
			<sql><![CDATA[
SELECT
#if (${data_by} == '1')
        A.RCC_CD,
#elseif (${data_by} == '2')
        A.RCC_CD, A.LCC_CD,
#elseif (${data_by} == '5')
        A.RCC_CD, A.LCC_CD, A.CNT_CD,
#elseif (${data_by} == '3')
        A.RCC_CD, A.LCC_CD, A.CNT_CD, A.LOC_CD,
#elseif (${data_by} == '4')
        A.RCC_CD, A.LCC_CD, A.CNT_CD, A.LOC_CD, A.ORG_YD_CD,
#end
        @[gap] GAP, @[p_date1] P_DATE1, @[p_date2] P_DATE2, @[dom_flg] DOM_FLG, @[data_by] DATA_BY, SUM(NVL(L_TOT,0)) TOT, SUM(NVL(ML_TOT,0)) MTOT, SUM(NVL(EL_TOT,0)) ETOT, SUM(NVL(SL_TOT,0)) STOT,

#if (${gap} == '12')
        SUM(NVL(OFF_12,0)) OFF_12, SUM(NVL(MOFF_12,0)) MOFF_12, SUM(NVL(SOFF_12,0)) SOFF_12, SUM(NVL(EOFF_12,0)) EOFF_12,
       (SUM(NVL(OFF_12,0)) /  SUM(DECODE( L_TOT,0,1,  L_TOT)) * 100) PER_12,
       (SUM(NVL(MOFF_12,0)) / SUM(DECODE(ML_TOT,0,1, ML_TOT)) * 100) MPER_12,
       (SUM(NVL(EOFF_12,0)) / SUM(DECODE(EL_TOT,0,1, EL_TOT)) * 100) EPER_12,
       (SUM(NVL(SOFF_12,0)) / SUM(DECODE(SL_TOT,0,1, SL_TOT)) * 100) SPER_12,

       ((SUM(NVL(OVR_48,0)) + SUM(NVL(OFF_24,0)) + SUM(NVL(OFF_48,0)) ))  OVR_48,
       ((SUM(NVL(MOVR_48,0))+ SUM(NVL(MOFF_24,0))+ SUM(NVL(MOFF_48,0)))) MOVR_48,
       ((SUM(NVL(EOVR_48,0))+ SUM(NVL(EOFF_24,0))+ SUM(NVL(EOFF_48,0)))) EOVR_48,
       ((SUM(NVL(SOVR_48,0))+ SUM(NVL(SOFF_24,0))+ SUM(NVL(SOFF_48,0)))) SOVR_48,
       ((SUM(NVL(OVR_48,0)) + SUM(NVL(OFF_24,0)) + SUM(NVL(OFF_48,0)) )/ SUM(DECODE( L_TOT,0,1,  L_TOT)) * 100)  OPER_48,
       ((SUM(NVL(MOVR_48,0))+ SUM(NVL(MOFF_24,0))+ SUM(NVL(MOFF_48,0)))/ SUM(DECODE(ML_TOT,0,1, ML_TOT)) * 100) MOPER_48,
       ((SUM(NVL(EOVR_48,0))+ SUM(NVL(EOFF_24,0))+ SUM(NVL(EOFF_48,0)))/ SUM(DECODE(EL_TOT,0,1, EL_TOT)) * 100) EOPER_48,
       ((SUM(NVL(SOVR_48,0))+ SUM(NVL(SOFF_24,0))+ SUM(NVL(SOFF_48,0)))/ SUM(DECODE(SL_TOT,0,1, SL_TOT)) * 100) SOPER_48

#elseif (${gap} == '24')
        SUM(NVL(OFF_24,0) + NVL(OFF_12,0)) OFF_24, SUM(NVL(MOFF_24,0) + NVL(MOFF_12,0)) MOFF_24, SUM(NVL(SOFF_24,0) + NVL(SOFF_12,0)) SOFF_24, SUM(NVL(EOFF_24,0) + NVL(EOFF_12,0)) EOFF_24,
       (SUM(NVL(OFF_24,0) + NVL(OFF_12,0))  / SUM(DECODE( L_TOT,0,1,  L_TOT)) * 100) PER_24,
       (SUM(NVL(MOFF_24,0)+ NVL(MOFF_12,0)) / SUM(DECODE(ML_TOT,0,1, ML_TOT)) * 100) MPER_24,
       (SUM(NVL(EOFF_24,0)+ NVL(EOFF_12,0)) / SUM(DECODE(EL_TOT,0,1, EL_TOT)) * 100) EPER_24,
       (SUM(NVL(SOFF_24,0)+ NVL(SOFF_12,0)) / SUM(DECODE(SL_TOT,0,1, SL_TOT)) * 100) SPER_24,

       ((SUM(NVL(OVR_48,0)) + SUM(NVL(OFF_48,0)) ))  OVR_48,
       ((SUM(NVL(MOVR_48,0))+ SUM(NVL(MOFF_48,0)))) MOVR_48,
       ((SUM(NVL(EOVR_48,0))+ SUM(NVL(EOFF_48,0)))) EOVR_48,
       ((SUM(NVL(SOVR_48,0))+ SUM(NVL(SOFF_48,0)))) SOVR_48,

       ((SUM(NVL(OVR_48,0)) + SUM(NVL(OFF_48,0)) )/ SUM(DECODE( L_TOT,0,1,  L_TOT)) * 100)  OPER_48,
       ((SUM(NVL(MOVR_48,0))+ SUM(NVL(MOFF_48,0)))/ SUM(DECODE(ML_TOT,0,1, ML_TOT)) * 100) MOPER_48,
       ((SUM(NVL(EOVR_48,0))+ SUM(NVL(EOFF_48,0)))/ SUM(DECODE(EL_TOT,0,1, EL_TOT)) * 100) EOPER_48,
       ((SUM(NVL(SOVR_48,0))+ SUM(NVL(SOFF_48,0)))/ SUM(DECODE(SL_TOT,0,1, SL_TOT)) * 100) SOPER_48

#elseif (${gap} == '48')
        SUM(NVL(OFF_24,0) + NVL(OFF_12,0) + NVL(OFF_48,0)) OFF_48, SUM(NVL(MOFF_24,0) + NVL(MOFF_12,0) + NVL(MOFF_48,0)) MOFF_48, SUM(NVL(SOFF_24,0) + NVL(SOFF_12,0) + NVL(SOFF_48,0)) SOFF_48, SUM(NVL(EOFF_24,0) + NVL(EOFF_12,0) + NVL(EOFF_48,0)) EOFF_48,
       (SUM(NVL(OFF_24,0) + NVL(OFF_12,0)  + NVL(OFF_48,0))  / SUM(DECODE( L_TOT,0,1,  L_TOT)) * 100) PER_48,
       (SUM(NVL(MOFF_24,0)+ NVL(MOFF_12,0) + NVL(MOFF_48,0)) / SUM(DECODE(ML_TOT,0,1, ML_TOT)) * 100) MPER_48,
       (SUM(NVL(EOFF_24,0)+ NVL(EOFF_12,0) + NVL(EOFF_48,0)) / SUM(DECODE(EL_TOT,0,1, EL_TOT)) * 100) EPER_48,
       (SUM(NVL(SOFF_24,0)+ NVL(SOFF_12,0) + NVL(SOFF_48,0)) / SUM(DECODE(SL_TOT,0,1, SL_TOT)) * 100) SPER_48,

       ((SUM(NVL(OVR_48,0 ))))  OVR_48,
       ((SUM(NVL(MOVR_48,0)))) MOVR_48,
       ((SUM(NVL(EOVR_48,0)))) EOVR_48,
       ((SUM(NVL(SOVR_48,0)))) SOVR_48,

       ((SUM(NVL(OVR_48,0)) )/ SUM(DECODE( L_TOT,0,1,  L_TOT)) * 100)  OPER_48,
       ((SUM(NVL(MOVR_48,0)))/ SUM(DECODE(ML_TOT,0,1, ML_TOT)) * 100) MOPER_48,
       ((SUM(NVL(EOVR_48,0)))/ SUM(DECODE(EL_TOT,0,1, EL_TOT)) * 100) EOPER_48,
       ((SUM(NVL(SOVR_48,0)))/ SUM(DECODE(SL_TOT,0,1, SL_TOT)) * 100) SOPER_48

#else
        SUM(NVL(OFF_12,0)) OFF_12, SUM(NVL(MOFF_12,0)) MOFF_12, SUM(NVL(SOFF_12,0)) SOFF_12, SUM(NVL(EOFF_12,0)) EOFF_12,
       (SUM(NVL(OFF_12,0)) /  SUM(DECODE( L_TOT,0,1,  L_TOT)) * 100) PER_12,
       (SUM(NVL(MOFF_12,0)) / SUM(DECODE(ML_TOT,0,1, ML_TOT)) * 100) MPER_12,
       (SUM(NVL(EOFF_12,0)) / SUM(DECODE(EL_TOT,0,1, EL_TOT)) * 100) EPER_12,
       (SUM(NVL(SOFF_12,0)) / SUM(DECODE(SL_TOT,0,1, SL_TOT)) * 100) SPER_12,

        SUM(NVL(OFF_24,0)) OFF_24, SUM(NVL(MOFF_24,0)) MOFF_24, SUM(NVL(SOFF_24,0)) SOFF_24, SUM(NVL(EOFF_24,0)) EOFF_24,
       (SUM(NVL(OFF_24,0)) /  SUM(DECODE( L_TOT,0,1,  L_TOT)) * 100) PER_24,
       (SUM(NVL(MOFF_24,0)) / SUM(DECODE(ML_TOT,0,1, ML_TOT)) * 100) MPER_24,
       (SUM(NVL(EOFF_24,0)) / SUM(DECODE(EL_TOT,0,1, EL_TOT)) * 100) EPER_24,
       (SUM(NVL(SOFF_24,0)) / SUM(DECODE(SL_TOT,0,1, SL_TOT)) * 100) SPER_24,
        SUM(NVL(OFF_48,0)) OFF_48,
        SUM(NVL(MOFF_48,0)) MOFF_48,
        SUM(NVL(SOFF_48,0)) SOFF_48,
        SUM(NVL(EOFF_48,0)) EOFF_48,
       (SUM(NVL(OFF_48,0)) /  SUM(DECODE(L_TOT,0,1,  L_TOT)) * 100) PER_48,
       (SUM(NVL(MOFF_48,0)) / SUM(DECODE(ML_TOT,0,1,ML_TOT)) * 100) MPER_48,
       (SUM(NVL(EOFF_48,0)) / SUM(DECODE(EL_TOT,0,1,EL_TOT)) * 100) EPER_48,
       (SUM(NVL(SOFF_48,0)) / SUM(DECODE(SL_TOT,0,1,SL_TOT)) * 100) SPER_48,

       (SUM(NVL(OVR_48,0)) /  SUM(DECODE(L_TOT,0,1 , L_TOT)) * 100) OPER_48,
       (SUM(NVL(MOVR_48,0)) / SUM(DECODE(ML_TOT,0,1,ML_TOT)) * 100) MOPER_48,
       (SUM(NVL(EOVR_48,0)) / SUM(DECODE(EL_TOT,0,1,EL_TOT)) * 100) EOPER_48,
       (SUM(NVL(SOVR_48,0)) / SUM(DECODE(SL_TOT,0,1,SL_TOT)) * 100) SOPER_48,

       ((SUM(NVL(OVR_48,0))))  OVR_48,
       ((SUM(NVL(MOVR_48,0)))) MOVR_48,
       ((SUM(NVL(EOVR_48,0)))) EOVR_48,
       ((SUM(NVL(SOVR_48,0)))) SOVR_48

#end
FROM (
      SELECT RCC_CD, LCC_CD, CNT_CD, LOC_CD, ORG_YD_CD, SUM(OFF_12) OFF_12, SUM(OFF_24) OFF_24, SUM(OFF_48) OFF_48, SUM(OVR_48) OVR_48, SUM(L_TOT) L_TOT
      FROM (
            SELECT /*+ USE_NL(CTM LOC EQ) */ EQ.RCC_CD, EQ.LCC_CD, LOC.CNT_CD, LOC.LOC_CD, ORG_YD_CD, OFF_12, OFF_24, OFF_48, OVR_48, (OFF_12 + OFF_24 + OFF_48 + OVR_48) L_TOT
            FROM (
                SELECT ORG_YD_CD, OFF_12, OFF_24, OFF_48, OVR_48
                FROM
                  (
                    SELECT ORG_YD_CD, OFF_12, OFF_24, OFF_48, OVR_48
                    FROM (
                        SELECT   ORG_YD_CD, SUM(OFF_12) OFF_12, SUM(OFF_24) OFF_24, SUM(OFF_48) OFF_48, SUM(OVR_48) OVR_48
                        FROM  (SELECT ORG_YD_CD,
                              CASE WHEN OFFSET_DT <= 0.5                     THEN 1 ELSE 0 END OFF_12,
                              CASE WHEN OFFSET_DT >  2                       THEN 1 ELSE 0 END OVR_48,
                              CASE WHEN OFFSET_DT >  0.5  AND OFFSET_DT <= 1 THEN 1 ELSE 0 END OFF_24,
                              CASE WHEN OFFSET_DT >  1    AND OFFSET_DT <= 2 THEN 1 ELSE 0 END OFF_48
                           FROM (SELECT /*+ INDEX ( A XAK1CTM_MOVEMENT)*/ ORG_YD_CD, (CRE_LOCL_DT - CNMV_EVNT_DT) OFFSET_DT
                                   FROM CTM_MOVEMENT A
                                  #if (${rcc_cd} != 'ALL')
                                  WHERE SYS_AREA_GRP_ID = (SELECT SYS_AREA_GRP_ID FROM COM_SYS_AREA_GRP_ID WHERE CNT_CD = SUBSTR(@[rcc_cd],0,2) AND SUBSTR(SYS_AREA_GRP_ID,0,1) != 'D')
                                  #else
                                  WHERE SYS_AREA_GRP_ID IN ('USA', 'SWA', 'KOR', 'EUR', 'CHN' )
                                  #end
                                    AND CNMV_EVNT_DT BETWEEN TO_DATE (@[p_date1],'YYYY-MM-DD')
                                    AND TO_DATE (@[p_date2], 'YYYY-MM-DD') + 0.99999
                                    #if (${p_yard1} != '')
                                      #if (${p_yard2} != '')
                                    AND ORG_YD_CD = @[p_yard1] || @[p_yard2]
                                      #else
                                    AND ORG_YD_CD LIKE @[p_yard1] || '%'
                                      #end
                                    #end
                                    AND (NVL(MVMT_CRE_TP_CD, 'XX') = 'XX'
									     OR MVMT_CRE_TP_CD IN ('N', 'M', 'S', 'B'))
                                    #if (${dom_flg} == 'I')
                                    AND SUBSTR(MVMT_STS_CD,0,1) != 'C'
                                    #elseif (${dom_flg} == 'D')
                                    AND SUBSTR(MVMT_STS_CD,0,1) = 'C'
                                    #end
                                    #if (${sts_cd} != '')
                                    AND MVMT_STS_CD IN (${sts_cd})
                                    #end
                                    #if (${fcntr_flg} != '')
                                    AND FCNTR_FLG = @[fcntr_flg]
                                    #end
                                  )
                         )
                        GROUP BY ORG_YD_CD
                    )
                  )
                ) CTM, MDM_LOCATION LOC, MDM_EQ_ORZ_CHT EQ
            WHERE  LOC.SCC_CD = EQ.SCC_CD
            AND  LOC.LOC_CD = SUBSTR(CTM.ORG_YD_CD, 0, 5)
      )
      GROUP BY RCC_CD, LCC_CD, CNT_CD, LOC_CD, ORG_YD_CD
      ) A, (
            SELECT RCC_CD, LCC_CD, CNT_CD, LOC_CD, ORG_YD_CD,
                   SUM( EOFF_12 ) EOFF_12,
                   SUM( EOFF_24 ) EOFF_24,
                   SUM( EOFF_48 ) EOFF_48,
                   SUM( EOVR_48 ) EOVR_48,
                   SUM( EL_TOT ) EL_TOT,
                   SUM( SOFF_12 ) SOFF_12,
                   SUM( SOFF_24 ) SOFF_24,
                   SUM( SOFF_48 ) SOFF_48,
                   SUM( SOVR_48 ) SOVR_48,
                   SUM( SL_TOT ) SL_TOT,
                   SUM( MOFF_12 ) MOFF_12,
                   SUM( MOFF_24 ) MOFF_24,
                   SUM( MOFF_48 ) MOFF_48,
                   SUM( MOVR_48 ) MOVR_48,
                   SUM( ML_TOT ) ML_TOT
            FROM (
                  SELECT /*+ USE_NL(CTM LOC EQ) */ EQ.RCC_CD, EQ.LCC_CD, LOC.CNT_CD, LOC.LOC_CD, ORG_YD_CD,
                         EOFF_12,
                         EOFF_24,
                          EOFF_48,
                          EOVR_48,
                          SOFF_12,
                          SOFF_24,
                          SOFF_48,
                          SOVR_48,
                          MOFF_12,
                          MOFF_24,
                          MOFF_48,
                          MOVR_48,
                          ( EOFF_12 + EOFF_24 + EOFF_48 + EOVR_48 ) EL_TOT,
                         ( SOFF_12 + SOFF_24 + SOFF_48 + SOVR_48 ) SL_TOT,
                         ( MOFF_12 + MOFF_24 + MOFF_48 + MOVR_48 ) ML_TOT
                  FROM (
                      SELECT ORG_YD_CD,
                             EOFF_12,
                             EOFF_24,
                             EOFF_48,
                             EOVR_48,
                             SOFF_12,
                             SOFF_24,
                             SOFF_48,
                             SOVR_48,
                             MOFF_12,
                             MOFF_24,
                             MOFF_48,
                             MOVR_48
                      FROM
                        (
                          SELECT ORG_YD_CD,
                                  EOFF_12,
                                 EOFF_24,
                                 EOFF_48,
                                 EOVR_48,
                                 SOFF_12,
                                 SOFF_24,
                                 SOFF_48,
                                 SOVR_48,
                                 MOFF_12,
                                 MOFF_24,
                                 MOFF_48,
                                 MOVR_48
                          FROM (
                              SELECT  ORG_YD_CD,
                                      SUM( EOFF_12 ) EOFF_12,
                                      SUM( EOFF_24 ) EOFF_24,
                                      SUM( EOFF_48 ) EOFF_48,
                                      SUM( EOVR_48 ) EOVR_48,
                                      SUM( SOFF_12 ) SOFF_12,
                                      SUM( SOFF_24 ) SOFF_24,
                                      SUM( SOFF_48 ) SOFF_48,
                                      SUM( SOVR_48 ) SOVR_48,
                                      SUM( MOFF_12 ) MOFF_12,
                                      SUM( MOFF_24 ) MOFF_24,
                                      SUM( MOFF_48 ) MOFF_48,
                                      SUM( MOVR_48 ) MOVR_48

                              FROM  (SELECT ORG_YD_CD,
                                                 CASE WHEN MVMT_INP_TP_CD='EDI' AND OFFSET_DT <= 0.5 THEN 1 ELSE 0 END EOFF_12,
                                                 CASE WHEN MVMT_INP_TP_CD='EDI' AND OFFSET_DT > 2      THEN 1 ELSE 0 END EOVR_48,
                                                 CASE WHEN MVMT_INP_TP_CD='EDI' AND OFFSET_DT > 0.5    AND OFFSET_DT <= 1 THEN 1 ELSE 0 END EOFF_24,
                                                 CASE WHEN MVMT_INP_TP_CD='EDI' AND OFFSET_DT > 1     AND OFFSET_DT <= 2 THEN 1 ELSE 0 END EOFF_48,
                                                 CASE WHEN MVMT_INP_TP_CD='SPP' AND OFFSET_DT <= 0.5 THEN 1 ELSE 0 END SOFF_12,
                                                 CASE WHEN MVMT_INP_TP_CD='SPP' AND OFFSET_DT > 2      THEN 1 ELSE 0 END SOVR_48,
                                                 CASE WHEN MVMT_INP_TP_CD='SPP' AND OFFSET_DT > 0.5    AND OFFSET_DT <= 1 THEN 1 ELSE 0 END SOFF_24,
                                                 CASE WHEN MVMT_INP_TP_CD='SPP' AND OFFSET_DT > 1     AND OFFSET_DT <= 2 THEN 1 ELSE 0 END SOFF_48,
                                                 CASE WHEN MVMT_INP_TP_CD='MAN' AND OFFSET_DT <= 0.5 THEN 1 ELSE 0 END MOFF_12,
                                                 CASE WHEN MVMT_INP_TP_CD='MAN' AND OFFSET_DT > 2      THEN 1 ELSE 0 END MOVR_48,
                                                 CASE WHEN MVMT_INP_TP_CD='MAN' AND OFFSET_DT > 0.5    AND OFFSET_DT <= 1 THEN 1 ELSE 0 END MOFF_24,
                                                 CASE WHEN MVMT_INP_TP_CD='MAN' AND OFFSET_DT > 1     AND OFFSET_DT <= 2 THEN 1 ELSE 0 END MOFF_48
                                 FROM (SELECT /*+ INDEX ( A XAK1CTM_MOVEMENT)*/ ORG_YD_CD, (CRE_LOCL_DT - CNMV_EVNT_DT) OFFSET_DT, MVMT_INP_TP_CD
                                         FROM CTM_MOVEMENT A
                                        #if (${rcc_cd} != 'ALL')
                                        WHERE SYS_AREA_GRP_ID = (SELECT SYS_AREA_GRP_ID FROM COM_SYS_AREA_GRP_ID WHERE CNT_CD = SUBSTR(@[rcc_cd],0,2) AND SUBSTR(SYS_AREA_GRP_ID,0,1) != 'D')
                                        #else
                                        WHERE SYS_AREA_GRP_ID IN ('USA', 'SWA', 'KOR', 'EUR', 'CHN' )
                                        #end
                                          AND CNMV_EVNT_DT BETWEEN TO_DATE (@[p_date1],'YYYY-MM-DD')
                                          AND TO_DATE (@[p_date2], 'YYYY-MM-DD') + 0.99999
                                          #if (${p_yard1} != '')
                                            #if (${p_yard2} != '')
                                          AND ORG_YD_CD = @[p_yard1] || @[p_yard2]
                                            #else
                                          AND ORG_YD_CD LIKE @[p_yard1] || '%'
                                            #end
                                          #end
                                          AND MVMT_INP_TP_CD  IN ('EDI','SPP','MAN')
                                          AND (NVL(MVMT_CRE_TP_CD, 'XX') = 'XX'
									           OR MVMT_CRE_TP_CD IN ('N', 'M', 'S', 'B'))
                                          #if (${dom_flg} == 'I')
                                          AND SUBSTR(MVMT_STS_CD,0,1) != 'C'
                                          #elseif (${dom_flg} == 'D')
                                          AND SUBSTR(MVMT_STS_CD,0,1) = 'C'
                                          #end
                                          #if (${sts_cd} != '')
                                          AND MVMT_STS_CD IN (${sts_cd})
                                          #end
                                          #if (${fcntr_flg} != '')
                                          AND FCNTR_FLG = @[fcntr_flg]
                                          #end
                                      )
                               )
                              GROUP BY ORG_YD_CD
                          )
                        )
                      ) CTM, MDM_LOCATION LOC, MDM_EQ_ORZ_CHT EQ
                  WHERE  LOC.SCC_CD = EQ.SCC_CD
                  AND  LOC.LOC_CD = SUBSTR(CTM.ORG_YD_CD, 0, 5)
            )
            GROUP BY RCC_CD, LCC_CD, CNT_CD, LOC_CD, ORG_YD_CD
      ) B
WHERE A.RCC_CD = B.RCC_CD(+)
  AND A.LCC_CD = B.LCC_CD(+)
  AND A.CNT_CD = B.CNT_CD(+)
  AND A.LOC_CD = B.LOC_CD(+)
  AND A.ORG_YD_CD = B.ORG_YD_CD(+)
  #if (${rcc_cd} != 'ALL')
  AND A.RCC_CD = @[rcc_cd]
  #end
  #if (${lcc_cd} != '')
  AND A.LCC_CD = @[lcc_cd]
  #end
  #if (${p_yard1} != '')
    #if (${p_yard2} != '')
  AND A.ORG_YD_CD = @[p_yard1] || @[p_yard2]
    #else
  AND A.ORG_YD_CD LIKE @[p_yard1] || '%'
    #end
  #end
GROUP BY
#if (${data_by} == '1')
        A.RCC_CD
#elseif (${data_by} == '2')
        A.RCC_CD, A.LCC_CD
#elseif (${data_by} == '5')
        A.RCC_CD, A.LCC_CD, A.CNT_CD
#elseif (${data_by} == '3')
        A.RCC_CD, A.LCC_CD, A.CNT_CD, A.LOC_CD
#elseif (${data_by} == '4')
        A.RCC_CD, A.LCC_CD, A.CNT_CD, A.LOC_CD, A.ORG_YD_CD
#end

ORDER BY
#if (${data_by} == '1')
        A.RCC_CD
#elseif (${data_by} == '2')
        A.RCC_CD, A.LCC_CD
#elseif (${data_by} == '5')
        A.RCC_CD, A.LCC_CD, A.CNT_CD
#elseif (${data_by} == '3')
        A.RCC_CD, A.LCC_CD, A.CNT_CD, A.LOC_CD
#elseif (${data_by} == '4')
        A.RCC_CD, A.LCC_CD, A.CNT_CD, A.LOC_CD, A.ORG_YD_CD
#end			]]></sql>
			<params>
				<param name="gap" type="12" value="" out="N"/>
				<param name="p_date1" type="12" value="" out="N"/>
				<param name="p_date2" type="12" value="" out="N"/>
				<param name="dom_flg" type="12" value="" out="N"/>
				<param name="data_by" type="12" value="" out="N"/>
				<param name="rcc_cd" type="12" value="" out="N"/>
				<param name="p_yard1" type="12" value="" out="N"/>
				<param name="p_yard2" type="12" value="" out="N"/>
				<param name="fcntr_flg" type="12" value="" out="N"/>
				<param name="lcc_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
