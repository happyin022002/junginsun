<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="CntrPlanMTRepoPlanDBDAOSearchMtyRepoPlanListRSQL">
			<desc><![CDATA[Mty Plan 조회]]></desc>
			<sql><![CDATA[
WITH VSL_HDR AS
(
    SELECT B.RCC_CD POL_RCC_CD
          ,B.LCC_CD POL_LCC_CD
          ,OFC.RCC_CD OFC_RCC_CD
          ,OFC.LCC_CD OFC_LCC_CD
          ,L.CONTI_CD POL_CONTI_CD
          ,HDR.SLAN_CD
          ,HDR.VSL_CD
          ,HDR.SKD_VOY_NO
          ,HDR.SKD_DIR_CD
          ,HDR.POL_CD
          ,HDR.POL_YD_CD 
          ,HDR.VPS_ETA_DT
          ,HDR.VPS_ETD_DT
          ,HDR.POD_CD
          ,HDR.POD_YD_CD
          ,HDR.POL_CLPT_SEQ
          ,HDR.POD_CLPT_SEQ
          ,HDR.EFF_ETA_DT 
          ,X.T_SLAN_CD
          ,X.TRD_CD
          ,X.SUB_TRD_CD
          ,X.RLANE_CD
          ,X.VSL_SLAN_DIR_CD
          ,X.FM_CONTI_CD

    FROM 
    (
        --------- VESSLE SKD - HEADER ---------
        SELECT A.SLAN_CD
              ,A.VSL_CD
              ,A.SKD_VOY_NO
              ,A.SKD_DIR_CD
              ,A.VPS_PORT_CD POL_CD
              ,A.YD_CD  POL_YD_CD
              ,A.VPS_ETA_DT
              ,A.VPS_ETD_DT
              ,B.VPS_PORT_CD POD_CD
              ,B.YD_CD POD_YD_CD
              ,A.CLPT_SEQ AS POL_CLPT_SEQ
              ,B.CLPT_SEQ AS POD_CLPT_SEQ
              ,(  -- 첫번째 PORT의 ETA DATE
                   SELECT TO_CHAR(MAX(V.VPS_ETA_DT),'YYYYMMDD') EFF_ETA_DT
                   FROM VSK_VSL_PORT_SKD V
                   WHERE 1=1
                   AND V.VSL_CD = A.VSL_CD
                   AND V.SKD_VOY_NO = A.SKD_VOY_NO
                   AND V.SKD_DIR_CD = A.SKD_DIR_CD
                   AND V.SLAN_CD = A.SLAN_CD
                   AND V.CLPT_SEQ = 1
                   AND V.CLPT_IND_SEQ = 1
              ) EFF_ETA_DT
        FROM 
        (  -- POL PORT
            SELECT A.SLAN_CD
                  ,A.VSL_CD
                  ,A.SKD_VOY_NO
                  ,A.SKD_DIR_CD
                  ,A.VPS_PORT_CD
                  ,A.CLPT_IND_SEQ
                  ,A.CLPT_SEQ
                  ,A.YD_CD
                  ,A.VPS_ETA_DT
                  ,A.VPS_ETD_DT
            FROM VSK_VSL_PORT_SKD A
                ,MDM_LOCATION     L
                ,MDM_EQ_ORZ_CHT   B
            WHERE VSL_CD     = SUBSTR(@[vvdRetrieveVal], 0, 4)
            AND   SKD_VOY_NO = SUBSTR(@[vvdRetrieveVal], 5, 4)
            AND   SKD_DIR_CD = SUBSTR(@[vvdRetrieveVal], 9, 1)
            AND   NVL(SKD_CNG_STS_CD,'X') <> 'S' -- SKIP 은 제찬
            AND   CLPT_IND_SEQ = 1
            AND   YD_CD NOT IN ('PAPACT1','EGSUZT1')
            AND   VPS_PORT_CD = L.LOC_CD
            AND   L.SCC_CD = B.SCC_CD
            AND   NVL(L.DELT_FLG,'N') <> 'Y'
            AND   NVL(B.DELT_FLG,'N') <> 'Y'
            -- 마지막 PORT 제외 로직(마지막은 POL 로 인정안함, 2013-12-12, 신용찬)
            AND   CLPT_SEQ <> (
                     SELECT MAX(X.CLPT_SEQ) FROM VSK_VSL_PORT_SKD X
                     WHERE X.VSL_CD     = A.VSL_CD
                     AND   X.SKD_VOY_NO = A.SKD_VOY_NO
                     AND   X.SKD_DIR_CD = A.SKD_DIR_CD
                  )  

			#if (${rcc_cd} != '') 
			AND B.RCC_CD = @[rcc_cd]
			#else 
			#end
			  
            #if (${loc_tp_cd_second} == 'L') 
			  #if (${loc_cd_second} != '') 
			AND B.LCC_CD = @[loc_cd_second]
			  #else 
			  #end
			#elseif (${loc_tp_cd_second} == 'E') 
			  #if (${loc_cd_second} != '') 
			AND B.ECC_CD = @[loc_cd_second]
			  #else 
			  #end
			#elseif (${loc_tp_cd_second} == 'S') 
			  #if (${loc_cd_second} != '') 
			AND B.SCC_CD = @[loc_cd_second]
			  #else 
			  #end
			#end              
		) A
        ,(
            -- POD PORT
            SELECT VSL_CD
                  ,SKD_VOY_NO
                  ,SKD_DIR_CD
                  ,VPS_PORT_CD
                  ,CLPT_IND_SEQ
                  ,CLPT_SEQ
                  ,YD_CD
                  ,VPS_ETA_DT
                  ,VPS_ETD_DT
            FROM VSK_VSL_PORT_SKD
            WHERE VSL_CD     = SUBSTR(@[vvdRetrieveVal], 0, 4)
            AND   SKD_VOY_NO = SUBSTR(@[vvdRetrieveVal], 5, 4)
            AND   SKD_DIR_CD = SUBSTR(@[vvdRetrieveVal], 9, 1)
            AND   NVL(SKD_CNG_STS_CD,'X') <> 'S' -- SKIP 은 제외
            AND   CLPT_IND_SEQ = 1
            AND   YD_CD NOT IN ('PAPACT1','EGSUZT1')
        ) B
        WHERE A.CLPT_SEQ <= B.CLPT_SEQ
    ) HDR
    ,MDM_LOCATION L
    ,MDM_EQ_ORZ_CHT B
    ,(
        SELECT A.SLAN_CD   T_SLAN_CD
              ,A.TRD_CD
              ,B.SUB_TRD_CD
              ,A.RLANE_CD
              ,A.DIR_CD    VSL_SLAN_DIR_CD
              ,A.CONTI_CD  FM_CONTI_CD
        FROM
        (
            SELECT TRD_CD
                  ,RLANE_CD
                  ,SLAN_CD
                  ,LST_LODG_PORT_CD
                  ,(SELECT X.CONTI_CD FROM MDM_LOCATION X WHERE X.LOC_CD = LST_LODG_PORT_CD) CONTI_CD
                  ,IOC_CD
                  ,VSL_CD
                  ,SKD_VOY_NO
                  ,DIR_CD    
            FROM 
            (
                SELECT * FROM MAS_MON_VVD
                        WHERE VSL_CD     = SUBSTR(@[vvdRetrieveVal], 0, 4)
                        AND   SKD_VOY_NO = SUBSTR(@[vvdRetrieveVal], 5, 4)
                        AND   DIR_CD     = SUBSTR(@[vvdRetrieveVal], 9, 1)
                        AND   DELT_FLG   = 'N'
                ORDER BY LST_LODG_PORT_ETD_DT ASC, IOC_CD DESC  -- 가장먼저 출발하는 대륙의 PORT 검색, 동일 ETD DATE 인 경우 IOC 는 O 부터 추출
            )
            WHERE ROWNUM=1
        ) A
        ,MDM_DTL_REV_LANE B
        
        WHERE A.RLANE_CD = B.RLANE_CD
        AND   A.DIR_CD   = B.VSL_SLAN_DIR_CD
        AND   A.IOC_CD   = B.IOC_CD
        AND   A.TRD_CD   = B.TRD_CD
        AND   ROWNUM=1
    ) X
   ,(    -- PLAN 수정가능한 ROW 선택 로직에 필요
         SELECT RCC_CD 
               ,LCC_CD
         FROM MDM_EQ_ORZ_CHT A
             ,MDM_LOCATION   B
             ,(
                  SELECT LOC_CD 
                  FROM MDM_ORGANIZATION
                  WHERE OFC_CD = @[ofc_cd] -- LOGIN OFC CODE
              ) C
         WHERE A.SCC_CD = B.SCC_CD
         AND   B.LOC_CD = C.LOC_CD
         AND   ROWNUM=1          
    ) OFC  
    
    WHERE 1=1
    --AND HDR.SLAN_CD    = X.T_SLAN_CD
    --AND HDR.SKD_DIR_CD = X.VSL_SLAN_DIR_CD
    AND HDR.POL_CD     = L.LOC_CD
    AND L.SCC_CD       = B.SCC_CD
    AND NVL(L.DELT_FLG,'N') <> 'Y'
    AND NVL(B.DELT_FLG,'N') <> 'Y'

    #if (${rcc_cd} != '') 
    AND B.RCC_CD = @[rcc_cd]
    #else 
    #end
    #if (${loc_tp_cd_second} == 'L') 
    #if (${loc_cd_second} != '') 
    AND B.LCC_CD = @[loc_cd_second]
    #else 
    #end
    #elseif (${loc_tp_cd_second} == 'E') 
    #if (${loc_cd_second} != '') 
    AND B.ECC_CD = @[loc_cd_second]
    #else 
    #end
    #elseif (${loc_tp_cd_second} == 'S') 
    #if (${loc_cd_second} != '') 
    AND B.SCC_CD = @[loc_cd_second]
    #else 
    #end
    #end    
    
    ORDER BY POL_CLPT_SEQ
            ,POD_CLPT_SEQ
)


SELECT
     R.IBFLAG
    ,R.RNK
    ,R.MTY_VVD_CD
    ,R.TRD_CD
    ,R.SUB_TRD_CD
    ,R.SLAN_CD
    ,R.VVD_CD
    ,R.POL_YD_CD
    ,R.POL_RCC_CD
    ,R.POL_LCC_CD
    ,R.OFC_RCC_CD
    ,R.OFC_LCC_CD
    ,R.POL_CONTI_CD
    ,R.GL_RCC_CD
    ,R.ETA_DT
    ,R.ETD_DT
    ,R.FNL_CBF_DT
    ,R.FNL_CBF_FLG
    ,R.FNL_CBF_FLG2
    ,CASE
	WHEN R.POD_YD_CD='+'
	THEN NVL((
            SELECT (
                      SELECT NVL(MAX(DECODE(B.STUP_FLG, 'Y', DECODE(A.PORT_BSA_CAPA, 0, NULL, A.PORT_BSA_CAPA))), C.CRR_BSA_CAPA) BSA
                        FROM BSA_VVD_PORT_DWN A,
                             MAS_LANE_RGST    B
                       WHERE B.RLANE_CD        = C.RLANE_CD
                         AND B.TRD_CD          = C.TRD_CD
                         AND B.DIR_CD          = C.SKD_DIR_CD
                         AND A.TRD_CD      (+) = C.TRD_CD
                         AND A.RLANE_CD    (+) = C.RLANE_CD
                         AND A.VSL_CD      (+) = C.VSL_CD
                         AND A.SKD_VOY_NO  (+) = C.SKD_VOY_NO
                         AND A.SKD_DIR_CD  (+) = C.SKD_DIR_CD
                         AND A.BSA_OP_JB_CD(+) = DECODE('1', '1', '007', '016')
                         AND A.CRR_CD      (+) = C.CRR_CD
                         AND A.PORT_CD     (+) = R.POL_YD_CD
                   ) AS BSA
              FROM BSA_VVD_OTR_CRR C
             WHERE C.TRD_CD       = R.TRD_CD
		       AND C.RLANE_CD     = R.SLAN_CD||SUBSTR(R.TRD_CD,1,2)
               AND C.VSL_CD       = SUBSTR(@[vvdRetrieveVal], 0, 4)
               AND C.SKD_VOY_NO   = SUBSTR(@[vvdRetrieveVal], 5, 4)
               AND C.SKD_DIR_CD   = SUBSTR(@[vvdRetrieveVal], 9, 1)
               AND C.BSA_OP_JB_CD = DECODE('1', '1', '007', '009')
               AND C.CRR_CD       = 'SML'  
			   AND ROWNUM = 1     
        ),0)
        -
        NVL((
            SELECT 
                DECODE('1', '1', S.BKG_OBRD_TTL_TEU_QTY, S.BKG_OBRD_TTL_WGT)
            FROM EQR_CTRL_FULL_LOD_SNAP S
            WHERE 1=1
            AND S.VSL_CD        = SUBSTR(@[vvdRetrieveVal], 0, 4)
            AND S.SKD_VOY_NO    = SUBSTR(@[vvdRetrieveVal], 5, 4)
            AND S.SKD_DIR_CD    = SUBSTR(@[vvdRetrieveVal], 9, 1)
            AND S.POL_YD_CD     = R.POL_YD_CD
			AND S.CLPT_SEQ      = R.POL_CLPT_SEQ
        ),0)
	ELSE TO_NUMBER('')
	END  AVL_TEU
	,CASE
	WHEN R.POD_YD_CD='+'
	THEN NVL((
            SELECT (
                      SELECT NVL(MAX(DECODE(B.STUP_FLG, 'Y', DECODE(A.PORT_BSA_CAPA, 0, NULL, A.PORT_BSA_CAPA))), C.CRR_BSA_CAPA) BSA
                        FROM BSA_VVD_PORT_DWN A,
                             MAS_LANE_RGST    B
                       WHERE B.RLANE_CD        = C.RLANE_CD
                         AND B.TRD_CD          = C.TRD_CD
                         AND B.DIR_CD          = C.SKD_DIR_CD
                         AND A.TRD_CD      (+) = C.TRD_CD
                         AND A.RLANE_CD    (+) = C.RLANE_CD
                         AND A.VSL_CD      (+) = C.VSL_CD
                         AND A.SKD_VOY_NO  (+) = C.SKD_VOY_NO
                         AND A.SKD_DIR_CD  (+) = C.SKD_DIR_CD
                         AND A.BSA_OP_JB_CD(+) = DECODE('2', '1', '007', '016')
                         AND A.CRR_CD      (+) = C.CRR_CD
                         AND A.PORT_CD     (+) = R.POL_YD_CD
                   ) AS BSA
              FROM BSA_VVD_OTR_CRR C
             WHERE C.TRD_CD       = R.TRD_CD
		       AND C.RLANE_CD     = R.SLAN_CD||SUBSTR(R.TRD_CD,1,2)
               AND C.VSL_CD       = SUBSTR(@[vvdRetrieveVal], 0, 4)
               AND C.SKD_VOY_NO   = SUBSTR(@[vvdRetrieveVal], 5, 4)
               AND C.SKD_DIR_CD   = SUBSTR(@[vvdRetrieveVal], 9, 1)
               AND C.BSA_OP_JB_CD = DECODE('2', '1', '007', '009')
               AND C.CRR_CD       = 'SML'   
			   AND ROWNUM = 1    
        ),0)
        -
        NVL((
            SELECT 
                DECODE('1', '1', BKG_OBRD_TTL_TEU_QTY, S.BKG_OBRD_TTL_WGT)
            FROM EQR_CTRL_FULL_LOD_SNAP S
            WHERE 1=1
            AND S.VSL_CD        = SUBSTR(@[vvdRetrieveVal], 0, 4)
            AND S.SKD_VOY_NO    = SUBSTR(@[vvdRetrieveVal], 5, 4)
            AND S.SKD_DIR_CD    = SUBSTR(@[vvdRetrieveVal], 9, 1)
            AND S.POL_YD_CD     = R.POL_YD_CD
			AND S.CLPT_SEQ      = R.POL_CLPT_SEQ
        ),0)
	ELSE TO_NUMBER('')
	END  AVL_TON
    ,R.MTY_PLN_TEU
    ,R.MTY_PLN_TON
    ,R.MTY_LODG_PLN_TEU
    ,R.MTY_LODG_PLN_TON
    ,R.MTY_LODG_D2
    ,R.MTY_LODG_D4
    ,R.MTY_LODG_D5
    ,R.MTY_LODG_D7
    ,R.MTY_LODG_R2
    ,R.MTY_LODG_R5
    ,R.MTY_LODG_R9
    ,R.MTY_LODG_O2
    ,R.MTY_LODG_O4
    ,R.MTY_LODG_S2
    ,R.MTY_LODG_S4
    ,R.MTY_LODG_F2
    ,R.MTY_LODG_F4
    ,R.MTY_LODG_F5
    ,R.MTY_LODG_A2
    ,R.MTY_LODG_A4
    ,R.MTY_LODG_A5
    ,R.MTY_PLN_SHW_FLG
    ,R.POD_YD_CD 
    ,R.LVL
    ,R.POD_YD_CD2
    ,R.GL_POD_FLG
    ,R.GL_QTY_D2
    ,R.GL_UT_D2
    ,R.GL_QTY_D4
    ,R.GL_UT_D4
    ,R.GL_QTY_D5
    ,R.GL_UT_D5
    ,R.GL_QTY_D7
    ,R.GL_UT_D7
    ,R.GL_QTY_R2
    ,R.GL_UT_R2
    ,R.GL_QTY_R5
    ,R.GL_UT_R5
    ,R.GL_QTY_R9
    ,R.GL_UT_R9
    ,R.GL_QTY_O2
    ,R.GL_UT_O2
    ,R.GL_QTY_O4
    ,R.GL_UT_O4
    ,R.GL_QTY_S2
    ,R.GL_UT_S2
    ,R.GL_QTY_S4
    ,R.GL_UT_S4
    ,R.GL_QTY_F2
    ,R.GL_UT_F2
    ,R.GL_QTY_F4
    ,R.GL_UT_F4
    ,R.GL_QTY_F5
    ,R.GL_UT_F5
    ,R.GL_QTY_A2
    ,R.GL_UT_A2
    ,R.GL_QTY_A4
    ,R.GL_UT_A4
    ,R.GL_QTY_A5
    ,R.GL_UT_A5
    ,R.REPO_GLINE_RMK
    ,R.MTY_BKG_TEU
    ,R.MTY_BKG_QTY
    ,R.MTY_BKG_D2
    ,R.MTY_BKG_D4
    ,R.MTY_BKG_D5
    ,R.MTY_BKG_D7
    ,R.MTY_BKG_R2
    ,R.MTY_BKG_R5
    ,R.MTY_BKG_R9
    ,R.MTY_BKG_O2
    ,R.MTY_BKG_O4
    ,R.MTY_BKG_S2
    ,R.MTY_BKG_S4
    ,R.MTY_BKG_F2
    ,R.MTY_BKG_F4
    ,R.MTY_BKG_F5
    ,R.MTY_BKG_A2
    ,R.MTY_BKG_A4
    ,R.MTY_BKG_A5
    ,R.PLN_RSN_HDR_CD
    ,R.PLN_RSN_SUB_CD
    ,R.PLN_RSN_RMK
    ,R.POL_CD
    ,R.POD_CD
    ,R.VSL_CD
    ,R.SKD_VOY_NO
    ,R.SKD_DIR_CD
    ,R.POL_CLPT_SEQ
    ,R.POD_CLPT_SEQ
    ,R.CRE_OFC_CD
    ,R.CRE_CONTI_CD
    ,R.ETA_PAST_FLG -- ETA가 DB의 SYSDATE 이전인가
    ,R.ETD_PAST_FLG -- ETD가 DB의 SYSDATE 이전인가
    ,NVL((
        SELECT MAX(S.ALOC_HC_CALC_QTY) ALOC_HC_CALC_QTY
        FROM SPC_LANE_RGST S
        WHERE 1=1
        AND S.REP_TRD_CD = R.TRD_CD
        AND S.SUB_TRD_CD = R.SUB_TRD_CD
        AND S.RLANE_CD = R.SLAN_CD||SUBSTR(R.TRD_CD,1,2)
        AND S.DIR_CD = SUBSTR(R.VVD_CD,9)
        AND SYSDATE BETWEEN TO_DATE(S.EFF_FM_DT,'YYYYMMDD') AND TO_DATE(S.EFF_TO_DT,'YYYYMMDD')
    ),'2') ALOC_HC_CALC_QTY
    ,NVL((
        SELECT MAX(S.ALOC_45FT_CALC_QTY) ALOC_45FT_CALC_QTY
        FROM SPC_LANE_RGST S
        WHERE 1=1
        AND S.REP_TRD_CD = R.TRD_CD
        AND S.SUB_TRD_CD = R.SUB_TRD_CD
        AND S.RLANE_CD = R.SLAN_CD||SUBSTR(R.TRD_CD,1,2)
        AND S.DIR_CD = SUBSTR(R.VVD_CD,9)
        AND SYSDATE BETWEEN TO_DATE(S.EFF_FM_DT,'YYYYMMDD') AND TO_DATE(S.EFF_TO_DT,'YYYYMMDD')
    ),'2') ALOC_45FT_CALC_QTY
    ,R.EFF_ETA_DT
FROM (
    SELECT
        CASE
        WHEN MTY.VSL_CD IS NULL
        THEN 'I'
        ELSE ''
        END IBFLAG
        ,DENSE_RANK() OVER (PARTITION BY HDR.VSL_CD,HDR.SKD_VOY_NO,HDR.SKD_DIR_CD ORDER BY HDR.TRD_CD,HDR.SUB_TRD_CD) RNK
        ,MTY.VSL_CD||MTY.SKD_VOY_NO||MTY.SKD_DIR_CD MTY_VVD_CD
        ,NVL(HDR.TRD_CD,' ') TRD_CD
        ,NVL(HDR.SUB_TRD_CD,' ') SUB_TRD_CD
        ,HDR.SLAN_CD
        ,HDR.VSL_CD||HDR.SKD_VOY_NO||HDR.SKD_DIR_CD VVD_CD
        ,HDR.POL_YD_CD
        ,HDR.POL_RCC_CD
        ,HDR.POL_LCC_CD
        ,HDR.OFC_RCC_CD
        ,HDR.OFC_LCC_CD
        ,GL.GL_RCC_CD
        ,HDR.POL_CONTI_CD
        ,TO_CHAR(HDR.VPS_ETA_DT,'MM/DD HH24:MI') AS ETA_DT
        ,TO_CHAR(HDR.VPS_ETD_DT,'MM/DD HH24:MI') AS ETD_DT
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN TO_CHAR(MTY.FNL_CBF_DT,'YYYY/MM/DD') -- 요구사항변경 'MM/DD HH24:MI' -> 'YYYY/MM/DD'
        ELSE ''
        END FNL_CBF_DT
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN NVL(DECODE(MTY.FNL_CBF_FLG,'Y','1','0'),'0')
        ELSE ''
        END FNL_CBF_FLG
        , NVL(DECODE(MTY.FNL_CBF_FLG,'Y','1','0'),'0') FNL_CBF_FLG2
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN MTY.LODG_TEU
        ELSE TO_NUMBER('')
        END MTY_PLN_TEU
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN MTY.LODG_TEU*2.2
        ELSE TO_NUMBER('')
        END MTY_PLN_TON
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN (MTY.GRP_LODG_D2 + 2*(MTY.GRP_LODG_D4 + MTY.GRP_LODG_D5 + MTY.GRP_LODG_D7 + MTY.GRP_LODG_R2 + MTY.GRP_LODG_R5 + MTY.GRP_LODG_R9 + MTY.GRP_LODG_O2 + MTY.GRP_LODG_O4 + MTY.GRP_LODG_S2 + MTY.GRP_LODG_S4 + MTY.GRP_LODG_F2 + MTY.GRP_LODG_F4 + MTY.GRP_LODG_F5 + MTY.GRP_LODG_A2 + MTY.GRP_LODG_A4 + MTY.GRP_LODG_A5))
        ELSE TO_NUMBER('')
        END MTY_LODG_PLN_TEU
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN (MTY.GRP_LODG_D2 + MTY.GRP_LODG_D4 + MTY.GRP_LODG_D5 + MTY.GRP_LODG_D7 + MTY.GRP_LODG_R2 + MTY.GRP_LODG_R5 + MTY.GRP_LODG_R9 + MTY.GRP_LODG_O2 + MTY.GRP_LODG_O4 + MTY.GRP_LODG_S2 + MTY.GRP_LODG_S4 + MTY.GRP_LODG_F2 + MTY.GRP_LODG_F4 + MTY.GRP_LODG_F5 + MTY.GRP_LODG_A2 + MTY.GRP_LODG_A4 + MTY.GRP_LODG_A5)
        ELSE TO_NUMBER('')
        END MTY_LODG_PLN_TON
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_D2
        ELSE DECODE(NVL(MTY.LODG_D2,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_D2,TO_NUMBER('')))
        END MTY_LODG_D2
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_D4
        ELSE DECODE(NVL(MTY.LODG_D4,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_D4,TO_NUMBER('')))
        END MTY_LODG_D4
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_D5
        ELSE DECODE(NVL(MTY.LODG_D5,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_D5,TO_NUMBER('')))
        END MTY_LODG_D5
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_D7
        ELSE DECODE(NVL(MTY.LODG_D7,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_D7,TO_NUMBER('')))
        END MTY_LODG_D7
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_R2
        ELSE DECODE(NVL(MTY.LODG_R2,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_R2,TO_NUMBER('')))
        END MTY_LODG_R2
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_R5
        ELSE DECODE(NVL(MTY.LODG_R5,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_R5,TO_NUMBER('')))
        END MTY_LODG_R5
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_R9
        ELSE DECODE(NVL(MTY.LODG_R9,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_R9,TO_NUMBER('')))
        END MTY_LODG_R9
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_O2
        ELSE DECODE(NVL(MTY.LODG_O2,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_O2,TO_NUMBER('')))
        END MTY_LODG_O2
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_O4
        ELSE DECODE(NVL(MTY.LODG_O4,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_O4,TO_NUMBER('')))
        END MTY_LODG_O4
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_S2
        ELSE DECODE(NVL(MTY.LODG_S2,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_S2,TO_NUMBER('')))
        END MTY_LODG_S2
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_S4
        ELSE DECODE(NVL(MTY.LODG_S4,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_S4,TO_NUMBER('')))
        END MTY_LODG_S4
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_F2
        ELSE DECODE(NVL(MTY.LODG_F2,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_F2,TO_NUMBER('')))
        END MTY_LODG_F2
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_F4
        ELSE DECODE(NVL(MTY.LODG_F4,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_F4,TO_NUMBER('')))
        END MTY_LODG_F4
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_F5
        ELSE DECODE(NVL(MTY.LODG_F5,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_F5,TO_NUMBER('')))
        END MTY_LODG_F5
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_A2
        ELSE DECODE(NVL(MTY.LODG_A2,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_A2,TO_NUMBER('')))
        END MTY_LODG_A2
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_A4
        ELSE DECODE(NVL(MTY.LODG_A4,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_A4,TO_NUMBER('')))
        END MTY_LODG_A4
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN GRP_LODG_A5
        ELSE DECODE(NVL(MTY.LODG_A5,TO_NUMBER('')),'0',TO_NUMBER(''),NVL(MTY.LODG_A5,TO_NUMBER('')))
        END MTY_LODG_A5
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN ''
        ELSE NVL(DECODE(MTY.MTY_PLN_SHW_FLG,'Y','1','0'),'0')
        END MTY_PLN_SHW_FLG
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN '+'
        ELSE HDR.POD_YD_CD
        END POD_YD_CD
        ,CASE
        WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD
        THEN '0'
        ELSE '1'
        END LVL
        ,HDR.POD_YD_CD POD_YD_CD2
        ,CASE
        WHEN GL.POD_CD = HDR.POD_CD
        THEN 'T'
        ELSE 'F'
        END AS GL_POD_FLG
        ,CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_D2 IS NOT NULL
        THEN GL.GL_PRIO_D2||' / '||DECODE(GL.GL_TP_D2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_D2,''))
        ELSE DECODE(GL.GL_TP_D2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_D2,''))
        END GL_QTY_D2 ,
        GL.GL_TP_D2 GL_UT_D2 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_D4 IS NOT NULL
        THEN GL.GL_PRIO_D4||' / '||DECODE(GL.GL_TP_D4, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_D4,''))
        ELSE DECODE(GL.GL_TP_D4, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_D4,''))
        END GL_QTY_D4 ,
        GL.GL_TP_D4 GL_UT_D4 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_D5 IS NOT NULL
        THEN GL.GL_PRIO_D5||' / '||DECODE(GL.GL_TP_D5, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_D5,''))
        ELSE DECODE(GL.GL_TP_D5, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_D5,''))
        END GL_QTY_D5 ,
        GL.GL_TP_D5 GL_UT_D5 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_D7 IS NOT NULL
        THEN GL.GL_PRIO_D7||' / '||DECODE(GL.GL_TP_D7, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_D7,''))
        ELSE DECODE(GL.GL_TP_D7, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_D7,''))
        END GL_QTY_D7 ,
        GL.GL_TP_D7 GL_UT_D7 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_R2 IS NOT NULL
        THEN GL.GL_PRIO_R2||' / '||DECODE(GL.GL_TP_R2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_R2,''))
        ELSE DECODE(GL.GL_TP_R2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_R2,''))
        END GL_QTY_R2 ,
        GL.GL_TP_R2 GL_UT_R2 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_R5 IS NOT NULL
        THEN GL.GL_PRIO_R5||' / '||DECODE(GL.GL_TP_R5, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_R5,''))
        ELSE DECODE(GL.GL_TP_R5, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_R5,''))
        END GL_QTY_R5 ,
        GL.GL_TP_R5 GL_UT_R5 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_R9 IS NOT NULL
        THEN GL.GL_PRIO_R9||' / '||DECODE(GL.GL_TP_R9, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_R9,''))
        ELSE DECODE(GL.GL_TP_R9, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_R9,''))
        END GL_QTY_R9 ,
        GL.GL_TP_R9 GL_UT_R9 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_O2 IS NOT NULL
        THEN GL.GL_PRIO_O2||'  /'||DECODE(GL.GL_TP_O2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_O2,''))
        ELSE DECODE(GL.GL_TP_O2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_O2,''))
        END GL_QTY_O2 ,
        GL.GL_TP_O2 GL_UT_O2 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_O4 IS NOT NULL
        THEN GL.GL_PRIO_O4||' / '||DECODE(GL.GL_TP_O4, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_O4,''))
        ELSE DECODE(GL.GL_TP_O4, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_O4,''))
        END GL_QTY_O4 ,
        GL.GL_TP_O4 GL_UT_O4 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_S2 IS NOT NULL
        THEN GL.GL_PRIO_S2||' / '||DECODE(GL.GL_TP_S2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_S2,''))
        ELSE DECODE(GL.GL_TP_S2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_S2,''))
        END GL_QTY_S2 ,
        GL.GL_TP_S2 GL_UT_S2 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_S4 IS NOT NULL
        THEN GL.GL_PRIO_S4||' / '||DECODE(GL.GL_TP_S4, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_S4,''))
        ELSE DECODE(GL.GL_TP_S4, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_S4,''))
        END GL_QTY_S4 ,
        GL.GL_TP_S4 GL_UT_S4 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_F2 IS NOT NULL
        THEN GL.GL_PRIO_F2||' / '||DECODE(GL.GL_TP_F2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_F2,''))
        ELSE DECODE(GL.GL_TP_F2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_F2,''))
        END GL_QTY_F2 ,
        GL.GL_TP_F2 GL_UT_F2 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_F4 IS NOT NULL
        THEN GL.GL_PRIO_F4||' / '||DECODE(GL.GL_TP_F4, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_F4,''))
        ELSE DECODE(GL.GL_TP_F4, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_F4,''))
        END GL_QTY_F4 ,
        GL.GL_TP_F4 GL_UT_F4 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_F5 IS NOT NULL
        THEN GL.GL_PRIO_F5||' / '||DECODE(GL.GL_TP_F5, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_F5,''))
        ELSE DECODE(GL.GL_TP_F5, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_F5,''))
        END GL_QTY_F5 ,
        GL.GL_TP_F5 GL_UT_F5 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_A2 IS NOT NULL
        THEN GL.GL_PRIO_A2||' / '||DECODE(GL.GL_TP_A2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_A2,''))
        ELSE DECODE(GL.GL_TP_A2, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_A2,''))
        END GL_QTY_A2 ,
        GL.GL_TP_A2 GL_UT_A2 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_A4 IS NOT NULL
        THEN GL.GL_PRIO_A4||' / '||DECODE(GL.GL_TP_A4, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_A4,''))
        ELSE DECODE(GL.GL_TP_A4, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_A4,''))
        END GL_QTY_A4 ,
        GL.GL_TP_A4 GL_UT_A4 ,
        CASE
        WHEN PRIO_CHK IS NOT NULL AND PRIO_CHK = 'X' AND GL.GL_TP_A5 IS NOT NULL
        THEN GL.GL_PRIO_A5||' / '||DECODE(GL.GL_TP_A5, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_A5,''))
        ELSE DECODE(GL.GL_TP_A5, NULL, '', '', '', 'R','', ''||NVL(GL.GL_VAL_A5,''))
        END GL_QTY_A5 ,
        GL.GL_TP_A5 GL_UT_A5
        ,GL.REPO_GLINE_RMK
        ,BKG.MTY_BKG_TEU
        ,BKG.MTY_BKG_QTY
        ,BKG.MTY_BKG_D2_QTY MTY_BKG_D2
        ,BKG.MTY_BKG_D4_QTY MTY_BKG_D4
        ,BKG.MTY_BKG_D5_QTY MTY_BKG_D5
        ,BKG.MTY_BKG_D7_QTY MTY_BKG_D7
        ,BKG.MTY_BKG_R2_QTY MTY_BKG_R2
        ,BKG.MTY_BKG_R5_QTY MTY_BKG_R5
        ,BKG.MTY_BKG_R9_QTY MTY_BKG_R9
        ,BKG.MTY_BKG_O2_QTY MTY_BKG_O2
        ,BKG.MTY_BKG_O4_QTY MTY_BKG_O4
        ,BKG.MTY_BKG_S2_QTY MTY_BKG_S2
        ,BKG.MTY_BKG_S4_QTY MTY_BKG_S4
        ,BKG.MTY_BKG_F2_QTY MTY_BKG_F2
        ,BKG.MTY_BKG_F4_QTY MTY_BKG_F4
        ,BKG.MTY_BKG_F5_QTY MTY_BKG_F5
        ,BKG.MTY_BKG_A2_QTY MTY_BKG_A2
        ,BKG.MTY_BKG_A4_QTY MTY_BKG_A4
        ,BKG.MTY_BKG_A5_QTY MTY_BKG_A5
        ,MTY.PLN_RSN_HDR_CD
        ,MTY.PLN_RSN_HDR_CD||MTY.PLN_RSN_SUB_CD PLN_RSN_SUB_CD
        ,MTY.PLN_RSN_RMK
        --,CASE
        -- WHEN HDR.POL_CLPT_SEQ = HDR.POD_CLPT_SEQ
        -- THEN '1'
        -- ELSE '2'
        -- END AS POL_FLG
        ,HDR.POL_CD
        ,HDR.POD_CD
        ,HDR.VSL_CD
        ,HDR.SKD_VOY_NO
        ,HDR.SKD_DIR_CD
        ,HDR.POL_CLPT_SEQ
        ,HDR.POD_CLPT_SEQ
        ,MTY.CRE_OFC_CD
        ,MTY.CONTI_CD CRE_CONTI_CD
        ,CASE WHEN HDR.VPS_ETA_DT < GLOBALDATE_PKG.TIME_LOCAL_FNC(SUBSTR(HDR.POL_CD,1,5)) THEN 'Y' ELSE 'N' END AS ETA_PAST_FLG -- ETA가 DB의 SYSDATE 이전인가
        ,CASE WHEN HDR.VPS_ETD_DT < GLOBALDATE_PKG.TIME_LOCAL_FNC(SUBSTR(HDR.POL_CD,1,5)) THEN 'Y' ELSE 'N' END AS ETD_PAST_FLG -- ETD가 DB의 SYSDATE 이전인가
        ,HDR.EFF_ETA_DT
    FROM VSL_HDR HDR
    ,(  ------- MTY LOADING PLAN ---------
        SELECT 
            PLN.TRD_CD
            ,PLN.SUB_TRD_CD
            ,PLN.VSL_LANE_CD
            ,PLN.VSL_CD
            ,PLN.SKD_VOY_NO
            ,PLN.SKD_DIR_CD
            --,PLN.VSL_CD||PLN.SKD_VOY_NO||PLN.SKD_DIR_CD VVD_CD
            ,PLN.LODG_TEU
            ,PLN.LODG_TON
            ,PLN.POL_YD_CD
            ,PLN.POD_YD_CD
            ,PLN.FNL_CBF_DT
            ,PLN.FNL_CBF_FLG
            ,MAX(PLN.MTY_PLN_SHW_FLG) MTY_PLN_SHW_FLG
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'D2',CNTR_QTY,'')))) LODG_D2
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'D4',CNTR_QTY,'')))) LODG_D4
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'D5',CNTR_QTY,'')))) LODG_D5
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'D7',CNTR_QTY,'')))) LODG_D7
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'R2',CNTR_QTY,'')))) LODG_R2
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'R5',CNTR_QTY,'')))) LODG_R5
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'R9',CNTR_QTY,'')))) LODG_R9
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'O2',CNTR_QTY,'')))) LODG_O2
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'O4',CNTR_QTY,'')))) LODG_O4
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'S2',CNTR_QTY,'')))) LODG_S2
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'S4',CNTR_QTY,'')))) LODG_S4
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'F2',CNTR_QTY,'')))) LODG_F2
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'F4',CNTR_QTY,'')))) LODG_F4
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'F5',CNTR_QTY,'')))) LODG_F5
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'A2',CNTR_QTY,'')))) LODG_A2
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'A4',CNTR_QTY,'')))) LODG_A4
            ,SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'A5',CNTR_QTY,'')))) LODG_A5
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'D2',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_D2
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'D4',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_D4
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'D5',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_D5
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'D7',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_D7
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'R2',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_R2
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'R5',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_R5
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'R9',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_R9
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'O2',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_O2
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'O4',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_O4
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'S2',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_S2
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'S4',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_S4
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'F2',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_F2
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'F4',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_F4
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'F5',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_F5
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'A2',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_A2
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'A4',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_A4
            ,SUM(SUM(DECODE(CNTR_TPSZ_CD,'','',NULL,'',(DECODE(CNTR_TPSZ_CD,'A5',CNTR_QTY,''))))) OVER (PARTITION BY PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD,PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.POL_YD_CD) GRP_LODG_A5
            ,MAX(PLN.PLN_RSN_RMK) PLN_RSN_RMK
            ,MAX(PLN.PLN_RSN_HDR_CD) PLN_RSN_HDR_CD
            ,MAX(PLN.PLN_RSN_SUB_CD) PLN_RSN_SUB_CD
            ,MAX(U.OFC_CD) CRE_OFC_CD
            ,MAX(C.CONTI_CD) CONTI_CD
        FROM (SELECT
                LODG.TRD_CD
                ,LODG.SUB_TRD_CD
                ,LODG.VSL_LANE_CD
                ,LODG.MTY_LODG_PLN_TEU_QTY LODG_TEU
                ,LODG.MTY_LODG_PLN_TON_WGT LODG_TON
                ,LODG.POL_YD_CD
                ,LODG.POL_YD_CD   POD_YD_CD
                ,LODG.FNL_CBF_DT
                ,LODG.FNL_CBF_FLG
                ,'' MTY_PLN_SHW_FLG
                ,'' CNTR_TPSZ_CD
                ,0 CNTR_QTY
                ,LODG.PLN_RSN_RMK
                ,RSN.PLN_RSN_HDR_CD
                ,RSN.PLN_RSN_SUB_CD
                ,LODG.VSL_CD
                ,LODG.SKD_VOY_NO
                ,LODG.SKD_DIR_CD
                ,LODG.CRE_USR_ID
            FROM EQR_CTRL_MTY_LODG_PLN LODG, EQR_CTRL_PLN_RSN_SUB RSN
            WHERE LODG.PLN_RSN_HDR_CD = RSN.PLN_RSN_HDR_CD(+)
            AND LODG.PLN_RSN_SUB_CD = RSN.PLN_RSN_SUB_CD(+)
            AND VSL_CD     = SUBSTR(@[vvdRetrieveVal], 0, 4)
            AND SKD_VOY_NO = SUBSTR(@[vvdRetrieveVal], 5, 4)
            AND SKD_DIR_CD = SUBSTR(@[vvdRetrieveVal], 9, 1)
            UNION ALL
            -- DISCHARGING POD
            SELECT 
                LODG.TRD_CD
                ,LODG.SUB_TRD_CD
                ,LODG.VSL_LANE_CD
                ,LODG.MTY_LODG_PLN_TEU_QTY LODG_TEU
                ,LODG.MTY_LODG_PLN_TON_WGT LODG_TON
                ,LODG.POL_YD_CD
                ,DCHG.POD_YD_CD
                ,LODG.FNL_CBF_DT
                ,LODG.FNL_CBF_FLG
                ,DCHG.MTY_PLN_SHW_FLG
                ,QTY.CNTR_TPSZ_CD
                ,CNTR_QTY
                ,'' PLN_RSN_RMK
                ,'' PLN_RSN_HDR_CD
                ,'' PLN_RSN_SUB_CD
                ,LODG.VSL_CD
                ,LODG.SKD_VOY_NO
                ,LODG.SKD_DIR_CD
                ,LODG.CRE_USR_ID
            FROM EQR_CTRL_MTY_LODG_PLN LODG, EQR_CTRL_MTY_DCHG_PLN DCHG, EQR_CTRL_MTY_DCHG_PLN_QTY QTY
            WHERE LODG.VSL_CD = DCHG.VSL_CD
            AND LODG.SKD_VOY_NO = DCHG.SKD_VOY_NO
            AND LODG.SKD_DIR_CD = DCHG.SKD_DIR_CD
            AND LODG.POL_YD_CD = DCHG.POL_YD_CD
            AND DCHG.VSL_CD = QTY.VSL_CD
            AND DCHG.SKD_VOY_NO = QTY.SKD_VOY_NO
            AND DCHG.SKD_DIR_CD = QTY.SKD_DIR_CD
            AND DCHG.POL_YD_CD = QTY.POL_YD_CD
            AND DCHG.POD_YD_CD = QTY.POD_YD_CD
            AND LODG.VSL_CD     = SUBSTR(@[vvdRetrieveVal], 0, 4)
            AND LODG.SKD_VOY_NO = SUBSTR(@[vvdRetrieveVal], 5, 4)
            AND LODG.SKD_DIR_CD = SUBSTR(@[vvdRetrieveVal], 9, 1)
            ) PLN, COM_USER U, MDM_ORGANIZATION B, MDM_LOCATION C
        WHERE PLN.CRE_USR_ID = U.USR_ID(+)
        AND B.OFC_CD = U.OFC_CD
        AND NVL(B.DELT_FLG,'N') <> 'Y'
        AND NVL(C.DELT_FLG,'N') <> 'Y'
        AND B.LOC_CD = C.LOC_CD(+)
        GROUP BY PLN.TRD_CD,PLN.SUB_TRD_CD,PLN.VSL_LANE_CD,PLN.LODG_TEU,PLN.LODG_TON ,PLN.POL_YD_CD,PLN.POD_YD_CD,PLN.FNL_CBF_DT,PLN.FNL_CBF_FLG,PLN.VSL_CD,PLN.SKD_VOY_NO,PLN.SKD_DIR_CD
    ) MTY
    ,( --------- GUIDELINE ---------
        SELECT 
            GLINE.TRD_CD
            ,GLINE.SUB_TRD_CD
            ,GLINE.VSL_LANE_CD
            ,GLINE.VSL_CD||GLINE.SKD_VOY_NO||GLINE.SKD_DIR_CD VVD_CD
            ,GLINE.EQ_GLINE_SEQ
            ,NVL(GLINE.POD_CD,'X') PRIO_CHK
            ,GLINE.POL_CD
            ,GB.RCC_CD GL_RCC_CD
            ,GLINE.POD_CD
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'D2',GLINE.PRIO_SEQ,0))        GL_PRIO_D2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'D2',GLINE.EQ_GLINE_VAL,0))    GL_VAL_D2
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'D2',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_D2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'D4',GLINE.PRIO_SEQ,0))        GL_PRIO_D4
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'D4',GLINE.EQ_GLINE_VAL,0))    GL_VAL_D4
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'D4',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_D4
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'D5',GLINE.PRIO_SEQ,0))        GL_PRIO_D5
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'D5',GLINE.EQ_GLINE_VAL,0))    GL_VAL_D5
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'D5',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_D5
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'D7',GLINE.PRIO_SEQ,0))        GL_PRIO_D7
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'D7',GLINE.EQ_GLINE_VAL,0))    GL_VAL_D7
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'D7',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_D7
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'R2',GLINE.PRIO_SEQ,0))        GL_PRIO_R2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'R2',GLINE.EQ_GLINE_VAL,0))    GL_VAL_R2
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'R2',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_R2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'R5',GLINE.PRIO_SEQ,0))        GL_PRIO_R5
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'R5',GLINE.EQ_GLINE_VAL,0))    GL_VAL_R5
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'R5',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_R5
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'R9',GLINE.PRIO_SEQ,0))        GL_PRIO_R9
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'R9',GLINE.EQ_GLINE_VAL,0))    GL_VAL_R9
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'R9',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_R9
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'O2',GLINE.PRIO_SEQ,0))        GL_PRIO_O2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'O2',GLINE.EQ_GLINE_VAL,0))    GL_VAL_O2
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'O2',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_O2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'O4',GLINE.PRIO_SEQ,0))        GL_PRIO_O4
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'O4',GLINE.EQ_GLINE_VAL,0))    GL_VAL_O4
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'O4',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_O4
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'S2',GLINE.PRIO_SEQ,0))        GL_PRIO_S2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'S2',GLINE.EQ_GLINE_VAL,0))    GL_VAL_S2
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'S2',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_S2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'S4',GLINE.PRIO_SEQ,0))        GL_PRIO_S4
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'S4',GLINE.EQ_GLINE_VAL,0))    GL_VAL_S4
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'S4',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_S4
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'F2',GLINE.PRIO_SEQ,0))        GL_PRIO_F2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'F2',GLINE.EQ_GLINE_VAL,0))    GL_VAL_F2
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'F2',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_F2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'F4',GLINE.PRIO_SEQ,0))        GL_PRIO_F4
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'F4',GLINE.EQ_GLINE_VAL,0))    GL_VAL_F4
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'F4',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_F4
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'F5',GLINE.PRIO_SEQ,0))        GL_PRIO_F5
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'F5',GLINE.EQ_GLINE_VAL,0))    GL_VAL_F5
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'F5',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_F5
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'A2',GLINE.PRIO_SEQ,0))        GL_PRIO_A2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'A2',GLINE.EQ_GLINE_VAL,0))    GL_VAL_A2
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'A2',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_A2
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'A4',GLINE.PRIO_SEQ,0))        GL_PRIO_A4
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'A4',GLINE.EQ_GLINE_VAL,0))    GL_VAL_A4
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'A4',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_A4
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'A5',GLINE.PRIO_SEQ,0))        GL_PRIO_A5
            ,SUM(DECODE(GLINE.CNTR_TPSZ_CD,'A5',GLINE.EQ_GLINE_VAL,0))    GL_VAL_A5
            ,MAX(DECODE(GLINE.CNTR_TPSZ_CD,'A5',GLINE.EQ_GLINE_TP_CD,''))  GL_TP_A5
            ,GLINE.REPO_GLINE_RMK
            ,GLINE.VSL_CD
            ,GLINE.SKD_VOY_NO
            ,GLINE.SKD_DIR_CD
            ,GLINE.EFF_ST_DT
            ,GLINE.EFF_END_DT
        FROM (-- GLINE LOADING (POL)
            SELECT 
                HDR.TRD_CD
                ,HDR.SUB_TRD_CD
                ,HDR.VSL_LANE_CD
                ,HDR.EQ_GLINE_SEQ
                ,HDR.POL_CD
                ,'' POD_CD
                ,LODG.CNTR_TPSZ_CD
                ,TO_CHAR(LODG.PRIO_SEQ) AS PRIO_SEQ
                ,LODG.EQ_GLINE_TP_CD
                ,LODG.EQ_GLINE_VAL
                ,HDR.REPO_GLINE_RMK
                ,HDR.VSL_CD       
                ,HDR.SKD_VOY_NO   
                ,HDR.SKD_DIR_CD  
                ,HDR.EFF_ST_DT
                ,HDR.EFF_END_DT
            FROM EQR_CTRL_GLINE_HDR HDR,EQR_CTRL_LODG_GLINE LODG
            WHERE HDR.TRD_CD = LODG.TRD_CD
            AND HDR.SUB_TRD_CD = LODG.SUB_TRD_CD
            AND HDR.VSL_LANE_CD = LODG.VSL_LANE_CD
            AND HDR.EQ_GLINE_SEQ = LODG.EQ_GLINE_SEQ
            AND NVL(HDR.CFM_FLG,'N') = 'Y'
            UNION ALL
            -- GLINE DISCHAGING (POD)
            SELECT 
                HDR.TRD_CD
                ,HDR.SUB_TRD_CD
                ,HDR.VSL_LANE_CD
                ,HDR.EQ_GLINE_SEQ
                ,HDR.POL_CD
                ,DCHG.POD_CD
                ,VAL.CNTR_TPSZ_CD
                ,'' PRIO_SEQ
                ,VAL.EQ_GLINE_TP_CD
                ,VAL.EQ_GLINE_VAL
                ,'' REPO_GLINE_RMK
                ,HDR.VSL_CD
                ,HDR.SKD_VOY_NO
                ,HDR.SKD_DIR_CD
                ,HDR.EFF_ST_DT
                ,HDR.EFF_END_DT
            FROM EQR_CTRL_GLINE_HDR HDR,EQR_CTRL_DCHG_GLINE DCHG,EQR_CTRL_DCHG_GLINE_VAL VAL
            WHERE HDR.TRD_CD        = DCHG.TRD_CD
            AND HDR.SUB_TRD_CD    = DCHG.SUB_TRD_CD
            AND HDR.VSL_LANE_CD   = DCHG.VSL_LANE_CD
            AND HDR.EQ_GLINE_SEQ  = DCHG.EQ_GLINE_SEQ
            AND NVL(HDR.CFM_FLG,'N') = 'Y'
            AND DCHG.TRD_CD       = VAL.TRD_CD
            AND DCHG.SUB_TRD_CD   = VAL.SUB_TRD_CD
            AND DCHG.VSL_LANE_CD  = VAL.VSL_LANE_CD
            AND DCHG.EQ_GLINE_SEQ = VAL.EQ_GLINE_SEQ
            AND DCHG.POD_CD       = VAL.POD_CD
            ) GLINE
            , MDM_LOCATION GL, MDM_EQ_ORZ_CHT GB
            , (
            SELECT
                DISTINCT D.SLAN_CD, D.TRD_CD, D.SUB_TRD_CD, D.RLANE_CD, D.VSL_SLAN_DIR_CD, D.FM_CONTI_CD, D.EFF_ETA_DT, D.POL_RCC_CD RCC_CD
            FROM VSL_HDR D
            ) X
        WHERE 1=1
        AND GLINE.POL_CD = GL.LOC_CD
        AND NVL(GL.DELT_FLG,'N') <> 'Y'
        AND NVL(GB.DELT_FLG,'N') <> 'Y'
        AND GL.SCC_CD = GB.SCC_CD
        AND GB.RCC_CD = X.RCC_CD
        AND GLINE.TRD_CD = X.TRD_CD
        AND GLINE.SUB_TRD_CD = X.SUB_TRD_CD
        AND GLINE.VSL_LANE_CD = X.SLAN_CD
        AND X.EFF_ETA_DT BETWEEN GLINE.EFF_ST_DT AND GLINE.EFF_END_DT
        GROUP BY GLINE.TRD_CD,GLINE.SUB_TRD_CD,GLINE.VSL_LANE_CD,GLINE.EQ_GLINE_SEQ,GLINE.POL_CD,GLINE.POD_CD,GLINE.REPO_GLINE_RMK,GLINE.VSL_CD,GLINE.SKD_VOY_NO,GLINE.SKD_DIR_CD,GLINE.EFF_ST_DT,GLINE.EFF_END_DT, GB.RCC_CD
        --ORDER BY GLINE.TRD_CD,GLINE.SUB_TRD_CD,GLINE.VSL_LANE_CD,GLINE.EQ_GLINE_SEQ,GLINE.POL_CD,GLINE.POD_CD,GLINE.REPO_GLINE_RMK,GLINE.VSL_CD,GLINE.SKD_VOY_NO,GLINE.SKD_DIR_CD,GLINE.EFF_ST_DT,GLINE.EFF_END_DT, GB.RCC_CD
    ) GL
    ,( --------- MTY BKG ---------
        SELECT 
            VSL_CD
            ,SKD_VOY_NO
            ,SKD_DIR_CD
            ,VSL_LANE_CD
            ,POL_YD_CD POL_CD
            ,POD_YD_CD POD_CD
            ,SUM(QTY_TEU) MTY_BKG_TEU
            ,NVL(SUM(DECODE(TPSZ_CD, 'D2', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'D4', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'D5', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'D7', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'R2', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'R5', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'R9', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'O2', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'O4', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'S2', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'S4', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'F2', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'F4', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'F5', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'A2', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'A4', CNTR_QTY)), 0)
            +NVL(SUM(DECODE(TPSZ_CD, 'A5', CNTR_QTY)), 0)MTY_BKG_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'D2', CNTR_QTY)), '') MTY_BKG_D2_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'D4', CNTR_QTY)), '') MTY_BKG_D4_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'D5', CNTR_QTY)), '') MTY_BKG_D5_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'D7', CNTR_QTY)), '') MTY_BKG_D7_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'R2', CNTR_QTY)), '') MTY_BKG_R2_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'R5', CNTR_QTY)), '') MTY_BKG_R5_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'R9', CNTR_QTY)), '') MTY_BKG_R9_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'O2', CNTR_QTY)), '') MTY_BKG_O2_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'O4', CNTR_QTY)), '') MTY_BKG_O4_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'S2', CNTR_QTY)), '') MTY_BKG_S2_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'S4', CNTR_QTY)), '') MTY_BKG_S4_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'F2', CNTR_QTY)), '') MTY_BKG_F2_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'F4', CNTR_QTY)), '') MTY_BKG_F4_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'F5', CNTR_QTY)), '') MTY_BKG_F5_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'A2', CNTR_QTY)), '') MTY_BKG_A2_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'A4', CNTR_QTY)), '') MTY_BKG_A4_QTY
            ,NVL(SUM(DECODE(TPSZ_CD, 'A5', CNTR_QTY)), '') MTY_BKG_A5_QTY
        FROM
        (
            SELECT 
                A.VSL_CD
                ,A.SKD_VOY_NO
                ,A.SKD_DIR_CD
                ,A.VSL_LANE_CD
                ,A.POL_YD_CD
                ,A.POD_YD_CD
                ,B.BKG_NO
                ,B.CNTR_TPSZ_CD TPSZ_CD
                ,B.OP_CNTR_QTY CNTR_QTY
                ,DECODE(SUBSTR( B.CNTR_TPSZ_CD,-1), '2' ,OP_CNTR_QTY, OP_CNTR_QTY * 2 ) QTY_TEU
            FROM EQR_CTRL_MTY_BKG_EXE A, BKG_QUANTITY B
            WHERE A.MTY_BKG_NO  = B.BKG_NO
            AND   A.MTY_BKG_FLG = 'Y'    -- MTY BKG 생성된 자료만 추출
            AND   A.VSL_CD     = SUBSTR(@[vvdRetrieveVal], 0, 4)
            AND   A.SKD_VOY_NO = SUBSTR(@[vvdRetrieveVal], 5, 4)
            AND   A.SKD_DIR_CD = SUBSTR(@[vvdRetrieveVal], 9, 1)
            AND   NVL(A.BKG_STS_CD, ' ') <> 'X' --BKG CANCEL 제외
        )
        GROUP BY VSL_CD,SKD_VOY_NO,SKD_DIR_CD,VSL_LANE_CD,POL_YD_CD,POD_YD_CD
    ) BKG
    WHERE HDR.VSL_CD       = MTY.VSL_CD(+)
    AND HDR.SKD_VOY_NO   = MTY.SKD_VOY_NO(+)
    AND HDR.SKD_DIR_CD   = MTY.SKD_DIR_CD(+)
    AND HDR.SLAN_CD      = MTY.VSL_LANE_CD(+)
    AND HDR.POL_YD_CD    = MTY.POL_YD_CD(+)
    AND HDR.POD_YD_CD    = MTY.POD_YD_CD(+)
    AND HDR.SLAN_CD      = GL.VSL_LANE_CD(+)
    AND CASE WHEN HDR.POL_YD_CD IS NOT NULL AND HDR.POD_YD_CD IS NOT NULL AND HDR.POL_YD_CD = HDR.POD_YD_CD THEN 'X' ELSE HDR.POD_CD END
      = CASE WHEN GL.PRIO_CHK(+) = 'X' THEN 'X' ELSE GL.POD_CD(+) END
    AND HDR.EFF_ETA_DT BETWEEN GL.EFF_ST_DT(+) AND GL.EFF_END_DT(+)
    AND HDR.POL_RCC_CD   = GL.GL_RCC_CD(+)
    AND HDR.VSL_CD       = BKG.VSL_CD(+)
    AND HDR.SKD_VOY_NO   = BKG.SKD_VOY_NO(+)
    AND HDR.SKD_DIR_CD   = BKG.SKD_DIR_CD(+)
    AND HDR.SLAN_CD      = BKG.VSL_LANE_CD(+)
    AND HDR.POL_CD       = SUBSTR(BKG.POL_CD(+),1,5)
    AND HDR.POD_CD       = SUBSTR(BKG.POD_CD(+),1,5)
) R
WHERE 1=1
--AND R.RNK = 1
ORDER BY R.TRD_CD, R.SUB_TRD_CD, R.SLAN_CD, R.VSL_CD, R.SKD_VOY_NO, R.SKD_DIR_CD, R.POL_CLPT_SEQ, R.POD_CLPT_SEQ, R.POL_YD_CD			]]></sql>
			<params>
				<param name="vvdRetrieveVal" type="12" value="" out="N"/>
				<param name="rcc_cd" type="12" value="" out="N"/>
				<param name="loc_cd_second" type="12" value="" out="N"/>
				<param name="ofc_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
