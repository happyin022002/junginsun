<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="SurplusAreaDBDAOSearchSurplusAreaRSQL">
			<desc><![CDATA[Surplus Area 데이터를 조회 함
EES_EQR_1070
- CHM-201537079, 2015-08-10, 신용찬, 표준코드 변환]]></desc>
			<sql><![CDATA[
WITH 
SIM_TP_CD_DATA AS (
    SELECT 1 GRP_CD, TO_NUMBER('') SORT, 'INN' CODE, 'Initial Inventory' NAME             FROM DUAL UNION ALL
    SELECT 1 GRP_CD, 1 SORT, 'IV' CODE, 'Inventory' NAME             FROM DUAL UNION ALL
    SELECT 1 GRP_CD, 2 SORT, 'IM' CODE, 'Inventory Damage' NAME      FROM DUAL UNION ALL
    SELECT 1 GRP_CD, 3 SORT, 'ID' CODE, 'Inventory Disposal' NAME    FROM DUAL UNION ALL
    SELECT 1 GRP_CD, 4 SORT, 'IS' CODE, 'Inventory SOC' NAME         FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 0 SORT, 'INP' CODE, 'Inventory Plus (-)' NAME       	         FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 1 SORT, 'MG' CODE, 'MG' NAME       	         FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 2 SORT, 'RD' CODE, 'MT In via VD' NAME          FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 3 SORT, 'RI' CODE, 'MT In via EN/TN' NAME       FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 4 SORT, 'OH' CODE, 'On-hire' NAME               FROM DUAL UNION ALL
    #if (${rcc_cd} != 'DEHAM' && ${rcc_cd} != 'SGSIN') -- RCC_CD 가 DEHAM, SGSIN 인 경우 Domestic In 숨김
    SELECT 2 GRP_CD, 5 SORT, 'DI' CODE, 'Domestic In' NAME           FROM DUAL UNION ALL
    #end
    SELECT 2 GRP_CD, 6 SORT, 'SI' CODE, 'Sublease In' NAME           FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 0 SORT, 'INM' CODE, 'Inventory Minus (-)' NAME       	         FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 1 SORT, 'OP' CODE, 'OP' NAME                    FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 2 SORT, 'RL' CODE, 'MT Out via VL' NAME          FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 3 SORT, 'RO' CODE, 'MT Out via EN/TN' NAME       FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 4 SORT, 'PL' CODE, 'MT Loading Plan' NAME       FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 5 SORT, 'OT' CODE, 'Off-hire / Disposal' NAME   FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 6 SORT, 'DO' CODE, 'Domestic Out' NAME          FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 7 SORT, 'SO' CODE, 'Sublease Out' NAME          FROM DUAL UNION ALL
    SELECT 4 GRP_CD, 1 SORT, 'FBB' CODE, 'Final Balance' NAME         FROM DUAL
    #if (${loc_type_code} == '5' || ${loc_type_code} == '6' || ${loc_type_code} == '7')
    UNION ALL 
    SELECT 5 GRP_CD, 0 SORT, 'F1' CODE, 'Final Balance vs Target Volume' NAME    FROM DUAL UNION ALL
    SELECT 5 GRP_CD, 1 SORT, 'F2' CODE, 'Target Vol (OP*Ratio)' NAME    FROM DUAL UNION ALL
    SELECT 5 GRP_CD, 2 SORT, 'F3' CODE, 'Target Ratio vs OP' NAME    FROM DUAL UNION ALL
    SELECT 5 GRP_CD, 3 SORT, 'F4' CODE, 'PFMC (Final Balance/Target Vol.)' NAME    FROM DUAL
    #end 
)
,
SIM_SS_DATA AS (
    SELECT 
        S.GRP_CD, S.SORT, S.CODE, S.NAME, Q.LOC_CD
        , Q.CNTR_TPSZ_CD, Q.FCAST_YRWK
        , SUM(NVL(DECODE(Q.INVT_SIM_TP_CD,S.CODE,Q.QTY,0),0)) QTY
    FROM SIM_TP_CD_DATA S, (
        SELECT
        #if (${loc_type_code} == '2') --RCC (by Country)
            SUBSTR(Q.YD_CD,1,2)
        #elseif (${loc_type_code} == '3') --RCC (by LCC)
            B.LCC_CD
        #elseif (${loc_type_code} == '4') --LCC (by ECC)
            B.ECC_CD
        #elseif (${loc_type_code} == '5') --LCC (by SCC)
            B.SCC_CD
        #elseif (${loc_type_code} == '6') --ECC (by SCC)
            B.SCC_CD
        #elseif (${loc_type_code} == '7') --SCC (by Yard)
            Q.YD_CD
        #end    
            LOC_CD
            , Q.INVT_SIM_TP_CD
            , Q.CNTR_TPSZ_CD, Q.FCAST_YRWK
            , SUM(NVL(Q.CNTR_QTY,0)) QTY
        FROM EQR_CTRL_INVT_SIM_DTL D, EQR_CTRL_INVT_SIM_DTL_QTY Q, MDM_LOCATION A, MDM_EQ_ORZ_CHT B
        WHERE 1=1
            AND D.FCAST_YRWK = Q.FCAST_YRWK
            AND D.YD_CD = Q.YD_CD
            AND D.INVT_SIM_TP_CD = Q.INVT_SIM_TP_CD
            AND D.FCAST_YRWK = Q.FCAST_YRWK
            AND Q.FCAST_YRWK BETWEEN @[fm_yrwk] AND @[to_yrwk]
            AND A.LOC_CD = SUBSTR(Q.YD_CD,1,5)
            AND A.SCC_CD = B.SCC_CD
            AND NVL(A.DELT_FLG,'N') <> 'Y'
            AND NVL(B.DELT_FLG,'N') <> 'Y'
        #if (${loc_type_code} == '2') --RCC (by Country)
            AND B.RCC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '3') --RCC (by LCC)          
            AND B.RCC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '4') --LCC (by ECC)
            AND B.LCC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '5') --LCC (by SCC)
            AND B.LCC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '6') --ECC (by SCC)
            AND B.ECC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '7') --SCC (by Yard)
            AND B.SCC_CD =@[loc_cd]
        #end         
	    #if( ${level_cd} == '2' ) --LEVEL_CD 2 RHQ
    		AND B.LCC_CD IN (
		        SELECT LCC_CD
        		FROM MDM_EQ_ORZ_CHT                         
		        WHERE SCC_CD IN (
        		    SELECT SCC_CD
		            FROM MDM_LOCATION
        		    WHERE LOC_CD IN (SELECT DISTINCT LOC_CD
                		             FROM MDM_ORGANIZATION
                        		     WHERE NVL(DELT_FLG,'N') <> 'Y'
		                             CONNECT BY NOCYCLE PRIOR OFC_CD = PRNT_OFC_CD
        		                     START WITH OFC_CD = (SELECT DISTINCT AR_HD_QTR_OFC_CD FROM MDM_ORGANIZATION WHERE OFC_CD = @[ofc_cd]))
		        )
		    )
	    #elseif( ${level_cd} == '5' ) --LEVEL_CD 5 , ATLSC-->ATLSA, PHXSC-->PHXSA
		    AND B.LCC_CD IN (
        		SELECT LCC_CD
		        FROM MDM_EQ_ORZ_CHT                         
		        WHERE SCC_CD IN (
        		    SELECT SCC_CD
		            FROM MDM_LOCATION
        		    WHERE LOC_CD IN (SELECT DISTINCT LOC_CD
                		             FROM MDM_ORGANIZATION
                        		     WHERE NVL(DELT_FLG,'N') <> 'Y'
		                             CONNECT BY NOCYCLE PRIOR OFC_CD = PRNT_OFC_CD
        		                     START WITH OFC_CD = (SELECT DISTINCT AR_HD_QTR_OFC_CD FROM MDM_ORGANIZATION WHERE OFC_CD = @[ofc_cd] AND OFC_CD IN ('ATLSA','PHXSA'))) -- ATLSC-->ATLSA, PHXSC-->PHXSA
		        )
		    )
	    #elseif( ${level_cd} == '6' ) --LEVEL_CD 6 Office
    		AND B.LCC_CD IN (
		        SELECT LCC_CD
        		FROM MDM_EQ_ORZ_CHT                         
		        WHERE SCC_CD IN (
        		    SELECT SCC_CD
		            FROM MDM_LOCATION
        		    WHERE LOC_CD IN (SELECT LOC_CD FROM MDM_ORGANIZATION WHERE NVL(DELT_FLG,'N') <> 'Y' AND OFC_CD = @[ofc_cd])
		        )
		    )
	    #elseif( ${level_cd} == '3' || ${level_cd} == '4' ) --LEVEL_CD 3,4 Office
			AND 1=2 --조회안되야함
	    #end
        GROUP BY 
        #if (${loc_type_code} == '2') --RCC (by Country)
            SUBSTR(Q.YD_CD,1,2)
        #elseif (${loc_type_code} == '3') --RCC (by LCC)          
            B.LCC_CD
        #elseif (${loc_type_code} == '4') --LCC (by ECC)
            B.ECC_CD
        #elseif (${loc_type_code} == '5') --LCC (by SCC)
            B.SCC_CD
        #elseif (${loc_type_code} == '6') --ECC (by SCC)
            B.SCC_CD
        #elseif (${loc_type_code} == '7') --SCC (by Yard)
            Q.YD_CD
        #end      
            , Q.INVT_SIM_TP_CD, Q.CNTR_TPSZ_CD, Q.FCAST_YRWK 
    ) Q         
    GROUP BY S.GRP_CD, S.SORT, S.CODE, S.NAME, Q.LOC_CD, Q.CNTR_TPSZ_CD, Q.FCAST_YRWK
)
SELECT
A.LOC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT
#foreach( $key in ${arrweek})
, DECODE(NVL(A.D2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.D2_$key,0) D2_$key
, DECODE(NVL(A.D4_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.D4_$key,0) D4_$key
, DECODE(NVL(A.D5_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.D5_$key,0) D5_$key
, DECODE(NVL(A.D7_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.D7_$key,0) D7_$key
, DECODE(NVL(A.R2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.R2_$key,0) R2_$key
, DECODE(NVL(A.R5_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.R5_$key,0) R5_$key
, DECODE(NVL(A.R9_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.R9_$key,0) R9_$key
, DECODE(NVL(A.O2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.O2_$key,0) O2_$key
, DECODE(NVL(A.O4_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.O4_$key,0) O4_$key
, DECODE(NVL(A.S2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.S2_$key,0) S2_$key
, DECODE(NVL(A.S4_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.S4_$key,0) S4_$key
, DECODE(NVL(A.F2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.F2_$key,0) F2_$key
, DECODE(NVL(A.F4_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.F4_$key,0) F4_$key
, DECODE(NVL(A.F5_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.F5_$key,0) F5_$key
, DECODE(NVL(A.A2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.A2_$key,0) A2_$key
, DECODE(NVL(A.A4_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.A4_$key,0) A4_$key
, DECODE(NVL(A.A5_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.A5_$key,0) A5_$key
#end
FROM (
SELECT
A.LOC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT
#foreach( $key in ${arrweek}) 
, MAX(ABS(A.D2_$key)) D2_$key, MAX(ABS(A.D4_$key)) D4_$key, MAX(ABS(A.D5_$key)) D5_$key, MAX(ABS(A.D7_$key)) D7_$key, MAX(ABS(A.R2_$key)) R2_$key, MAX(ABS(A.R5_$key)) R5_$key, MAX(ABS(A.R9_$key)) R9_$key
, MAX(ABS(A.O2_$key)) O2_$key, MAX(ABS(A.O4_$key)) O4_$key, MAX(ABS(A.S2_$key)) S2_$key, MAX(ABS(A.S4_$key)) S4_$key, MAX(ABS(A.F2_$key)) F2_$key, MAX(ABS(A.F4_$key)) F4_$key, MAX(ABS(A.F5_$key)) F5_$key
, MAX(ABS(A.A2_$key)) A2_$key, MAX(ABS(A.A4_$key)) A4_$key, MAX(ABS(A.A5_$key)) A5_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.D2_$key)) <> MAX(A.D2_$key) THEN 'Y' ELSE '' END D2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.D4_$key)) <> MAX(A.D4_$key) THEN 'Y' ELSE '' END D4_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.D5_$key)) <> MAX(A.D5_$key) THEN 'Y' ELSE '' END D5_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.D7_$key)) <> MAX(A.D7_$key) THEN 'Y' ELSE '' END D7_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.R2_$key)) <> MAX(A.R2_$key) THEN 'Y' ELSE '' END R2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.R5_$key)) <> MAX(A.R5_$key) THEN 'Y' ELSE '' END R5_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.R9_$key)) <> MAX(A.R9_$key) THEN 'Y' ELSE '' END R9_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.O2_$key)) <> MAX(A.O2_$key) THEN 'Y' ELSE '' END O2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.O4_$key)) <> MAX(A.O4_$key) THEN 'Y' ELSE '' END O4_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.S2_$key)) <> MAX(A.S2_$key) THEN 'Y' ELSE '' END S2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.S4_$key)) <> MAX(A.S4_$key) THEN 'Y' ELSE '' END S4_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.F2_$key)) <> MAX(A.F2_$key) THEN 'Y' ELSE '' END F2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.F4_$key)) <> MAX(A.F4_$key) THEN 'Y' ELSE '' END F4_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.F5_$key)) <> MAX(A.F5_$key) THEN 'Y' ELSE '' END F5_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.A2_$key)) <> MAX(A.A2_$key) THEN 'Y' ELSE '' END A2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.A4_$key)) <> MAX(A.A4_$key) THEN 'Y' ELSE '' END A4_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.A5_$key)) <> MAX(A.A5_$key) THEN 'Y' ELSE '' END A5_MINUS_YN_$key
#end
FROM (
SELECT
 CASE WHEN GROUPING(R.LOC_CD)='1' THEN 'TTL' ELSE R.LOC_CD END LOC_CD
, R.CODE, R.NAME, R.GRP_CD, R.SORT
#foreach($key in ${arrweek})
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END D2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D4$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END D4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D5$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END D5_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D7$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END D7_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END R2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R5$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END R5_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R9$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END R9_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='O2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END O2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='O4$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END O4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='S2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END S2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='S4$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END S4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END F2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F4$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END F4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F5$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END F5_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='A2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END A2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='A4$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END A4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='A5$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END A5_$key
#end
FROM (
    SELECT 
        X.LOC_CD
        , X.CODE, X.NAME, X.GRP_CD, X.SORT
        , X.FCAST_YRWK, X.CNTR_TPSZ_CD
        , X.QTY
    FROM (
            SELECT
                A.LOC_CD, 
                'INN' CODE, 'Initial Inventory' NAME, A.GRP_CD, TO_NUMBER('') SORT
                , A.CNTR_TPSZ_CD
                , A.FCAST_YRWK
                --, SUM(NVL(DECODE(A.CODE,'IV',A.QTY,0),0)-(NVL(DECODE(A.CODE,'IS',A.QTY,0),0)+NVL(DECODE(A.CODE,'ID',A.QTY,0),0))) QTY
                , SUM(NVL(DECODE(A.CODE,'IV',A.QTY,0),0)-(NVL(DECODE(A.CODE,'IS',A.QTY,0),0))) QTY
            FROM SIM_SS_DATA A
            WHERE 1=1
            AND A.GRP_CD IN ('1')
            GROUP BY A.LOC_CD, A.GRP_CD, A.CNTR_TPSZ_CD, A.FCAST_YRWK
            UNION ALL
            SELECT
                A.LOC_CD, 
                CASE
                WHEN A.GRP_CD = '2' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 'INP'
                WHEN A.GRP_CD = '3' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 'INM'
                ELSE A.CODE
                END CODE,        
                CASE
                WHEN A.GRP_CD = '2' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 'Inventory Plus (-)'
                WHEN A.GRP_CD = '3' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 'Inventory Minus (-)'
                ELSE A.NAME
                END NAME,
                A.GRP_CD,
                CASE
                WHEN A.GRP_CD = '2' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 0
                WHEN A.GRP_CD = '3' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 0
                ELSE A.SORT
                END SORT
                , A.CNTR_TPSZ_CD
                , A.FCAST_YRWK
                , SUM(NVL(A.QTY,0)) QTY
            FROM SIM_SS_DATA A
            WHERE 1=1
            AND A.GRP_CD IN ('2','3')
            AND A.CODE NOT IN ('PL')
            GROUP BY GROUPING SETS ((A.LOC_CD, A.GRP_CD, A.SORT, A.CODE, A.NAME, A.CNTR_TPSZ_CD, A.FCAST_YRWK),(A.LOC_CD, A.GRP_CD, A.CNTR_TPSZ_CD, A.FCAST_YRWK))
            UNION ALL
            SELECT
                A.LOC_CD,
                'FBB' CODE, 'Final Balance' NAME, 4 GRP_CD, TO_NUMBER('') SORT
                , A.CNTR_TPSZ_CD
                , A.FCAST_YRWK
                --, (SUM(NVL(DECODE(A.CODE,'IV',A.QTY,0),0)-(NVL(DECODE(A.CODE,'IS',A.QTY,0),0)+NVL(DECODE(A.CODE,'ID',A.QTY,0),0)))) 
                , (SUM(NVL(DECODE(A.CODE,'IV',A.QTY,0),0)-(NVL(DECODE(A.CODE,'IS',A.QTY,0),0))))
					+ SUM(NVL(DECODE(A.GRP_CD,'2',A.QTY,0),0)) - SUM(NVL(DECODE(A.GRP_CD,'3',A.QTY,0),0)) QTY
            FROM SIM_SS_DATA A
            WHERE 1=1
            AND A.GRP_CD IN ('1','2','3')
            AND A.CODE NOT IN ('PL')
            GROUP BY A.LOC_CD, A.CNTR_TPSZ_CD, A.FCAST_YRWK
            UNION ALL
            SELECT
                A.LOC_CD, 'PL' CODE, 'MT Loading Plan' NAME, 3 GRP_CD, 4 SORT
                , A.CNTR_TPSZ_CD, A.FCAST_YRWK
                , SUM(B.QTY) QTY
            FROM (SELECT DISTINCT A.LOC_CD, A.CNTR_TPSZ_CD, A.FCAST_YRWK FROM SIM_SS_DATA A WHERE A.GRP_CD IN ('3')) A, 
            (
                SELECT
                #if (${loc_type_code} == '2') --RCC (by Country)
                    SUBSTR(PLN.POL_YD_CD,1,2)
                #elseif (${loc_type_code} == '3') --RCC (by LCC)
                    B.LCC_CD
                #elseif (${loc_type_code} == '4') --LCC (by ECC)
                    B.ECC_CD
                #elseif (${loc_type_code} == '5') --LCC (by SCC)
                    B.SCC_CD
                #elseif (${loc_type_code} == '6') --ECC (by SCC)
                    B.SCC_CD
                #elseif (${loc_type_code} == '7') --SCC (by Yard)
                    PLN.POL_YD_CD
                #end    
                    LOC_CD
                    , PLN.CNTR_TPSZ_CD, PLN.WK
                    , SUM(NVL(PLN.CNTR_QTY,0)) QTY
                FROM (
                    SELECT 
                        LODG.POL_YD_CD
                        ,LODG.VSL_CD
                        ,LODG.SKD_VOY_NO
                        ,LODG.SKD_DIR_CD
                        ,W.PLN_YR||W.PLN_WK WK
                        ,QTY.CNTR_TPSZ_CD
                        ,QTY.CNTR_QTY
                    FROM EQR_CTRL_MTY_LODG_PLN LODG, VSK_VSL_PORT_SKD V, EQR_WK_PRD W, EQR_CTRL_MTY_DCHG_PLN DCHG, EQR_CTRL_MTY_DCHG_PLN_QTY QTY
                    WHERE 1=1
                        AND LODG.VSL_CD = DCHG.VSL_CD
                        AND LODG.SKD_VOY_NO = DCHG.SKD_VOY_NO
                        AND LODG.SKD_DIR_CD = DCHG.SKD_DIR_CD
                        AND LODG.POL_YD_CD = DCHG.POL_YD_CD
                        AND LODG.VSL_CD = V.VSL_CD
                        AND LODG.SKD_VOY_NO = V.SKD_VOY_NO
                        AND LODG.SKD_DIR_CD = V.SKD_DIR_CD
                        AND LODG.POL_YD_CD = V.YD_CD
                        AND W.PLN_YR = TO_CHAR(V.VPS_ETA_DT,'YYYY')
                        AND V.VPS_ETA_DT BETWEEN TO_DATE(W.WK_ST_DT,'YYYYMMDD') AND TO_DATE(W.WK_END_DT,'YYYYMMDD')
                        AND DCHG.VSL_CD = QTY.VSL_CD
                        AND DCHG.SKD_VOY_NO = QTY.SKD_VOY_NO
                        AND DCHG.SKD_DIR_CD = QTY.SKD_DIR_CD
                        AND DCHG.POL_YD_CD = QTY.POL_YD_CD
                        AND DCHG.POD_YD_CD = QTY.POD_YD_CD
                ) PLN, MDM_YARD Y, MDM_LOCATION A, MDM_EQ_ORZ_CHT B
                WHERE 1=1
                    AND PLN.POL_YD_CD = Y.YD_CD
                    AND Y.LOC_CD = A.LOC_CD
                    AND A.SCC_CD = B.SCC_CD
                    AND NVL(Y.DELT_FLG,'N') <> 'Y'
                    AND NVL(A.DELT_FLG,'N') <> 'Y'
                    AND NVL(B.DELT_FLG,'N') <> 'Y'
                #if (${loc_type_code} == '2') --RCC (by Country)
                    AND B.RCC_CD =@[loc_cd]
                #elseif (${loc_type_code} == '3') --RCC (by LCC)          
                    AND B.RCC_CD =@[loc_cd]
                #elseif (${loc_type_code} == '4') --LCC (by ECC)
                    AND B.LCC_CD =@[loc_cd]
                #elseif (${loc_type_code} == '5') --LCC (by SCC)
                    AND B.LCC_CD =@[loc_cd]
                #elseif (${loc_type_code} == '6') --ECC (by SCC)
                    AND B.ECC_CD =@[loc_cd]
                #elseif (${loc_type_code} == '7') --SCC (by Yard)
                    AND B.SCC_CD =@[loc_cd]
                #end         
                    GROUP BY 
                    #if (${loc_type_code} == '2') --RCC (by Country)
                        SUBSTR(PLN.POL_YD_CD,1,2)
                    #elseif (${loc_type_code} == '3') --RCC (by LCC)          
                        B.LCC_CD
                    #elseif (${loc_type_code} == '4') --LCC (by ECC)
                        B.ECC_CD
                    #elseif (${loc_type_code} == '5') --LCC (by SCC)
                        B.SCC_CD
                    #elseif (${loc_type_code} == '6') --ECC (by SCC)
                        B.SCC_CD
                    #elseif (${loc_type_code} == '7') --SCC (by Yard)
                        PLN.POL_YD_CD
                    #end         
                        , PLN.CNTR_TPSZ_CD, PLN.WK
            ) B
            WHERE 1=1
                AND A.LOC_CD = B.LOC_CD(+)
                AND A.CNTR_TPSZ_CD = B.CNTR_TPSZ_CD(+)
                AND A.FCAST_YRWK = B.WK(+)
                GROUP BY A.LOC_CD, A.CNTR_TPSZ_CD, A.FCAST_YRWK
            #if (${loc_type_code} == '5' || ${loc_type_code} == '6' || ${loc_type_code} == '7')                
            UNION ALL
            SELECT
                A.LOC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT
                , A.CNTR_TPSZ_CD, A.FCAST_YRWK
                , 
                CASE
                WHEN A.CODE = 'F3'
                THEN 
                    CASE
                    WHEN NVL(MAX(MB.MB),TO_NUMBER('')) BETWEEN 0 AND 50 THEN 0.5
                    WHEN NVL(MAX(MB.MB),TO_NUMBER('')) BETWEEN 51 AND 80 THEN 0.7
                    WHEN NVL(MAX(MB.MB),TO_NUMBER('')) BETWEEN 81 AND 100 THEN 0.9
                    WHEN NVL(MAX(MB.MB),TO_NUMBER('')) BETWEEN -100 AND -50 THEN 1.2
                    WHEN NVL(MAX(MB.MB),TO_NUMBER('')) BETWEEN -49 AND -1 THEN 1.5
                    ELSE TO_NUMBER('')
                    END 
                ELSE TO_NUMBER('')
                END QTY
            FROM (SELECT DISTINCT A.LOC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT, A.CNTR_TPSZ_CD, A.FCAST_YRWK FROM SIM_SS_DATA A WHERE A.GRP_CD='5') A,
            (
                SELECT /*+ ORDERED USE_NL(O L T S) INDEX( L XAK1MDM_LOCATION ) */
                #if (${loc_type_code} == '2') --RCC (by Country)
                    L.LOC_CD
                #elseif (${loc_type_code} == '3') --RCC (by LCC)
                    O.LCC_CD
                #elseif (${loc_type_code} == '4') --LCC (by ECC)
                    O.ECC_CD
                #elseif (${loc_type_code} == '5') --LCC (by SCC)
                    O.SCC_CD
                #elseif (${loc_type_code} == '6') --ECC (by SCC)
                    O.SCC_CD
                #elseif (${loc_type_code} == '7') --SCC (by Yard)
                    L.LOC_CD
                #end    
                    LOC_CD,
                    S.CNTR_TPSZ_CD,
                    CASE
                    WHEN SUM(T.IB_QTY) >= SUM(T.OB_QTY) THEN ROUND(SUM(T.OB_QTY) / SUM(T.IB_QTY) * 100)
                    WHEN SUM(T.OB_QTY) >0 THEN ROUND( SUM (T.IB_QTY) / SUM (T.OB_QTY) * -1 * 100)
                    ELSE 0
                    END AS MB
                    ,(SELECT MAX(W.PLN_YR||W.PLN_WK) WK FROM EQR_WK_PRD W WHERE T.TGT_MVMT_DT BETWEEN W.WK_ST_DT AND W.WK_END_DT) FCAST_YRWK
                FROM MDM_EQ_ORZ_CHT O, MDM_LOCATION L, CIM_LOC_MTCH_BAK_SMRY T, CIM_TP_SZ_DP_SEQ S--, EQR_WK_PRD W
                WHERE 1=1
                    AND T.TGT_MVMT_DT BETWEEN (SELECT MIN(W.WK_ST_DT) WK_ST_DT FROM EQR_WK_PRD W WHERE W.PLN_YR||W.PLN_WK BETWEEN @[fm_yrwk] AND @[to_yrwk])
                                      AND     (SELECT MAX(W.WK_END_DT) WK_END_DT FROM EQR_WK_PRD W WHERE W.PLN_YR||W.PLN_WK BETWEEN @[fm_yrwk] AND @[to_yrwk])
                    AND T.CNTR_TPSZ_CD = S.CNTR_TPSZ_CD
                    AND T.LOC_CD = L.LOC_CD
                    AND L.SCC_CD = O.SCC_CD
                    AND NVL(O.DELT_FLG,'N') <> 'Y'
                    AND NVL(L.DELT_FLG,'N') <> 'Y'
                    AND T.FULL_MTY_CD = 'F'
                    AND T.MVMT_CO_CD IN ('H','S')
                    AND S.CNTR_TPSZ_DIV_CD = DECODE('A', 'A', S.CNTR_TPSZ_DIV_CD, 'A')
                    AND T.ENR_FLG = 'N'
                    AND T.TN_ROUT_FLG = 'N'
                    AND T.SOC_FLG = 'N'
                    AND S.CNTR_TPSZ_CD IN ('D2','D4','D5','D7','R2','R5','R9','O2','O4','S2','S4','F2','F4','F5','A2','A4','A5')
                #if (${loc_type_code} == '2') --RCC (by Country)
                    AND O.RCC_CD =@[loc_cd]
                #elseif (${loc_type_code} == '3') --RCC (by LCC)          
                    AND O.RCC_CD =@[loc_cd]
                #elseif (${loc_type_code} == '4') --LCC (by ECC)
                    AND O.LCC_CD =@[loc_cd]
                #elseif (${loc_type_code} == '5') --LCC (by SCC)
                    AND O.LCC_CD =@[loc_cd]
                #elseif (${loc_type_code} == '6') --ECC (by SCC)
                    AND O.ECC_CD =@[loc_cd]
                #elseif (${loc_type_code} == '7') --SCC (by Yard)
                    AND O.SCC_CD =@[loc_cd]
                #end                       
                    GROUP BY 
                    #if (${loc_type_code} == '2') --RCC (by Country)
                        L.LOC_CD
                    #elseif (${loc_type_code} == '3') --RCC (by LCC)          
                        O.LCC_CD
                    #elseif (${loc_type_code} == '4') --LCC (by ECC)
                        O.ECC_CD
                    #elseif (${loc_type_code} == '5') --LCC (by SCC)
                        O.SCC_CD
                    #elseif (${loc_type_code} == '6') --ECC (by SCC)
                        O.SCC_CD
                    #elseif (${loc_type_code} == '7') --SCC (by Yard)
                        L.LOC_CD
                    #end         
                        , S.CNTR_TPSZ_CD, T.TGT_MVMT_DT
            ) MB
            WHERE 1=1
            #if (${loc_type_code} == '2') --RCC (by Country)
                AND SUBSTR(A.LOC_CD,1,2) = MB.LOC_CD(+)
            #elseif (${loc_type_code} == '7') --SCC (by Yard)
                AND SUBSTR(A.LOC_CD,1,5) = MB.LOC_CD(+)
            #else
                AND A.LOC_CD = MB.LOC_CD(+)
            #end
            AND A.CNTR_TPSZ_CD = MB.CNTR_TPSZ_CD(+)
            AND A.FCAST_YRWK = MB.FCAST_YRWK(+)
            GROUP BY A.LOC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT, A.CNTR_TPSZ_CD, A.FCAST_YRWK
            #end
        ) X
    WHERE 1=1
) R
GROUP BY GROUPING SETS ((R.GRP_CD, R.SORT, R.CODE, R.NAME, R.CNTR_TPSZ_CD, R.FCAST_YRWK),(R.LOC_CD, R.GRP_CD, R.SORT, R.CODE, R.NAME, R.CNTR_TPSZ_CD, R.FCAST_YRWK))
) A
GROUP BY A.LOC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT
) A
ORDER BY CASE WHEN A.LOC_CD ='TTL' THEN 'AAAAA' ELSE A.LOC_CD END, A.GRP_CD, A.SORT			]]></sql>
			<params>
				<param name="fm_yrwk" type="12" value="" out="N"/>
				<param name="to_yrwk" type="12" value="" out="N"/>
				<param name="loc_cd" type="12" value="" out="N"/>
				<param name="ofc_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
