<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ChargeCollectionReportDBDAOCollectionSummaryReportByOfficeVORSQL">
			<desc><![CDATA[Collection Status Report by Office의 상세 내역을 조회]]></desc>
			<sql><![CDATA[
SELECT  OFC_CD
	   ,OFC_RHQ_CD
	   ,SUBSTR(TO_MVMT_DT, 0, 4) YEAR
	   ,SUBSTR(TO_MVMT_DT, 5, 2) MONTH
	   ,(
			SELECT  CASE
                         WHEN Y.OFC_CD='DXBBA' -- DXBBA 오피스는 테이블 값이 존재하지않아 강제로 값을 정함
							THEN 'DXBSC'
                         ELSE (
								SELECT  CASE
											-- 아래 오피스는 4레벨
											WHEN Y.OFC_CD IN (
													--HAMRU
													'KOPBA', 'TLLBA', 'CASBA', 'LEIBA', 'LISBA', 'TUNBA', 
													--NYCRA
													'CCSBA',
													--SHARC
													'CANSO', 'KHHBA',
													--TYOIB
													'KIJBA', 'NGOSO', 'TMKBA',
													--SINRS
													'BLRBA', 'BRCBA', 'HYDBA', 'IDRBA', 'JPRBA', 'KNPBA', 'MUNBA', 'NAGBA', 'PAVKS', 'PNVBA', 
													'TUTBA', 'TUTBS', 'VPMKS', 'CMBSC', 'CGPKS', 'DACSC', 'DARBA', 'DJIBA', 'DURBA', 'AUHSO', 
													'DOHBA', 'DXBBA', 'DXBSC', 'IRQBA', 'JORBA', 'THRBA', 'DMNBA', 'JEDBA', 'BLWBA', 'JKTBA', 
													'JKTSC', 'KHIBA', 'KWIBA', 'MBABA', 'MNLBA'
												) 
												THEN OFC_N4TH_LVL_CD
											-- OFC_KND_CD & OFC_LVL 조합으로 5레벨 컨트롤 오피스인 부분만 구한다
											WHEN   (OFC_KND_CD = 6 AND OFC_LVL = 5)
												OR (OFC_KND_CD = 6 AND OFC_LVL = 6)
												OR (OFC_KND_CD = 3 AND OFC_LVL = 5)
												OR (OFC_KND_CD = 4 AND OFC_LVL = 6) 
												THEN OFC_N5TH_LVL_CD
											ELSE OFC_N4TH_LVL_CD -- 그외에는 모두 4레벨
                                        END
								  FROM  DMT_OFC_LVL_V
								 WHERE  OFC_N8TH_LVL_CD = Y.OFC_CD 
							)
                    END
			  FROM  DUAL 
		) AS CTRL_OFC_CD
	   ,DMDT_TRF_CD
	   ,TTL_CNTR
	   ,CURR_CD
	   ,INCR_CNTR
	   ,INCR_AMT
	   ,CMDT_CNTR
	   ,CMDT_AMT
	   ,EXPT_CNTR
	   ,EXPT_AMT
	   ,DC_CNTR
	   ,DC_AMT
	   ,BILL_CNTR1
	   ,BILL_AMT1
	   ,BILL_CNTR
	   ,BILL_AMT
	   ,INV_CNTR
	   ,INV_AMT
	   ,INV_IF_CNTR 				AS COLL_CNTR
	   ,INV_IF_AMT 					AS COLL_AMT
	   ,CEIL( ( COLL_AMT + INV_PAY_AMT ) / DECODE(INCR_AMT,  0, 1, INCR_AMT) *10000) / 100	AS COLL_RTO_A
	   ,CEIL( ( COLL_AMT + INV_PAY_AMT ) / DECODE(BILL_AMT1, 0, 1, BILL_AMT1)*10000) / 100	AS COLL_RTO_B
	   ,CEIL( ( COLL_AMT + INV_PAY_AMT ) / DECODE(INV_AMT,   0, 1, BILL_AMT) *10000) / 100	AS COLL_RTO_C
	   ,CEIL( ( COLL_AMT + INV_PAY_AMT ) / DECODE(INV_AMT,   0, 1, INV_AMT)  *10000) / 100	AS COLL_RTO_D
       ,NVL(INV_PAY_AMT,0) 			AS INV_PAY_AMT
       ,NVL(INV_PAY_CNTR,0) 		AS INV_PAY_CNTR
       ,( COLL_AMT + INV_PAY_AMT ) 	AS ALL_COLL_AMT
	   
  FROM  (
			SELECT  X.OFC_CD             	AS OFC_CD
			       ,X.OFC_RHQ_CD         	AS OFC_RHQ_CD
				   ,X.TO_MVMT_DT		 	AS TO_MVMT_DT
				   ,X.DMDT_TRF_CD        	AS DMDT_TRF_CD
				   ,SUM(TTL_CNTR)        	AS TTL_CNTR
				   ,X.CURR_CD            	AS CURR_CD
				   ,SUM(X.INCR_CNTR  )   	AS INCR_CNTR
				   ,SUM(X.INCR_AMT   )   	AS INCR_AMT
				   ,SUM(X.CMDT_CNTR  )   	AS CMDT_CNTR
				   ,SUM(X.CMDT_AMT   )   	AS CMDT_AMT
				   ,SUM(X.EXPT_CNTR  )   	AS EXPT_CNTR
				   ,SUM(X.EXPT_AMT   )   	AS EXPT_AMT
				   ,SUM(X.DC_CNTR    )   	AS DC_CNTR
				   ,SUM(X.DC_AMT     )   	AS DC_AMT
				   ,SUM(X.BILL_CNTR1 )   	AS BILL_CNTR1
				   ,SUM(X.BILL_AMT1  )   	AS BILL_AMT1
				   ,SUM(X.BILL_CNTR  )   	AS BILL_CNTR
				   ,SUM(X.BILL_AMT   )   	AS BILL_AMT
				   ,SUM(X.INV_CNTR   )   	AS INV_CNTR
				   ,SUM(X.INV_AMT    )   	AS INV_AMT
				   ,SUM(X.INV_IF_CNTR )  	AS INV_IF_CNTR
				   ,SUM(X.INV_IF_AMT   ) 	AS INV_IF_AMT
				   ,SUM(X.COLL_CNTR )    	AS COLL_CNTR
				   ,SUM(X.COLL_AMT   )   	AS COLL_AMT
				   ,SUM(X.INV_PAY_CNTR ) 	AS INV_PAY_CNTR
				   ,SUM(X.INV_PAY_AMT)   	AS INV_PAY_AMT

			  FROM (

						SELECT  #if (${grp_flg} == 'R')
							    DECODE(C.OFC_RHQ_CD, 'NYCHQ', 'NYCRA', C.OFC_RHQ_CD) AS OFC_CD
								#else
								C.OFC_CD AS OFC_CD
								#end
							   ,C.OFC_RHQ_CD 					AS OFC_RHQ_CD
							   ,TO_CHAR(C.TO_MVMT_DT, 'YYYYMM') AS TO_MVMT_DT
							   ,C.DMDT_TRF_CD
							   ,COUNT(C.CNTR_NO) 				AS TTL_CNTR
							   ,DECODE( @[curr_flg], 'U', 'USD', C.BZC_TRF_CURR_CD ) CURR_CD
							   ,SUM ( DECODE( NVL(C.ORG_CHG_AMT, 0), 0, 0, 1 ) ) 	INCR_CNTR
							   ,SUM ( ROUND ( DECODE( @[curr_flg], 'U', C.ORG_CHG_AMT  / F.USD_LOCL_XCH_RT, C.ORG_CHG_AMT  ) , 2 )) INCR_AMT
							   ,SUM ( DECODE( NVL(C.CMDT_EXPT_AMT, 0), 0, 0, 1 ) ) CMDT_CNTR
							   ,SUM ( ROUND ( DECODE( @[curr_flg], 'U', NVL(C.CMDT_EXPT_AMT, 0) / F.USD_LOCL_XCH_RT, NVL(C.CMDT_EXPT_AMT, 0) ) , 2 )) CMDT_AMT
							   ,SUM ( DECODE( NVL(C.SC_RFA_EXPT_AMT, 0), 0, 0, 1 ) ) EXPT_CNTR
							   ,SUM ( ROUND ( DECODE( @[curr_flg], 'U', C.SC_RFA_EXPT_AMT / F.USD_LOCL_XCH_RT, C.SC_RFA_EXPT_AMT) , 2 )) EXPT_AMT
							   ,SUM ( DECODE( NVL(C.AFT_EXPT_DC_AMT, 0), 0, 0, 1 ) ) DC_CNTR
							   ,SUM ( ROUND ( DECODE( @[curr_flg], 'U', C.AFT_EXPT_DC_AMT  / F.USD_LOCL_XCH_RT, C.AFT_EXPT_DC_AMT  ) , 2 )) DC_AMT
							   /* BILLABLE1 */
							   ,SUM( DECODE( NVL(( C.BIL_AMT + NVL(C.AFT_EXPT_DC_AMT,0) ) , 0), 0, 0, 1 ) ) BILL_CNTR1
							   ,SUM( ROUND( DECODE( @[curr_flg], 'U', ( C.BIL_AMT + NVL(C.AFT_EXPT_DC_AMT,0) ) / F.USD_LOCL_XCH_RT, ( C.BIL_AMT + NVL(C.AFT_EXPT_DC_AMT,0) ) ), 2 )) BILL_AMT1
							   
								/* BILLABLE2 */				   
								,SUM( DECODE( NVL(C.BIL_AMT, 0), 0, 0, 1 ) ) BILL_CNTR
								,SUM( ROUND( DECODE( @[curr_flg], 'U', C.BIL_AMT / F.USD_LOCL_XCH_RT, C.BIL_AMT ), 2 )) BILL_AMT
			
								/* INVOICE */			
								,SUM( DECODE( V.DMDT_INV_STS_CD, 'I', 1, 0 )) INV_CNTR
								,SUM( ROUND( DECODE( V.DMDT_INV_STS_CD, 'I', DECODE( @[curr_flg], 'U', C.BIL_AMT / F.USD_LOCL_XCH_RT, C.BIL_AMT), 0), 2 )) INV_AMT
								
								/* COLLECTION */
								,SUM(	CASE 
											WHEN NVL((   SELECT  ATTR_CTNT1 
														  FROM  DMT_HRD_CDG_CTNT H 
														 WHERE  HRD_CDG_ID = 'AUTO_AR_IF_OFC' 
														   AND  ATTR_CTNT1 = V.CRE_OFC_CD ),'N') = 'N' THEN 
												DECODE( V.DMDT_AR_IF_CD, 'Y', 1, 0 )
											ELSE 
												0 
										END 
								) AS COLL_CNTR
							   ,SUM( ROUND(	
											CASE 
												WHEN NVL(( 	SELECT  ATTR_CTNT1 
															  FROM  DMT_HRD_CDG_CTNT H 
															 WHERE  HRD_CDG_ID = 'AUTO_AR_IF_OFC' 
															   AND  ATTR_CTNT1 = V.CRE_OFC_CD ),'N') = 'N' THEN 
													DECODE (V.DMDT_AR_IF_CD, 'Y', DECODE( @[curr_flg], 'U', C.BIL_AMT / F.USD_LOCL_XCH_RT, C.BIL_AMT ) , 0 ) 
												ELSE 
													0 
												END, 2)
								) COLL_AMT
								/* INVOICE AR IF  */								
							   ,SUM( DECODE( V.DMDT_AR_IF_CD, 'Y', 1, 0 ) ) INV_IF_CNTR
							   ,SUM( ROUND(	DECODE (V.DMDT_AR_IF_CD, 'Y', DECODE( @[curr_flg], 'U', C.BIL_AMT / F.USD_LOCL_XCH_RT, C.BIL_AMT ), 0 ), 2 )) INV_IF_AMT
							   ,SUM( ROUND(CASE WHEN V.BIL_AMT != 0 AND NVL(( SELECT MIN(DECODE(AA.CRE_USR_ID,'ERP_MIG','N','Y')) FROM DMT_INV_OTS_PAY_RCV AA
												   WHERE AA.DMDT_INV_NO = V.DMDT_INV_NO
													 AND INV_PAY_RCV_SEQ < 2000000 ),'N') = 'N' THEN
												ROUND(NVL(( SELECT SUM(DECODE( @[curr_flg], 'U', ( AA.INV_PAY_AMT*C.BIL_AMT/V.BIL_AMT/V.INV_XCH_RT ) / F.USD_LOCL_XCH_RT, AA.INV_PAY_AMT*C.BIL_AMT/V.BIL_AMT/V.INV_XCH_RT )) 
															  FROM DMT_INV_OTS_PAY_RCV AA
															 WHERE AA.DMDT_INV_NO = V.DMDT_INV_NO
															   AND ( AA.INV_PAY_RCV_SEQ >= 2000000 OR AA.CRE_USR_ID = 'ERP_MIG' )
															   AND AA.DMDT_INV_PAY_TP_CD = 'M'
											 ),0), 2 )                       
									   WHEN V.BIL_AMT != 0 AND NVL(( SELECT MIN(DECODE(AA.CRE_USR_ID,'ERP_MIG','N','Y')) FROM DMT_INV_OTS_PAY_RCV AA
												   WHERE AA.DMDT_INV_NO = V.DMDT_INV_NO
													 AND INV_PAY_RCV_SEQ < 2000000                                      
													 AND AA.DMDT_INV_PAY_TP_CD = 'M'),'N') = 'Y'  THEN DECODE (V.DMDT_AR_IF_CD, 'Y', DECODE( @[curr_flg], 'U', C.BIL_AMT / F.USD_LOCL_XCH_RT, C.BIL_AMT ) , 0 )
									   ELSE 0 END ,2)) AS INV_PAY_AMT
							   ,SUM(CASE WHEN NVL(( SELECT SUM(AA.INV_PAY_AMT)
										   FROM DMT_INV_OTS_PAY_RCV AA
										  WHERE AA.DMDT_INV_NO = V.DMDT_INV_NO
											AND ( AA.INV_PAY_RCV_SEQ >= 2000000 OR AA.CRE_USR_ID = 'ERP_MIG' )
											AND AA.DMDT_INV_PAY_TP_CD = 'M'  ), 0) != 0 THEN 1
									  WHEN NVL(( SELECT MIN(DECODE(AA.CRE_USR_ID,'ERP_MIG','N','Y')) FROM DMT_INV_OTS_PAY_RCV AA
													WHERE AA.DMDT_INV_NO = V.DMDT_INV_NO
													  AND ( AA.INV_PAY_RCV_SEQ < 2000000 AND AA.CRE_USR_ID != 'ERP_MIG' )
													  AND AA.DMDT_INV_PAY_TP_CD = 'M' ),'N') = 'Y' THEN DECODE( V.DMDT_AR_IF_CD, 'Y', 1, 0 )
									 ELSE 0 END ) INV_PAY_CNTR
					 
					 
						  FROM  DMT_CHG_CALC	  C
							   ,DMT_INV_MN		  V
							   ,DMT_CHG_BKG_CNTR  B
							   ,GL_MON_XCH_RT	  F

						 WHERE  C.TO_MVMT_DT BETWEEN TO_DATE(@[start_dt],'YYYYMMDD') +.0  AND TO_DATE(@[end_dt],'YYYYMMDD') + .99999
						   AND  C.DMDT_CHG_STS_CD IN ( 'F' ,'C', 'I', 'N')
						   
						   -- 조건추가(S) 2013.10.23
						   #if(${uclm_flg} != 'ALL')          
						   AND  NVL(C.UCLM_FLG, 'N') = @[uclm_flg]
						   #end
						   
						   -- 조건추가(E)
						   #if (${ofc_flg} == 'O')
						   AND  C.OFC_CD IN (
								#foreach( $an_ofc in ${ofc_cd_list} )
									#if($velocityCount < $ofc_cd_list.size()) '$an_ofc', #else '$an_ofc' #end
								#end
								)
						   #elseif (${ofc_flg} == 'R' && ${ofc_cd} != 'All')
						   AND  C.OFC_RHQ_CD = @[ofc_cd]
						   #end

						   AND  C.DMDT_TRF_CD IN (
								#foreach( $trf_cd in ${trf_cd_list} )
									#if($velocityCount < $trf_cd_list.size()) '$trf_cd', #else '$trf_cd' #end
								#end
								)
						   AND  ( C.ORG_CHG_AMT > 0 OR C.BIL_AMT > 0 )
						   AND  C.SYS_AREA_GRP_ID	= B.SYS_AREA_GRP_ID
						   AND  C.CNTR_NO			= B.CNTR_NO
						   AND  C.CNTR_CYC_NO		= B.CNTR_CYC_NO
						   AND  C.DMDT_INV_NO		=	V.DMDT_INV_NO(+)
						   AND  C.DMDT_CHG_LOC_DIV_CD <> 'SZP'	-- 2010/03/18 추가
						   -- 2010/03/25 추가
						   AND  (
									(C.DUL_TP_EXPT_FLG = 'Y' AND SUBSTR(C.DMDT_TRF_CD, 1, 1) = 'C') OR (C.DUL_TP_EXPT_FLG = 'N')
								)
						   AND  (
									(C.DMDT_CHG_STS_CD <> 'I') OR (C.DMDT_CHG_STS_CD = 'I' AND V.DMDT_INV_STS_CD = 'I' AND V.DMDT_AR_IF_CD <> 'H')
								)

						   #if (${dmdt_cntr_tp_cd} != 'A')
						   AND  B.DMDT_CNTR_TP_CD IN (
								#foreach( $cntr_tp in ${cntr_tp_list} )
									#if ($cntr_tp == 'S')
									'F', 'O', 'T', 'P', 'S', 'A'
									#elseif ($cntr_tp == 'D' || $cntr_tp == 'R')
									'$cntr_tp'
									#end
									#if($velocityCount < $cntr_tp_list.size()) , #end
								#end
								)
						   #end

						   AND  F.ACCT_XCH_RT_YRMON	= TO_CHAR(C.TO_MVMT_DT,'YYYYMM')
						   AND  F.ACCT_XCH_RT_LVL	= '1'
						   AND  F.CURR_CD          	= C.BZC_TRF_CURR_CD		

						GROUP BY #if (${grp_flg} == 'R')
								 DECODE(C.OFC_RHQ_CD, 'NYCHQ', 'NYCRA', C.OFC_RHQ_CD)
								 #else
								 C.OFC_CD
								 #end
				                ,C.OFC_RHQ_CD
				                ,TO_CHAR(C.TO_MVMT_DT, 'YYYYMM')
				                ,C.DMDT_TRF_CD
				                ,DECODE( @[curr_flg], 'U', 'USD', C.BZC_TRF_CURR_CD )
				                ,V.DMDT_INV_STS_CD
					) X

			GROUP BY X.OFC_CD
			        ,X.OFC_RHQ_CD
					,X.TO_MVMT_DT
					,X.DMDT_TRF_CD
					,X.CURR_CD
		) Y

ORDER BY SUBSTR(TO_MVMT_DT, 0, 4)
        ,SUBSTR(TO_MVMT_DT, 5, 2)
        ,OFC_RHQ_CD
        ,OFC_CD			]]></sql>
			<params>
				<param name="curr_flg" type="12" value="" out="N"/>
				<param name="start_dt" type="12" value="" out="N"/>
				<param name="end_dt" type="12" value="" out="N"/>
				<param name="uclm_flg" type="12" value="" out="N"/>
				<param name="ofc_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
