<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="SurplusAreaDBDAOSearchBkgSurplusAreaRSQL">
			<desc><![CDATA[Surplus Area - Yard 의 BKG for OP Ref 팝업 데이터를 조회함]]></desc>
			<sql><![CDATA[
WITH 
SIM_TP_CD_DATA AS (
    SELECT 3 GRP_CD, 1 SORT, 'OP' CODE, 'OP' NAME FROM DUAL
)
,
SIM_SS_DATA AS (
    SELECT 
        S.GRP_CD, S.SORT, S.CODE, S.NAME, Q.LOC_CD
        , Q.CNTR_TPSZ_CD, Q.FCAST_YRWK
        , SUM(NVL(DECODE(Q.INVT_SIM_TP_CD,S.CODE,Q.QTY,0),0)) QTY
    FROM SIM_TP_CD_DATA S, (
        SELECT
        #if (${loc_type_code} == '2') --RCC (by Country)
            SUBSTR(Q.YD_CD,1,2)
        #elseif (${loc_type_code} == '3') --RCC (by LCC)
            B.LCC_CD
        #elseif (${loc_type_code} == '4') --LCC (by ECC)
            B.ECC_CD
        #elseif (${loc_type_code} == '5') --LCC (by SCC)
            B.SCC_CD
        #elseif (${loc_type_code} == '6') --ECC (by SCC)
            B.SCC_CD
        #elseif (${loc_type_code} == '7') --SCC (by Yard)
            Q.YD_CD
        #elseif (${loc_type_code} == '8') --RCC (by ECC)
            B.ECC_CD
        #end    
            LOC_CD
            , Q.INVT_SIM_TP_CD
            , Q.CNTR_TPSZ_CD, Q.FCAST_YRWK
            , SUM(NVL(Q.CNTR_QTY,0)) QTY
        FROM (
            SELECT
            Q.YD_CD, 
			CASE
			WHEN Q.FCAST_YRWK >= @[curr_yrwk] --(SELECT MAX(W.PLN_YR||W.PLN_WK) FROM EQR_WK_PRD W WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN W.WK_ST_DT AND W.WK_END_DT) 
			THEN 
		    	CASE
			    WHEN SQ.FCAST_YRWK IS NOT NULL 
			    THEN Q.INVT_SIM_TP_CD
			    ELSE DECODE(Q.INVT_SIM_TP_CD,'OF','OP','OP','XX','MF','MG','MG','XX',Q.INVT_SIM_TP_CD) --Q.INVT_SIM_TP_CD DECODE(Q.INVT_SIM_TP_CD,'OF','OP','OP','XX','MF','MG','MG','XX',Q.INVT_SIM_TP_CD)
			    END
			ELSE Q.INVT_SIM_TP_CD
			END INVT_SIM_TP_CD ,  
			Q.CNTR_TPSZ_CD, Q.FCAST_YRWK, NVL(SQ.CNTR_QTY,Q.CNTR_QTY) CNTR_QTY
            FROM EQR_CTRL_INVT_SIM_DTL D, EQR_CTRL_INVT_SIM_DTL_QTY Q
               , ( SELECT Q.FCAST_YRWK, Q.YD_CD, Q.INVT_SIM_TP_CD, Q.CNTR_TPSZ_CD, Q.CNTR_QTY, Q.TMP_SAV_FLG, Q.CRE_DT, Q.UPD_DT  
                   FROM EQR_CTRL_INVT_SIM S, EQR_CTRL_INVT_SIM_QTY Q
                   WHERE 1=1
                   AND S.FCAST_YRWK = Q.FCAST_YRWK
                   AND S.YD_CD = Q.YD_CD
                   AND S.INVT_SIM_TP_CD = Q.INVT_SIM_TP_CD 
                   AND Q.FCAST_YRWK >= @[curr_yrwk] --(SELECT MAX(W.PLN_YR||W.PLN_WK) FROM EQR_WK_PRD W WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN W.WK_ST_DT AND W.WK_END_DT)
                   AND Q.UPD_DT >= (SELECT TO_DATE(W.WK_ST_DT,'YYYYMMDD')+(1+5/24) BAT_MND FROM EQR_WK_PRD W WHERE W.PLN_YR = SUBSTR(@[curr_yrwk],1,4) AND W.PLN_WK = SUBSTR(@[curr_yrwk],5))
                 ) SQ
            WHERE 1=1
            AND D.FCAST_YRWK = Q.FCAST_YRWK
            AND D.YD_CD = Q.YD_CD
            AND D.INVT_SIM_TP_CD = Q.INVT_SIM_TP_CD
            AND D.FCAST_YRWK = Q.FCAST_YRWK
            AND Q.FCAST_YRWK BETWEEN @[fm_yrwk] AND @[to_yrwk]
            AND Q.FCAST_YRWK = SQ.FCAST_YRWK(+)
            AND Q.YD_CD = SQ.YD_CD(+)
            AND Q.INVT_SIM_TP_CD = SQ.INVT_SIM_TP_CD(+)
            AND Q.CNTR_TPSZ_CD = SQ.CNTR_TPSZ_CD(+)
            GROUP BY Q.YD_CD, Q.INVT_SIM_TP_CD, Q.CNTR_TPSZ_CD, Q.FCAST_YRWK, NVL(SQ.CNTR_QTY,Q.CNTR_QTY), SQ.FCAST_YRWK
            UNION ALL
            SELECT 
            Q.YD_CD, 
			Q.INVT_SIM_TP_CD INVT_SIM_TP_CD , 
			Q.CNTR_TPSZ_CD, Q.FCAST_YRWK, Q.CNTR_QTY
            FROM EQR_CTRL_INVT_SIM S, EQR_CTRL_INVT_SIM_QTY Q
            WHERE 1=1
            AND S.FCAST_YRWK = Q.FCAST_YRWK
            AND S.YD_CD = Q.YD_CD
            AND S.INVT_SIM_TP_CD = Q.INVT_SIM_TP_CD 
            AND S.FCAST_YRWK = Q.FCAST_YRWK
            AND Q.FCAST_YRWK >= @[curr_yrwk] --(SELECT MAX(W.PLN_YR||W.PLN_WK) FROM EQR_WK_PRD W WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN W.WK_ST_DT AND W.WK_END_DT)
            AND Q.UPD_DT >= (SELECT TO_DATE(W.WK_ST_DT,'YYYYMMDD')+(1+5/24) BAT_MND FROM EQR_WK_PRD W WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN W.WK_ST_DT AND W.WK_END_DT)
            AND NOT EXISTS (
                SELECT 'X' 
                FROM EQR_CTRL_INVT_SIM_DTL_QTY X
                WHERE 1=1
                AND X.FCAST_YRWK = Q.FCAST_YRWK
                AND X.YD_CD = Q.YD_CD
                AND X.INVT_SIM_TP_CD = Q.INVT_SIM_TP_CD
                AND X.CNTR_TPSZ_CD = Q.CNTR_TPSZ_CD
            )
            GROUP BY Q.YD_CD, Q.INVT_SIM_TP_CD, Q.CNTR_TPSZ_CD, Q.FCAST_YRWK, Q.CNTR_QTY
        ) Q, MDM_LOCATION A, MDM_EQ_ORZ_CHT B
        WHERE 1=1
            AND A.LOC_CD = SUBSTR(Q.YD_CD,1,5)
            AND A.SCC_CD = B.SCC_CD
            AND NVL(A.DELT_FLG,'N') <> 'Y'
            AND NVL(B.DELT_FLG,'N') <> 'Y'
        #if (${loc_type_code} == '2') --RCC (by Country)
            AND B.RCC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '3') --RCC (by LCC)          
            AND B.RCC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '4') --LCC (by ECC)
            AND B.LCC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '5') --LCC (by SCC)
            AND B.LCC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '6') --ECC (by SCC)
            AND B.ECC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '7') --SCC (by Yard)
            AND B.SCC_CD =@[loc_cd]
        #elseif (${loc_type_code} == '8') --RCC (by ECC)          
            AND B.RCC_CD =@[loc_cd]
        #end         
        GROUP BY 
        #if (${loc_type_code} == '2') --RCC (by Country)
            SUBSTR(Q.YD_CD,1,2)
        #elseif (${loc_type_code} == '3') --RCC (by LCC)          
            B.LCC_CD
        #elseif (${loc_type_code} == '4') --LCC (by ECC)
            B.ECC_CD
        #elseif (${loc_type_code} == '5') --LCC (by SCC)
            B.SCC_CD
        #elseif (${loc_type_code} == '6') --ECC (by SCC)
            B.SCC_CD
        #elseif (${loc_type_code} == '7') --SCC (by Yard)
            Q.YD_CD
        #elseif (${loc_type_code} == '8') --RCC (by ECC)          
            B.ECC_CD
        #end      
            , Q.INVT_SIM_TP_CD, Q.CNTR_TPSZ_CD, Q.FCAST_YRWK 
    ) Q         
    GROUP BY S.GRP_CD, S.SORT, S.CODE, S.NAME, Q.LOC_CD, Q.CNTR_TPSZ_CD, Q.FCAST_YRWK
)
SELECT
A.LOC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT
#foreach($key in ${arrweek}) 
, MAX(A.D2_$key) D2_$key, MAX(A.D4_$key) D4_$key, MAX(A.D5_$key) D5_$key, MAX(A.D7_$key) D7_$key, MAX(A.R2_$key) R2_$key, MAX(A.R5_$key) R5_$key
, MAX(A.R9_$key) R9_$key, MAX(A.O2_$key) O2_$key, MAX(A.O4_$key) O4_$key, MAX(A.S2_$key) S2_$key, MAX(A.S4_$key) S4_$key, MAX(A.F2_$key) F2_$key
, MAX(A.F4_$key) F4_$key, MAX(A.F5_$key) F5_$key, MAX(A.A2_$key) A2_$key, MAX(A.A4_$key) A4_$key, MAX(A.A5_$key) A5_$key
#end
FROM (
SELECT
 CASE WHEN GROUPING(R.LOC_CD)='1' THEN 'TTL' ELSE R.LOC_CD END LOC_CD
, R.CODE, R.NAME, R.GRP_CD, R.SORT
#foreach($key in ${arrweek})
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END D2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D4$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END D4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D5$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END D5_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D7$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END D7_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END R2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R5$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END R5_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R9$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END R9_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='O2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END O2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='O4$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END O4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='S2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END S2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='S4$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END S4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END F2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F4$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END F4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F5$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END F5_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='A2$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END A2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='A4$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END A4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='A5$key' THEN DECODE(R.GRP_CD,'5',DECODE(GROUPING(R.LOC_CD),'1',TO_NUMBER(''),MAX(NVL((R.QTY),0))),SUM(NVL(R.QTY,0))) ELSE 0 END A5_$key
#end
FROM SIM_SS_DATA R 
GROUP BY GROUPING SETS ((R.GRP_CD, R.SORT, R.CODE, R.NAME, R.CNTR_TPSZ_CD, R.FCAST_YRWK),(R.LOC_CD, R.GRP_CD, R.SORT, R.CODE, R.NAME, R.CNTR_TPSZ_CD, R.FCAST_YRWK))
) A
GROUP BY A.LOC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT
ORDER BY CASE WHEN A.LOC_CD ='TTL' THEN 'AAAAA' ELSE A.LOC_CD END, A.GRP_CD, A.SORT			]]></sql>
			<params>
				<param name="curr_yrwk" type="12" value="" out="N"/>
				<param name="fm_yrwk" type="12" value="" out="N"/>
				<param name="to_yrwk" type="12" value="" out="N"/>
				<param name="loc_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
