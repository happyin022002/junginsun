<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="MTYWeeklySimulationDBDAOsearchMtyWeeklySimulationReportRSQL">
			<desc><![CDATA[weekly simulation 의 과거 주차 조회]]></desc>
			<sql><![CDATA[
SELECT CASE WHEN LOC_CD IS NULL THEN 'TOTAL'
			ELSE LOC_CD||'('||LOC_GRP_CD||')' END  LOC_CD
	  ,LOC_GRP_CD
	  ,CODE
  	  ,NAME
	  ,SORT
      ,CASE WHEN LOC_CD IS NULL THEN NULL
			ELSE '+' END TREE
#foreach( $key in ${arrweek})      
      ,D2$key
      ,D4$key
      ,D5$key
      ,D7$key
      ,DTOTAL_$key
      ,R2$key
      ,R5$key
      ,R9$key
      ,O2$key
      ,S2$key
      ,O4$key
      ,S2$key
      ,F2$key
      ,A2$key
      ,F4$key
      ,A4$key
      ,F5$key
      ,O5$key
      ,STOTAL_$key
      ,GTOTAL_$key
#end      
	  ,@[condition_value] ORI_LOC_CD
	  ,@[ori_loc_cd] ORI_ORI_LOC_CD
	  ,@[ori_ori_loc_cd] ORI_ORI_ORI_LOC_CD
FROM
(
--RCC : ALL일때 표현 (RCC : ALL)
#if ( ${condition_value} == '' && ${present_flag} == 'L')
SELECT A.RCC_CD LOC_CD
      ,'R' LOC_GRP_CD
      ,A.CODE
      ,A.NAME
      ,A.SORT
  #foreach( $key in ${arrweek})
      ,SUM(A.GTOTAL_$key) GTOTAL_$key
      ,SUM(A.DTOTAL_$key) DTOTAL_$key
      ,SUM(A.STOTAL_$key) STOTAL_$key
      ,NVL(SUM(A.D2$key),0) D2$key
      ,NVL(SUM(A.D4$key),0) D4$key
      ,NVL(SUM(A.D5$key),0) D5$key
      ,NVL(SUM(A.D7$key),0) D7$key
      ,NVL(SUM(A.R2$key),0) R2$key
      ,NVL(SUM(A.R5$key),0) R5$key
      ,NVL(SUM(A.R9$key),0) R9$key
      ,NVL(SUM(A.O2$key),0) O2$key
      ,NVL(SUM(A.O4$key),0) O4$key
      ,NVL(SUM(A.O5$key),0) O5$key
      ,NVL(SUM(A.S2$key),0) S2$key
      ,NVL(SUM(A.S4$key),0) S4$key
      ,NVL(SUM(A.F2$key),0) F2$key
      ,NVL(SUM(A.F4$key),0) F4$key
      ,NVL(SUM(A.F5$key),0) F5$key
      ,NVL(SUM(A.A2$key),0) A2$key
      ,NVL(SUM(A.A4$key),0) A4$key  
  #end      
FROM
(
#end

SELECT B.LOC_CD
      ,(SELECT DISTINCT RCC_CD FROM MDM_EQ_ORZ_CHT X WHERE X.LCC_CD = B.LOC_CD) RCC_CD
      ,B.LOC_GRP_CD
      ,B.CODE
      ,B.NAME
      ,B.SORT
#foreach( $key in ${arrweek})      
      -- 가변쿼리
      ,NVL(SUM(D2$key)+SUM(D4$key)+SUM(D5$key)+SUM(D7$key)+SUM(R2$key)+SUM(R5$key)+SUM(R9$key)+SUM(O2$key)+SUM(S2$key)+SUM(O4$key)+SUM(S4$key)+SUM(F2$key)+SUM(A2$key)+SUM(F4$key)+SUM(A4$key)+SUM(F5$key)+SUM(O5$key),0) GTOTAL_$key
      ,NVL(SUM(D2$key)+SUM(D4$key)+SUM(D5$key)+SUM(D7$key),0) DTOTAL_$key
      ,NVL(SUM(R2$key)+SUM(R5$key)+SUM(R9$key)+SUM(O2$key)+SUM(S2$key)+SUM(O4$key)+SUM(S4$key)+SUM(F2$key)+SUM(A2$key)+SUM(F4$key)+SUM(A4$key)+SUM(F5$key)+SUM(O5$key),0) STOTAL_$key         
      ,NVL(SUM(A.D2$key),0) D2$key
      ,NVL(SUM(A.D4$key),0) D4$key
      ,NVL(SUM(A.D5$key),0) D5$key
      ,NVL(SUM(A.D7$key),0) D7$key
      ,NVL(SUM(A.R2$key),0) R2$key
      ,NVL(SUM(A.R5$key),0) R5$key
      ,NVL(SUM(A.R9$key),0) R9$key
      ,NVL(SUM(A.O2$key),0) O2$key
      ,NVL(SUM(A.O4$key),0) O4$key
      ,NVL(SUM(A.O5$key),0) O5$key
      ,NVL(SUM(A.S2$key),0) S2$key
      ,NVL(SUM(A.S4$key),0) S4$key
      ,NVL(SUM(A.F2$key),0) F2$key
      ,NVL(SUM(A.F4$key),0) F4$key
      ,NVL(SUM(A.F5$key),0) F5$key
      ,NVL(SUM(A.A2$key),0) A2$key
      ,NVL(SUM(A.A4$key),0) A4$key    
#end
FROM
(
    SELECT A.LOC_CD
          ,A.LOC_GRP_CD
          ,A.WKY_SIM_TP_CD
#foreach( $key in ${arrweek})          
          -- 가변쿼리
    #if(${period} == 'W')
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'D2$key', A.CNTR_QTY),0)) D2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'D4$key', A.CNTR_QTY),0)) D4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'D5$key', A.CNTR_QTY),0)) D5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'D7$key', A.CNTR_QTY),0)) D7$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'R2$key', A.CNTR_QTY),0)) R2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'R5$key', A.CNTR_QTY),0)) R5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'R9$key', A.CNTR_QTY),0)) R9$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'O2$key', A.CNTR_QTY),0)) O2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'O4$key', A.CNTR_QTY),0)) O4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'O5$key', A.CNTR_QTY),0)) O5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'S2$key', A.CNTR_QTY),0)) S2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'S4$key', A.CNTR_QTY),0)) S4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'F2$key', A.CNTR_QTY),0)) F2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'F4$key', A.CNTR_QTY),0)) F4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'F5$key', A.CNTR_QTY),0)) F5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'A2$key', A.CNTR_QTY),0)) A2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'A4$key', A.CNTR_QTY),0)) A4$key
    #elseif(${period} == 'M')
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'D2$key', A.CNTR_QTY),0)) D2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'D4$key', A.CNTR_QTY),0)) D4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'D5$key', A.CNTR_QTY),0)) D5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'D7$key', A.CNTR_QTY),0)) D7$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'R2$key', A.CNTR_QTY),0)) R2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'R5$key', A.CNTR_QTY),0)) R5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'R9$key', A.CNTR_QTY),0)) R9$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'O2$key', A.CNTR_QTY),0)) O2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'O4$key', A.CNTR_QTY),0)) O4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'O5$key', A.CNTR_QTY),0)) O5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'S2$key', A.CNTR_QTY),0)) S2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'S4$key', A.CNTR_QTY),0)) S4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'F2$key', A.CNTR_QTY),0)) F2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'F4$key', A.CNTR_QTY),0)) F4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'F5$key', A.CNTR_QTY),0)) F5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'A2$key', A.CNTR_QTY),0)) A2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'A4$key', A.CNTR_QTY),0)) A4$key
    #end
#end
    FROM
    (
    #if(${period} == 'W')
        SELECT A.FCAST_YRWK WEEK
    #elseif(${period} == 'M')
        SELECT C.PLN_YR||C.PLN_MON MONTH
    #end
              ,A.LOC_CD
              ,A.LOC_GRP_CD
              ,A.WKY_SIM_TP_CD
              ,A.CNTR_TPSZ_CD
              ,A.CNTR_QTY     
        FROM EQR_MTY_WKY_SIM A
            ,(
             #if ( ${present_flag} == 'L') 
                 SELECT DISTINCT LCC_CD LOC_CD 
             #elseif( ${present_flag} == 'E' )
                 SELECT DISTINCT ECC_CD LOC_CD
             #else
                 SELECT DISTINCT SCC_CD LOC_CD  
             #end                 
                 FROM MDM_EQ_ORZ_CHT 
                 WHERE RCC_CD IN ('CNSHA', 'CNHKG', 'TWTPE', 'KRSEL', 'JPTYO', 'SGSIN') -- 하드코딩
                 AND  DELT_FLG = 'N'

           #if( ${condition_value} != '' ) -- RCC : ALL 일대는 쿼리 감춤
             #if(${condition_flag} == 'R')
        		 AND   RCC_CD = @[condition_value]

    		 #elseif( ${condition_flag} == 'L' )
                 #if    ( ${condition_value} == 'CNSZP' )
                 AND   ECC_CD IN ('CNCWN','CNSHU','CNYIT')
                 #elseif( ${condition_value} == 'JPTYO' )
                 AND   ECC_CD IN ('JPTYO','JPYOK')
                 #elseif( ${condition_value} == 'JPOSA' )
                 AND   ECC_CD IN ('JPOSA','JPUKB','JPNGO')
                 #else
                 AND   LCC_CD = @[condition_value]
                 #end

    		 #elseif( ${condition_flag} == 'E')
                 #if    ( ${condition_value} == 'CNCWN' )
                 AND   SCC_CD = 'CNCWN'
                 #elseif( ${condition_value} == 'KRPUS' )
                 AND   SCC_CD = 'KRPUS'
                 #elseif( ${condition_value} == 'KRKAN' )
                 AND   SCC_CD = 'KRKAN'
                 #else
        		 AND   ECC_CD = @[condition_value]        
                 #end 

    		 #else    --SCC
        		 AND   SCC_CD = @[condition_value]    
    		 #end
           #end
               
                 -- 지점 office 검색범위 (CDO_EQ, 지역본부 OFFICE 는 아래조건을 제거함)
             #if( ${level_cd} == '3' ) 
                 AND LCC_CD IN (
                                   SELECT LCC_CD
                                   FROM MDM_EQ_ORZ_CHT                         
                                   WHERE SCC_CD IN (                                     
                                                       SELECT SCC_CD                      
                                                       FROM MDM_LOCATION                  
                                                       WHERE LOC_CD IN ( SELECT LOC_CD FROM MDM_ORGANIZATION WHERE OFC_CD = @[ofc_cd] )                            
                                                   )      
                               )
             #end


             ) B
            ,EQR_WK_PRD C
        WHERE A.FCAST_YRWK = C.PLN_YR||C.PLN_WK  
        AND   A.CFM_FLG    = 'Y'  -- 배치를 통해 저장이 완료
        #if(${period} == 'W')   
        -- WEEK 일때  
        AND   C.PLN_YR||C.PLN_WK BETWEEN @[fmdate] AND @[todate] 
        #elseif(${period} == 'M')
        -- MONTH 일때
        AND   C.PLN_YR||C.PLN_MON BETWEEN @[fmdate] AND @[todate]   
        #end             
        AND   A.LOC_GRP_CD = @[present_flag] 
        AND   A.LOC_CD      = B.LOC_CD
    ) A
 
    GROUP BY A.LOC_CD
          ,A.LOC_GRP_CD
          ,A.WKY_SIM_TP_CD
    
    
    -- BALANCE REPORT 계산      
    UNION ALL

    SELECT A.LOC_CD
          ,A.LOC_GRP_CD
          ,'BA' WKY_SIM_TP_CD
#foreach( $key in ${arrweek})          
          -- 가변쿼리
    #if(${period} == 'W')
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'D2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) D2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'D4$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) D4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'D5$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) D5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'D7$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) D7$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'R2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) R2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'R5$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) R5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'R9$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) R9$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'O2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) O2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'O4$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) O4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'O5$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) O5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'S2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) S2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'S4$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) S4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'F2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) F2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'F4$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) F4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'F5$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) F5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'A2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) A2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.WEEK, 'A4$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) A4$key

    #elseif(${period} == 'M')

          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'D2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) D2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'D4$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) D4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'D5$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) D5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'D7$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) D7$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'R2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) R2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'R5$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) R5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'R9$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) R9$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'O2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) O2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'O4$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) O4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'O5$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) O5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'S2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) S2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'S4$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) S4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'F2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) F2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'F4$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) F4$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'F5$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) F5$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'A2$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) A2$key
          ,SUM(NVL(DECODE(A.CNTR_TPSZ_CD||A.MONTH, 'A4$key', NVL(DECODE(A.WKY_SIM_TP_CD, 'IN', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'RI', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'OT', A.CNTR_QTY),0)+NVL(DECODE(A.WKY_SIM_TP_CD, 'IF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'OF', A.CNTR_QTY),0)-NVL(DECODE(A.WKY_SIM_TP_CD, 'RO', A.CNTR_QTY),0)  ),0)) A4$key

    #end

#end
    FROM
    (
    #if(${period} == 'W')
        SELECT A.FCAST_YRWK WEEK
    #elseif(${period} == 'M')
        SELECT C.PLN_YR||C.PLN_MON MONTH
    #end
              ,A.LOC_CD
              ,A.LOC_GRP_CD
              ,A.WKY_SIM_TP_CD
              ,A.CNTR_TPSZ_CD
              ,A.CNTR_QTY     
        FROM EQR_MTY_WKY_SIM A
            ,(
           #if ( ${present_flag} == 'L') 
                 SELECT DISTINCT LCC_CD LOC_CD 
           #elseif( ${present_flag} == 'E' )
                 SELECT DISTINCT ECC_CD LOC_CD
           #else
                 SELECT DISTINCT SCC_CD LOC_CD  
           #end
                 
                 FROM MDM_EQ_ORZ_CHT 
                 WHERE RCC_CD IN ('CNSHA', 'CNHKG', 'TWTPE', 'KRSEL', 'JPTYO', 'SGSIN') -- 하드코딩
                 AND  DELT_FLG = 'N'

           #if( ${condition_value} != '' ) -- RCC : ALL 일대는 쿼리 감춤
             #if(${condition_flag} == 'R')
        		 AND   RCC_CD = @[condition_value]

    		 #elseif( ${condition_flag} == 'L' )
                 #if    ( ${condition_value} == 'CNSZP' )
                 AND   ECC_CD IN ('CNCWN','CNSHU','CNYIT')
                 #elseif( ${condition_value} == 'JPTYO' )
                 AND   ECC_CD IN ('JPTYO','JPYOK')
                 #elseif( ${condition_value} == 'JPOSA' )
                 AND   ECC_CD IN ('JPOSA','JPUKB','JPNGO')
                 #else
                 AND   LCC_CD = @[condition_value]
                 #end

    		 #elseif( ${condition_flag} == 'E')
                 #if    ( ${condition_value} == 'CNCWN' )
                 AND   SCC_CD = 'CNCWN'
                 #elseif( ${condition_value} == 'KRPUS' )
                 AND   SCC_CD = 'KRPUS'
                 #elseif( ${condition_value} == 'KRKAN' )
                 AND   SCC_CD = 'KRKAN'
                 #else
        		 AND   ECC_CD = @[condition_value]        
                 #end 

    		 #else    --SCC
        		 AND   SCC_CD = @[condition_value]    
    		 #end
           #end

                 -- 지점 office 검색범위 (CDO_EQ, 지역본부 OFFICE 는 아래조건을 제거함)
             #if( ${level_cd} == '3' ) 
                 AND LCC_CD IN (
                                   SELECT LCC_CD
                                   FROM MDM_EQ_ORZ_CHT                         
                                   WHERE SCC_CD IN (                                     
                                                       SELECT SCC_CD                      
                                                       FROM MDM_LOCATION                  
                                                       WHERE LOC_CD IN ( SELECT LOC_CD FROM MDM_ORGANIZATION WHERE OFC_CD = @[ofc_cd] )                            
                                                   )      
                               )
             #end
                
             ) B
            ,EQR_WK_PRD C
        WHERE A.FCAST_YRWK = C.PLN_YR||C.PLN_WK  
        AND   A.CFM_FLG    = 'Y'  -- 배치를 통해 저장이 완료
        #if(${period} == 'W')  
        -- WEEK 일때  
        AND   C.PLN_YR||C.PLN_WK BETWEEN @[fmdate] AND @[todate] 
        #elseif(${period} == 'M')
        -- MONTH 일때
        AND   C.PLN_YR||C.PLN_MON BETWEEN @[fmdate] AND @[todate]   
        #end
                  
        AND   A.LOC_GRP_CD = @[present_flag] 
        AND   A.LOC_CD      = B.LOC_CD
    ) A 
    GROUP BY A.LOC_CD
          ,A.LOC_GRP_CD
) A
,(
    SELECT A.LOC_CD
          ,B.CODE
          ,B.NAME
          ,B.SORT
          ,@[present_flag] LOC_GRP_CD
    FROM      
    (
      #if( ${present_flag} == 'L'  )  -- ALL
        SELECT DISTINCT LCC_CD LOC_CD
      #elseif( ${present_flag} == 'E' )   
        SELECT DISTINCT ECC_CD LOC_CD  
      #else  --SCC일때
        SELECT DISTINCT SCC_CD LOC_CD   
      #end       
        FROM MDM_EQ_ORZ_CHT
        WHERE RCC_CD IN ('CNSHA', 'CNHKG', 'TWTPE', 'KRSEL', 'JPTYO', 'SGSIN') -- 하드코딩
        AND  DELT_FLG = 'N'
        -- 지점 office 검색범위 (CDO_EQ, 지역본부 OFFICE 는 아래조건을 제거함)
      #if( ${level_cd} == '3' ) 
        AND LCC_CD IN (
                         SELECT LCC_CD
                         FROM MDM_EQ_ORZ_CHT                         
                         WHERE SCC_CD IN (                                     
                                             SELECT SCC_CD                      
                                             FROM MDM_LOCATION                  
                                             WHERE LOC_CD IN ( SELECT LOC_CD FROM MDM_ORGANIZATION WHERE OFC_CD = @[ofc_cd] )                            
                                          )      
                      )
      #end        
        
           #if( ${condition_value} != '' ) -- RCC : ALL 일대는 쿼리 감춤
             #if(${condition_flag} == 'R')
        		 AND   RCC_CD = @[condition_value]

    		 #elseif( ${condition_flag} == 'L' )
                 #if    ( ${condition_value} == 'CNSZP' )
                 AND   ECC_CD IN ('CNCWN','CNSHU','CNYIT')
                 #elseif( ${condition_value} == 'JPTYO' )
                 AND   ECC_CD IN ('JPTYO','JPYOK')
                 #elseif( ${condition_value} == 'JPOSA' )
                 AND   ECC_CD IN ('JPOSA','JPUKB','JPNGO')
                 #else
                 AND   LCC_CD = @[condition_value]
                 #end

    		 #elseif( ${condition_flag} == 'E')
                 #if    ( ${condition_value} == 'CNCWN' )
                 AND   SCC_CD = 'CNCWN'
                 #elseif( ${condition_value} == 'KRPUS' )
                 AND   SCC_CD = 'KRPUS'
                 #elseif( ${condition_value} == 'KRKAN' )
                 AND   SCC_CD = 'KRKAN'
                 #else
        		 AND   ECC_CD = @[condition_value]        
                 #end 

    		 #else    --SCC
        		 AND   SCC_CD = @[condition_value]    
    		 #end
           #end
        
    ) A,
    (
        SELECT 'IN' CODE, 'Inventory' NAME,       1 SORT FROM DUAL UNION ALL
        SELECT 'RI' CODE, 'Reposition In' NAME,   2 SORT FROM DUAL UNION ALL
        SELECT 'OT' CODE, 'Other(LT/ST/OW)' NAME, 3 SORT FROM DUAL UNION ALL
        SELECT 'IF' CODE, 'MG Forecast' NAME,     4 SORT FROM DUAL UNION ALL
        SELECT 'OF' CODE, 'OP Forecast' NAME,     5 SORT FROM DUAL UNION ALL
        SELECT 'RO' CODE, 'Reposition Out' NAME,  6 SORT FROM DUAL UNION ALL
        SELECT 'IC' CODE, 'IC' NAME,              7 SORT FROM DUAL UNION ALL  
        SELECT 'BA' CODE, 'Balance' NAME,         8 SORT FROM DUAL          
    ) B
    ORDER BY LOC_CD,SORT
) B
WHERE A.LOC_CD(+)        = B.LOC_CD
AND   A.WKY_SIM_TP_CD(+) = B.CODE

-- RCC : ALL일때 표현 (RCC : ALL)
#if ( ${condition_value} == '' && ${present_flag} == 'L')  
GROUP BY B.LOC_CD -- LOC CD 별 전체합
#else
GROUP BY ROLLUP(B.LOC_CD)
#end
      ,B.LOC_GRP_CD
      ,B.CODE
      ,B.NAME
      ,B.SORT

-- RCC : ALL일때 표현 (RCC : ALL)
#if ( ${condition_value} == '' && ${present_flag} == 'L')        
) A
GROUP BY ROLLUP(A.RCC_CD) -- RCC CD 별 전체합
        ,A.LOC_GRP_CD
        ,A.CODE
        ,A.NAME
        ,A.SORT
#end      
ORDER BY 1
        ,SORT
)			]]></sql>
			<params>
				<param name="condition_value" type="12" value="" out="N"/>
				<param name="ori_loc_cd" type="12" value="" out="N"/>
				<param name="ori_ori_loc_cd" type="12" value="" out="N"/>
				<param name="ofc_cd" type="12" value="" out="N"/>
				<param name="fmdate" type="12" value="" out="N"/>
				<param name="todate" type="12" value="" out="N"/>
				<param name="present_flag" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
