<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ChassisMgsetInvoiceDBDAOAddCHSChargeCreatePDMDataCSQL">
			<desc><![CDATA[ChassisMgsetInvoiceDB.AddCHSChargeCreatePDMData]]></desc>
			<sql><![CDATA[
INSERT INTO CGM_LSE_CHG_DTL
(
    AGMT_OFC_CTY_CD,
    AGMT_SEQ,
    AGMT_VER_NO,
    COST_YRMON,
    EQ_NO,
    CHG_CD,
    CHG_SEQ,
    EQ_KND_CD,
    LSE_CHG_AUD_STS_CD,
    LSE_USE_DYS,
    LSE_RT_AMT,
    LSE_CHG_AMT,
    EQ_ONH_DT,
    EQ_ONH_LOC_CD,
    EQ_OFFH_DT,
    EQ_OFFH_LOC_CD,
    EQ_BIL_ST_DT,
    EQ_BIL_END_DT,
	PAY_LSE_CHG_STS_CD,
	COST_CD,
	ACCT_CD,
    CRE_USR_ID,
    CRE_DT,
    UPD_USR_ID,
    UPD_DT
)
SELECT
    T1.AGMT_OFC_CTY_CD,
    T1.AGMT_SEQ,
    MAX(T1.AGMT_VER_NO) AS AGMT_VER_NO,
    MIN(T1.COST_YRMON) AS COST_YRMON,
    T1.EQ_NO,
    MIN(T1.CHG_CD) AS CHG_CD,
--    MIN(T1.CHG_SEQ) AS CHG_SEQ,
    ROW_NUMBER() OVER ( PARTITION BY T1.EQ_NO ORDER BY MIN(EQ_BIL_ST_DT)  ) AS CHG_SEQ,
    MIN(T1.EQ_KND_CD) AS EQ_KND_CD,
    MIN(T1.LSE_CHG_AUD_STS_CD) AS LSE_CHG_AUD_STS_CD,
    NVL(SUM(T1.LSE_USE_DAYS),0) AS LSE_USE_DAYS,
    T1.LSE_RT_AMT  AS LSE_RT_AMT,
    NVL(SUM(T1.LSE_USE_DAYS * T1.LSE_RT_AMT),0) AS LSE_CHG_AMT,
    MIN(T1.EQ_ONH_DT) AS EQ_ONH_DT,
    MIN(T1.EQ_ONH_LOC_CD) AS EQ_ONH_LOC_CD,
    MIN(T1.EQ_OFFH_DT) AS EQ_OFFH_DT,
    MIN(T1.EQ_OFFH_LOC_CD) AS EQ_OFFH_LOC_CD,
    TO_DATE( TO_CHAR( MIN(T1.EQ_BIL_ST_DT), 'YYYYMMDD') ,'YYYYMMDD')     AS EQ_BIL_ST_DT,
    MAX(T1.EQ_BIL_END_DT) AS EQ_BIL_END_DT,
	MIN(T1.PAY_LSE_CHG_STS_CD) AS PAY_LSE_CHG_STS_CD,
	MIN(T1.COST_CD) AS COST_CD,
	MIN(T1.ACCT_CD) AS ACCT_CD,
	@[cre_usr_id],
    SYSDATE,
    @[upd_usr_id],
    SYSDATE    
FROM
(

    SELECT
        A.AGMT_OFC_CTY_CD,
        A.AGMT_SEQ,
        MAX(A.AGMT_VER_NO) over ( PARTITION BY  A.AGMT_OFC_CTY_CD, A.AGMT_SEQ, A.EQ_NO) AS AGMT_VER_NO,
        A.COST_YRMON,
        A.EQ_NO,
        A.CHG_CD,
--        A.CHG_SEQ,
        A.EQ_KND_CD,
        A.LSE_CHG_AUD_STS_CD,
		A.PAY_LSE_CHG_STS_CD,
        B.LSE_USE_DAYS,
        A.LSE_RT_AMT,
--        MAX(A.LSE_RT_AMT) KEEP 
--            (DENSE_RANK LAST ORDER BY A.AGMT_OFC_CTY_CD, A.AGMT_SEQ,A.EQ_NO,A.AGMT_VER_NO) 
--                over (partition by A.AGMT_OFC_CTY_CD, A.AGMT_SEQ, A.EQ_NO) AS LSE_RT_AMT2,
                
        B.LSE_USE_DAYS * A.LSE_RT_AMT AS LSE_CHG_AMT,
        C.STS_EVNT_DT AS EQ_ONH_DT,
        C.STS_EVNT_LOC_CD AS EQ_ONH_LOC_CD,
        GREATEST ( B.EFF_DT,B.STS_EVNT_DT_FR ) EQ_BIL_ST_DT,
        LEAST ( B.EXP_DT,B.STS_EVNT_DT_TO ) EQ_BIL_END_DT,
        B.EQ_ASET_STS_CD,
        DECODE(  SUBSTR(B.EQ_ASET_STS_CD,1,3), 'LSO',   LAST_VALUE( B.STS_EVNT_DT) over (PARTITION BY  B.AGMT_OFC_CTY_CD, B.AGMT_SEQ, B.EQ_NO,B.EQ_ASET_STS_CD ORDER BY B.STS_EVNT_DT ))  as EQ_OFFH_DT,
	DECODE(  SUBSTR(B.EQ_ASET_STS_CD,1,3), 'LSO',   LAST_VALUE( B.STS_EVNT_LOC_CD) over (PARTITION BY  B.AGMT_OFC_CTY_CD, B.AGMT_SEQ, B.EQ_NO,B.EQ_ASET_STS_CD ORDER BY B.STS_EVNT_DT ))  as EQ_OFFH_LOC_CD,
        A.COST_CD,
        A.ACCT_CD
    FROM
    (
        SELECT  
                T1.AGMT_OFC_CTY_CD,
                T1.AGMT_SEQ,
                T1.AGMT_VER_NO,
                T1.EFF_DT,
                T1.EXP_DT,
                @[cost_yrmon] AS COST_YRMON,
                T2.EQ_NO,
                'PDM' AS CHG_CD,
--                ROW_NUMBER() OVER ( PARTITION BY T2.EQ_NO ORDER BY T1.AGMT_VER_NO ) AS CHG_SEQ,
                'Z' AS EQ_KND_CD,
                'H' AS LSE_CHG_AUD_STS_CD,
				'H' AS PAY_LSE_CHG_STS_CD,
				CASE 
				    WHEN T1.AGMT_LSTM_CD = 'ST' THEN 'EQCZLT'
				    WHEN T1.AGMT_LSTM_CD = 'LT' THEN 'EQCZLT'
				    WHEN T1.AGMT_LSTM_CD = 'LP' THEN 'EQCZLP'
				    ELSE 'EQCZLT'
				END AS COST_CD,
				CASE 
				    WHEN T1.AGMT_LSTM_CD = 'ST' THEN '510831'
				    WHEN T1.AGMT_LSTM_CD = 'LT' THEN '510831'
				    WHEN T1.AGMT_LSTM_CD = 'LP' THEN '510831'
				    ELSE '510831'
				END AS ACCT_CD,
                NVL(CASE WHEN T1.EQ_RNTL_TP_CD = 'F' THEN
                        (SELECT CHSS_LSE_RT_AMT
                         FROM CGM_AGMT_LSE_RT
                         WHERE AGMT_OFC_CTY_CD = T1.AGMT_OFC_CTY_CD
                               AND AGMT_SEQ = T1.AGMT_SEQ
                               AND AGMT_VER_NO = T1.AGMT_VER_NO
                               AND EQ_TPSZ_CD = (SELECT EQ_TPSZ_CD FROM CGM_EQUIPMENT WHERE EQ_NO = T2.EQ_NO ))
                    ELSE
                        (SELECT TR_RT_AMT
                         FROM CGM_AGMT_LSE_TR_RT
                         WHERE AGMT_OFC_CTY_CD = T1.AGMT_OFC_CTY_CD
                               AND AGMT_SEQ = T1.AGMT_SEQ
                               AND AGMT_VER_NO = T1.AGMT_VER_NO
                               AND (SELECT COUNT(EQ_NO) FROM CGM_EQUIPMENT 
                                    WHERE AGMT_OFC_CTY_CD = T1.AGMT_OFC_CTY_CD
                                          AND AGMT_SEQ = T1.AGMT_SEQ)
                                    BETWEEN RNTL_FM_TR_VAL AND RNTL_TO_TR_VAL
                               AND EQ_TPSZ_CD = (SELECT EQ_TPSZ_CD FROM CGM_EQUIPMENT WHERE EQ_NO = T2.EQ_NO ))
                    END,0) AS LSE_RT_AMT
        FROM    CGM_AGREEMENT T1, CGM_EQ_STS_HIS T2
        WHERE   T1.AGMT_OFC_CTY_CD = T2.AGMT_OFC_CTY_CD
                AND T1.AGMT_SEQ = T2.AGMT_SEQ
                AND T1.EQ_KND_CD = 'Z'
                AND T2.EQ_KND_CD = 'Z'
                AND T1.AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
                AND T1.AGMT_SEQ = @[agmt_seq]
                AND T2.ROWID = 
    		        (
    		         SELECT /*+ INDEX(H XPKCGM_EQ_STS_HIS)  */
    		                ROWID
    		         FROM   CGM_EQ_STS_HIS H
    		         WHERE  EQ_NO        = T2.EQ_NO
    		         		AND EQ_KND_CD = 'Z'
					 		AND AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
    		         		AND AGMT_SEQ = @[agmt_seq]
    		         		AND ROWNUM = 1
    		        )    
                
    ) A, -- A 에서 해당 AGMT 에 속한 EQ_NO 별 AGMT RATE 를 가져온다.
    (
                SELECT
            T2.AGMT_OFC_CTY_CD,
            T2.AGMT_SEQ,
            T2.AGMT_VER_NO,
            T1.EQ_NO,
            T1.EQ_ASET_STS_CD,
            T1.TERM_CNG_SEQ,
            T1.STS_EVNT_DT_FR,
            T1.STS_EVNT_DT_TO,
            T1.STS_EVNT_LOC_CD,
            T2.EFF_DT,
            T2.EXP_DT,
            CASE 
                WHEN /*+ STS_EVNT_DT_TO 가 해당월보다 작을 경우는 제외 (잘못된 복제데이터 0) 
                         또는 STS_EVNT_DT_TO < EFF_DT 또는 STS_EVNT_DT_FR > EXP_DT 일 경우도 0 */
                     STS_EVNT_DT_TO < TO_DATE(@[cost_yrmon], 'YYYYMM')    
                     OR TO_CHAR(STS_EVNT_DT_TO,'YYYYMMDD') < TO_CHAR(T2.EFF_DT,'YYYYMMDD') 
                     OR TO_CHAR(STS_EVNT_DT_FR,'YYYYMMDD') > TO_CHAR(T2.EXP_DT,'YYYYMMDD') 
                THEN 0
                ELSE
                    CASE 
                        WHEN TO_CHAR(STS_EVNT_DT_FR,'YYYYMMDD') <= TO_CHAR(T2.EFF_DT,'YYYYMMDD')  
                            AND TO_CHAR(STS_EVNT_DT_TO,'YYYYMMDD') >= TO_CHAR(T2.EXP_DT,'YYYYMMDD') 
                        THEN
                            CASE 
                                /*+ Term Change 일 경우 */
                                WHEN TERM_CNG_SEQ IS NOT NULL THEN 
                                    CASE WHEN EQ_ASET_STS_CD = 'LSO' THEN
                                            EXTRACT(DAY FROM T2.EXP_DT) - EXTRACT(DAY FROM T2.EFF_DT) + 1
                                         ELSE
                                            EXTRACT(DAY FROM T2.EXP_DT) - EXTRACT(DAY FROM T2.EFF_DT) + 1
                                    END
                                /*+ Term Change 가 아닐 경우 */
                                ELSE 
                                    CASE
                                         WHEN T1.ON_OFF_HIRE = 0 THEN           
                                            CASE 
                                                /*+ 동일한 날짜의 On-Hire 또는 Off-Hire 일 경우 */ 
                                                WHEN (STS_EVNT_DT_PRE IS NULL OR TO_CHAR(STS_EVNT_DT,'YYYYMMDD') != TO_CHAR(STS_EVNT_DT_PRE,'YYYYMMDD'))
                                                      AND TERM_CNG_SEQ_PRE IS NULL
                                                THEN
                                                    EXTRACT(DAY FROM T2.EXP_DT) - EXTRACT(DAY FROM T2.EFF_DT) + 1
                                                ELSE
                                                    EXTRACT(DAY FROM T2.EXP_DT) - EXTRACT(DAY FROM T2.EFF_DT)
                                            END
                                         ELSE 
                                            EXTRACT(DAY FROM T2.EXP_DT) - EXTRACT(DAY FROM T2.EFF_DT) + 1       
                                    END
                            END
                        WHEN TO_CHAR(STS_EVNT_DT_FR,'YYYYMMDD') <= TO_CHAR(T2.EFF_DT,'YYYYMMDD')  
                            AND TO_CHAR(STS_EVNT_DT_TO,'YYYYMMDD') <= TO_CHAR(T2.EXP_DT,'YYYYMMDD') 
                        THEN
                            CASE 
                                /*+ Term Change 일 경우 */
                                WHEN TERM_CNG_SEQ IS NOT NULL THEN 
                                    CASE WHEN EQ_ASET_STS_CD = 'LSO' THEN
                                            EXTRACT(DAY FROM STS_EVNT_DT_TO) - EXTRACT(DAY FROM T2.EFF_DT) + 1
                                         ELSE
                                            EXTRACT(DAY FROM STS_EVNT_DT_TO) - EXTRACT(DAY FROM T2.EFF_DT) + 1
                                    END
                                /*+ Term Change 가 아닐 경우 */
                                ELSE 
                                    CASE
                                         /*+ 동일한 날짜의 On-Hire 또는 Off-Hire 일 경우 */ 
                                         WHEN T1.ON_OFF_HIRE = 0 THEN           
                                            CASE 
                                                WHEN (STS_EVNT_DT_PRE IS NULL OR TO_CHAR(STS_EVNT_DT,'YYYYMMDD') != TO_CHAR(STS_EVNT_DT_PRE,'YYYYMMDD'))
                                                      AND TERM_CNG_SEQ_PRE IS NULL 
                                                THEN
                                                    EXTRACT(DAY FROM STS_EVNT_DT_TO) - EXTRACT(DAY FROM T2.EFF_DT) + 1
                                                ELSE
                                                    EXTRACT(DAY FROM STS_EVNT_DT_TO) - EXTRACT(DAY FROM T2.EFF_DT)
                                            END
                                         ELSE
                                            EXTRACT(DAY FROM STS_EVNT_DT_TO) - EXTRACT(DAY FROM T2.EFF_DT) + 1       
                                    END
                            END
                        WHEN TO_CHAR(STS_EVNT_DT_FR,'YYYYMMDD') >= TO_CHAR(T2.EFF_DT,'YYYYMMDD') 
                            AND TO_CHAR(STS_EVNT_DT_TO,'YYYYMMDD') >= TO_CHAR(T2.EXP_DT,'YYYYMMDD')
                        THEN
                            CASE 
                                /*+ Term Change 일 경우 */
                                WHEN TERM_CNG_SEQ IS NOT NULL THEN 
                                    CASE WHEN EQ_ASET_STS_CD = 'LSO' THEN
                                            EXTRACT(DAY FROM T2.EXP_DT) - EXTRACT(DAY FROM STS_EVNT_DT_FR) + 1
                                         ELSE
                                            EXTRACT(DAY FROM T2.EXP_DT) - EXTRACT(DAY FROM STS_EVNT_DT_FR) + 1
                                    END
                                /*+ Term Change 가 아닐 경우 */
                                ELSE 
                                    CASE
                                         /*+ 동일한 날짜의 On-Hire 또는 Off-Hire 일 경우 */ 
                                         WHEN T1.ON_OFF_HIRE = 0 THEN           
                                            CASE 
                                                WHEN (STS_EVNT_DT_PRE IS NULL OR TO_CHAR(STS_EVNT_DT,'YYYYMMDD') != TO_CHAR(STS_EVNT_DT_PRE,'YYYYMMDD'))
                                                      AND TERM_CNG_SEQ_PRE IS NULL 
                                                THEN
                                                    EXTRACT(DAY FROM T2.EXP_DT) - EXTRACT(DAY FROM STS_EVNT_DT_FR) + 1
                                                ELSE
                                                    EXTRACT(DAY FROM T2.EXP_DT) - EXTRACT(DAY FROM STS_EVNT_DT_FR)
                                            END
                                         ELSE
                                            EXTRACT(DAY FROM T2.EXP_DT) - EXTRACT(DAY FROM STS_EVNT_DT_FR) + 1       
                                    END
                            END
                        WHEN TO_CHAR(STS_EVNT_DT_FR,'YYYYMMDD') >= TO_CHAR(T2.EFF_DT,'YYYYMMDD') 
                             AND TO_CHAR(STS_EVNT_DT_TO,'YYYYMMDD') <= TO_CHAR(T2.EXP_DT,'YYYYMMDD')
                        THEN
                            CASE
                                /*+ Term Change 일 경우 */
                                WHEN TERM_CNG_SEQ IS NOT NULL THEN 
                                    CASE WHEN EQ_ASET_STS_CD = 'LSO' THEN
                                            EXTRACT(DAY FROM STS_EVNT_DT_TO) - EXTRACT(DAY FROM STS_EVNT_DT_FR) + 1
                                         ELSE
                                            EXTRACT(DAY FROM STS_EVNT_DT_TO) - EXTRACT(DAY FROM STS_EVNT_DT_FR) + 1 
                                    END
                                /*+ Term Change 가 아닐 경우 */
                                ELSE 
                                    CASE
                                         /*+ 동일한 날짜의 On-Hire 또는 Off-Hire 일 경우 */ 
                                         WHEN T1.ON_OFF_HIRE = 0 THEN           
                                            CASE 
                                                WHEN (STS_EVNT_DT_PRE IS NULL OR TO_CHAR(STS_EVNT_DT,'YYYYMMDD') != TO_CHAR(STS_EVNT_DT_PRE,'YYYYMMDD'))
                                                      AND TERM_CNG_SEQ_PRE IS NULL 
                                                THEN
                                                    EXTRACT(DAY FROM STS_EVNT_DT_TO) - EXTRACT(DAY FROM STS_EVNT_DT_FR) + 1
                                                ELSE
                                                    EXTRACT(DAY FROM STS_EVNT_DT_TO) - EXTRACT(DAY FROM STS_EVNT_DT_FR)
                                            END
                                         ELSE
                                            EXTRACT(DAY FROM STS_EVNT_DT_TO) - EXTRACT(DAY FROM STS_EVNT_DT_FR) + 1       
                                    END
                            END
                    END   
            END AS LSE_USE_DAYS,
            T1.STS_EVNT_DT,
            T1.GRNO,
            T1.ON_OFF_HIRE
        FROM
        (
    	    SELECT /*+ 1. EQ 별 Row의 복제하기 
                   2. Event Form Date, To Date 구하기
                   3. EQ 별 이전 Row 의 Event 상태 및 날짜 구하기
                   4. Term Change 여부 
               */  
    	       AGMT_OFC_CTY_CD,
    	       AGMT_SEQ,
    	       AGMT_VER_NO,
    	       EQ_NO,
    	       EQ_STS_SEQ,
    	       /*+ 복제한 Row를 dummy 로 표시 */
    	       DECODE (Y.C2, 1, 
    	                  EQ_ASET_STS_CD || 'dummy', 
    	                  EQ_ASET_STS_CD) AS EQ_ASET_STS_CD, 
    	       /*+ 시작일자 설정
    	           복제한 Row 의 시작일자를 무조건 1일로 설정 
    	           복제한 Row가 아닐 경우는 해당날자가 시작일자로 설정*/
    	       DECODE (Y.C2, 1,
    	                TO_DATE (TO_CHAR (X.STS_EVNT_DT, 'YYYYMM') || '01', 'YYYYMMDD'), 
    	                X.STS_EVNT_DT) AS STS_EVNT_DT_FR,
    	       /*+ 종료일자 설정
    	           GRNO 가  0이면 해당월의 마지막 일자로 설정 (30,31)
    	           GRNO 가 -1이면 복제Row일 경우 해당날짜를 아니면 해당월의 마지막 일자를 설정
    	           GRNO 가 0이나 -1이 아닌 경우는 다음 Row의 Event 날짜에서 1일을 뺀 날자를 지정
    	                   (단, 현재월보다 Event 날자가 작을 경우는 1일을 빼지 않음)
    	           */
    	       DECODE(GRNO, 0, 
    	                LAST_DAY(TO_DATE(@[cost_yrmon], 'YYYYMM')),
    	                -1,
    	                DECODE(Y.C2, 1, STS_EVNT_DT, LAST_DAY(TO_DATE(@[cost_yrmon], 'YYYYMM'))),
    	                CASE WHEN EQ_ASET_STS_CD IN ('LSO','TLL')  
    	                THEN
    	                   DECODE(Y.C2, 1, 
            	                       CASE
            	                           WHEN LEAD(ON_OFF_HIRE) OVER(PARTITION BY EQ_NO ORDER BY  EQ_STS_SEQ) = 0
            	                           THEN DECODE(TERM_CNG_SEQ, NULL, STS_EVNT_DT , STS_EVNT_DT-1)            	                           
            	                           ELSE STS_EVNT_DT-1
            	                       END,
																		 DECODE(TERM_CNG_SEQ, NULL, STS_EVNT_DT , STS_EVNT_DT-1) )
    	                ELSE
    	                   CASE 
        	                   WHEN ON_OFF_HIRE = 0
        	                   THEN LEAD(STS_EVNT_DT) OVER(PARTITION BY EQ_NO ORDER BY  EQ_STS_SEQ)  
        	                   WHEN TO_CHAR(STS_EVNT_DT,'YYYYMMDD') = TO_CHAR(LEAD(STS_EVNT_DT) OVER(PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ, Y.C2),'YYYYMMDD')
        	                       THEN LEAD(STS_EVNT_DT) OVER(PARTITION BY EQ_NO ORDER BY  EQ_STS_SEQ)  
        	                   ELSE LEAD(STS_EVNT_DT) OVER(PARTITION BY EQ_NO ORDER BY  EQ_STS_SEQ) - 1
    	                   END
    	                END
    	       ) AS STS_EVNT_DT_TO,
    	       TERM_CNG_SEQ,
    	       STS_EVNT_DT,
    	       LAG(EQ_ASET_STS_CD) OVER(PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ, Y.C2) AS EQ_ASET_STS_CD_PRE,
    	       LAG(STS_EVNT_DT) OVER(PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ, Y.C2) AS STS_EVNT_DT_PRE,
    	       LAG(TERM_CNG_SEQ) OVER(PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ, Y.C2) AS TERM_CNG_SEQ_PRE,
    	       STS_EVNT_LOC_CD,
    	       GRNO,
    	       ON_OFF_HIRE
    	   FROM   
    	    (
    	       /*+ Start ==> use day계산을 위한 eq 별 grouping */
    	       SELECT  
    	           B.AGMT_OFC_CTY_CD,
    	           B.AGMT_SEQ,
    	           B.AGMT_VER_NO,
    	           B.EQ_NO,
                   B.EQ_STS_SEQ,
    	           B.EQ_ASET_STS_CD,
    	           B.STS_EVNT_DT,
    	           B.TERM_CNG_SEQ,
    	           B.STS_EVNT_LOC_CD,
    	           CASE
    	               /*+ LSO, TLL 이면 EQ별 Numbering (1,2,3..) 
    	                   만약 LSI,LST,FND 일 경우 EQ 별 Row가 1개이면 -1 값을 아니면 0으로 설정한다.
    	                   -1 값은 끝일자(30,31) 이면서 dummy 값을 생성하기 위한 값으로 사용한다..
    	                   0 값은 끝일자(30,31) 를 사용하기 위해 설정된 값이다.
    	                   단, -1값과 0 값은 EQ별로 맨 마지막에 해당하는 Row일때만 적용되는 값이다.
    	               */ 
    	               WHEN DECODE (
    	                   ROW_NUMBER () OVER (PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ) / COUNT (*) OVER (PARTITION BY EQ_NO),
    	                   1,
    	                   DECODE (EQ_ASET_STS_CD,
    	                                'LSO', 'Y', 
    	                                'TLL', 'Y',
    	                                'Calc'),
    	                   'N'
    	                   ) = 'Calc'
    	               THEN
    	                   /*+ EQ별로 맨 마지막에 해당하는 Row일때만 적용되는 값을 설정한다.  */
    	                   DECODE(COUNT (*) OVER (PARTITION BY EQ_NO),1,-1, 0) 
    	               ELSE
    	                   /*+ 1,2,3.. Numbering 
    	                       LSO, TLL 와 LSI, LST, FND (마지막 Row가 아닌 값)일 Numbering
    	                       Numbering 된 1값은 이후 Dummy Row를 생성하기 사용되어진다.
    	                   */
    	                   ROW_NUMBER () OVER (PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ) 
    	           END AS GRNO,
    	           CASE 
    	               /*+ Term Change 가 아니면서 동일한 날짜에 LSO, LSI 를 설정한 On-Off Hire 인 데이터는 0 으로 한다.*/
    	               WHEN TO_CHAR(STS_EVNT_DT,'YYYYMMDD') = TO_CHAR(LEAD(STS_EVNT_DT) OVER (PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ),'YYYYMMDD')
    	                    AND TERM_CNG_SEQ IS NULL
    	                    AND ((EQ_ASET_STS_CD = 'LSI' AND  LEAD(EQ_ASET_STS_CD) OVER (PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ) = 'LSO')
    	                      OR (EQ_ASET_STS_CD = 'LSO' AND  LEAD(EQ_ASET_STS_CD) OVER (PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ) = 'LSI'))
    	               THEN 0  
    	               WHEN TO_CHAR(STS_EVNT_DT,'YYYYMMDD') = TO_CHAR(LAG(STS_EVNT_DT) OVER (PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ),'YYYYMMDD')
    	                    AND TERM_CNG_SEQ IS NULL
    	                    AND ((EQ_ASET_STS_CD = 'LSI' AND  LAG(EQ_ASET_STS_CD) OVER (PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ) = 'LSO')
    	                      OR (EQ_ASET_STS_CD = 'LSO' AND  LAG(EQ_ASET_STS_CD) OVER (PARTITION BY EQ_NO ORDER BY EQ_STS_SEQ) = 'LSI'))
    	               THEN 0
    	           END AS ON_OFF_HIRE
    	       FROM    
    	           CGM_EQ_STS_HIS B
    	       WHERE  
    	           B.EQ_KND_CD = 'Z'
    	           AND B.STS_EVNT_DT >= TO_DATE (@[cost_yrmon] || '01', 'YYYYMMDD')
    	           AND B.STS_EVNT_DT < ADD_MONTHS (TO_DATE (@[cost_yrmon], 'YYYYMM'), 1)
    	           AND B.AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
    	           AND B.AGMT_SEQ = @[agmt_seq]  

                   AND B.EQ_ASET_STS_CD IN ('LSI','LSO','TLL','SCR','SLD','DII')

    	       ) x,
    	       (
    	           /*+ dummy 데이터를 만들기 위한 SQL (데이터를 복제하기 위해)
    	               LSO, TLL, LST, FND 에 대해서는 하나의 Row를 더 복제한다.
    	               (단, GRNO 가 1이거나 -1 인 것)
    	            */
        	       SELECT   -1 ky, 'LSO' c1, '1' c2 FROM DUAL
        	       UNION ALL
        	       SELECT   -1 ky, 'TLL' c1, '1' c2 FROM DUAL
        	       UNION ALL
--        	       SELECT   -1 ky, 'LST' c1, '1' c2 FROM DUAL
--        	       UNION ALL
--        	       SELECT   -1 ky, 'FND' c1, '1' c2 FROM DUAL
--        	       UNION ALL
        	       SELECT   -1 ky, 'LSO' c1, '2' c2 FROM DUAL
        	       UNION ALL
        	       SELECT   -1 ky, 'TLL' c1, '2' c2 FROM DUAL
        	       UNION ALL
--        	       SELECT   -1 ky, 'LST' c1, '2' c2 FROM DUAL
--        	       UNION ALL
--        	       SELECT   -1 ky, 'FND' c1, '2' c2 FROM DUAL
--        	       UNION ALL      
        	       SELECT   1 ky, 'LSO' c1, '1' c2 FROM DUAL
        	       UNION ALL
        	       SELECT   1 ky, 'TLL' c1, '1' c2 FROM DUAL
        	       UNION ALL
--        	       SELECT   1 ky, 'LST' c1, '1' c2 FROM DUAL
--        	       UNION ALL
--        	       SELECT   1 ky, 'FND' c1, '1' c2 FROM DUAL
--        	       UNION ALL
        	       SELECT   1 ky, 'LSO' c1, '2' c2 FROM DUAL
        	       UNION ALL
        	       SELECT   1 ky, 'TLL' c1, '2' c2 FROM DUAL
--        	       UNION ALL
--        	       SELECT   1 ky, 'LST' c1, '2' c2 FROM DUAL
--        	       UNION ALL
--        	       SELECT   1 ky, 'FND' c1, '2' c2 FROM DUAL
    	       ) y
    	   WHERE   x.GRNO = y.ky(+) AND x.EQ_ASET_STS_CD = y.c1(+)

           -- 위에는 COST_YRMON 에 발생한 Status 처리

    	   UNION ALL

           -- 아래는 COST_YRMON 이전 발생한 Status 처리

    	   SELECT 
    	       A.AGMT_OFC_CTY_CD,
    	       A.AGMT_SEQ,
    	       A.AGMT_VER_NO,
    	       A.EQ_NO,
    	       A.EQ_STS_SEQ,
    	       A.EQ_ASET_STS_CD,
    	       TO_DATE(@[cost_yrmon] || '01','YYYYMMDD') AS STS_EVNT_DT_FR,
    	       LAST_DAY(TO_DATE(@[cost_yrmon], 'YYYYMM' )) AS STS_EVNT_DT_TO,
    	       A.TERM_CNG_SEQ,
    	       A.STS_EVNT_DT,
    	       '' AS EQ_ASET_STS_CD_PRE,
    	       SYSDATE AS STS_EVNT_DT_PRE,
    	       0 AS TERM_CNG_SEQ_PRE,
    	       A.STS_EVNT_LOC_CD,
    	       1 AS GRNO,
    	       NULL AS ON_OFF_HIRE
         	        FROM CGM_EQ_STS_HIS A
        	        WHERE EQ_KND_CD = 'Z'
     		              AND STS_EVNT_DT < TO_DATE(@[cost_yrmon] || '01', 'YYYYMMDD')
                              AND AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
                              AND AGMT_SEQ = @[agmt_seq]
        	              AND A.ROWID = 
            		        (
            		         SELECT /*+ INDEX_DESC(H XPKCGM_EQ_STS_HIS)  */
            		                ROWID
            		         FROM   CGM_EQ_STS_HIS H
            		         WHERE  EQ_NO = A.EQ_NO
		                  AND STS_EVNT_DT < TO_DATE(@[cost_yrmon] || '01', 'YYYYMMDD')
            		          AND EQ_KND_CD = 'Z'
			          AND AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
         		          AND AGMT_SEQ = @[agmt_seq]
        		          AND EQ_ASET_STS_CD IN ('LSI','LSO','TLL','SCR','SLD','DII')   -- COST_YRMON 이전에 (LSI,DII), (LSO,TLL,SCR,SLD) 중 최종 발생 내역이 (LSI,DII) 이면 CHG 대상 선정
      		                  AND ROWNUM = 1
       		                )
            AND A.EQ_ASET_STS_CD IN ('LSI','DII' )
    	    AND NOT EXISTS
        	       (
        	           SELECT EQ_NO
        	           FROM CGM_EQ_STS_HIS
        	           WHERE EQ_KND_CD = 'Z'
        	                 AND STS_EVNT_DT >= TO_DATE (@[cost_yrmon] || '01', 'YYYYMMDD')
                    	     AND STS_EVNT_DT < ADD_MONTHS (TO_DATE (@[cost_yrmon], 'YYYYMM'), 1)
							 AND AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
            		         AND AGMT_SEQ = @[agmt_seq]
                    	     AND EQ_NO = A.EQ_NO
                               AND EQ_ASET_STS_CD IN ('LSI','LSO','TLL','SCR','SLD','DII')
        	       )


            ) T1,
            CGM_AGREEMENT T2
        WHERE 
            T1.AGMT_OFC_CTY_CD = T2.AGMT_OFC_CTY_CD
            AND T1.AGMT_SEQ = T2.AGMT_SEQ
            -- DIO 발생 이전의 LSI,DII Agmt 와 생성 대상 Agmt 가 같고,Eventdt 가 같으면(이후 재LSI 될 경우도 있기때문) CHG 대상에서 제외.
            AND NOT EXISTS ( SELECT 'X' FROM CGM_EQ_STS_HIS K
                             WHERE T1.EQ_NO= K.EQ_NO
                             AND K.STS_EVNT_DT < (SELECT 
                                                MAX(STS_EVNT_DT) FROM CGM_EQ_STS_HIS L 
                                                WHERE L.EQ_NO = K.EQ_NO
                                                AND L.EQ_ASET_STS_CD = 'DIO'
                                                )
                             AND K.STS_EVNT_DT = T1.STS_EVNT_DT 
                             AND K.EQ_ASET_STS_CD IN( 'LSI','DII')
                             AND K.AGMT_OFC_CTY_CD = T1.AGMT_OFC_CTY_CD
                             AND K.AGMT_SEQ = T1.AGMT_SEQ
                             )
                                 
        ) B, -- B 에서 CHG 생성 대상 EQ_NO 리스트를 가져온다.
        CGM_EQ_STS_HIS C
    WHERE 
        A.AGMT_SEQ = B.AGMT_SEQ
        AND A.EQ_NO = B.EQ_NO
        AND A.EFF_DT = B.EFF_DT 
        AND A.EXP_DT = B.EXP_DT
        AND B.LSE_USE_DAYS >= 0
        AND A.AGMT_SEQ = C.AGMT_SEQ
        AND A.EQ_NO = C.EQ_NO
        AND C.EQ_STS_SEQ = 
                    (
    		         SELECT /*+ INDEX(H XPKCGM_EQ_STS_HIS)  */
    		                EQ_STS_SEQ
    		         FROM   CGM_EQ_STS_HIS H
    		         WHERE  EQ_NO        = A.EQ_NO
    		         		AND EQ_KND_CD = 'Z'
    		                AND EQ_ASET_STS_CD IN( 'LSI','DII')
							AND AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
    		         		AND AGMT_SEQ = @[agmt_seq]
    		         		AND ROWNUM = 1
    		        )

) T1
WHERE 
T1.LSE_USE_DAYS>0

GROUP BY 
    T1.AGMT_OFC_CTY_CD,
    T1.AGMT_SEQ,
    T1.LSE_RT_AMT,
    T1.EQ_NO			]]></sql>
			<params>
				<param name="cre_usr_id" type="12" value="" out="N"/>
				<param name="upd_usr_id" type="12" value="" out="N"/>
				<param name="cost_yrmon" type="12" value="" out="N"/>
				<param name="agmt_ofc_cty_cd" type="12" value="" out="N"/>
				<param name="agmt_seq" type="2" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
