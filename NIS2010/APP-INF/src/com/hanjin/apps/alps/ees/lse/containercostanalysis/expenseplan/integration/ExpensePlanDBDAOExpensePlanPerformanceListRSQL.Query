<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ExpensePlanDBDAOExpensePlanPerformanceListRSQL">
			<desc><![CDATA[년간/월별 장비임차 형태별 임차료 실적을 조회한다.
2010.09.06 남궁진호 [CHM-201005772-01] Container & Chassis 에 실적 비용을 가져 오는 기준을 다르게 적용, Chassis 실적 비용은 추정에 Actual 금액으로 적용.]]></desc>
			<sql><![CDATA[
WITH PARAM AS (    
#if (${ver_seq} == '') 	
	SELECT  NVL(MAX(PLN_YR),@[pln_yr])  AS PLN_YR,
            NVL(MAX(VER_SEQ),1)         AS VER_SEQ,
            @[eq_knd_cd]                AS EQ_KND_NM      
    FROM    LSE_EQ_EXPN_PLN
    WHERE   PLN_YR = @[pln_yr]
#else
	SELECT  @[pln_yr]  AS PLN_YR,
            @[ver_seq] AS VER_SEQ,
			@[eq_knd_cd] AS EQ_KND_NM                        
    FROM    DUAL           
#end
)
SELECT   PLN_YR 
       , VER_SEQ
       , EQ_KND_NM
       , EQ_TERM_NM
       , RSLT_TP_SEQ
       , RSLT_TP
       , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_01) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_01) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_01) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_01, '9,999,999,990.00') END) MNTH_01
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_02) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_02) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_02) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_02, '9,999,999,990.00') END) MNTH_02
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_03) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_03) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_03) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_03, '9,999,999,990.00') END) MNTH_03
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(FRST_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(FRST_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(FRST_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(FRST_QURT_TOT, '9,999,999,990.00') END) FRST_QURT_TOT
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_04) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_04) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_04) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_04, '9,999,999,990.00') END) MNTH_04
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_05) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_05) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_05) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_05, '9,999,999,990.00') END) MNTH_05
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_06) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_06) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_06) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_06, '9,999,999,990.00') END) MNTH_06     
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(SCND_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(SCND_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(SCND_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(SCND_QURT_TOT, '9,999,999,990.00') END) SCND_QURT_TOT
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_07) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_07) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_07) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_07, '9,999,999,990.00') END) MNTH_07             
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_08) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_08) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_08) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_08, '9,999,999,990.00') END) MNTH_08       
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_09) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_09) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_09) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_09, '9,999,999,990.00') END) MNTH_09        
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(THRD_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(THRD_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(THRD_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(THRD_QURT_TOT, '9,999,999,990.00') END) THRD_QURT_TOT   
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_10) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_10) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_10) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_10, '9,999,999,990.00') END) MNTH_10
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_11) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_11) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_11) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_11, '9,999,999,990.00') END) MNTH_11
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(MNTH_12) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(MNTH_12) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(MNTH_12) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(MNTH_12, '9,999,999,990.00') END) MNTH_12
        
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(FRTH_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(FRTH_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(FRTH_QURT_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(FRTH_QURT_TOT, '9,999,999,990.00') END) FRTH_QURT_TOT
        , TRIM(
            CASE WHEN (RSLT_TP_SEQ = 3) THEN
            TO_CHAR(
            DECODE(SUM(YR_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
            ROUND((
                SUM(YR_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                SUM(YR_TOT) OVER (PARTITION BY RK ORDER BY RSLT_TP_SEQ ASC RANGE BETWEEN 2 PRECEDING AND 2 PRECEDING)
                ) * 100, 1)), '9,999,999,990.0') || ' %'
            ELSE TO_CHAR(YR_TOT, '9,999,999,990.00') END) YR_TOT                               
FROM    (
        SELECT  DENSE_RANK() OVER (PARTITION BY Z.PLN_YR, VER_SEQ ORDER BY Z.PLN_YR, VER_SEQ, 
                                   DECODE(Z.EQ_KND_NM, 'CNTR', 1, 'CHSS', 2, 3),
                                          DECODE(Z.EQ_TERM_NM, 'LP', 1, 'OL', 2, 'LT', 3, 'ST', 4, 'LS', 5, 'SB', 6,
                                                               'SO', 7, 'NP', 8, 'CP', 9,'MG.SET',10,11)
                                   ) AS RK
                , Z.PLN_YR
                , P.VER_SEQ
                , NVL(Z.EQ_KND_NM, 'G.TTL') AS EQ_KND_NM 
                , CASE WHEN Z.EQ_KND_NM IS NULL THEN EQ_TERM_NM
                       ELSE NVL(Z.EQ_TERM_NM, 'S.TTL') END AS EQ_TERM_NM                                 
                , Z.RSLT_TP_SEQ
                , Z.RSLT_TP
                , Z.MNTH_01
                , Z.MNTH_02
                , Z.MNTH_03
                , Z.FRST_QURT_TOT
                , Z.MNTH_04
                , Z.MNTH_05
                , Z.MNTH_06
                , Z.SCND_QURT_TOT
                , Z.MNTH_07
                , Z.MNTH_08
                , Z.MNTH_09
                , Z.THRD_QURT_TOT
                , Z.MNTH_10
                , Z.MNTH_11
                , Z.MNTH_12
                , Z.FRTH_QURT_TOT
                , Z.YR_TOT
        FROM    PARAM P,
        	   (SELECT  X.PLN_YR, X.RSLT_TP_SEQ, X.EQ_TERM_NM,
                        CASE WHEN X.RSLT_TP_SEQ = 1 THEN 'Plan'
                             WHEN X.RSLT_TP_SEQ = 2 THEN 'PFMC'
                             WHEN X.RSLT_TP_SEQ = 3 THEN 'Ratio' END RSLT_TP, 
                        DECODE(X.EQ_KND_CD,'U','CNTR','Z','CHSS') EQ_KND_NM, 
                        SUM(CASE WHEN X.EXPN_MON_CD = 'JAN' THEN X.EXPN_AMT END) MNTH_01,
                        SUM(CASE WHEN X.EXPN_MON_CD = 'FEB' THEN X.EXPN_AMT END) MNTH_02,
                        SUM(CASE WHEN X.EXPN_MON_CD = 'MAR' THEN X.EXPN_AMT END) MNTH_03,
                        SUM(CASE WHEN X.EXPN_MON_CD IN('JAN','FEB','MAR') THEN X.EXPN_AMT END) FRST_QURT_TOT,
                        SUM(CASE WHEN X.EXPN_MON_CD = 'APR' THEN X.EXPN_AMT END) MNTH_04,        
                        SUM(CASE WHEN X.EXPN_MON_CD = 'MAY' THEN X.EXPN_AMT END) MNTH_05,
                        SUM(CASE WHEN X.EXPN_MON_CD = 'JUN' THEN X.EXPN_AMT END) MNTH_06,
                        SUM(CASE WHEN X.EXPN_MON_CD IN('APR','MAY','JUN') THEN X.EXPN_AMT END) SCND_QURT_TOT,
                        SUM(CASE WHEN X.EXPN_MON_CD = 'JUL' THEN X.EXPN_AMT END) MNTH_07,
                        SUM(CASE WHEN X.EXPN_MON_CD = 'AUG' THEN X.EXPN_AMT END) MNTH_08,
                        SUM(CASE WHEN X.EXPN_MON_CD = 'SEP' THEN X.EXPN_AMT END) MNTH_09,
                        SUM(CASE WHEN X.EXPN_MON_CD IN('JUL','AUG','SEP') THEN X.EXPN_AMT END) THRD_QURT_TOT,
                        SUM(CASE WHEN X.EXPN_MON_CD = 'OCT' THEN X.EXPN_AMT END) MNTH_10,
                        SUM(CASE WHEN X.EXPN_MON_CD = 'NOV' THEN X.EXPN_AMT END) MNTH_11,
                        SUM(CASE WHEN X.EXPN_MON_CD = 'DEC' THEN X.EXPN_AMT END) MNTH_12,
                        SUM(CASE WHEN X.EXPN_MON_CD IN('OCT','NOV','DEC') THEN X.EXPN_AMT END) FRTH_QURT_TOT,
                        SUM(X.EXPN_AMT) YR_TOT
                FROM   (SELECT  AA.PLN_YR, CC.RSLT_TP_SEQ, AA.EQ_KND_CD,
                                AA.EQ_TERM_NM, AA.EXPN_MON_CD,
                                CASE WHEN CC.RSLT_TP_SEQ = 1 THEN AA.EXPN_AMT
                                     WHEN CC.RSLT_TP_SEQ = 2 THEN BB.EXPN_AMT
                                     WHEN CC.RSLT_TP_SEQ = 3 
                                     THEN DECODE(NVL(AA.EXPN_AMT,0),0,0, ROUND(BB.EXPN_AMT/AA.EXPN_AMT*100, 1))
                                END EXPN_AMT
                        FROM   (SELECT  A.PLN_YR, 1 RSLT_TP_SEQ, A.EQ_KND_CD
--                                , A.EQ_TERM_NM /* CHSS LT, ST를 LS로 통합하고, N/P, C/P에 '/' 제거 */
                                        , CASE WHEN EQ_KND_CD = 'Z' THEN 
                                             CASE WHEN (EQ_TERM_NM = 'LT') THEN 'LS'
                                                  WHEN (EQ_TERM_NM = 'ST') THEN 'LS'
                                                  ELSE REPLACE(A.EQ_TERM_NM, '/', '') END
                                           ELSE A.EQ_TERM_NM END AS EQ_TERM_NM         
                                        , A.EXPN_MON_CD, SUM(A.EXPN_AMT) AS EXPN_AMT     
                                FROM    PARAM P,
                                        LSE_EQ_EXPN_PLN A               
                                WHERE   1 = 1
                                AND     A.PLN_YR = P.PLN_YR
                                AND     A.VER_SEQ = P.VER_SEQ
                                GROUP BY A.PLN_YR,  A.EQ_KND_CD
                                        , CASE WHEN EQ_KND_CD = 'Z' THEN 
                                               CASE WHEN (EQ_TERM_NM = 'LT') THEN 'LS'
                                                    WHEN (EQ_TERM_NM = 'ST') THEN 'LS'
                                                    ELSE REPLACE(A.EQ_TERM_NM, '/', '') END
                                          ELSE A.EQ_TERM_NM END
                                        , A.EXPN_MON_CD        
                                ) AA, 
                               (SELECT  NVL(BB.PLN_YR, P.PLN_YR) AS PLN_YR, 
                                        2 RSLT_TP_SEQ, 'U' AS EQ_KND_CD, 
                                        AA.EQ_TERM_NM,  AA.EXPN_MON_CD, 
                                        NVL(BB.EXPN_AMT, 0) AS EXPN_AMT   
                                FROM    PARAM P,
                                       (SELECT  A.EXPN_MON, A.EXPN_MON_CD, B.EQ_TERM_NM
                                        FROM   (SELECT  LEVEL AS EXPN_MON,
                                                        TO_CHAR(ADD_MONTHS(TO_DATE('200901', 'YYYYMM'), LEVEL -1), 
                                                           'MON', 'NLS_DATE_LANGUAGE = American') EXPN_MON_CD                             
                                                FROM    DUAL
                                                CONNECT BY LEVEL <= 12) A,             
                                               (SELECT EQ_TERM_NM
												FROM (SELECT 'LP' AS EQ_TERM_NM FROM DUAL  
                                                UNION SELECT 'OL' FROM DUAL
                                                UNION SELECT 'LT' FROM DUAL
                                                UNION SELECT 'ST' FROM DUAL
                                                UNION SELECT 'SB' FROM DUAL
                                                UNION SELECT 'SO' FROM DUAL)
									#if (${eq_term_nm} != '')
										WHERE  EQ_TERM_NM IN (
											#foreach($key IN ${eq_term_nm_seq})
												#if($velocityCount < $eq_term_nm_seq.size())
													'$key',
												#else
													'$key'
												#end
											#end
		                        				)
									#end												
												) B
                                        ) AA,   
                                       (SELECT  PLN_YR, EQ_TERM_NM, 
                                                TO_CHAR(EXPN_MON_CD,'MON','NLS_DATE_LANGUAGE = American') AS EXPN_MON_CD,
                                                SUM(EXPN_AMT) AS EXPN_AMT
                                        FROM   (SELECT  SUBSTR(A.CHG_COST_YRMON, 1,4) AS PLN_YR,
                                                        A.LSTM_CD AS EQ_TERM_NM,
                                                        TO_DATE(A.CHG_COST_YRMON,'YYYYMM') AS EXPN_MON_CD,        
                                                        NVL(A.PAY_RNTL_COST_AMT, 0) AS EXPN_AMT
                                                FROM    LSE_PAY_RNTL_CHG A,
                                                        PARAM P
                                                WHERE   A.CHG_COST_YRMON LIKE P.PLN_YR||'%'
                                                AND     A.LSTM_CD IN ('LP','OL','LT','ST','SB')                                
                                                UNION ALL
                                                SELECT  P.PLN_YR AS PLN_YR,
                                                        'LP' AS EQ_TERM_NM,
                                                        TO_DATE(A.SKD_VOY_NO,'YYMM') AS EXPN_MON_CD,
                                                        A.PAY_AMT AS EXPN_AMT
                                                FROM    LSE_OP_LSE A,
                                                        PARAM P
                                                WHERE   A.SKD_VOY_NO LIKE SUBSTR(P.PLN_YR,3)||'%' 
                                                AND     A.AP_IF_FLG = 'Y'                                                                
                                                UNION ALL                                
                                                SELECT  SUBSTR(A.QTY_YRMON, 1,4) AS PLN_YR,
                                                        A.LSTM_CD AS EQ_TERM_NM,
                                                        TO_DATE(A.QTY_YRMON,'YYYYMM') AS EXPN_MON_CD,
                                                        - NVL(A.INV_AMT, 0) AS EXPN_AMT
                                                FROM    LSE_RCV_RNTL_CHG A,
                                                        PARAM P
                                                WHERE   A.QTY_YRMON LIKE P.PLN_YR||'%'
                                                AND     A.LSTM_CD = 'SO'                                
                                                AND     A.CXL_FLG = 'N'
                                                AND     A.INV_NO IS NOT NULL
                                                )        
                                        GROUP BY PLN_YR, EQ_TERM_NM, EXPN_MON_CD                                                
                                        ) BB
                                WHERE   AA.EXPN_MON_CD = BB.EXPN_MON_CD(+)
                                AND     AA.EQ_TERM_NM  = BB.EQ_TERM_NM(+)
							#if (${eq_knd_cd} != '')
								AND     P.EQ_KND_NM = 'CNTR'
							#end    
                                UNION 
                                SELECT  NVL(BB.PLN_YR, P.PLN_YR) AS PLN_YR, 
                                        2 RSLT_TP_SEQ, 'Z' AS EQ_KND_CD, 
                                        AA.EQ_TERM_NM,  AA.EXPN_MON_CD, 
                                        NVL(BB.EXPN_AMT, 0) AS EXPN_AMT   
                                FROM    PARAM P,
                                       (SELECT  A.EXPN_MON, A.EXPN_MON_CD, B.EQ_TERM_NM
                                        FROM   (SELECT	LEVEL AS EXPN_MON,
                                                        TO_CHAR(ADD_MONTHS(TO_DATE('200901', 'YYYYMM'), LEVEL -1), 
                                                           'MON', 'NLS_DATE_LANGUAGE = American') EXPN_MON_CD                             
                                                FROM	DUAL
                                                CONNECT BY LEVEL <= 12) A,             
                                               (SELECT EQ_TERM_NM
												FROM (SELECT 'LP' AS EQ_TERM_NM FROM DUAL  
                                                	  UNION SELECT 'OL' FROM DUAL
                                                	  UNION SELECT 'LS' FROM DUAL   
                                               	      UNION SELECT 'NP' FROM DUAL
                                                      UNION SELECT 'CP' FROM DUAL
                                                      UNION SELECT 'MG.SET' FROM DUAL)
											#if (${eq_term_nm} != '')
											    WHERE  EQ_TERM_NM IN (
												#foreach($key IN ${eq_term_nm_seq})
													#if($velocityCount < $eq_term_nm_seq.size())
														DECODE('$key','LT','LS','ST','LS','$key'),
													#else
														DECODE('$key','LT','LS','ST','LS','$key')
													#end
												#end
		                        					)
											#end												
											) B
                                        ) AA,
                                        (   SELECT  SUBSTR(REV_YRMON,1,4)     AS PLN_YR
                                                , DECODE(CNTR_TPSZ_CD, 'LT', 'LS', 'ST', 'LS', CNTR_TPSZ_CD)    AS EQ_TERM_NM
                                                , TO_CHAR(TO_DATE(REV_YRMON, 'YYYYMM'), 'MON', 'NLS_DATE_LANGUAGE = American') AS EXPN_MON_CD
                                                , SUM(ACT_AMT)  AS EXPN_AMT
                                        FROM    GL_ESTM_IF_ERP  T,
												PARAM P
                                        WHERE   1 = 1
                                        AND     SYS_SRC_ID  = 'CHS'
                                        AND     EXE_YRMON   =
                                                (
                                                    SELECT  MAX(S.EXE_YRMON)
                                                    FROM    GL_ESTM_IF_ERP  S
                                                    WHERE   T.EXE_YRMON   LIKE P.PLN_YR||'%'
                                                    AND     T.SYS_SRC_ID   = S.SYS_SRC_ID
                                                )
                                        GROUP BY REV_YRMON, DECODE(CNTR_TPSZ_CD, 'LT', 'LS', 'ST', 'LS', CNTR_TPSZ_CD)
                                        UNION ALL
                                        SELECT  SUBSTR(REV_YRMON,1,4)       AS PLN_YR
                                                , 'MG.SET'                  AS EQ_TERM_NM
                                                , TO_CHAR(TO_DATE(REV_YRMON, 'YYYYMM'), 'MON', 'NLS_DATE_LANGUAGE = American') AS EXPN_MON_CD
                                                , SUM(ACT_AMT)  AS EXPN_AMT
                                        FROM    GL_ESTM_IF_ERP  T,
												PARAM P
                                        WHERE   1 = 1
                                        AND     SYS_SRC_ID  = 'MGS'
                                        AND     EXE_YRMON   =
                                                (
                                                    SELECT  MAX(S.EXE_YRMON)
                                                    FROM    GL_ESTM_IF_ERP  S
                                                    WHERE   T.EXE_YRMON   LIKE P.PLN_YR||'%'
                                                    AND     T.SYS_SRC_ID   = S.SYS_SRC_ID
                                                )
                                        GROUP BY REV_YRMON
                                       ) BB
                                WHERE   AA.EXPN_MON_CD = BB.EXPN_MON_CD(+)
                                AND     AA.EQ_TERM_NM  = BB.EQ_TERM_NM (+)
							#if (${eq_knd_cd} != '')
								AND     P.EQ_KND_NM = 'CHSS'
							#end    
                                ) BB, 
                               (SELECT 1 AS RSLT_TP_SEQ       FROM DUAL
                                UNION SELECT 2 AS RSLT_TP_SEQ FROM DUAL
                                UNION SELECT 3 AS RSLT_TP_SEQ FROM DUAL 
                                ) CC
                        WHERE   AA.PLN_YR       = BB.PLN_YR
                        AND     AA.EQ_KND_CD    = BB.EQ_KND_CD
                        AND     AA.EQ_TERM_NM   = BB.EQ_TERM_NM
                        AND     AA.EXPN_MON_CD  = BB.EXPN_MON_CD                                     
                        ) X     
                WHERE	1 = 1 
	#if (${expn_mon_cd} != '')
   	            AND     X.EXPN_MON_CD IN (
		#foreach($key IN ${expn_mon_cd_seq})
			#if($velocityCount < $expn_mon_cd_seq.size())
				'$key',
			#else
				'$key'
			#end
		#end
		                                )
	#end
                GROUP BY ROLLUP(X.PLN_YR, X.RSLT_TP_SEQ, X.EQ_KND_CD, X.EQ_TERM_NM)         
                ORDER BY X.EQ_KND_CD
                        , DECODE(X.EQ_TERM_NM,  'LP', 1,'OL', 2,'LT', 3,'ST', 4,'LS', 5,'SB', 6,'SO', 7,'NP', 8,'CP', 9,'MG.SET',10,11)
                        , X.RSLT_TP_SEQ   
                ) Z
        WHERE   Z.RSLT_TP_SEQ IS NOT NULL 
	
        )			]]></sql>
			<params>
				<param name="pln_yr" type="12" value="" out="N"/>
				<param name="eq_knd_cd" type="12" value="" out="N"/>
				<param name="ver_seq" type="2" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
