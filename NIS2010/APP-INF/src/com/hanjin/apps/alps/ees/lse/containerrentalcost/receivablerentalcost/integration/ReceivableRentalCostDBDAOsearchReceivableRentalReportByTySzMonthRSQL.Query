<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ReceivableRentalCostDBDAOsearchReceivableRentalReportByTySzMonthRSQL">
			<desc><![CDATA[Receivable Invoice 한 결과에 대하여 TP/SZ , Month 별로 실적을 조회
2010.11.12 남궁진호 [CHM-201007083-01]  total 부분의 avaerage 로직 에러 수정(==> total amout / total vol)]]></desc>
			<sql><![CDATA[
WITH PARAM AS (
    SELECT 
            @[report_type]  AS REPORT_TYPE,
            @[period_stdt]  AS PERIOD_STDT,
            @[period_eddt]  AS PERIOD_EDDT,
            @[period_year]  AS PERIOD_YEAR,
            @[company]      AS COMPANY,
            @[status]       AS STATUS,
            @[receivable]   AS RECEIVABLE,
            @[agmt_cty_cd]  AS AGMT_CTY_CD,
            @[agmt_seq]     AS AGMT_SEQ,
            @[vndr_seq]     AS VNDR_SEQ,
            @[loc_tp]       AS LOC_TP,
            @[loc_cd]       AS LOC_CD
            
    FROM    DUAL
) 
, XXX AS (
SELECT
                CNTR_TPSZ_CD ,  
                DECODE( DIV  , 1 ,'VOL' , 2 , 'AMT' , 3 , 'AVG' ) DIV ,                
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '01', FF, 0))  JAN,
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '02', FF, 0))  FEB,
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '03', FF, 0))  MAR,  
                CASE WHEN DIV = 3 THEN
                DECODE(SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '01', FF, 0))+ 
                           SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '02', FF, 0))+ 
                           SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '03', FF, 0)))     OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
                          ROUND(
                           SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '01', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '02', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '03', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                           SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '01', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '02', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '03', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 2))
                ELSE
                (SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '01', FF, 0))+ 
                 SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '02', FF, 0))+ 
                 SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '03', FF, 0)))
                END                                               TTL_1,
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '04', FF, 0))  APR,
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '05', FF, 0))  MAY,
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '06', FF, 0))  JUN,
                CASE WHEN DIV = 3 THEN
                DECODE(SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '04', FF, 0))+ 
                           SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '05', FF, 0))+ 
                           SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '06', FF, 0)))      OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
                          ROUND(
                           SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '04', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '05', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '06', FF, 0)))  OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                           SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '04', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '05', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '06', FF, 0)))  OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 2))
                ELSE
                (SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '04', FF, 0))+ 
                 SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '05', FF, 0))+ 
                 SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '06', FF, 0)))
                END                                                 TTL_2,  
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '07', FF, 0))  JUL,
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '08', FF, 0))  AUG,
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '09', FF, 0))  SEP,
                CASE WHEN DIV = 3 THEN
                DECODE(SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '07', FF, 0))+ 
                           SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '08', FF, 0))+ 
                           SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '09', FF, 0)))     OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
                          ROUND(
                           SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '07', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '08', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '09', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                           SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '07', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '08', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '09', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 2))
                ELSE
                (SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '07', FF, 0))+ 
                 SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '08', FF, 0))+ 
                 SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '09', FF, 0)))
                END                                                 TTL_3,  
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '10', FF, 0))  OCT,
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '11', FF, 0))  NOV,
                SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '12', FF, 0))  DEC,
                CASE WHEN DIV = 3 THEN
                DECODE(SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '10', FF, 0))+ 
                           SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '11', FF, 0))+ 
                           SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '12', FF, 0)))     OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
                          ROUND(
                           SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '10', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '11', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '12', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                           SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '10', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '11', FF, 0))+ 
                               SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '12', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 2))
                ELSE
                (SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '10', FF, 0))+ 
                 SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '11', FF, 0))+ 
                 SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '12', FF, 0)))
                END                                                 TTL_4,
               CASE WHEN DIV = 3 THEN
                  DECODE(SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '01', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '02', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '03', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '04', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '05', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '06', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '07', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '08', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '09', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '10', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '11', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '12', FF, 0)))
                    OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
                  ROUND(
                   SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '01', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '02', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '03', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '04', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '05', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '06', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '07', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '08', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '09', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '10', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '11', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '12', FF, 0)))
                    OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                    SUM(SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '01', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '02', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '03', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '04', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '05', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '06', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '07', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '08', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '09', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '10', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '11', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '12', FF, 0)))
                    OVER (PARTITION BY CNTR_TPSZ_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 2))
               ELSE
                   (SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '01', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '02', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '03', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '04', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '05', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '06', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '07', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '08', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '09', FF, 0))+
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '10', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '11', FF, 0))+ 
                    SUM(DECODE(SUBSTR(QTY_YRMON, 5, 2), '12', FF, 0)))
               END                                               G_TTL,
               DIV DIV_SEQ
FROM( SELECT              
         V1.CNTR_TPSZ_CD,
         V1.QTY_YRMON ,
         V2.DIV_SEQ DIV,
         CASE V2.DIV_SEQ
              WHEN 1 THEN NVL(V1.F1,0)
              WHEN 2 THEN NVL(V1.F2,0)
              WHEN 3 THEN NVL(V1.F3,0)              
         END AS FF
      FROM( SELECT /*+ INDEX(A, XPKLSE_RCV_RNTL_CHG) */
                   B.CNTR_TPSZ_CD, 
                   A.QTY_YRMON,
                   COUNT(DISTINCT(B.CNTR_NO)) F1, 
                   SUM(B.COST_AMT) F2 ,
                   ROUND( (SUM(B.COST_AMT)  / COUNT(DISTINCT(B.CNTR_NO))) * 100 ) / 100 F3
            FROM     LSE_RCV_RNTL_CHG A, LSE_RCV_RNTL_CHG_DTL B , PARAM P
            WHERE   A.COST_YRMON   = B.COST_YRMON
            AND     A.RCV_RNTL_SEQ = B.RCV_RNTL_SEQ
            AND     A.AGMT_CTY_CD  = B.AGMT_CTY_CD
            AND     A.AGMT_SEQ     = B.AGMT_SEQ
            AND     A.QTY_YRMON LIKE   P.PERIOD_YEAR || '%'
            AND     A.CXL_FLG = 'N'
            AND     B.LSE_RCV_CHG_CRE_CD <> 'D'

#if (${agmt_seq} != '' ) 
            AND     A.AGMT_CTY_CD  = P.AGMT_CTY_CD
            AND     A.AGMT_SEQ     = P.AGMT_SEQ
#end

#if (${receivable} == 'A' ) 
            AND     A.LSE_CNTR_CHG_STS_CD = 'I'               --Actual Amount경우 조건, Total Amount 인 경우 조건이 없어짐..
#end

#if (${status} == 'SBO' ) 
            AND     B.LSTM_CD = 'SO'
#elseif (${status} == 'MUO' ) 
            AND     B.LSTM_CD = 'MO'
#end

#if (${vndr_seq} != '')
            AND A.VNDR_SEQ = P.VNDR_SEQ
#end

#if (${lstm_cd_str} != '')
    	    AND     B.LSTM_CD IN (
	        #foreach($key IN ${lstm_cd})
		        #if($velocityCount < $lstm_cd.size())
			        '$key',
		        #else
			        '$key'
		        #end
	        #end
				)
#end

#if (${cntr_tpsz_cd_str} != '')
            AND     B.CNTR_TPSZ_CD IN (
	        #foreach($key IN ${cntr_tpsz_cd})
		        #if($velocityCount < $cntr_tpsz_cd.size())
			        '$key',
		        #else
			        '$key'
		        #end
	        #end
				)
#end

#if (${charge_type_cd_str} != '')
            AND     B.LSE_RCV_CHG_TP_CD IN (
	        #foreach($key IN ${charge_type_cd})
		        #if($velocityCount < $charge_type_cd.size())
			        '$key',
		        #else
			        '$key'
		        #end
	        #end
				)
#end


#if (${loc_cd} != '')
    
     #if (${loc_tp} == 'R')
            AND     B.OFFH_LOC_CD IN (SELECT RCC_CD FROM MDM_EQ_ORZ_CHT WHERE RCC_CD = P.LOC_CD)
     #elseif (${loc_tp} == 'L')
            AND     B.OFFH_LOC_CD IN (SELECT LCC_CD FROM MDM_EQ_ORZ_CHT WHERE LCC_CD = P.LOC_CD)
     #elseif (${loc_tp} == 'S')
            AND     B.OFFH_LOC_CD IN (SELECT SCC_CD FROM MDM_EQ_ORZ_CHT WHERE SCC_CD = P.LOC_CD)
     #elseif (${loc_tp} == 'C')
            AND     SUBSTR(B.OFFH_LOC_CD, 0 , 2 ) = P.LOC_CD
     #end
#end
            GROUP BY B.CNTR_TPSZ_CD, A.QTY_YRMON) V1,
           ( SELECT 1 AS DIV_SEQ FROM DUAL
             UNION
             SELECT 2 AS DIV_SEQ FROM DUAL
             UNION
             SELECT 3 AS DIV_SEQ FROM DUAL ) V2 )
GROUP BY CNTR_TPSZ_CD ,  DIV   
ORDER BY CNTR_TPSZ_CD , DIV_SEQ )
SELECT
   CNTR_TPSZ_CD ,
   DIV,
   JAN,   
   FEB,   
   MAR,   
   TTL_1, 
   APR,   
   MAY,   
   JUN,   
   TTL_2, 
   JUL,   
   AUG,   
   SEP,   
   TTL_3, 
   OCT,   
   NOV,   
   DEC,   
   TTL_4, 
   G_TTL
FROM(
SELECT 
   XXX.CNTR_TPSZ_CD ,
   DIV,
   JAN,   
   FEB,   
   MAR,   
   TTL_1, 
   APR,   
   MAY,   
   JUN,   
   TTL_2, 
   JUL,   
   AUG,   
   SEP,   
   TTL_3, 
   OCT,   
   NOV,   
   DEC,   
   TTL_4, 
   G_TTL,
   TTT.RPT_DP_SEQ
FROM XXX ,( SELECT 
              CNTR_TPSZ_CD,
              CNTR_SZ_CD,
              CNTR_TP_CD, 
              CNTR_TPSZ_DESC,
              CNTR_TPSZ_RMK,
              CNTR_TPSZ_ISO_CD,
              CNTR_TPSZ_GRP_CD,
              RPT_DP_SEQ
            FROM MDM_CNTR_TP_SZ
            WHERE DELT_FLG='N'
            AND ACIAC_DIV_CD='A'
            ORDER BY RPT_DP_SEQ ) TTT
WHERE XXX.CNTR_TPSZ_CD = TTT.CNTR_TPSZ_CD
ORDER BY TTT.RPT_DP_SEQ , XXX.DIV_SEQ)
UNION ALL
SELECT   
   CNTR_TPSZ_CD ,
   DIV,
   JAN,   
   FEB,   
   MAR,   
   TTL_1, 
   APR,   
   MAY,   
   JUN,   
   TTL_2, 
   JUL,   
   AUG,   
   SEP,   
   TTL_3, 
   OCT,   
   NOV,   
   DEC,   
   TTL_4, 
   G_TTL   
FROM
(SELECT
 DIV_SEQ,
 'G.TTL' CNTR_TPSZ_CD ,
 DIV,
 SUM(JAN) JAN,
 SUM(FEB) FEB,
 SUM(MAR) MAR,
 SUM(TTL_1) TTL_1,
 SUM(APR) APR,
 SUM(MAY) MAY,
 SUM(JUN) JUN,
 SUM(TTL_2) TTL_2,
 SUM(JUL) JUL,
 SUM(AUG) AUG,
 SUM(SEP) SEP,
 SUM(TTL_3) TTL_3,
 SUM(OCT) OCT,
 SUM(NOV) NOV,
 SUM(DEC) DEC,
 SUM(TTL_4) TTL_4,
 SUM(G_TTL) G_TTL
FROM XXX
WHERE DIV_SEQ <> 3
GROUP BY DIV , DIV_SEQ
ORDER BY DIV_SEQ)
UNION ALL
SELECT
   'G.TTL' CNTR_TPSZ_CD,
   'AVG' DIV ,   
   case when A.JAN > 0 AND V.JAN > 0 then round((A.JAN / V.JAN) * 100 ) / 100  else 0 end JAN ,                                                                                               
   case when A.FEB > 0 AND V.FEB > 0 then round((A.FEB / V.FEB) * 100 ) / 100  else 0 end FEB ,   
   case when A.MAR > 0 AND V.MAR > 0 then round((A.MAR / V.MAR) * 100 ) / 100  else 0 end MAR ,   
   case when A.TTL_1 > 0 AND V.TTL_1 > 0 then round((A.TTL_1 / V.TTL_1) * 100 ) / 100  else 0 end TTL_1 ,   
   case when A.APR > 0 AND V.APR > 0 then round((A.APR / V.APR) * 100 ) / 100  else 0 end APR ,   
   case when A.MAY > 0 AND V.MAY > 0 then round((A.MAY / V.MAY) * 100 ) / 100  else 0 end MAY ,   
   case when A.JUN > 0 AND V.JUN > 0 then round((A.JUN / V.JUN) * 100 ) / 100  else 0 end JUN ,     
   case when A.TTL_2 > 0 AND V.TTL_2 > 0 then round((A.TTL_2 / V.TTL_2) * 100 ) / 100  else 0 end TTL_2 ,   
   case when A.JUL > 0 AND V.JUL > 0 then round((A.JUL / V.JUL) * 100 ) / 100  else 0 end JUL ,   
   case when A.AUG > 0 AND V.AUG > 0 then round((A.AUG / V.AUG) * 100 ) / 100  else 0 end AUG ,   
   case when A.SEP > 0 AND V.SEP > 0 then round((A.SEP / V.SEP) * 100 ) / 100  else 0 end SEP ,   
   case when A.TTL_3 > 0 AND V.TTL_3 > 0 then round((A.TTL_3 / V.TTL_3) * 100 ) / 100  else 0 end TTL_3 ,   
   case when A.OCT > 0 AND V.OCT > 0 then round((A.OCT / V.OCT) * 100 ) / 100  else 0 end OCT ,   
   case when A.NOV > 0 AND V.NOV > 0 then round((A.NOV / V.NOV) * 100 ) / 100  else 0 end NOV ,   
   case when A.DEC > 0 AND V.DEC > 0 then round((A.DEC / V.DEC) * 100 ) / 100  else 0 end DEC ,
   case when A.TTL_4 > 0 AND V.TTL_4 > 0 then round((A.TTL_4 / V.TTL_4) * 100 ) / 100  else 0 end TTL_4 ,                                                                                               
   case when A.G_TTL > 0 AND V.G_TTL > 0 then round((A.G_TTL / V.G_TTL) * 100 ) / 100  else 0 end G_TTL 
FROM ( SELECT           
           'G.TTL' CNTR_TPSZ_CD ,           
           SUM(JAN) JAN ,   
           SUM(FEB) FEB ,   
           SUM(MAR) MAR ,   
           SUM(TTL_1) TTL_1 , 
           SUM(APR) APR ,   
           SUM(MAY) MAY ,   
           SUM(JUN) JUN ,   
           SUM(TTL_2) TTL_2 , 
           SUM(JUL) JUL ,   
           SUM(AUG) AUG ,   
           SUM(SEP) SEP ,   
           SUM(TTL_3) TTL_3 , 
           SUM(OCT) OCT ,   
           SUM(NOV) NOV ,   
           SUM(DEC) DEC ,   
           SUM(TTL_4) TTL_4 , 
           SUM(G_TTL) G_TTL 
       FROM XXX 
       WHERE DIV = 'VOL'
	   GROUP BY 1) V , 
     ( SELECT           
           'G.TTL' CNTR_TPSZ_CD ,           
           SUM(JAN) JAN ,   
           SUM(FEB) FEB ,   
           SUM(MAR) MAR ,   
           SUM(TTL_1) TTL_1 , 
           SUM(APR) APR ,   
           SUM(MAY) MAY ,   
           SUM(JUN) JUN ,   
           SUM(TTL_2) TTL_2 , 
           SUM(JUL) JUL ,   
           SUM(AUG) AUG ,   
           SUM(SEP) SEP ,   
           SUM(TTL_3) TTL_3 , 
           SUM(OCT) OCT ,   
           SUM(NOV) NOV ,   
           SUM(DEC) DEC ,   
           SUM(TTL_4) TTL_4 , 
           SUM(G_TTL) G_TTL 
       FROM XXX 
       WHERE DIV = 'AMT'
	   GROUP BY 1) A 
WHERE  V.CNTR_TPSZ_CD = A.CNTR_TPSZ_CD			]]></sql>
			<params>
				<param name="report_type" type="12" value="" out="N"/>
				<param name="period_stdt" type="12" value="" out="N"/>
				<param name="period_eddt" type="12" value="" out="N"/>
				<param name="period_year" type="12" value="" out="N"/>
				<param name="company" type="12" value="" out="N"/>
				<param name="status" type="12" value="" out="N"/>
				<param name="receivable" type="12" value="" out="N"/>
				<param name="agmt_cty_cd" type="12" value="" out="N"/>
				<param name="agmt_seq" type="12" value="" out="N"/>
				<param name="vndr_seq" type="12" value="" out="N"/>
				<param name="loc_tp" type="12" value="" out="N"/>
				<param name="loc_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
