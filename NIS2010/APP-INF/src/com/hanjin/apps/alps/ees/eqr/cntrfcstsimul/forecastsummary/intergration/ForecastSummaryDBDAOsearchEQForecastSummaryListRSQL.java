/*=========================================================
*Copyright(c) 2016 CyberLogitec
*@FileName : ForecastSummaryDBDAOsearchEQForecastSummaryListRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2016.05.12
*@LastModifier : 
*@LastVersion : 1.0
* 2016.05.12 
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.ees.eqr.cntrfcstsimul.forecastsummary.intergration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class ForecastSummaryDBDAOsearchEQForecastSummaryListRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * EES_EQR_1102 EQ Forecast Summary
	  * </pre>
	  */
	public ForecastSummaryDBDAOsearchEQForecastSummaryListRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("cim_matchback_week",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("s_loc_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("s_loc_grp_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("fcast_yrwk",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("s_rcc_cd",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.ees.eqr.cntrfcstsimul.forecastsummary.intergration").append("\n"); 
		query.append("FileName : ForecastSummaryDBDAOsearchEQForecastSummaryListRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("WITH WK_DATA AS (" ).append("\n"); 
		query.append("    SELECT MAX(WEEK1) WEEK1" ).append("\n"); 
		query.append("         , MAX(WEEK2) WEEK2" ).append("\n"); 
		query.append("         , MAX(WEEK3) WEEK3" ).append("\n"); 
		query.append("         , MAX(WEEK4) WEEK4" ).append("\n"); 
		query.append("      FROM" ).append("\n"); 
		query.append("      (" ).append("\n"); 
		query.append("       SELECT MAX(DECODE(SEQ,1,WEEK)) WEEK1" ).append("\n"); 
		query.append("            , MAX(DECODE(SEQ,2,WEEK)) WEEK2" ).append("\n"); 
		query.append("            , MAX(DECODE(SEQ,3,WEEK)) WEEK3" ).append("\n"); 
		query.append("            , MAX(DECODE(SEQ,4,WEEK)) WEEK4" ).append("\n"); 
		query.append("        FROM   									" ).append("\n"); 
		query.append("            (      									" ).append("\n"); 
		query.append("                SELECT " ).append("\n"); 
		query.append("                    (ROWNUM)SEQ, PLN_YR || PLN_WK WEEK" ).append("\n"); 
		query.append("                FROM " ).append("\n"); 
		query.append("                    EQR_WK_PRD" ).append("\n"); 
		query.append("                WHERE " ).append("\n"); 
		query.append("                    PLN_YR||PLN_WK >= REPLACE(@[fcast_yrwk], '-', '')" ).append("\n"); 
		query.append("                ORDER BY SEQ ASC                        " ).append("\n"); 
		query.append("            )                                			" ).append("\n"); 
		query.append("        WHERE ROWNUM <= 4" ).append("\n"); 
		query.append("        GROUP BY SEQ" ).append("\n"); 
		query.append("       )" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("-- 검색주차보다 작거나 같은것 중에 제일 큰 TARGET WEEK" ).append("\n"); 
		query.append(",TGT_WEEK AS " ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("    SELECT NVL(MAX(TGT_YRWK), '190001') TGT_YRWK -- CIM 에 WEEK 없는 경우 대비" ).append("\n"); 
		query.append("    FROM" ).append("\n"); 
		query.append("    (" ).append("\n"); 
		query.append("        SELECT DISTINCT A.TGT_YRWK" ).append("\n"); 
		query.append("              ,(" ).append("\n"); 
		query.append("                  SELECT TO_DATE(WK_ST_DT, 'YYYYMMDD')" ).append("\n"); 
		query.append("                  FROM EQR_WK_PRD" ).append("\n"); 
		query.append("                  WHERE PLN_YR||PLN_WK = A.TGT_YRWK" ).append("\n"); 
		query.append("              ) A_DATE" ).append("\n"); 
		query.append("              ,(" ).append("\n"); 
		query.append("                  SELECT TO_DATE(WK_ST_DT, 'YYYYMMDD')" ).append("\n"); 
		query.append("                  FROM EQR_WK_PRD" ).append("\n"); 
		query.append("                  WHERE PLN_YR||PLN_WK = REPLACE(@[fcast_yrwk], '-', '')" ).append("\n"); 
		query.append("              ) B_DATE" ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("        FROM CIM_OPTM_STK_SMRY A " ).append("\n"); 
		query.append("        WHERE A.OPTM_STK_MNG_TP_CD = 'F' -- final (4주 1번 생성)" ).append("\n"); 
		query.append("        AND   A.DMG_FLG = 'A'" ).append("\n"); 
		query.append("        ORDER BY A.TGT_YRWK" ).append("\n"); 
		query.append("    )" ).append("\n"); 
		query.append("    WHERE A_DATE <= B_DATE -- 검색주차보다 작거나 같은것 중에 제일 큰 TARGET WEEK" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(",DUMMY_HEAD AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("             SELECT REPLACE(@[fcast_yrwk], '-', '') INP_YRWK" ).append("\n"); 
		query.append("                   ,A.RCC_CD" ).append("\n"); 
		query.append("                   ,A.LOC_CD" ).append("\n"); 
		query.append("                   ,A.LOC_GRP_CD" ).append("\n"); 
		query.append("                   ,A.LOC_CD ||'('||A.LOC_GRP_CD ||')' DIVISION" ).append("\n"); 
		query.append("                   ,C.CNTR_TPSZ_CD    " ).append("\n"); 
		query.append("                   ,A.STK_ICRZ_FTR_FLG" ).append("\n"); 
		query.append("                   ,A.STK_DCRZ_FTR_FLG" ).append("\n"); 
		query.append("                   ,A.SROS_SPLS_FTR_FLG" ).append("\n"); 
		query.append("                   ,A.NORM_SPLS_FTR_FLG" ).append("\n"); 
		query.append("                   ,A.BAL_FTR_FLG" ).append("\n"); 
		query.append("                   ,A.SROS_SHTG_FTR_FLG" ).append("\n"); 
		query.append("                   ,A.NORM_SHTG_FTR_FLG" ).append("\n"); 
		query.append("             FROM EQR_CTRL_FCAST_SMRY_FTR A     " ).append("\n"); 
		query.append("                 ,(  -- 타입사이즈 하드코딩" ).append("\n"); 
		query.append("                               SELECT 'D2' CNTR_TPSZ_CD FROM DUAL" ).append("\n"); 
		query.append("                     UNION ALL SELECT 'D4' CNTR_TPSZ_CD FROM DUAL" ).append("\n"); 
		query.append("                     UNION ALL SELECT 'D5' CNTR_TPSZ_CD FROM DUAL" ).append("\n"); 
		query.append("                     UNION ALL SELECT 'D7' CNTR_TPSZ_CD FROM DUAL" ).append("\n"); 
		query.append("                   ) C" ).append("\n"); 
		query.append("            WHERE DELT_FTR_FLG = 'N' -- 삭제건은 제외" ).append("\n"); 
		query.append("            #if(${s_rcc_cd} != '')" ).append("\n"); 
		query.append("               AND A.RCC_CD = @[s_rcc_cd]" ).append("\n"); 
		query.append("            #end" ).append("\n"); 
		query.append("            #if(${s_loc_grp_cd} != '')" ).append("\n"); 
		query.append("               AND A.LOC_GRP_CD = @[s_loc_grp_cd]" ).append("\n"); 
		query.append("            #end" ).append("\n"); 
		query.append("            #if(${s_loc_cd} != '')" ).append("\n"); 
		query.append("               AND A.LOC_CD = @[s_loc_cd]" ).append("\n"); 
		query.append("            #end" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT Z.RCC_CD" ).append("\n"); 
		query.append("      ,Z.DIVISION" ).append("\n"); 
		query.append("      ,Z.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("      ,NVL(B.IV_W0 , 0) IV_W0 " ).append("\n"); 
		query.append("      ,NVL(B.IV_W1 , 0) IV_W1 " ).append("\n"); 
		query.append("      ,NVL(B.IV_W2 , 0) IV_W2 " ).append("\n"); 
		query.append("      ,NVL(B.IV_W3 , 0) IV_W3 " ).append("\n"); 
		query.append("      ,NVL(B.IV_AVG, 0) IV_AVG" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("      ,NVL(E.OPT_VOL,0) OPT_VOL -- FROM CIM OPTI VALUE" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("      ,NVL(D.OP_W0 , 0) OP_W0 " ).append("\n"); 
		query.append("      ,NVL(D.OP_W1 , 0) OP_W1 " ).append("\n"); 
		query.append("      ,NVL(D.OP_W2 , 0) OP_W2 " ).append("\n"); 
		query.append("      ,NVL(D.OP_W3 , 0) OP_W3 " ).append("\n"); 
		query.append("      --,NVL(D.OP_AVG, 0) OP_AVG" ).append("\n"); 
		query.append("      ,ROUND(NVL(D.OP_AVG, 0)) OP_AVG" ).append("\n"); 
		query.append("      " ).append("\n"); 
		query.append("      ,NVL(C.PR_W0 , 0) PR_W0 " ).append("\n"); 
		query.append("      ,NVL(C.PR_W1 , 0) PR_W1 " ).append("\n"); 
		query.append("      ,NVL(C.PR_W2 , 0) PR_W2 " ).append("\n"); 
		query.append("      ,NVL(C.PR_W3 , 0) PR_W3 " ).append("\n"); 
		query.append("      ,NVL(C.PR_AVG, 0) PR_AVG" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("      ,NVL(F.MB, 0) MB_VALUE" ).append("\n"); 
		query.append("      ,F.MB_STATUS      " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if(${s_option_cd} == 'Y')" ).append("\n"); 
		query.append("      -- filter 적용하면 filter에 표시된 정보만 표시 " ).append("\n"); 
		query.append("      ,CASE WHEN A.STK_ICRZ_FLG ='Y' AND Z.STK_ICRZ_FTR_FLG ='Y' THEN A.STK_ICRZ_FLG  ELSE NULL END STK_ICRZ_FLG " ).append("\n"); 
		query.append("      ,CASE WHEN A.STK_DCRZ_FLG ='Y' AND Z.STK_DCRZ_FTR_FLG ='Y' THEN A.STK_DCRZ_FLG  ELSE NULL END STK_DCRZ_FLG " ).append("\n"); 
		query.append("      ,CASE WHEN A.SROS_SPLS_FLG='Y' AND Z.SROS_SPLS_FTR_FLG='Y' THEN A.SROS_SPLS_FLG ELSE NULL END SROS_SPLS_FLG " ).append("\n"); 
		query.append("      ,CASE WHEN A.NORM_SPLS_FLG='Y' AND Z.NORM_SPLS_FTR_FLG='Y' THEN A.NORM_SPLS_FLG ELSE NULL END NORM_SPLS_FLG " ).append("\n"); 
		query.append("      ,CASE WHEN A.SROS_SHTG_FLG='Y' AND Z.SROS_SHTG_FTR_FLG='Y' THEN A.SROS_SHTG_FLG ELSE NULL END SROS_SHTG_FLG " ).append("\n"); 
		query.append("      ,CASE WHEN A.NORM_SHTG_FLG='Y' AND Z.NORM_SHTG_FTR_FLG='Y' THEN A.NORM_SHTG_FLG ELSE NULL END NORM_SHTG_FLG " ).append("\n"); 
		query.append("      ,CASE WHEN A.BAL_FLG      ='Y' AND Z.BAL_FTR_FLG      ='Y' THEN A.BAL_FLG       ELSE NULL END BAL_FLG " ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("       -- filter 적용 안되었으므로, 모든 정보 표시" ).append("\n"); 
		query.append("      ,DECODE(A.STK_ICRZ_FLG , 'N', NULL, A.STK_ICRZ_FLG ) STK_ICRZ_FLG " ).append("\n"); 
		query.append("      ,DECODE(A.STK_DCRZ_FLG , 'N', NULL, A.STK_DCRZ_FLG ) STK_DCRZ_FLG " ).append("\n"); 
		query.append("      ,DECODE(A.SROS_SPLS_FLG, 'N', NULL, A.SROS_SPLS_FLG) SROS_SPLS_FLG" ).append("\n"); 
		query.append("      ,DECODE(A.NORM_SPLS_FLG, 'N', NULL, A.NORM_SPLS_FLG) NORM_SPLS_FLG" ).append("\n"); 
		query.append("      ,DECODE(A.SROS_SHTG_FLG, 'N', NULL, A.SROS_SHTG_FLG) SROS_SHTG_FLG" ).append("\n"); 
		query.append("      ,DECODE(A.NORM_SHTG_FLG, 'N', NULL, A.NORM_SHTG_FLG) NORM_SHTG_FLG" ).append("\n"); 
		query.append("      ,DECODE(A.BAL_FLG,       'N', NULL, A.BAL_FLG)       BAL_FLG" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("   " ).append("\n"); 
		query.append("FROM DUMMY_HEAD Z" ).append("\n"); 
		query.append(",(" ).append("\n"); 
		query.append("    -- SUMMARY 결과 조회" ).append("\n"); 
		query.append("    SELECT B.LOC_CD" ).append("\n"); 
		query.append("          ,B.INP_YRWK" ).append("\n"); 
		query.append("          ,B.LOC_GRP_CD      " ).append("\n"); 
		query.append("          ,B.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          " ).append("\n"); 
		query.append("	      ,B.STK_ICRZ_FLG " ).append("\n"); 
		query.append("		  ,B.STK_DCRZ_FLG " ).append("\n"); 
		query.append("		  ,B.SROS_SPLS_FLG" ).append("\n"); 
		query.append("		  ,B.NORM_SPLS_FLG" ).append("\n"); 
		query.append("		  ,B.SROS_SHTG_FLG" ).append("\n"); 
		query.append("		  ,B.NORM_SHTG_FLG" ).append("\n"); 
		query.append("		  ,B.BAL_FLG    " ).append("\n"); 
		query.append("    FROM EQR_CTRL_FCAST_SMRY     B    " ).append("\n"); 
		query.append("    WHERE B.INP_YRWK = REPLACE(@[fcast_yrwk], '-', '') -- 변수처리" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(") A" ).append("\n"); 
		query.append(",(" ).append("\n"); 
		query.append("    -- INVENTORY VOLUME DATA 수집" ).append("\n"); 
		query.append("    -- HEAD HAUL" ).append("\n"); 
		query.append("    SELECT A.INP_YRWK" ).append("\n"); 
		query.append("          ,A.LOC_GRP_CD" ).append("\n"); 
		query.append("          ,A.LOC_CD" ).append("\n"); 
		query.append("          ,A.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          -- WEEK 는 모두 변수 처리" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(A.FCAST_YRWK, WEEK1, A.FCAST_VOL_VAL)),0) IV_W0" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(A.FCAST_YRWK, WEEK2, A.FCAST_VOL_VAL)),0) IV_W1" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(A.FCAST_YRWK, WEEK3, A.FCAST_VOL_VAL)),0) IV_W2" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(A.FCAST_YRWK, WEEK4, A.FCAST_VOL_VAL)),0) IV_W3" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("          ,ROUND(" ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(A.FCAST_YRWK, WEEK1, A.FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(A.FCAST_YRWK, WEEK2, A.FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(A.FCAST_YRWK, WEEK3, A.FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(A.FCAST_YRWK, WEEK4, A.FCAST_VOL_VAL)),0)" ).append("\n"); 
		query.append("                ) / 4" ).append("\n"); 
		query.append("           ,0)  IV_AVG" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    FROM EQR_CTRL_FCAST_SMRY_VOL A" ).append("\n"); 
		query.append("        ,EQR_CTRL_FCAST_SMRY_FTR B" ).append("\n"); 
		query.append("        ,WK_DATA C" ).append("\n"); 
		query.append("    WHERE A.LOC_GRP_CD   = B.LOC_GRP_CD" ).append("\n"); 
		query.append("    AND   A.LOC_CD       = B.LOC_CD" ).append("\n"); 
		query.append("    AND   B.DELT_FTR_FLG = 'N'" ).append("\n"); 
		query.append("    AND   B.HUL_BND_CD   = 'HH'" ).append("\n"); 
		query.append("    AND   A.INP_YRWK     = REPLACE(@[fcast_yrwk], '-', '') -- 변수처리" ).append("\n"); 
		query.append("    AND   A.MTY_RPT_TP_CD IN ('IV', 'RI', 'OT', 'MG') -- HEAD HAUL : Inventory + Reposition In + Other(LT/ST/OW) + MG Forecast)                  " ).append("\n"); 
		query.append("    #if(${s_rcc_cd} != '')" ).append("\n"); 
		query.append("        AND B.RCC_CD = @[s_rcc_cd]" ).append("\n"); 
		query.append("    #end" ).append("\n"); 
		query.append("    #if(${s_loc_grp_cd} != '')" ).append("\n"); 
		query.append("        AND B.LOC_GRP_CD = @[s_loc_grp_cd]" ).append("\n"); 
		query.append("    #end" ).append("\n"); 
		query.append("    #if(${s_loc_cd} != '')" ).append("\n"); 
		query.append("        AND B.LOC_CD = @[s_loc_cd]" ).append("\n"); 
		query.append("    #end" ).append("\n"); 
		query.append("    GROUP BY A.INP_YRWK" ).append("\n"); 
		query.append("            ,A.LOC_GRP_CD" ).append("\n"); 
		query.append("            ,A.LOC_CD" ).append("\n"); 
		query.append("            ,A.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("            " ).append("\n"); 
		query.append("    -- BACK HAUL" ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    SELECT A.INP_YRWK" ).append("\n"); 
		query.append("          ,A.LOC_GRP_CD" ).append("\n"); 
		query.append("          ,A.LOC_CD" ).append("\n"); 
		query.append("          ,A.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          -- WEEK 는 모두 변수 처리" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(A.FCAST_YRWK, WEEK1, A.FCAST_VOL_VAL)),0) IV_W0" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(A.FCAST_YRWK, WEEK2, A.FCAST_VOL_VAL)),0) IV_W1" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(A.FCAST_YRWK, WEEK3, A.FCAST_VOL_VAL)),0) IV_W2" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(A.FCAST_YRWK, WEEK3, A.FCAST_VOL_VAL)),0) IV_W3" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("          ,ROUND(" ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(A.FCAST_YRWK, WEEK1, A.FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(A.FCAST_YRWK, WEEK2, A.FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(A.FCAST_YRWK, WEEK3, A.FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(A.FCAST_YRWK, WEEK4, A.FCAST_VOL_VAL)),0)" ).append("\n"); 
		query.append("                ) / 4" ).append("\n"); 
		query.append("           ,0)  IV_AVG" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    FROM EQR_CTRL_FCAST_SMRY_VOL A" ).append("\n"); 
		query.append("        ,EQR_CTRL_FCAST_SMRY_FTR B" ).append("\n"); 
		query.append("        ,WK_DATA" ).append("\n"); 
		query.append("    WHERE A.LOC_GRP_CD   = B.LOC_GRP_CD" ).append("\n"); 
		query.append("    AND   A.LOC_CD       = B.LOC_CD" ).append("\n"); 
		query.append("    AND   B.DELT_FTR_FLG = 'N'" ).append("\n"); 
		query.append("    AND   B.HUL_BND_CD   = 'BH'" ).append("\n"); 
		query.append("    AND   A.INP_YRWK     = REPLACE(@[fcast_yrwk], '-', '') -- 변수처리" ).append("\n"); 
		query.append("    AND   A.MTY_RPT_TP_CD IN ('IV', 'MG', 'RV', 'OH') -- BACK HAUL : Starting Inventory = Initial Inventory + MG + MT In via VD + On-hire       " ).append("\n"); 
		query.append("    #if(${s_rcc_cd} != '')" ).append("\n"); 
		query.append("        AND B.RCC_CD = @[s_rcc_cd]" ).append("\n"); 
		query.append("    #end" ).append("\n"); 
		query.append("    #if(${s_loc_grp_cd} != '')" ).append("\n"); 
		query.append("        AND B.LOC_GRP_CD = @[s_loc_grp_cd]" ).append("\n"); 
		query.append("    #end" ).append("\n"); 
		query.append("    #if(${s_loc_cd} != '')" ).append("\n"); 
		query.append("        AND B.LOC_CD = @[s_loc_cd]" ).append("\n"); 
		query.append("    #end" ).append("\n"); 
		query.append("    GROUP BY A.INP_YRWK" ).append("\n"); 
		query.append("            ,A.LOC_GRP_CD" ).append("\n"); 
		query.append("            ,A.LOC_CD" ).append("\n"); 
		query.append("            ,A.CNTR_TPSZ_CD            " ).append("\n"); 
		query.append(") B" ).append("\n"); 
		query.append(",(" ).append("\n"); 
		query.append("    -- PFMC 수집" ).append("\n"); 
		query.append("    SELECT INP_YRWK" ).append("\n"); 
		query.append("          ,LOC_GRP_CD" ).append("\n"); 
		query.append("          ,LOC_CD" ).append("\n"); 
		query.append("          ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          -- WEEK 는 모두 변수 처리         " ).append("\n"); 
		query.append("          ,TO_CHAR(NVL(SUM(DECODE(FCAST_YRWK, WEEK1, FCAST_VOL_VAL)),0), 'fm9999999999990.0') PR_W0" ).append("\n"); 
		query.append("          ,TO_CHAR(NVL(SUM(DECODE(FCAST_YRWK, WEEK2, FCAST_VOL_VAL)),0), 'fm9999999999990.0') PR_W1" ).append("\n"); 
		query.append("          ,TO_CHAR(NVL(SUM(DECODE(FCAST_YRWK, WEEK3, FCAST_VOL_VAL)),0), 'fm9999999999990.0') PR_W2" ).append("\n"); 
		query.append("          ,TO_CHAR(NVL(SUM(DECODE(FCAST_YRWK, WEEK4, FCAST_VOL_VAL)),0), 'fm9999999999990.0') PR_W3" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("          ,TO_CHAR(ROUND(" ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(FCAST_YRWK, WEEK1, FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(FCAST_YRWK, WEEK2, FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(FCAST_YRWK, WEEK3, FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(FCAST_YRWK, WEEK4, FCAST_VOL_VAL)),0)" ).append("\n"); 
		query.append("                ) / 4" ).append("\n"); 
		query.append("           ,1), 'fm9999999999990.0')  PR_AVG" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    FROM EQR_CTRL_FCAST_SMRY_VOL" ).append("\n"); 
		query.append("       , WK_DATA" ).append("\n"); 
		query.append("    WHERE   INP_YRWK = REPLACE(@[fcast_yrwk], '-', '') -- 변수처리" ).append("\n"); 
		query.append("    AND     MTY_RPT_TP_CD IN ('PR') -- 하드코딩, PFMC                   " ).append("\n"); 
		query.append("    GROUP BY INP_YRWK" ).append("\n"); 
		query.append("          ,LOC_GRP_CD" ).append("\n"); 
		query.append("          ,LOC_CD" ).append("\n"); 
		query.append("          ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append(") C" ).append("\n"); 
		query.append(",(" ).append("\n"); 
		query.append("    -- OP VOLUME DATA 수집" ).append("\n"); 
		query.append("    SELECT INP_YRWK" ).append("\n"); 
		query.append("          ,LOC_GRP_CD" ).append("\n"); 
		query.append("          ,LOC_CD" ).append("\n"); 
		query.append("          ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          -- WEEK 는 모두 변수 처리         " ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(FCAST_YRWK, WEEK1, FCAST_VOL_VAL)),0) OP_W0" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(FCAST_YRWK, WEEK2, FCAST_VOL_VAL)),0) OP_W1" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(FCAST_YRWK, WEEK3, FCAST_VOL_VAL)),0) OP_W2" ).append("\n"); 
		query.append("          ,NVL(SUM(DECODE(FCAST_YRWK, WEEK4, FCAST_VOL_VAL)),0) OP_W3" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("          ,ROUND(" ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(FCAST_YRWK, WEEK1, FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(FCAST_YRWK, WEEK2, FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(FCAST_YRWK, WEEK3, FCAST_VOL_VAL)),0) +" ).append("\n"); 
		query.append("               NVL(SUM(DECODE(FCAST_YRWK, WEEK4, FCAST_VOL_VAL)),0)" ).append("\n"); 
		query.append("                ) / 4" ).append("\n"); 
		query.append("           ,1)  OP_AVG" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    FROM EQR_CTRL_FCAST_SMRY_VOL" ).append("\n"); 
		query.append("       , WK_DATA" ).append("\n"); 
		query.append("    WHERE   INP_YRWK = REPLACE(@[fcast_yrwk], '-', '') -- 변수처리" ).append("\n"); 
		query.append("    AND     MTY_RPT_TP_CD IN ('OP') -- 하드코딩, OP (OutBound Pickup)                   " ).append("\n"); 
		query.append("    GROUP BY INP_YRWK" ).append("\n"); 
		query.append("          ,LOC_GRP_CD" ).append("\n"); 
		query.append("          ,LOC_CD" ).append("\n"); 
		query.append("          ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append(") D" ).append("\n"); 
		query.append(",(  -- ECC 값을 SCC 로 보여줍니다(유저요청)" ).append("\n"); 
		query.append("    SELECT REPLACE(@[fcast_yrwk], '-', '') INP_YRWK" ).append("\n"); 
		query.append("          ,'S' LOC_GRP_CD" ).append("\n"); 
		query.append("          ,SCC_CD LOC_CD" ).append("\n"); 
		query.append("          ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          ,SUM(CNTR_QTY) OPT_VOL" ).append("\n"); 
		query.append("    FROM" ).append("\n"); 
		query.append("    (" ).append("\n"); 
		query.append("        SELECT A.ECC_CD " ).append("\n"); 
		query.append("              ,C.SCC_CD" ).append("\n"); 
		query.append("              ,A.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("              ,A.CNTR_QTY" ).append("\n"); 
		query.append("        FROM CIM_OPTM_STK_SMRY  A" ).append("\n"); 
		query.append("            ,TGT_WEEK           B" ).append("\n"); 
		query.append("            ,MDM_EQ_ORZ_CHT     C" ).append("\n"); 
		query.append("        WHERE A.OPTM_STK_MNG_TP_CD = 'F' -- FINAL OPT" ).append("\n"); 
		query.append("        AND   A.DMG_FLG = 'A'" ).append("\n"); 
		query.append("        AND   A.TGT_YRWK = B.TGT_YRWK" ).append("\n"); 
		query.append("        AND   A.ECC_CD   = C.ECC_CD" ).append("\n"); 
		query.append("        AND   C.DELT_FLG = 'N'" ).append("\n"); 
		query.append("        AND   A.CNTR_TPSZ_CD IN ('D2','D4','D5','D7')" ).append("\n"); 
		query.append("    )" ).append("\n"); 
		query.append("    GROUP BY SCC_CD " ).append("\n"); 
		query.append("            ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    -- ECC 값을 추출" ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    SELECT REPLACE(@[fcast_yrwk], '-', '') INP_YRWK" ).append("\n"); 
		query.append("          ,'E'      LOC_GRP_CD" ).append("\n"); 
		query.append("          ,A.ECC_CD LOC_CD" ).append("\n"); 
		query.append("          ,A.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          ,SUM(A.CNTR_QTY) OPT_VOL" ).append("\n"); 
		query.append("    FROM CIM_OPTM_STK_SMRY  A" ).append("\n"); 
		query.append("        ,TGT_WEEK           B" ).append("\n"); 
		query.append("    WHERE A.OPTM_STK_MNG_TP_CD = 'F' -- FINAL OPT" ).append("\n"); 
		query.append("    AND   A.DMG_FLG = 'A'" ).append("\n"); 
		query.append("    AND   A.TGT_YRWK = B.TGT_YRWK" ).append("\n"); 
		query.append("    AND   A.CNTR_TPSZ_CD IN ('D2','D4','D5','D7')" ).append("\n"); 
		query.append("    GROUP BY A.ECC_CD" ).append("\n"); 
		query.append("            ,A.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    -- ECC 값을 LCC 로 SUM" ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    SELECT INP_YRWK" ).append("\n"); 
		query.append("          ,LOC_GRP_CD" ).append("\n"); 
		query.append("          ,LOC_CD" ).append("\n"); 
		query.append("          ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          ,SUM(CNTR_QTY) OPT_VOL" ).append("\n"); 
		query.append("    FROM" ).append("\n"); 
		query.append("    (" ).append("\n"); 
		query.append("        SELECT REPLACE(@[fcast_yrwk], '-', '') INP_YRWK" ).append("\n"); 
		query.append("              ,'L'      LOC_GRP_CD " ).append("\n"); 
		query.append("              ,A.ECC_CD" ).append("\n"); 
		query.append("              ,(" ).append("\n"); 
		query.append("                  SELECT DISTINCT X.LCC_CD " ).append("\n"); 
		query.append("                  FROM MDM_EQ_ORZ_CHT X" ).append("\n"); 
		query.append("                  WHERE X.ECC_CD = A.ECC_CD" ).append("\n"); 
		query.append("                  AND   X.DELT_FLG = 'N'" ).append("\n"); 
		query.append("                  AND   ROWNUM=1" ).append("\n"); 
		query.append("               ) LOC_CD" ).append("\n"); 
		query.append("              ,A.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("              ,A.CNTR_QTY" ).append("\n"); 
		query.append("        FROM CIM_OPTM_STK_SMRY  A" ).append("\n"); 
		query.append("            ,TGT_WEEK           B" ).append("\n"); 
		query.append("        WHERE A.OPTM_STK_MNG_TP_CD = 'F' -- FINAL OPT" ).append("\n"); 
		query.append("        AND   A.DMG_FLG = 'A'" ).append("\n"); 
		query.append("        AND   A.TGT_YRWK = B.TGT_YRWK" ).append("\n"); 
		query.append("        AND   A.CNTR_TPSZ_CD IN ('D2','D4','D5','D7')" ).append("\n"); 
		query.append("    )" ).append("\n"); 
		query.append("    GROUP BY INP_YRWK" ).append("\n"); 
		query.append("          ,LOC_GRP_CD" ).append("\n"); 
		query.append("          ,LOC_CD" ).append("\n"); 
		query.append("          ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append(") E" ).append("\n"); 
		query.append(",(  " ).append("\n"); 
		query.append("    -- CIM MATCH BACK VALUE" ).append("\n"); 
		query.append("    -- Equipment Management > CNTR Inventory > Inventory Status > EQ Inbalance Report > EQ Balance Report Inquiry" ).append("\n"); 
		query.append("    SELECT ECC_CD LOC_CD" ).append("\n"); 
		query.append("          ,'E' LOC_GRP_CD" ).append("\n"); 
		query.append("          ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          ,REPLACE(@[fcast_yrwk], '-', '') INP_YRWK" ).append("\n"); 
		query.append("          ,MB" ).append("\n"); 
		query.append("          ,CASE WHEN MB >=  90 AND MB <= 100 THEN 'Balance'" ).append("\n"); 
		query.append("    			WHEN MB >=  75 AND MB <   90 THEN '+'" ).append("\n"); 
		query.append("    			WHEN MB >=  50 AND MB <   75 THEN '++'" ).append("\n"); 
		query.append("                WHEN MB >=   0 AND MB <   50 THEN '+++'" ).append("\n"); 
		query.append("    			WHEN MB <= -90 AND MB >=-100 THEN 'Balance'" ).append("\n"); 
		query.append("    			WHEN MB <= -75 AND MB >  -90 THEN '-'" ).append("\n"); 
		query.append("    			WHEN MB <= -50 AND MB >  -75 THEN '--'" ).append("\n"); 
		query.append("    			WHEN MB <=   0 AND MB >  -50 THEN '---'" ).append("\n"); 
		query.append("                ELSE ''" ).append("\n"); 
		query.append("    	   END AS MB_STATUS             " ).append("\n"); 
		query.append("    FROM" ).append("\n"); 
		query.append("    (" ).append("\n"); 
		query.append("        SELECT B.ECC_CD         " ).append("\n"); 
		query.append("              ,T.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("              ,T.TGT_YRWK" ).append("\n"); 
		query.append("              ,SUM(T.IB_QTY) IB_QTY" ).append("\n"); 
		query.append("              ,SUM(T.OB_QTY) OB_QTY" ).append("\n"); 
		query.append("              ,CASE WHEN SUM (T.IB_QTY) >= SUM (T.OB_QTY) THEN DECODE(NVL(SUM(T.IB_QTY),0), 0, 0,  ROUND(  (SUM (T.OB_QTY) / SUM (T.IB_QTY)) * 100 ))" ).append("\n"); 
		query.append("    	    	    WHEN SUM (T.OB_QTY) >0                THEN DECODE(NVL(SUM(T.OB_QTY),0), 0, 0,  ROUND(  (SUM (T.IB_QTY) / SUM (T.OB_QTY)) * -1  * 100 ))" ).append("\n"); 
		query.append("    	    	    ELSE 0" ).append("\n"); 
		query.append("    	       END AS MB           " ).append("\n"); 
		query.append("        FROM CIM_LOC_MTCH_BAK_SMRY  T" ).append("\n"); 
		query.append("            ,MDM_EQ_ORZ_CHT		    B" ).append("\n"); 
		query.append("    	    ,MDM_LOCATION		    A   " ).append("\n"); 
		query.append("        WHERE T.LOC_CD = A.LOC_CD" ).append("\n"); 
		query.append("        AND   A.SCC_CD = B.SCC_CD" ).append("\n"); 
		query.append("        AND   T.TGT_YRWK = @[cim_matchback_week]" ).append("\n"); 
		query.append("        AND   T.CNTR_TPSZ_CD IN ('D2','D4','D5','D7')" ).append("\n"); 
		query.append("        AND   T.FULL_MTY_CD	=	'F'		" ).append("\n"); 
		query.append("        AND   T.MVMT_CO_CD IN ('H','S') " ).append("\n"); 
		query.append("        AND	  T.ENR_FLG	    =	'N'" ).append("\n"); 
		query.append("        AND   T.TN_ROUT_FLG =	'N'" ).append("\n"); 
		query.append("        AND   T.SOC_FLG     = 'N'" ).append("\n"); 
		query.append("        GROUP BY  B.ECC_CD     " ).append("\n"); 
		query.append("                 ,T.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                 ,T.TGT_YRWK" ).append("\n"); 
		query.append("    )  " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    SELECT SCC_CD LOC_CD" ).append("\n"); 
		query.append("          ,'S' LOC_GRP_CD" ).append("\n"); 
		query.append("          ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          ,REPLACE(@[fcast_yrwk], '-', '') INP_YRWK" ).append("\n"); 
		query.append("          ,MB" ).append("\n"); 
		query.append("          ,CASE WHEN MB >=  90 AND MB <= 100 THEN 'Balance'" ).append("\n"); 
		query.append("    			WHEN MB >=  75 AND MB <   90 THEN '+'" ).append("\n"); 
		query.append("    			WHEN MB >=  50 AND MB <   75 THEN '++'" ).append("\n"); 
		query.append("                WHEN MB >=   0 AND MB <   50 THEN '+++'" ).append("\n"); 
		query.append("    			WHEN MB <= -90 AND MB >=-100 THEN 'Balance'" ).append("\n"); 
		query.append("    			WHEN MB <= -75 AND MB >  -90 THEN '-'" ).append("\n"); 
		query.append("    			WHEN MB <= -50 AND MB >  -75 THEN '--'" ).append("\n"); 
		query.append("    			WHEN MB <=   0 AND MB >  -50 THEN '---'" ).append("\n"); 
		query.append("                ELSE ''" ).append("\n"); 
		query.append("    	   END AS MB_STATUS             " ).append("\n"); 
		query.append("    FROM" ).append("\n"); 
		query.append("    (" ).append("\n"); 
		query.append("        SELECT B.SCC_CD         " ).append("\n"); 
		query.append("              ,T.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("              ,T.TGT_YRWK" ).append("\n"); 
		query.append("              ,SUM(T.IB_QTY) IB_QTY" ).append("\n"); 
		query.append("              ,SUM(T.OB_QTY) OB_QTY" ).append("\n"); 
		query.append("              ,CASE WHEN SUM (T.IB_QTY) >= SUM (T.OB_QTY) THEN DECODE(NVL(SUM(T.IB_QTY),0), 0, 0,  ROUND(  (SUM (T.OB_QTY) / SUM (T.IB_QTY)) * 100 ))" ).append("\n"); 
		query.append("    	    	    WHEN SUM (T.OB_QTY) >0                THEN DECODE(NVL(SUM(T.OB_QTY),0), 0, 0,  ROUND(  (SUM (T.IB_QTY) / SUM (T.OB_QTY)) * -1  * 100 ))" ).append("\n"); 
		query.append("    	    	    ELSE 0" ).append("\n"); 
		query.append("    	       END AS MB           " ).append("\n"); 
		query.append("        FROM CIM_LOC_MTCH_BAK_SMRY  T" ).append("\n"); 
		query.append("            ,MDM_EQ_ORZ_CHT		    B" ).append("\n"); 
		query.append("    	    ,MDM_LOCATION		    A   " ).append("\n"); 
		query.append("        WHERE T.LOC_CD = A.LOC_CD" ).append("\n"); 
		query.append("        AND   A.SCC_CD = B.SCC_CD" ).append("\n"); 
		query.append("        AND   T.TGT_YRWK = @[cim_matchback_week]" ).append("\n"); 
		query.append("        AND   T.CNTR_TPSZ_CD IN ('D2','D4','D5','D7')" ).append("\n"); 
		query.append("        AND   T.FULL_MTY_CD	=	'F'		" ).append("\n"); 
		query.append("        AND   T.MVMT_CO_CD IN ('H','S') " ).append("\n"); 
		query.append("        AND	  T.ENR_FLG	    =	'N'" ).append("\n"); 
		query.append("        AND   T.TN_ROUT_FLG =	'N'" ).append("\n"); 
		query.append("        AND   T.SOC_FLG     = 'N'" ).append("\n"); 
		query.append("        GROUP BY  B.SCC_CD     " ).append("\n"); 
		query.append("                 ,T.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                 ,T.TGT_YRWK" ).append("\n"); 
		query.append("    )  " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    SELECT LCC_CD LOC_CD" ).append("\n"); 
		query.append("          ,'L' LOC_GRP_CD" ).append("\n"); 
		query.append("          ,CNTR_TPSZ_CD" ).append("\n"); 
		query.append("          ,REPLACE(@[fcast_yrwk], '-', '') INP_YRWK" ).append("\n"); 
		query.append("          ,MB" ).append("\n"); 
		query.append("          ,CASE WHEN MB >=  90 AND MB <= 100 THEN 'Balance'" ).append("\n"); 
		query.append("    			WHEN MB >=  75 AND MB <   90 THEN '+'" ).append("\n"); 
		query.append("    			WHEN MB >=  50 AND MB <   75 THEN '++'" ).append("\n"); 
		query.append("                WHEN MB >=   0 AND MB <   50 THEN '+++'" ).append("\n"); 
		query.append("    			WHEN MB <= -90 AND MB >=-100 THEN 'Balance'" ).append("\n"); 
		query.append("    			WHEN MB <= -75 AND MB >  -90 THEN '-'" ).append("\n"); 
		query.append("    			WHEN MB <= -50 AND MB >  -75 THEN '--'" ).append("\n"); 
		query.append("    			WHEN MB <=   0 AND MB >  -50 THEN '---'" ).append("\n"); 
		query.append("                ELSE ''" ).append("\n"); 
		query.append("    	   END AS MB_STATUS             " ).append("\n"); 
		query.append("    FROM" ).append("\n"); 
		query.append("    (" ).append("\n"); 
		query.append("        SELECT B.LCC_CD         " ).append("\n"); 
		query.append("              ,T.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("              ,T.TGT_YRWK" ).append("\n"); 
		query.append("              ,SUM(T.IB_QTY) IB_QTY" ).append("\n"); 
		query.append("              ,SUM(T.OB_QTY) OB_QTY" ).append("\n"); 
		query.append("              ,CASE WHEN SUM (T.IB_QTY) >= SUM (T.OB_QTY) THEN DECODE(NVL(SUM(T.IB_QTY),0), 0, 0,  ROUND(  (SUM (T.OB_QTY) / SUM (T.IB_QTY)) * 100 ))" ).append("\n"); 
		query.append("    	    	    WHEN SUM (T.OB_QTY) >0                THEN DECODE(NVL(SUM(T.OB_QTY),0), 0, 0,  ROUND(  (SUM (T.IB_QTY) / SUM (T.OB_QTY)) * -1  * 100 ))" ).append("\n"); 
		query.append("    	    	    ELSE 0" ).append("\n"); 
		query.append("    	       END AS MB           " ).append("\n"); 
		query.append("        FROM CIM_LOC_MTCH_BAK_SMRY  T" ).append("\n"); 
		query.append("            ,MDM_EQ_ORZ_CHT		    B" ).append("\n"); 
		query.append("    	    ,MDM_LOCATION		    A   " ).append("\n"); 
		query.append("        WHERE T.LOC_CD = A.LOC_CD" ).append("\n"); 
		query.append("        AND   A.SCC_CD = B.SCC_CD" ).append("\n"); 
		query.append("        AND   T.TGT_YRWK = @[cim_matchback_week]" ).append("\n"); 
		query.append("        AND   T.CNTR_TPSZ_CD IN ('D2','D4','D5','D7')" ).append("\n"); 
		query.append("        AND   T.FULL_MTY_CD	=	'F'		" ).append("\n"); 
		query.append("        AND   T.MVMT_CO_CD IN ('H','S') " ).append("\n"); 
		query.append("        AND	  T.ENR_FLG	    =	'N'" ).append("\n"); 
		query.append("        AND   T.TN_ROUT_FLG =	'N'" ).append("\n"); 
		query.append("        AND   T.SOC_FLG     = 'N'" ).append("\n"); 
		query.append("        GROUP BY  B.LCC_CD     " ).append("\n"); 
		query.append("                 ,T.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                 ,T.TGT_YRWK" ).append("\n"); 
		query.append("    )  " ).append("\n"); 
		query.append(") F" ).append("\n"); 
		query.append("WHERE Z.INP_YRWK    = A.INP_YRWK     (+)" ).append("\n"); 
		query.append("AND   Z.LOC_GRP_CD  = A.LOC_GRP_CD   (+)" ).append("\n"); 
		query.append("AND   Z.LOC_CD      = A.LOC_CD       (+)" ).append("\n"); 
		query.append("AND   Z.CNTR_TPSZ_CD= A.CNTR_TPSZ_CD (+)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND   Z.INP_YRWK    = B.INP_YRWK     (+)" ).append("\n"); 
		query.append("AND   Z.LOC_GRP_CD  = B.LOC_GRP_CD   (+)" ).append("\n"); 
		query.append("AND   Z.LOC_CD      = B.LOC_CD       (+)" ).append("\n"); 
		query.append("AND   Z.CNTR_TPSZ_CD= B.CNTR_TPSZ_CD (+)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND   Z.INP_YRWK    = C.INP_YRWK     (+)" ).append("\n"); 
		query.append("AND   Z.LOC_GRP_CD  = C.LOC_GRP_CD   (+)" ).append("\n"); 
		query.append("AND   Z.LOC_CD      = C.LOC_CD       (+)" ).append("\n"); 
		query.append("AND   Z.CNTR_TPSZ_CD= C.CNTR_TPSZ_CD (+)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND   Z.INP_YRWK    = D.INP_YRWK     (+)" ).append("\n"); 
		query.append("AND   Z.LOC_GRP_CD  = D.LOC_GRP_CD   (+)" ).append("\n"); 
		query.append("AND   Z.LOC_CD      = D.LOC_CD       (+)" ).append("\n"); 
		query.append("AND   Z.CNTR_TPSZ_CD= D.CNTR_TPSZ_CD (+)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND   Z.INP_YRWK    = E.INP_YRWK     (+)" ).append("\n"); 
		query.append("AND   Z.LOC_GRP_CD  = E.LOC_GRP_CD   (+)" ).append("\n"); 
		query.append("AND   Z.LOC_CD      = E.LOC_CD       (+)" ).append("\n"); 
		query.append("AND   Z.CNTR_TPSZ_CD= E.CNTR_TPSZ_CD (+)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND   Z.INP_YRWK    = F.INP_YRWK     (+)" ).append("\n"); 
		query.append("AND   Z.LOC_GRP_CD  = F.LOC_GRP_CD   (+)" ).append("\n"); 
		query.append("AND   Z.LOC_CD      = F.LOC_CD       (+)" ).append("\n"); 
		query.append("AND   Z.CNTR_TPSZ_CD= F.CNTR_TPSZ_CD (+)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- Y가 1개도 없으면 조회대상에서 제외" ).append("\n"); 
		query.append("#if(${s_option_cd} == 'Y')" ).append("\n"); 
		query.append("-- 라인 통제" ).append("\n"); 
		query.append("-- filter 적용된 경우는 filter 표시여부, summary 결과 모두 존재하는 라인만 표시" ).append("\n"); 
		query.append("AND  (" ).append("\n"); 
		query.append("          (A.STK_ICRZ_FLG  = 'Y' AND Z.STK_ICRZ_FTR_FLG  = 'Y' )        " ).append("\n"); 
		query.append("       OR (A.STK_DCRZ_FLG  = 'Y' AND Z.STK_DCRZ_FTR_FLG  = 'Y' )" ).append("\n"); 
		query.append("       " ).append("\n"); 
		query.append("       OR (A.SROS_SPLS_FLG = 'Y' AND Z.SROS_SPLS_FTR_FLG = 'Y' )" ).append("\n"); 
		query.append("       OR (A.NORM_SPLS_FLG = 'Y' AND Z.NORM_SPLS_FTR_FLG = 'Y' )" ).append("\n"); 
		query.append("       OR (A.SROS_SHTG_FLG = 'Y' AND Z.SROS_SHTG_FTR_FLG = 'Y' ) " ).append("\n"); 
		query.append("       OR (A.NORM_SHTG_FLG = 'Y' AND Z.NORM_SHTG_FTR_FLG = 'Y' )" ).append("\n"); 
		query.append("       OR (A.BAL_FLG       = 'Y' AND Z.BAL_FTR_FLG       = 'Y' ) " ).append("\n"); 
		query.append("     ) " ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- Inventory 는 5개중 1개라도 0이 아니어야 UI에 조회합니다." ).append("\n"); 
		query.append("AND (" ).append("\n"); 
		query.append("          NVL(B.IV_W0 , 0) <> 0" ).append("\n"); 
		query.append("       OR NVL(B.IV_W1 , 0) <> 0 " ).append("\n"); 
		query.append("       OR NVL(B.IV_W2 , 0) <> 0  " ).append("\n"); 
		query.append("       OR NVL(B.IV_W3 , 0) <> 0 " ).append("\n"); 
		query.append("       OR NVL(B.IV_AVG, 0) <> 0 " ).append("\n"); 
		query.append("    )" ).append("\n"); 
		query.append(" " ).append("\n"); 
		query.append("ORDER BY Z.RCC_CD" ).append("\n"); 
		query.append("        ,Z.LOC_GRP_CD" ).append("\n"); 
		query.append("        ,Z.LOC_CD" ).append("\n"); 
		query.append("        ,Z.CNTR_TPSZ_CD" ).append("\n"); 

	}
}