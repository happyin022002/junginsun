/*=========================================================
*Copyright(c) 2017 CyberLogitec
*@FileName : EQMatchBackNLoadFactorMgtDBDAOSearchMBByVessel01RSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2017.01.19
*@LastModifier : 
*@LastVersion : 1.0
* 2017.01.19 
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.ees.cim.cntroperationperformancemgt.eqmatchbacknloadfactormgt.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class EQMatchBackNLoadFactorMgtDBDAOSearchMBByVessel01RSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * Match-back by Vessel 
	  * 2010.09.01 남궁진호 TicketID:CHM-201005670-01
	  *     - Trade 조건 추가 시 해당 Trade에 대한 데이터만 조회 되도록 수정
	  * 2010.09.15 이병훈 [CHM-201005967-01] Match-Back by Vessel의 신규 Trade 및 노선 추가
	  * 2011.08.17 신자영 [CHM-201112859-01] (CIM) ESE 노선 Trade 변경 관련 Data Management 요청
	  * 2011.11.01 신자영 [CHM-201114141-01] [CIM] L/F by trade & M/B by vessel 기능에 EM1 & EM2 Lane 추가
	  * 2012.04.17 신자영 [CHM-201217339-01] iNVENTORY/ Load Factor & M/B by vessel 기능 보완
	  * 2012.08.08 신자영 [CHM-201219547-01] Load Factor 기능에 새로운 노선 추가
	  * 2012.08.09 신자영 [CHM-201219547-01] Load Factor 기능에 새로운 노선 추가 -2차 수정
	  * </pre>
	  */
	public EQMatchBackNLoadFactorMgtDBDAOSearchMBByVessel01RSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vvd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("company",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("fromdate",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("todate",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("lane",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.ees.cim.cntroperationperformancemgt.eqmatchbacknloadfactormgt.integration").append("\n"); 
		query.append("FileName : EQMatchBackNLoadFactorMgtDBDAOSearchMBByVessel01RSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("WITH MAIN AS" ).append("\n"); 
		query.append("      (" ).append("\n"); 
		query.append("       SELECT TRD_CD,                /* trade         */" ).append("\n"); 
		query.append("              LANE_CD,               /* lane          */" ).append("\n"); 
		query.append("              RLANE_CD," ).append("\n"); 
		query.append("              VSL_CD," ).append("\n"); 
		query.append("              SKD_VOY_NO," ).append("\n"); 
		query.append("              SKD_DIR_CD,            /* vvd           */" ).append("\n"); 
		query.append("              VPS_PORT_CD,           /* port          */" ).append("\n"); 
		query.append("              CLPT_IND_SEQ,          /* call_ind      */" ).append("\n"); 
		query.append("              CLPT_SEQ,              /* call_seq      */" ).append("\n"); 
		query.append("              VPS_ETD_DT,            /* atd           */" ).append("\n"); 
		query.append("              PLN_YR," ).append("\n"); 
		query.append("              PLN_WK,               /* atd week       */" ).append("\n"); 
		query.append("              FROM_RGN,             /* from_region    */" ).append("\n"); 
		query.append("              TO_RGN,               /* to_region      */" ).append("\n"); 
		query.append("              WK_ST_DT,             /* o_etd_start_dt */" ).append("\n"); 
		query.append("              WK_END_DT             /* o_etd_end_dt   */" ).append("\n"); 
		query.append("         FROM  (" ).append("\n"); 
		query.append("                SELECT /*+ ORDERED  USE_NL(DST   OCNT OSCNT DCNT DSCNT )" ).append("\n"); 
		query.append("                                    INDEX (DST   XPKVSK_VSL_PORT_SKD   )" ).append("\n"); 
		query.append("                                    INDEX (OCNT  XPKMDM_COUNTRY )" ).append("\n"); 
		query.append("                                    INDEX (OCNT  XPKMDM_COUNTRY )" ).append("\n"); 
		query.append("                                    INDEX (OSCNT XPKMDM_SUBCONTINENT )" ).append("\n"); 
		query.append("                                    INDEX (OSCNT XPKMDM_SUBCONTINENT )" ).append("\n"); 
		query.append("                      */" ).append("\n"); 
		query.append("                      BSA.TRD_CD,                                                /* trade         */" ).append("\n"); 
		query.append("                      ORG.LANE_CD,                                               /* lane          */" ).append("\n"); 
		query.append("                      BSA.RLANE_CD,                                              /* R -lane Full  */" ).append("\n"); 
		query.append("                      ORG.VSL_CD," ).append("\n"); 
		query.append("                      ORG.SKD_VOY_NO," ).append("\n"); 
		query.append("                      ORG.SKD_DIR_CD,                                            /* vvd           */" ).append("\n"); 
		query.append("                      ORG.VPS_PORT_CD,                                           /* port          */" ).append("\n"); 
		query.append("                      ORG.CLPT_IND_SEQ,                                          /* call_ind      */" ).append("\n"); 
		query.append("                      ORG.CLPT_SEQ,                                              /* call_seq      */" ).append("\n"); 
		query.append("                      ORG.VPS_ETD_DT,                                            /* atd           */" ).append("\n"); 
		query.append("#if ( ${lane} == '' )" ).append("\n"); 
		query.append("								CASE " ).append("\n"); 
		query.append("								WHEN ORG.LANE_CD != 'WAF'  AND  ORG.LANE_CD != 'EM1' AND  ORG.LANE_CD != 'TLS'  AND  ORG.LANE_CD != 'EM2' THEN                                 " ).append("\n"); 
		query.append("								  --DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD)  /* from_region   */" ).append("\n"); 
		query.append("                                  DECODE(ORG.LANE_CD, 'LE1', 'M', 'LE2', 'M', DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD)) /* from_region   */								" ).append("\n"); 
		query.append("								ELSE " ).append("\n"); 
		query.append("					               OSCNT.CONTI_CD        /* from_region   */" ).append("\n"); 
		query.append("								END FROM_RGN," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("								CASE " ).append("\n"); 
		query.append("								WHEN ORG.LANE_CD != 'WAF' AND ORG.LANE_CD != 'EM1' AND ORG.LANE_CD != 'TLS' AND ORG.LANE_CD != 'EM2' THEN                                 " ).append("\n"); 
		query.append("                                --DECODE(DSCNT.CONTI_CD, 'F', 'E', DSCNT.CONTI_CD)     /* to_region     */" ).append("\n"); 
		query.append("      -- 2012.08.29 add" ).append("\n"); 
		query.append("      CASE WHEN ORG.LANE_CD = 'AWJ' AND DECODE(DSCNT.CONTI_CD, 'F', 'E', DSCNT.CONTI_CD) = 'E'" ).append("\n"); 
		query.append("         THEN 'A'" ).append("\n"); 
		query.append("         ELSE " ).append("\n"); 
		query.append("              CASE WHEN DST.VPS_PORT_CD = 'RUNJK' OR DST.VPS_PORT_CD = 'RUSKA' THEN" ).append("\n"); 
		query.append("                    CASE WHEN SUBSTR(TRD_CD,2,1) = 'P' THEN 'A'            " ).append("\n"); 
		query.append("                         WHEN SUBSTR(TRD_CD,2,1) = 'M' THEN 'A'" ).append("\n"); 
		query.append("                         WHEN TRD_CD = 'TAS' THEN 'E'" ).append("\n"); 
		query.append("                         WHEN TRD_CD = 'AES' THEN 'A'" ).append("\n"); 
		query.append("                         WHEN TRD_CD = 'EMS' AND ORG.LANE_CD = 'ESE' THEN 'E'" ).append("\n"); 
		query.append("                         WHEN TRD_CD = 'EMS' AND ORG.LANE_CD = 'EXE' THEN 'E'" ).append("\n"); 
		query.append("                         WHEN TRD_CD = 'EMS' AND ORG.LANE_CD <> 'ESE' AND ORG.LANE_CD <> 'EXE' THEN 'A'" ).append("\n"); 
		query.append("                    END" ).append("\n"); 
		query.append("              ELSE  DECODE(DSCNT.CONTI_CD, 'F', 'E', DSCNT.CONTI_CD)" ).append("\n"); 
		query.append("              END " ).append("\n"); 
		query.append("         END  END TO_RGN     /* to_region     */" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#elseif ( ${lane} != 'WAF' && ${lane} != 'EM1' && ${lane} != 'TLS' && ${lane} != 'EM2' )" ).append("\n"); 
		query.append("                      --DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) FROM_RGN, /* from_region   */" ).append("\n"); 
		query.append("                      DECODE(ORG.LANE_CD, 'LE1', 'M', 'LE2', 'M', DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD)) FROM_RGN, /* from_region   */" ).append("\n"); 
		query.append("                      --DECODE(DSCNT.CONTI_CD, 'F', 'E', DSCNT.CONTI_CD) TO_RGN    /* to_region     */" ).append("\n"); 
		query.append("      -- 2012.08.29 add" ).append("\n"); 
		query.append("      CASE WHEN ORG.LANE_CD = 'AWJ' AND DECODE(DSCNT.CONTI_CD, 'F', 'E', DSCNT.CONTI_CD) = 'E'" ).append("\n"); 
		query.append("         THEN 'A'" ).append("\n"); 
		query.append("         --ELSE DECODE(DST.VPS_PORT_CD, 'RUNJK', 'A', DECODE(DSCNT.CONTI_CD, 'F', 'E', DSCNT.CONTI_CD))" ).append("\n"); 
		query.append("         ELSE" ).append("\n"); 
		query.append("              CASE WHEN DST.VPS_PORT_CD = 'RUNJK' OR DST.VPS_PORT_CD = 'RUSKA' THEN" ).append("\n"); 
		query.append("                    CASE WHEN SUBSTR(TRD_CD,2,1) = 'P' THEN 'A'            " ).append("\n"); 
		query.append("                         WHEN SUBSTR(TRD_CD,2,1) = 'M' THEN 'A'" ).append("\n"); 
		query.append("                         WHEN TRD_CD = 'TAS' THEN 'E'" ).append("\n"); 
		query.append("                         WHEN TRD_CD = 'AES' THEN 'A'" ).append("\n"); 
		query.append("                         WHEN TRD_CD = 'EMS' AND ORG.LANE_CD = 'ESE' THEN 'E'" ).append("\n"); 
		query.append("                         WHEN TRD_CD = 'EMS' AND ORG.LANE_CD = 'EXE' THEN 'E'" ).append("\n"); 
		query.append("                         WHEN TRD_CD = 'EMS' AND ORG.LANE_CD <> 'ESE' AND ORG.LANE_CD <> 'EXE' THEN 'A'" ).append("\n"); 
		query.append("                    END" ).append("\n"); 
		query.append("              ELSE  DECODE(DSCNT.CONTI_CD, 'F', 'E', DSCNT.CONTI_CD)" ).append("\n"); 
		query.append("              END " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("       END   TO_RGN     /* to_region     */" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("					  OSCNT.CONTI_CD       FROM_RGN, /* from_region   */" ).append("\n"); 
		query.append("                      DSCNT.CONTI_CD       TO_RGN    /* to_region     */" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("                FROM" ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                      SELECT  /*+ INDEX_FMDM_SUBCONTINENT   DSCNTFS(BSA_VVD_MST XPKBSA_VVD_MST) */" ).append("\n"); 
		query.append("                             DISTINCT TRD_CD," ).append("\n"); 
		query.append("                                      SUBSTR(RLANE_CD,1, 3) LANE_CD," ).append("\n"); 
		query.append("                                      RLANE_CD" ).append("\n"); 
		query.append("                        FROM  BSA_VVD_MST   -- 108 건" ).append("\n"); 
		query.append("                     ) BSA ," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                      SELECT  VPS1.VSL_CD                         VSL_CD," ).append("\n"); 
		query.append("                              VPS1.SKD_VOY_NO                     SKD_VOY_NO," ).append("\n"); 
		query.append("                              VPS1.SKD_DIR_CD                     SKD_DIR_CD," ).append("\n"); 
		query.append("                              VPS1.VPS_PORT_CD                    VPS_PORT_CD," ).append("\n"); 
		query.append("                              VPS1.CLPT_IND_SEQ                   CLPT_IND_SEQ," ).append("\n"); 
		query.append("                              VPS1.CLPT_SEQ                       CLPT_SEQ," ).append("\n"); 
		query.append("                              TO_CHAR(VPS1.VPS_ETD_DT,'YYYYMMDD') VPS_ETD_DT," ).append("\n"); 
		query.append("                              VPS1.SLAN_CD                        LANE_CD," ).append("\n"); 
		query.append("                              (" ).append("\n"); 
		query.append("                                SELECT  /*+ INDEX( VPS2 XAK4VSK_VSL_PORT_SKD ) */" ).append("\n"); 
		query.append("                                       VPS_PORT_CD||CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                  FROM VSK_VSL_PORT_SKD VPS2" ).append("\n"); 
		query.append("                                 WHERE VPS2.VSL_CD       = VPS1.VSL_CD" ).append("\n"); 
		query.append("                                   AND VPS2.SKD_VOY_NO   = VPS1.SKD_VOY_NO" ).append("\n"); 
		query.append("                                   AND VPS2.SKD_DIR_CD   = VPS1.SKD_DIR_CD" ).append("\n"); 
		query.append("                                   AND VPS2.CLPT_SEQ   > VPS1.CLPT_SEQ" ).append("\n"); 
		query.append("                                   AND NVL(VPS2.VPS_PORT_CD,   ' ') NOT IN ('PAPAC', 'EGSUZ')" ).append("\n"); 
		query.append("                                   AND NVL(VPS2.SKD_CNG_STS_CD,  ' ') <> 'S'" ).append("\n"); 
		query.append("                                   AND ROWNUM = 1" ).append("\n"); 
		query.append("                              )                                   TO_PKEY" ).append("\n"); 
		query.append("                        FROM VSK_VSL_PORT_SKD  VPS1" ).append("\n"); 
		query.append("                       WHERE VPS1.VPS_ETD_DT BETWEEN TO_DATE(@[fromdate], 'YYYY-MM-DD') AND TO_DATE(@[todate], 'YYYY-MM-DD') + 0.99999" ).append("\n"); 
		query.append("                         AND NVL(VPS1.VPS_PORT_CD,   ' ') NOT IN ('PAPAC', 'EGSUZ')" ).append("\n"); 
		query.append("                         AND NVL(VPS1.TURN_PORT_IND_CD,  ' ') NOT IN ('D', 'F', 'V')" ).append("\n"); 
		query.append("                         AND NVL(VPS1.SKD_CNG_STS_CD,  ' ') <> 'S'" ).append("\n"); 
		query.append("                    ) ORG ," ).append("\n"); 
		query.append("                    VSK_VSL_PORT_SKD   DST ," ).append("\n"); 
		query.append("                    MDM_COUNTRY        OCNT," ).append("\n"); 
		query.append("                    MDM_SUBCONTINENT   OSCNT," ).append("\n"); 
		query.append("                    MDM_COUNTRY        DCNT," ).append("\n"); 
		query.append("                    MDM_SUBCONTINENT   DSCNT," ).append("\n"); 
		query.append("					AR_MST_REV_VVD 	   V" ).append("\n"); 
		query.append("               WHERE DST.VSL_CD        = ORG.VSL_CD" ).append("\n"); 
		query.append("                 AND DST.SKD_VOY_NO    = ORG.SKD_VOY_NO" ).append("\n"); 
		query.append("                 AND DST.SKD_DIR_CD    = ORG.SKD_DIR_CD" ).append("\n"); 
		query.append("                 AND DST.VPS_PORT_CD   = SUBSTR(ORG.TO_PKEY,1,5)" ).append("\n"); 
		query.append("                 AND DST.CLPT_IND_SEQ  = SUBSTR(ORG.TO_PKEY,6,2)" ).append("\n"); 
		query.append("                 AND OCNT.CNT_CD       = SUBSTR(ORG.VPS_PORT_CD, 1, 2)" ).append("\n"); 
		query.append("                 AND OCNT.SCONTI_CD    = OSCNT.SCONTI_CD" ).append("\n"); 
		query.append("                 AND DCNT.CNT_CD       = SUBSTR(DST.VPS_PORT_CD, 1, 2)" ).append("\n"); 
		query.append("                 AND DCNT.SCONTI_CD    = DSCNT.SCONTI_CD" ).append("\n"); 
		query.append("                 AND ORG.LANE_CD       = BSA.LANE_CD" ).append("\n"); 
		query.append("				 AND ORG.VSL_CD 		= V.VSL_CD" ).append("\n"); 
		query.append("				 AND ORG.SKD_VOY_NO 	= V.SKD_VOY_NO" ).append("\n"); 
		query.append("				 AND ORG.SKD_DIR_CD 	= V.SKD_DIR_CD" ).append("\n"); 
		query.append("				 AND V.RLANE_CD 		= BSA.RLANE_CD" ).append("\n"); 
		query.append("#if ( ${lane} != '' )" ).append("\n"); 
		query.append("                 AND ORG.LANE_CD       = @[lane]" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if ( ${vvd} != '' )" ).append("\n"); 
		query.append("                 AND ORG.VSL_CD        = SUBSTR(@[vvd],1,4)" ).append("\n"); 
		query.append("                 AND ORG.SKD_VOY_NO    = SUBSTR(@[vvd],5,4)" ).append("\n"); 
		query.append("                 AND ORG.SKD_DIR_CD    = SUBSTR(@[vvd],9,1)" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if ( ${trade} == '' )" ).append("\n"); 
		query.append("                 AND (" ).append("\n"); 
		query.append("                      (SUBSTR(BSA.TRD_CD,2,1) = 'P' AND DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) IN ( 'M' ) )" ).append("\n"); 
		query.append("                      OR" ).append("\n"); 
		query.append("                      (SUBSTR(BSA.TRD_CD,2,1) = 'A' AND DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) IN ( 'M','E' )" ).append("\n"); 
		query.append("                       AND  BSA.TRD_CD <> 'IAS') --IAS trade로 들어온 ALX lane 보이지 않게 하기 위해 )" ).append("\n"); 
		query.append("                      OR" ).append("\n"); 
		query.append("#if ( ${lane} == '')" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("  					  (SUBSTR(BSA.TRD_CD,2,1) = 'E' AND DECODE(ORG.LANE_CD, 'WAF',OSCNT.CONTI_CD,  DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD)) IN ( 'E', DECODE(ORG.LANE_CD, 'WAF', '',  'A' ) ) )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#elseif ( ${lane} != 'WAF' && ${lane} != 'EM1' && ${lane} != 'TLS' && ${lane} != 'EM2')" ).append("\n"); 
		query.append("                      (SUBSTR(BSA.TRD_CD,2,1) = 'E' AND DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) IN ( 'E' ) )" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("                      (SUBSTR(BSA.TRD_CD,2,1) = 'E' AND OSCNT.CONTI_CD IN ( 'E', 'F' ) )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("                      OR" ).append("\n"); 
		query.append("                      (SUBSTR(BSA.TRD_CD,2,1) = 'M' AND DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) IN ( 'M','E' )) " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                     )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if ( ${trade} == 'TPS' )" ).append("\n"); 
		query.append("                 AND BSA.TRD_CD = 'TPS' AND DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) IN ( 'M' ) " ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if ( ${trade} == 'TAS' )" ).append("\n"); 
		query.append("                 AND BSA.TRD_CD = 'TAS' AND DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) IN ( 'M','E' ) " ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if ( ${trade} == 'AES' )" ).append("\n"); 
		query.append("                 AND BSA.TRD_CD = 'AES' AND DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) IN ( 'E' ) " ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if ( ${trade} == 'IMS' )" ).append("\n"); 
		query.append("                 AND (SUBSTR(BSA.TRD_CD,2,1) IN  ( 'P','A' ) AND DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) = 'M'  )" ).append("\n"); 
		query.append("                 AND  BSA.TRD_CD <> 'IAS' --IAS trade로 들어온 ALX lane 보이지 않게 하기 위해" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if ( ${trade} == 'IES' )" ).append("\n"); 
		query.append(" " ).append("\n"); 
		query.append("                 AND (SUBSTR(BSA.TRD_CD,2,1) IN ( 'A','E' ) AND DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) = 'E'  )" ).append("\n"); 
		query.append("                 AND  BSA.TRD_CD <> 'IAS' --IAS trade로 들어온 ALX lane 보이지 않게 하기 위해" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if ( ${trade} == 'EMS' )" ).append("\n"); 
		query.append("                 AND BSA.TRD_CD = 'EMS' AND DECODE(OSCNT.CONTI_CD, 'F', 'E', OSCNT.CONTI_CD) IN ( 'M', 'E' ) " ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append(")," ).append("\n"); 
		query.append("  EQR_WK_PRD" ).append("\n"); 
		query.append("#if ( ${trade} == '' )" ).append("\n"); 
		query.append("        WHERE (" ).append("\n"); 
		query.append("                (SUBSTR(TRD_CD,2,1) = 'P' AND FROM_RGN = 'M' AND TO_RGN = 'A')" ).append("\n"); 
		query.append("             OR (SUBSTR(TRD_CD,2,1) = 'A' AND FROM_RGN = 'M' AND TO_RGN = 'E')" ).append("\n"); 
		query.append("--2012.08.29 DELETE  " ).append("\n"); 
		query.append("            -- OR (LANE_CD = 'AWJ' AND SUBSTR(TRD_CD,2,1) = 'P' AND FROM_RGN = 'M' AND TO_RGN = 'E')   " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if ( ${lane} == '' )" ).append("\n"); 
		query.append(" 			 OR (SUBSTR(TRD_CD,2,1) = 'E' AND FROM_RGN = DECODE(LANE_CD,  'EM1', 'F', 'EM2', 'F',  'TLS', 'F', 'E') AND TO_RGN = DECODE(LANE_CD, 'WAF', 'F', 'EM1', 'E', 'EM2', 'E', 'TLS', 'E', 'A') )" ).append("\n"); 
		query.append("#elseif ( ${lane} == 'WAF' )" ).append("\n"); 
		query.append("			OR (SUBSTR(TRD_CD,2,1) = 'E' AND FROM_RGN = 'E' AND TO_RGN = 'F')" ).append("\n"); 
		query.append("#elseif ( ${lane} == 'EM1' || ${lane} == 'EM2' || ${lane} == 'TLS')" ).append("\n"); 
		query.append("			OR (SUBSTR(TRD_CD,2,1) = 'E' AND FROM_RGN = 'F' AND TO_RGN = 'E')" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("            OR (SUBSTR(TRD_CD,2,1) = 'E' AND FROM_RGN = 'E' AND TO_RGN = 'A')" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if ( ${lane} == '' )" ).append("\n"); 
		query.append("			 OR ( (SUBSTR(TRD_CD,2,1) = 'M' AND FROM_RGN IN ('M', DECODE(LANE_CD, 'ESE', '', 'EXE', '', 'E')) AND TO_RGN = DECODE(LANE_CD, 'ESE', 'E', 'EXE', 'E', 'A') )" ).append("\n"); 
		query.append("			      )" ).append("\n"); 
		query.append("#elseif ( ${lane} == 'ESE' || ${lane} == 'EXE')" ).append("\n"); 
		query.append("			 OR ( (SUBSTR(TRD_CD,2,1) = 'M' AND FROM_RGN = 'M' AND TO_RGN = 'E')" ).append("\n"); 
		query.append("			      )" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("			 OR (SUBSTR(TRD_CD,2,1) = 'M' AND FROM_RGN = 'E' AND TO_RGN = 'A')" ).append("\n"); 
		query.append("             OR (SUBSTR(TRD_CD,2,1) = 'M' AND FROM_RGN = 'M' AND TO_RGN = 'A')" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("             )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if ( ${trade} == 'TPS' )" ).append("\n"); 
		query.append("        WHERE (	(TRD_CD = 'TPS' AND FROM_RGN = 'M' AND TO_RGN = 'A')" ).append("\n"); 
		query.append("--2012.08.07 add" ).append("\n"); 
		query.append("          --   OR (LANE_CD = 'AWJ' AND SUBSTR(TRD_CD,2,1) = 'P' AND FROM_RGN = 'M' AND TO_RGN = 'E') " ).append("\n"); 
		query.append("				) " ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if ( ${trade} == 'TAS' )" ).append("\n"); 
		query.append("        WHERE (   (TRD_CD = 'TAS' AND FROM_RGN = 'M' AND TO_RGN = 'E')" ).append("\n"); 
		query.append("              -- OR (TRD_CD = 'TAS' AND FROM_RGN = 'E' AND TO_RGN = 'M')" ).append("\n"); 
		query.append("               )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if ( ${trade} == 'AES' )" ).append("\n"); 
		query.append("        WHERE (TRD_CD = 'AES' AND FROM_RGN = 'E' AND TO_RGN = 'A')" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("#if ( ${trade} == 'IMS' )" ).append("\n"); 
		query.append("        WHERE	(" ).append("\n"); 
		query.append("        		(SUBSTR(TRD_CD,2,1) = 'P' AND FROM_RGN = 'M' AND TO_RGN = 'A')" ).append("\n"); 
		query.append("        OR		(SUBSTR(TRD_CD,2,1) = 'A' AND FROM_RGN = 'M' AND TO_RGN = 'E')" ).append("\n"); 
		query.append("        		)" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if ( ${trade} == 'IES' )" ).append("\n"); 
		query.append("        WHERE	(" ).append("\n"); 
		query.append("                (SUBSTR(TRD_CD,2,1) = 'A' AND FROM_RGN = 'E' AND TO_RGN = 'M')" ).append("\n"); 
		query.append("        OR		(SUBSTR(TRD_CD,2,1) = 'E' AND FROM_RGN = 'E' AND TO_RGN = 'A')" ).append("\n"); 
		query.append("		        )" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if ( ${trade} == 'EMS' )" ).append("\n"); 
		query.append("	#if ( ${lane} == '' )" ).append("\n"); 
		query.append("			WHERE ( (TRD_CD = 'EMS' AND FROM_RGN IN('M', DECODE(LANE_CD, 'ESE', '', 'EXE', '', 'E')) AND TO_RGN = DECODE(LANE_CD, 'ESE', 'E', 'EXE', 'E', 'A'))" ).append("\n"); 
		query.append("					)" ).append("\n"); 
		query.append("	#elseif ( ${lane} == 'ESE' || ${lane} == 'EXE' )" ).append("\n"); 
		query.append("		WHERE ( (TRD_CD = 'EMS' AND FROM_RGN = 'M' AND TO_RGN = 'E')" ).append("\n"); 
		query.append("			      )" ).append("\n"); 
		query.append("	#else" ).append("\n"); 
		query.append("        WHERE (   (TRD_CD = 'EMS' AND FROM_RGN = 'E' AND TO_RGN = 'A')" ).append("\n"); 
		query.append("               OR (TRD_CD = 'EMS' AND FROM_RGN = 'M' AND TO_RGN = 'A')" ).append("\n"); 
		query.append("               )" ).append("\n"); 
		query.append("	#end	" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND VPS_ETD_DT  BETWEEN   WK_ST_DT AND WK_END_DT" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append(" SELECT  /*+ ORDERED USE_NL(M 01 02 RH2 B) */" ).append("\n"); 
		query.append("        M.TRD_CD||M.LANE_CD||M.VSL_CD||M.SKD_VOY_NO||M.SKD_DIR_CD||'A' SEQ," ).append("\n"); 
		query.append("        M.TRD_CD,                                       /* trade      */" ).append("\n"); 
		query.append("        M.LANE_CD ,                                     /* lane       */" ).append("\n"); 
		query.append("        M.VSL_CD||M.SKD_VOY_NO||M.SKD_DIR_CD VVD,       /* vvd        */" ).append("\n"); 
		query.append("        M.VSL_CD," ).append("\n"); 
		query.append("        M.SKD_VOY_NO," ).append("\n"); 
		query.append("        M.SKD_DIR_CD," ).append("\n"); 
		query.append("        M.VPS_PORT_CD,                                /* port         */" ).append("\n"); 
		query.append("        M.CLPT_IND_SEQ,                               /* call_ind     */" ).append("\n"); 
		query.append("        M.CLPT_SEQ,                                   /* call_seq     */" ).append("\n"); 
		query.append("        M.VPS_ETD_DT,                                 /* atd          */" ).append("\n"); 
		query.append("        M.PLN_YR||M.PLN_WK WEEK,                      /* atd week     */" ).append("\n"); 
		query.append("        M.FROM_RGN,                                   /* from_region  */" ).append("\n"); 
		query.append("        M.TO_RGN,                                     /* to_region    */" ).append("\n"); 
		query.append("        MAX(M.WK_ST_DT) WK_ST_DT," ).append("\n"); 
		query.append("        MAX(M.WK_END_DT) WK_END_DT," ).append("\n"); 
		query.append("        'Out' IO," ).append("\n"); 
		query.append("      --< BSA > ______________________________________________________________________________________" ).append("\n"); 
		query.append("      -- (1). RDR" ).append("\n"); 
		query.append("        DECODE((SELECT SUM(RA.BSA_SLOT)|| ',' ||SUM(RA.BSA_WGT)" ).append("\n"); 
		query.append("                  FROM RDR_HEADER      RH1," ).append("\n"); 
		query.append("                       RDR_ALLOCATION  RA" ).append("\n"); 
		query.append("                 WHERE M.VSL_CD      = RH1.VSL_CD  (+)" ).append("\n"); 
		query.append("                   AND M.SKD_VOY_NO  = RH1.VOY_NO  (+)" ).append("\n"); 
		query.append("                   AND M.SKD_DIR_CD  = RH1.DIR_CD  (+)" ).append("\n"); 
		query.append("                   AND M.FROM_RGN    = RH1.REGION  (+)" ).append("\n"); 
		query.append("                   AND RH1.VSL_CD    = RA.VSL_CD   (+)" ).append("\n"); 
		query.append("                   AND RH1.VOY_NO    = RA.VOY_NO   (+)" ).append("\n"); 
		query.append("                   AND RH1.DIR_CD    = RA.DIR_CD   (+)" ).append("\n"); 
		query.append("                   AND RH1.REGION    = RA.REGION   (+)" ).append("\n"); 
		query.append("                   AND @[company]    = RA.OPR_CD   (+)" ).append("\n"); 
		query.append("                ), ','" ).append("\n"); 
		query.append("                ,NVL(MAX(DECODE(O1.BSA_OP_JB_CD,'007',O1.CRR_BSA_CAPA,0)),0) || ',' || NVL(MAX(DECODE(O2.BSA_OP_JB_CD,'009',O2.CRR_BSA_CAPA,0)),0)" ).append("\n"); 
		query.append("                ,(SELECT SUM(RA.BSA_SLOT)|| ',' ||SUM(RA.BSA_WGT)" ).append("\n"); 
		query.append("                    FROM RDR_HEADER        RH1," ).append("\n"); 
		query.append("                         RDR_ALLOCATION    RA" ).append("\n"); 
		query.append("                   WHERE M.VSL_CD      = RH1.VSL_CD  (+)" ).append("\n"); 
		query.append("                     AND M.SKD_VOY_NO  = RH1.VOY_NO  (+)" ).append("\n"); 
		query.append("                     AND M.SKD_DIR_CD  = RH1.DIR_CD  (+)" ).append("\n"); 
		query.append("                     AND M.FROM_RGN    = RH1.REGION  (+)" ).append("\n"); 
		query.append("                     AND RH1.VSL_CD    = RA.VSL_CD   (+)" ).append("\n"); 
		query.append("                     AND RH1.VOY_NO    = RA.VOY_NO   (+)" ).append("\n"); 
		query.append("                     AND RH1.DIR_CD    = RA.DIR_CD   (+)" ).append("\n"); 
		query.append("                     AND RH1.REGION    = RA.REGION   (+)" ).append("\n"); 
		query.append("                     AND @[company]    = RA.OPR_CD   (+)" ).append("\n"); 
		query.append("                 )" ).append("\n"); 
		query.append("               ) bsaspace  ," ).append("\n"); 
		query.append("     -- deadSlot-------------------------------------------------------" ).append("\n"); 
		query.append("        (SELECT  NVL(SUM(DECODE(RU.TYPE,'A',RU.SLOT_QTY,0))" ).append("\n"); 
		query.append("               + SUM(DECODE(RU.TYPE,'H',RU.SLOT_QTY,'L',RU.SLOT_QTY,0)),0)  /* deadSlot  */" ).append("\n"); 
		query.append("           FROM RDR_HEADER      H," ).append("\n"); 
		query.append("                RDR_UTILIZE     RU" ).append("\n"); 
		query.append("          WHERE M.VSL_CD      = H.VSL_CD  (+)" ).append("\n"); 
		query.append("            AND M.SKD_VOY_NO  = H.VOY_NO  (+)" ).append("\n"); 
		query.append("            AND M.SKD_DIR_CD  = H.DIR_CD  (+)" ).append("\n"); 
		query.append("            AND M.FROM_RGN    = H.REGION  (+)" ).append("\n"); 
		query.append("            AND H.VSL_CD      = RU.VSL_CD" ).append("\n"); 
		query.append("            AND H.VOY_NO      = RU.VOY_NO" ).append("\n"); 
		query.append("            AND H.DIR_CD      = RU.DIR_CD" ).append("\n"); 
		query.append("            AND H.REGION      = RU.REGION" ).append("\n"); 
		query.append("            AND @[company]    = RU.OPR_CD" ).append("\n"); 
		query.append("         ) deadSlot," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("     --< 실적 > ______________________________________________________________________________________" ).append("\n"); 
		query.append("       -- (1). BAY PLAN" ).append("\n"); 
		query.append("       DECODE(SUM(NVL(TO_NUMBER(TRIM(B.WEIGHT)), 0)),0,'','BAY') val01,                         /* dataSource */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'F', DECODE(SUBSTR(SZTP,2,1), '2', SZTP))) val02,  /* full20Qty */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'F', DECODE(SUBSTR(SZTP,2,1), '4', SZTP))) val03,  /* full40Qty */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'F', DECODE(SUBSTR(SZTP,2,1), '5', SZTP))) + COUNT(DECODE(FE, 'F', DECODE(SUBSTR(SZTP,2,1), '9', SZTP))) val04,  /* fullHcQty */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'F', DECODE(SUBSTR(SZTP,2,1), '7', SZTP))) val05,  /* full45Qty */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'E', DECODE(SUBSTR(SZTP,2,1), '2', SZTP))) val06,  /* mty20Qty  */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'E', DECODE(SUBSTR(SZTP,2,1), '4', SZTP))) val07,  /* mty40Qty  */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'E', DECODE(SUBSTR(SZTP,2,1), '5', SZTP))) + COUNT(DECODE(FE, 'E', DECODE(SUBSTR(SZTP,2,1), '9', SZTP))) val08,  /* mtyHcQty  */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'E', DECODE(SUBSTR(SZTP,2,1), '7', SZTP))) val09,  /* mty45Qty  */" ).append("\n"); 
		query.append("       SUM(NVL(TO_NUMBER(TRIM(B.WEIGHT)), 0))  weightTotal," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("     --< Release > ______________________________________________________________________________________" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("     /*  20100405 Realese Logic 변경 By Y.H.Nam" ).append("\n"); 
		query.append("       NVL(SUM(RR.SLOT),0)                     releasedteu," ).append("\n"); 
		query.append("       NVL(SUM(RR.WEIGHT),0)                   releasedweight" ).append("\n"); 
		query.append("     */" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("      /* 20100405 Realese Logic 변경 By Y.H.Nam  */" ).append("\n"); 
		query.append("       ( SELECT" ).append("\n"); 
		query.append("                NVL(NVL(SUM(RA.RELEASE_SLOT),0) + NVL(SUM(RA.SWAP_SLOT),0),0) ||','||  -- releasedteu" ).append("\n"); 
		query.append("                NVL(NVL(SUM(RA.RELEASE_WGT), 0) + NVL(SUM(RA.SWAP_WGT), 0),0)          -- releasedweight" ).append("\n"); 
		query.append("           FROM RDR_HEADER      RH1," ).append("\n"); 
		query.append("                RDR_ALLOCATION  RA" ).append("\n"); 
		query.append("          WHERE M.VSL_CD      = RH1.VSL_CD  (+)" ).append("\n"); 
		query.append("            AND M.SKD_VOY_NO  = RH1.VOY_NO  (+)" ).append("\n"); 
		query.append("            AND M.SKD_DIR_CD  = RH1.DIR_CD  (+)" ).append("\n"); 
		query.append("            AND M.FROM_RGN    = RH1.REGION  (+)" ).append("\n"); 
		query.append("            AND RH1.VSL_CD    = RA.VSL_CD   (+)" ).append("\n"); 
		query.append("            AND RH1.VOY_NO    = RA.VOY_NO   (+)" ).append("\n"); 
		query.append("            AND RH1.DIR_CD    = RA.DIR_CD   (+)" ).append("\n"); 
		query.append("            AND RH1.REGION    = RA.REGION   (+)" ).append("\n"); 
		query.append("            AND @[company]    = RA.OPR_CD   (+)" ).append("\n"); 
		query.append("        )  releasedteu" ).append("\n"); 
		query.append(" FROM" ).append("\n"); 
		query.append("      MAIN              M," ).append("\n"); 
		query.append("      BSA_VVD_OTR_CRR   O1," ).append("\n"); 
		query.append("      BSA_VVD_OTR_CRR   O2," ).append("\n"); 
		query.append("      RDR_HEADER        RH2," ).append("\n"); 
		query.append("    --RDR_SLOT_RELEASE  RR, /* 20100405 Realese Logic 변경 By Y.H.Nam  */" ).append("\n"); 
		query.append("      BAY_PLAN          B" ).append("\n"); 
		query.append("------------------------------------------------------- 실적  (1). BAY PLAN" ).append("\n"); 
		query.append("WHERE M.VSL_CD         = B.VSL_CD        (+)" ).append("\n"); 
		query.append("  AND M.SKD_VOY_NO     = B.VOY_NO        (+)" ).append("\n"); 
		query.append("  AND M.SKD_DIR_CD     = B.DIR_CD        (+)" ).append("\n"); 
		query.append("  AND M.VPS_PORT_CD    = B.PORT_CD       (+)" ).append("\n"); 
		query.append("  AND M.CLPT_IND_SEQ   = B.CALL_IND      (+)" ).append("\n"); 
		query.append("  AND @[company]       = B.OPR_CD        (+)" ).append("\n"); 
		query.append("  AND 'F'              = B.PLAN_TYPE     (+)" ).append("\n"); 
		query.append("-------------------------------------------------------  BSA (2). COA" ).append("\n"); 
		query.append("  AND M.TRD_CD         = O1.TRD_CD       (+)" ).append("\n"); 
		query.append("  AND M.RLANE_CD       = O1.RLANE_CD     (+)" ).append("\n"); 
		query.append("  AND M.VSL_CD         = O1.VSL_CD       (+)" ).append("\n"); 
		query.append("  AND M.SKD_VOY_NO     = O1.SKD_VOY_NO   (+)" ).append("\n"); 
		query.append("  AND M.SKD_DIR_CD     = O1.SKD_DIR_CD   (+)" ).append("\n"); 
		query.append("  AND '007'            = O1.BSA_OP_JB_CD (+)" ).append("\n"); 
		query.append("  AND @[company]       = O1.CRR_CD       (+)" ).append("\n"); 
		query.append("  AND M.TRD_CD         = O2.TRD_CD       (+)" ).append("\n"); 
		query.append("  AND M.RLANE_CD       = O2.RLANE_CD     (+)" ).append("\n"); 
		query.append("  AND M.VSL_CD         = O2.VSL_CD       (+)" ).append("\n"); 
		query.append("  AND M.SKD_VOY_NO     = O2.SKD_VOY_NO   (+)" ).append("\n"); 
		query.append("  AND M.SKD_DIR_CD     = O2.SKD_DIR_CD   (+)" ).append("\n"); 
		query.append("  AND '009'            = O2.BSA_OP_JB_CD (+)" ).append("\n"); 
		query.append("  AND @[company]       = O2.CRR_CD       (+)" ).append("\n"); 
		query.append("-------------------------------------------------------  RLSE" ).append("\n"); 
		query.append("  AND M.VSL_CD         = RH2.VSL_CD      (+)" ).append("\n"); 
		query.append("  AND M.SKD_VOY_NO     = RH2.VOY_NO      (+)" ).append("\n"); 
		query.append("  AND M.SKD_DIR_CD     = RH2.DIR_CD      (+)" ).append("\n"); 
		query.append("  AND M.VPS_PORT_CD    = RH2.PORT_CD     (+)" ).append("\n"); 
		query.append("/* 20100405 Realese Logic 변경 By Y.H.Nam" ).append("\n"); 
		query.append("  AND RH2.VSL_CD       = RR.VSL_CD       (+)" ).append("\n"); 
		query.append("  AND RH2.VOY_NO       = RR.VOY_NO       (+)" ).append("\n"); 
		query.append("  AND RH2.DIR_CD       = RR.DIR_CD       (+)" ).append("\n"); 
		query.append("  AND RH2.REGION       = RR.REGION       (+)" ).append("\n"); 
		query.append("  AND 'SML'            = RR.OPR_CD       (+)" ).append("\n"); 
		query.append("*/" ).append("\n"); 
		query.append("GROUP BY" ).append("\n"); 
		query.append("    M.TRD_CD||M.LANE_CD||M.VSL_CD||M.SKD_VOY_NO||M.SKD_DIR_CD||'A'," ).append("\n"); 
		query.append("    M.TRD_CD,        /*  trade      */" ).append("\n"); 
		query.append("    M.LANE_CD,       /*  lane       */" ).append("\n"); 
		query.append("    M.VSL_CD,        /*  vsl        */" ).append("\n"); 
		query.append("    M.SKD_VOY_NO,    /*  voy        */" ).append("\n"); 
		query.append("    M.SKD_DIR_CD,    /*  vvd        */" ).append("\n"); 
		query.append("    M.VPS_PORT_CD,   /*  port       */" ).append("\n"); 
		query.append("    M.CLPT_IND_SEQ,  /*  call_ind   */" ).append("\n"); 
		query.append("    M.CLPT_SEQ,      /*  call_seq   */" ).append("\n"); 
		query.append("    M.VPS_ETD_DT,    /*  atd        */" ).append("\n"); 
		query.append("    M.PLN_YR,        /*  pln_yr     */" ).append("\n"); 
		query.append("    M.PLN_WK,        /*  pln_yr     */" ).append("\n"); 
		query.append("    M.FROM_RGN,      /*  from_region*/" ).append("\n"); 
		query.append("    M.TO_RGN" ).append("\n"); 
		query.append(" UNION ALL" ).append("\n"); 
		query.append(" SELECT M.TRD_CD||M.LANE_CD||M.VSL_CD||M.SKD_VOY_NO||M.SKD_DIR_CD||'B' SEQ," ).append("\n"); 
		query.append("        NVL(M2.TRD_CD,M.TRD_CD)                 TRD_CD," ).append("\n"); 
		query.append("        NVL(M2.SLAN_CD,M.LANE_CD)               LANE_CD ," ).append("\n"); 
		query.append("        M2.VSL_CD||M2.SKD_VOY_NO||M2.SKD_DIR_CD VVD," ).append("\n"); 
		query.append("        M2.VSL_CD,                               /* i_vsl_cd      */" ).append("\n"); 
		query.append("        M2.SKD_VOY_NO,                          /* i_skd_voy_no   */" ).append("\n"); 
		query.append("        M2.SKD_DIR_CD,                          /* i_skd_dir_cd   */" ).append("\n"); 
		query.append("        M2.VPS_PORT_CD,                         /* i_vps_port_cd  */" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        M2.CLPT_IND_SEQ,                        /* i_clpt_ind_seq */" ).append("\n"); 
		query.append("        M2.CLPT_SEQ,                            /* i_clpt_seq     */" ).append("\n"); 
		query.append("        TO_CHAR(M2.VPS_ETD_DT, 'YYYYMMDD'),     /* i_vps_etd_dt_1 */" ).append("\n"); 
		query.append("        MAX((SELECT PLN_YR||PLN_WK" ).append("\n"); 
		query.append("               FROM EQR_WK_PRD" ).append("\n"); 
		query.append("              WHERE TO_CHAR(M2.VPS_ETD_DT, 'YYYYMMDD') BETWEEN WK_ST_DT AND WK_END_DT)" ).append("\n"); 
		query.append("            ) WEEK,                             /* atd week     */" ).append("\n"); 
		query.append("        NVL(M2.FROM_RGN,M.FROM_RGN) FROM_RGN,   /* i_from_rgn   */" ).append("\n"); 
		query.append("        NVL(M2.TO_RGN ,M.TO_RGN) TO_RGN ,       /* i_to_rgn     */" ).append("\n"); 
		query.append("        MAX(M.WK_ST_DT) WK_ST_DT," ).append("\n"); 
		query.append("        MAX(M.WK_END_DT) WK_END_DT," ).append("\n"); 
		query.append("        'In' IO," ).append("\n"); 
		query.append(" --< BSA > ______________________________________________________________________________________" ).append("\n"); 
		query.append(" -- (1). RDR" ).append("\n"); 
		query.append("        DECODE((SELECT SUM(RA.BSA_SLOT)||','||SUM(RA.BSA_WGT)" ).append("\n"); 
		query.append("                  FROM RDR_HEADER      RH1," ).append("\n"); 
		query.append("                       RDR_ALLOCATION  RA" ).append("\n"); 
		query.append("                 WHERE M2.VSL_CD     = RH1.VSL_CD  (+)" ).append("\n"); 
		query.append("                   AND M2.SKD_VOY_NO = RH1.VOY_NO  (+)" ).append("\n"); 
		query.append("                   AND M2.SKD_DIR_CD = RH1.DIR_CD  (+)" ).append("\n"); 
		query.append("                   AND M2.FROM_RGN   = RH1.REGION  (+)" ).append("\n"); 
		query.append("                   AND RH1.VSL_CD    = RA.VSL_CD   (+)" ).append("\n"); 
		query.append("                   AND RH1.VOY_NO    = RA.VOY_NO   (+)" ).append("\n"); 
		query.append("                   AND RH1.DIR_CD    = RA.DIR_CD   (+)" ).append("\n"); 
		query.append("                   AND RH1.REGION    = RA.REGION   (+)" ).append("\n"); 
		query.append("                   AND   @[company]  = RA.OPR_CD   (+)" ).append("\n"); 
		query.append("                 ), ','" ).append("\n"); 
		query.append("               ,NVL(MAX(DECODE(O1.BSA_OP_JB_CD,'007',O1.CRR_BSA_CAPA,0)),0)|| ',' ||NVL(MAX(DECODE(O2.BSA_OP_JB_CD,'009',O2.CRR_BSA_CAPA,0)),0)" ).append("\n"); 
		query.append("               ,(SELECT SUM(RA.BSA_SLOT)||','||SUM(RA.BSA_WGT)" ).append("\n"); 
		query.append("                   FROM RDR_HEADER      RH1," ).append("\n"); 
		query.append("                        RDR_ALLOCATION  RA" ).append("\n"); 
		query.append("                  WHERE M2.VSL_CD     = RH1.VSL_CD  (+)" ).append("\n"); 
		query.append("                    AND M2.SKD_VOY_NO = RH1.VOY_NO  (+)" ).append("\n"); 
		query.append("                    AND M2.SKD_DIR_CD = RH1.DIR_CD  (+)" ).append("\n"); 
		query.append("                    AND M2.FROM_RGN   = RH1.REGION  (+)" ).append("\n"); 
		query.append("                    AND RH1.VSL_CD    = RA.VSL_CD   (+)" ).append("\n"); 
		query.append("                    AND RH1.VOY_NO    = RA.VOY_NO   (+)" ).append("\n"); 
		query.append("                    AND RH1.DIR_CD    = RA.DIR_CD   (+)" ).append("\n"); 
		query.append("                    AND RH1.REGION    = RA.REGION   (+)" ).append("\n"); 
		query.append("                    AND @[company]    = RA.OPR_CD   (+)" ).append("\n"); 
		query.append("                 )" ).append("\n"); 
		query.append("               )  bsaspace  ," ).append("\n"); 
		query.append("-- deadSlot-------------------------------------------------------" ).append("\n"); 
		query.append("       (SELECT NVL(SUM(DECODE(RU.TYPE,'A',RU.SLOT_QTY,0))" ).append("\n"); 
		query.append("              +SUM(DECODE(RU.TYPE,'H',RU.SLOT_QTY,'L',RU.SLOT_QTY,0)),0)  /* deadSlot  */" ).append("\n"); 
		query.append("          FROM RDR_HEADER      H," ).append("\n"); 
		query.append("               RDR_UTILIZE     RU" ).append("\n"); 
		query.append("         WHERE M2.VSL_CD     = H.VSL_CD  (+)" ).append("\n"); 
		query.append("           AND M2.SKD_VOY_NO = H.VOY_NO  (+)" ).append("\n"); 
		query.append("           AND M2.SKD_DIR_CD = H.DIR_CD  (+)" ).append("\n"); 
		query.append("           AND M2.FROM_RGN   = H.REGION  (+)" ).append("\n"); 
		query.append("           AND H.VSL_CD      = RU.VSL_CD" ).append("\n"); 
		query.append("           AND H.VOY_NO      = RU.VOY_NO" ).append("\n"); 
		query.append("           AND H.DIR_CD      = RU.DIR_CD" ).append("\n"); 
		query.append("           AND H.REGION      = RU.REGION" ).append("\n"); 
		query.append("           AND @[company]    = RU.OPR_CD" ).append("\n"); 
		query.append("       ) deadSlot," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("--< 실적 > ______________________________________________________________________________________" ).append("\n"); 
		query.append("-- (1). BAY PLAN" ).append("\n"); 
		query.append("       DECODE(SUM(NVL(TO_NUMBER(TRIM(B.WEIGHT)), 0)),0,'','BAY') val01,                            /* dataSource */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'F', DECODE(SUBSTR(SZTP,2,1), '2', SZTP))) val02,  /* full20Qty */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'F', DECODE(SUBSTR(SZTP,2,1), '4', SZTP))) val03,  /* full40Qty */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'F', DECODE(SUBSTR(SZTP,2,1), '5', SZTP))) + COUNT(DECODE(FE, 'F', DECODE(SUBSTR(SZTP,2,1), '9', SZTP)))  val04,  /* fullHcQty */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'F', DECODE(SUBSTR(SZTP,2,1), '7', SZTP))) val05,  /* full45Qty */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'E', DECODE(SUBSTR(SZTP,2,1), '2', SZTP))) val06,  /* mty20Qty  */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'E', DECODE(SUBSTR(SZTP,2,1), '4', SZTP))) val07,  /* mty40Qty  */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'E', DECODE(SUBSTR(SZTP,2,1), '5', SZTP))) + COUNT(DECODE(FE, 'E', DECODE(SUBSTR(SZTP,2,1), '9', SZTP))) val08,  /* mtyHcQty  */" ).append("\n"); 
		query.append("       COUNT(DECODE(FE, 'E', DECODE(SUBSTR(SZTP,2,1), '7', SZTP))) val09,  /* mty45Qty  */" ).append("\n"); 
		query.append("       SUM(NVL(TO_NUMBER(TRIM(B.WEIGHT)), 0))  weightTotal  ," ).append("\n"); 
		query.append(" --< Release > ______________________________________________________________________________________" ).append("\n"); 
		query.append("       /* 20100405 Realese Logic 변경 By Y.H.Nam" ).append("\n"); 
		query.append("       NVL(SUM(RR.SLOT),0)                     releasedteu," ).append("\n"); 
		query.append("       NVL(SUM(RR.WEIGHT),0)                   releasedweight" ).append("\n"); 
		query.append("       */" ).append("\n"); 
		query.append("       /* 20100405 Realese Logic 변경 By Y.H.Nam  */" ).append("\n"); 
		query.append("       ( SELECT NVL(NVL(SUM(RA.RELEASE_SLOT),0) + NVL(SUM(RA.SWAP_SLOT),0),0) ||','||  -- releasedteu" ).append("\n"); 
		query.append("                NVL(NVL(SUM(RA.RELEASE_WGT), 0) + NVL(SUM(RA.SWAP_WGT), 0),0)          -- releasedweight" ).append("\n"); 
		query.append("           FROM RDR_HEADER      RH1," ).append("\n"); 
		query.append("                RDR_ALLOCATION    RA" ).append("\n"); 
		query.append("          WHERE M2.VSL_CD     = RH1.VSL_CD  (+)" ).append("\n"); 
		query.append("            AND M2.SKD_VOY_NO = RH1.VOY_NO  (+)" ).append("\n"); 
		query.append("            AND M2.SKD_DIR_CD = RH1.DIR_CD  (+)" ).append("\n"); 
		query.append("            AND M2.FROM_RGN   = RH1.REGION  (+)" ).append("\n"); 
		query.append("            AND RH1.VSL_CD    = RA.VSL_CD   (+)" ).append("\n"); 
		query.append("            AND RH1.VOY_NO    = RA.VOY_NO   (+)" ).append("\n"); 
		query.append("            AND RH1.DIR_CD    = RA.DIR_CD   (+)" ).append("\n"); 
		query.append("            AND RH1.REGION    = RA.REGION   (+)" ).append("\n"); 
		query.append("            AND @[company]    = RA.OPR_CD   (+)" ).append("\n"); 
		query.append("       )  releasedteu" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(" FROM" ).append("\n"); 
		query.append("    (" ).append("\n"); 
		query.append("      SELECT" ).append("\n"); 
		query.append("             VPS1.VSL_CD," ).append("\n"); 
		query.append("             VPS1.SKD_VOY_NO," ).append("\n"); 
		query.append("             VPS1.SKD_DIR_CD," ).append("\n"); 
		query.append("             VPS1.VPS_PORT_CD," ).append("\n"); 
		query.append("             VPS1.CLPT_IND_SEQ," ).append("\n"); 
		query.append("             VPS1.CLPT_SEQ," ).append("\n"); 
		query.append("             VPS1.VPS_ETD_DT," ).append("\n"); 
		query.append("             VPS.SLAN_CD," ).append("\n"); 
		query.append("             BSA.TRD_CD," ).append("\n"); 
		query.append("             BSA.RLANE_CD," ).append("\n"); 
		query.append("             M.LANE_CD M_LANE_CD," ).append("\n"); 
		query.append("             M.VSL_CD M_VSL_CD," ).append("\n"); 
		query.append("             M.SKD_VOY_NO M_SKD_VOY_NO," ).append("\n"); 
		query.append("             M.SKD_DIR_CD M_SKD_DIR_CD," ).append("\n"); 
		query.append("             DECODE(VPS.SLAN_CD, 'WAF',SCNT1.CONTI_CD, 'EM1',SCNT1.CONTI_CD, 'EM2',SCNT1.CONTI_CD, 'TLS',SCNT1.CONTI_CD, DECODE(SCNT1.CONTI_CD, 'F', 'E', SCNT1.CONTI_CD)) FROM_RGN," ).append("\n"); 
		query.append("--             DECODE(SCNT1.CONTI_CD, 'F', 'E', SCNT1.CONTI_CD) FROM_RGN," ).append("\n"); 
		query.append("             SUBSTR(MIN(LPAD(VPS2.CLPT_SEQ, 4)||DECODE(VPS.SLAN_CD, 'WAF', SCNT2.CONTI_CD, 'EM1', SCNT2.CONTI_CD, 'EM2', SCNT2.CONTI_CD, 'TLS', SCNT2.CONTI_CD, DECODE(SCNT2.CONTI_CD, 'F', 'E', SCNT2.CONTI_CD))), 5, 1) TO_RGN" ).append("\n"); 
		query.append("--             SUBSTR(MIN(LPAD(VPS2.CLPT_SEQ, 4)||DECODE(SCNT2.CONTI_CD, 'F', 'E', SCNT2.CONTI_CD)), 5, 1) TO_RGN" ).append("\n"); 
		query.append("       FROM" ).append("\n"); 
		query.append("            (    /* Hash Join 유도를 위해 Group By  로 바꿈 */" ).append("\n"); 
		query.append("             SELECT /*+ INDEX_FFS(BSA_VVD_MST XPKBSA_VVD_MST) */" ).append("\n"); 
		query.append("                    TRD_CD," ).append("\n"); 
		query.append("                    SUBSTR(RLANE_CD,1, 3) LANE_CD," ).append("\n"); 
		query.append("                    RLANE_CD RLANE_CD" ).append("\n"); 
		query.append("               FROM BSA_VVD_MST   -- 108 건" ).append("\n"); 
		query.append("            GROUP BY TRD_CD," ).append("\n"); 
		query.append("                  SUBSTR(RLANE_CD,1, 3) ," ).append("\n"); 
		query.append("                  RLANE_CD" ).append("\n"); 
		query.append("            ) BSA," ).append("\n"); 
		query.append("            VSK_VSL_PORT_SKD VPS," ).append("\n"); 
		query.append("            MAIN               M," ).append("\n"); 
		query.append("            VSK_VSL_PORT_SKD VPS1," ).append("\n"); 
		query.append("            MDM_COUNTRY CNT1," ).append("\n"); 
		query.append("            MDM_SUBCONTINENT SCNT1," ).append("\n"); 
		query.append("            VSK_VSL_PORT_SKD VPS2," ).append("\n"); 
		query.append("            MDM_COUNTRY CNT2," ).append("\n"); 
		query.append("            MDM_SUBCONTINENT SCNT2," ).append("\n"); 
		query.append("			AR_MST_REV_VVD V" ).append("\n"); 
		query.append("      WHERE NVL(VPS1.VPS_PORT_CD,   ' ') NOT IN ('PAPAC', 'EGSUZ')" ).append("\n"); 
		query.append("        AND NVL(VPS1.TURN_PORT_IND_CD,  ' ') NOT IN ('D', 'F', 'V')" ).append("\n"); 
		query.append("        AND NVL(VPS1.SKD_CNG_STS_CD,  ' ') <> 'S'" ).append("\n"); 
		query.append("        AND CNT1.CNT_CD       = SUBSTR(VPS1.VPS_PORT_CD, 1, 2)" ).append("\n"); 
		query.append("        AND CNT1.SCONTI_CD    = SCNT1.SCONTI_CD" ).append("\n"); 
		query.append("        AND VPS1.VSL_CD       = VPS.VSL_CD" ).append("\n"); 
		query.append("        AND VPS1.SKD_VOY_NO   = VPS.TURN_SKD_VOY_NO" ).append("\n"); 
		query.append("        AND VPS1.SKD_DIR_CD   = VPS.TURN_SKD_DIR_CD" ).append("\n"); 
		query.append("        AND VPS2.VSL_CD       = VPS1.VSL_CD" ).append("\n"); 
		query.append("        AND VPS2.SKD_VOY_NO   = VPS1.SKD_VOY_NO" ).append("\n"); 
		query.append("        AND VPS2.SKD_DIR_CD   = VPS1.SKD_DIR_CD" ).append("\n"); 
		query.append("        AND VPS2.CLPT_SEQ     > VPS1.CLPT_SEQ" ).append("\n"); 
		query.append("        AND NVL(VPS2.VPS_PORT_CD,   ' ') NOT IN ('PAPAC', 'EGSUZ')" ).append("\n"); 
		query.append("        AND NVL(VPS2.SKD_CNG_STS_CD,  ' ') <> 'S'" ).append("\n"); 
		query.append("        AND CNT2.CNT_CD       = SUBSTR(VPS2.VPS_PORT_CD, 1, 2)" ).append("\n"); 
		query.append("        AND CNT2.SCONTI_CD    = SCNT2.SCONTI_CD" ).append("\n"); 
		query.append("        AND VPS.SLAN_CD       = M.LANE_CD" ).append("\n"); 
		query.append("        AND VPS.VSL_CD        = M.VSL_CD" ).append("\n"); 
		query.append("        AND VPS.SKD_VOY_NO    = M.SKD_VOY_NO" ).append("\n"); 
		query.append("        AND VPS.SKD_DIR_CD    = M.SKD_DIR_CD" ).append("\n"); 
		query.append("        AND VPS.CLPT_SEQ      = 1" ).append("\n"); 
		query.append("        AND DECODE(VPS.SLAN_CD, 'WAF', SCNT1.CONTI_CD, 'EM1', SCNT1.CONTI_CD, 'EM2', SCNT1.CONTI_CD, 'TLS', SCNT1.CONTI_CD, DECODE(SCNT1.CONTI_CD, 'F', 'E', SCNT1.CONTI_CD)) = M.TO_RGN" ).append("\n"); 
		query.append("        --AND DECODE(SCNT1.CONTI_CD, 'F', 'E', SCNT1.CONTI_CD) = M.TO_RGN" ).append("\n"); 
		query.append("        AND VPS.SLAN_CD 	= BSA.LANE_CD" ).append("\n"); 
		query.append("		AND VPS.VSL_CD 		= V.VSL_CD" ).append("\n"); 
		query.append("		AND VPS.SKD_VOY_NO 	= V.SKD_VOY_NO" ).append("\n"); 
		query.append("		AND VPS.SKD_DIR_CD 	= V.SKD_DIR_CD" ).append("\n"); 
		query.append("		AND V.RLANE_CD 		= BSA.RLANE_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("      GROUP BY" ).append("\n"); 
		query.append("          VPS1.VSL_CD," ).append("\n"); 
		query.append("          VPS1.SKD_VOY_NO," ).append("\n"); 
		query.append("          VPS1.SKD_DIR_CD," ).append("\n"); 
		query.append("          VPS1.VPS_PORT_CD," ).append("\n"); 
		query.append("          VPS1.CLPT_IND_SEQ," ).append("\n"); 
		query.append("          VPS1.CLPT_SEQ," ).append("\n"); 
		query.append("          VPS1.VPS_ETD_DT," ).append("\n"); 
		query.append("          VPS.SLAN_CD," ).append("\n"); 
		query.append("          BSA.TRD_CD," ).append("\n"); 
		query.append("          BSA.RLANE_CD," ).append("\n"); 
		query.append("          M.LANE_CD," ).append("\n"); 
		query.append("          M.VSL_CD," ).append("\n"); 
		query.append("          M.SKD_VOY_NO," ).append("\n"); 
		query.append("          M.SKD_DIR_CD," ).append("\n"); 
		query.append("          DECODE(VPS.SLAN_CD, 'WAF',SCNT1.CONTI_CD, 'EM1',SCNT1.CONTI_CD, 'EM2',SCNT1.CONTI_CD, 'TLS',SCNT1.CONTI_CD, DECODE(SCNT1.CONTI_CD, 'F', 'E', SCNT1.CONTI_CD))" ).append("\n"); 
		query.append("--          DECODE(SCNT1.CONTI_CD, 'F', 'E', SCNT1.CONTI_CD)" ).append("\n"); 
		query.append("    ) M2," ).append("\n"); 
		query.append("    MAIN               M," ).append("\n"); 
		query.append("    BAY_PLAN           B," ).append("\n"); 
		query.append("    BSA_VVD_OTR_CRR   O1," ).append("\n"); 
		query.append("    BSA_VVD_OTR_CRR   O2," ).append("\n"); 
		query.append("    RDR_HEADER      RH2/* , 20100405 Realese Logic 변경 By Y.H.Nam  */" ).append("\n"); 
		query.append("  /*  RDR_SLOT_RELEASE  RR 20100405 Realese Logic 변경 By Y.H.Nam  */" ).append("\n"); 
		query.append("------------------------------------------------------- 실적  (1). BAY PLAN" ).append("\n"); 
		query.append("WHERE M.TRD_CD        = M2.TRD_CD      (+)" ).append("\n"); 
		query.append("--AND M.LANE_CD       = M2.M2_LANE_CD  (+)" ).append("\n"); 
		query.append("  AND M.VSL_CD        = M2.M_VSL_CD    (+)" ).append("\n"); 
		query.append("  AND M.SKD_VOY_NO    = M2.M_SKD_VOY_NO(+)" ).append("\n"); 
		query.append("  AND M.SKD_DIR_CD    = M2.M_SKD_DIR_CD(+)" ).append("\n"); 
		query.append("  --AND (M2.FROM_RGN(+) = M.TO_RGN AND M2.TO_RGN(+) = M.FROM_RGN )" ).append("\n"); 
		query.append("    -- 2012.08.29 ADD" ).append("\n"); 
		query.append("    AND (    (M2.SLAN_CD = 'AWJ' AND M2.FROM_RGN = M.TO_RGN AND M2.TO_RGN = 'E')" ).append("\n"); 
		query.append("          OR (M2.SLAN_CD <> 'AWJ' AND M2.FROM_RGN = M.TO_RGN AND M2.TO_RGN = M.FROM_RGN )" ).append("\n"); 
		query.append("         )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("--AND M2.VSL_CD(+)    = M.VSL_CD" ).append("\n"); 
		query.append("  AND M2.VSL_CD       = B.VSL_CD       (+)" ).append("\n"); 
		query.append("  AND M2.SKD_VOY_NO   = B.VOY_NO       (+)" ).append("\n"); 
		query.append("  AND M2.SKD_DIR_CD   = B.DIR_CD       (+)" ).append("\n"); 
		query.append("  AND M2.VPS_PORT_CD  = B.PORT_CD      (+)" ).append("\n"); 
		query.append("  AND M2.CLPT_IND_SEQ = B.CALL_IND     (+)" ).append("\n"); 
		query.append("  AND @[company]      = B.OPR_CD       (+)" ).append("\n"); 
		query.append("  AND 'F'             = B.PLAN_TYPE    (+)" ).append("\n"); 
		query.append("-------------------------------------------------------  BSA (2). COA" ).append("\n"); 
		query.append("  AND M2.TRD_CD       = O1.TRD_CD      (+)" ).append("\n"); 
		query.append("  AND M2.RLANE_CD     = O1.RLANE_CD    (+)" ).append("\n"); 
		query.append("  AND M2.VSL_CD       = O1.VSL_CD      (+)" ).append("\n"); 
		query.append("  AND M2.SKD_VOY_NO   = O1.SKD_VOY_NO  (+)" ).append("\n"); 
		query.append("  AND M2.SKD_DIR_CD   = O1.SKD_DIR_CD  (+)" ).append("\n"); 
		query.append("  AND '007'           = O1.BSA_OP_JB_CD(+)" ).append("\n"); 
		query.append("  AND @[company]      = O1.CRR_CD      (+)" ).append("\n"); 
		query.append("  AND M2.TRD_CD       = O2.TRD_CD      (+)" ).append("\n"); 
		query.append("  AND M2.RLANE_CD     =  O2.RLANE_CD   (+)" ).append("\n"); 
		query.append("  AND M2.VSL_CD       = O2.VSL_CD      (+)" ).append("\n"); 
		query.append("  AND M2.SKD_VOY_NO   = O2.SKD_VOY_NO  (+)" ).append("\n"); 
		query.append("  AND M2.SKD_DIR_CD   = O2.SKD_DIR_CD  (+)" ).append("\n"); 
		query.append("  AND '009'           = O2.BSA_OP_JB_CD(+)" ).append("\n"); 
		query.append("  AND @[company]      = O2.CRR_CD      (+)" ).append("\n"); 
		query.append("-------------------------------------------------------  RLSE" ).append("\n"); 
		query.append("  AND M2.VSL_CD       = RH2.VSL_CD     (+)" ).append("\n"); 
		query.append("  AND M2.SKD_VOY_NO   = RH2.VOY_NO     (+)" ).append("\n"); 
		query.append("  AND M2.SKD_DIR_CD   = RH2.DIR_CD     (+)" ).append("\n"); 
		query.append("  AND M2.VPS_PORT_CD  = RH2.PORT_CD    (+)" ).append("\n"); 
		query.append("/* 20100405 Realese Logic 변경 By Y.H.Nam" ).append("\n"); 
		query.append("  AND RH2.VSL_CD      = RR.VSL_CD      (+)" ).append("\n"); 
		query.append("  AND RH2.VOY_NO      = RR.VOY_NO      (+)" ).append("\n"); 
		query.append("  AND RH2.DIR_CD      = RR.DIR_CD      (+)" ).append("\n"); 
		query.append("  AND RH2.REGION      = RR.REGION      (+)" ).append("\n"); 
		query.append("  AND 'SML'           = RR.OPR_CD      (+)" ).append("\n"); 
		query.append("*/" ).append("\n"); 
		query.append("GROUP BY" ).append("\n"); 
		query.append("    M.TRD_CD||M.LANE_CD||M.VSL_CD||M.SKD_VOY_NO||M.SKD_DIR_CD||'B'," ).append("\n"); 
		query.append("    M2.TRD_CD," ).append("\n"); 
		query.append("    M2.SLAN_CD," ).append("\n"); 
		query.append("    NVL(M2.TRD_CD,M.TRD_CD)," ).append("\n"); 
		query.append("    NVL(M2.SLAN_CD,M.LANE_CD) ," ).append("\n"); 
		query.append("    M2.VSL_CD,                            /* i_vsl_cd       */" ).append("\n"); 
		query.append("    M2.SKD_VOY_NO,                        /* i_skd_voy_no   */" ).append("\n"); 
		query.append("    M2.SKD_DIR_CD,                        /* i_skd_dir_cd   */" ).append("\n"); 
		query.append("    M2.VPS_PORT_CD,                       /* i_vps_port_cd  */" ).append("\n"); 
		query.append("    M2.CLPT_IND_SEQ,                      /* i_clpt_ind_seq */" ).append("\n"); 
		query.append("    M2.CLPT_SEQ,                          /* i_clpt_seq     */" ).append("\n"); 
		query.append("    TO_CHAR(M2.VPS_ETD_DT, 'YYYYMMDD'),   /* i_vps_etd_dt_1 */" ).append("\n"); 
		query.append("    NVL(M2.FROM_RGN,M.FROM_RGN),          /* i_from_rgn     */" ).append("\n"); 
		query.append("    NVL(M2.TO_RGN,M.TO_RGN),              /* i_to_rgn       */" ).append("\n"); 
		query.append("    M2.FROM_RGN," ).append("\n"); 
		query.append("    M2.TO_RGN" ).append("\n"); 
		query.append("ORDER BY SEQ" ).append("\n"); 

	}
}