<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="CntrPlanMTRepoPlanDBDAOSearchMtyRepoRefListRSQL">
			<desc><![CDATA[Mt Ref list 조회
- CHM-201537079, 2015-08-10, 신용찬, 표준코드 변환]]></desc>
			<sql><![CDATA[
WITH 
PARAMS AS (
    SELECT @[rlane]       AS RLANE_CD,
           SUBSTR(@[s_vvd_cd],1,4)     AS VSL_CD,
           SUBSTR(@[s_vvd_cd],5,4) AS SKD_VOY_NO,
           SUBSTR(@[s_vvd_cd],9) AS SKD_DIR_CD,
           '1'           AS STS,
           @[qty_tp]      AS QTY_TP,
           'Y'   AS VOID_FLG
    FROM DUAL
)
, CUR_PORTS AS (
    SELECT RLANE_CD       , 
           VSL_CD         ,
           SKD_VOY_NO     , 
           SKD_DIR_CD     ,
           PORT_CD        ,
           YD_CD          ,
           CLPT_SEQ       ,
           CLPT_IND_SEQ   ,
           TURN_SKD_VOY_NO,
           TURN_SKD_DIR_CD,
           TURN_CLPT_IND_SEQ   ,
           FLG            ,
           BSA            ,
           STS
      FROM (
              SELECT P.RLANE_CD   ,
                     S1.VSL_CD    ,
                     S1.SKD_VOY_NO,
                     S1.SKD_DIR_CD,
                     S1.VPS_PORT_CD AS PORT_CD,
                     S1.YD_CD     ,
                     S1.CLPT_SEQ           AS CLPT_SEQ,
                     S1.CLPT_IND_SEQ       AS CLPT_IND_SEQ,
                     S1.TURN_SKD_VOY_NO,
                     S1.TURN_SKD_DIR_CD,
                     S1.TURN_CLPT_IND_SEQ       AS TURN_CLPT_IND_SEQ,
                     (
                       CASE 
                            WHEN TRIM(S1.TURN_SKD_VOY_NO) IS NULL  THEN 2
                            WHEN S1.TURN_PORT_IND_CD IN ('Y', 'N') THEN 1
                                                                   ELSE 3
                        END
                     ) AS FLG,
                     (
                        SELECT (
                                  SELECT NVL(MAX(DECODE(B.STUP_FLG, 'Y', DECODE(A.PORT_BSA_CAPA, 0, NULL, A.PORT_BSA_CAPA))), C.CRR_BSA_CAPA) BSA
                                    FROM BSA_VVD_PORT_DWN A,
                                         MAS_LANE_RGST    B
                                   WHERE B.RLANE_CD        = C.RLANE_CD
                                     AND B.TRD_CD          = C.TRD_CD
                                     AND B.DIR_CD          = C.SKD_DIR_CD
                                     AND A.TRD_CD      (+) = C.TRD_CD
                                     AND A.RLANE_CD    (+) = C.RLANE_CD
                                     AND A.VSL_CD      (+) = C.VSL_CD
                                     AND A.SKD_VOY_NO  (+) = C.SKD_VOY_NO
                                     AND A.SKD_DIR_CD  (+) = C.SKD_DIR_CD
                                     AND A.BSA_OP_JB_CD(+) = DECODE(P.QTY_TP, '1', '007', '016') -- Port별 Weight 정보
                                     AND A.CRR_CD      (+) = C.CRR_CD
                                     AND A.PORT_CD     (+) = NVL(SUBSTR(S1.YD_CD, 1, 5), S1.VPS_PORT_CD)
                               ) AS BSA
                          FROM BSA_VVD_OTR_CRR C
                         WHERE C.RLANE_CD     = P.RLANE_CD
                           AND C.VSL_CD       = P.VSL_CD
                           AND C.SKD_VOY_NO   = P.SKD_VOY_NO
                           AND C.SKD_DIR_CD   = P.SKD_DIR_CD
                           AND C.BSA_OP_JB_CD = DECODE(P.QTY_TP, '1', '007', '009')
                           AND C.CRR_CD       = 'SML'
                     ) AS BSA,
                     P.STS
                FROM VSK_VSL_PORT_SKD S1,
                     PARAMS           P
               WHERE (S1.SKD_CNG_STS_CD IS NULL OR S1.SKD_CNG_STS_CD <> 'S')
                 AND S1.VSL_CD     = P.VSL_CD
                 AND S1.SKD_VOY_NO = P.SKD_VOY_NO
                 AND S1.SKD_DIR_CD = P.SKD_DIR_CD
                 AND S1.VPS_PORT_CD NOT IN ('EGSUZ')
            )
)
, VVD_BASE AS (
    SELECT RLANE_CD  ,
           VSL_CD    ,
           SKD_VOY_NO,
           SKD_DIR_CD,
           MAX(STS) AS STS,
           MIN(DECODE(FLG, '1', TURN_SKD_VOY_NO)) AS PRE_SKD_VOY_NO,
           MIN(DECODE(FLG, '1', TURN_SKD_DIR_CD)) AS PRE_SKD_DIR_CD,
           MIN(DECODE(FLG, '3', TURN_SKD_VOY_NO)) AS PST_SKD_VOY_NO,
           MIN(DECODE(FLG, '3', TURN_SKD_DIR_CD)) AS PST_SKD_DIR_CD
      FROM (
              SELECT S1.RLANE_CD       ,
                     S1.VSL_CD         ,
                     S1.SKD_VOY_NO     ,
                     S1.SKD_DIR_CD     ,
                     S1.TURN_SKD_VOY_NO,
                     S1.TURN_SKD_DIR_CD,
                     DECODE(S2.SKD_VOY_NO, NULL, '', S1.FLG) AS FLG,
                     S1.STS
                FROM CUR_PORTS        S1,
                     VSK_VSL_PORT_SKD S2
               WHERE S1.VSL_CD          = S2.VSL_CD    (+)
                 AND S1.TURN_SKD_VOY_NO = S2.SKD_VOY_NO(+)
                 AND S1.TURN_SKD_DIR_CD = S2.SKD_DIR_CD(+)
                 AND S1.YD_CD           = S2.YD_CD     (+)
           )
  GROUP BY RLANE_CD  ,
           VSL_CD    ,
           SKD_VOY_NO,
           SKD_DIR_CD
)
, PORT_SKD AS (
    SELECT B.RLANE_CD,
           B.VSL_CD||B.SKD_VOY_NO||B.SKD_DIR_CD AS BASE_VVD,
           (
             DECODE(S1.SKD_VOY_NO||S1.SKD_DIR_CD, B.PRE_SKD_VOY_NO||B.PRE_SKD_DIR_CD, '1',
                                                  B.SKD_VOY_NO||B.SKD_DIR_CD        , '2',
                                                  B.PST_SKD_VOY_NO||B.PST_SKD_DIR_CD, '3'  )
           ) AS TP,
           S1.VSL_CD||S1.SKD_VOY_NO||S1.SKD_DIR_CD AS VVD,
           S1.VSL_CD     ,
           S1.SKD_VOY_NO ,
           S1.SKD_DIR_CD ,
           S1.VPS_PORT_CD,
           S1.YD_CD      ,
           S1.CLPT_SEQ   ,
           S1.CLPT_IND_SEQ,
           S1.TURN_CLPT_IND_SEQ,
           SPC_CONTI_CONV_FNC(LOC.CONTI_CD, B.RLANE_CD) AS PORT_CONTI,
           S1.TURN_PORT_IND_CD,
           NVL(S1.SKD_CNG_STS_CD, ' ') AS CNG_STS_CD,
           S1.TURN_SKD_VOY_NO,
           S1.TURN_SKD_DIR_CD,
           S1.VSL_CD||S1.TURN_SKD_VOY_NO||S1.TURN_SKD_DIR_CD AS TURN_VVD,
           B.PRE_SKD_VOY_NO,
           B.PRE_SKD_DIR_CD,
           B.PST_SKD_VOY_NO,
           B.PST_SKD_DIR_CD,
           (
             SELECT PRD.COST_YR||LPAD(CEIL((TO_CHAR(S1.VPS_ETD_DT, 'DDD') + 7 - TO_CHAR(TO_DATE(PRD.SLS_TO_DT, 'YYYYMMDD'), 'DDD')) / 7), 2, '0')
               FROM MAS_WK_PRD PRD
              WHERE PRD.COST_YR = TO_CHAR(S1.VPS_ETD_DT, 'YYYY')
                AND PRD.COST_WK = '01'
           ) AS COST_YRWK,
           MAX(S1.CLPT_SEQ) OVER (PARTITION BY S1.VSL_CD||S1.SKD_VOY_NO||S1.SKD_DIR_CD||S1.YD_CD) AS MAX_SEQ,
           B.STS          
      FROM MDM_LOCATION     LOC,
           VSK_VSL_PORT_SKD S1 ,
           VVD_BASE         B
     WHERE LOC.LOC_CD = S1.VPS_PORT_CD
       AND S1.VSL_CD  = B.VSL_CD
       AND ((S1.SKD_VOY_NO, S1.SKD_DIR_CD) IN ((B.SKD_VOY_NO, B.SKD_DIR_CD), (B.PRE_SKD_VOY_NO, B.PRE_SKD_DIR_CD), (B.PST_SKD_VOY_NO, B.PST_SKD_DIR_CD)))
)
, PORT_SEQ AS (
    SELECT TP        ,
           VVD       ,
           VSL_CD    ,
           SKD_VOY_NO,
           SKD_DIR_CD,
           POL_CD,
           POD_CD,
           POL_SEQ  ,
           POL_CLPT_IND_SEQ,
           POL_CLPT_IND_SEQ1,
           POD_SEQ  ,
           POD_CLPT_IND_SEQ,
           POD_CLPT_IND_SEQ1,
           POL_CONTI,
           POD_CONTI,
           POL_YRWK ,
           POD_YRWK ,        
           (SELECT 
                 (
                   DECODE(S1.STS, '1', CASE WHEN VPS_ETD_DT < GLOBALDATE_PKG.TIME_CONV_FNC('GMT', SYS_EXTRACT_UTC(SYSTIMESTAMP), VPS_PORT_CD ) THEN 'Y'
                                                                                                                                               ELSE 'N'
                                       END, '2', 'N', '3', 'Y')
                 )
             FROM VSK_VSL_PORT_SKD
             WHERE VSL_CD = S1.VSL_CD
             AND SKD_VOY_NO = S1.SKD_VOY_NO
             AND SKD_DIR_CD = S1.SKD_DIR_CD
             AND CLPT_SEQ = S1.CLPT_SEQ ) AS PAST
      FROM (
            SELECT S1.TP        ,
                   S1.VVD       ,
                   S1.VSL_CD    ,
                   S1.SKD_VOY_NO,
                   S1.SKD_DIR_CD,
                   S1.CLPT_SEQ  ,
                   S1.STS       ,
                   NVL(S1.YD_CD, S1.VPS_PORT_CD) AS POL_CD,
                   NVL(S2.YD_CD, S2.VPS_PORT_CD) AS POD_CD,
                   S1.CLPT_SEQ   AS POL_SEQ  ,
                   S1.TURN_PORT_IND_CD,
                   S1.CLPT_IND_SEQ AS POL_CLPT_IND_SEQ,
                   DECODE(S1.BASE_VVD, S1.TURN_VVD, S1.TURN_CLPT_IND_SEQ, S1.CLPT_IND_SEQ) AS POL_CLPT_IND_SEQ1,
                   S2.CLPT_SEQ   AS POD_SEQ  ,
                   S2.TURN_PORT_IND_CD,
                   S2.CLPT_IND_SEQ AS POD_CLPT_IND_SEQ,
                   DECODE(S2.BASE_VVD, S2.TURN_VVD, S2.TURN_CLPT_IND_SEQ, S2.CLPT_IND_SEQ) AS POD_CLPT_IND_SEQ1,
                   S1.PORT_CONTI AS POL_CONTI,
                   S2.PORT_CONTI AS POD_CONTI,
                   S1.COST_YRWK  AS POL_YRWK ,
                   S2.COST_YRWK  AS POD_YRWK 
              FROM PORT_SKD S1,
                   PORT_SKD S2
             WHERE S1.VSL_CD     = S2.VSL_CD
               AND S1.SKD_VOY_NO = S2.SKD_VOY_NO
               AND S1.SKD_DIR_CD = S2.SKD_DIR_CD
               AND S1.CLPT_SEQ   < S2.CLPT_SEQ
               AND S1.TURN_PORT_IND_CD IN ('Y', 'N')
               AND S1.CNG_STS_CD <> 'S'
               AND ( S1.CLPT_SEQ = S1.MAX_SEQ OR S2.CLPT_SEQ < S1.MAX_SEQ )
               AND DECODE(S1.TP, 1, S2.TURN_VVD, 2, S1.VVD, 3, S1.TURN_VVD) = S1.BASE_VVD
        )    S1       
  ORDER BY TP     ,
           POL_SEQ,
           POD_SEQ
)
, VVD_LD_PORT AS (
    SELECT S1.VSL_CD    ,
           S1.SKD_VOY_NO,
           S1.SKD_DIR_CD,
           SUBSTR(MAX(LTRIM(TO_CHAR(S1.POD_SEQ, 'FM000'))|| S1.POD_CD), 4) AS LD_PORT
      FROM PORT_SEQ S1
  GROUP BY S1.VSL_CD    ,
           S1.SKD_VOY_NO,
           S1.SKD_DIR_CD
)
, COPY AS (
    SELECT LEVEL SEQ
      FROM DUAL
CONNECT BY LEVEL <= 5
)
, BKG_DATA AS (
    SELECT 2 AS SRC       ,
           Z.TP           ,
           Z.POL_CD       ,
           Z.POL_SEQ      ,
           Z.POL_CLPT_IND_SEQ, 
           Z.POD_CD       ,
           Z.POD_SEQ      ,
           Z.POD_CLPT_IND_SEQ, 
           Z.IOC_CD       ,
           Z.BKG_CGO_TP_CD,

           Z.QTY_D2 , --20131115
           Z.QTY_D4 , --20131115
           Z.QTY_D5 , --20131115
           Z.QTY_D7 , --20131115
           Z.QTY_R2 , --20131115
           Z.QTY_R5 , --20131115
           Z.QTY_R9 , --20131115
           Z.QTY_O2 , --20131115
           Z.QTY_O4 , --20131115
           Z.QTY_S2 , --20131115
           Z.QTY_S4 , --20131115
           Z.QTY_F2 , --20131115
           Z.QTY_F4 , --20131115
           Z.QTY_F5 , --20131115
           Z.QTY_A2 , --20131115
           Z.QTY_A4 , --20131115
           Z.QTY_A5 , --20131115
           Z.QTY_WT_TTL , --20131115
           
           Z.QTY_TTL ,
           Z.QTY_HC_TTL,
           Z.QTY_45_TTL
      FROM (
            SELECT 
                   Z.TP           ,
                   Z.POL_CD       ,
                   Z.POL_SEQ      ,
                   Z.POL_CLPT_IND_SEQ, 
                   Z.POD_CD       ,
                   Z.POD_SEQ      ,
                   Z.POD_CLPT_IND_SEQ, 
                   Z.IOC_CD       ,
                   Z.BKG_CGO_TP_CD,
                   
                   SUM(TO_NUMBER(NVL(Z.VAL_WT, 0))) AS QTY_WT_TTL, --20131115
                   
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', SUBSTR(Z.VAL, 1, 14), SUBSTR(Z.VAL, 15)), 0))) AS QTY_TTL,
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', DECODE(Z.VOID_FLG, 'Y',SUBSTR(Z.VAL_HC, 1, 14),0),0), 0))) AS QTY_HC_TTL, --20130807
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', DECODE(Z.VOID_FLG, 'Y',SUBSTR(Z.VAL_45, 1, 14),0),0), 0))) AS QTY_45_TTL, --20130807

                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_D2,1,14),SUBSTR(Z.VAL_D2,15)),0))) AS QTY_D2, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_D4,1,14),SUBSTR(Z.VAL_D4,15)),0))) AS QTY_D4, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_D5,1,14),SUBSTR(Z.VAL_D5,15)),0))) AS QTY_D5, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_D7,1,14),SUBSTR(Z.VAL_D7,15)),0))) AS QTY_D7, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_R2,1,14),SUBSTR(Z.VAL_R2,15)),0))) AS QTY_R2, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_R5,1,14),SUBSTR(Z.VAL_R5,15)),0))) AS QTY_R5, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_R9,1,14),SUBSTR(Z.VAL_R9,15)),0))) AS QTY_R9, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_O2,1,14),SUBSTR(Z.VAL_O2,15)),0))) AS QTY_O2, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_O4,1,14),SUBSTR(Z.VAL_O4,15)),0))) AS QTY_O4, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_S2,1,14),SUBSTR(Z.VAL_S2,15)),0))) AS QTY_S2, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_S4,1,14),SUBSTR(Z.VAL_S4,15)),0))) AS QTY_S4, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_F2,1,14),SUBSTR(Z.VAL_F2,15)),0))) AS QTY_F2, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_F4,1,14),SUBSTR(Z.VAL_F4,15)),0))) AS QTY_F4, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_F5,1,14),SUBSTR(Z.VAL_F5,15)),0))) AS QTY_F5, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_A2,1,14),SUBSTR(Z.VAL_A2,15)),0))) AS QTY_A2, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_A4,1,14),SUBSTR(Z.VAL_A4,15)),0))) AS QTY_A4, --20131115
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP,'1',SUBSTR(Z.VAL_A5,1,14),SUBSTR(Z.VAL_A5,15)),0))) AS QTY_A5 --20131115

              FROM (
                      SELECT B.TP    ,
                             B.POL_CD,
                             B.POL_SEQ,
                             B.POL_CLPT_IND_SEQ, 
                             B.POD_CD,
                             B.POD_SEQ,
                             B.POD_CLPT_IND_SEQ, 
                             DECODE(BK.BKG_CGO_TP_CD, 'P', 'M', 'F') AS BKG_CGO_TP_CD,
                             DECODE(BV.VSL_PRE_PST_CD, 'T', DECODE(B.POL_CONTI, B.POD_CONTI, 2, 1), 3) AS IOC_CD,
                             (
                               SELECT    TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', 1, 2) * Q.OP_CNTR_QTY), 'FM0000000000.000')
                                      || TO_CHAR((MAX(D.ACT_WGT) * DECODE(MAX(D.WGT_UT_CD), 'LBS', 0.00045, 0.001)) + SUM(Q.OP_CNTR_QTY * ( SELECT TS.CNTR_TPSZ_TARE_WGT
                                                                                                                                              FROM MDM_CNTR_TP_SZ TS
                                                                                                                                             WHERE TS.CNTR_TPSZ_CD = Q.CNTR_TPSZ_CD)) * 0.001, 'FM0000000000.000')
                                 FROM BKG_QUANTITY Q
                                WHERE BK.BKG_NO     = Q.BKG_NO
                                  AND Q.OP_CNTR_QTY > 0
                            ) AS VAL,
                             (
                               SELECT    TO_CHAR((MAX(D.ACT_WGT) * DECODE(MAX(D.WGT_UT_CD), 'LBS', 0.00045, 0.001)) + SUM(Q.OP_CNTR_QTY * ( SELECT TS.CNTR_TPSZ_TARE_WGT
                                                                                                                                              FROM MDM_CNTR_TP_SZ TS
                                                                                                                                             WHERE TS.CNTR_TPSZ_CD = Q.CNTR_TPSZ_CD)) * 0.001, 'FM0000000000.000')
                                 FROM BKG_QUANTITY Q
                                WHERE BK.BKG_NO     = Q.BKG_NO
                                  AND Q.OP_CNTR_QTY > 0
                            ) AS VAL_WT,
                            P.QTY_TP,                  
                            
                            --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='D2') AS VAL_D2, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='D4') AS VAL_D4, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='D5') AS VAL_D5, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='D7') AS VAL_D7, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='R2') AS VAL_R2, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='R5') AS VAL_R5, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='R9') AS VAL_R9, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='O2') AS VAL_O2, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='O4') AS VAL_O4, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='S2') AS VAL_S2, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='S4') AS VAL_S4, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='F2') AS VAL_F2, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='F4') AS VAL_F4, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='F5') AS VAL_F5, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='A2') AS VAL_A2, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='A4') AS VAL_A4, --20131115
                            (SELECT TO_CHAR(SUM(Q.OP_CNTR_QTY),'FM0000000000.000')||TO_CHAR((MAX(D.ACT_WGT)*DECODE(MAX(D.WGT_UT_CD),'LBS',0.00045,0.001)) + SUM(Q.OP_CNTR_QTY*(SELECT TS.CNTR_TPSZ_TARE_WGT FROM MDM_CNTR_TP_SZ TS WHERE TS.CNTR_TPSZ_CD=Q.CNTR_TPSZ_CD))*0.001,'FM0000000000.000') FROM BKG_QUANTITY Q WHERE BK.BKG_NO=Q.BKG_NO AND Q.OP_CNTR_QTY>0 AND Q.CNTR_TPSZ_CD='A5') AS VAL_A5, --20131115
                            
                            (
                               SELECT TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD),'5',Q.OP_CNTR_QTY,'8',Q.OP_CNTR_QTY,'9',Q.OP_CNTR_QTY,0)), 'FM0000000000.000')
                                 FROM BKG_QUANTITY Q
                                WHERE BK.BKG_NO     = Q.BKG_NO
                                  AND Q.OP_CNTR_QTY > 0
                                  AND SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD) IN ('5','8','9')
                            ) AS VAL_HC, --20130807
                            (
                               SELECT TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD),'7',Q.OP_CNTR_QTY,0)), 'FM0000000000.000')
                                 FROM BKG_QUANTITY Q
                                WHERE BK.BKG_NO     = Q.BKG_NO
                                  AND Q.OP_CNTR_QTY > 0
                                  AND SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD) = '7'
                            ) AS VAL_45, --20130807                          
                            P.VOID_FLG    --20130807                         
                       FROM BKG_BOOKING BK,
                            BKG_VVD     BV,
                            PORT_SEQ    B ,
                            PARAMS      P ,
                            VVD_LD_PORT LD,
                            BKG_BL_DOC  D
                      WHERE BV.VSL_CD     = B.VSL_CD
                        AND BV.SKD_VOY_NO = B.SKD_VOY_NO
                        AND BV.SKD_DIR_CD = B.SKD_DIR_CD
                        AND BV.VSL_CD     = LD.VSL_CD
                        AND BV.SKD_VOY_NO = LD.SKD_VOY_NO
                        AND BV.SKD_DIR_CD = LD.SKD_DIR_CD
                        AND BV.POL_YD_CD   = B.POL_CD
                        AND BV.POL_CLPT_IND_SEQ  = B.POL_CLPT_IND_SEQ
                        AND DECODE(BV.POD_CD, 'XXXXX', LD.LD_PORT, BV.POD_YD_CD) = B.POD_CD
                        AND BV.POD_CLPT_IND_SEQ  = B.POD_CLPT_IND_SEQ
                        AND BK.BKG_NO      = BV.BKG_NO
                        AND BK.BKG_STS_CD IN ('F', 'W')
                        AND BK.BKG_NO      = D.BKG_NO
                   ) Z
          GROUP BY Z.TP    ,
                   Z.POL_CD       ,
                   Z.POL_SEQ      ,
                   Z.POL_CLPT_IND_SEQ, 
                   Z.POD_CD       ,
                   Z.POD_SEQ      ,
                   Z.POD_CLPT_IND_SEQ, 
                   Z.IOC_CD,
                   Z.BKG_CGO_TP_CD
        ) Z                  
  ORDER BY Z.TP    ,
           Z.POL_CD,
           Z.POL_CLPT_IND_SEQ, 
           Z.POD_CD       ,
           Z.POD_CLPT_IND_SEQ, 
           Z.IOC_CD,
           Z.BKG_CGO_TP_CD
)
, MT_DATA AS (
    SELECT T.SEQ SRC,
           Z.TP     ,
           Z.POL_CD,
           Z.POL_SEQ,
           Z.POL_CLPT_IND_SEQ,
           Z.POD_CD,
           Z.POD_SEQ,
           Z.POD_CLPT_IND_SEQ,
           Z.IOC_CD ,
           SUM(Z.QTY_D2) AS QTY_D2,
           SUM(Z.QTY_D4) AS QTY_D4,
           SUM(Z.QTY_D5) AS QTY_D5,
           SUM(Z.QTY_D7) AS QTY_D7,
           SUM(Z.QTY_R2) AS QTY_R2,
           SUM(Z.QTY_R5) AS QTY_R5,
           SUM(Z.QTY_R9) AS QTY_R9,
           SUM(Z.QTY_O2) AS QTY_O2,
           SUM(Z.QTY_O4) AS QTY_O4,
           SUM(Z.QTY_S2) AS QTY_S2,
           SUM(Z.QTY_S4) AS QTY_S4,
           SUM(Z.QTY_F2) AS QTY_F2,
           SUM(Z.QTY_F4) AS QTY_F4,
           SUM(Z.QTY_F5) AS QTY_F5,
           SUM(Z.QTY_A2) AS QTY_A2,
           SUM(Z.QTY_A4) AS QTY_A4,
           SUM(Z.QTY_A5) AS QTY_A5,
           SUM(Z.QTY_WT_TTL) AS QTY_WT_TTL,
           SUM(Z.QTY_TTL) AS QTY_TTL,
           SUM(Z.QTY_HC_TTL) AS QTY_HC_TTL,
           SUM(Z.QTY_45_TTL) AS QTY_45_TTL
      FROM (
              SELECT TP         ,
                     POL_CD     ,
                     POL_SEQ    ,
                     POL_CLPT_IND_SEQ,
                     POD_CD     ,
                     POD_SEQ    ,
                     POD_CLPT_IND_SEQ,
                     4 AS IOC_CD,
                     QTY_D2 , --20131115
                     QTY_D4 , --20131115
                     QTY_D5 , --20131115
                     QTY_D7 , --20131115
                     QTY_R2 , --20131115
                     QTY_R5 , --20131115
                     QTY_R9 , --20131115
                     QTY_O2 , --20131115
                     QTY_O4 , --20131115
                     QTY_S2 , --20131115
                     QTY_S4 , --20131115
                     QTY_F2 , --20131115
                     QTY_F4 , --20131115
                     QTY_F5 , --20131115
                     QTY_A2 , --20131115
                     QTY_A4 , --20131115
                     QTY_A5 , --20131115
                     QTY_WT_TTL , --20131115
                     
                     QTY_TTL,
                     QTY_HC_TTL,
                     QTY_45_TTL
                FROM BKG_DATA
               WHERE BKG_CGO_TP_CD = 'M'
           ) Z,
           COPY T
     WHERE T.SEQ <= 4
  GROUP BY T.SEQ   ,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           Z.POL_CLPT_IND_SEQ,
           Z.POD_CD,
           Z.POD_SEQ,
           Z.POD_CLPT_IND_SEQ,
           Z.IOC_CD
)
, ALL_DATA AS (
    SELECT 1 AS SRC,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD,
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_D2, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_D2, 0), DECODE(Z.SRC, 1, Z.QTY_D2, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_D2), DECODE(Z.SRC, 1, Z.QTY_D2)))
              END
           ) AS QTY_D2, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_D4, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_D4, 0), DECODE(Z.SRC, 1, Z.QTY_D4, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_D4), DECODE(Z.SRC, 1, Z.QTY_D4)))
              END
           ) AS QTY_D4, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_D5, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_D5, 0), DECODE(Z.SRC, 1, Z.QTY_D5, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_D5), DECODE(Z.SRC, 1, Z.QTY_D5)))
              END
           ) AS QTY_D5, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_D7, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_D7, 0), DECODE(Z.SRC, 1, Z.QTY_D7, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_D7), DECODE(Z.SRC, 1, Z.QTY_D7)))
              END
           ) AS QTY_D7, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_R2, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_R2, 0), DECODE(Z.SRC, 1, Z.QTY_R2, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_R2), DECODE(Z.SRC, 1, Z.QTY_R2)))
              END
           ) AS QTY_R2, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_R5, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_R5, 0), DECODE(Z.SRC, 1, Z.QTY_R5, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_R5), DECODE(Z.SRC, 1, Z.QTY_R5)))
              END
           ) AS QTY_R5, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_R9, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_R9, 0), DECODE(Z.SRC, 1, Z.QTY_R9, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_R9), DECODE(Z.SRC, 1, Z.QTY_R9)))
              END
           ) AS QTY_R9, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_O2, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_O2, 0), DECODE(Z.SRC, 1, Z.QTY_O2, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_O2), DECODE(Z.SRC, 1, Z.QTY_O2)))
              END
           ) AS QTY_O2, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_O4, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_O4, 0), DECODE(Z.SRC, 1, Z.QTY_O4, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_O4), DECODE(Z.SRC, 1, Z.QTY_O4)))
              END
           ) AS QTY_O4, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_S2, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_S2, 0), DECODE(Z.SRC, 1, Z.QTY_S2, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_S2), DECODE(Z.SRC, 1, Z.QTY_S2)))
              END
           ) AS QTY_S2, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_S4, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_S4, 0), DECODE(Z.SRC, 1, Z.QTY_S4, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_S4), DECODE(Z.SRC, 1, Z.QTY_S4)))
              END
           ) AS QTY_S4, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_F2, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_F2, 0), DECODE(Z.SRC, 1, Z.QTY_F2, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_F2), DECODE(Z.SRC, 1, Z.QTY_F2)))
              END
           ) AS QTY_F2, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_F4, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_F4, 0), DECODE(Z.SRC, 1, Z.QTY_F4, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_F4), DECODE(Z.SRC, 1, Z.QTY_F4)))
              END
           ) AS QTY_F4, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_F5, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_F5, 0), DECODE(Z.SRC, 1, Z.QTY_F5, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_F5), DECODE(Z.SRC, 1, Z.QTY_F5)))
              END
           ) AS QTY_F5, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_A2, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_A2, 0), DECODE(Z.SRC, 1, Z.QTY_A2, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_A2), DECODE(Z.SRC, 1, Z.QTY_A2)))
              END
           ) AS QTY_A2, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_A4, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_A4, 0), DECODE(Z.SRC, 1, Z.QTY_A4, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_A4), DECODE(Z.SRC, 1, Z.QTY_A4)))
              END
           ) AS QTY_A4, --20131115
           ( CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_A5, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_A5, 0), DECODE(Z.SRC, 1, Z.QTY_A5, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_A5), DECODE(Z.SRC, 1, Z.QTY_A5)))
              END
           ) AS QTY_A5, --20131115
           (
             CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_WT_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_WT_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_WT_TTL, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_WT_TTL), DECODE(Z.SRC, 1, Z.QTY_WT_TTL)))
              END
           ) AS QTY_WT_TTL, --20131115

           -- 이미 지난경우는 BKG물량 사용, 나머지의 경우 OCEAN이고 이전항차와 겹치면 BKG물량, 나머지의 경우 ALLOCATION 물량
           (
             CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_TTL, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_TTL), DECODE(Z.SRC, 1, Z.QTY_TTL)))
              END
           ) AS QTY_TTL,
           (
             CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_HC_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_HC_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_HC_TTL, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_HC_TTL), DECODE(Z.SRC, 1, Z.QTY_HC_TTL)))
              END
           ) AS QTY_HC_TTL,
           (
             CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_45_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_45_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_45_TTL, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_45_TTL), DECODE(Z.SRC, 1, Z.QTY_45_TTL)))
              END
           ) AS QTY_45_TTL,           
           MAX(P.PAST) AS PAST
      FROM (
              SELECT SRC   ,
                     TP    ,
                     POL_CD,
                     POL_SEQ,
                     POL_CLPT_IND_SEQ,
                     POD_CD ,
                     POD_SEQ,
                     POD_CLPT_IND_SEQ,
                     IOC_CD,
                     QTY_D2 , --20131115
                     QTY_D4 , --20131115
                     QTY_D5 , --20131115
                     QTY_D7 , --20131115
                     QTY_R2 , --20131115
                     QTY_R5 , --20131115
                     QTY_R9 , --20131115
                     QTY_O2 , --20131115
                     QTY_O4 , --20131115
                     QTY_S2 , --20131115
                     QTY_S4 , --20131115
                     QTY_F2 , --20131115
                     QTY_F4 , --20131115
                     QTY_F5 , --20131115
                     QTY_A2 , --20131115
                     QTY_A4 , --20131115
                     QTY_A5 , --20131115
                     QTY_WT_TTL , --20131115
                     QTY_TTL,
                     QTY_HC_TTL AS QTY_HC_TTL,
                     QTY_45_TTL AS QTY_45_TTL
                FROM BKG_DATA
               WHERE BKG_CGO_TP_CD = 'F'
           ) Z,
           PORT_SEQ P
     WHERE P.TP = Z.TP
       AND P.POL_CD = Z.POL_CD
       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ
       AND P.POD_CD = Z.POD_CD
       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ
  GROUP BY Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD
    UNION ALL
    SELECT Z.SRC   ,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD,
           SUM(Z.QTY_D2) AS QTY_D2, --20131115
           SUM(Z.QTY_D4) AS QTY_D4, --20131115
           SUM(Z.QTY_D5) AS QTY_D5, --20131115
           SUM(Z.QTY_D7) AS QTY_D7, --20131115
           SUM(Z.QTY_R2) AS QTY_R2, --20131115
           SUM(Z.QTY_R5) AS QTY_R5, --20131115
           SUM(Z.QTY_R9) AS QTY_R9, --20131115
           SUM(Z.QTY_O2) AS QTY_O2, --20131115
           SUM(Z.QTY_O4) AS QTY_O4, --20131115
           SUM(Z.QTY_S2) AS QTY_S2, --20131115
           SUM(Z.QTY_S4) AS QTY_S4, --20131115
           SUM(Z.QTY_F2) AS QTY_F2, --20131115
           SUM(Z.QTY_F4) AS QTY_F4, --20131115
           SUM(Z.QTY_F5) AS QTY_F5, --20131115
           SUM(Z.QTY_A2) AS QTY_A2, --20131115
           SUM(Z.QTY_A4) AS QTY_A4, --20131115
           SUM(Z.QTY_A5) AS QTY_A5, --20131115
           SUM(Z.QTY_WT_TTL) AS QTY_WT_TTL, --20131115
           SUM(Z.QTY_TTL) AS QTY_TTL,
           SUM(Z.QTY_HC_TTL) AS QTY_HC_TTL,
           SUM(Z.QTY_45_TTL) AS QTY_45_TTL,
           MAX(P.PAST) AS PAST
      FROM BKG_DATA Z,
           PORT_SEQ P
     WHERE Z.BKG_CGO_TP_CD = 'F'
       AND P.TP = Z.TP
       AND P.POL_CD = Z.POL_CD
       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ
       AND P.POD_CD = Z.POD_CD
       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ
  GROUP BY Z.SRC   ,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD
    UNION ALL
    SELECT Z.SRC    ,
           Z.TP     ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD ,
           SUM(Z.QTY_D2) AS QTY_D2, --20131115
           SUM(Z.QTY_D4) AS QTY_D4, --20131115
           SUM(Z.QTY_D5) AS QTY_D5, --20131115
           SUM(Z.QTY_D7) AS QTY_D7, --20131115
           SUM(Z.QTY_R2) AS QTY_R2, --20131115
           SUM(Z.QTY_R5) AS QTY_R5, --20131115
           SUM(Z.QTY_R9) AS QTY_R9, --20131115
           SUM(Z.QTY_O2) AS QTY_O2, --20131115
           SUM(Z.QTY_O4) AS QTY_O4, --20131115
           SUM(Z.QTY_S2) AS QTY_S2, --20131115
           SUM(Z.QTY_S4) AS QTY_S4, --20131115
           SUM(Z.QTY_F2) AS QTY_F2, --20131115
           SUM(Z.QTY_F4) AS QTY_F4, --20131115
           SUM(Z.QTY_F5) AS QTY_F5, --20131115
           SUM(Z.QTY_A2) AS QTY_A2, --20131115
           SUM(Z.QTY_A4) AS QTY_A4, --20131115
           SUM(Z.QTY_A5) AS QTY_A5, --20131115
           SUM(Z.QTY_WT_TTL) AS QTY_WT_TTL , --20131115
           SUM(Z.QTY_TTL) AS QTY_TTL ,
           SUM(Z.QTY_HC_TTL) AS QTY_HC_TTL ,
           SUM(Z.QTY_45_TTL) AS QTY_45_TTL ,
           MAX(P.PAST) AS PAST
      FROM MT_DATA Z,
           PORT_SEQ P
     WHERE P.TP = Z.TP
       AND P.POL_CD = Z.POL_CD
       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ
       AND P.POD_CD = Z.POD_CD
       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ
  GROUP BY Z.SRC   ,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD
)
, PORT_MAP AS (
    SELECT C1.SEQ AS SRC   ,
           C2.SEQ AS IOC_CD,
           P.PORT_CD ,
           P.YD_CD   ,
           P.CLPT_SEQ,
           P.CLPT_IND_SEQ,
           P.FLG     ,
--           P.PAST    ,
           P.BSA
      FROM CUR_PORTS P ,
           COPY      C1,
           COPY      C2
     WHERE C1.SEQ <= 4
       AND C2.SEQ <= 5
)
, WK_PRD AS (
    SELECT MAX(A.SLS_FM_DT) AS WK_FM_DT
      FROM MAS_WK_PRD A
     WHERE (A.COST_YR,COST_WK) =
           (SELECT SUBSTR(SLS_YRMON,1,4),COST_WK
              FROM MAS_MON_VVD CMV,
                   PARAMS      P
             WHERE CMV.TRD_CD     = SAQ_GET_REP_TRD_FNC(P.RLANE_CD)
               AND CMV.RLANE_CD   = P.RLANE_CD
               AND CMV.VSL_CD     = P.VSL_CD
               AND CMV.SKD_VOY_NO = P.SKD_VOY_NO
               AND CMV.DIR_CD     = P.SKD_DIR_CD
               AND CMV.DELT_FLG   = 'N'
               AND ROWNUM         = 1)
),
VOID_CALC_BASIC AS (
SELECT DISTINCT RLANE_CD, 
       VSL_CD||SKD_VOY_NO||SKD_DIR_CD AS VVD,
       --YD_CD ,
       (SELECT WK_FM_DT
          FROM WK_PRD
       ) AS WK_FM_DT       
  FROM CUR_PORTS
)
, SPC_BTLNK_TPSZ AS (
  SELECT PS.RLANE_CD, PS.VSL_CD, PS.SKD_VOY_NO, PS.SKD_DIR_CD, 
         DECODE(SRC, 1, 'A', 2, 'B', 3, 'F', 4, 'M') AS SRC,
         DECODE(IOC_CD, 1, 'OCN', 2, 'IPC', 3, 'T/S', 4, 'MT', 5, 'TOTAL') AS IOC_CD,
         PORT_CD ,
         PORT_SEQ,
         FLG     ,
         LOD_TTL ,
         DIS_TTL ,
         ON_TTL  ,
         
         ROUND(NVL(SPC_LANE_RGST_QTY_FNC('HC',VCB.RLANE_CD, VCB.WK_FM_DT, SUBSTR(PORT_CD,1,5),  VCB.VVD, Z.BSA, NVL(Z.ON_HC_TTL, 0)),0)) +
         ROUND(NVL(SPC_LANE_RGST_QTY_FNC('45',VCB.RLANE_CD, VCB.WK_FM_DT, SUBSTR(PORT_CD,1,5),  VCB.VVD, Z.BSA, NVL(Z.ON_45_TTL, 0)),0)) AS VOID_TEU,
         
         --20131115
         LOD_D2_TTL,
         LOD_D4_TTL,
         LOD_D5_TTL,
         LOD_D7_TTL,
         LOD_R2_TTL,
         LOD_R5_TTL,
         LOD_R9_TTL,
         LOD_O2_TTL,
         LOD_O4_TTL,
         LOD_S2_TTL,
         LOD_S4_TTL,
         LOD_F2_TTL,
         LOD_F4_TTL,
         LOD_F5_TTL,
         LOD_A2_TTL,
         LOD_A4_TTL,
         LOD_A5_TTL,
         DIS_D2_TTL,
         DIS_D4_TTL,
         DIS_D5_TTL,
         DIS_D7_TTL,
         DIS_R2_TTL,
         DIS_R5_TTL,
         DIS_R9_TTL,
         DIS_O2_TTL,
         DIS_O4_TTL,
         DIS_S2_TTL,
         DIS_S4_TTL,
         DIS_F2_TTL,
         DIS_F4_TTL,
         DIS_F5_TTL,
         DIS_A2_TTL,
         DIS_A4_TTL,
         DIS_A5_TTL,
         ON_D2_TTL,
         ON_D4_TTL,
         ON_D5_TTL,
         ON_D7_TTL,
         ON_R2_TTL,
         ON_R5_TTL,
         ON_R9_TTL,
         ON_O2_TTL,
         ON_O4_TTL,
         ON_S2_TTL,
         ON_S4_TTL,
         ON_F2_TTL,
         ON_F4_TTL,
         ON_F5_TTL,
         ON_A2_TTL,
         ON_A4_TTL,
         ON_A5_TTL,

         PAST    ,
         BSA
    FROM VOID_CALC_BASIC VCB,
         (
            SELECT Z.SRC     ,
                   Z.IOC_CD  ,
                   Z.PORT_CD ,
                   Z.PORT_SEQ,
                   Z.FLG     ,
                   Z.LOD_TTL ,
                   (Z.DIS_TTL + Z.PRE_TTL) AS DIS_TTL,
                   SUM(Z.ON_TTL + Z.LOD_TTL - Z.DIS_TTL - Z.PRE_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_TTL,
                   
                   Z.LOD_HC_TTL ,
                   (Z.DIS_HC_TTL + Z.PRE_HC_TTL) AS DIS_HC_TTL,
                   SUM(Z.ON_HC_TTL + Z.LOD_HC_TTL - Z.DIS_HC_TTL - Z.PRE_HC_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_HC_TTL,
                   
                   Z.LOD_45_TTL ,
                   (Z.DIS_45_TTL + Z.PRE_45_TTL) AS DIS_45_TTL,
                   SUM(Z.ON_45_TTL + Z.LOD_45_TTL - Z.DIS_45_TTL - Z.PRE_45_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_45_TTL,
                   
                   --20131115
                   Z.LOD_D2_TTL ,
                   (Z.DIS_D2_TTL + Z.PRE_D2_TTL) AS DIS_D2_TTL,
                   SUM(Z.ON_D2_TTL + Z.LOD_D2_TTL - Z.DIS_D2_TTL - Z.PRE_D2_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_D2_TTL,
                   Z.LOD_D4_TTL ,
                   (Z.DIS_D4_TTL + Z.PRE_D4_TTL) AS DIS_D4_TTL,
                   SUM(Z.ON_D4_TTL + Z.LOD_D4_TTL - Z.DIS_D4_TTL - Z.PRE_D4_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_D4_TTL,
                   Z.LOD_D5_TTL ,
                   (Z.DIS_D5_TTL + Z.PRE_D5_TTL) AS DIS_D5_TTL,
                   SUM(Z.ON_D5_TTL + Z.LOD_D5_TTL - Z.DIS_D5_TTL - Z.PRE_D5_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_D5_TTL,
                   Z.LOD_D7_TTL ,
                   (Z.DIS_D7_TTL + Z.PRE_D7_TTL) AS DIS_D7_TTL,
                   SUM(Z.ON_D7_TTL + Z.LOD_D7_TTL - Z.DIS_D7_TTL - Z.PRE_D7_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_D7_TTL,
                   Z.LOD_R2_TTL ,
                   (Z.DIS_R2_TTL + Z.PRE_R2_TTL) AS DIS_R2_TTL,
                   SUM(Z.ON_R2_TTL + Z.LOD_R2_TTL - Z.DIS_R2_TTL - Z.PRE_R2_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_R2_TTL,
                   Z.LOD_R5_TTL ,
                   (Z.DIS_R5_TTL + Z.PRE_R5_TTL) AS DIS_R5_TTL,
                   SUM(Z.ON_R5_TTL + Z.LOD_R5_TTL - Z.DIS_R5_TTL - Z.PRE_R5_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_R5_TTL,
                   Z.LOD_R9_TTL ,
                   (Z.DIS_R9_TTL + Z.PRE_R9_TTL) AS DIS_R9_TTL,
                   SUM(Z.ON_R9_TTL + Z.LOD_R9_TTL - Z.DIS_R9_TTL - Z.PRE_R9_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_R9_TTL,
                   Z.LOD_O2_TTL ,
                   (Z.DIS_O2_TTL + Z.PRE_O2_TTL) AS DIS_O2_TTL,
                   SUM(Z.ON_O2_TTL + Z.LOD_O2_TTL - Z.DIS_O2_TTL - Z.PRE_O2_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_O2_TTL,
                   Z.LOD_O4_TTL ,
                   (Z.DIS_O4_TTL + Z.PRE_O4_TTL) AS DIS_O4_TTL,
                   SUM(Z.ON_O4_TTL + Z.LOD_O4_TTL - Z.DIS_O4_TTL - Z.PRE_O4_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_O4_TTL,
                   Z.LOD_S2_TTL ,
                   (Z.DIS_S2_TTL + Z.PRE_S2_TTL) AS DIS_S2_TTL,
                   SUM(Z.ON_S2_TTL + Z.LOD_S2_TTL - Z.DIS_S2_TTL - Z.PRE_S2_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_S2_TTL,
                   Z.LOD_S4_TTL ,
                   (Z.DIS_S4_TTL + Z.PRE_S4_TTL) AS DIS_S4_TTL,
                   SUM(Z.ON_S4_TTL + Z.LOD_S4_TTL - Z.DIS_S4_TTL - Z.PRE_S4_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_S4_TTL,
                   Z.LOD_F2_TTL ,
                   (Z.DIS_F2_TTL + Z.PRE_F2_TTL) AS DIS_F2_TTL,
                   SUM(Z.ON_F2_TTL + Z.LOD_F2_TTL - Z.DIS_F2_TTL - Z.PRE_F2_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_F2_TTL,
                   Z.LOD_F4_TTL ,
                   (Z.DIS_F4_TTL + Z.PRE_F4_TTL) AS DIS_F4_TTL,
                   SUM(Z.ON_F4_TTL + Z.LOD_F4_TTL - Z.DIS_F4_TTL - Z.PRE_F4_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_F4_TTL,
                   Z.LOD_F5_TTL ,
                   (Z.DIS_F5_TTL + Z.PRE_F5_TTL) AS DIS_F5_TTL,
                   SUM(Z.ON_F5_TTL + Z.LOD_F5_TTL - Z.DIS_F5_TTL - Z.PRE_F5_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_F5_TTL,
                   Z.LOD_A2_TTL ,
                   (Z.DIS_A2_TTL + Z.PRE_A2_TTL) AS DIS_A2_TTL,
                   SUM(Z.ON_A2_TTL + Z.LOD_A2_TTL - Z.DIS_A2_TTL - Z.PRE_A2_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_A2_TTL,
                   Z.LOD_A4_TTL ,
                   (Z.DIS_A4_TTL + Z.PRE_A4_TTL) AS DIS_A4_TTL,
                   SUM(Z.ON_A4_TTL + Z.LOD_A4_TTL - Z.DIS_A4_TTL - Z.PRE_A4_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_A4_TTL,
                   Z.LOD_A5_TTL ,
                   (Z.DIS_A5_TTL + Z.PRE_A5_TTL) AS DIS_A5_TTL,
                   SUM(Z.ON_A5_TTL + Z.LOD_A5_TTL - Z.DIS_A5_TTL - Z.PRE_A5_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_A5_TTL,
                   
                   Z.PAST,
                   Z.BSA ,
                   '' AS T
              FROM (
                      SELECT M.SRC   ,
                             M.IOC_CD,
                             NVL(NVL(M.YD_CD, M.PORT_CD), 'TOTAL') AS PORT_CD,
                             NVL(M.CLPT_SEQ, 0) AS PORT_SEQ,
                             M.FLG ,
                             Z.PAST, 
                             M.BSA ,
--                             Z.PORT_SEQ, Z.LOD_TTL, Z.DIS_TTL
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_TTL)) AS LOD_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_TTL)) AS DIS_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_TTL)) AS PRE_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_TTL), 0) AS ON_TTL,
                             
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_HC_TTL)) AS LOD_HC_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_HC_TTL)) AS DIS_HC_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_HC_TTL)) AS PRE_HC_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_HC_TTL), 0) AS ON_HC_TTL,
                             
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_45_TTL)) AS LOD_45_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_45_TTL)) AS DIS_45_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_45_TTL)) AS PRE_45_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_45_TTL), 0) AS ON_45_TTL,
                             
                             --20131115
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_D2_TTL)) AS LOD_D2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_D2_TTL)) AS DIS_D2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_D2_TTL)) AS PRE_D2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_D2_TTL), 0) AS ON_D2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_D4_TTL)) AS LOD_D4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_D4_TTL)) AS DIS_D4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_D4_TTL)) AS PRE_D4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_D4_TTL), 0) AS ON_D4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_D5_TTL)) AS LOD_D5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_D5_TTL)) AS DIS_D5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_D5_TTL)) AS PRE_D5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_D5_TTL), 0) AS ON_D5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_D7_TTL)) AS LOD_D7_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_D7_TTL)) AS DIS_D7_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_D7_TTL)) AS PRE_D7_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_D7_TTL), 0) AS ON_D7_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_R2_TTL)) AS LOD_R2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_R2_TTL)) AS DIS_R2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_R2_TTL)) AS PRE_R2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_R2_TTL), 0) AS ON_R2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_R5_TTL)) AS LOD_R5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_R5_TTL)) AS DIS_R5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_R5_TTL)) AS PRE_R5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_R5_TTL), 0) AS ON_R5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_R9_TTL)) AS LOD_R9_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_R9_TTL)) AS DIS_R9_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_R9_TTL)) AS PRE_R9_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_R9_TTL), 0) AS ON_R9_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_O2_TTL)) AS LOD_O2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_O2_TTL)) AS DIS_O2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_O2_TTL)) AS PRE_O2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_O2_TTL), 0) AS ON_O2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_O4_TTL)) AS LOD_O4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_O4_TTL)) AS DIS_O4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_O4_TTL)) AS PRE_O4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_O4_TTL), 0) AS ON_O4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_S2_TTL)) AS LOD_S2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_S2_TTL)) AS DIS_S2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_S2_TTL)) AS PRE_S2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_S2_TTL), 0) AS ON_S2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_S4_TTL)) AS LOD_S4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_S4_TTL)) AS DIS_S4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_S4_TTL)) AS PRE_S4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_S4_TTL), 0) AS ON_S4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_F2_TTL)) AS LOD_F2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_F2_TTL)) AS DIS_F2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_F2_TTL)) AS PRE_F2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_F2_TTL), 0) AS ON_F2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_F4_TTL)) AS LOD_F4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_F4_TTL)) AS DIS_F4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_F4_TTL)) AS PRE_F4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_F4_TTL), 0) AS ON_F4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_F5_TTL)) AS LOD_F5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_F5_TTL)) AS DIS_F5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_F5_TTL)) AS PRE_F5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_F5_TTL), 0) AS ON_F5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_A2_TTL)) AS LOD_A2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_A2_TTL)) AS DIS_A2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_A2_TTL)) AS PRE_A2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_A2_TTL), 0) AS ON_A2_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_A4_TTL)) AS LOD_A4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_A4_TTL)) AS DIS_A4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_A4_TTL)) AS PRE_A4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_A4_TTL), 0) AS ON_A4_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_A5_TTL)) AS LOD_A5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_A5_TTL)) AS DIS_A5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_A5_TTL)) AS PRE_A5_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_A5_TTL), 0) AS ON_A5_TTL
                        FROM (
                                SELECT A.SRC,
                                       MIN(A.PAST) OVER (PARTITION BY A.SRC, A.IOC_CD, A.PORT_CD) AS PAST,
                                       A.IOC_CD,
                                       A.SEQ,
                                       A.PORT_CD,
                                       A.PORT_SEQ,
                                       A.CLPT_IND_SEQ,
                                       A.LOD_TTL,
                                       A.DIS_TTL,
                                       A.PRE_TTL,
                                       A.LOD_HC_TTL,
                                       A.DIS_HC_TTL,
                                       A.PRE_HC_TTL,
                                       A.LOD_45_TTL,
                                       A.DIS_45_TTL,
                                       A.PRE_45_TTL,
                                       
                                       --20131115
                                       A.LOD_D2_TTL,
                                       A.DIS_D2_TTL,
                                       A.PRE_D2_TTL,
                                       A.LOD_D4_TTL,
                                       A.DIS_D4_TTL,
                                       A.PRE_D4_TTL,
                                       A.LOD_D5_TTL,
                                       A.DIS_D5_TTL,
                                       A.PRE_D5_TTL,
                                       A.LOD_D7_TTL,
                                       A.DIS_D7_TTL,
                                       A.PRE_D7_TTL,
                                       A.LOD_R2_TTL,
                                       A.DIS_R2_TTL,
                                       A.PRE_R2_TTL,
                                       A.LOD_R5_TTL,
                                       A.DIS_R5_TTL,
                                       A.PRE_R5_TTL,
                                       A.LOD_R9_TTL,
                                       A.DIS_R9_TTL,
                                       A.PRE_R9_TTL,
                                       A.LOD_O2_TTL,
                                       A.DIS_O2_TTL,
                                       A.PRE_O2_TTL,
                                       A.LOD_O4_TTL,
                                       A.DIS_O4_TTL,
                                       A.PRE_O4_TTL,
                                       A.LOD_S2_TTL,
                                       A.DIS_S2_TTL,
                                       A.PRE_S2_TTL,
                                       A.LOD_S4_TTL,
                                       A.DIS_S4_TTL,
                                       A.PRE_S4_TTL,
                                       A.LOD_F2_TTL,
                                       A.DIS_F2_TTL,
                                       A.PRE_F2_TTL,
                                       A.LOD_F4_TTL,
                                       A.DIS_F4_TTL,
                                       A.PRE_F4_TTL,
                                       A.LOD_F5_TTL,
                                       A.DIS_F5_TTL,
                                       A.PRE_F5_TTL,
                                       A.LOD_A2_TTL,
                                       A.DIS_A2_TTL,
                                       A.PRE_A2_TTL,
                                       A.LOD_A4_TTL,
                                       A.DIS_A4_TTL,
                                       A.PRE_A4_TTL,
                                       A.LOD_A5_TTL,
                                       A.DIS_A5_TTL,
                                       A.PRE_A5_TTL,
                                       
                                       A.TP
                                  FROM (    
                                        SELECT A.SRC,
                                               A.PAST,
                                               Q.SEQ,
                                               DECODE(T.SEQ, 2, 5, A.IOC_CD)                        AS IOC_CD ,
                                               DECODE(Q.SEQ, 1, A.POL_CD, A.POD_CD)                 AS PORT_CD,
                                               DECODE(Q.SEQ, 1, A.POL_SEQ, A.POD_SEQ)              AS PORT_SEQ,
                                               DECODE(Q.SEQ, 1, A.POL_CLPT_IND_SEQ1, A.POD_CLPT_IND_SEQ1)              AS CLPT_IND_SEQ,
                                               DECODE(Q.SEQ, 1, A.QTY_TTL, 0)                       AS LOD_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_TTL), 0) AS DIS_TTL,
                                               DECODE(A.TP, '1', A.QTY_TTL, 0)                      AS PRE_TTL,
                                               
                                               DECODE(Q.SEQ, 1, A.QTY_HC_TTL, 0)                       AS LOD_HC_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_HC_TTL), 0) AS DIS_HC_TTL,
                                               DECODE(A.TP, '1', A.QTY_HC_TTL, 0)                      AS PRE_HC_TTL,
                                               
                                               DECODE(Q.SEQ, 1, A.QTY_45_TTL, 0)                       AS LOD_45_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_45_TTL), 0) AS DIS_45_TTL,
                                               DECODE(A.TP, '1', A.QTY_45_TTL, 0)                      AS PRE_45_TTL,                                               
                                               
                                               
                                               --20131115
                                               DECODE(Q.SEQ, 1, A.QTY_D2, 0)                       AS LOD_D2_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_D2), 0) AS DIS_D2_TTL,
                                               DECODE(A.TP, '1', A.QTY_D2, 0)                      AS PRE_D2_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_D4, 0)                       AS LOD_D4_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_D4), 0) AS DIS_D4_TTL,
                                               DECODE(A.TP, '1', A.QTY_D4, 0)                      AS PRE_D4_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_D5, 0)                       AS LOD_D5_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_D5), 0) AS DIS_D5_TTL,
                                               DECODE(A.TP, '1', A.QTY_D5, 0)                      AS PRE_D5_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_D7, 0)                       AS LOD_D7_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_D7), 0) AS DIS_D7_TTL,
                                               DECODE(A.TP, '1', A.QTY_D7, 0)                      AS PRE_D7_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_R2, 0)                       AS LOD_R2_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_R2), 0) AS DIS_R2_TTL,
                                               DECODE(A.TP, '1', A.QTY_R2, 0)                      AS PRE_R2_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_R5, 0)                       AS LOD_R5_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_R5), 0) AS DIS_R5_TTL,
                                               DECODE(A.TP, '1', A.QTY_R5, 0)                      AS PRE_R5_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_R9, 0)                       AS LOD_R9_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_R9), 0) AS DIS_R9_TTL,
                                               DECODE(A.TP, '1', A.QTY_R9, 0)                      AS PRE_R9_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_O2, 0)                       AS LOD_O2_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_O2), 0) AS DIS_O2_TTL,
                                               DECODE(A.TP, '1', A.QTY_O2, 0)                      AS PRE_O2_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_O4, 0)                       AS LOD_O4_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_O4), 0) AS DIS_O4_TTL,
                                               DECODE(A.TP, '1', A.QTY_O4, 0)                      AS PRE_O4_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_S2, 0)                       AS LOD_S2_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_S2), 0) AS DIS_S2_TTL,
                                               DECODE(A.TP, '1', A.QTY_S2, 0)                      AS PRE_S2_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_S4, 0)                       AS LOD_S4_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_S4), 0) AS DIS_S4_TTL,
                                               DECODE(A.TP, '1', A.QTY_S4, 0)                      AS PRE_S4_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_F2, 0)                       AS LOD_F2_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_F2), 0) AS DIS_F2_TTL,
                                               DECODE(A.TP, '1', A.QTY_F2, 0)                      AS PRE_F2_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_F4, 0)                       AS LOD_F4_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_F4), 0) AS DIS_F4_TTL,
                                               DECODE(A.TP, '1', A.QTY_F4, 0)                      AS PRE_F4_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_F5, 0)                       AS LOD_F5_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_F5), 0) AS DIS_F5_TTL,
                                               DECODE(A.TP, '1', A.QTY_F5, 0)                      AS PRE_F5_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_A2, 0)                       AS LOD_A2_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_A2), 0) AS DIS_A2_TTL,
                                               DECODE(A.TP, '1', A.QTY_A2, 0)                      AS PRE_A2_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_A4, 0)                       AS LOD_A4_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_A4), 0) AS DIS_A4_TTL,
                                               DECODE(A.TP, '1', A.QTY_A4, 0)                      AS PRE_A4_TTL,
                                               DECODE(Q.SEQ, 1, A.QTY_A5, 0)                       AS LOD_A5_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_A5), 0) AS DIS_A5_TTL,
                                               DECODE(A.TP, '1', A.QTY_A5, 0)                      AS PRE_A5_TTL,
                                               
                                               A.TP,
                                               '' AS T
                                          FROM ALL_DATA A,
                                               COPY     Q,
                                               COPY     T
                                         WHERE Q.SEQ IN (DECODE(A.TP, 1, '2', 2, '1'), DECODE(A.TP, 3, '1', 2, '2'))
                                           AND T.SEQ <= 2
                                           AND DECODE(A.SRC, 4, A.IOC_CD, 1) <> DECODE(A.SRC, 4, 4, 0)
                                       ) A
                             ) Z,
                             PORT_MAP M
                       WHERE Z.SRC    (+) = M.SRC
--                         AND Z.TP     (+) = M.FLG
                         AND Z.IOC_CD (+) = M.IOC_CD
                         AND Z.PORT_CD(+) = NVL(M.YD_CD, M.PORT_CD)
                         AND Z.CLPT_IND_SEQ(+) = M.CLPT_IND_SEQ
                    GROUP BY GROUPING SETS (
                                             (M.SRC, M.IOC_CD, M.CLPT_SEQ, NVL(M.YD_CD, M.PORT_CD), M.FLG, Z.PAST, M.BSA),
                                             (M.SRC, M.IOC_CD)
                                           )
                    ORDER BY M.SRC   ,
                             M.IOC_CD,
                             NVL(M.CLPT_SEQ, 0)
                   ) Z
         ) Z,
         PARAMS PS
   WHERE PORT_SEQ > 0
     AND DECODE(SRC, 4, IOC_CD, 1) <> DECODE(SRC, 4, 4, 0)
     AND SRC = '2'
ORDER BY Z.SRC     ,
         Z.PORT_SEQ,
         Z.IOC_CD
)
, EQR_SMY_01_TPSZ AS (
    SELECT 
    DISTINCT
    X.RLANE_CD, X.VSL_CD, X.SKD_VOY_NO, X.SKD_DIR_CD, X.PORT_CD, X.PORT_SEQ
    , SUM(X.VOID_TEU) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) VOID_TEU_TTL
    /** ONBOARD **/
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TEU
    , SUM(DECODE(X.IOC_CD,'MT',X.ON_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_TEU
    , SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_TEU
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_D2, SUM(DECODE(X.IOC_CD,'MT',X.ON_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_D2, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_D2_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_D2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_D4, SUM(DECODE(X.IOC_CD,'MT',X.ON_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_D4, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_D4_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_D4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_D5, SUM(DECODE(X.IOC_CD,'MT',X.ON_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_D5, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_D5_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_D5
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_D7, SUM(DECODE(X.IOC_CD,'MT',X.ON_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_D7, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_D7_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_D7
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_R2, SUM(DECODE(X.IOC_CD,'MT',X.ON_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_R2, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_R2_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_R2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_R5, SUM(DECODE(X.IOC_CD,'MT',X.ON_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_R5, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_R5_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_R5
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_R9, SUM(DECODE(X.IOC_CD,'MT',X.ON_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_R9, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_R9_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_R9
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_O2, SUM(DECODE(X.IOC_CD,'MT',X.ON_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_O2, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_O2_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_O2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_O4, SUM(DECODE(X.IOC_CD,'MT',X.ON_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_O4, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_O4_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_O4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_S2, SUM(DECODE(X.IOC_CD,'MT',X.ON_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_S2, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_S2_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_S2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_S4, SUM(DECODE(X.IOC_CD,'MT',X.ON_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_S4, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_S4_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_S4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_F2, SUM(DECODE(X.IOC_CD,'MT',X.ON_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_F2, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_F2_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_F2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_F4, SUM(DECODE(X.IOC_CD,'MT',X.ON_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_F4, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_F4_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_F4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_F5, SUM(DECODE(X.IOC_CD,'MT',X.ON_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_F5, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_F5_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_F5
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_A2, SUM(DECODE(X.IOC_CD,'MT',X.ON_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_A2, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_A2_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_A2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_A4, SUM(DECODE(X.IOC_CD,'MT',X.ON_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_A4, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_A4_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_A4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.ON_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_TTL_A5, SUM(DECODE(X.IOC_CD,'MT',X.ON_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_MT_A5, SUM(DECODE(X.IOC_CD,'MT',0,'TOTAL',0,X.ON_A5_TTL)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) ON_SUM_FL_A5
    /** FULL EXPORT **/
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TEU
    , SUM(DECODE(X.IOC_CD,'OCN',X.LOD_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_TEU
    , SUM(DECODE(X.IOC_CD,'IPC',X.LOD_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_TEU
    , SUM(DECODE(X.IOC_CD,'T/S',X.LOD_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_TEU
    , SUM(DECODE(X.IOC_CD,'MT',X.LOD_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_TEU
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_D2, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_D2, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_D2, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_D2, SUM(DECODE(X.IOC_CD,'MT',X.LOD_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_D2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_D4, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_D4, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_D4, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_D4, SUM(DECODE(X.IOC_CD,'MT',X.LOD_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_D4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_D5, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_D5, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_D5, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_D5, SUM(DECODE(X.IOC_CD,'MT',X.LOD_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_D5
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_D7, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_D7, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_D7, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_D7, SUM(DECODE(X.IOC_CD,'MT',X.LOD_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_D7
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_R2, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_R2, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_R2, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_R2, SUM(DECODE(X.IOC_CD,'MT',X.LOD_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_R2                                                                                        
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_R5, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_R5, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_R5, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_R5, SUM(DECODE(X.IOC_CD,'MT',X.LOD_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_R5
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_R9, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_R9, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_R9, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_R9, SUM(DECODE(X.IOC_CD,'MT',X.LOD_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_R9
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_O2, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_O2, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_O2, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_O2, SUM(DECODE(X.IOC_CD,'MT',X.LOD_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_O2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_O4, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_O4, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_O4, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_O4, SUM(DECODE(X.IOC_CD,'MT',X.LOD_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_O4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_S2, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_S2, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_S2, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_S2, SUM(DECODE(X.IOC_CD,'MT',X.LOD_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_S2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_S4, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_S4, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_S4, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_S4, SUM(DECODE(X.IOC_CD,'MT',X.LOD_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_S4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_F2, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_F2, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_F2, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_F2, SUM(DECODE(X.IOC_CD,'MT',X.LOD_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_F2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_F4, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_F4, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_F4, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_F4, SUM(DECODE(X.IOC_CD,'MT',X.LOD_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_F4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_F5, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_F5, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_F5, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_F5, SUM(DECODE(X.IOC_CD,'MT',X.LOD_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_F5
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_A2, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_A2, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_A2, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_A2, SUM(DECODE(X.IOC_CD,'MT',X.LOD_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_A2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_A4, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_A4, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_A4, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_A4, SUM(DECODE(X.IOC_CD,'MT',X.LOD_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_A4    
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.LOD_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TTL_A5, SUM(DECODE(X.IOC_CD,'OCN',X.LOD_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_OCN_A5, SUM(DECODE(X.IOC_CD,'IPC',X.LOD_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_IPC_A5, SUM(DECODE(X.IOC_CD,'T/S',X.LOD_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_TS_A5, SUM(DECODE(X.IOC_CD,'MT',X.LOD_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLEX_SUM_MT_A5    
    /** FULL IMPORT **/
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TEU
    , SUM(DECODE(X.IOC_CD,'OCN',X.DIS_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_TEU
    , SUM(DECODE(X.IOC_CD,'IPC',X.DIS_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_TEU
    , SUM(DECODE(X.IOC_CD,'T/S',X.DIS_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_TEU
    , SUM(DECODE(X.IOC_CD,'MT',X.DIS_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_TEU
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_D2, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_D2, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_D2, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_D2, SUM(DECODE(X.IOC_CD,'MT',X.DIS_D2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_D2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_D4, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_D4, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_D4, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_D4, SUM(DECODE(X.IOC_CD,'MT',X.DIS_D4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_D4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_D5, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_D5, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_D5, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_D5, SUM(DECODE(X.IOC_CD,'MT',X.DIS_D5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_D5
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_D7, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_D7, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_D7, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_D7, SUM(DECODE(X.IOC_CD,'MT',X.DIS_D7_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_D7
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_R2, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_R2, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_R2, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_R2, SUM(DECODE(X.IOC_CD,'MT',X.DIS_R2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_R2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_R5, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_R5, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_R5, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_R5, SUM(DECODE(X.IOC_CD,'MT',X.DIS_R5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_R5
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_R9, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_R9, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_R9, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_R9, SUM(DECODE(X.IOC_CD,'MT',X.DIS_R9_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_R9
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_O2, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_O2, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_O2, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_O2, SUM(DECODE(X.IOC_CD,'MT',X.DIS_O2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_O2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_O4, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_O4, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_O4, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_O4, SUM(DECODE(X.IOC_CD,'MT',X.DIS_O4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_O4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_S2, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_S2, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_S2, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_S2, SUM(DECODE(X.IOC_CD,'MT',X.DIS_S2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_S2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_S4, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_S4, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_S4, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_S4, SUM(DECODE(X.IOC_CD,'MT',X.DIS_S4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_S4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_F2, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_F2, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_F2, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_F2, SUM(DECODE(X.IOC_CD,'MT',X.DIS_F2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_F2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_F4, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_F4, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_F4, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_F4, SUM(DECODE(X.IOC_CD,'MT',X.DIS_F4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_F4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_F5, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_F5, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_F5, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_F5, SUM(DECODE(X.IOC_CD,'MT',X.DIS_F5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_F5
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_A2, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_A2, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_A2, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_A2, SUM(DECODE(X.IOC_CD,'MT',X.DIS_A2_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_A2
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_A4, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_A4, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_A4, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_A4, SUM(DECODE(X.IOC_CD,'MT',X.DIS_A4_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_A4
    , SUM(DECODE(X.IOC_CD,'TOTAL',X.DIS_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TTL_A5, SUM(DECODE(X.IOC_CD,'OCN',X.DIS_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_OCN_A5, SUM(DECODE(X.IOC_CD,'IPC',X.DIS_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_IPC_A5, SUM(DECODE(X.IOC_CD,'T/S',X.DIS_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_TS_A5, SUM(DECODE(X.IOC_CD,'MT',X.DIS_A5_TTL,0)) OVER (PARTITION BY X.PORT_CD, X.PORT_SEQ) FLIM_SUM_MT_A5
    FROM SPC_BTLNK_TPSZ X    
    ORDER BY X.RLANE_CD, X.VSL_CD, X.SKD_VOY_NO, X.SKD_DIR_CD, X.PORT_SEQ, X.PORT_CD
)
, BSA_DATA_TPSZ AS (
    SELECT 
        X.RLANE_CD, X.VSL_CD, X.SKD_VOY_NO, X.SKD_DIR_CD, X.PORT_CD, X.PORT_SEQ, X.TTL_TEU, X.TTL_WT
        , NVL((
            SELECT
            MAX(S.ALOC_HC_BZC_BX_QTY)
            FROM SPC_LANE_RGST S
            WHERE S.REP_TRD_CD = @[trade]
            AND S.SUB_TRD_CD = @[subtrade]
            AND S.RLANE_CD = @[rlane]
            AND S.DIR_CD = SUBSTR(@[s_vvd_cd],9)
            AND @[s_eta_dt] BETWEEN S.EFF_FM_DT AND S.EFF_TO_DT
            AND S.BSA_CAPA = (
                SELECT 
                    NVL(SUM(DECODE(D.CRR_CD, 'SML', D.CRR_BSA_CAPA)),0) FNL_HJS_BSA_CAPA
                FROM BSA_VVD_MST C, BSA_VVD_OTR_CRR D
                WHERE 1=1
                    AND C.TRD_CD     = D.TRD_CD(+) 
                    AND C.RLANE_CD   = D.RLANE_CD(+) 
                    AND C.VSL_CD     = D.VSL_CD(+) 
                    AND C.SKD_VOY_NO = D.SKD_VOY_NO(+) 
                    AND C.SKD_DIR_CD = D.SKD_DIR_CD(+) 
                    AND D.BSA_OP_JB_CD(+) = '007'
                    AND C.TRD_CD = @[trade]
                    AND C.RLANE_CD = @[rlane]
                    AND C.VSL_CD = SUBSTR(@[s_vvd_cd],1,4)
                    AND C.SKD_VOY_NO = SUBSTR(@[s_vvd_cd],5,4)
                    AND C.SKD_DIR_CD = SUBSTR(@[s_vvd_cd],9)
                GROUP BY C.TRD_CD, C.RLANE_CD, DECODE(C.BSA_OP_CD, 'J', 'JO', 'SC')
                        , C.VSL_CD, C.SKD_VOY_NO, C.SKD_DIR_CD, C.VOP_CD, C.CRR_CD
                        , C.BSA_CAPA, C.N2ND_FNL_HJS_BSA_CAPA, C.SPC_OTR_SWAP_FLG
                        , C.IOC_CD, C.BSA_OP_CD, C.N1ST_PORT_ETD_DT 
                )
            ),0) TTL_HC
        , NVL((
            SELECT
            MAX(S.ALOC_45FT_BZC_BX_QTY)
            FROM SPC_LANE_RGST S
            WHERE S.REP_TRD_CD = @[trade]
            AND S.SUB_TRD_CD = @[subtrade]
            AND S.RLANE_CD = @[rlane]
            AND S.DIR_CD = SUBSTR(@[s_vvd_cd],9)
            AND @[s_eta_dt] BETWEEN S.EFF_FM_DT AND S.EFF_TO_DT
            AND S.BSA_CAPA = (
                SELECT 
                    NVL(SUM(DECODE(D.CRR_CD, 'SML', D.CRR_BSA_CAPA)),0) FNL_HJS_BSA_CAPA
                FROM BSA_VVD_MST C, BSA_VVD_OTR_CRR D
                WHERE 1=1
                    AND C.TRD_CD     = D.TRD_CD(+) 
                    AND C.RLANE_CD   = D.RLANE_CD(+) 
                    AND C.VSL_CD     = D.VSL_CD(+) 
                    AND C.SKD_VOY_NO = D.SKD_VOY_NO(+) 
                    AND C.SKD_DIR_CD = D.SKD_DIR_CD(+) 
                    AND D.BSA_OP_JB_CD(+) = '007'
                    AND C.TRD_CD = @[trade]
                    AND C.RLANE_CD = @[rlane]
                    AND C.VSL_CD = SUBSTR(@[s_vvd_cd],1,4)
                    AND C.SKD_VOY_NO = SUBSTR(@[s_vvd_cd],5,4)
                    AND C.SKD_DIR_CD = SUBSTR(@[s_vvd_cd],9)
                GROUP BY C.TRD_CD, C.RLANE_CD, DECODE(C.BSA_OP_CD, 'J', 'JO', 'SC')
                        , C.VSL_CD, C.SKD_VOY_NO, C.SKD_DIR_CD, C.VOP_CD, C.CRR_CD
                        , C.BSA_CAPA, C.N2ND_FNL_HJS_BSA_CAPA, C.SPC_OTR_SWAP_FLG
                        , C.IOC_CD, C.BSA_OP_CD, C.N1ST_PORT_ETD_DT 
                )
            ),0) TTL_45
    FROM (
        SELECT 
            P.RLANE_CD, P.VSL_CD, P.SKD_VOY_NO, P.SKD_DIR_CD, P.YD_CD PORT_CD, P.CLPT_SEQ PORT_SEQ
            , NVL(SUM(DECODE(X.BSA_OP_JB_CD,'007',X.BSA_VAL,0)),0) + NVL(SUM(DECODE(X.BSA_OP_JB_CD,'007',X.FREE_ADD_TEU_CAPA,0)),0) TTL_TEU
            ,(
                 SELECT (
                          SELECT NVL(MAX(DECODE(B.STUP_FLG, 'Y', DECODE(A.PORT_BSA_CAPA, 0, NULL, A.PORT_BSA_CAPA))), C.CRR_BSA_CAPA) BSA
                            FROM BSA_VVD_PORT_DWN A,
                                 MAS_LANE_RGST    B
                           WHERE B.RLANE_CD        = C.RLANE_CD
                             AND B.TRD_CD          = C.TRD_CD
                             AND B.DIR_CD          = C.SKD_DIR_CD
                             AND A.TRD_CD      (+) = C.TRD_CD
                             AND A.RLANE_CD    (+) = C.RLANE_CD
                             AND A.VSL_CD      (+) = C.VSL_CD
                             AND A.SKD_VOY_NO  (+) = C.SKD_VOY_NO
                             AND A.SKD_DIR_CD  (+) = C.SKD_DIR_CD
                             AND A.BSA_OP_JB_CD(+) = DECODE('2', '1', '007', '016')
                             AND A.CRR_CD      (+) = C.CRR_CD
                             AND A.PORT_CD     (+) = P.YD_CD 
                             AND ROWNUM = 1
                       ) AS BSA
                  FROM BSA_VVD_OTR_CRR C
                 WHERE C.RLANE_CD     = @[rlane] 
                   AND C.VSL_CD       = SUBSTR(@[s_vvd_cd],1,4)
                   AND C.SKD_VOY_NO   = SUBSTR(@[s_vvd_cd],5,4)
                   AND C.SKD_DIR_CD   = SUBSTR(@[s_vvd_cd],9)
                   AND C.BSA_OP_JB_CD = DECODE('2', '1', '007', '009')
                   AND C.CRR_CD       = 'SML'    
                   AND ROWNUM = 1
            ) TTL_WT
        FROM (
            SELECT 
            C.TRD_CD, C.RLANE_CD, C.VSL_CD, C.SKD_VOY_NO, C.SKD_DIR_CD, C.REV_PORT_CD, D.BSA_OP_JB_CD
            ,NVL(C.N2ND_FNL_HJS_BSA_CAPA,NVL(C.BSA_CAPA,0)) BSA_VAL
            ,NVL(MAX(F.FREE_ADD_TEU_CAPA),0) FREE_ADD_TEU_CAPA
            FROM PARAMS P, BSA_VVD_MST C, BSA_VVD_OTR_CRR D, BSA_VVD_SWAP_INFO F 
            WHERE 1=1
            AND C.VSL_CD        = P.VSL_CD
            AND C.SKD_VOY_NO    = P.SKD_VOY_NO
            AND C.SKD_DIR_CD    = P.SKD_DIR_CD
            AND C.RLANE_CD      = P.RLANE_CD
            AND C.TRD_CD     = D.TRD_CD(+) 
            AND C.RLANE_CD   = D.RLANE_CD(+) 
            AND C.VSL_CD     = D.VSL_CD(+) 
            AND C.SKD_VOY_NO = D.SKD_VOY_NO(+) 
            AND C.SKD_DIR_CD = D.SKD_DIR_CD(+) 
            AND D.TRD_CD     = F.TRD_CD(+) 
            AND D.RLANE_CD   = F.RLANE_CD(+) 
            AND D.VSL_CD     = F.VSL_CD(+) 
            AND D.SKD_VOY_NO = F.SKD_VOY_NO(+) 
            AND D.SKD_DIR_CD = F.SKD_DIR_CD(+) 
            AND D.BSA_OP_JB_CD= F.BSA_OP_JB_CD(+) 
            AND D.CRR_CD      = F.CRR_CD(+) 
            GROUP BY C.TRD_CD, C.RLANE_CD, C.VSL_CD, C.SKD_VOY_NO, C.SKD_DIR_CD, C.REV_PORT_CD, D.BSA_OP_JB_CD, C.BSA_CAPA, C.N2ND_FNL_HJS_BSA_CAPA
            ) X, CUR_PORTS P
        WHERE 1=1
        AND X.VSL_CD(+) = P.VSL_CD
        AND X.SKD_VOY_NO(+) = P.SKD_VOY_NO
        AND X.SKD_DIR_CD(+) = P.SKD_DIR_CD
        GROUP BY P.RLANE_CD, P.VSL_CD, P.SKD_VOY_NO, P.SKD_DIR_CD, P.YD_CD, P.CLPT_SEQ
    ) X
)

/** Yard Mt Plan 시작 **/
, DUMMY_HEAD AS (
    SELECT DISTINCT 
           B.TRD_CD
          ,B.SUB_TRD_CD
          ,B.RLANE_CD
          ,A.SLAN_CD
          ,SUBSTR(A.SLS_YRMON, 0, 4)||A.COST_WK WEEK
          ,A.VSL_CD||A.SKD_VOY_NO||A.DIR_CD VVD 
          ,A.VSL_CD
          ,A.SKD_VOY_NO
          ,A.DIR_CD
          ,D.YD_CD 
          ,D.VPS_PORT_CD
          ,D.CLPT_SEQ
          ,D.CLPT_IND_SEQ
          ,B.FM_CONTI_CD 
          ,E.CONTI_CD
          ,D.VPS_ETA_DT
          ,D.VPS_ETB_DT 
          ,D.VPS_ETD_DT
    FROM MAS_MON_VVD A
        ,MDM_DTL_REV_LANE B
        ,VSK_VSL_PORT_SKD D
        ,MDM_LOCATION E
        ,MDM_REV_LANE F
    WHERE A.RLANE_CD   = B.RLANE_CD
    AND   A.DIR_CD     = B.VSL_SLAN_DIR_CD
    AND   A.IOC_CD     = B.IOC_CD   
    AND   A.VSL_CD     = D.VSL_CD
    AND   A.SKD_VOY_NO = D.SKD_VOY_NO
    AND   A.DIR_CD     = D.SKD_DIR_CD 
    AND   D.VPS_PORT_CD= E.LOC_CD
    AND   SUBSTR(B.RLANE_CD,0,3) = D.SLAN_CD
    AND   B.FM_CONTI_CD= E.CONTI_CD  -- VSK SKD
    AND   B.RLANE_CD   = F.RLANE_CD
    AND   B.TRD_CD     = F.REP_TRD_CD
    AND   A.DELT_FLG = 'N'
    AND   B.DELT_FLG = 'N'
    AND   F.DELT_FLG = 'N'
    AND   NVL(D.VPS_PORT_CD, ' ') NOT IN ('PAPAC', 'EGSUZ')
    AND (
            B.TRD_CD = 'IAS'
            OR
           (B.TRD_CD <> 'IAS' AND E.CONTI_CD <> 'A')
        )   
    AND   A.VSL_CD     = SUBSTR(@[s_vvd_cd], 0, 4)
    AND   A.SKD_VOY_NO = SUBSTR(@[s_vvd_cd], 5, 4)
    AND   A.DIR_CD     = SUBSTR(@[s_vvd_cd], 9, 1)
    ORDER BY 1,2,3,4,CLPT_SEQ
)
, DUMMY_PLAN AS (
    SELECT SUB_TRD_CD
          ,VSL_LANE_CD
          ,VSL_CD
          ,SKD_VOY_NO
          ,SKD_DIR_CD
          ,POL_YD_CD
          ,FCBF_DT
          ,TEU_QTY
          ,TON_WGT
          ,TYPE1
          ,TYPE2
          ,PLN_RSN_RMK
          ,NVL(SUM(CNTR_QTY), 0) QTY_BOX

          ,1 CLPT_IND_SEQ                                                                
    FROM
    (
        SELECT A.TRD_CD
              ,A.SUB_TRD_CD
              ,A.VSL_LANE_CD
              ,A.VSL_CD
              ,A.SKD_VOY_NO
              ,A.SKD_DIR_CD
              ,A.POL_YD_CD 
              ,TO_CHAR(A.FNL_CBF_DT, 'YYYY-MM-DD') FCBF_DT
              ,A.MTY_LODG_PLN_TEU_QTY TEU_QTY
              ,A.MTY_LODG_PLN_TON_WGT TON_WGT
              ,D.PLN_RSN_HDR_NM TYPE1
              ,E.PLN_RSN_SUB_NM TYPE2
              ,PLN_RSN_RMK      
              ,C.CNTR_TPSZ_CD TPSZ_CD
              ,C.CNTR_QTY
        FROM EQR_CTRL_MTY_LODG_PLN A
            ,EQR_CTRL_MTY_DCHG_PLN B
            ,EQR_CTRL_MTY_DCHG_PLN_QTY C
            ,EQR_CTRL_PLN_RSN_HDR D
            ,EQR_CTRL_PLN_RSN_SUB E
            ,DUMMY_HEAD Z
        WHERE A.VSL_CD     = B.VSL_CD
        AND   A.SKD_VOY_NO = B.SKD_VOY_NO    
        AND   A.SKD_DIR_CD = B.SKD_DIR_CD
        AND   A.POL_YD_CD  = B.POL_YD_CD
        AND   B.VSL_CD     = C.VSL_CD
        AND   B.SKD_VOY_NO = C.SKD_VOY_NO
        AND   B.SKD_DIR_CD = C.SKD_DIR_CD
        AND   B.POL_YD_CD  = C.POL_YD_CD
        AND   B.POD_YD_CD  = C.POD_YD_CD
        AND   A.PLN_RSN_HDR_CD = D.PLN_RSN_HDR_CD(+)
        AND   A.PLN_RSN_HDR_CD = E.PLN_RSN_HDR_CD(+)
        AND   A.PLN_RSN_SUB_CD = E.PLN_RSN_SUB_CD(+)
        AND   A.SUB_TRD_CD = Z.SUB_TRD_CD
        AND   A.VSL_LANE_CD= Z.SLAN_CD
        AND   A.VSL_CD     = Z.VSL_CD
        AND   A.SKD_VOY_NO = Z.SKD_VOY_NO
        AND   A.SKD_DIR_CD = Z.DIR_CD  
        AND   A.POL_YD_CD  = Z.YD_CD
        AND   Z.CLPT_IND_SEQ = 1
    )
    GROUP BY SUB_TRD_CD
            ,VSL_LANE_CD
            ,VSL_CD
            ,SKD_VOY_NO
            ,SKD_DIR_CD
            ,POL_YD_CD
            ,FCBF_DT
            ,TEU_QTY
            ,TON_WGT
            ,TYPE1
            ,TYPE2
            ,PLN_RSN_RMK
) 
, TREND_PORT_DATA AS (
    SELECT A.TRD_CD
          ,A.SUB_TRD_CD
          ,A.SLAN_CD
          ,A.SLAN_CD||SUBSTR(A.TRD_CD,1,2) RLANE_CD
          ,A.WEEK
          ,A.VSL_CD
          ,A.SKD_VOY_NO
          ,A.DIR_CD SKD_DIR_CD
          ,A.YD_CD PORT_CD
          ,A.CLPT_SEQ PORT_SEQ
          ,TO_CHAR(A.VPS_ETA_DT, 'YYYY-MM-DD HH24:MM') VPS_ETA_DT
          ,TO_CHAR(A.VPS_ETD_DT, 'YYYY-MM-DD HH24:MM') VPS_ETD_DT 
          ,B.FCBF_DT
          ,NVL(B.TEU_QTY,0) P_TEU
          ,NVL(B.QTY_BOX,0) P_BOX            
          ,NVL(B.TON_WGT,0) P_WGT
    FROM DUMMY_HEAD      A
        ,DUMMY_PLAN      B
    WHERE A.VSL_CD     = B.VSL_CD(+)
    AND   A.SKD_VOY_NO = B.SKD_VOY_NO(+)
    AND   A.DIR_CD     = B.SKD_DIR_CD(+)
    AND   A.YD_CD      = B.POL_YD_CD(+)
    AND   A.CLPT_IND_SEQ = B.CLPT_IND_SEQ(+)
    AND   A.VPS_ETA_DT BETWEEN TRUNC(SYSDATE) AND TRUNC(SYSDATE+7)
    ORDER BY SUB_TRD_CD, SLAN_CD, WEEK, VVD, CLPT_SEQ, YD_CD
)
/** Yard Mt Plan 끝 **/

, EQR_SMY_02_TPSZ AS (
    SELECT 
        /** 1. BSA조회 **/
        X.RLANE_CD, X.VSL_CD, X.SKD_VOY_NO, X.SKD_DIR_CD, X.PORT_CD, X.PORT_SEQ
        , 1 DP_SEQ, 1 SEQ, 'BSA' ITEM_TITLE, 'BSA' ITEM_TP_CD
        , X.TTL_TEU
        , TO_NUMBER(X.TTL_WT) TTL_WT
        , TO_NUMBER('') TTL_BOX
        , TO_NUMBER('') TTL_20
        , TO_NUMBER('') TTL_40
        , X.TTL_HC
        , X.TTL_45
        , TO_NUMBER('') BOX_D2
        , TO_NUMBER('') BOX_D4
        , TO_NUMBER('') BOX_D5
        , TO_NUMBER('') BOX_D7
        , TO_NUMBER('') BOX_R2
        , TO_NUMBER('') BOX_R5
        , TO_NUMBER('') BOX_R9
        , TO_NUMBER('') BOX_O2
        , TO_NUMBER('') BOX_O4
        , TO_NUMBER('') BOX_S2
        , TO_NUMBER('') BOX_S4
        , TO_NUMBER('') BOX_F2
        , TO_NUMBER('') BOX_F4
        , TO_NUMBER('') BOX_F5
        , TO_NUMBER('') BOX_A2
        , TO_NUMBER('') BOX_A4                
        , TO_NUMBER('') BOX_A5
    FROM BSA_DATA_TPSZ X
    UNION ALL
    SELECT 
        /** 2. L/F  **/
        T.RLANE_CD
        , T.VSL_CD
        , T.SKD_VOY_NO
        , T.SKD_DIR_CD
        , T.PORT_CD
        , T.PORT_SEQ
        , T.DP_SEQ
        , T.SEQ
        , T.ITEM_TITLE
        , T.ITEM_TP_CD
        ,
        CASE 
        WHEN NVL((SELECT B.TTL_TEU FROM BSA_DATA_TPSZ B WHERE ROWNUM=1),1) <> 0 
        THEN TRUNC(T.TTL_TEU / NVL((SELECT B.TTL_TEU FROM BSA_DATA_TPSZ B WHERE ROWNUM=1),1) * 100,2)
        ELSE 0
        END TTL_TEU
        , TO_NUMBER('') TTL_WT
        , TO_NUMBER('') TTL_BOX
        , TO_NUMBER('') TTL_20
        , TO_NUMBER('') TTL_40
        , TO_NUMBER('') TTL_HC
        , TO_NUMBER('') TTL_45
        , TO_NUMBER('') BOX_D2
        , TO_NUMBER('') BOX_D4
        , TO_NUMBER('') BOX_D5
        , TO_NUMBER('') BOX_D7
        , TO_NUMBER('') BOX_R2
        , TO_NUMBER('') BOX_R5
        , TO_NUMBER('') BOX_R9
        , TO_NUMBER('') BOX_O2
        , TO_NUMBER('') BOX_O4
        , TO_NUMBER('') BOX_S2
        , TO_NUMBER('') BOX_S4
        , TO_NUMBER('') BOX_F2
        , TO_NUMBER('') BOX_F4
        , TO_NUMBER('') BOX_F5
        , TO_NUMBER('') BOX_A2
        , TO_NUMBER('') BOX_A4 
        , TO_NUMBER('') BOX_A5
    FROM (
        SELECT 
        E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_CD, E1.PORT_SEQ
        , 2 DP_SEQ
        , T.SEQ
        , 'L/F' ITEM_TITLE
        , DECODE(T.SEQ,'1','TTL','2','FULL','3','MT','') ITEM_TP_CD
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TEU,'2',E1.ON_SUM_FL_TEU,'3',E1.ON_SUM_MT_TEU,0)) TTL_TEU
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_D2,'2',E1.ON_SUM_FL_D2,'3',E1.ON_SUM_MT_D2,0)) BOX_D2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_D4,'2',E1.ON_SUM_FL_D4,'3',E1.ON_SUM_MT_D4,0)) BOX_D4
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_D5,'2',E1.ON_SUM_FL_D5,'3',E1.ON_SUM_MT_D5,0)) BOX_D5
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_D7,'2',E1.ON_SUM_FL_D7,'3',E1.ON_SUM_MT_D7,0)) BOX_D7
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_R2,'2',E1.ON_SUM_FL_R2,'3',E1.ON_SUM_MT_R2,0)) BOX_R2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_R5,'2',E1.ON_SUM_FL_R5,'3',E1.ON_SUM_MT_R5,0)) BOX_R5
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_R9,'2',E1.ON_SUM_FL_R9,'3',E1.ON_SUM_MT_R9,0)) BOX_R9
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_O2,'2',E1.ON_SUM_FL_O2,'3',E1.ON_SUM_MT_O2,0)) BOX_O2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_O4,'2',E1.ON_SUM_FL_O4,'3',E1.ON_SUM_MT_O4,0)) BOX_O4
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_S2,'2',E1.ON_SUM_FL_S2,'3',E1.ON_SUM_MT_S2,0)) BOX_S2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_S4,'2',E1.ON_SUM_FL_S4,'3',E1.ON_SUM_MT_S4,0)) BOX_S4
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_F2,'2',E1.ON_SUM_FL_F2,'3',E1.ON_SUM_MT_F2,0)) BOX_F2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_F4,'2',E1.ON_SUM_FL_F4,'3',E1.ON_SUM_MT_F4,0)) BOX_F4
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_F5,'2',E1.ON_SUM_FL_F5,'3',E1.ON_SUM_MT_F5,0)) BOX_F5
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_A2,'2',E1.ON_SUM_FL_A2,'3',E1.ON_SUM_MT_A2,0)) BOX_A2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_A4,'2',E1.ON_SUM_FL_A4,'3',E1.ON_SUM_MT_A4,0)) BOX_A4
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_A5,'2',E1.ON_SUM_FL_A5,'3',E1.ON_SUM_MT_A5,0)) BOX_A5
        FROM EQR_SMY_01_TPSZ E1, COPY T
        WHERE T.SEQ <= 3
        GROUP BY T.SEQ, E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_CD, E1.PORT_SEQ
        ) T
    UNION ALL
    SELECT 
        T.RLANE_CD
        , T.VSL_CD
        , T.SKD_VOY_NO
        , T.SKD_DIR_CD
        , T.PORT_CD
        , T.PORT_SEQ
        , T.DP_SEQ
        , T.SEQ
        , T.ITEM_TITLE
        , T.ITEM_TP_CD
        , T.TTL_TEU
        , TO_NUMBER('') TTL_WT
        , (T.BOX_D2 + T.BOX_R2 + T.BOX_O2 + T.BOX_S2 + T.BOX_F2 + T.BOX_A2 + T.BOX_D4 + T.BOX_O4 + T.BOX_S4 + T.BOX_F4 + T.BOX_A4 + T.BOX_A5 + T.BOX_D5 + T.BOX_F5 + T.BOX_R5 + T.BOX_D7 + T.BOX_R9) TTL_BOX
        , (T.BOX_D2 + T.BOX_R2 + T.BOX_O2 + T.BOX_S2 + T.BOX_F2 + T.BOX_A2) TTL_20
        , (T.BOX_D4 + T.BOX_O4 + T.BOX_S4 + T.BOX_F4 + T.BOX_A4 + T.BOX_A5) TTL_40
        , (T.BOX_D5 + T.BOX_F5 + T.BOX_R5) TTL_HC
        , (T.BOX_D7 + T.BOX_R9) TTL_45
        , T.BOX_D2
        , T.BOX_D4
        , T.BOX_D5
        , T.BOX_D7
        , T.BOX_R2
        , T.BOX_R5
        , T.BOX_R9
        , T.BOX_O2
        , T.BOX_O4
        , T.BOX_S2
        , T.BOX_S4
        , T.BOX_F2
        , T.BOX_F4
        , T.BOX_F5
        , T.BOX_A2
        , T.BOX_A4
        , T.BOX_A5
    FROM (
        SELECT 
        /** 3. ONBOARD **/
        E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_CD, E1.PORT_SEQ
        , 3 DP_SEQ
        , T.SEQ
        , 'ONBOARD' ITEM_TITLE
        , DECODE(T.SEQ,'1','TTL','2','FULL','3','MT','') ITEM_TP_CD
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TEU,'2',E1.ON_SUM_FL_TEU,'3',E1.ON_SUM_MT_TEU,0)) TTL_TEU
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_D2,'2',E1.ON_SUM_FL_D2,'3',E1.ON_SUM_MT_D2,0)) BOX_D2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_D4,'2',E1.ON_SUM_FL_D4,'3',E1.ON_SUM_MT_D4,0)) BOX_D4
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_D5,'2',E1.ON_SUM_FL_D5,'3',E1.ON_SUM_MT_D5,0)) BOX_D5
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_D7,'2',E1.ON_SUM_FL_D7,'3',E1.ON_SUM_MT_D7,0)) BOX_D7
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_R2,'2',E1.ON_SUM_FL_R2,'3',E1.ON_SUM_MT_R2,0)) BOX_R2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_R5,'2',E1.ON_SUM_FL_R5,'3',E1.ON_SUM_MT_R5,0)) BOX_R5
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_R9,'2',E1.ON_SUM_FL_R9,'3',E1.ON_SUM_MT_R9,0)) BOX_R9
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_O2,'2',E1.ON_SUM_FL_O2,'3',E1.ON_SUM_MT_O2,0)) BOX_O2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_O4,'2',E1.ON_SUM_FL_O4,'3',E1.ON_SUM_MT_O4,0)) BOX_O4
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_S2,'2',E1.ON_SUM_FL_S2,'3',E1.ON_SUM_MT_S2,0)) BOX_S2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_S4,'2',E1.ON_SUM_FL_S4,'3',E1.ON_SUM_MT_S4,0)) BOX_S4
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_F2,'2',E1.ON_SUM_FL_F2,'3',E1.ON_SUM_MT_F2,0)) BOX_F2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_F4,'2',E1.ON_SUM_FL_F4,'3',E1.ON_SUM_MT_F4,0)) BOX_F4
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_F5,'2',E1.ON_SUM_FL_F5,'3',E1.ON_SUM_MT_F5,0)) BOX_F5
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_A2,'2',E1.ON_SUM_FL_A2,'3',E1.ON_SUM_MT_A2,0)) BOX_A2
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_A4,'2',E1.ON_SUM_FL_A4,'3',E1.ON_SUM_MT_A4,0)) BOX_A4
        , MAX(DECODE(T.SEQ,'1',E1.ON_SUM_TTL_A5,'2',E1.ON_SUM_FL_A5,'3',E1.ON_SUM_MT_A5,0)) BOX_A5
        FROM EQR_SMY_01_TPSZ E1, COPY T
        WHERE T.SEQ <= 3
        GROUP BY T.SEQ, E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_SEQ, E1.PORT_CD
        UNION ALL
        SELECT
        /** 4. FULL EXPORT **/
        E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_CD, E1.PORT_SEQ
        , 4 DP_SEQ
        , T.SEQ
        , 'FULL EXPORT' ITEM_TITLE
        , DECODE(T.SEQ,'1','TTL','2','OCN','3','IPC','4','T/S','') ITEM_TP_CD

        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TEU - FLEX_SUM_MT_TEU,'2',E1.FLEX_SUM_OCN_TEU,'3',E1.FLEX_SUM_IPC_TEU,'4',E1.FLEX_SUM_TS_TEU,0)) TTL_TEU
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_D2 - E1.FLEX_SUM_MT_D2,'2',E1.FLEX_SUM_OCN_D2,'3',E1.FLEX_SUM_IPC_D2,'4',E1.FLEX_SUM_TS_D2,0)) BOX_D2
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_D4 - E1.FLEX_SUM_MT_D4,'2',E1.FLEX_SUM_OCN_D4,'3',E1.FLEX_SUM_IPC_D4,'4',E1.FLEX_SUM_TS_D4,0)) BOX_D4
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_D5 - E1.FLEX_SUM_MT_D5,'2',E1.FLEX_SUM_OCN_D5,'3',E1.FLEX_SUM_IPC_D5,'4',E1.FLEX_SUM_TS_D5,0)) BOX_D5
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_D7 - E1.FLEX_SUM_MT_D7,'2',E1.FLEX_SUM_OCN_D7,'3',E1.FLEX_SUM_IPC_D7,'4',E1.FLEX_SUM_TS_D7,0)) BOX_D7
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_R2 - E1.FLEX_SUM_MT_R2,'2',E1.FLEX_SUM_OCN_R2,'3',E1.FLEX_SUM_IPC_R2,'4',E1.FLEX_SUM_TS_R2,0)) BOX_R2
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_R5 - E1.FLEX_SUM_MT_R5,'2',E1.FLEX_SUM_OCN_R5,'3',E1.FLEX_SUM_IPC_R5,'4',E1.FLEX_SUM_TS_R5,0)) BOX_R5
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_R9 - E1.FLEX_SUM_MT_R9,'2',E1.FLEX_SUM_OCN_R9,'3',E1.FLEX_SUM_IPC_R9,'4',E1.FLEX_SUM_TS_R9,0)) BOX_R9
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_O2 - E1.FLEX_SUM_MT_O2,'2',E1.FLEX_SUM_OCN_O2,'3',E1.FLEX_SUM_IPC_O2,'4',E1.FLEX_SUM_TS_O2,0)) BOX_O2
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_O4 - E1.FLEX_SUM_MT_O4,'2',E1.FLEX_SUM_OCN_O4,'3',E1.FLEX_SUM_IPC_O4,'4',E1.FLEX_SUM_TS_O4,0)) BOX_O4
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_S2 - E1.FLEX_SUM_MT_S2,'2',E1.FLEX_SUM_OCN_S2,'3',E1.FLEX_SUM_IPC_S2,'4',E1.FLEX_SUM_TS_S2,0)) BOX_S2
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_S4 - E1.FLEX_SUM_MT_S4,'2',E1.FLEX_SUM_OCN_S4,'3',E1.FLEX_SUM_IPC_S4,'4',E1.FLEX_SUM_TS_S4,0)) BOX_S4
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_F2 - E1.FLEX_SUM_MT_F2,'2',E1.FLEX_SUM_OCN_F2,'3',E1.FLEX_SUM_IPC_F2,'4',E1.FLEX_SUM_TS_F2,0)) BOX_F2
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_F4 - E1.FLEX_SUM_MT_F4,'2',E1.FLEX_SUM_OCN_F4,'3',E1.FLEX_SUM_IPC_F4,'4',E1.FLEX_SUM_TS_F4,0)) BOX_F4
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_F5 - E1.FLEX_SUM_MT_F5,'2',E1.FLEX_SUM_OCN_F5,'3',E1.FLEX_SUM_IPC_F5,'4',E1.FLEX_SUM_TS_F5,0)) BOX_F5
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_A2 - E1.FLEX_SUM_MT_A2,'2',E1.FLEX_SUM_OCN_A2,'3',E1.FLEX_SUM_IPC_A2,'4',E1.FLEX_SUM_TS_A2,0)) BOX_A2
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_A4 - E1.FLEX_SUM_MT_A4,'2',E1.FLEX_SUM_OCN_A4,'3',E1.FLEX_SUM_IPC_A4,'4',E1.FLEX_SUM_TS_A4,0)) BOX_A4
        , MAX(DECODE(T.SEQ,'1',E1.FLEX_SUM_TTL_A5 - E1.FLEX_SUM_MT_A5,'2',E1.FLEX_SUM_OCN_A5,'3',E1.FLEX_SUM_IPC_A5,'4',E1.FLEX_SUM_TS_A5,0)) BOX_A5
        FROM EQR_SMY_01_TPSZ E1, COPY T
        WHERE T.SEQ <= 4
        GROUP BY T.SEQ, E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_SEQ, E1.PORT_CD
        UNION ALL
        SELECT 
        /** 6. FULL IMPORT **/
        E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_CD, E1.PORT_SEQ
        , 6 DP_SEQ
        , T.SEQ
        , 'FULL IMPORT' ITEM_TITLE
        , DECODE(T.SEQ,'1','TTL','2','OCN','3','IPC','4','T/S','') ITEM_TP_CD
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TEU - E1.FLIM_SUM_MT_TEU,'2',E1.FLIM_SUM_OCN_TEU,'3',E1.FLIM_SUM_IPC_TEU,'4',E1.FLIM_SUM_TS_TEU,0)) TTL_TEU
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_D2 - E1.FLIM_SUM_MT_D2,'2',E1.FLIM_SUM_OCN_D2,'3',E1.FLIM_SUM_IPC_D2,'4',E1.FLIM_SUM_TS_D2,0)) BOX_D2
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_D4 - E1.FLIM_SUM_MT_D4,'2',E1.FLIM_SUM_OCN_D4,'3',E1.FLIM_SUM_IPC_D4,'4',E1.FLIM_SUM_TS_D4,0)) BOX_D4
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_D5 - E1.FLIM_SUM_MT_D5,'2',E1.FLIM_SUM_OCN_D5,'3',E1.FLIM_SUM_IPC_D5,'4',E1.FLIM_SUM_TS_D5,0)) BOX_D5
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_D7 - E1.FLIM_SUM_MT_D7,'2',E1.FLIM_SUM_OCN_D7,'3',E1.FLIM_SUM_IPC_D7,'4',E1.FLIM_SUM_TS_D7,0)) BOX_D7
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_R2 - E1.FLIM_SUM_MT_R2,'2',E1.FLIM_SUM_OCN_R2,'3',E1.FLIM_SUM_IPC_R2,'4',E1.FLIM_SUM_TS_R2,0)) BOX_R2
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_R5 - E1.FLIM_SUM_MT_R5,'2',E1.FLIM_SUM_OCN_R5,'3',E1.FLIM_SUM_IPC_R5,'4',E1.FLIM_SUM_TS_R5,0)) BOX_R5
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_R9 - E1.FLIM_SUM_MT_R9,'2',E1.FLIM_SUM_OCN_R9,'3',E1.FLIM_SUM_IPC_R9,'4',E1.FLIM_SUM_TS_R9,0)) BOX_R9
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_O2 - E1.FLIM_SUM_MT_O2,'2',E1.FLIM_SUM_OCN_O2,'3',E1.FLIM_SUM_IPC_O2,'4',E1.FLIM_SUM_TS_O2,0)) BOX_O2
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_O4 - E1.FLIM_SUM_MT_O4,'2',E1.FLIM_SUM_OCN_O4,'3',E1.FLIM_SUM_IPC_O4,'4',E1.FLIM_SUM_TS_O4,0)) BOX_O4
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_S2 - E1.FLIM_SUM_MT_S2,'2',E1.FLIM_SUM_OCN_S2,'3',E1.FLIM_SUM_IPC_S2,'4',E1.FLIM_SUM_TS_S2,0)) BOX_S2
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_S4 - E1.FLIM_SUM_MT_S4,'2',E1.FLIM_SUM_OCN_S4,'3',E1.FLIM_SUM_IPC_S4,'4',E1.FLIM_SUM_TS_S4,0)) BOX_S4
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_F2 - E1.FLIM_SUM_MT_F2,'2',E1.FLIM_SUM_OCN_F2,'3',E1.FLIM_SUM_IPC_F2,'4',E1.FLIM_SUM_TS_F2,0)) BOX_F2
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_F4 - E1.FLIM_SUM_MT_F4,'2',E1.FLIM_SUM_OCN_F4,'3',E1.FLIM_SUM_IPC_F4,'4',E1.FLIM_SUM_TS_F4,0)) BOX_F4
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_F5 - E1.FLIM_SUM_MT_F5,'2',E1.FLIM_SUM_OCN_F5,'3',E1.FLIM_SUM_IPC_F5,'4',E1.FLIM_SUM_TS_F5,0)) BOX_F5
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_A2 - E1.FLIM_SUM_MT_A2,'2',E1.FLIM_SUM_OCN_A2,'3',E1.FLIM_SUM_IPC_A2,'4',E1.FLIM_SUM_TS_A2,0)) BOX_A2
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_A4 - E1.FLIM_SUM_MT_A4,'2',E1.FLIM_SUM_OCN_A4,'3',E1.FLIM_SUM_IPC_A4,'4',E1.FLIM_SUM_TS_A4,0)) BOX_A4
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_TTL_A5 - E1.FLIM_SUM_MT_A5,'2',E1.FLIM_SUM_OCN_A5,'3',E1.FLIM_SUM_IPC_A5,'4',E1.FLIM_SUM_TS_A5,0)) BOX_A5
        FROM EQR_SMY_01_TPSZ E1, COPY T
        WHERE T.SEQ <= 4
        GROUP BY T.SEQ, E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_SEQ, E1.PORT_CD
        UNION ALL
        SELECT 
        /** 7. OTHERS **/
        E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_CD, E1.PORT_SEQ
        , 7 DP_SEQ
        , T.SEQ
        , 'OTHERS' ITEM_TITLE
        , DECODE(T.SEQ,'1','MT Disch','2','HC&45'' void','3','Moves','') ITEM_TP_CD
        , MAX(DECODE(T.SEQ,'1',E1.FLIM_SUM_MT_TEU,'2',E1.VOID_TEU_TTL,'3',TO_NUMBER(''),0)) TTL_TEU
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_D2,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_D2,0)) BOX_D2
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_D4,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_D4,0)) BOX_D4
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_D5,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_D5,0)) BOX_D5
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_D7,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_D7,0)) BOX_D7
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_R2,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_R2,0)) BOX_R2
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_R5,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_R5,0)) BOX_R5
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_R9,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_R9,0)) BOX_R9
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_O2,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_O2,0)) BOX_O2
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_O4,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_O4,0)) BOX_O4
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_S2,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_S2,0)) BOX_S2
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_S4,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_S4,0)) BOX_S4
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_F2,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_F2,0)) BOX_F2
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_F4,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_F4,0)) BOX_F4
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_F5,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_F5,0)) BOX_F5
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_A2,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_A2,0)) BOX_A2
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_A4,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_A4,0)) BOX_A4
        , MAX(DECODE(T.SEQ,'3',E1.FLEX_SUM_TTL_A5,0)) + MAX(DECODE(T.SEQ,'3',E1.FLIM_SUM_TTL_A5,0)) BOX_A5
        FROM EQR_SMY_01_TPSZ E1, COPY T
        WHERE T.SEQ <= 3
        GROUP BY T.SEQ, E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_SEQ, E1.PORT_CD   
    ) T
    UNION ALL
    SELECT 
        L.RLANE_CD, L.VSL_CD, L.SKD_VOY_NO, L.SKD_DIR_CD, L.PORT_CD, L.PORT_SEQ PORT_SEQ,  L.DP_SEQ, L.SEQ, L.ITEM_TITLE, L.ITEM_TP_CD
        , NVL((L.BOX_D2 + L.BOX_R2 + L.BOX_O2 + L.BOX_S2 + L.BOX_F2 + L.BOX_A2 + L.BOX_D4*2 + L.BOX_O4*2 + L.BOX_S4*2 + L.BOX_F4*2 + L.BOX_A4*2 + L.BOX_A5*2 + L.BOX_F5*2 + L.BOX_D5*2 + L.BOX_R5*2 + L.BOX_D7*2 + L.BOX_R9*2),0) TTL_TEU
        , TO_NUMBER('') TTL_WT
        , NVL((L.BOX_D2 + L.BOX_R2 + L.BOX_O2 + L.BOX_S2 + L.BOX_F2 + L.BOX_A2 + L.BOX_D4 + L.BOX_O4 + L.BOX_S4 + L.BOX_F4 + L.BOX_A4 + L.BOX_A5 + L.BOX_D5 + L.BOX_F5 + L.BOX_R5 + L.BOX_D7 + L.BOX_R9),0) TTL_BOX
        , NVL((L.BOX_D2 + L.BOX_R2 + L.BOX_O2 + L.BOX_S2 + L.BOX_F2 + L.BOX_A2),0) TTL_20
        , NVL((L.BOX_D4 + L.BOX_O4 + L.BOX_S4 + L.BOX_F4 + L.BOX_A4 + L.BOX_A5),0) TTL_40
        , NVL((L.BOX_D5 + L.BOX_F5 + L.BOX_R5),0) TTL_HC
        , NVL((L.BOX_D7 + L.BOX_R9),0) TTL_45
        , NVL(L.BOX_D2,0) BOX_D2
        , NVL(L.BOX_D4,0) BOX_D4
        , NVL(L.BOX_D5,0) BOX_D5
        , NVL(L.BOX_D7,0) BOX_D7
        , NVL(L.BOX_R2,0) BOX_R2
        , NVL(L.BOX_R5,0) BOX_R5
        , NVL(L.BOX_R9,0) BOX_R9
        , NVL(L.BOX_O2,0) BOX_O2
        , NVL(L.BOX_O4,0) BOX_O4
        , NVL(L.BOX_S2,0) BOX_S2
        , NVL(L.BOX_S4,0) BOX_S4
        , NVL(L.BOX_F2,0) BOX_F2
        , NVL(L.BOX_F4,0) BOX_F4
        , NVL(L.BOX_F5,0) BOX_F5
        , NVL(L.BOX_A2,0) BOX_A2
        , NVL(L.BOX_A4,0) BOX_A4
        , NVL(L.BOX_A5,0) BOX_A5
    FROM (
            SELECT 
            /** 5. MOVEMENT **/
                E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_CD, E1.PORT_SEQ
                , 5 DP_SEQ
                , T.SEQ
                , 'MOVEMENT' ITEM_TITLE
                , DECODE(T.SEQ,'1','OP/OC','2','EN/TN/OTHS','3','NO MVMT','') ITEM_TP_CD
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_D2)+MAX(X.OC_KNT_D2),'2',MAX(X.ETN_KNT_D2)+MAX(X.OT_KNT_D2),'3',MAX(X.MT_KNT_D2),0) BOX_D2
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_D4)+MAX(X.OC_KNT_D4),'2',MAX(X.ETN_KNT_D4)+MAX(X.OT_KNT_D4),'3',MAX(X.MT_KNT_D4),0) BOX_D4
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_D5)+MAX(X.OC_KNT_D5),'2',MAX(X.ETN_KNT_D5)+MAX(X.OT_KNT_D5),'3',MAX(X.MT_KNT_D5),0) BOX_D5
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_D7)+MAX(X.OC_KNT_D7),'2',MAX(X.ETN_KNT_D7)+MAX(X.OT_KNT_D7),'3',MAX(X.MT_KNT_D7),0) BOX_D7
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_R2)+MAX(X.OC_KNT_R2),'2',MAX(X.ETN_KNT_R2)+MAX(X.OT_KNT_R2),'3',MAX(X.MT_KNT_R2),0) BOX_R2
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_R5)+MAX(X.OC_KNT_R5),'2',MAX(X.ETN_KNT_R5)+MAX(X.OT_KNT_R5),'3',MAX(X.MT_KNT_R5),0) BOX_R5
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_R9)+MAX(X.OC_KNT_R9),'2',MAX(X.ETN_KNT_R9)+MAX(X.OT_KNT_R9),'3',MAX(X.MT_KNT_R9),0) BOX_R9
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_O2)+MAX(X.OC_KNT_O2),'2',MAX(X.ETN_KNT_O2)+MAX(X.OT_KNT_O2),'3',MAX(X.MT_KNT_O2),0) BOX_O2
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_O4)+MAX(X.OC_KNT_O4),'2',MAX(X.ETN_KNT_O4)+MAX(X.OT_KNT_O4),'3',MAX(X.MT_KNT_O4),0) BOX_O4
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_S2)+MAX(X.OC_KNT_S2),'2',MAX(X.ETN_KNT_S2)+MAX(X.OT_KNT_S2),'3',MAX(X.MT_KNT_S2),0) BOX_S2
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_S4)+MAX(X.OC_KNT_S4),'2',MAX(X.ETN_KNT_S4)+MAX(X.OT_KNT_S4),'3',MAX(X.MT_KNT_S4),0) BOX_S4
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_F2)+MAX(X.OC_KNT_F2),'2',MAX(X.ETN_KNT_F2)+MAX(X.OT_KNT_F2),'3',MAX(X.MT_KNT_F2),0) BOX_F2
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_F4)+MAX(X.OC_KNT_F4),'2',MAX(X.ETN_KNT_F4)+MAX(X.OT_KNT_F4),'3',MAX(X.MT_KNT_F4),0) BOX_F4
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_F5)+MAX(X.OC_KNT_F5),'2',MAX(X.ETN_KNT_F5)+MAX(X.OT_KNT_F5),'3',MAX(X.MT_KNT_F5),0) BOX_F5
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_A2)+MAX(X.OC_KNT_A2),'2',MAX(X.ETN_KNT_A2)+MAX(X.OT_KNT_A2),'3',MAX(X.MT_KNT_A2),0) BOX_A2
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_A4)+MAX(X.OC_KNT_A4),'2',MAX(X.ETN_KNT_A4)+MAX(X.OT_KNT_A4),'3',MAX(X.MT_KNT_A4),0) BOX_A4            
                , DECODE(T.SEQ,'1',MAX(X.OP_KNT_A5)+MAX(X.OC_KNT_A5),'2',MAX(X.ETN_KNT_A5)+MAX(X.OT_KNT_A5),'3',MAX(X.MT_KNT_A5),0) BOX_A5            
            FROM (
                SELECT
                    T.ORG_YD_CD PORT_CD, T.RLANE_CD, T.VSL_CD, T.SKD_VOY_NO, T.SKD_DIR_CD 
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D2' THEN T.OP ELSE 0 END) OP_KNT_D2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D4' THEN T.OP ELSE 0 END) OP_KNT_D4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D5' THEN T.OP ELSE 0 END) OP_KNT_D5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D7' THEN T.OP ELSE 0 END) OP_KNT_D7
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R2' THEN T.OP ELSE 0 END) OP_KNT_R2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R5' THEN T.OP ELSE 0 END) OP_KNT_R5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R9' THEN T.OP ELSE 0 END) OP_KNT_R9
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O2' THEN T.OP ELSE 0 END) OP_KNT_O2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O4' THEN T.OP ELSE 0 END) OP_KNT_O4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S2' THEN T.OP ELSE 0 END) OP_KNT_S2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S4' THEN T.OP ELSE 0 END) OP_KNT_S4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F2' THEN T.OP ELSE 0 END) OP_KNT_F2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F4' THEN T.OP ELSE 0 END) OP_KNT_F4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F5' THEN T.OP ELSE 0 END) OP_KNT_F5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A2' THEN T.OP ELSE 0 END) OP_KNT_A2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A4' THEN T.OP ELSE 0 END) OP_KNT_A4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A5' THEN T.OP ELSE 0 END) OP_KNT_A5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D2' THEN T.OC ELSE 0 END) OC_KNT_D2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D4' THEN T.OC ELSE 0 END) OC_KNT_D4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D5' THEN T.OC ELSE 0 END) OC_KNT_D5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D7' THEN T.OC ELSE 0 END) OC_KNT_D7
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R2' THEN T.OC ELSE 0 END) OC_KNT_R2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R5' THEN T.OC ELSE 0 END) OC_KNT_R5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R9' THEN T.OC ELSE 0 END) OC_KNT_R9
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O2' THEN T.OC ELSE 0 END) OC_KNT_O2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O4' THEN T.OC ELSE 0 END) OC_KNT_O4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S2' THEN T.OC ELSE 0 END) OC_KNT_S2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S4' THEN T.OC ELSE 0 END) OC_KNT_S4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F2' THEN T.OC ELSE 0 END) OC_KNT_F2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F4' THEN T.OC ELSE 0 END) OC_KNT_F4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F5' THEN T.OC ELSE 0 END) OC_KNT_F5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A2' THEN T.OC ELSE 0 END) OC_KNT_A2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A4' THEN T.OC ELSE 0 END) OC_KNT_A4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A5' THEN T.OC ELSE 0 END) OC_KNT_A5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D2' THEN T.ETN ELSE 0 END) ETN_KNT_D2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D4' THEN T.ETN ELSE 0 END) ETN_KNT_D4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D5' THEN T.ETN ELSE 0 END) ETN_KNT_D5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D7' THEN T.ETN ELSE 0 END) ETN_KNT_D7
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R2' THEN T.ETN ELSE 0 END) ETN_KNT_R2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R5' THEN T.ETN ELSE 0 END) ETN_KNT_R5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R9' THEN T.ETN ELSE 0 END) ETN_KNT_R9
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O2' THEN T.ETN ELSE 0 END) ETN_KNT_O2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O4' THEN T.ETN ELSE 0 END) ETN_KNT_O4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S2' THEN T.ETN ELSE 0 END) ETN_KNT_S2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S4' THEN T.ETN ELSE 0 END) ETN_KNT_S4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F2' THEN T.ETN ELSE 0 END) ETN_KNT_F2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F4' THEN T.ETN ELSE 0 END) ETN_KNT_F4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F5' THEN T.ETN ELSE 0 END) ETN_KNT_F5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A2' THEN T.ETN ELSE 0 END) ETN_KNT_A2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A4' THEN T.ETN ELSE 0 END) ETN_KNT_A4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A5' THEN T.ETN ELSE 0 END) ETN_KNT_A5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D2' THEN T.CY ELSE 0 END) CY_KNT_D2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D4' THEN T.CY ELSE 0 END) CY_KNT_D4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D5' THEN T.CY ELSE 0 END) CY_KNT_D5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D7' THEN T.CY ELSE 0 END) CY_KNT_D7
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R2' THEN T.CY ELSE 0 END) CY_KNT_R2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R5' THEN T.CY ELSE 0 END) CY_KNT_R5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R9' THEN T.CY ELSE 0 END) CY_KNT_R9
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O2' THEN T.CY ELSE 0 END) CY_KNT_O2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O4' THEN T.CY ELSE 0 END) CY_KNT_O4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S2' THEN T.CY ELSE 0 END) CY_KNT_S2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S4' THEN T.CY ELSE 0 END) CY_KNT_S4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F2' THEN T.CY ELSE 0 END) CY_KNT_F2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F4' THEN T.CY ELSE 0 END) CY_KNT_F4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F5' THEN T.CY ELSE 0 END) CY_KNT_F5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A2' THEN T.CY ELSE 0 END) CY_KNT_A2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A4' THEN T.CY ELSE 0 END) CY_KNT_A4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A5' THEN T.CY ELSE 0 END) CY_KNT_A5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D2' THEN T.VL ELSE 0 END) VL_KNT_D2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D4' THEN T.VL ELSE 0 END) VL_KNT_D4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D5' THEN T.VL ELSE 0 END) VL_KNT_D5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D7' THEN T.VL ELSE 0 END) VL_KNT_D7
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R2' THEN T.VL ELSE 0 END) VL_KNT_R2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R5' THEN T.VL ELSE 0 END) VL_KNT_R5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R9' THEN T.VL ELSE 0 END) VL_KNT_R9
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O2' THEN T.VL ELSE 0 END) VL_KNT_O2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O4' THEN T.VL ELSE 0 END) VL_KNT_O4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S2' THEN T.VL ELSE 0 END) VL_KNT_S2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S4' THEN T.VL ELSE 0 END) VL_KNT_S4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F2' THEN T.VL ELSE 0 END) VL_KNT_F2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F4' THEN T.VL ELSE 0 END) VL_KNT_F4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F5' THEN T.VL ELSE 0 END) VL_KNT_F5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A2' THEN T.VL ELSE 0 END) VL_KNT_A2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A4' THEN T.VL ELSE 0 END) VL_KNT_A4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A5' THEN T.VL ELSE 0 END) VL_KNT_A5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D2' THEN T.MT ELSE 0 END) MT_KNT_D2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D4' THEN T.MT ELSE 0 END) MT_KNT_D4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D5' THEN T.MT ELSE 0 END) MT_KNT_D5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D7' THEN T.MT ELSE 0 END) MT_KNT_D7
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R2' THEN T.MT ELSE 0 END) MT_KNT_R2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R5' THEN T.MT ELSE 0 END) MT_KNT_R5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R9' THEN T.MT ELSE 0 END) MT_KNT_R9
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O2' THEN T.MT ELSE 0 END) MT_KNT_O2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O4' THEN T.MT ELSE 0 END) MT_KNT_O4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S2' THEN T.MT ELSE 0 END) MT_KNT_S2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S4' THEN T.MT ELSE 0 END) MT_KNT_S4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F2' THEN T.MT ELSE 0 END) MT_KNT_F2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F4' THEN T.MT ELSE 0 END) MT_KNT_F4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F5' THEN T.MT ELSE 0 END) MT_KNT_F5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A2' THEN T.MT ELSE 0 END) MT_KNT_A2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A4' THEN T.MT ELSE 0 END) MT_KNT_A4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A5' THEN T.MT ELSE 0 END) MT_KNT_A5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D2' THEN T.OT ELSE 0 END) OT_KNT_D2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D4' THEN T.OT ELSE 0 END) OT_KNT_D4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D5' THEN T.OT ELSE 0 END) OT_KNT_D5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='D7' THEN T.OT ELSE 0 END) OT_KNT_D7
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R2' THEN T.OT ELSE 0 END) OT_KNT_R2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R5' THEN T.OT ELSE 0 END) OT_KNT_R5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='R9' THEN T.OT ELSE 0 END) OT_KNT_R9
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O2' THEN T.OT ELSE 0 END) OT_KNT_O2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='O4' THEN T.OT ELSE 0 END) OT_KNT_O4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S2' THEN T.OT ELSE 0 END) OT_KNT_S2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='S4' THEN T.OT ELSE 0 END) OT_KNT_S4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F2' THEN T.OT ELSE 0 END) OT_KNT_F2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F4' THEN T.OT ELSE 0 END) OT_KNT_F4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='F5' THEN T.OT ELSE 0 END) OT_KNT_F5
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A2' THEN T.OT ELSE 0 END) OT_KNT_A2
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A4' THEN T.OT ELSE 0 END) OT_KNT_A4
                    , MAX(CASE WHEN T.CNTR_TPSZ_CD='A5' THEN T.OT ELSE 0 END) OT_KNT_A5
                FROM (
                    SELECT  
                          SUB1.ORG_YD_CD, SUB1.RLANE_CD
                          , SUB1.VSL_CD, SUB1.SKD_VOY_NO, SUB1.SKD_DIR_CD 
                          , SUB1.CNTR_TPSZ_CD_MV CNTR_TPSZ_CD
                          , SUM(SUB1.OP) OP
                          , SUM(SUB1.OC) OC
                          , SUM(SUB1.ETN) ETN
                          , SUM(SUB1.CY) CY
                          , SUM(SUB1.VL) VL
                          , SUM(SUB1.MT) MT
                          , SUM(SUB1.OT) OT
                    FROM    (
                              SELECT  TRD_CD
                                    , SUB_TRD_CD
                                    , RLANE_CD
                                    , VSL_CD
                                    , SKD_VOY_NO
                                    , SKD_DIR_CD                
                                    , ORG_YD_CD
                                    , CNTR_TPSZ_CD_MV CNTR_TPSZ_CD_MV
                                    , 0 BKG_QTY
                                    , SUM(DECODE(CNMV_STS_CD ,'OP',NVL(CNTR_VOL_QTY,0),0)) OP
                                    , SUM(DECODE(CNMV_STS_CD ,'OC',NVL(CNTR_VOL_QTY,0) ,0)) OC
                                    , SUM(DECODE(CNMV_STS_CD ,'EN',NVL(CNTR_VOL_QTY,0) ,DECODE(CNMV_STS_CD,'TN',NVL(CNTR_VOL_QTY,0),0))) ETN
                                    , SUM(DECODE(CNMV_STS_CD ,'CY',NVL(CNTR_VOL_QTY,0) ,0)) CY
                                    , SUM(DECODE(CNMV_STS_CD ,'VL',NVL(CNTR_VOL_QTY,0) ,0)) VL
                                    , SUM(DECODE(CNMV_STS_CD ,'MT',NVL(CNTR_VOL_QTY,0) ,0)) MT
                                    , SUM(DECODE(CNMV_STS_CD ,'OT',NVL(CNTR_VOL_QTY,0) ,0)) OT
                                    , SUM(NVL(CNTR_VOL_QTY,0)) TTL
                              FROM    (
                                        SELECT  DISTINCT VB.TRUNK_VVD
                                              , BVD.TRD_CD
                                              , BVD.SUB_TRD_CD
                                              , BVD.RLANE_CD
                                              , BVD.VSL_CD
                                              , BVD.SKD_VOY_NO
                                              , BVD.SKD_DIR_CD
                                              , VB.BKG_NO
                                              , VB.BKG_STS_CD
                                              , VB.BKG_CGO_TP_CD
                                              , VB.POR_CD
                                              , VB.POD_CD
                                              , VB.POL_CD
                                              , B.RCV_TERM_CD
                                              , B.DE_TERM_CD
                                              , B.CNTR_NO
                                              , B.CNTR_TPSZ_CD CNTR_TPSZ_CD_MV
                                              , B.CNTR_VOL_QTY
                                              , CASE WHEN B.CNMV_STS_CD IN ('OP', 'OC', 'EN', 'TN', 'CY','VL','MT') THEN B.CNMV_STS_CD ELSE 'OT' END CNMV_STS_CD
                                              , B.ORG_YD_CD
                                        FROM    BKG_WORK_V VB
                                              , VSK_VSL_PORT_SKD V
                                              , BKG_CONTAINER B
                                              , BKG_BOOKING BK
                                              , CTM_MOVEMENT MOVE
                                              , (      SELECT  B.BKG_NO
                                                             , BV.SLAN_CD
                                                             , BV.VSL_CD
                                                             , BV.SKD_VOY_NO
                                                             , BV.SKD_DIR_CD
                                                             , DRL.TRD_CD
                                                             , DRL.SUB_TRD_CD
                                                             , DRL.RLANE_CD
                                                             , BV.POL_CD
                                                             , BV.POD_CD
                                                             , B.BKG_CGO_TP_CD
                                                             , (
                                                                  SELECT  SPC_CONTI_CONV_FNC(L.CONTI_CD, BV.SLAN_CD, BV.SKD_DIR_CD)
                                                                  FROM    MDM_LOCATION L
                                                                  WHERE   L.LOC_CD = BV.POL_CD
                                                               ) FM_CONTI_CD,
                                                               (
                                                                  SELECT  SPC_CONTI_CONV_FNC(L.CONTI_CD, BV.SLAN_CD, BV.SKD_DIR_CD)
                                                                  FROM    MDM_LOCATION L
                                                                  WHERE   L.LOC_CD = BV.POD_CD
                                                               ) TO_CONTI_CD
                                                       FROM    BKG_VVD BV
                                                             , BKG_BOOKING B
                                                             , (
                                                                   SELECT  SUBSTR(V.SLS_YRMON, 1, 4) AS COST_YR
                                                                         , V.COST_WK
                                                                         , V.SLS_YRMON
                                                                         , V.TRD_CD
                                                                         , V.SUB_TRD_CD
                                                                         , V.RLANE_CD
                                                                         , V.DIR_CD
                                                                         , V.VSL_CD
                                                                         , V.SKD_VOY_NO
                                                                         , V.DIR_CD AS SKD_DIR_CD
                                                                         , V.IOC_CD
                                                                   FROM    MDM_REV_LANE RL
                                                                         , MAS_MON_VVD V
                                                                   WHERE   RL.RLANE_CD = V.RLANE_CD
                                                                   AND     V.DELT_FLG = 'N'
                                                                   AND     V.VSL_CD = SUBSTR(@[s_vvd_cd], 1, 4)
                                                                   AND     V.SKD_VOY_NO = SUBSTR(@[s_vvd_cd], 5, 4)
                                                                   AND     V.DIR_CD = SUBSTR(@[s_vvd_cd], 9, 1)
                                                             ) M
                                                             , MDM_DTL_REV_LANE DRL
                                                             , MDM_REV_LANE RL
                                                       WHERE   B.BKG_NO = BV.BKG_NO
                                                       AND     M.VSL_CD = BV.VSL_CD
                                                       AND     M.SKD_VOY_NO = BV.SKD_VOY_NO
                                                       AND     M.SKD_DIR_CD = BV.SKD_DIR_CD
                                                       AND     RL.VSL_SLAN_CD = BV.SLAN_CD
                                                       AND     DRL.RLANE_CD = RL.RLANE_CD
                                                       AND     DRL.RLANE_CD = M.RLANE_CD
                                                       AND     DRL.VSL_SLAN_DIR_CD = M.DIR_CD
                                                       AND     DRL.IOC_CD = M.IOC_CD
                                                       AND     DRL.TRD_CD = M.TRD_CD
                                                       AND     DRL.SUB_TRD_CD = M.SUB_TRD_CD
                                                       AND     DRL.DELT_FLG = 'N'
                                                       AND     DRL.FM_CONTI_CD = ( SELECT SPC_CONTI_CONV_FNC(L.CONTI_CD, BV.SLAN_CD, M.DIR_CD) FROM MDM_LOCATION L WHERE L.LOC_CD = BV.POL_CD )
                                                       AND     DRL.TO_CONTI_CD = ( SELECT SPC_CONTI_CONV_FNC(L.CONTI_CD, BV.SLAN_CD, M.DIR_CD) FROM MDM_LOCATION L WHERE L.LOC_CD = BV.POD_CD )
                                                       AND     RL.RLANE_CD = M.RLANE_CD
                                                       AND     RL.VSL_TP_CD = 'C'
                                                       AND     RL.DELT_FLG = 'N'
                                              ) BVD
                                        WHERE   V.VSL_CD(+) = VB.KEY_VSL_CD
                                        AND     V.SKD_VOY_NO(+) = VB.KEY_SKD_VOY_NO
                                        AND     V.SKD_DIR_CD(+) = VB.KEY_SKD_DIR_CD
                                        AND     (DECODE(VB.PRE_1_POL_CD, NULL, VB.TRUNK_POL, VB.PRE_1_POL_CD) = V.VPS_PORT_CD(+))
                                        AND     VB.BKG_NO = BK.BKG_NO
                                        AND     VB.BKG_NO = B.BKG_NO(+)
                                        AND     B.CNTR_NO = MOVE.CNTR_NO(+)
                                        AND     B.CNMV_YR = MOVE.CNMV_YR(+)
                                        AND     B.CNMV_ID_NO = MOVE.CNMV_ID_NO(+)
                                        AND     VB.BKG_STS_CD IN ('F','W','A')
                                        AND     VB.BKG_NO = BVD.BKG_NO(+)
                                        AND     VB.KEY_VSL_CD = SUBSTR(@[s_vvd_cd],1,4)
                                        AND     VB.KEY_SKD_VOY_NO = SUBSTR(@[s_vvd_cd],5,4)
                                        AND     VB.KEY_SKD_DIR_CD =  SUBSTR(@[s_vvd_cd],9,1)
                                        AND     BVD.RLANE_CD = @[rlane]
                                      ) T
                              GROUP BY TRD_CD, SUB_TRD_CD, RLANE_CD, CNTR_TPSZ_CD_MV, ORG_YD_CD, VSL_CD, SKD_VOY_NO, SKD_DIR_CD 
                            ) SUB1
                    WHERE   SUB1.CNTR_TPSZ_CD_MV IS NOT NULL
                    GROUP BY SUB1.ORG_YD_CD, SUB1.RLANE_CD, SUB1.CNTR_TPSZ_CD_MV, SUB1.VSL_CD, SUB1.SKD_VOY_NO, SUB1.SKD_DIR_CD 
                ) T
                GROUP BY T.ORG_YD_CD, T.RLANE_CD, T.VSL_CD, T.SKD_VOY_NO, T.SKD_DIR_CD 
            ) X, COPY T, EQR_SMY_01_TPSZ E1
            WHERE T.SEQ <= 3
            AND E1.RLANE_CD = X.RLANE_CD(+)
            AND E1.VSL_CD = X.VSL_CD(+)
            AND E1.SKD_VOY_NO = X.SKD_VOY_NO(+)
            AND E1.SKD_DIR_CD = X.SKD_DIR_CD(+)
            AND E1.PORT_CD = X.PORT_CD(+)
            GROUP BY T.SEQ, E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_CD, E1.PORT_SEQ
    ) L   
    UNION ALL
    SELECT 
        /** 8. Inventory  **/
        E1.RLANE_CD RLANE_CD
        , E1.VSL_CD VSL_CD
        , E1.SKD_VOY_NO SKD_VOY_NO
        , E1.SKD_DIR_CD SKD_DIR_CD
        , E1.PORT_CD PORT_CD
        , E1.PORT_SEQ PORT_SEQ
        , 8 DP_SEQ
        , C.SEQ
        , 'Inventory' ITEM_TITLE
        , DECODE(C.SEQ,'1','MT','2','H/R, H/Bar') ITEM_TP_CD
        , NVL(CASE 
          WHEN C.SEQ = '1' 
          THEN (T.BOX_D2 + T.BOX_R2 + T.BOX_O2 + T.BOX_S2 + T.BOX_F2 + T.BOX_A2 + T.BOX_D4*2 + T.BOX_O4*2 + T.BOX_S4*2 + T.BOX_F4*2 + T.BOX_A4*2 + T.BOX_A5*2 + T.BOX_D5*2 + T.BOX_F5*2 + T.BOX_R5*2 + T.BOX_D7*2 + T.BOX_R9*2) 
          ELSE (T.HG_BOX_D2 + T.HG_BOX_R2 + T.HG_BOX_O2 + T.HG_BOX_S2 + T.HG_BOX_F2 + T.HG_BOX_A2 + T.HG_BOX_D4*2 + T.HG_BOX_O4*2 + T.HG_BOX_S4*2 + T.HG_BOX_F4*2 + T.HG_BOX_A4*2 + T.HG_BOX_A5*2 + T.HG_BOX_D5*2 + T.HG_BOX_F5*2 + T.HG_BOX_R5*2 + T.HG_BOX_D7*2 + T.HG_BOX_R9*2) 
          END,0) TTL_TEU
        , TO_NUMBER('') TTL_WT
        , NVL(CASE 
          WHEN C.SEQ = '1' 
          THEN (T.BOX_D2 + T.BOX_R2 + T.BOX_O2 + T.BOX_S2 + T.BOX_F2 + T.BOX_A2 + T.BOX_D4 + T.BOX_O4 + T.BOX_S4 + T.BOX_F4 + T.BOX_A4 + T.BOX_A5 + T.BOX_D5 + T.BOX_F5 + T.BOX_R5 + T.BOX_D7 + T.BOX_R9) 
          ELSE (T.HG_BOX_D2 + T.HG_BOX_R2 + T.HG_BOX_O2 + T.HG_BOX_S2 + T.HG_BOX_F2 + T.HG_BOX_A2 + T.HG_BOX_D4 + T.HG_BOX_O4 + T.HG_BOX_S4 + T.HG_BOX_F4 + T.HG_BOX_A4 + T.HG_BOX_A5 + T.HG_BOX_D5 + T.HG_BOX_F5 + T.HG_BOX_R5 + T.HG_BOX_D7 + T.HG_BOX_R9) 
          END,0) TTL_BOX
        , NVL(CASE 
          WHEN C.SEQ = '1' 
          THEN (T.BOX_D2 + T.BOX_R2 + T.BOX_O2 + T.BOX_S2 + T.BOX_F2 + T.BOX_A2) 
          ELSE (T.HG_BOX_D2 + T.HG_BOX_R2 + T.HG_BOX_O2 + T.HG_BOX_S2 + T.HG_BOX_F2 + T.HG_BOX_A2) 
          END,0) TTL_20
        , NVL(CASE 
          WHEN C.SEQ = '1' 
          THEN (T.BOX_D4 + T.BOX_O4 + T.BOX_S4 + T.BOX_F4 + T.BOX_A4 + T.BOX_A5) 
          ELSE (T.HG_BOX_D4 + T.HG_BOX_O4 + T.HG_BOX_S4 + T.HG_BOX_F4 + T.HG_BOX_A4 + T.HG_BOX_A5) 
          END,0) TTL_40
        , NVL(CASE 
          WHEN C.SEQ = '1' 
          THEN (T.BOX_D5 + T.BOX_F5 + T.BOX_R5) 
          ELSE (T.HG_BOX_D5 + T.HG_BOX_F5 + T.HG_BOX_R5) 
          END,0) TTL_HC
        , NVL(CASE 
          WHEN C.SEQ = '1' 
          THEN (T.BOX_D7 + T.BOX_R9) 
          ELSE (T.HG_BOX_D7 + T.HG_BOX_R9) 
          END,0) TTL_45
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_D2 ELSE T.HG_BOX_D2 END,0) BOX_D2
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_D4 ELSE T.HG_BOX_D4 END,0) BOX_D4    
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_D5 ELSE T.HG_BOX_D5 END,0) BOX_D5
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_D7 ELSE T.HG_BOX_D7 END,0) BOX_D7        
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_R2 ELSE T.HG_BOX_R2 END,0) BOX_R2
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_R5 ELSE T.HG_BOX_R5 END,0) BOX_R5    
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_R9 ELSE T.HG_BOX_R9 END,0) BOX_R9
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_O2 ELSE T.HG_BOX_O2 END,0) BOX_O2        
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_O4 ELSE T.HG_BOX_O4 END,0) BOX_O4
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_S2 ELSE T.HG_BOX_S2 END,0) BOX_S2    
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_S4 ELSE T.HG_BOX_S4 END,0) BOX_S4
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_F2 ELSE T.HG_BOX_F2 END,0) BOX_F2        
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_F4 ELSE T.HG_BOX_F4 END,0) BOX_F4
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_F5 ELSE T.HG_BOX_F5 END,0) BOX_F5    
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_A2 ELSE T.HG_BOX_A2 END,0) BOX_A2
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_A4 ELSE T.HG_BOX_A4 END,0) BOX_A4
        , NVL(CASE WHEN C.SEQ = '1' THEN T.BOX_A5 ELSE T.HG_BOX_A5 END,0) BOX_A5
    FROM (
        SELECT 
        A.CRNT_YD_CD PORT_CD
        ,SUM(A.HG_BOX_D2) HG_BOX_D2
        ,SUM(A.HG_BOX_D4) HG_BOX_D4
        ,SUM(A.HG_BOX_D5) HG_BOX_D5
        ,SUM(A.HG_BOX_D7) HG_BOX_D7
        ,SUM(A.HG_BOX_R2) HG_BOX_R2
        ,SUM(A.HG_BOX_R5) HG_BOX_R5
        ,SUM(A.HG_BOX_R9) HG_BOX_R9
        ,SUM(A.HG_BOX_O2) HG_BOX_O2
        ,SUM(A.HG_BOX_O4) HG_BOX_O4
        ,SUM(A.HG_BOX_S2) HG_BOX_S2
        ,SUM(A.HG_BOX_S4) HG_BOX_S4
        ,SUM(A.HG_BOX_F2) HG_BOX_F2
        ,SUM(A.HG_BOX_F4) HG_BOX_F4
        ,SUM(A.HG_BOX_F5) HG_BOX_F5
        ,SUM(A.HG_BOX_A2) HG_BOX_A2
        ,SUM(A.HG_BOX_A4) HG_BOX_A4
        ,SUM(A.HG_BOX_A5) HG_BOX_A5
        ,SUM(A.BOX_D2) BOX_D2
        ,SUM(A.BOX_D4) BOX_D4
        ,SUM(A.BOX_D5) BOX_D5
        ,SUM(A.BOX_D7) BOX_D7
        ,SUM(A.BOX_R2) BOX_R2
        ,SUM(A.BOX_R5) BOX_R5
        ,SUM(A.BOX_R9) BOX_R9
        ,SUM(A.BOX_O2) BOX_O2
        ,SUM(A.BOX_O4) BOX_O4
        ,SUM(A.BOX_S2) BOX_S2
        ,SUM(A.BOX_S4) BOX_S4
        ,SUM(A.BOX_F2) BOX_F2
        ,SUM(A.BOX_F4) BOX_F4
        ,SUM(A.BOX_F5) BOX_F5
        ,SUM(A.BOX_A2) BOX_A2
        ,SUM(A.BOX_A4) BOX_A4
        ,SUM(A.BOX_A5) BOX_A5
        FROM (
            SELECT A.CRNT_YD_CD
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'D2', A.VOL,0)) ELSE 0 END HG_BOX_D2
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'D4', A.VOL,0)) ELSE 0 END HG_BOX_D4
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'D5', A.VOL,0)) ELSE 0 END HG_BOX_D5
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'D7', A.VOL,0)) ELSE 0 END HG_BOX_D7
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'R2', A.VOL,0)) ELSE 0 END HG_BOX_R2
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'R5', A.VOL,0)) ELSE 0 END HG_BOX_R5
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'R9', A.VOL,0)) ELSE 0 END HG_BOX_R9
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'O2', A.VOL,0)) ELSE 0 END HG_BOX_O2
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'O4', A.VOL,0)) ELSE 0 END HG_BOX_O4
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'S2', A.VOL,0)) ELSE 0 END HG_BOX_S2
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'S4', A.VOL,0)) ELSE 0 END HG_BOX_S4
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'F2', A.VOL,0)) ELSE 0 END HG_BOX_F2
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'F4', A.VOL,0)) ELSE 0 END HG_BOX_F4
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'F5', A.VOL,0)) ELSE 0 END HG_BOX_F5
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'A2', A.VOL,0)) ELSE 0 END HG_BOX_A2
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'A4', A.VOL,0)) ELSE 0 END HG_BOX_A4
                ,CASE WHEN A.CNTR_HNGR_RCK_CD IS NOT NULL OR A.CNTR_HNGR_BAR_ATCH_KNT > 0 THEN SUM(DECODE(A.CNTR_TPSZ_CD,'A5', A.VOL,0)) ELSE 0 END HG_BOX_A5
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'D2', A.VOL,0)) BOX_D2
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'D4', A.VOL,0)) BOX_D4
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'D5', A.VOL,0)) BOX_D5
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'D7', A.VOL,0)) BOX_D7
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'R2', A.VOL,0)) BOX_R2
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'R5', A.VOL,0)) BOX_R5
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'R9', A.VOL,0)) BOX_R9
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'O2', A.VOL,0)) BOX_O2
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'O4', A.VOL,0)) BOX_O4
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'S2', A.VOL,0)) BOX_S2
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'S4', A.VOL,0)) BOX_S4
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'F2', A.VOL,0)) BOX_F2
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'F4', A.VOL,0)) BOX_F4
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'F5', A.VOL,0)) BOX_F5
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'A2', A.VOL,0)) BOX_A2
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'A4', A.VOL,0)) BOX_A4
                ,SUM(DECODE(A.CNTR_TPSZ_CD,'A5', A.VOL,0)) BOX_A5
            FROM (
                SELECT A.CRNT_YD_CD, A.CNMV_STS_CD, A.CNTR_TPSZ_CD, COUNT(1) VOL, A.CNTR_HNGR_RCK_CD, A.CNTR_HNGR_BAR_ATCH_KNT
                FROM MST_CONTAINER A
                WHERE A.ACIAC_DIV_CD='A'
                    AND A.CNMV_STS_CD IN('CD','CE','CI','CM','CO','CP','CT','CX','EN','IC','ID','MT','OC','OP','TN','TS')
                    AND A.CNTR_USE_CO_CD = 'H'
                    AND A.CNMV_STS_CD = 'MT' 
                    AND A.LSTM_CD <> 'SH'
                GROUP BY A.CRNT_YD_CD, A.CNMV_STS_CD , A.CNTR_TPSZ_CD, A.CNTR_HNGR_RCK_CD, A.CNTR_HNGR_BAR_ATCH_KNT
                ) A
            GROUP BY A.CRNT_YD_CD, A.CNMV_STS_CD, A.CNTR_HNGR_RCK_CD, A.CNTR_HNGR_BAR_ATCH_KNT 
            ORDER BY A.CRNT_YD_CD, A.CNMV_STS_CD, A.CNTR_HNGR_RCK_CD, A.CNTR_HNGR_BAR_ATCH_KNT 
            ) A
        GROUP BY A.CRNT_YD_CD    
    ) T, (SELECT DISTINCT E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_CD, E1.PORT_SEQ FROM EQR_SMY_01_TPSZ E1) E1, COPY C
    WHERE 1=1
    AND E1.PORT_CD = T.PORT_CD(+)
    AND C.SEQ <= 2    
    UNION ALL    
    SELECT 
        /** 9. Yard MT Plan Total  **/
        E1.RLANE_CD RLANE_CD
        , E1.VSL_CD VSL_CD
        , E1.SKD_VOY_NO SKD_VOY_NO
        , E1.SKD_DIR_CD SKD_DIR_CD
        , E1.PORT_CD 
        , E1.PORT_SEQ
        , 9 DP_SEQ
        , 1 SEQ
        , 'Yard MT Plan Total ' ITEM_TITLE
        , 'NEXT 7DAYS' ITEM_TP_CD
        , T.P_TEU TTL_TEU
        , T.P_WGT TTL_WT
        , TO_NUMBER('') TTL_BOX
        , TO_NUMBER('') TTL_20
        , TO_NUMBER('') TTL_40
        , TO_NUMBER('') TTL_HC
        , TO_NUMBER('') TTL_45
        , TO_NUMBER('') BOX_D2
        , TO_NUMBER('') BOX_D4
        , TO_NUMBER('') BOX_D5
        , TO_NUMBER('') BOX_D7
        , TO_NUMBER('') BOX_R2
        , TO_NUMBER('') BOX_R5
        , TO_NUMBER('') BOX_R9
        , TO_NUMBER('') BOX_O2
        , TO_NUMBER('') BOX_O4
        , TO_NUMBER('') BOX_S2
        , TO_NUMBER('') BOX_S4
        , TO_NUMBER('') BOX_F2
        , TO_NUMBER('') BOX_F4
        , TO_NUMBER('') BOX_F5
        , TO_NUMBER('') BOX_A2
        , TO_NUMBER('') BOX_A4
        , TO_NUMBER('') BOX_A5
    FROM (
        SELECT Y.* FROM TREND_PORT_DATA Y
        ORDER BY Y.RLANE_CD, Y.VSL_CD, Y.SKD_VOY_NO, Y.SKD_DIR_CD, Y.PORT_CD
    ) T, (SELECT DISTINCT E1.RLANE_CD, E1.VSL_CD, E1.SKD_VOY_NO, E1.SKD_DIR_CD, E1.PORT_CD, E1.PORT_SEQ FROM EQR_SMY_01_TPSZ E1) E1
    WHERE 1=1
    AND E1.RLANE_CD = T.RLANE_CD(+)
    AND E1.VSL_CD = T.VSL_CD(+)
    AND E1.SKD_VOY_NO = T.SKD_VOY_NO(+)
    AND E1.SKD_DIR_CD = T.SKD_DIR_CD(+)
    AND E1.PORT_CD = T.PORT_CD(+)
    AND E1.PORT_SEQ = T.PORT_SEQ(+)
)

/** SPC BOTTLENECK TON 시작 **/
, PARAMS_TON AS (
	SELECT RLANE_CD, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, STS, '2' QTY_TP, VOID_FLG FROM PARAMS
)
, CUR_PORTS_TON AS (
    SELECT RLANE_CD       ,
           VSL_CD         ,
           SKD_VOY_NO     ,
           SKD_DIR_CD     ,
           PORT_CD        ,
           YD_CD          ,
           CLPT_SEQ       ,
           CLPT_IND_SEQ   ,
           TURN_SKD_VOY_NO,
           TURN_SKD_DIR_CD,
           TURN_CLPT_IND_SEQ   ,
           FLG            ,
           BSA            ,
           STS
      FROM (
              SELECT P.RLANE_CD   ,
                     S1.VSL_CD    ,
                     S1.SKD_VOY_NO,
                     S1.SKD_DIR_CD,
                     S1.VPS_PORT_CD AS PORT_CD,
                     S1.YD_CD     ,
                     S1.CLPT_SEQ           AS CLPT_SEQ,
                     S1.CLPT_IND_SEQ       AS CLPT_IND_SEQ,
                     S1.TURN_SKD_VOY_NO,
                     S1.TURN_SKD_DIR_CD,
                     S1.TURN_CLPT_IND_SEQ       AS TURN_CLPT_IND_SEQ,
                     (
                       CASE 
                            WHEN TRIM(S1.TURN_SKD_VOY_NO) IS NULL  THEN 2
                            WHEN S1.TURN_PORT_IND_CD IN ('Y', 'N') THEN 1
                                                                   ELSE 3
                        END
                     ) AS FLG,
                     (
                        SELECT (
                                  SELECT NVL(MAX(DECODE(B.STUP_FLG, 'Y', DECODE(A.PORT_BSA_CAPA, 0, NULL, A.PORT_BSA_CAPA))), C.CRR_BSA_CAPA) BSA
                                    FROM BSA_VVD_PORT_DWN A,
                                         MAS_LANE_RGST    B
                                   WHERE B.RLANE_CD        = C.RLANE_CD
                                     AND B.TRD_CD          = C.TRD_CD
                                     AND B.DIR_CD          = C.SKD_DIR_CD
                                     AND A.TRD_CD      (+) = C.TRD_CD
                                     AND A.RLANE_CD    (+) = C.RLANE_CD
                                     AND A.VSL_CD      (+) = C.VSL_CD
                                     AND A.SKD_VOY_NO  (+) = C.SKD_VOY_NO
                                     AND A.SKD_DIR_CD  (+) = C.SKD_DIR_CD
                                     AND A.BSA_OP_JB_CD(+) = DECODE(P.QTY_TP, '1', '007', '016') -- Port별 Weight 정보
                                     AND A.CRR_CD      (+) = C.CRR_CD
                                     AND A.PORT_CD     (+) = NVL(SUBSTR(S1.YD_CD, 1, 5), S1.VPS_PORT_CD)
                               ) AS BSA
                          FROM BSA_VVD_OTR_CRR C
                         WHERE C.RLANE_CD     = P.RLANE_CD
                           AND C.VSL_CD       = P.VSL_CD
                           AND C.SKD_VOY_NO   = P.SKD_VOY_NO
                           AND C.SKD_DIR_CD   = P.SKD_DIR_CD
                           AND C.BSA_OP_JB_CD = DECODE(P.QTY_TP, '1', '007', '009')
                           AND C.CRR_CD       = 'SML'
                     ) AS BSA,
                     P.STS
                FROM VSK_VSL_PORT_SKD S1,
                     PARAMS_TON           P
               WHERE (S1.SKD_CNG_STS_CD IS NULL OR S1.SKD_CNG_STS_CD <> 'S')
                 AND S1.VSL_CD     = P.VSL_CD
                 AND S1.SKD_VOY_NO = P.SKD_VOY_NO
                 AND S1.SKD_DIR_CD = P.SKD_DIR_CD
                 AND S1.VPS_PORT_CD NOT IN ('EGSUZ')
            )
)
, VVD_BASE_TON AS (
    SELECT RLANE_CD  ,
           VSL_CD    ,
           SKD_VOY_NO,
           SKD_DIR_CD,
           MAX(STS) AS STS,
           MIN(DECODE(FLG, '1', TURN_SKD_VOY_NO)) AS PRE_SKD_VOY_NO,
           MIN(DECODE(FLG, '1', TURN_SKD_DIR_CD)) AS PRE_SKD_DIR_CD,
           MIN(DECODE(FLG, '3', TURN_SKD_VOY_NO)) AS PST_SKD_VOY_NO,
           MIN(DECODE(FLG, '3', TURN_SKD_DIR_CD)) AS PST_SKD_DIR_CD
      FROM (
              SELECT S1.RLANE_CD       ,
                     S1.VSL_CD         ,
                     S1.SKD_VOY_NO     ,
                     S1.SKD_DIR_CD     ,
                     S1.TURN_SKD_VOY_NO,
                     S1.TURN_SKD_DIR_CD,
                     DECODE(S2.SKD_VOY_NO, NULL, '', S1.FLG) AS FLG,
                     S1.STS
                FROM CUR_PORTS_TON        S1,
                     VSK_VSL_PORT_SKD S2
               WHERE S1.VSL_CD          = S2.VSL_CD    (+)
                 AND S1.TURN_SKD_VOY_NO = S2.SKD_VOY_NO(+)
                 AND S1.TURN_SKD_DIR_CD = S2.SKD_DIR_CD(+)
                 AND S1.YD_CD           = S2.YD_CD     (+)
           )
  GROUP BY RLANE_CD  ,
           VSL_CD    ,
           SKD_VOY_NO,
           SKD_DIR_CD
)
, PORT_SKD_TON AS (
    SELECT B.RLANE_CD,
           B.VSL_CD||B.SKD_VOY_NO||B.SKD_DIR_CD AS BASE_VVD,
           (
             DECODE(S1.SKD_VOY_NO||S1.SKD_DIR_CD, B.PRE_SKD_VOY_NO||B.PRE_SKD_DIR_CD, '1',
                                                  B.SKD_VOY_NO||B.SKD_DIR_CD        , '2',
                                                  B.PST_SKD_VOY_NO||B.PST_SKD_DIR_CD, '3'  )
           ) AS TP,
           S1.VSL_CD||S1.SKD_VOY_NO||S1.SKD_DIR_CD AS VVD,
           S1.VSL_CD     ,
           S1.SKD_VOY_NO ,
           S1.SKD_DIR_CD ,
           S1.VPS_PORT_CD,
           S1.YD_CD      ,
           S1.CLPT_SEQ   ,
           S1.CLPT_IND_SEQ,
           S1.TURN_CLPT_IND_SEQ,
           SPC_CONTI_CONV_FNC(LOC.CONTI_CD, B.RLANE_CD) AS PORT_CONTI,
           S1.TURN_PORT_IND_CD,
           NVL(S1.SKD_CNG_STS_CD, ' ') AS CNG_STS_CD,
           S1.TURN_SKD_VOY_NO,
           S1.TURN_SKD_DIR_CD,
           S1.VSL_CD||S1.TURN_SKD_VOY_NO||S1.TURN_SKD_DIR_CD AS TURN_VVD,
           B.PRE_SKD_VOY_NO,
           B.PRE_SKD_DIR_CD,
           B.PST_SKD_VOY_NO,
           B.PST_SKD_DIR_CD,
           (
             SELECT PRD.COST_YR||LPAD(CEIL((TO_CHAR(S1.VPS_ETD_DT, 'DDD') + 7 - TO_CHAR(TO_DATE(PRD.SLS_TO_DT, 'YYYYMMDD'), 'DDD')) / 7), 2, '0')
               FROM MAS_WK_PRD PRD
              WHERE PRD.COST_YR = TO_CHAR(S1.VPS_ETD_DT, 'YYYY')
                AND PRD.COST_WK = '01'
           ) AS COST_YRWK,
           MAX(S1.CLPT_SEQ) OVER (PARTITION BY S1.VSL_CD||S1.SKD_VOY_NO||S1.SKD_DIR_CD||S1.YD_CD) AS MAX_SEQ,
           B.STS          
      FROM MDM_LOCATION     LOC,
           VSK_VSL_PORT_SKD S1 ,
           VVD_BASE_TON         B
     WHERE LOC.LOC_CD = S1.VPS_PORT_CD
       AND S1.VSL_CD  = B.VSL_CD
       AND ((S1.SKD_VOY_NO, S1.SKD_DIR_CD) IN ((B.SKD_VOY_NO, B.SKD_DIR_CD), (B.PRE_SKD_VOY_NO, B.PRE_SKD_DIR_CD), (B.PST_SKD_VOY_NO, B.PST_SKD_DIR_CD)))
)
, PORT_SEQ_TON AS (
    SELECT TP        ,
           VVD       ,
           VSL_CD    ,
           SKD_VOY_NO,
           SKD_DIR_CD,
           POL_CD,
           POD_CD,
           POL_SEQ  ,
           POL_CLPT_IND_SEQ,
           POL_CLPT_IND_SEQ1,
           POD_SEQ  ,
           POD_CLPT_IND_SEQ,
           POD_CLPT_IND_SEQ1,
           POL_CONTI,
           POD_CONTI,
           POL_YRWK ,
           POD_YRWK ,        
           (SELECT 
                 (
                   DECODE(S1.STS, '1', CASE WHEN VPS_ETD_DT < GLOBALDATE_PKG.TIME_CONV_FNC('GMT', SYS_EXTRACT_UTC(SYSTIMESTAMP), VPS_PORT_CD ) THEN 'Y'
                                                                                                                                               ELSE 'N'
                                       END, '2', 'N', '3', 'Y')
                 )
             FROM VSK_VSL_PORT_SKD
             WHERE VSL_CD = S1.VSL_CD
             AND SKD_VOY_NO = S1.SKD_VOY_NO
             AND SKD_DIR_CD = S1.SKD_DIR_CD
             AND CLPT_SEQ = S1.CLPT_SEQ ) AS PAST
      FROM (
            SELECT S1.TP        ,
                   S1.VVD       ,
                   S1.VSL_CD    ,
                   S1.SKD_VOY_NO,
                   S1.SKD_DIR_CD,
                   S1.CLPT_SEQ  ,
                   S1.STS       ,
                   NVL(S1.YD_CD, S1.VPS_PORT_CD) AS POL_CD,
                   NVL(S2.YD_CD, S2.VPS_PORT_CD) AS POD_CD,
                   S1.CLPT_SEQ   AS POL_SEQ  ,
                   S1.TURN_PORT_IND_CD,
                   S1.CLPT_IND_SEQ AS POL_CLPT_IND_SEQ,
                   DECODE(S1.BASE_VVD, S1.TURN_VVD, S1.TURN_CLPT_IND_SEQ, S1.CLPT_IND_SEQ) AS POL_CLPT_IND_SEQ1,
                   S2.CLPT_SEQ   AS POD_SEQ  ,
                   S2.TURN_PORT_IND_CD,
                   S2.CLPT_IND_SEQ AS POD_CLPT_IND_SEQ,
                   DECODE(S2.BASE_VVD, S2.TURN_VVD, S2.TURN_CLPT_IND_SEQ, S2.CLPT_IND_SEQ) AS POD_CLPT_IND_SEQ1,
                   S1.PORT_CONTI AS POL_CONTI,
                   S2.PORT_CONTI AS POD_CONTI,
                   S1.COST_YRWK  AS POL_YRWK ,
                   S2.COST_YRWK  AS POD_YRWK 
              FROM PORT_SKD_TON S1,
                   PORT_SKD_TON S2
             WHERE S1.VSL_CD     = S2.VSL_CD
               AND S1.SKD_VOY_NO = S2.SKD_VOY_NO
               AND S1.SKD_DIR_CD = S2.SKD_DIR_CD
               AND S1.CLPT_SEQ   < S2.CLPT_SEQ
               AND S1.TURN_PORT_IND_CD IN ('Y', 'N')
               AND S1.CNG_STS_CD <> 'S'
               AND ( S1.CLPT_SEQ = S1.MAX_SEQ OR S2.CLPT_SEQ < S1.MAX_SEQ )
               AND DECODE(S1.TP, 1, S2.TURN_VVD, 2, S1.VVD, 3, S1.TURN_VVD) = S1.BASE_VVD
        )    S1       
  ORDER BY TP     ,
           POL_SEQ,
           POD_SEQ
)
, VVD_LD_PORT_TON AS (
    SELECT S1.VSL_CD    ,
           S1.SKD_VOY_NO,
           S1.SKD_DIR_CD,
           SUBSTR(MAX(LTRIM(TO_CHAR(S1.POD_SEQ, 'FM000'))|| S1.POD_CD), 4) AS LD_PORT
      FROM PORT_SEQ_TON S1
  GROUP BY S1.VSL_CD    ,
           S1.SKD_VOY_NO,
           S1.SKD_DIR_CD
)
, COPY_TON AS (
    SELECT LEVEL SEQ
      FROM DUAL
CONNECT BY LEVEL <= 5
)
, BKG_DATA_TON AS (
    SELECT 2 AS SRC       ,
           Z.TP           ,
           Z.POL_CD       ,
           Z.POL_SEQ      ,
           Z.POL_CLPT_IND_SEQ, 
           Z.POD_CD       ,
           Z.POD_SEQ      ,
           Z.POD_CLPT_IND_SEQ, 
           Z.IOC_CD       ,
           Z.BKG_CGO_TP_CD,
           Z.QTY_TTL ,
           Z.QTY_HC_TTL,
           Z.QTY_45_TTL
      FROM (
            SELECT 
                   Z.TP           ,
                   Z.POL_CD       ,
                   Z.POL_SEQ      ,
                   Z.POL_CLPT_IND_SEQ, 
                   Z.POD_CD       ,
                   Z.POD_SEQ      ,
                   Z.POD_CLPT_IND_SEQ, 
                   Z.IOC_CD       ,
                   Z.BKG_CGO_TP_CD,
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', SUBSTR(Z.VAL, 1, 14), SUBSTR(Z.VAL, 15)), 0))) AS QTY_TTL,
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', DECODE(Z.VOID_FLG, 'Y',SUBSTR(Z.VAL_HC, 1, 14),0),0), 0))) AS QTY_HC_TTL, --20130807
                   SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', DECODE(Z.VOID_FLG, 'Y',SUBSTR(Z.VAL_45, 1, 14),0),0), 0))) AS QTY_45_TTL --20130807
                     
              FROM (
                      SELECT B.TP    ,
                             B.POL_CD,
                             B.POL_SEQ,
                             B.POL_CLPT_IND_SEQ, 
                             B.POD_CD,
                             B.POD_SEQ,
                             B.POD_CLPT_IND_SEQ, 
                             DECODE(BK.BKG_CGO_TP_CD, 'P', 'M', 'F') AS BKG_CGO_TP_CD,
                             DECODE(BV.VSL_PRE_PST_CD, 'T', DECODE(B.POL_CONTI, B.POD_CONTI, 2, 1), 3) AS IOC_CD,
                             (
                               SELECT    TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', 1, 2) * Q.OP_CNTR_QTY), 'FM0000000000.000')
                                      || TO_CHAR((MAX(D.ACT_WGT) * DECODE(MAX(D.WGT_UT_CD), 'LBS', 0.00045, 0.001)) + SUM(Q.OP_CNTR_QTY * ( SELECT TS.CNTR_TPSZ_TARE_WGT
                                                                                                                                              FROM MDM_CNTR_TP_SZ TS
                                                                                                                                             WHERE TS.CNTR_TPSZ_CD = Q.CNTR_TPSZ_CD)) * 0.001, 'FM0000000000.000')
                                 FROM BKG_QUANTITY Q
                                WHERE BK.BKG_NO     = Q.BKG_NO
                                  AND Q.OP_CNTR_QTY > 0
                            ) AS VAL,
                            P.QTY_TP,                  
                            (
                               SELECT TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD),'5',Q.OP_CNTR_QTY,'8',Q.OP_CNTR_QTY,'9',Q.OP_CNTR_QTY,0)), 'FM0000000000.000')
                                 FROM BKG_QUANTITY Q
                                WHERE BK.BKG_NO     = Q.BKG_NO
                                  AND Q.OP_CNTR_QTY > 0
                                  AND SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD) IN ('5','8','9')
                            ) AS VAL_HC, --20130807
                            (
                               SELECT TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD),'7',Q.OP_CNTR_QTY,0)), 'FM0000000000.000')
                                 FROM BKG_QUANTITY Q
                                WHERE BK.BKG_NO     = Q.BKG_NO
                                  AND Q.OP_CNTR_QTY > 0
                                  AND SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD) = '7'
                            ) AS VAL_45, --20130807                            
                            P.VOID_FLG    --20130807                         
                       FROM BKG_BOOKING BK,
                            BKG_VVD     BV,
                            PORT_SEQ_TON    B ,
                            PARAMS_TON      P ,
                            VVD_LD_PORT_TON LD,
                            BKG_BL_DOC  D
                      WHERE BV.VSL_CD     = B.VSL_CD
                        AND BV.SKD_VOY_NO = B.SKD_VOY_NO
                        AND BV.SKD_DIR_CD = B.SKD_DIR_CD
                        AND BV.VSL_CD     = LD.VSL_CD
                        AND BV.SKD_VOY_NO = LD.SKD_VOY_NO
                        AND BV.SKD_DIR_CD = LD.SKD_DIR_CD
                        AND BV.POL_YD_CD   = B.POL_CD
                        AND BV.POL_CLPT_IND_SEQ  = B.POL_CLPT_IND_SEQ
                        AND DECODE(BV.POD_CD, 'XXXXX', LD.LD_PORT, BV.POD_YD_CD) = B.POD_CD
                        AND BV.POD_CLPT_IND_SEQ  = B.POD_CLPT_IND_SEQ
                        AND BK.BKG_NO      = BV.BKG_NO
                        AND BK.BKG_STS_CD IN ('F', 'W')
                        AND BK.BKG_NO      = D.BKG_NO
                   ) Z
          GROUP BY Z.TP    ,
                   Z.POL_CD       ,
                   Z.POL_SEQ      ,
                   Z.POL_CLPT_IND_SEQ, 
                   Z.POD_CD       ,
                   Z.POD_SEQ      ,
                   Z.POD_CLPT_IND_SEQ, 
                   Z.IOC_CD,
                   Z.BKG_CGO_TP_CD
        ) Z                  
  ORDER BY Z.TP    ,
           Z.POL_CD,
           Z.POL_CLPT_IND_SEQ, 
           Z.POD_CD       ,
           Z.POD_CLPT_IND_SEQ, 
           Z.IOC_CD,
           Z.BKG_CGO_TP_CD
)
, ALC_DATA_TON AS (
    SELECT 1 AS SRC,
           B.TP    ,
           B.POL_CD,
           B.POL_SEQ,
           B.POL_CLPT_IND_SEQ,
           B.POD_CD,
           B.POD_SEQ,
           B.POD_CLPT_IND_SEQ,
           DECODE(M.TS_FLG, 'Y', 3, DECODE(M.IOC_CD, 'I', 2, 'O', 1, 5)) AS IOC_CD ,
           SUM(DECODE(P.QTY_TP, '1', M.ASGN_TTL_QTY, M.ASGN_TTL_WGT))    AS QTY_TTL
      FROM SPC_ALOC_POL_POD M,
           PORT_SEQ_TON         B,
           PARAMS_TON           P
     WHERE M.VSL_CD     = B.VSL_CD
       AND M.SKD_VOY_NO = B.SKD_VOY_NO
       AND M.SKD_DIR_CD = B.SKD_DIR_CD
       AND SUBSTR(M.POL_YD_CD, 1, LENGTH(B.POL_CD)) = B.POL_CD
       AND NVL(M.POL_IND_SEQ, 1) = DECODE(M.POL_IND_SEQ, NULL, 1, B.POL_CLPT_IND_SEQ)
       AND SUBSTR(M.POD_YD_CD, 1, LENGTH(B.POD_CD)) = B.POD_CD
       AND NVL(M.POD_IND_SEQ, 1) = DECODE(M.POD_IND_SEQ, NULL, 1, B.POD_CLPT_IND_SEQ)
       AND M.RLANE_CD   LIKE DECODE(SUBSTR(P.RLANE_CD, 1, 3), 'PSG', 'PSG', P.RLANE_CD)||'%'	-- R.Lane 조건 추가
       -- CHM-201537079, 2015-08-10, 신용찬, 표준코드 변환
       --AND (M.TS_FLG = 'N' OR M.SLS_RHQ_CD = 'SHAAS' OR M.SLS_RHQ_CD = 'SINWA' OR M.SLS_RGN_OFC_CD IS NULL)
       AND (M.TS_FLG = 'N' OR M.SLS_RHQ_CD = 'SHARC' OR M.SLS_RHQ_CD = 'SINRS' OR M.SLS_RGN_OFC_CD IS NULL)
  GROUP BY B.TP    ,
           B.POL_CD,
           B.POL_SEQ,
           B.POL_CLPT_IND_SEQ,
           B.POD_CD,
           B.POD_SEQ,
           B.POD_CLPT_IND_SEQ,
           DECODE(M.TS_FLG, 'Y', 3, DECODE(M.IOC_CD, 'I', 2, 'O', 1, 5))
)
, FCT_DATA_TON AS (
    SELECT 3 AS SRC,
           B.TP    ,
           B.POL_CD,
           B.POL_SEQ,
           B.POL_CLPT_IND_SEQ,
           B.POD_CD,
           B.POD_SEQ,
           B.POD_CLPT_IND_SEQ,
           DECODE(F.IOC_TS_CD, 'O', 1, 'I', 2, 'T', 3, 5) AS IOC_CD,
           DECODE(P.QTY_TP, '1', (NVL(F.CFM_TTL_QTY, 0) + NVL(F.CFM_40FT_HC_QTY, 0) * 2 + NVL(F.CFM_45FT_HC_QTY, 0) * 2 + NVL(F.CFM_53FT_QTY, 0) * 2), F.CFM_TTL_WGT) AS QTY_TTL,
           CASE WHEN P.QTY_TP = '1' AND P.VOID_FLG = 'Y' THEN  
                NVL(F.CFM_40FT_HC_QTY, 0) 
           ELSE 
                0
           END AS QTY_HC_TTL,
           
           CASE WHEN P.QTY_TP = '1' AND P.VOID_FLG = 'Y' THEN  
                NVL(F.CFM_45FT_HC_QTY, 0) 
           ELSE 
                0
           END AS QTY_45_TTL
      FROM SPC_DLY_FCAST_CUST F,
           PORT_SEQ_TON           B,
           PARAMS_TON             P
     WHERE F.VSL_CD     = B.VSL_CD
       AND F.SKD_VOY_NO = B.SKD_VOY_NO
       AND F.SKD_DIR_CD = B.SKD_DIR_CD
       AND SUBSTR(F.POL_YD_CD, 1, LENGTH(B.POL_CD)) = B.POL_CD
       AND NVL(F.POL_IND_SEQ, 1) = DECODE(F.POL_IND_SEQ, NULL, 1, B.POL_CLPT_IND_SEQ)
       AND SUBSTR(F.POD_YD_CD, 1, LENGTH(B.POD_CD)) = B.POD_CD
       AND NVL(F.POD_IND_SEQ, 1) = DECODE(F.POD_IND_SEQ, NULL, 1, B.POD_CLPT_IND_SEQ)
       AND F.RLANE_CD   LIKE DECODE(SUBSTR(P.RLANE_CD, 1, 3), 'PSG', 'PSG', P.RLANE_CD)||'%'	-- R.Lane 조건 추가
)
, MT_DATA_TON AS (
    SELECT T.SEQ SRC,
           Z.TP     ,
           Z.POL_CD,
           Z.POL_SEQ,
           Z.POL_CLPT_IND_SEQ,
           Z.POD_CD,
           Z.POD_SEQ,
           Z.POD_CLPT_IND_SEQ,
           Z.IOC_CD ,
           SUM(Z.QTY_TTL) AS QTY_TTL,
           SUM(Z.QTY_HC_TTL) AS QTY_HC_TTL,
           SUM(Z.QTY_45_TTL) AS QTY_45_TTL
      FROM (
              SELECT TP         ,
                     POL_CD     ,
                     POL_SEQ    ,
                     POL_CLPT_IND_SEQ,
                     POD_CD     ,
                     POD_SEQ    ,
                     POD_CLPT_IND_SEQ,
                     4 AS IOC_CD,
                     QTY_TTL,
                     QTY_HC_TTL,
                     QTY_45_TTL
                FROM BKG_DATA_TON
               WHERE BKG_CGO_TP_CD = 'M'
           ) Z,
           COPY_TON T
     WHERE T.SEQ <= 4
  GROUP BY T.SEQ   ,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           Z.POL_CLPT_IND_SEQ,
           Z.POD_CD,
           Z.POD_SEQ,
           Z.POD_CLPT_IND_SEQ,
           Z.IOC_CD
)
, ALL_DATA_TON AS (
    SELECT 1 AS SRC,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD,
           (
             CASE
                  WHEN Z.TP = '1'
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_TTL, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_TTL), DECODE(Z.SRC, 1, Z.QTY_TTL)))
              END
           ) AS QTY_TTL,
           (
             CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_HC_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_HC_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_HC_TTL, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_HC_TTL), DECODE(Z.SRC, 1, Z.QTY_HC_TTL)))
              END
           ) AS QTY_HC_TTL,
           (
             CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_45_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_45_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_45_TTL, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_45_TTL), DECODE(Z.SRC, 1, Z.QTY_45_TTL)))
              END
           ) AS QTY_45_TTL,           
           MAX(P.PAST) AS PAST
      FROM (
              SELECT SRC   ,
                     TP    ,
                     POL_CD,
                     POL_SEQ,
                     POL_CLPT_IND_SEQ,
                     POD_CD ,
                     POD_SEQ,
                     POD_CLPT_IND_SEQ,
                     IOC_CD,
                     QTY_TTL,
                     0 AS QTY_HC_TTL,
                     0 AS QTY_45_TTL
                FROM ALC_DATA_TON
              UNION ALL
              SELECT SRC   ,
                     TP    ,
                     POL_CD,
                     POL_SEQ,
                     POL_CLPT_IND_SEQ,
                     POD_CD ,
                     POD_SEQ,
                     POD_CLPT_IND_SEQ,
                     IOC_CD,
                     QTY_TTL,
                     QTY_HC_TTL AS QTY_HC_TTL,
                     QTY_45_TTL AS QTY_45_TTL
                FROM BKG_DATA_TON
               WHERE BKG_CGO_TP_CD = 'F'
           ) Z,
           PORT_SEQ_TON P
     WHERE P.TP = Z.TP
       AND P.POL_CD = Z.POL_CD
       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ
       AND P.POD_CD = Z.POD_CD
       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ
  GROUP BY Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD
    UNION ALL
    SELECT Z.SRC   ,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD,
           SUM(Z.QTY_TTL) AS QTY_TTL,
           SUM(Z.QTY_HC_TTL) AS QTY_HC_TTL,
           SUM(Z.QTY_45_TTL) AS QTY_45_TTL,
           MAX(P.PAST) AS PAST
      FROM BKG_DATA_TON Z,
           PORT_SEQ_TON P
     WHERE Z.BKG_CGO_TP_CD = 'F'
       AND P.TP = Z.TP
       AND P.POL_CD = Z.POL_CD
       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ
       AND P.POD_CD = Z.POD_CD
       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ
  GROUP BY Z.SRC   ,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD
    UNION ALL
    SELECT 3 AS SRC,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD,
           (
             CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_TTL, 0) ,DECODE(Z.IOC_CD || '' || P.TP ,'11', DECODE(Z.SRC, 2, Z.QTY_TTL, 0) ,DECODE(Z.SRC, 3, Z.QTY_TTL, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_TTL), DECODE(Z.SRC, 3, Z.QTY_TTL)))
              END
           ) AS QTY_TTL,
           (
             CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_HC_TTL, 0) ,DECODE(Z.IOC_CD || '' || P.TP ,'11', DECODE(Z.SRC, 2, Z.QTY_HC_TTL, 0) ,DECODE(Z.SRC, 3, Z.QTY_HC_TTL, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_HC_TTL), DECODE(Z.SRC, 3, Z.QTY_HC_TTL)))
              END
           ) AS QTY_HC_TTL,
           (
             CASE
                  WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량
                  THEN SUM(DECODE(P.PAST ,'Y', DECODE(Z.SRC, 2, Z.QTY_45_TTL, 0) ,DECODE(Z.IOC_CD || '' || P.TP ,'11', DECODE(Z.SRC, 2, Z.QTY_45_TTL, 0) ,DECODE(Z.SRC, 3, Z.QTY_45_TTL, 0))))
                  ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_45_TTL), DECODE(Z.SRC, 3, Z.QTY_45_TTL)))
              END
           ) AS QTY_45_TTL,
           MAX(P.PAST) AS PAST
      FROM (
              SELECT SRC    ,
                     TP     ,
                     POL_CD ,
                     POL_SEQ,
                     POL_CLPT_IND_SEQ,
                     POD_CD ,
                     POD_SEQ,
                     POD_CLPT_IND_SEQ,
                     IOC_CD ,
                     QTY_TTL,
                     QTY_HC_TTL AS QTY_HC_TTL,
                     QTY_45_TTL AS QTY_45_TTL
                FROM FCT_DATA_TON
              UNION ALL
              SELECT SRC    ,
                     TP     ,
                     POL_CD ,
                     POL_SEQ,
                     POL_CLPT_IND_SEQ,
                     POD_CD ,
                     POD_SEQ,
                     POD_CLPT_IND_SEQ,
                     IOC_CD ,
                     QTY_TTL,
                     QTY_HC_TTL AS QTY_HC_TTL,
                     QTY_45_TTL AS QTY_45_TTL
                FROM BKG_DATA_TON
               WHERE BKG_CGO_TP_CD = 'F'
           ) Z,
           PORT_SEQ_TON P
     WHERE P.TP = Z.TP
       AND P.POL_CD = Z.POL_CD
       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ
       AND P.POD_CD = Z.POD_CD
       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ
  GROUP BY Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD
    UNION ALL
    SELECT 4 AS SRC,
           Z.TP      ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD  ,
           SUM(Z.QTY_TTL) AS QTY_TTL ,
           0 AS QTY_HC_TTL ,
           0 AS QTY_45_TTL ,
           MAX(P.PAST) AS PAST
      FROM ALC_DATA_TON Z,
           PORT_SEQ_TON P
     WHERE P.TP = Z.TP
       AND P.POL_CD = Z.POL_CD
       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ
       AND P.POD_CD = Z.POD_CD
       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ
  GROUP BY Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD
    UNION ALL
    SELECT Z.SRC    ,
           Z.TP     ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD ,
           SUM(Z.QTY_TTL) AS QTY_TTL ,
           SUM(Z.QTY_HC_TTL) AS QTY_HC_TTL ,
           SUM(Z.QTY_45_TTL) AS QTY_45_TTL ,
           MAX(P.PAST) AS PAST
      FROM MT_DATA_TON Z,
           PORT_SEQ_TON P
     WHERE P.TP = Z.TP
       AND P.POL_CD = Z.POL_CD
       AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ
       AND P.POD_CD = Z.POD_CD
       AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ
  GROUP BY Z.SRC   ,
           Z.TP    ,
           Z.POL_CD,
           Z.POL_SEQ,
           P.POL_CLPT_IND_SEQ1,
           Z.POD_CD,
           Z.POD_SEQ,
           P.POD_CLPT_IND_SEQ1,
           Z.IOC_CD
)
, PORT_MAP_TON AS (
    SELECT C1.SEQ AS SRC   ,
           C2.SEQ AS IOC_CD,
           P.PORT_CD ,
           P.YD_CD   ,
           P.CLPT_SEQ,
           P.CLPT_IND_SEQ,
           P.FLG     ,
--           P.PAST    ,
           P.BSA
      FROM CUR_PORTS_TON P ,
           COPY_TON      C1,
           COPY_TON      C2
     WHERE C1.SEQ <= 4
       AND C2.SEQ <= 5
)
, WK_PRD_TON AS (
    SELECT MAX(A.SLS_FM_DT) AS WK_FM_DT
      FROM MAS_WK_PRD A
     WHERE (A.COST_YR,COST_WK) =
           (SELECT SUBSTR(SLS_YRMON,1,4),COST_WK
              FROM MAS_MON_VVD CMV,
                   PARAMS_TON      P
             WHERE CMV.TRD_CD     = SAQ_GET_REP_TRD_FNC(P.RLANE_CD)
               AND CMV.RLANE_CD   = P.RLANE_CD
               AND CMV.VSL_CD     = P.VSL_CD
               AND CMV.SKD_VOY_NO = P.SKD_VOY_NO
               AND CMV.DIR_CD     = P.SKD_DIR_CD
               AND CMV.DELT_FLG   = 'N'
               AND ROWNUM         = 1)
),
VOID_CALC_BASIC_TON AS (
SELECT DISTINCT RLANE_CD, 
       VSL_CD||SKD_VOY_NO||SKD_DIR_CD AS VVD,
       --YD_CD ,
       (SELECT WK_FM_DT
          FROM WK_PRD_TON
       ) AS WK_FM_DT       
  FROM CUR_PORTS_TON
)
, SPC_BKG_DATA_TON AS (
  SELECT PS.RLANE_CD, PS.VSL_CD, PS.SKD_VOY_NO, PS.SKD_DIR_CD,
         DECODE(SRC, 1, 'A', 2, 'B', 3, 'F', 4, 'M') AS SRC,
         DECODE(IOC_CD, 1, 'OCN', 2, 'IPC', 3, 'T/S', 4, 'MT', 5, 'TOTAL') AS IOC_CD,
         PORT_CD ,
         PORT_SEQ,
         FLG     ,
         LOD_TTL ,
         DIS_TTL ,
         ON_TTL  ,
         
         ROUND(NVL(SPC_LANE_RGST_QTY_FNC('HC',VCB.RLANE_CD, VCB.WK_FM_DT, SUBSTR(PORT_CD,1,5),  VCB.VVD, Z.BSA, NVL(Z.ON_HC_TTL, 0)),0)) +
         ROUND(NVL(SPC_LANE_RGST_QTY_FNC('45',VCB.RLANE_CD, VCB.WK_FM_DT, SUBSTR(PORT_CD,1,5),  VCB.VVD, Z.BSA, NVL(Z.ON_45_TTL, 0)),0)) AS ON_HC_TTL,
         PAST    ,
         BSA
    FROM VOID_CALC_BASIC_TON VCB,
         (
            SELECT Z.SRC     ,
                   Z.IOC_CD  ,
                   Z.PORT_CD ,
                   Z.PORT_SEQ,
                   Z.FLG     ,
                   Z.LOD_TTL ,
                   (Z.DIS_TTL + Z.PRE_TTL) AS DIS_TTL,
                   SUM(Z.ON_TTL + Z.LOD_TTL - Z.DIS_TTL - Z.PRE_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_TTL,
                   
                   Z.LOD_HC_TTL ,
                   (Z.DIS_HC_TTL + Z.PRE_HC_TTL) AS DIS_HC_TTL,
                   SUM(Z.ON_HC_TTL + Z.LOD_HC_TTL - Z.DIS_HC_TTL - Z.PRE_HC_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_HC_TTL,
                   
                   Z.LOD_45_TTL ,
                   (Z.DIS_45_TTL + Z.PRE_45_TTL) AS DIS_45_TTL,
                   SUM(Z.ON_45_TTL + Z.LOD_45_TTL - Z.DIS_45_TTL - Z.PRE_45_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD ORDER BY PORT_SEQ) AS ON_45_TTL,
                   
                   Z.PAST,
                   Z.BSA ,
                   '' AS T
              FROM (
                      SELECT M.SRC   ,
                             M.IOC_CD,
                             NVL(NVL(M.YD_CD, M.PORT_CD), 'TOTAL') AS PORT_CD,
                             NVL(M.CLPT_SEQ, 0) AS PORT_SEQ,
                             M.FLG ,
                             Z.PAST, 
                             M.BSA ,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_TTL)) AS LOD_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_TTL)) AS DIS_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_TTL)) AS PRE_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_TTL), 0) AS ON_TTL,
                             
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_HC_TTL)) AS LOD_HC_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_HC_TTL)) AS DIS_HC_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_HC_TTL)) AS PRE_HC_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_HC_TTL), 0) AS ON_HC_TTL,
                             
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_45_TTL)) AS LOD_45_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_45_TTL)) AS DIS_45_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_45_TTL)) AS PRE_45_TTL,
                             DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_45_TTL), 0) AS ON_45_TTL
                        FROM (
                                SELECT A.SRC,
                                       MIN(A.PAST) OVER (PARTITION BY A.SRC, A.IOC_CD, A.PORT_CD) AS PAST,
                                       A.IOC_CD,
                                       A.SEQ,
                                       A.PORT_CD,
                                       A.PORT_SEQ,
                                       A.CLPT_IND_SEQ,
                                       A.LOD_TTL,
                                       A.DIS_TTL,
                                       A.PRE_TTL,
                                       
                                       A.LOD_HC_TTL,
                                       A.DIS_HC_TTL,
                                       A.PRE_HC_TTL,
                                       
                                       A.LOD_45_TTL,
                                       A.DIS_45_TTL,
                                       A.PRE_45_TTL,
                                       
                                       A.TP
                                  FROM (    
                                        SELECT A.SRC,
                                               A.PAST,
                                               Q.SEQ,
                                               DECODE(T.SEQ, 2, 5, A.IOC_CD)                        AS IOC_CD ,
                                               DECODE(Q.SEQ, 1, A.POL_CD, A.POD_CD)                 AS PORT_CD,
                                               DECODE(Q.SEQ, 1, A.POL_SEQ, A.POD_SEQ)              AS PORT_SEQ,
                                               DECODE(Q.SEQ, 1, A.POL_CLPT_IND_SEQ1, A.POD_CLPT_IND_SEQ1)              AS CLPT_IND_SEQ,
                                               DECODE(Q.SEQ, 1, A.QTY_TTL, 0)                       AS LOD_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_TTL), 0) AS DIS_TTL,
                                               DECODE(A.TP, '1', A.QTY_TTL, 0)                      AS PRE_TTL,
                                               
                                               DECODE(Q.SEQ, 1, A.QTY_HC_TTL, 0)                       AS LOD_HC_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_HC_TTL), 0) AS DIS_HC_TTL,
                                               DECODE(A.TP, '1', A.QTY_HC_TTL, 0)                      AS PRE_HC_TTL,
                                               
                                               DECODE(Q.SEQ, 1, A.QTY_45_TTL, 0)                       AS LOD_45_TTL,
                                               DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_45_TTL), 0) AS DIS_45_TTL,
                                               DECODE(A.TP, '1', A.QTY_45_TTL, 0)                      AS PRE_45_TTL,                                               
                                               
                                               --A.QTY_HC_TTL                                         AS QTY_HC_TTL,
                                               --A.QTY_45_TTL                                         AS QTY_45_TTL,
                                               A.TP,
                                               '' AS T
                                          FROM ALL_DATA_TON A,
                                               COPY_TON     Q,
                                               COPY_TON     T
                                         WHERE Q.SEQ IN (DECODE(A.TP, 1, '2', 2, '1'), DECODE(A.TP, 3, '1', 2, '2'))
                                           AND T.SEQ <= 2
                                           AND DECODE(A.SRC, 4, A.IOC_CD, 1) <> DECODE(A.SRC, 4, 4, 0)
                                       ) A
                             ) Z,
                             PORT_MAP_TON M
                       WHERE Z.SRC    (+) = M.SRC
                         AND Z.IOC_CD (+) = M.IOC_CD
                         AND Z.PORT_CD(+) = NVL(M.YD_CD, M.PORT_CD)
                         AND Z.CLPT_IND_SEQ(+) = M.CLPT_IND_SEQ
                    GROUP BY GROUPING SETS (
                                             (M.SRC, M.IOC_CD, M.CLPT_SEQ, NVL(M.YD_CD, M.PORT_CD), M.FLG, Z.PAST, M.BSA),
                                             (M.SRC, M.IOC_CD)
                                           )
                    ORDER BY M.SRC   ,
                             M.IOC_CD,
                             NVL(M.CLPT_SEQ, 0)
                   ) Z
         ) Z,
         PARAMS_TON PS
   WHERE PORT_SEQ > 0
     AND SRC = '2'
ORDER BY Z.SRC     ,
         Z.PORT_SEQ,
         Z.IOC_CD
)
, SPC_ORG_RESULT_DATA_TON AS (
SELECT 
S.RLANE_CD, S.VSL_CD, S.SKD_VOY_NO, S.SKD_DIR_CD, S.PORT_CD
, MAX(S.ON_TTL) ON_TTL
, MAX(S.ON_OCN) ON_OCN
, MAX(S.ON_IPC) ON_IPC
, MAX(S.ON_TS) ON_TS
, MAX(S.ON_MT) ON_MT
, MAX(S.LOD_TTL) LOD_TTL
, MAX(S.LOD_OCN) LOD_OCN
, MAX(S.LOD_IPC) LOD_IPC
, MAX(S.LOD_TS) LOD_TS
, MAX(S.LOD_MT) LOD_MT
, MAX(S.DIS_TTL) DIS_TTL
, MAX(S.DIS_OCN) DIS_OCN
, MAX(S.DIS_IPC) DIS_IPC
, MAX(S.DIS_TS) DIS_TS
, MAX(S.DIS_MT) DIS_MT
FROM (
SELECT 
S.RLANE_CD, S.VSL_CD, S.SKD_VOY_NO, S.SKD_DIR_CD, S.PORT_CD
, SUM(DECODE(S.IOC_CD,'TOTAL',S.ON_TTL,0)) ON_TTL
, SUM(DECODE(S.IOC_CD,'OCN',S.ON_TTL,0)) ON_OCN
, SUM(DECODE(S.IOC_CD,'IPC',S.ON_TTL,0)) ON_IPC
, SUM(DECODE(S.IOC_CD,'T/S',S.ON_TTL,0)) ON_TS
, SUM(DECODE(S.IOC_CD,'MT',S.ON_TTL,0)) ON_MT
, SUM(DECODE(S.IOC_CD,'TOTAL',S.LOD_TTL,0)) LOD_TTL
, SUM(DECODE(S.IOC_CD,'OCN',S.LOD_TTL,0)) LOD_OCN
, SUM(DECODE(S.IOC_CD,'IPC',S.LOD_TTL,0)) LOD_IPC
, SUM(DECODE(S.IOC_CD,'T/S',S.LOD_TTL,0)) LOD_TS
, SUM(DECODE(S.IOC_CD,'MT',S.LOD_TTL,0)) LOD_MT
, SUM(DECODE(S.IOC_CD,'TOTAL',S.DIS_TTL,0)) DIS_TTL
, SUM(DECODE(S.IOC_CD,'OCN',S.DIS_TTL,0)) DIS_OCN
, SUM(DECODE(S.IOC_CD,'IPC',S.DIS_TTL,0)) DIS_IPC
, SUM(DECODE(S.IOC_CD,'T/S',S.DIS_TTL,0)) DIS_TS
, SUM(DECODE(S.IOC_CD,'MT',S.DIS_TTL,0)) DIS_MT
FROM SPC_BKG_DATA_TON S
WHERE 1=1
GROUP BY S.RLANE_CD, S.VSL_CD, S.SKD_VOY_NO, S.SKD_DIR_CD, S.PORT_CD, S.IOC_CD
) S
GROUP BY S.RLANE_CD, S.VSL_CD, S.SKD_VOY_NO, S.SKD_DIR_CD, S.PORT_CD
)
/** SPC BOTTLENECK TON 끝 **/

, EQR_SMY_03_TTL AS (
SELECT 
E.RLANE_CD
, E.VSL_CD
, E.SKD_VOY_NO
, E.SKD_DIR_CD
, E.PORT_CD
, E.PORT_SEQ
, E.DP_SEQ
, E.SEQ
, E.ITEM_TITLE
, E.ITEM_TP_CD
, E.TTL_TEU
,
CASE
WHEN E.DP_SEQ='2' AND E.SEQ='1' THEN 
    CASE 
    WHEN NVL((SELECT B.TTL_WT FROM BSA_DATA_TPSZ B WHERE ROWNUM=1),1) <> 0 
    THEN TRUNC(T.ON_TTL / NVL((SELECT B.TTL_WT FROM BSA_DATA_TPSZ B WHERE ROWNUM=1),1) * 100,2)
    ELSE 0
    END
WHEN E.DP_SEQ='2' AND E.SEQ='2' THEN
    CASE 
    WHEN NVL((SELECT B.TTL_WT FROM BSA_DATA_TPSZ B WHERE ROWNUM=1),1) <> 0 
    THEN TRUNC((T.ON_TTL - T.ON_MT) / NVL((SELECT B.TTL_WT FROM BSA_DATA_TPSZ B WHERE ROWNUM=1),1) * 100,2)
    ELSE 0
    END
WHEN E.DP_SEQ='2' AND E.SEQ='3' THEN
    CASE 
    WHEN NVL((SELECT B.TTL_WT FROM BSA_DATA_TPSZ B WHERE ROWNUM=1),1) <> 0 
    THEN TRUNC(T.ON_MT / NVL((SELECT B.TTL_WT FROM BSA_DATA_TPSZ B WHERE ROWNUM=1),1) * 100,2)
    ELSE 0
    END
WHEN E.DP_SEQ='3' AND E.SEQ='1' THEN T.ON_TTL
WHEN E.DP_SEQ='3' AND E.SEQ='2' THEN (T.ON_TTL - T.ON_MT)
WHEN E.DP_SEQ='3' AND E.SEQ='3' THEN T.ON_MT
WHEN E.DP_SEQ='4' AND E.SEQ='1' THEN T.LOD_TTL - T.LOD_MT
WHEN E.DP_SEQ='4' AND E.SEQ='2' THEN T.LOD_OCN
WHEN E.DP_SEQ='4' AND E.SEQ='3' THEN T.LOD_IPC
WHEN E.DP_SEQ='4' AND E.SEQ='4' THEN T.LOD_TS
WHEN E.DP_SEQ='6' AND E.SEQ='1' THEN T.DIS_TTL - T.DIS_MT
WHEN E.DP_SEQ='6' AND E.SEQ='2' THEN T.DIS_OCN
WHEN E.DP_SEQ='6' AND E.SEQ='3' THEN T.DIS_IPC
WHEN E.DP_SEQ='6' AND E.SEQ='4' THEN T.DIS_TS
WHEN E.DP_SEQ='7' AND E.SEQ='1' THEN T.DIS_MT
ELSE E.TTL_WT
END TTL_WT
, E.TTL_BOX
, E.TTL_20
, E.TTL_40
, E.TTL_HC
, E.TTL_45
, E.BOX_D2
, E.BOX_D4
, E.BOX_D5
, E.BOX_D7
, E.BOX_R2
, E.BOX_R5
, E.BOX_R9
, E.BOX_O2
, E.BOX_O4
, E.BOX_S2
, E.BOX_S4
, E.BOX_F2
, E.BOX_F4
, E.BOX_F5
, E.BOX_A2
, E.BOX_A4
, E.BOX_A5
FROM EQR_SMY_02_TPSZ E, SPC_ORG_RESULT_DATA_TON T
WHERE 1=1
AND E.RLANE_CD = T.RLANE_CD(+)
AND E.VSL_CD = T.VSL_CD(+)
AND E.SKD_VOY_NO = T.SKD_VOY_NO(+)
AND E.SKD_DIR_CD = T.SKD_DIR_CD(+)
AND E.PORT_CD = T.PORT_CD(+)
#if(${s_pol_cd} != '') 
AND E.PORT_CD IN (
#foreach($key IN ${s_pol_cd})
    #if($velocityCount == 1 )
        '$key'
    #else
        ,'$key'
    #end                
#end
)
#end
ORDER BY E.RLANE_CD, E.VSL_CD, E.SKD_VOY_NO, E.SKD_DIR_CD, E.PORT_CD, E.DP_SEQ, E.SEQ
)
SELECT L.* FROM (
SELECT 
X.RLANE_CD, X.VSL_CD, X.SKD_VOY_NO, X.SKD_DIR_CD, X.PORT_CD, X.PORT_SEQ
, X.DP_SEQ
, X.SEQ
, X.ITEM_TITLE
, X.ITEM_TP_CD
, X.TTL_TEU
, X.TTL_WT
, X.TTL_BOX
, X.TTL_20
, X.TTL_40
, X.TTL_HC
, X.TTL_45
, X.BOX_D2
, X.BOX_D4
, X.BOX_D5
, X.BOX_D7
, X.BOX_R2
, X.BOX_R5
, X.BOX_R9
, X.BOX_O2
, X.BOX_O4
, X.BOX_S2
, X.BOX_S4
, X.BOX_F2
, X.BOX_F4
, X.BOX_F5
, X.BOX_A2
, X.BOX_A4
, X.BOX_A5
FROM EQR_SMY_03_TTL X
WHERE 1=1
--AND X.DP_SEQ NOT IN ('5')
AND X.DP_SEQ||X.SEQ||'' <> '73'
ORDER BY X.RLANE_CD, X.VSL_CD, X.SKD_VOY_NO, X.SKD_DIR_CD, X.PORT_SEQ, X.PORT_CD, X.DP_SEQ, X.SEQ
) L
UNION ALL
SELECT L.* FROM (
SELECT
/** 10. TTL  **/
X.RLANE_CD, X.VSL_CD, X.SKD_VOY_NO, X.SKD_DIR_CD, 'TTL' PORT_CD, TO_NUMBER('') PORT_SEQ
, MAX(X.DP_SEQ) DP_SEQ
, MAX(X.SEQ) SEQ
, MAX(X.ITEM_TITLE) ITEM_TITLE
, MAX(X.ITEM_TP_CD) ITEM_TP_CD
, CASE
WHEN X.DP_SEQ IN ('1','2') THEN (SELECT T.TTL_TEU FROM EQR_SMY_03_TTL T WHERE T.PORT_CD=@[last_pol_cd] AND T.DP_SEQ=X.DP_SEQ AND T.SEQ=X.SEQ AND ROWNUM=1)
ELSE SUM(X.TTL_TEU)
END TTL_TEU
, CASE
WHEN X.DP_SEQ IN ('1','2') THEN (SELECT T.TTL_WT FROM EQR_SMY_03_TTL T WHERE T.PORT_CD=@[last_pol_cd] AND T.DP_SEQ=X.DP_SEQ AND T.SEQ=X.SEQ AND ROWNUM=1)
ELSE SUM(X.TTL_WT)
END TTL_WT
, SUM(X.TTL_BOX) TTL_BOX
, SUM(X.TTL_20) TTL_20
, SUM(X.TTL_40) TTL_40
, CASE
WHEN X.DP_SEQ IN ('1','2') THEN (SELECT T.TTL_HC FROM EQR_SMY_03_TTL T WHERE T.PORT_CD=@[last_pol_cd] AND T.DP_SEQ=X.DP_SEQ AND T.SEQ=X.SEQ AND ROWNUM=1)
ELSE SUM(X.TTL_HC)
END TTL_HC
, CASE
WHEN X.DP_SEQ IN ('1','2') THEN (SELECT T.TTL_45 FROM EQR_SMY_03_TTL T WHERE T.PORT_CD=@[last_pol_cd] AND T.DP_SEQ=X.DP_SEQ AND T.SEQ=X.SEQ AND ROWNUM=1)
ELSE SUM(X.TTL_45)
END TTL_45
, SUM(X.BOX_D2) BOX_D2
, SUM(X.BOX_D4) BOX_D4
, SUM(X.BOX_D5) BOX_D5
, SUM(X.BOX_D7) BOX_D7
, SUM(X.BOX_R2) BOX_R2
, SUM(X.BOX_R5) BOX_R5
, SUM(X.BOX_R9) BOX_R9
, SUM(X.BOX_O2) BOX_O2
, SUM(X.BOX_O4) BOX_O4
, SUM(X.BOX_S2) BOX_S2
, SUM(X.BOX_S4) BOX_S4
, SUM(X.BOX_F2) BOX_F2
, SUM(X.BOX_F4) BOX_F4
, SUM(X.BOX_F5) BOX_F5
, SUM(X.BOX_A2) BOX_A2
, SUM(X.BOX_A4) BOX_A4
, SUM(X.BOX_A5) BOX_A5
FROM EQR_SMY_03_TTL X
WHERE 1=1
--AND X.DP_SEQ NOT IN ('5')
AND X.DP_SEQ||X.SEQ||'' <> '73'
GROUP BY X.RLANE_CD, X.VSL_CD, X.SKD_VOY_NO, X.SKD_DIR_CD, X.DP_SEQ, X.SEQ
ORDER BY X.RLANE_CD, X.VSL_CD, X.SKD_VOY_NO, X.SKD_DIR_CD, X.DP_SEQ, X.SEQ
) L			]]></sql>
			<params>
				<param name="rlane" type="12" value="" out="N"/>
				<param name="s_vvd_cd" type="12" value="" out="N"/>
				<param name="qty_tp" type="12" value="" out="N"/>
				<param name="trade" type="12" value="" out="N"/>
				<param name="subtrade" type="12" value="" out="N"/>
				<param name="s_eta_dt" type="12" value="" out="N"/>
				<param name="last_pol_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
