<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ChassisMgsetInvoiceDBDAOAddCHSCpsAuditInvoiceDetailDataCSQL">
			<desc><![CDATA[2013.06.26 조경완 [CHM-201324911-01] ALPS-CHSS-COPS 기능 Trouble Shooting을 위한 CSR
2013-12-31 한종희 선처리 CSR : Audit Result 추가
2014-01-06 한종희 선처리 CSR : Audit 기준월 변경 요청
2014-07-02 CHM-201430891, SQL 수정 (김기철-설계, 신용찬-코딩)
2015-03-24 CHM-201534566, SC EXCEPTION 로직 교체(PRICING 에서 생성된 SC EXCEPTION 반영)(김기철-설계, 신용찬-코딩)
2015-05-06 오류 로직 변경, 신용찬
                 1. 전월에 걸쳐도 오는 데이터도 오류 없음으로 인정
                 2. PDM, ID - OC 로 넘어오면, DESCREPENCY 
                    예외 ) OUT BOUND BKG이 DOOR TERM            --> COINCEDENCE  
                             OUT BOUND BKG이 CY TERM, EXCEPTION=Y --> COINCEDENCE
2016-02-19 Invoice Double Charge 오류 발생시, 기 입력된 Invoice No와 Cost Month 표시
2016-03-28 Freetime Logic 추가
                 CGM_COPS_MVMT_FND_FNC 에서 0(SC Exception), 1 넘어오는데이터를 0일때 Freedays*10 항목으로 넘김
]]></desc>
			<sql><![CDATA[
INSERT INTO CGM_LSE_CHG_DTL
(
         AGMT_OFC_CTY_CD
       , AGMT_SEQ
       , AGMT_VER_NO
       , COST_YRMON
       , CHG_SEQ
       , EQ_KND_CD
       , EQ_NO
       , INV_EQ_NO
       , INV_CUST_EQ_NO
       , CHG_CD
       , INV_EQ_ONH_LOC_NM
       , INV_EQ_ONH_DT
       , INV_EQ_OFFH_DT
       , INV_BIL_ST_DT
       , INV_BIL_END_DT
       , INV_LSE_USE_DYS
       , INV_BIL_UT_DYS
       , INV_LSE_RT_AMT
       , INV_LSE_CHG_AMT
       , INV_TAX_RT_AMT
       , INV_TAX_AMT
       , INV_LSE_CHG_TTL_AMT
       , PAY_LSE_USE_DYS
       , PAY_BIL_UT_DYS
       , PAY_LSE_RT_AMT
       , PAY_LSE_CHG_AMT
       , PAY_TAX_RT_AMT
       , PAY_TAX_AMT
       , PAY_LSE_CHG_TTL_AMT
       , EQ_BIL_ST_DT
       , EQ_BIL_END_DT
       , LSE_CHG_AUD_STS_CD
       , PAY_LSE_CHG_STS_CD
       , LSE_CHG_AUD_RSLT_RSN_CD
       , PAY_CHG_AUD_RMK
       , INV_BKG_NO
       , INV_SC_NO
       , INV_NO
       , INV_REF_NO
       , EQ_TPSZ_CD
       , EQ_FM_MVMT_CD
       , EQ_FM_YD_CD
       , EQ_FM_MVMT_DT
       , EQ_TO_MVMT_CD
       , EQ_TO_YD_CD
       , EQ_TO_MVMT_DT
       , LSE_BIL_UT_DYS
       , LSE_USE_DYS
       , LSE_TAX_RT_AMT
       , LSE_RT_AMT
       , LSE_CHG_AMT
       , LSE_TAX_AMT
       , LSE_CHG_TTL_AMT
       , INV_BKG_TERM_CD
       , INV_CUST_CNT_CD
       , INV_CUST_SEQ
       , ACCT_CD
       , COST_CD
       , INV_EQ_OFFH_LOC_NM
       , EQ_MTY_MVMT_DT
       , EQ_MTY_MVMT_YD_CD
       , EQ_TO_SC_NO
       , EQ_TO_BKG_NO
       , EQ_TO_BKG_TERM_CD
       , CRE_USR_ID
       , CRE_DT
       , UPD_USR_ID
       , UPD_DT
       , INV_GATE_ACT_ID
       , INV_BIL_MOD_RMK
       , COST_YRMON_SEQ
       , EQ_BKG_IO_BND_CD
       , EQ_EXPT_FLG 
)
SELECT   @[agmt_ofc_cty_cd] AGMT_OFC_CTY_CD
       , @[agmt_seq] AGMT_SEQ
       , @[agmt_ver_no] VER_NO
       , @[cost_yrmon]
       , ROW_NUMBER()  OVER (PARTITION BY INV_CHSS_NO ORDER BY FM_DT) SEQ
       , 'Z' EQ_KND
       , INV_CHSS_NO
       , EQ_NO
       , INV_CNTR_NO
       , CHG_CD
	   , INV_EQ_ONH_LOC_NM
       , INV_EQ_ONH_DT
       , INV_EQ_OFFH_DT
       , INV_BIL_ST_DT
       , INV_BIL_END_DT
       , INV_LSE_USE_DYS
       , INV_BIL_UT_DYS
       , INV_LSE_RT_AMT
       , INV_LSE_CHG_AMT
       , INV_TAX_AMT
       , TAX_SMRY_AMT
       , INV_SMRY_AMT
	   , INV_LSE_USE_DYS
       , INV_BIL_UT_DYS
       , INV_LSE_RT_AMT
       , INV_LSE_CHG_AMT
       , INV_TAX_AMT
       , TAX_SMRY_AMT
       , INV_SMRY_AMT
       , BILL_FM_DT
       , BILL_TO_DT
       , SUBSTR(ADT_RSLT,1,1) ADT_RSLT
       , SUBSTR(ADT_RSLT,1,1) ADT_RSLT
       , REASON_CD
	   , CASE WHEN SUBSTR(ADT_RSLT,1,1) = 'I' THEN CASE WHEN CNTR_CHK 	= 1 						THEN 'Other company container movement, ' 				END||
                                                   CASE WHEN CHZ_CHK 	= 1     					THEN 'Other lease term movement, ' 						END||
                                                   CASE WHEN MVMT_CHK 	= 1    						THEN 'Movement is not found, ' 							END||
		                                           CASE WHEN PCT_CHK 	= 1      					THEN 'PCT-STE moves involved, ' 						END||
		                                           CASE WHEN DUP_CHK 	= 1     					THEN 'Invoice is a double charge '||  DUP_DESC || ', '	END||
                                                   CASE WHEN SC_EXP_CHK = 1   						THEN 'Not S/C exception apply booking, ' 				END||
                                                   CASE WHEN AREA_CHK 	= 1     					THEN 'Out of CPS SCC area, ' 							END||
                                                   CASE WHEN TO_MVMT_CHK= 1  AND REASON_CD0 = '0' 	THEN 'To movement is out of month (Dup), ' 				END||
                                                   CASE WHEN TO_MVMT_CHK= 1  AND REASON_CD0 = '4' 	THEN 'To movement is out of month (No Dup), '			END||
                                                   CASE WHEN YARD_CHK 	= 1 						THEN 'Out of CPS yard code, ' 							END||
                                                   CASE WHEN ONT_CHG_CHK= 1 						THEN 'Not on Terminal charge billing yard code, '		END||
                                                   CASE WHEN DOM_CHK 	= 1 						THEN 'Not domestic usage billing yard code, '			END
              WHEN SUBSTR(ADT_RSLT,1,1) = 'D' THEN CASE WHEN BILL_DAYS = (FT_DYS+FT_DYS_2) AND (FT_DYS+FT_DYS_2) > 0 THEN 'FreeTime(' || (FT_DYS+FT_DYS_2) || 'Days),' END||
                                                   CASE WHEN MULTI_MOVE_CHK	= 1      				THEN 'Multi Move Credit, ' 						        END||
                                                   CASE WHEN NO_CHG_CHK	= 1      					THEN 'STE Shuttle, WCCP account, ' 						END
         END AS ERR_RMK
       , CASE WHEN BKG_CGO_TP_CD = 'F' AND FM_MVMT_CD <> 'MT' THEN NVL(BKG_NO,SUBSTR(VRFY_RSLT_DESC,1,12)) ELSE '' END AS BKG_NO
       , CASE WHEN BKG_CGO_TP_CD = 'F' AND FM_MVMT_CD <> 'MT' THEN DECODE(BKG_NO,NULL,RTRIM(SUBSTR(VRFY_RSLT_DESC,13,9)),SC_NO) ELSE '' END AS SC_NO
       , @[inv_no]
       , @[inv_ref_no]
       , INV_CUST_EQ_TPSZ_NM
       , FM_MVMT_CD
       , FM_YD
       , FM_DT
       , TO_MVMT_CD
       , TO_YD
       , TO_DT
       , DECODE(FM_DT, NULL, '',BILL_DAYS) BILL_DAYS
       , DECODE(FM_DT, NULL, '',USED_DAYS) USED_DAYS
       , CHSS_POOL_TAX_RT
       , CHSS_POOL_RT_AMT
       , BILL_RATE_AMT
       , BILL_TAX_AMT
       , BILL_RATE_AMT + BILL_TAX_AMT
       , CASE WHEN BKG_CGO_TP_CD = 'F' AND FM_MVMT_CD <> 'MT' THEN INV_BKG_TERM_CD ELSE '' END AS INV_BKG_TERM_CD
       , CASE WHEN BKG_CGO_TP_CD = 'F' AND FM_MVMT_CD <> 'MT' THEN DECODE(BKG_NO,NULL,RTRIM(SUBSTR(VRFY_RSLT_DESC,22,2)),INV_CUST_CNT_CD) ELSE '' END AS INV_CUST_CNT_CD
       , CASE WHEN BKG_CGO_TP_CD = 'F' AND FM_MVMT_CD <> 'MT' THEN DECODE(BKG_NO,NULL,RTRIM(SUBSTR(VRFY_RSLT_DESC,25,6)),INV_CUST_SEQ) ELSE '' END AS INV_CUST_SEQ
       , '510851' AS ACCT_CD
       , 'EQCZNP' AS COST_CD
       , INV_BKG_NO
       , MT_DT
       , MT_YD
       , TO_SC_NO
       , TO_BKG_NO
       , TO_BKG_TERM
       , @[cre_usr_id]
       , SYSDATE
       , @[upd_usr_id]
       , SYSDATE
       , INV_GATE_ACT_ID
       , INV_BIL_MOD_RMK
       , (
           SELECT   COST_YRMON_SEQ
           FROM     CGM_LSE_CHG_HDR
           WHERE    1 = 1
           AND      AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
           AND      AGMT_SEQ 	    = @[agmt_seq]
           AND      COST_YRMON 	    = @[cost_yrmon]
           AND      CHG_CRE_SEQ 	= @[chg_cre_seq]
         ) AS COST_YRMON_SEQ
       , CASE WHEN BKG_CGO_TP_CD = 'F' AND FM_MVMT_CD <> 'MT' THEN SUBSTR(FM_ID,35,1) ELSE '' END AS EQ_BKG_IO_BND_CD
       , CASE WHEN  FM_MVMT_CD IN ('OP','ID') AND SUBSTR(FM_ID,15,1) <> 'D' THEN DECODE(SC_EXP_CHK,0,'Y','N') ELSE 'N' END AS EQ_EXPT_FLG
FROM     (
           SELECT   A.INV_CHSS_NO
		          , A.INV_CNTR_NO
                  , A.CHG_CD
                  , A.INV_EQ_ONH_DT
                  , A.INV_EQ_OFFH_DT
                  , A.INV_BIL_ST_DT
                  , A.INV_BIL_END_DT
                  , A.INV_LSE_USE_DYS
                  , A.INV_BIL_UT_DYS
                  , A.INV_LSE_RT_AMT
                  , A.INV_LSE_CHG_AMT
                  , A.INV_TAX_AMT
                  , A.INV_NO
                  , A.INV_EQ_ONH_LOC_NM
                  , A.INV_CUST_EQ_TPSZ_NM
                  , A.TAX_SMRY_AMT
                  , A.INV_SMRY_AMT
                  , A.VRFY_RSLT_DESC
                  , A.INV_BKG_NO
                  , A.FM_ID
                  , A.INV_GATE_ACT_ID
                  , A.INV_BIL_MOD_RMK
                  , A.EQ_NO
                  , A.BKG_CGO_TP_CD
                  , A.CNTR_TPSZ_CD
                  , A.FM_CHSS_NO
                  , A.FM_MVMT_CD
                  , A.FM_YD
                  , A.FM_DT
                  , A.BKG_NO
                  , A.FM_SCC_CD
                  , A.TERM_CD
                  , A.SC_NO
                  , A.OB_CNTR_FLG
                  , A.FCNTR_FLG
                  , A.CNTR_CHK
                  , A.CHZ_CHK
                  , A.MVMT_CHK
                  , A.AREA_CHK
                  , A.YARD_CHK
                  , A.ONT_CHG_CHK
                  , A.DOM_CHK
                  , A.SC_EXP_CHK
                  , A.FT_DYS
                  , A.DUP_CHK
                  , A.TO_ID
                  , A.FM_INF1
                  , A.DDCT_TP_CD
                  , A.CHSS_POOL_RT_AMT
                  , A.CHSS_POOL_TAX_RT
                  , A.AMT_AUD_FLG
                  , A.DMST_ON_TML_CHG_FLG
                  , A.DMST_PD_CHG_FLG
                  , A.ON_TML_CHG_FLG
                  , A.TO_CHSS_NO
                  , A.TO_MVMT_CD
                  , A.TO_YD
                  , A.TO_DT
                  , A.TO_MVMT_CHK
                  , A.TO_MVMT_CHK2
                  , A.ERR_CHK0
                  , A.PCT_CHK
                  , A.MULTI_MOVE_CHK
                  , A.NO_CHG_CHK
                  , A.BILL_FM_DT
                  , A.BILL_TO_DT
                  , A.MT_DT
                  , A.MT_YD
                  , A.TO_SC_NO
                  , A.TO_BKG_NO
                  , A.TO_BKG_TERM
                  , A.DUP_DESC
                  , A.DEDUCT_DAYS1
                  , A.DEDUCT_DAYS2
                  , A.DEDUCT_DAY3
                  , A.USED_DAYS
                  , A.REASON_CD0
                  , A.TO_MVMT_CHK3
                  , A.FM_ID_2
                  , A.BILL_DAYS
                  , A.BILL_RATE_AMT
                  , A.BILL_TAX_AMT
                  , CASE WHEN A.SC_EXP_CHK_2 > 9 THEN 0 ELSE A.SC_EXP_CHK_2 END AS SC_EXP_CHK_2
                  , CASE WHEN A.SC_EXP_CHK_2 > 9 THEN SC_EXP_CHK_2 / 10 ELSE 0 END AS FT_DYS_2 -- CGM_SC_EXP_CHK_FNC 에서 가져올때 FT_DYS에 10곱해서 가져옴
                  , CASE WHEN A.ERR_CHK0 + A.PCT_CHK + A.TO_MVMT_CHK3 > 0 THEN 'Invoice Only'
                         WHEN A.NO_CHG_CHK > 0 THEN 'Discrepancy'
                         WHEN A.MULTI_MOVE_CHK > 0 THEN 'Discrepancy'
                         WHEN A.CHG_CD = 'PDM' AND A.FM_MVMT_CD = 'ID' AND A.TO_MVMT_CD = 'OC' THEN 
                              CASE WHEN (A.TO_BKG_NO IS NOT NULL AND A.TO_BKG_TERM ='D') OR (A.TO_BKG_NO IS NOT NULL AND A.TO_BKG_TERM ='Y' AND DECODE(A.SC_EXP_CHK_2, 0, 0, 1, 1, 0) = 0) THEN
                                        CASE WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT = 0   THEN 'Coincidency'
                                             WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS = 0 THEN 'Coincidency'
                                             WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS  <= A.BILL_DAYS-(A.FT_DYS+DECODE(A.SC_EXP_CHK_2, 0, 0, 1, 0, (A.SC_EXP_CHK_2/10)))           THEN 'Coincidency'
                                             WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS > A.BILL_DAYS-(A.FT_DYS+DECODE(A.SC_EXP_CHK_2, 0, 0, 1, 0, (A.SC_EXP_CHK_2/10)))             THEN 'Discrepancy'
                                             WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT <=  A.BILL_RATE_AMT + BILL_TAX_AMT  THEN 'Coincidency'
                                             ELSE 'Discrepancy'
                                        END
                                   ELSE 'Discrepancy'
                              END
                         ELSE
                              CASE WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT = 0   THEN 'Coincidency'
                                   WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS = 0 THEN 'Coincidency'
                                   WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS  <= A.BILL_DAYS THEN 'Coincidency'
                                   WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS > A.BILL_DAYS THEN 'Discrepancy'
                                   WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT <=  A.BILL_RATE_AMT + BILL_TAX_AMT  THEN 'Coincidency'
                                   ELSE 'Discrepancy'
                              END
                    END AS ADT_RSLT
                  , DECODE(SIGN(A.ERR_CHK0+A.PCT_CHK+A.TO_MVMT_CHK3),1,REASON_CD0,
                           CASE WHEN A.CHG_CD = 'PDM' AND A.FM_MVMT_CD = 'ID' AND A.TO_MVMT_CD = 'OC' THEN 
                                     CASE WHEN (A.TO_BKG_NO IS NOT NULL AND A.TO_BKG_TERM ='D') OR (A.TO_BKG_NO IS NOT NULL AND A.TO_BKG_TERM ='Y' AND (A.SC_EXP_CHK_2 = 0 OR A.SC_EXP_CHK_2 > 9)) THEN -- FREE TIME인 경우 10이상으로 입력됨
                                               CASE WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS  = A.BILL_DAYS THEN 'A'
                                                    WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS <  A.BILL_DAYS THEN 'B'
                                                    WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS >  A.BILL_DAYS THEN 'S'
                                                    WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT =  A.BILL_RATE_AMT + A.BILL_TAX_AMT  THEN 'A'
                                                    WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT <  A.BILL_RATE_AMT + A.BILL_TAX_AMT  THEN 'B'
                                                    WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT >  A.BILL_RATE_AMT + A.BILL_TAX_AMT  AND A.INV_BIL_UT_DYS <>  A.BILL_DAYS THEN 'S'
                                                    WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT >  A.BILL_RATE_AMT + A.BILL_TAX_AMT  AND A.INV_LSE_CHG_AMT <>  A.BILL_RATE_AMT THEN 'T'
                                                    WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT >  A.BILL_RATE_AMT + A.BILL_TAX_AMT  AND A.TAX_SMRY_AMT <>  A.BILL_TAX_AMT THEN 'U'
                                                    ELSE 'V'
                                               END
                                          ELSE 'H' -- disperency
                                     END
                                ELSE 
                                     CASE WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS  = A.BILL_DAYS  THEN 'A'
                                          WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS <  A.BILL_DAYS  THEN 'B'
                                          WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS >  A.BILL_DAYS  THEN 'S'
                                          WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT =  A.BILL_RATE_AMT + A.BILL_TAX_AMT  THEN 'A'
                                          WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT <  A.BILL_RATE_AMT + A.BILL_TAX_AMT  THEN 'B'
                                          WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT >  A.BILL_RATE_AMT + A.BILL_TAX_AMT  AND A.INV_BIL_UT_DYS <>  A.BILL_DAYS THEN 'S'
                                          WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT >  A.BILL_RATE_AMT + A.BILL_TAX_AMT  AND A.INV_LSE_CHG_AMT <>  A.BILL_RATE_AMT THEN 'T'
                                          WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT >  A.BILL_RATE_AMT + A.BILL_TAX_AMT  AND A.TAX_SMRY_AMT <>  A.BILL_TAX_AMT THEN 'U'
                                          ELSE 'V'
                                     END
                           END
                    ) AS REASON_CD
                  , A.INV_BIL_UT_DYS - A.BILL_DAYS AS DIFF_DAYS
                  , SUBSTR(FM_ID, 15,1) AS INV_BKG_TERM_CD
                  , LTRIM(SUBSTR(FM_ID, 21, 2)) AS INV_CUST_CNT_CD
                  , SUBSTR(FM_ID, 23, 6) AS INV_CUST_SEQ
           FROM     (
                      SELECT   A.*
                             , CASE WHEN A.USED_DAYS+A.DEDUCT_DAYS1+A.DEDUCT_DAYS2+DECODE(SIGN(A.DEDUCT_DAYS1+A.DEDUCT_DAYS2),-1,0,A.DEDUCT_DAY3)  <= 0 THEN 0 
                                    WHEN A.FT_DYS > 0 AND A.USED_DAYS+A.DEDUCT_DAYS1+A.DEDUCT_DAYS2+DECODE(SIGN(A.DEDUCT_DAYS1+A.DEDUCT_DAYS2),-1,0,A.DEDUCT_DAY3) - A.FT_DYS > 0 THEN A.FT_DYS
                                    ELSE A.USED_DAYS+A.DEDUCT_DAYS1+A.DEDUCT_DAYS2+DECODE(SIGN(A.DEDUCT_DAYS1+A.DEDUCT_DAYS2),-1,0,A.DEDUCT_DAY3) 
                               END AS BILL_DAYS
			                 , A.CHSS_POOL_RT_AMT * (
                                    CASE WHEN A.USED_DAYS+A.DEDUCT_DAYS1+A.DEDUCT_DAYS2+DECODE(SIGN(A.DEDUCT_DAYS1+A.DEDUCT_DAYS2),-1,0,A.DEDUCT_DAY3) <= 0 THEN 0 
                                         WHEN A.FT_DYS > 0 AND A.USED_DAYS+A.DEDUCT_DAYS1+A.DEDUCT_DAYS2+DECODE(SIGN(A.DEDUCT_DAYS1+A.DEDUCT_DAYS2),-1,0,A.DEDUCT_DAY3) - A.FT_DYS > 0 THEN A.FT_DYS
                                         ELSE A.USED_DAYS+A.DEDUCT_DAYS1+A.DEDUCT_DAYS2+DECODE(SIGN(A.DEDUCT_DAYS1+A.DEDUCT_DAYS2),-1,0,A.DEDUCT_DAY3) 
                                    END
                               ) AS BILL_RATE_AMT
			                 , ROUND(A.CHSS_POOL_RT_AMT * (
                                    CASE WHEN A.USED_DAYS+A.DEDUCT_DAYS1+A.DEDUCT_DAYS2+DECODE(SIGN(A.DEDUCT_DAYS1+A.DEDUCT_DAYS2),-1,0,A.DEDUCT_DAY3) <= 0 THEN 0 
                                         WHEN A.FT_DYS > 0 AND A.USED_DAYS+A.DEDUCT_DAYS1+A.DEDUCT_DAYS2+DECODE(SIGN(A.DEDUCT_DAYS1+A.DEDUCT_DAYS2),-1,0,A.DEDUCT_DAY3) - A.FT_DYS > 0 THEN A.FT_DYS
                                         ELSE A.USED_DAYS+A.DEDUCT_DAYS1+A.DEDUCT_DAYS2+DECODE(SIGN(A.DEDUCT_DAYS1+A.DEDUCT_DAYS2),-1,0,A.DEDUCT_DAY3) 
                                    END
                               ) * A.CHSS_POOL_TAX_RT/100,2) AS BILL_TAX_AMT
			                 , CASE WHEN A.TO_BKG_NO IS NOT NULL THEN
                                         CASE WHEN  (A.CHG_CD = 'ONT') OR (SUBSTR(A.FM_ID_2,15,1) = 'D') OR (SUBSTR(A.FM_ID_2,16,1) = 0) THEN 0 -- ON TERMINAL, DOOR TERM, ( 다음조건 모두 만족 : OP/ID, REETER TYPE, REEFER DRY CARGO='N'(진짜냉동), DELIVERY=USOAK, OUT BOUND 아닐때) 
                                              WHEN  B.MVMT_STS_CD IN('OP','ID') AND SUBSTR(A.FM_ID_2,15,1) <> 'D' AND SUBSTR(A.FM_ID_2,34,1) = 0 THEN 0 -- SC=AEN110235, DOOR 아니고 POD 가 지정된 곳이며, OB_CNTR_FLG=N 이면 EXCEPTION, 0 리턴   ('CAPRR','CAVAN','USSEA','USTIW','USPDX','USOAK','USLAX','USLGB')                                                                                                
                                              WHEN  B.MVMT_STS_CD IN('OP','ID') AND SUBSTR(A.FM_ID_2,15,1) <> 'D' AND SUBSTR(A.FM_ID_2,34,1) = 1 THEN 1 -- SC=AEN110235, DOOR 아니고 POD 가 지정된 곳 아니고, DEL_CD 가 지정된 곳이고, OB_CNTR_FLG=N 이면 EXCEPTION, 1 리턴                                                         
                                              WHEN  B.MVMT_STS_CD IN('OP','ID') AND SUBSTR(A.FM_ID_2,15,1) <> 'D' THEN DECODE(LTRIM(SUBSTR(A.FM_ID_2, 6, 9)), NULL, 1,CGM_SC_EXP_CHK_FNC(A.INV_CNTR_NO,B.CNMV_CYC_NO,B.CNMV_EVNT_DT,B.MVMT_STS_CD,RTRIM(SUBSTR(A.FM_ID_2,6,9)),SUBSTR(A.FM_ID_2,29,5),B.CNTR_TPSZ_CD,A.TO_BKG_NO, 'Y'))  -- OP, ID 이고 DOOR TERM 아닐때 
                                              ELSE 0
                                         END    
                                    ELSE 0          
                               END AS SC_EXP_CHK_2
                      FROM     (
                                 SELECT   A.*
                                        , CASE WHEN A.DDCT_TP_CD ='1' THEN --on tml 차감
                                                                           DECODE(A.CHG_CD,'ONT',DECODE(LEAD(A.BILL_FM_DT,1) OVER(PARTITION BY A.INV_CHSS_NO,SIGN(A.ERR_CHK0+A.PCT_CHK) ORDER BY A.FM_DT),A.BILL_TO_DT,-1,0),0)
                                               WHEN A.DDCT_TP_CD ='2' THEN 0 -- no deduct
                                          END AS DEDUCT_DAYS1
                                        , CASE WHEN A.DDCT_TP_CD ='1' THEN --on tml 차감
                                                                           DECODE(A.CHG_CD,'ONT',DECODE(LAG(A.BILL_TO_DT,1) OVER(PARTITION BY A.INV_CHSS_NO,SIGN(A.ERR_CHK0+A.PCT_CHK) ORDER BY A.FM_DT),A.BILL_FM_DT,-1,0),0)
                                               WHEN A.DDCT_TP_CD ='2' THEN 0 -- no deduct
                                          END AS DEDUCT_DAYS2
				                        , CASE WHEN A.TERM_CD = 'Y' AND A.FM_MVMT_CD = 'IC' AND A.TO_MVMT_CD = 'ID' AND A.ON_TML_CHG_FLG = 'Y' THEN -1
                                               WHEN A.TERM_CD = 'Y' AND A.ON_TML_CHG_FLG = 'Y' AND A.FM_MVMT_CD = 'OC' AND 
                                                    (
                                                      SELECT   /*+ INDEX_DESC (P XFN1CTM_MOVEMENT) */
                                                               P.MVMT_STS_CD
                                                      FROM     CTM_MOVEMENT P
                                                      WHERE    1 = 1
                                                      AND      P.CNTR_NO = A.INV_CNTR_NO
                                                      AND      P.CNMV_YR||TO_CHAR(P.CNMV_SEQ,'0000')||P.CNMV_SPLIT_NO < A.FM_INF1
                                                      AND      ROWNUM = 1
                                                    ) IN ('OP','ID')
                                                    THEN -1 
                                               ELSE 0 
                                          END  DEDUCT_DAY3
				                        , A.BILL_TO_DT - A.BILL_FM_DT + 1 AS USED_DAYS
				                        , CASE WHEN A.AMT_AUD_FLG ='Y' AND A.INV_SMRY_AMT = 0  THEN  'W'
                                               WHEN A.AMT_AUD_FLG ='N' AND A.INV_BIL_UT_DYS = 0 THEN 'W'
                                               WHEN A.DUP_CHK = 1     THEN 'Y'
                                               WHEN A.CNTR_CHK = 1    THEN '1'
                                               WHEN A.CHZ_CHK = 1     THEN '2'  
                                               WHEN A.MVMT_CHK = 1    THEN '3'
                                               WHEN A.PCT_CHK = 1     THEN 'X'
                                               WHEN A.SC_EXP_CHK = 1  THEN '9'
                                               WHEN A.AREA_CHK = 1    THEN '5'
                                               WHEN A.TO_MVMT_CHK = 1 AND  TO_MVMT_CHK2 = 1 THEN '0'     -- OUT OF MONTH 이고 중복이면 To movement is out of month (Dup) 처리                   
                                               WHEN A.TO_MVMT_CHK = 1 AND  TO_MVMT_CHK2 = 0 AND (INV_EQ_ONH_DT <> INV_BIL_ST_DT OR INV_BIL_ST_DT <> BILL_FM_DT OR INV_EQ_OFFH_DT <> INV_BIL_END_DT OR INV_BIL_END_DT <> BILL_TO_DT)  THEN '4'    -- OUT OF MONTH 이고 중복 아닌데 조건 만족 못하면 To movement is out of month (No Dup) 처리                     
                                               WHEN A.YARD_CHK = 1    THEN '6'
                                               WHEN A.ONT_CHG_CHK = 1 THEN '7'
                                               WHEN A.DOM_CHK = 1     THEN '8'
                                               WHEN A.FT_DYS > 0      THEN 'Z'                           -- FREETIME LOGIC 추가로 데이터 추가
                                          END REASON_CD0
                                        , CASE WHEN A.TO_MVMT_CHK = 1 AND  TO_MVMT_CHK2 = 1 THEN 1
                                               WHEN A.TO_MVMT_CHK = 1 AND  TO_MVMT_CHK2 = 0 AND (INV_EQ_ONH_DT <> INV_BIL_ST_DT OR INV_BIL_ST_DT <> BILL_FM_DT OR INV_EQ_OFFH_DT <> INV_BIL_END_DT OR INV_BIL_END_DT <> BILL_TO_DT)  THEN 1 
                                               ELSE 0
                                          END TO_MVMT_CHK3
                                        , CGM_COPS_MVMT_FND_FNC(A.INV_CNTR_NO, A.CHG_CD, A.MT_DT, A.MT_YD, @[cost_yrmon], A.TO_BKG_NO, A.INV_CHSS_NO, A.TO_BKG_NO) AS FM_ID_2
                                 FROM
                                          (
                                            SELECT   A.INV_CHSS_NO
                                                   , A.INV_CNTR_NO
                                                   , A.CHG_CD
                                                   , A.INV_EQ_ONH_DT
                                                   , A.INV_EQ_OFFH_DT
                                                   , A.INV_BIL_ST_DT
                                                   , A.INV_BIL_END_DT
                                                   , A.INV_LSE_USE_DYS
                                                   , A.INV_BIL_UT_DYS
                                                   , A.INV_LSE_RT_AMT
                                                   , A.INV_LSE_CHG_AMT
                                                   , A.INV_TAX_AMT
                                                   , A.INV_NO
                                                   , A.INV_EQ_ONH_LOC_NM
                                                   , A.INV_CUST_EQ_TPSZ_NM
                                                   , A.TAX_SMRY_AMT
                                                   , A.INV_SMRY_AMT
                                                   , A.VRFY_RSLT_DESC
                                                   , A.INV_BKG_NO
                                                   , A.FM_ID
                                                   , A.INV_GATE_ACT_ID
                                                   , A.INV_BIL_MOD_RMK
                                                   , A.EQ_NO
                                                   , A.BKG_CGO_TP_CD
                                                   , A.CNTR_TPSZ_CD
                                                   , A.FM_CHSS_NO
                                                   , A.FM_MVMT_CD
                                                   , A.FM_YD
                                                   , A.FM_DT
                                                   , A.BKG_NO
                                                   , A.FM_SCC_CD
                                                   , A.TERM_CD
                                                   , A.SC_NO
                                                   , A.OB_CNTR_FLG
                                                   , A.FCNTR_FLG
                                                   , A.CNTR_CHK
                                                   , A.CHZ_CHK
                                                   , A.MVMT_CHK
                                                   , A.AREA_CHK
                                                   , A.YARD_CHK
                                                   , A.ONT_CHG_CHK
                                                   , A.DOM_CHK
                                                   , CASE WHEN A.SC_EXP_CHK > 9 THEN 0 ELSE A.SC_EXP_CHK END AS SC_EXP_CHK
                                                   , CASE WHEN A.SC_EXP_CHK > 9 THEN SC_EXP_CHK / 10 ELSE 0 END AS FT_DYS   -- CGM_SC_EXP_CHK_FNC 에서 가져올때 FT_DYS에 10곱해서 가져옴
                                                   , A.DUP_CHK
                                                   , A.MULTI_MOVE_CHK
                                                   , A.TO_ID
                                                   , A.FM_INF1
                                                   , A.DDCT_TP_CD
                                                   , A.CHSS_POOL_RT_AMT
                                                   , A.CHSS_POOL_TAX_RT
                                                   , A.AMT_AUD_FLG
                                                   , A.DMST_ON_TML_CHG_FLG
                                                   , A.DMST_PD_CHG_FLG
                                                   , A.ON_TML_CHG_FLG
                                                   , B.CHSS_NO TO_CHSS_NO
                                                   , B.MVMT_STS_CD TO_MVMT_CD
                                                   , B.ORG_YD_CD TO_YD
                                                   , B.CNMV_EVNT_DT TO_DT
                                                    -- 전월에 걸쳐도 오는 데이터도 오류 없음으로 인정. 신용찬, 2015-05-06
                                                   , CASE WHEN (TO_CHAR(B.CNMV_EVNT_DT,'YYYYMM') < TO_CHAR(TO_DATE(@[cost_yrmon],'YYYYMM')-1, 'YYYYMM')) THEN 1 ELSE 0 END TO_MVMT_CHK
                                                   , CASE WHEN (TO_CHAR(B.CNMV_EVNT_DT,'YYYYMM') < TO_CHAR(TO_DATE(@[cost_yrmon],'YYYYMM')-1, 'YYYYMM')) THEN
                                                               NVL( (
                                                                      SELECT   1
                                                                      FROM     CGM_LSE_CHG_DTL H
                                                                      WHERE    1 = 1
                                                                      AND      H.AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
                                                                      AND      H.AGMT_SEQ = @[agmt_seq]
                                                                      AND      H.AGMT_VER_NO = @[agmt_ver_no]
                                                                      AND      H.COST_YRMON < @[cost_yrmon]
                                                                      AND      H.CHG_CD = A.CHG_CD
                                                                      AND      (
                                                                                    (TO_CHAR(A.INV_BIL_ST_DT,'YYYYMM') BETWEEN TO_CHAR(H.INV_BIL_ST_DT,'YYYYMM') AND TO_CHAR(H.INV_BIL_END_DT,'YYYYMM'))
                                                                                 OR (TO_CHAR(A.INV_BIL_END_DT,'YYYYMM') BETWEEN TO_CHAR(H.INV_BIL_ST_DT,'YYYYMM') AND TO_CHAR(H.INV_BIL_END_DT,'YYYYMM'))
                                                                               )
                                                                      AND      DECODE(A.INV_CNTR_NO,NULL,'1',H.INV_CUST_EQ_NO) = DECODE(A.INV_CNTR_NO,NULL,'1',A.INV_CNTR_NO)
                                                                      AND      H.EQ_NO = A.INV_CHSS_NO
                                                                      AND      ROWNUM = 1
                                                                    ),0) 
                                                          ELSE 0
                                                     END AS TO_MVMT_CHK2
                                                   , CASE WHEN (A.CNTR_CHK+A.CHZ_CHK+A.MVMT_CHK+A.AREA_CHK+A.YARD_CHK+A.ONT_CHG_CHK+A.DOM_CHK+DECODE(A.SC_EXP_CHK, 0, 0, 1, 1, 0)+A.DUP_CHK > 0) THEN 1 ELSE 0 END AS ERR_CHK0
                                                   , CASE WHEN CHG_CD= 'PDM' AND FM_YD = 'USLGBM5' AND ORG_YD_CD = 'USLGBY2' AND FM_MVMT_CD = 'TN' THEN 1 ELSE 0 END AS PCT_CHK
                                                   , CASE WHEN A.FM_MVMT_CD = 'TN' AND A.FM_YD = 'USLGBM1' AND B.ORG_YD_CD = 'USLGBY2' THEN 1 ELSE 0 END AS NO_CHG_CHK
                                                   , CASE WHEN TO_CHAR(B.CNMV_EVNT_DT,'YYYYMM') < @[cost_yrmon]  THEN TRUNC(A.FM_DT) ELSE  DECODE(@[cost_yrmon],TO_CHAR(A.FM_DT,'YYYYMM'),TRUNC(A.FM_DT),TO_DATE(@[cost_yrmon]||'01','YYYYMMDD')) END AS BILL_FM_DT
                                                   , CASE WHEN TO_CHAR(B.CNMV_EVNT_DT,'YYYYMM') < @[cost_yrmon]  THEN TRUNC(B.CNMV_EVNT_DT) ELSE  DECODE(@[cost_yrmon],TO_CHAR(B.CNMV_EVNT_DT,'YYYYMM'),TRUNC(B.CNMV_EVNT_DT),LAST_DAY(TO_DATE(@[cost_yrmon],'YYYYMM'))) END AS BILL_TO_DT
	                                               , CASE WHEN SUBSTR(A.TO_ID,1,2) = 'MT' AND SUBSTR(A.TO_ID,46,1) ='P' THEN TO_DATE(RTRIM(LTRIM(SUBSTR(TO_ID,10,8))),'YYYYMMDDhh24miss') ELSE TO_DATE('','YYYYMMDD') END AS MT_DT
                                                   , CASE WHEN SUBSTR(A.TO_ID,1,2) = 'MT' AND SUBSTR(A.TO_ID,46,1) ='P' THEN RTRIM(LTRIM(SUBSTR(A.TO_ID,3,7))) ELSE '' END AS MT_YD
                                                   , CASE WHEN SUBSTR(A.TO_ID,46,1) ='P' THEN RTRIM(LTRIM(SUBSTR(A.TO_ID,36,9))) ELSE '' END AS TO_SC_NO
                                                   , CASE WHEN SUBSTR(A.TO_ID,46,1) ='P' THEN RTRIM(LTRIM(SUBSTR(A.TO_ID,24,12))) ELSE '' END AS TO_BKG_NO
                                                   , CASE WHEN SUBSTR(A.TO_ID,46,1) ='P' THEN RTRIM(LTRIM(SUBSTR(A.TO_ID,45,1))) ELSE '' END AS TO_BKG_TERM
                                                    -- 2016.02.19 CHM-201640199 Invoice Double Charge 오류 발생시 InvNo + Cost 
                                                   , CASE WHEN A.DUP_CHK = 1 THEN
                                                             (
                                                               SELECT   '/ INV # ' || HDR.INV_NO || ', Cost month ' || HDR.COST_YRMON
                                                               FROM     CGM_LSE_CHG_HDR HDR, CGM_LSE_CHG_DTL DTL
                                                               WHERE    1 = 1
                                                               AND      HDR.AGMT_OFC_CTY_CD = DTL.AGMT_OFC_CTY_CD
                                                               AND      HDR.AGMT_SEQ = DTL.AGMT_SEQ
                                                               AND      HDR.AGMT_VER_NO = DTL.AGMT_VER_NO
                                                               AND      HDR.COST_YRMON = DTL.COST_YRMON
                                                               AND      HDR.COST_YRMON_SEQ = DTL.COST_YRMON_SEQ
                                                               AND      DTL.AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
                                                               AND      DTL.AGMT_SEQ = @[agmt_seq]
                                                               AND      DTL.CHG_CD = A.CHG_CD
                                                               AND      (
                                                                             (TO_CHAR(A.INV_BIL_ST_DT,'YYYYMMDD')  BETWEEN TO_CHAR(DTL.INV_BIL_ST_DT,'YYYYMMDD') AND TO_CHAR(DTL.INV_BIL_END_DT,'YYYYMMDD'))
                                                                          OR (TO_CHAR(A.INV_BIL_END_DT,'YYYYMMDD') BETWEEN TO_CHAR(DTL.INV_BIL_ST_DT,'YYYYMMDD') AND TO_CHAR(DTL.INV_BIL_END_DT,'YYYYMMDD'))
                                                                        )
                                                               AND      DECODE(A.INV_CNTR_NO,NULL,'1',DTL.INV_CUST_EQ_NO) = DECODE(A.INV_CNTR_NO,NULL,'1',A.INV_CNTR_NO)
                                                               AND      DTL.EQ_NO = A.INV_CHSS_NO
                                                               AND      ROWNUM = 1
                                                             )
                                                          ELSE ''
                                                     END AS DUP_DESC
                                            FROM     (
                                                       SELECT   /*+ USE_NL(A M B) */
                                                                A.*
							                                  , B.BKG_CGO_TP_CD
                                                              , B.CNTR_TPSZ_CD
                                                              , B.CHSS_NO AS FM_CHSS_NO
                                                              , B.MVMT_STS_CD AS FM_MVMT_CD
                                                              , B.ORG_YD_CD AS FM_YD
                                                              , B.CNMV_EVNT_DT AS FM_DT
                                                              , B.BKG_NO
                                                              , SUBSTR(FM_ID,1,5) AS FM_SCC_CD
                                                              , SUBSTR(A.FM_ID,15,1) AS TERM_CD
                                                              , LTRIM(RTRIM(SUBSTR(A.FM_ID,6,9))) AS SC_NO
                                                              , B.OB_CNTR_FLG
                                                              , B.FCNTR_FLG
                                                              , DECODE(M.CNTR_NO,NULL,1,0) AS CNTR_CHK
                                                              , DECODE(Z.ACIAC_DIV_CD,'A',1,0) AS CHZ_CHK
                                                              , DECODE(A.FM_ID,NULL,1,0) AS MVMT_CHK
                                                              , CASE WHEN SUBSTR(A.FM_ID,35) IS NOT NULL AND D.LOC_CD IS NULL THEN 1 ELSE 0 END AS AREA_CHK
                                                              , CASE WHEN SUBSTR(A.FM_ID,35) IS NOT NULL AND D.LOC_CD IS NOT NULL AND C.YD_CD IS NULL THEN NVL((SELECT 0 FROM MDM_YARD Y WHERE Y.YD_CD = B.ORG_YD_CD AND UPPER(Y.YD_NM) LIKE '%PSEUDO%'),1) ELSE 0  END AS YARD_CHK                                          
                                                              , CASE WHEN A.CHG_CD = 'ONT' AND SUBSTR(B.MVMT_STS_CD,1,2) IN('IC','OC') THEN 
                                                                          CASE WHEN (NVL(C.ON_TML_CHG_FLG,'N') = 'N') OR (C.BILABL_SPCL_CNTR_TP_NM IS NOT NULL AND INSTR(C.BILABL_SPCL_CNTR_TP_NM,B.CNTR_TPSZ_CD) =0) THEN 1 ELSE 0 END
                                                                     WHEN A.CHG_CD = 'ONT' AND SUBSTR(B.MVMT_STS_CD,1,2) IN ('MT') THEN
                                                                          CASE WHEN (NVL(C.ON_TML_MTY_CHG_FLG,'N') = 'N') OR (C.BILABL_SPCL_CNTR_TP_NM IS NOT NULL AND INSTR(C.BILABL_SPCL_CNTR_TP_NM,B.CNTR_TPSZ_CD) =0) THEN 1 ELSE 0 END
                                                                     ELSE 0
                                                                END AS ONT_CHG_CHK
                                                              , CASE WHEN (A.CHG_CD= 'ONT' AND SUBSTR(B.MVMT_STS_CD,1,1) ='C' AND C.DMST_ON_TML_CHG_FLG ='N' ) THEN 1
                                                                     WHEN (A.CHG_CD= 'PDM' AND SUBSTR(B.MVMT_STS_CD,1,1) ='C' AND C.DMST_PD_CHG_FLG    = 'N' ) THEN 1
                                                                     ELSE 0
                                                                END AS DOM_CHK
                                                                -- 2015-03-24 CHM-201534566, SC EXCEPTION 로직 교체(PRICING 에서 생성된 SC EXCEPTION 반영)(김기철-설계, 신용찬-코딩)
                                                              , CASE WHEN (A.CHG_CD = 'ONT') OR (SUBSTR(A.FM_ID,15,1) = 'D') OR (SUBSTR(A.FM_ID,16,1) = 0) THEN 0 -- ON TERMINAL, DOOR TERM, ( 다음조건 모두 만족 : OP/ID, REETER TYPE, REEFER DRY CARGO='N'(진짜냉동), DELIVERY=USOAK, OUT BOUND 아닐때)
                                                                     WHEN B.MVMT_STS_CD IN('OP','ID') AND SUBSTR(A.FM_ID,15,1) <> 'D' AND SUBSTR(A.FM_ID,34,1) = 0 THEN 0 -- SC=AEN110235, DOOR 아니고 POD 가 지정된 곳이며, OB_CNTR_FLG=N 이면 EXCEPTION, 0 리턴   ('CAPRR','CAVAN','USSEA','USTIW','USPDX','USOAK','USLAX','USLGB')                                                                                                
                                                                     WHEN B.MVMT_STS_CD IN('OP','ID') AND SUBSTR(A.FM_ID,15,1) <> 'D' AND SUBSTR(A.FM_ID,34,1) = 1 THEN 1 -- SC=AEN110235, DOOR 아니고 POD 가 지정된 곳 아니고, DEL_CD 가 지정된 곳이고, OB_CNTR_FLG=N 이면 EXCEPTION, 1 리턴                                                         
                                                                     WHEN B.MVMT_STS_CD IN('OP','ID') AND SUBSTR(A.FM_ID,15,1) <> 'D' THEN -- OP, ID 이고 DOOR TERM 아닐때
                                                                          DECODE(LTRIM(SUBSTR(A.FM_ID, 6, 9)), NULL, 1,CGM_SC_EXP_CHK_FNC(B.CNTR_NO,B.CNMV_CYC_NO,B.CNMV_EVNT_DT,B.MVMT_STS_CD,RTRIM(SUBSTR(A.FM_ID,6,9)),SUBSTR(A.FM_ID,29,5),B.CNTR_TPSZ_CD,B.BKG_NO, 'Y'))
                                                                     ELSE 0
                                                                END AS SC_EXP_CHK
							                                  , NVL( (
                                                                       SELECT   1
                                                                       FROM     CGM_LSE_CHG_DTL H
                                                                       WHERE    1 = 1
                                                                       AND      H.AGMT_OFC_CTY_CD = @[agmt_ofc_cty_cd]
                                                                       AND      H.AGMT_SEQ = @[agmt_seq]
                                                                       AND      H.CHG_CD = A.CHG_CD
                                                                       AND      (
                                                                                     (TO_CHAR(A.INV_BIL_ST_DT,'YYYYMMDD')  BETWEEN TO_CHAR(H.INV_BIL_ST_DT,'YYYYMMDD') AND TO_CHAR(H.INV_BIL_END_DT,'YYYYMMDD'))
                                                                                  OR (TO_CHAR(A.INV_BIL_END_DT,'YYYYMMDD') BETWEEN TO_CHAR(H.INV_BIL_ST_DT,'YYYYMMDD') AND TO_CHAR(H.INV_BIL_END_DT,'YYYYMMDD'))
                                                                                )
                                                                       AND      DECODE(A.INV_CNTR_NO,NULL,'1',H.INV_CUST_EQ_NO) = DECODE(A.INV_CNTR_NO,NULL,'1',A.INV_CNTR_NO)
                                                                       AND      H.EQ_NO = A.INV_CHSS_NO
                                                                       AND      ROWNUM = 1
                                                                     ),0) AS DUP_CHK
							                                  , (
  							                                      SELECT   COUNT(1)
  							                                      FROM     CGM_LSE_INV_TMP B
  							                                      WHERE    1 = 1
  							                                      AND      B.CHG_CRE_SEQ = A.CHG_CRE_SEQ
  							                                      AND      B.INV_EQ_NO = A.INV_CHSS_NO
  							                                      AND      B.INV_EQ_ONH_DT < A.INV_EQ_ONH_DT
  							                                      AND      B.INV_EQ_OFFH_DT >= A.INV_EQ_ONH_DT
							                                    ) AS MULTI_MOVE_CHK
							                                  , (
                                                                  SELECT   /*+ INDEX(B2 XFN1CTM_MOVEMENT) */
                                                                           RPAD(B2.MVMT_STS_CD||B2.ORG_YD_CD||TO_CHAR(B2.CNMV_EVNT_DT,'YYYYMMDDhh24miss'),23,' ')
                                                                         ||(
                                                                             SELECT   /*+ INDEX(B3 XFN1CTM_MOVEMENT) */ 
                                                                                      RPAD(NVL(BK.BKG_NO,' '),12,' ')||RPAD(NVL(BK.SC_NO,' '),9,' ')||NVL(BK.RCV_TERM_CD,' ')||'P'||B3.ROWID
                                                                             FROM     CTM_MOVEMENT B3 , BKG_BOOKING BK
                                                                             WHERE    1 = 1
                                                                             AND      B3.CNTR_NO=B2.CNTR_NO
                                                                             AND      B3.CNMV_YR||TO_CHAR(B3.CNMV_SEQ,'0000')||B3.CNMV_SPLIT_NO > B2.CNMV_YR||TO_CHAR(B2.CNMV_SEQ,'0000')||B2.CNMV_SPLIT_NO
                                                                             AND      B3.MVMT_STS_CD IN('OC','CO','XX')
                                                                             AND      A.CHG_CD ='PDM' 
                                                                             AND      B.MVMT_STS_CD IN('ID','TN')
                                                                             AND      ((UPPER(Y.YD_NM) LIKE '%PSEUDO%') OR (B2.ORG_YD_CD = 'USATLGE'))
                                                                             AND      B3.BKG_NO = BK.BKG_NO(+)
                                                                             AND      ROWNUM = 1
                                                                             UNION
                                                                             SELECT   RPAD(' ',22,' ')||'G'||B2.ROWID
                                                                             FROM     DUAL
                                                                             WHERE    1 = 1
                                                                             AND      (
                                                                                           (A.CHG_CD ='ONT')
                                                                                        OR (     A.CHG_CD = 'PDM'
                                                                                             AND (UPPER(Y.YD_NM) NOT LIKE '%PSEUDO%') 
                                                                                             AND (B2.ORG_YD_CD <> 'USATLGE')
                                                                                           )
                                                                                      )
                                                                             AND      ROWNUM = 1
                                                                           )
                                                                  FROM     CTM_MOVEMENT B2
                                                                         , MDM_YARD Y
                                                                  WHERE    1 = 1
                                                                  AND      A.INV_CNTR_NO = B2.CNTR_NO
                                                                  AND      Y.YD_CD = B2.ORG_YD_CD
                                                                  AND      B2.CNMV_YR||TO_CHAR(B2.CNMV_SEQ,'0000')||B2.CNMV_SPLIT_NO > B.CNMV_YR||TO_CHAR(B.CNMV_SEQ,'0000')||B.CNMV_SPLIT_NO
                                                                  AND      ROWNUM = 1
                                                                ) TO_ID
							                                  , B.CNMV_YR||TO_CHAR(B.CNMV_SEQ,'0000')||B.CNMV_SPLIT_NO FM_INF1
							                                  , NVL(C.DDCT_TP_CD,'2') DDCT_TP_CD
							                                  , D.CHSS_POOL_RT_AMT
							                                  , D.CHSS_POOL_TAX_RT
							                                  , D.AMT_AUD_FLG
							                                  , C.DMST_ON_TML_CHG_FLG
							                                  , C.DMST_PD_CHG_FLG
							                                  , C.ON_TML_CHG_FLG
                                                       FROM     (
                                                                  SELECT   A.INV_EQ_NO INV_CHSS_NO
                                                                         , A.INV_CUST_EQ_NO INV_CNTR_NO
                                                                         , A.CHG_CD
                                                                         , A.INV_EQ_ONH_DT
                                                                         , A.INV_EQ_OFFH_DT
                                                                         , A.INV_BIL_ST_DT
                                                                         , A.INV_BIL_END_DT
                                                                         , A.INV_LSE_USE_DYS
                                                                         , A.INV_BIL_UT_DYS
                                                                         , A.INV_LSE_RT_AMT
                                                                         , A.INV_LSE_CHG_AMT
                                                                         , A.INV_TAX_AMT
                                                                         , A.INV_NO
                                                                         , A.INV_EQ_ONH_LOC_NM
                                                                         , A.INV_CUST_EQ_TPSZ_NM
                                                                         , A.TAX_SMRY_AMT
                                                                         , A.INV_SMRY_AMT
                                                                         , A.VRFY_RSLT_DESC
                                                                         , A.INV_BKG_NO
                                                                         , A.INV_GATE_ACT_ID
                                                                         , CGM_COPS_MVMT_FND_FNC(A.INV_CUST_EQ_NO,A.CHG_CD,A.INV_EQ_ONH_DT,A.INV_YD_CD,@[cost_yrmon],A.INV_BKG_NO,A.INV_EQ_NO,SUBSTR(VRFY_RSLT_DESC,1,12)) AS FM_ID
                                                                         , A.INV_BIL_MOD_RMK
                                                                         , A.EQ_NO
                                                                         , A.CHG_CRE_SEQ
                                                                  FROM     CGM_LSE_INV_TMP A
                                                                  WHERE    1 = 1
                                                                  AND      CHG_CRE_SEQ = @[chg_cre_seq]
                                                                ) A
                                                              , CTM_MOVEMENT B
                                                              , CGM_AGMT_CPS_COND C
                                                              , CGM_AGMT_CPS_RT  D
                                                              , MST_CONTAINER M
                                                              , CGM_EQUIPMENT Z
                                                       WHERE    1 = 1
                                                       AND      SUBSTR(A.FM_ID,36) = B.ROWID(+)
                                                       AND      B.ORG_YD_CD = C.YD_CD(+)
                                                       AND      @[agmt_ofc_cty_cd] = C.AGMT_OFC_CTY_CD(+)
                                                       AND      @[agmt_seq] = C.AGMT_SEQ(+)
                                                       AND      @[agmt_ver_no]	= C.AGMT_VER_NO(+)
                                                       AND      @[agmt_ofc_cty_cd] = D.AGMT_OFC_CTY_CD(+)
                                                       AND      @[agmt_seq] = D.AGMT_SEQ(+)
                                                       AND      @[agmt_ver_no] = D.AGMT_VER_NO(+)            
                                                       AND      SUBSTR(A.FM_ID,1,5) = D.LOC_CD(+)
                                                       AND      A.INV_CNTR_NO = M.CNTR_NO(+)
                                                       AND      A.INV_CHSS_NO = Z.EQ_NO(+)
                                                     ) A
                                                   , CTM_MOVEMENT B
                                            WHERE    1 = 1
                                            AND      SUBSTR(A.TO_ID,47) = B.ROWID(+)
                                          ) A
                               ) A
                             , CTM_MOVEMENT B
                      WHERE    1 = 1
                      AND      SUBSTR(A.FM_ID_2,36) = B.ROWID(+)
                      ORDER BY A.INV_CHSS_NO,A.FM_DT
                    ) A
         )			]]></sql>
			<params>
				<param name="agmt_ofc_cty_cd" type="12" value="" out="N"/>
				<param name="agmt_seq" type="12" value="" out="N"/>
				<param name="agmt_ver_no" type="12" value="" out="N"/>
				<param name="cost_yrmon" type="12" value="" out="N"/>
				<param name="inv_no" type="12" value="" out="N"/>
				<param name="inv_ref_no" type="12" value="" out="N"/>
				<param name="cre_usr_id" type="12" value="" out="N"/>
				<param name="upd_usr_id" type="12" value="" out="N"/>
				<param name="chg_cre_seq" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
