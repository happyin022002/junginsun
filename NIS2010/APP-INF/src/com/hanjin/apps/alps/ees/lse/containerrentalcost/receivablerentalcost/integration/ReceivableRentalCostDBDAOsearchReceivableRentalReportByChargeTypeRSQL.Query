<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ReceivableRentalCostDBDAOsearchReceivableRentalReportByChargeTypeRSQL">
			<desc><![CDATA[Receivable Invoice 한 결과에 대하여 Charge Type별로 실적을 조회]]></desc>
			<sql><![CDATA[
WITH PARAM AS (
    SELECT 
            @[report_type]  AS REPORT_TYPE,
            @[period_stdt]  AS PERIOD_STDT,
            @[period_eddt]  AS PERIOD_EDDT,
            @[company]      AS COMPANY,
            @[status]       AS STATUS,            
            @[receivable]   AS RECEIVABLE,
            @[agmt_cty_cd]  AS AGMT_CTY_CD,
            @[agmt_seq]     AS AGMT_SEQ,
            @[vndr_seq]     AS VNDR_SEQ,
            @[loc_tp]       AS LOC_TP,
            @[loc_cd]       AS LOC_CD
            
    FROM    DUAL
) 
, XXX AS (
SELECT
    NVL( DECODE( A.LSTM_CD, 'SO' , 'SBO' ,  'MO' , 'MUO'  ) , '  ') STATUS,
    NVL(A.VNDR_SEQ, 0) VNDR_SEQ , 
    SUBSTR(NVL(A.VNDR_ABBR_NM, '   '), 1, 3) ABBR_NM, 
    NVL(B.CNTR_TPSZ_CD, '  ') CNTR_TPSZ_CD , 
    COUNT(DISTINCT(B.CNTR_NO)) QTY, 
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'PDM',B.COST_AMT,0)) PDM ,     
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'PUC',B.COST_AMT,0)) PUC , 
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'PCR',B.COST_AMT,0)) PCR ,
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'PUC',B.COST_AMT,0)) + SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'PCR',B.COST_AMT,0)) TTL_1 , 
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'LON',B.COST_AMT,0)) LON , 
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'LOF',B.COST_AMT,0)) LOF ,
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'LON',B.COST_AMT,0)) + SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'LOF',B.COST_AMT,0)) TTL_2 , 
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'GTI',B.COST_AMT,0)) GTI , 
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'GTO',B.COST_AMT,0)) GTO , 
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'GTI',B.COST_AMT,0)) + SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'GTO',B.COST_AMT,0)) TTL_3 , 
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'DOC',B.COST_AMT,0)) DOC , 
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'DCR',B.COST_AMT,0)) DCR , 
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'DOC',B.COST_AMT,0)) + SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'DCR',B.COST_AMT,0)) TTL_4 ,
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'DPP',B.COST_AMT,0)) DPP ,
    SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'CRD',B.CR_AMT,0)) CRD ,
    (SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'PDM',B.COST_AMT,0)) + 
     SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'PUC',B.COST_AMT,0)) + 
     SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'PCR',B.COST_AMT,0)) + 
     SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'LON',B.COST_AMT,0)) + 
     SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'LOF',B.COST_AMT,0)) + 
     SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'GTI',B.COST_AMT,0)) + 
     SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'GTO',B.COST_AMT,0)) + 
     SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'DOC',B.COST_AMT,0)) + 
     SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'DCR',B.COST_AMT,0)) + 
     SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'DPP',B.COST_AMT,0)) +
     SUM(DECODE(B.LSE_RCV_CHG_TP_CD,'CRD',B.CR_AMT,0))) G_TTL 
FROM LSE_RCV_RNTL_CHG A, LSE_RCV_RNTL_CHG_DTL B , PARAM P
WHERE   A.COST_YRMON   = B.COST_YRMON
  AND   A.RCV_RNTL_SEQ = B.RCV_RNTL_SEQ
  AND   A.AGMT_CTY_CD  = B.AGMT_CTY_CD
  AND   A.AGMT_SEQ     = B.AGMT_SEQ
  AND   A.QTY_YRMON BETWEEN P.PERIOD_STDT AND P.PERIOD_EDDT 
  AND   A.CXL_FLG = 'N'
  AND   B.LSE_RCV_CHG_CRE_CD <> 'D'
#if (${receivable} == 'A' ) 
  AND   A.LSE_CNTR_CHG_STS_CD = 'I'               --Actual Amount경우 조건, Total Amount 인 경우 조건이 없어짐..
#end

#if (${agmt_seq} != '' ) 
  AND   A.AGMT_CTY_CD  = P.AGMT_CTY_CD
  AND   A.AGMT_SEQ     = P.AGMT_SEQ
#end

#if (${status} == 'SBO' ) 
  AND   B.LSTM_CD = 'SO'
#elseif (${status} == 'MUO' ) 
  AND   B.LSTM_CD = 'MO'
#end

#if (${vndr_seq} != '')
  AND   A.VNDR_SEQ = P.VNDR_SEQ
#end

#if (${lstm_cd_str} != '')
    	    AND     B.LSTM_CD IN (
	        #foreach($key IN ${lstm_cd})
		        #if($velocityCount < $lstm_cd.size())
			        '$key',
		        #else
			        '$key'
		        #end
	        #end
				)
#end

#if (${cntr_tpsz_cd_str} != '')
            AND     B.CNTR_TPSZ_CD IN (
	        #foreach($key IN ${cntr_tpsz_cd})
		        #if($velocityCount < $cntr_tpsz_cd.size())
			        '$key',
		        #else
			        '$key'
		        #end
	        #end
				)
#end

#if (${loc_cd} != '')
    
     #if (${loc_tp} == 'R')
            AND     B.OFFH_LOC_CD IN (SELECT RCC_CD FROM MDM_EQ_ORZ_CHT WHERE RCC_CD = P.LOC_CD)
     #elseif (${loc_tp} == 'L')
            AND     B.OFFH_LOC_CD IN (SELECT LCC_CD FROM MDM_EQ_ORZ_CHT WHERE LCC_CD = P.LOC_CD)
     #elseif (${loc_tp} == 'S')
            AND     B.OFFH_LOC_CD IN (SELECT SCC_CD FROM MDM_EQ_ORZ_CHT WHERE SCC_CD = P.LOC_CD)
     #elseif (${loc_tp} == 'C')
            AND     SUBSTR(B.OFFH_LOC_CD, 0 , 2 ) = P.LOC_CD
     #end
#end
GROUP BY A.LSTM_CD, A.VNDR_SEQ, A.VNDR_ABBR_NM, B.CNTR_TPSZ_CD )
SELECT
 STATUS,
 VNDR_SEQ ,
 ABBR_NM ,
 CNTR_TPSZ_CD , 
 QTY, 
 PDM ,     
 PUC , 
 PCR ,
 TTL_1 , 
 LON , 
 LOF ,
 TTL_2 , 
 GTI , 
 GTO , 
 TTL_3 ,
 DOC , 
 DCR , 
 TTL_4 ,
 DPP ,
 CRD ,
 G_TTL 
FROM
(SELECT 
 STATUS,
 VNDR_SEQ ,
 ABBR_NM ,
 CNTR_TPSZ_CD , 
 QTY, 
 PDM ,     
 PUC , 
 PCR ,
 TTL_1 , 
 LON , 
 LOF ,
 TTL_2 , 
 GTI , 
 GTO , 
 TTL_3 ,
 DOC , 
 DCR , 
 TTL_4 ,
 DPP ,
 CRD ,
 G_TTL 
FROM(
SELECT
 STATUS,
 VNDR_SEQ ,
 ABBR_NM ,
 CNTR_TPSZ_CD , 
 ABBR_NM1,
 QTY, 
 PDM ,     
 PUC , 
 PCR ,
 TTL_1 , 
 LON , 
 LOF ,
 TTL_2 , 
 GTI , 
 GTO , 
 TTL_3 ,
 DOC , 
 DCR , 
 TTL_4 ,
 DPP ,
 CRD ,
 G_TTL 
FROM(
SELECT
 STATUS,
 TO_CHAR(VNDR_SEQ) VNDR_SEQ ,
 ABBR_NM , 
 XXX.CNTR_TPSZ_CD , 
 '1' ABBR_NM1,
 QTY, 
 PDM ,     
 PUC , 
 PCR ,
 TTL_1 , 
 LON , 
 LOF ,
 TTL_2 , 
 GTI , 
 GTO , 
 TTL_3 ,
 DOC , 
 DCR , 
 TTL_4 ,
 DPP ,
 CRD ,
 G_TTL ,
 TTT.RPT_DP_SEQ
FROM XXX , (SELECT CNTR_TPSZ_CD,
               CNTR_SZ_CD,
               CNTR_TP_CD,
               CNTR_TPSZ_DESC,
               CNTR_TPSZ_RMK,
               CNTR_TPSZ_ISO_CD,
               CNTR_TPSZ_GRP_CD,
               RPT_DP_SEQ
            FROM MDM_CNTR_TP_SZ
            WHERE DELT_FLG='N'
            AND ACIAC_DIV_CD='A'
            ORDER BY RPT_DP_SEQ) TTT
WHERE XXX.CNTR_TPSZ_CD = TTT.CNTR_TPSZ_CD 
ORDER BY STATUS , VNDR_SEQ , TTT.RPT_DP_SEQ )
UNION ALL
SELECT
 STATUS,
 'S.TTL' VNDR_SEQ ,
 NULL ABBR_NM ,
 NULL CNTR_TPSZ_CD , 
 '2' ABBR_NM1,
 SUM(QTY), 
 SUM(PDM) ,     
 SUM(PUC) , 
 SUM(PCR) ,
 SUM(TTL_1) , 
 SUM(LON) , 
 SUM(LOF) ,
 SUM(TTL_2) , 
 SUM(GTI) , 
 SUM(GTO) , 
 SUM(TTL_3) ,
 SUM(DOC) , 
 SUM(DCR) , 
 SUM(TTL_4) ,
 SUM(DPP) ,
 SUM(CRD) ,
 SUM(G_TTL) 
FROM XXX
GROUP BY STATUS)
ORDER BY STATUS  , ABBR_NM1 )
UNION ALL
SELECT
 'G.TTL' STATUS,
 NULL VNDR_SEQ ,
 NULL ABBR_NM ,
 NULL CNTR_TPSZ_CD , 
 SUM(QTY), 
 SUM(PDM) ,     
 SUM(PUC) , 
 SUM(PCR) ,
 SUM(TTL_1) , 
 SUM(LON) , 
 SUM(LOF) ,
 SUM(TTL_2) , 
 SUM(GTI) , 
 SUM(GTO) , 
 SUM(TTL_3) ,
 SUM(DOC) , 
 SUM(DCR) , 
 SUM(TTL_4) ,
 SUM(DPP) ,
 SUM(CRD) ,
 SUM(G_TTL) 
FROM XXX
GROUP BY 1			]]></sql>
			<params>
				<param name="report_type" type="12" value="" out="N"/>
				<param name="period_stdt" type="12" value="" out="N"/>
				<param name="period_eddt" type="12" value="" out="N"/>
				<param name="company" type="12" value="" out="N"/>
				<param name="status" type="12" value="" out="N"/>
				<param name="receivable" type="12" value="" out="N"/>
				<param name="agmt_cty_cd" type="12" value="" out="N"/>
				<param name="agmt_seq" type="12" value="" out="N"/>
				<param name="vndr_seq" type="12" value="" out="N"/>
				<param name="loc_tp" type="12" value="" out="N"/>
				<param name="loc_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
