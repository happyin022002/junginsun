<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ChassisMgsetInvoiceDBDAOsearchCHSPoolReportDataRSQL">
			<desc><![CDATA[Chassis Amount Pool단위 조회
- 2014.02.27 TAX,CRD DIVISION 항목 추가, 신용찬
- 2014.05.13 LESSOR, LESSOR NAME, YARD 추가, 신용찬
- 2016.04.20 Div(RSH, MIG 항목추가)]]></desc>
			<sql><![CDATA[
WITH DUMMY_DATA
AS
(
SELECT A.VNDR_SEQ,
       A.VNDR_LGL_ENG_NM,
       A.POOL_CD POOL_CD,
       A.SCC_CD SCC_CD,
       A.YD_CD,
       DECODE(A.DIVISION,1,'PDM',2,'ON-TML',3,'Credit',4,'MIG',5,'RSH','Total') DIV_NAME, 
       A.DIVISION,
       A.TTL,
       A.YEAR1, 
       A.YEAR2, 
       A.YEAR3, 
       A.YEAR4, 
       A.YEAR5, 
       A.YEAR6, 
       A.YEAR7, 
       A.YEAR8, 
       A.YEAR9, 
       A.YEAR10,
       A.YEAR11,
       A.YEAR12 

FROM 
(
    SELECT C.SEQ DIVISION ,
           B.VNDR_SEQ,
           B.VNDR_LGL_ENG_NM,           
           B.POOL_CD,
           B.SCC_CD,
           B.YD_CD,

           CASE WHEN C.SEQ=1 THEN SUM(AMT1)                                     WHEN C.SEQ=2 THEN SUM(AMT2)                                     WHEN C.SEQ=3 THEN SUM(AMT3)                                     WHEN C.SEQ=4 THEN SUM(AMT4)                                     WHEN C.SEQ=5 THEN SUM(AMT5)                                     WHEN C.SEQ=6 THEN SUM(AMT6)                                     END TTL,
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT1,  AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT1,  AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT1,  AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT1,  AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT1,  AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT1,  AMT6)), 0) END YEAR1,
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT2,  AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT2,  AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT2,  AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT2,  AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT2,  AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT2,  AMT6)), 0) END YEAR2,
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT3,  AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT3,  AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT3,  AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT3,  AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT3,  AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT3,  AMT6)), 0) END YEAR3, 
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT4,  AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT4,  AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT4,  AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT4,  AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT4,  AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT4,  AMT6)), 0) END YEAR4, 
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT5,  AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT5,  AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT5,  AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT5,  AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT5,  AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT5,  AMT6)), 0) END YEAR5, 
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT6,  AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT6,  AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT6,  AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT6,  AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT6,  AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT6,  AMT6)), 0) END YEAR6, 
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT7,  AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT7,  AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT7,  AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT7,  AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT7,  AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT7,  AMT6)), 0) END YEAR7, 
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT8,  AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT8,  AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT8,  AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT8,  AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT8,  AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT8,  AMT6)), 0) END YEAR8, 
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT9,  AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT9,  AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT9,  AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT9,  AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT9,  AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT9,  AMT6)), 0) END YEAR9, 
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT10, AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT10, AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT10, AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT10, AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT10, AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT10, AMT6)), 0) END YEAR10,
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT11, AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT11, AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT11, AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT11, AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT11, AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT11, AMT6)), 0) END YEAR11,
           CASE WHEN C.SEQ=1 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT12, AMT1)), 0) WHEN C.SEQ=2 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT12, AMT2)), 0) WHEN C.SEQ=3 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT12, AMT3)), 0) WHEN C.SEQ=4 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT12, AMT4)), 0) WHEN C.SEQ=5 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT12, AMT5)), 0) WHEN C.SEQ=6 THEN NVL(SUM(DECODE(BSE_DT, D.BSE_DT12, AMT6)), 0) END YEAR12
    FROM 
    (
        SELECT D.VNDR_SEQ,
               E.VNDR_LGL_ENG_NM,
               NVL(D.CHSS_POOL_CD,'XXXXX') POOL_CD,
               NVL(C.SCC_CD,'XXXXX') SCC_CD,  
               B.EQ_FM_YD_CD YD_CD,               
               B.COST_YRMON BSE_DT, 
               SUM(DECODE(B.CHG_CD, 'PDM', NVL(B.PAY_LSE_CHG_TTL_AMT, 0), 0)) AMT1, -- DIV : PDM (PDM - Daily Lease 비용)
               SUM(DECODE(B.CHG_CD, 'ONT', NVL(B.PAY_LSE_CHG_TTL_AMT, 0), 0)) AMT2, -- DIV : ON-TML
               SUM(DECODE(B.CHG_CD, 'CRD', NVL(B.PAY_CR_AMT, 0), 0))          AMT3,  --추가
               SUM(DECODE(B.CHG_CD, 'MIG', NVL(B.PAY_LSE_CHG_AMT, 0), 0))     AMT4,  --추가 RSH
               SUM(DECODE(B.CHG_CD, 'RSH', NVL(B.PAY_LSE_CHG_AMT, 0), 0))     AMT5,  --추가 MIG
--               SUM(NVL(B.PAY_LSE_CHG_TTL_AMT,0)+NVL(B.PAY_TAX_AMT,0)+NVL(B.PAY_CR_AMT, 0)) AMT5 --DIV : TOTAL (PDM + ON-TML+TAX+CRD)
               SUM(
                    DECODE(B.CHG_CD, 'PDM', NVL(B.PAY_LSE_CHG_TTL_AMT, 0), 0)
                   +DECODE(B.CHG_CD, 'ONT', NVL(B.PAY_LSE_CHG_TTL_AMT, 0), 0)
                   +DECODE(B.CHG_CD, 'CRD', NVL(B.PAY_CR_AMT, 0), 0)
                   +DECODE(B.CHG_CD, 'MIG', NVL(B.PAY_LSE_CHG_AMT, 0), 0)
                   +DECODE(B.CHG_CD, 'RSH', NVL(B.PAY_LSE_CHG_AMT, 0), 0)
                  ) AMT6 --DIV : TOTAL (PDM + ON-TML+TAX+CRD+MIG+RSH)

        FROM CGM_LSE_CHG_DTL B
            ,MDM_LOCATION C
            ,CGM_AGREEMENT D
            ,MDM_VENDOR E
        WHERE B.EQ_KND_CD               = 'Z' -- Z : CHASSIS
--        AND   B.LSE_CHG_AUD_STS_CD      = 'C' -- 장비별 최초 AUDIT 결과코드(C - Coincidence (Agreement,Invoice Rate,금액,일자 일치))
        AND   B.PAY_LSE_CHG_STS_CD      = 'C' 
        
        --PAID 비용을 추출할때는 CGM_LSE_CHG_HDR 과 조일 필요함(김기철)
                
        AND   SUBSTR(B.EQ_FM_YD_CD,1,5) = C.LOC_CD(+)
        AND   D.AGMT_LSTM_CD            ='ZP'  -- COPS ZP 만 추출
        AND   D.AGMT_OFC_CTY_CD         = B.AGMT_OFC_CTY_CD
        AND   D.AGMT_SEQ                = B.AGMT_SEQ
        AND   D.AGMT_VER_NO             = B.AGMT_VER_NO
        AND   D.VNDR_SEQ                = E.VNDR_SEQ(+)
        AND   B.COST_YRMON BETWEEN @[from_bse_dt] AND @[to_bse_dt]
#if(${scc_cd} != '')
        AND   C.SCC_CD                  = @[scc_cd]
#end

#if(${combo_pool} != '')
        AND   D.CHSS_POOL_CD            = @[combo_pool]
#end

  #if (${search_vndr_seq} != '')
    -- Lessor
  	AND   D.VNDR_SEQ IN (
  		 #foreach($key IN ${arr_vndr_seq})
  		  	#if($velocityCount < $arr_vndr_seq.size())
  				'$key', 
  			#else 
  				'$key' 
  			#end 
  		#end 
  			           )
  #end

  #if (${search_yd_cd} != '')
    -- YARD CODE
  	AND B.EQ_FM_YD_CD IN (
  		 #foreach($key IN ${arr_yd_cd})
  		  	#if($velocityCount < $arr_yd_cd.size())
  				'$key', 
  			#else 
  				'$key' 
  			#end 
  		#end 
  			           )
  #end
     
        GROUP BY D.VNDR_SEQ
                ,E.VNDR_LGL_ENG_NM
                ,C.SCC_CD
                ,B.EQ_FM_YD_CD
                ,D.CHSS_POOL_CD 
                ,B.COST_YRMON 
    ) B,
    (
        SELECT LEVEL SEQ
        FROM DUAL CONNECT BY LEVEL <=6 -- 하드코딩
    ) C,
    (
        -- 12개의 하드코딩 타이틀
        SELECT MAX(DECODE(SEQ,  1, BSE_DT)) BSE_DT1,
               MAX(DECODE(SEQ,  2, BSE_DT)) BSE_DT2,
               MAX(DECODE(SEQ,  3, BSE_DT)) BSE_DT3,
               MAX(DECODE(SEQ,  4, BSE_DT)) BSE_DT4,
               MAX(DECODE(SEQ,  5, BSE_DT)) BSE_DT5,
               MAX(DECODE(SEQ,  6, BSE_DT)) BSE_DT6,
               MAX(DECODE(SEQ,  7, BSE_DT)) BSE_DT7,
               MAX(DECODE(SEQ,  8, BSE_DT)) BSE_DT8,
               MAX(DECODE(SEQ,  9, BSE_DT)) BSE_DT9,
               MAX(DECODE(SEQ, 10, BSE_DT)) BSE_DT10,
               MAX(DECODE(SEQ, 11, BSE_DT)) BSE_DT11,
               MAX(DECODE(SEQ, 12, BSE_DT)) BSE_DT12,
               MAX(SEQ) DUR_BETWEEN
        FROM 
        (
            -- 월 타이틀 완성(최대 12개월)
            SELECT B.SEQ SEQ,
                   TO_CHAR(ADD_MONTHS(A.BSE_DT, SEQ-1), 'YYYYMM') BSE_DT
            FROM 
            (
                SELECT TO_DATE(@[from_bse_dt], 'YYYYMM') BSE_DT,
                       MONTHS_BETWEEN(TO_DATE(@[to_bse_dt], 'YYYYMM'), TO_DATE(@[from_bse_dt], 'YYYYMM'))+1 DUR_BETWEEN
                FROM DUAL P 
            ) A,
            (
                SELECT LEVEL SEQ
                FROM 
                (
                    -- 시작월과 종료일에 대한 기간
                    SELECT TO_DATE(@[from_bse_dt], 'YYYYMM') BSE_DT,
                           MONTHS_BETWEEN(TO_DATE(@[to_bse_dt], 'YYYYMM'), TO_DATE(@[from_bse_dt], 'YYYYMM'))+1 DUR_BETWEEN
                    FROM DUAL P 
                ) B 
                CONNECT BY LEVEL <= B.DUR_BETWEEN
            ) B 
        ) 
    ) D
    GROUP BY B.VNDR_SEQ,
             B.VNDR_LGL_ENG_NM,
             C.SEQ,
             B.POOL_CD,
             B.SCC_CD,
             B.YD_CD 
) A
ORDER BY A.VNDR_SEQ,
         A.VNDR_LGL_ENG_NM,
         A.POOL_CD,
         A.SCC_CD,
         A.YD_CD,
         A.DIVISION
)

SELECT VNDR_SEQ
      ,VNDR_LGL_ENG_NM VNDR_NM
      ,POOL_CD 
      ,SCC_CD   SCC
      ,YD_CD      
      ,DIV_NAME DIV
      ,TTL
      ,YEAR1
      ,YEAR2
      ,YEAR3
      ,YEAR4
      ,YEAR5
      ,YEAR6
      ,YEAR7
      ,YEAR8
      ,YEAR9
      ,YEAR10
      ,YEAR11
      ,YEAR12 
      --,DIV_CODE
      --,DIVISION
FROM
(
    -- NORMAL ROW
    SELECT ''||VNDR_SEQ VNDR_SEQ
          ,VNDR_LGL_ENG_NM
          ,POOL_CD
          ,SCC_CD 
          ,YD_CD
          ,DIV_NAME 
          ,TTL
          ,YEAR1
          ,YEAR2
          ,YEAR3
          ,YEAR4
          ,YEAR5
          ,YEAR6
          ,YEAR7
          ,YEAR8
          ,YEAR9
          ,YEAR10
          ,YEAR11
          ,YEAR12  
          ,1 DIV_CODE
          ,DIVISION        
    FROM DUMMY_DATA   
    
    UNION ALL    
    -- POOL CD'S SUB TOTAL 
    SELECT ''||VNDR_SEQ  VNDR_SEQ
          ,VNDR_LGL_ENG_NM
          ,'S.TTL' POOL_CD
          ,'' SCC_CD 
          ,'' YD_CD          
          ,DIV_NAME
          ,NVL(SUM(TTL   ),0) TTL
          ,NVL(SUM(YEAR1 ),0) YEAR1 
          ,NVL(SUM(YEAR2 ),0) YEAR2 
          ,NVL(SUM(YEAR3 ),0) YEAR3 
          ,NVL(SUM(YEAR4 ),0) YEAR4 
          ,NVL(SUM(YEAR5 ),0) YEAR5 
          ,NVL(SUM(YEAR6 ),0) YEAR6 
          ,NVL(SUM(YEAR7 ),0) YEAR7 
          ,NVL(SUM(YEAR8 ),0) YEAR8 
          ,NVL(SUM(YEAR9 ),0) YEAR9 
          ,NVL(SUM(YEAR10),0) YEAR10
          ,NVL(SUM(YEAR11),0) YEAR11
          ,NVL(SUM(YEAR12),0) YEAR12  
          ,2 DIV_CODE
          ,DIVISION      
    FROM DUMMY_DATA   
    GROUP BY VNDR_SEQ
            ,VNDR_LGL_ENG_NM
            ,DIV_NAME
            ,DIVISION
            
    UNION ALL    
    -- G.TTL TOTAL 
    SELECT 'G.TTL' VNDR_SEQ 
          ,'' VNDR_LGL_ENG_NM
          ,'' POOL_CD
          ,'' SCC_CD 
          ,'' YD_CD 
          ,DIV_NAME
          ,NVL(SUM(TTL   ),0) TTL
          ,NVL(SUM(YEAR1 ),0) YEAR1 
          ,NVL(SUM(YEAR2 ),0) YEAR2 
          ,NVL(SUM(YEAR3 ),0) YEAR3 
          ,NVL(SUM(YEAR4 ),0) YEAR4 
          ,NVL(SUM(YEAR5 ),0) YEAR5 
          ,NVL(SUM(YEAR6 ),0) YEAR6 
          ,NVL(SUM(YEAR7 ),0) YEAR7 
          ,NVL(SUM(YEAR8 ),0) YEAR8 
          ,NVL(SUM(YEAR9 ),0) YEAR9 
          ,NVL(SUM(YEAR10),0) YEAR10
          ,NVL(SUM(YEAR11),0) YEAR11
          ,NVL(SUM(YEAR12),0) YEAR12
          ,3 DIV_CODE
          ,DIVISION  
    FROM DUMMY_DATA   
    GROUP BY DIV_NAME
            ,DIVISION        
) 
ORDER BY DECODE(VNDR_SEQ, 'G.TTL', 'ZZZZZ', VNDR_SEQ)
        ,DIV_CODE
        ,POOL_CD
        ,SCC_CD
        ,YD_CD
        ,DIVISION			]]></sql>
			<params>
				<param name="from_bse_dt" type="12" value="" out="N"/>
				<param name="to_bse_dt" type="12" value="" out="N"/>
				<param name="scc_cd" type="12" value="" out="N"/>
				<param name="combo_pool" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
