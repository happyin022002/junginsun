/*=========================================================
*Copyright(c) 2012 CyberLogitec
*@FileName : TonnageTaxStandardProfitConclusionDBDAONonFeederPortCalculationVOCSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2012.01.27
*@LastModifier : 이준범
*@LastVersion : 1.0
* 2012.01.27 이준범
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.fns.tot.tonnagetaxoutput.tonnagetaxstandardprofitconclusion.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author LEE-JUN-BUM
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class TonnageTaxStandardProfitConclusionDBDAONonFeederPortCalculationVOCSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * 2012.01.27 이준범 [CHM-201113807-01]
	  * 제목 : ALPS 톤세 시스템 기능보완 - T/TAX Recalculation
	  * 내용 : 1) T/Tax Recalculated 옆에 Lane이 추가 되면 추가된 선박만 재배치 할 수 있게 처리
	  *          2) T/Tax Recalculated 작업 후, 변경된 내역을 표시해주는 팝업창 또는 화면을 추가하여
	  *            변경사항 확인할 수 있게 처리
	  * </pre>
	  */
	public TonnageTaxStandardProfitConclusionDBDAONonFeederPortCalculationVOCSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("stl_yrmon",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("cre_usr_id",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vsl_cd",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.fns.tot.tonnagetaxoutput.tonnagetaxstandardprofitconclusion.integration").append("\n"); 
		query.append("FileName : TonnageTaxStandardProfitConclusionDBDAONonFeederPortCalculationVOCSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("INSERT INTO TOT_PORT_STL_AMT" ).append("\n"); 
		query.append("(       " ).append("\n"); 
		query.append("  STL_YRMON	            " ).append("\n"); 
		query.append(" ,TONG_STL_BAT_JB_SEQ	  " ).append("\n"); 
		query.append(" ,VSL_CD	              " ).append("\n"); 
		query.append(" ,PORT_CD	              " ).append("\n"); 
		query.append(" ,PORT_SEQ	            " ).append("\n"); 
		query.append(" ,TRD_CD	              " ).append("\n"); 
		query.append(" ,SLAN_CD	              " ).append("\n"); 
		query.append(" ,SKD_VOY_NO	          " ).append("\n"); 
		query.append(" ,SKD_DIR_CD	          " ).append("\n"); 
		query.append(" ,BSA_CAPA	            " ).append("\n"); 
		query.append(" ,ACT_BSA_CAPA	        " ).append("\n"); 
		query.append(" ,LDB_CAPA_QTY	        " ).append("\n"); 
		query.append(" ,CHTR_BSA_CAPA	        " ).append("\n"); 
		query.append(" ,BSA_CAPA_MODI_FLG	    	" ).append("\n"); 
		query.append(" ,ETD_DT	              " ).append("\n"); 
		query.append(" ,USG_RT	 " ).append("\n"); 
		query.append(" ,VOY_DYS             " ).append("\n"); 
		query.append(" ,TONG_TAX_AMT	" ).append("\n"); 
		query.append(" ,PER_TON_REV             " ).append("\n"); 
		query.append(" ,NRT_WGT				        	" ).append("\n"); 
		query.append(" ,CRE_DT                " ).append("\n"); 
		query.append(" ,CRE_USR_ID            " ).append("\n"); 
		query.append(" ,UPD_DT                " ).append("\n"); 
		query.append(" ,UPD_USR_ID                      " ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("SELECT S.STL_YRMON" ).append("\n"); 
		query.append("      ,S.TONG_STL_BAT_JB_SEQ " ).append("\n"); 
		query.append("      ,S.VSL_CD" ).append("\n"); 
		query.append("      ,S.VPS_PORT_CD " ).append("\n"); 
		query.append("      ,ROW_NUMBER() OVER(PARTITION BY  S.STL_YRMON, S.TONG_STL_BAT_JB_SEQ, S.VSL_CD, S.VPS_PORT_CD  ORDER BY S.VSL_CD )" ).append("\n"); 
		query.append("      ,S.TRD_CD" ).append("\n"); 
		query.append("      ,S.SLAN_CD" ).append("\n"); 
		query.append("      ,S.SKD_VOY_NO" ).append("\n"); 
		query.append("      ,S.SKD_DIR_CD" ).append("\n"); 
		query.append("      ,S.BSA_CAPA" ).append("\n"); 
		query.append("      ,S.ACTUAL_LOADED_VOL" ).append("\n"); 
		query.append("      ,S.LDB_CAPA_QTY" ).append("\n"); 
		query.append("      ,S.CHTR_BSA_CAPA" ).append("\n"); 
		query.append("      ,S.BSA_CAPA_MODI_FLG " ).append("\n"); 
		query.append("      ,S.ETD_DT" ).append("\n"); 
		query.append("      ,ROUND(NVL(S.USG_RT,0),2)    " ).append("\n"); 
		query.append("      ,S.VOY_DYS" ).append("\n"); 
		query.append("      ,TRUNC(((NVL(S.USG_RT, 0)/100 )* S.TAX_RATE )* S.VOY_DYS )" ).append("\n"); 
		query.append("      ,S.TAX_RATE" ).append("\n"); 
		query.append("      ,S.VSL_NRT  " ).append("\n"); 
		query.append("      ,SYSDATE " ).append("\n"); 
		query.append("      ,@[cre_usr_id]" ).append("\n"); 
		query.append("      ,SYSDATE" ).append("\n"); 
		query.append("      ,@[cre_usr_id]" ).append("\n"); 
		query.append("  FROM (" ).append("\n"); 
		query.append("        SELECT T1.STL_YRMON" ).append("\n"); 
		query.append("              ,T1.TONG_STL_BAT_JB_SEQ  " ).append("\n"); 
		query.append("              ,T1.VSL_CD" ).append("\n"); 
		query.append("              ,T1.VPS_PORT_CD" ).append("\n"); 
		query.append("              ,T1.SLAN_CD" ).append("\n"); 
		query.append("              ,T1.SKD_VOY_NO" ).append("\n"); 
		query.append("              ,T1.SKD_DIR_CD" ).append("\n"); 
		query.append("              ,CASE WHEN TO_CHAR(T1.VPS_ETD_DT, 'YYYYMMDD') < @[stl_yrmon] THEN " ).append("\n"); 
		query.append("                         T1.F_DATE" ).append("\n"); 
		query.append("                    ELSE " ).append("\n"); 
		query.append("                         T1.VPS_ETD_DT" ).append("\n"); 
		query.append("                     END " ).append("\n"); 
		query.append("               AS ETD_DT  " ).append("\n"); 
		query.append("              ,'N' AS BSA_CAPA_MODI_FLG      " ).append("\n"); 
		query.append("              ,CASE WHEN (T2.FNL_HJS_BSA_CAPA + NVL(T2.CRR_BSA_CAPA,0)) > T1.QTY THEN " ).append("\n"); 
		query.append("                         NVL((NVL(T2.FNL_HJS_BSA_CAPA,0) + NVL(T2.CRR_BSA_CAPA,0))/DECODE(T2.LDB_CAPA_QTY,0,null,T2.LDB_CAPA_QTY),0) *100" ).append("\n"); 
		query.append("                    ELSE " ).append("\n"); 
		query.append("                         NVL((T1.QTY+ NVL(T2.CRR_BSA_CAPA,0))/DECODE(T2.LDB_CAPA_QTY,0,NULL,T2.LDB_CAPA_QTY),0)*100" ).append("\n"); 
		query.append("                     END " ).append("\n"); 
		query.append("               AS USG_RT         " ).append("\n"); 
		query.append("              ,T1.DAYS - T1.EXP_DAYS AS VOY_DYS" ).append("\n"); 
		query.append("              ,T1.QTY                AS ACTUAL_LOADED_VOL" ).append("\n"); 
		query.append("              ,T2.TRD_CD" ).append("\n"); 
		query.append("              ,T2.CLPT_IND_SEQ" ).append("\n"); 
		query.append("              ,T2.CLPT_SEQ" ).append("\n"); 
		query.append("              ,T2.VSL_ENG_NM" ).append("\n"); 
		query.append("              ,T2.TONG_FLET_TP_CD" ).append("\n"); 
		query.append("              ,T2.VSL_GRT" ).append("\n"); 
		query.append("              ,T2.VSL_NRT" ).append("\n"); 
		query.append("              ,T2.VSL_DE_DT" ).append("\n"); 
		query.append("              ,T2.LDB_CAPA_QTY" ).append("\n"); 
		query.append("              ,T2.FNL_HJS_BSA_CAPA    AS BSA_CAPA" ).append("\n"); 
		query.append("              ,NVL(T2.CRR_BSA_CAPA,0) AS CHTR_BSA_CAPA " ).append("\n"); 
		query.append("              ,CASE WHEN T2.VSL_NRT > 1000 THEN" ).append("\n"); 
		query.append("                         CASE WHEN (T2.VSL_NRT-1000) > 9000 THEN" ).append("\n"); 
		query.append("                                   CASE WHEN (T2.VSL_NRT-10000) > 15000 THEN" ).append("\n"); 
		query.append("                                             ((T2.VSL_NRT-25000)*4)+(15000*7)+(9000*11)+(1000*14)" ).append("\n"); 
		query.append("                                        ELSE" ).append("\n"); 
		query.append("                                             ((T2.VSL_NRT-10000)*7)+(9000*11)+(1000*14)" ).append("\n"); 
		query.append("                                         END" ).append("\n"); 
		query.append("                              ELSE" ).append("\n"); 
		query.append("                                   ((T2.VSL_NRT-1000)*11)+(1000*14)" ).append("\n"); 
		query.append("                               END " ).append("\n"); 
		query.append("                    ELSE" ).append("\n"); 
		query.append("                         T2.VSL_NRT*14    " ).append("\n"); 
		query.append("                     END" ).append("\n"); 
		query.append("               AS TAX_RATE" ).append("\n"); 
		query.append("              ,T1.DAYS" ).append("\n"); 
		query.append("          FROM (" ).append("\n"); 
		query.append("                SELECT @[stl_yrmon] AS STL_YRMON" ).append("\n"); 
		query.append("                      ,( SELECT NVL(MAX(TONG_STL_BAT_JB_SEQ),0) " ).append("\n"); 
		query.append("                           FROM TOT_PORT_STL_AMT " ).append("\n"); 
		query.append("                          WHERE STL_YRMON = @[stl_yrmon] " ).append("\n"); 
		query.append("                       ) AS TONG_STL_BAT_JB_SEQ  " ).append("\n"); 
		query.append("                      ,U1.VSL_CD" ).append("\n"); 
		query.append("                      ,U1.VPS_PORT_CD" ).append("\n"); 
		query.append("                      ,U1.SLAN_CD" ).append("\n"); 
		query.append("                      ,U1.SKD_VOY_NO" ).append("\n"); 
		query.append("                      ,U1.SKD_DIR_CD" ).append("\n"); 
		query.append("                      ,U1.VPS_ETD_DT  " ).append("\n"); 
		query.append("                      ,U1.F_DATE" ).append("\n"); 
		query.append("                      ,U1.DAYS" ).append("\n"); 
		query.append("                      ,U1.EXP_DAYS" ).append("\n"); 
		query.append("                      ,NVL(U2.ROB,0) AS QTY                       " ).append("\n"); 
		query.append("                  FROM (                  " ).append("\n"); 
		query.append("                        SELECT T.VSL_CD" ).append("\n"); 
		query.append("                              ,T.SKD_VOY_NO" ).append("\n"); 
		query.append("                              ,T.SKD_DIR_CD" ).append("\n"); 
		query.append("                              ,T.SLAN_CD" ).append("\n"); 
		query.append("                              ,T.VPS_PORT_CD" ).append("\n"); 
		query.append("                              ,T.SEQ_IN_MONTH" ).append("\n"); 
		query.append("                              ,T.VPS_ETD_DT" ).append("\n"); 
		query.append("                              ,T.F_DATE" ).append("\n"); 
		query.append("                              ,T.T_DATE" ).append("\n"); 
		query.append("                              ,T.VVD" ).append("\n"); 
		query.append("                              ,T.TURN_VVD" ).append("\n"); 
		query.append("                              ,T.PREV_VVD" ).append("\n"); 
		query.append("                              ,T.NEXT_VVD" ).append("\n"); 
		query.append("                              ,T.NEXT_TURN_VVD" ).append("\n"); 
		query.append("                              ,T.MIN_SEQ" ).append("\n"); 
		query.append("                              ,T.MAX_SEQ" ).append("\n"); 
		query.append("                              ,T.DAYS  " ).append("\n"); 
		query.append("                              ,MAX(T.EXP_DAYS) AS EXP_DAYS  " ).append("\n"); 
		query.append("                          FROM ( /*해당월의 선박 사용일수 구하는 쿼리*/" ).append("\n"); 
		query.append("                                SELECT T1.VSL_CD" ).append("\n"); 
		query.append("                                      ,T1.SKD_VOY_NO" ).append("\n"); 
		query.append("                                      ,T1.SKD_DIR_CD" ).append("\n"); 
		query.append("                                      ,T1.SLAN_CD" ).append("\n"); 
		query.append("                                      ,T1.VPS_PORT_CD" ).append("\n"); 
		query.append("                                      ,T1.SEQ_IN_MONTH" ).append("\n"); 
		query.append("                                      ,T1.VPS_ETD_DT" ).append("\n"); 
		query.append("                                      ,T1.F_DATE" ).append("\n"); 
		query.append("                                      ,T1.T_DATE" ).append("\n"); 
		query.append("                                      ,T1.VVD" ).append("\n"); 
		query.append("                                      ,T1.TURN_VVD" ).append("\n"); 
		query.append("                                      ,T1.PREV_VVD" ).append("\n"); 
		query.append("                                      ,T1.NEXT_VVD" ).append("\n"); 
		query.append("                                      ,T1.NEXT_TURN_VVD" ).append("\n"); 
		query.append("                                      ,T1.MIN_SEQ" ).append("\n"); 
		query.append("                                      ,T1.MAX_SEQ" ).append("\n"); 
		query.append("                                      ,CASE WHEN T1.SEQ_IN_MONTH = T1.MAX_SEQ AND T1.MIN_SEQ != T1.MAX_SEQ THEN /* 해당월의 마지막 스케쥴인 경우 */" ).append("\n"); 
		query.append("                                                 CASE WHEN T1.VVD = T1.NEXT_VVD OR T1.VVD = T1.NEXT_TURN_VVD THEN /* 전달 마지막 스케쥴과 다음달 첫 스케쥴의 VVD가 같거나 전달 마지막 스케쥴과 다음달 첫 스케쥴의 TURN_VVD가 같을 경우 연속 */" ).append("\n"); 
		query.append("                                                           T1.T_DATE-T1.F_DATE" ).append("\n"); 
		query.append("                                                      ELSE" ).append("\n"); 
		query.append("                                                             -- CASE WHEN TRIM(T1.NEXT_TURN_SKD_VOY_NO) IS NULL THEN     /* NEXT_TURN_SKD_VOY_NO 존재하는 경우 말일까지 일수 계산*/" ).append("\n"); 
		query.append("                                                           0 -- '마지막날이고 연속이 아닌 경우'" ).append("\n"); 
		query.append("                                                       END" ).append("\n"); 
		query.append("                                            ELSE /*마지막 스케쥴이 아닌경우 순수 해당월의 첫번째 PORT 스케쥴이 전월 마지막 PORT 스케쥴과 연속적인 경우*/" ).append("\n"); 
		query.append("                                                 CASE WHEN (T1.MIN_SEQ= 1 AND T1.SEQ_IN_MONTH = 1 AND (T1.VVD = T1.PREV_VVD OR T1.TURN_VVD = T1.PREV_VVD) ) THEN" ).append("\n"); 
		query.append("                                                           /*첫번째 PORT 스케쥴이 다음 스케쥴과 연속인 경우*/" ).append("\n"); 
		query.append("                                                           CASE WHEN (T1.VVD = T1.NEXT_VVD OR T1.VVD = T1.NEXT_TURN_VVD) THEN" ).append("\n"); 
		query.append("                                                                     T1.T_DATE-T1.F_DATE +1   " ).append("\n"); 
		query.append("                                                                ELSE" ).append("\n"); 
		query.append("                                                                     1" ).append("\n"); 
		query.append("                                                                 END   " ).append("\n"); 
		query.append("                                                      ELSE /*첫번째 PORT스케쥴이면서 PAGE IN인 경우나  마지막 스케쥴이 아닌 나머지 경우중 연속일때*/" ).append("\n"); 
		query.append("                                                           CASE WHEN(T1.VVD = T1.NEXT_VVD OR T1.VVD = T1.NEXT_TURN_VVD) THEN" ).append("\n"); 
		query.append("                                                                    T1.T_DATE-T1.F_DATE      " ).append("\n"); 
		query.append("                                                                ELSE" ).append("\n"); 
		query.append("                                                                     0" ).append("\n"); 
		query.append("                                                                 END                               " ).append("\n"); 
		query.append("                                                       END" ).append("\n"); 
		query.append("                                             END" ).append("\n"); 
		query.append("                                       AS DAYS" ).append("\n"); 
		query.append("                                      ,EXP_F_DATE" ).append("\n"); 
		query.append("                                      ,EXP_T_DATE" ).append("\n"); 
		query.append("                                      ,CASE WHEN T1.F_DATE >= T2.EXP_F_DATE AND T1.F_DATE <= T2.EXP_T_DATE THEN /*F_DATE가 제외기간 안에 있는경우*/                                                 " ).append("\n"); 
		query.append("                                                 CASE WHEN T1.T_DATE <= T2.EXP_T_DATE THEN   /* T_DATE가 제외기간 안에 있는경우*/" ).append("\n"); 
		query.append("                                                           CASE WHEN T1.SEQ_IN_TOTAL <> 1 AND SEQ_IN_MONTH  = MIN_SEQ THEN    /*초입이 아니고 (연속적인 스케줄이고) 달의 첫날이 걸려잇다면 운항일수에 +1을 함*/" ).append("\n"); 
		query.append("                                                                     T1.T_DATE-T1.F_DATE+1" ).append("\n"); 
		query.append("                                                                ELSE " ).append("\n"); 
		query.append("                                                                     T1.T_DATE-T1.F_DATE" ).append("\n"); 
		query.append("                                                                 END" ).append("\n"); 
		query.append("                                                      ELSE /*T_DATE가 제외기간 밖에 있을경우 */" ).append("\n"); 
		query.append("                                                           CASE WHEN T1.SEQ_IN_TOTAL <> 1 AND SEQ_IN_MONTH  = MIN_SEQ THEN    /*초입이 아니고(연속적인 스케줄이고) 달의 첫날이 걸려잇다면 운항일수에 +1을 함*/" ).append("\n"); 
		query.append("                                                                     LEAST(TRUNC(T2.EXP_T_DATE), LAST_DAY(T1.F_DATE)) - T1.F_DATE+1" ).append("\n"); 
		query.append("                                                                ELSE " ).append("\n"); 
		query.append("                                                                     LEAST(TRUNC(T2.EXP_T_DATE), LAST_DAY(T1.F_DATE)) - T1.F_DATE" ).append("\n"); 
		query.append("                                                                 END" ).append("\n"); 
		query.append("                                                       END" ).append("\n"); 
		query.append("                                            ELSE                             /*F_DATE가 제외기간 밖에 있는경우*/" ).append("\n"); 
		query.append("                                                 CASE WHEN (T1.T_DATE >= T2.EXP_F_DATE) AND (T1.T_DATE <= T2.EXP_T_DATE) AND T1.SEQ_IN_TOTAL != T1.MAX_NUM THEN     /*T_DATE가 제외기간 안에 있는경우*/                                                           " ).append("\n"); 
		query.append("                                                           CASE WHEN T1.SEQ_IN_TOTAL <> 1 AND SEQ_IN_MONTH  = MIN_SEQ THEN    /*초입이 아니고 달의 첫날이 걸려잇다면 운항일수에 +1을 함*/" ).append("\n"); 
		query.append("                                                                     T1.T_DATE - TO_DATE(SUBSTR(TO_CHAR(T1.F_DATE,'YYYYMMDD'),1,6) || 01,'YYYYMMDD')+1" ).append("\n"); 
		query.append("                                                                ELSE " ).append("\n"); 
		query.append("                                                                     T1.T_DATE - T2.EXP_F_DATE" ).append("\n"); 
		query.append("                                                                 END" ).append("\n"); 
		query.append("                                                      ELSE" ).append("\n"); 
		query.append("                                                           0" ).append("\n"); 
		query.append("                                                       END          " ).append("\n"); 
		query.append("                                             END " ).append("\n"); 
		query.append("                                       AS EXP_DAYS                                     " ).append("\n"); 
		query.append("                                  FROM (  /* 연속되지 않은 경우는 운항일수에서 배제됨 */" ).append("\n"); 
		query.append("                                        SELECT T3.VSL_CD" ).append("\n"); 
		query.append("                                              ,T3.SKD_VOY_NO" ).append("\n"); 
		query.append("                                              ,T3.SKD_DIR_CD" ).append("\n"); 
		query.append("                                              ,T3.SLAN_CD" ).append("\n"); 
		query.append("                                              ,T3.VPS_PORT_CD" ).append("\n"); 
		query.append("                                              ,T3.CLPT_IND_SEQ " ).append("\n"); 
		query.append("                                              ,T3.CLPT_SEQ" ).append("\n"); 
		query.append("                                              ,T3.VPS_ETD_DT" ).append("\n"); 
		query.append("                                              ,T3.TURN_PORT_IND_CD " ).append("\n"); 
		query.append("                                              ,T3.TURN_SKD_VOY_NO" ).append("\n"); 
		query.append("                                              ,T3.NEXT_VPS_ETD_DT" ).append("\n"); 
		query.append("                                              ,T3.SKD_CNG_STS_CD" ).append("\n"); 
		query.append("                                              ,T3.NUM_IN_TOTAL" ).append("\n"); 
		query.append("                                              ,T3.VVD" ).append("\n"); 
		query.append("                                              ,T3.PREV_VVD" ).append("\n"); 
		query.append("                                              ,T3.NEXT_VVD" ).append("\n"); 
		query.append("                                              ,T3.TURN_VVD" ).append("\n"); 
		query.append("                                              ,T3.NEXT_TURN_VVD" ).append("\n"); 
		query.append("                                              ,DECODE( MIN(T3.SEQ_IN_MONTH) OVER(PARTITION BY T3.VSL_CD), 2, DECODE(T3.SEQ_IN_MONTH, 2, DECODE(T3.PREV_VVD, T3.VVD, TO_DATE(@[stl_yrmon]||'01', 'YYYYMMDD'), T3.TURN_VVD, TO_DATE(@[stl_yrmon]||'01', 'YYYYMMDD'), T3.F_DATE), T3.F_DATE), T3.F_DATE) F_DATE" ).append("\n"); 
		query.append("                                              ,MIN(T3.SEQ_IN_MONTH) OVER(PARTITION BY  T3.VSL_CD) MIN_SEQ" ).append("\n"); 
		query.append("                                              ,MAX(T3.SEQ_IN_MONTH) OVER(PARTITION BY  T3.VSL_CD) MAX_SEQ" ).append("\n"); 
		query.append("                                              ,T3.T_DATE" ).append("\n"); 
		query.append("                                              ,T3.SEQ_IN_MONTH" ).append("\n"); 
		query.append("                                              ,T3.SEQ_IN_TOTAL" ).append("\n"); 
		query.append("                                              ,T3.MAX_NUM" ).append("\n"); 
		query.append("                                              ,T3.DEL_FLG" ).append("\n"); 
		query.append("                                          FROM (" ).append("\n"); 
		query.append("                                                SELECT T2.VSL_CD" ).append("\n"); 
		query.append("                                                      ,T2.SKD_VOY_NO" ).append("\n"); 
		query.append("                                                      ,T2.SKD_DIR_CD" ).append("\n"); 
		query.append("                                                      ,T2.SLAN_CD" ).append("\n"); 
		query.append("                                                      ,T2.VPS_PORT_CD" ).append("\n"); 
		query.append("                                                      ,T2.CLPT_IND_SEQ " ).append("\n"); 
		query.append("                                                      ,T2.CLPT_SEQ" ).append("\n"); 
		query.append("                                                      ,T2.VPS_ETD_DT" ).append("\n"); 
		query.append("                                                      ,T2.TURN_PORT_IND_CD " ).append("\n"); 
		query.append("                                                      ,T2.TURN_SKD_VOY_NO" ).append("\n"); 
		query.append("                                                      ,T2.NEXT_VPS_ETD_DT" ).append("\n"); 
		query.append("                                                      ,T2.SKD_CNG_STS_CD" ).append("\n"); 
		query.append("                                                      ,T2.NUM_IN_TOTAL" ).append("\n"); 
		query.append("                                                      ,T2.VVD" ).append("\n"); 
		query.append("                                                      ,T2.PREV_VVD" ).append("\n"); 
		query.append("                                                      ,T2.NEXT_VVD" ).append("\n"); 
		query.append("                                                      ,T2.TURN_VVD" ).append("\n"); 
		query.append("                                                      ,T2.NEXT_TURN_VVD" ).append("\n"); 
		query.append("                                                      ,T2.F_DATE" ).append("\n"); 
		query.append("                                                      ,T2.T_DATE" ).append("\n"); 
		query.append("                                                      ,T2.SEQ_IN_MONTH" ).append("\n"); 
		query.append("                                                      ,T2.SEQ_IN_TOTAL" ).append("\n"); 
		query.append("                                                      ,T2.MAX_NUM" ).append("\n"); 
		query.append("                                                      ,DECODE(T2.SEQ_IN_MONTH,1,'Y','N') DEL_FLG" ).append("\n"); 
		query.append("                                                  FROM ( /* 선정된 선박의 항차중 3월에 속한 항차를 선정 */" ).append("\n"); 
		query.append("                                                        SELECT T1.*" ).append("\n"); 
		query.append("                                                              ,GREATEST(TRUNC(VPS_ETD_DT), TO_DATE(@[stl_yrmon],'YYYYMM')) F_DATE" ).append("\n"); 
		query.append("                                                              ,LEAST(TRUNC(NEXT_VPS_ETD_DT), LAST_DAY(TO_DATE(@[stl_yrmon],'YYYYMM'))) T_DATE" ).append("\n"); 
		query.append("                                                              ,ROW_NUMBER() OVER(PARTITION BY  T1.VSL_CD ORDER BY T1.VPS_ETD_DT, T1.NEXT_VPS_ETD_DT) SEQ_IN_MONTH" ).append("\n"); 
		query.append("                                                              ,T1.NUM_IN_TOTAL AS SEQ_IN_TOTAL" ).append("\n"); 
		query.append("                                                              ,( SELECT COUNT(CLPT_SEQ) " ).append("\n"); 
		query.append("                                                                   FROM VSK_VSL_PORT_SKD B " ).append("\n"); 
		query.append("                                                                  WHERE TO_CHAR(VPS_ETD_DT, 'YYYYMM') BETWEEN TO_CHAR(TO_DATE(@[stl_yrmon]||'01','YYYYMMDD')-50, 'YYYYMM') AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(@[stl_yrmon],'YYYYMM'),+1)),'YYYYMM')" ).append("\n"); 
		query.append("                                                                    AND B.VSL_CD = T1.VSL_CD " ).append("\n"); 
		query.append("                                                                    AND TURN_PORT_IND_CD NOT IN ('V','D') " ).append("\n"); 
		query.append("                                                                    AND (SKD_CNG_STS_CD IS NULL OR SKD_CNG_STS_CD <> 'S') " ).append("\n"); 
		query.append("                                                                    AND VPS_PORT_CD NOT IN ('EGSUZ', 'PAPAC')" ).append("\n"); 
		query.append("                                                               ) AS MAX_NUM" ).append("\n"); 
		query.append("                                                          FROM (" ).append("\n"); 
		query.append("                                                                SELECT VSL_CD" ).append("\n"); 
		query.append("                                                                      ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                                                      ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                                                      ,SLAN_CD" ).append("\n"); 
		query.append("                                                                      ,VPS_PORT_CD" ).append("\n"); 
		query.append("                                                                      ,CLPT_IND_SEQ " ).append("\n"); 
		query.append("                                                                      ,CLPT_SEQ" ).append("\n"); 
		query.append("                                                                      ,VPS_ETD_DT" ).append("\n"); 
		query.append("                                                                      ,TURN_PORT_IND_CD " ).append("\n"); 
		query.append("                                                                      ,TURN_SKD_VOY_NO" ).append("\n"); 
		query.append("                                                                      ,NEXT_VPS_ETD_DT" ).append("\n"); 
		query.append("                                                                      ,SKD_CNG_STS_CD" ).append("\n"); 
		query.append("                                                                      ,ROW_NUMBER() OVER(PARTITION BY  T0.VSL_CD ORDER BY VPS_ETD_DT, NEXT_VPS_ETD_DT) NUM_IN_TOTAL" ).append("\n"); 
		query.append("                                                                      ,VVD" ).append("\n"); 
		query.append("                                                                      ,PREV_VVD" ).append("\n"); 
		query.append("                                                                      ,NEXT_VVD" ).append("\n"); 
		query.append("                                                                      ,TURN_VVD" ).append("\n"); 
		query.append("                                                                      ,NEXT_TURN_VVD" ).append("\n"); 
		query.append("                                                                  FROM ( /* 해당월로부터 -50 일전부터  + 한달후까지 기준으로 대상선정*/" ).append("\n"); 
		query.append("                                                                        SELECT A.VSL_CD" ).append("\n"); 
		query.append("                                                                              ,A.SKD_VOY_NO" ).append("\n"); 
		query.append("                                                                              ,A.SKD_DIR_CD" ).append("\n"); 
		query.append("                                                                              ,A.VPS_PORT_CD" ).append("\n"); 
		query.append("                                                                              ,A.CLPT_IND_SEQ " ).append("\n"); 
		query.append("                                                                              ,A.CLPT_SEQ" ).append("\n"); 
		query.append("                                                                              ,A.VPS_ETD_DT" ).append("\n"); 
		query.append("                                                                              ,A.TURN_PORT_IND_CD  " ).append("\n"); 
		query.append("                                                                              ,A.TURN_SKD_VOY_NO " ).append("\n"); 
		query.append("                                                                              ,DECODE(LEAD(A.VPS_ETD_DT) OVER (PARTITION BY A.VSL_CD ORDER BY A.VPS_ETD_DT),NULL,A.VPS_ETD_DT,LEAD(A.VPS_ETD_DT) OVER (PARTITION BY A.VSL_CD ORDER BY A.VPS_ETD_DT)) AS NEXT_VPS_ETD_DT" ).append("\n"); 
		query.append("                                                                              ,TRIM(LEAD(A.VSL_CD||A.TURN_SKD_VOY_NO||A.TURN_SKD_DIR_CD) OVER (PARTITION BY A.VSL_CD ORDER BY A.VPS_ETD_DT)) AS NEXT_TURN_VVD" ).append("\n"); 
		query.append("                                                                              ,A.VSL_CD || A.SKD_VOY_NO || A.SKD_DIR_CD AS VVD" ).append("\n"); 
		query.append("                                                                              ,LEAD(A.VSL_CD || A.SKD_VOY_NO||A.SKD_DIR_CD) OVER (PARTITION BY A.VSL_CD ORDER BY A.VPS_ETD_DT DESC) AS PREV_VVD" ).append("\n"); 
		query.append("                                                                              ,LEAD(A.VSL_CD || A.SKD_VOY_NO||A.SKD_DIR_CD) OVER (PARTITION BY A.VSL_CD ORDER BY A.VPS_ETD_DT) AS NEXT_VVD" ).append("\n"); 
		query.append("                                                                              ,A.VSL_CD || A.TURN_SKD_VOY_NO || A.TURN_SKD_DIR_CD AS TURN_VVD" ).append("\n"); 
		query.append("                                                                              ,A.SKD_CNG_STS_CD" ).append("\n"); 
		query.append("                                                                              ,A.SLAN_CD" ).append("\n"); 
		query.append("                                                                              ,B.VSL_SVC_TP_CD" ).append("\n"); 
		query.append("                                                                          FROM VSK_VSL_PORT_SKD A" ).append("\n"); 
		query.append("                                                                              ,MDM_VSL_SVC_LANE B" ).append("\n"); 
		query.append("                                                                         WHERE 1=1" ).append("\n"); 
		query.append("                                                                           AND A.SLAN_CD IN ( " ).append("\n"); 
		query.append("                                                                                             SELECT L.VSL_SLAN_CD" ).append("\n"); 
		query.append("                                                                                               FROM TOT_LANE L" ).append("\n"); 
		query.append("                                                                                                   ,TOT_LANE_TRD T" ).append("\n"); 
		query.append("                                                                                              WHERE L.STL_YRMON =@[stl_yrmon]" ).append("\n"); 
		query.append("                                                                                                AND L.DELT_FLG = 'N'" ).append("\n"); 
		query.append("                                                                                                AND T.LANE_SEQ = '1'" ).append("\n"); 
		query.append("                                                                                                AND L.STL_YRMON = T.STL_YRMON" ).append("\n"); 
		query.append("                                                                                                AND L.VSL_SLAN_CD = T.VSL_SLAN_CD" ).append("\n"); 
		query.append("                                                                                            )" ).append("\n"); 
		query.append("                                                                           AND TO_CHAR(A.VPS_ETD_DT, 'YYYYMM') BETWEEN TO_CHAR(TO_DATE(@[stl_yrmon]||'01','YYYYMMDD')-50, 'YYYYMM') AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(@[stl_yrmon],'YYYYMM'),+1)),'YYYYMM')" ).append("\n"); 
		query.append("                                                                           /* TURN_PORT_IND가 'V','D' 이거나 'F'일때 TURNNING 정보가 있는 경우는 제외 */" ).append("\n"); 
		query.append("                                                                           AND A.TURN_PORT_IND_CD NOT IN ('V','D',DECODE(NVL(A.TURN_SKD_VOY_NO,''),'','V','F'))  " ).append("\n"); 
		query.append("                                                                           AND (A.SKD_CNG_STS_CD IS NULL OR A.SKD_CNG_STS_CD <> 'S') " ).append("\n"); 
		query.append("                                                                           AND A.VPS_PORT_CD NOT IN ('EGSUZ', 'PAPAC')" ).append("\n"); 
		query.append("                                                                           /* CALLING SEQ 무조건 다 가져오기로 함 BY 박효숙*/" ).append("\n"); 
		query.append("                                                                           AND A.SLAN_CD = B.VSL_SLAN_CD" ).append("\n"); 
		query.append("                                                                           AND B.VSL_SVC_TP_CD IN ('J','I','S')" ).append("\n"); 
		query.append("                                                                           AND A.VSL_CD = @[vsl_cd]                                                                           " ).append("\n"); 
		query.append("                                                                         ORDER BY A.VPS_ETD_DT, NEXT_VPS_ETD_DT" ).append("\n"); 
		query.append("                                                                       ) T0           " ).append("\n"); 
		query.append("                                                               ) T1" ).append("\n"); 
		query.append("                                                         WHERE (@[stl_yrmon] <= TO_CHAR(NEXT_VPS_ETD_DT,'YYYYMM') OR NEXT_VPS_ETD_DT IS NULL)" ).append("\n"); 
		query.append("                                                           AND TO_CHAR(LAST_DAY(TO_DATE(@[stl_yrmon],'YYYYMM')),'YYYYMMDD') >= TO_CHAR(VPS_ETD_DT,'YYYYMMDD')" ).append("\n"); 
		query.append("                                                         ORDER BY VPS_ETD_DT , NEXT_VPS_ETD_DT              " ).append("\n"); 
		query.append("                                                       )T2" ).append("\n"); 
		query.append("                                                       /* 해당월의 첫번째 스케쥴이고  비연속경우 제외*/" ).append("\n"); 
		query.append("                                                 WHERE NOT(T2.SEQ_IN_MONTH = 1 AND (T2.VVD <> T2.NEXT_VVD AND T2.VVD <> T2.NEXT_TURN_VVD) AND T2.PREV_VVD IS NOT NULL) /*해당월의 첫번째 스케쥴이고 비연속인경우 제외           */                  " ).append("\n"); 
		query.append("                                                 ORDER BY T2.VSL_CD, T2.VPS_ETD_DT   " ).append("\n"); 
		query.append("                                               )T3" ).append("\n"); 
		query.append("                                         WHERE T3.SEQ_IN_MONTH > 1 OR (T3.SEQ_IN_MONTH = 1 AND TO_CHAR(T3.F_DATE,'YYYYMM') = @[stl_yrmon])" ).append("\n"); 
		query.append("                                       ) T1" ).append("\n"); 
		query.append("                                      ,( /*해당월의 30일이상 운항하지 않는 선박에 대한 날짜 쿼리*/" ).append("\n"); 
		query.append("                                        SELECT T2.VSL_CD  AS VSL_CD" ).append("\n"); 
		query.append("                                              ,T2.VSL_SEQ AS VSL_SEQ" ).append("\n"); 
		query.append("                                              ,GREATEST(TRUNC(T2.CTRT_ST_DT), TO_DATE(@[stl_yrmon],'YYYYMM')) EXP_F_DATE" ).append("\n"); 
		query.append("                                              ,LEAST(TRUNC(T2.CTRT_END_DT), LAST_DAY(TO_DATE(@[stl_yrmon],'YYYYMM'))) EXP_T_DATE " ).append("\n"); 
		query.append("                                          FROM (  /*해당월에 속해 있는 선박을 선정*/" ).append("\n"); 
		query.append("                                                SELECT A.VSL_CD" ).append("\n"); 
		query.append("                                                  FROM VSK_VSL_PORT_SKD A" ).append("\n"); 
		query.append("                                                      ,MDM_VSL_SVC_LANE B " ).append("\n"); 
		query.append("                                                 WHERE A.SLAN_CD IN ( SELECT L.VSL_SLAN_CD" ).append("\n"); 
		query.append("                                                                        FROM TOT_LANE L" ).append("\n"); 
		query.append("                                                                            ,TOT_LANE_TRD T" ).append("\n"); 
		query.append("                                                                       WHERE L.STL_YRMON = @[stl_yrmon]" ).append("\n"); 
		query.append("                                                                         AND L.DELT_FLG = 'N'" ).append("\n"); 
		query.append("                                                                         AND T.LANE_SEQ = '1'" ).append("\n"); 
		query.append("                                                                         AND L.STL_YRMON = T.STL_YRMON" ).append("\n"); 
		query.append("                                                                         AND L.VSL_SLAN_CD = T.VSL_SLAN_CD" ).append("\n"); 
		query.append("                                                                    )" ).append("\n"); 
		query.append("                                                   AND TO_CHAR(A.VPS_ETD_DT, 'YYYYMM') BETWEEN TO_CHAR(TO_DATE(@[stl_yrmon]||'01','YYYYMMDD')-50, 'YYYYMM') AND TO_CHAR(LAST_DAY(ADD_MONTHS(TO_DATE(@[stl_yrmon],'YYYYMM'),+1)),'YYYYMM')" ).append("\n"); 
		query.append("                                                   AND A.TURN_PORT_IND_CD NOT IN ('V','D','F')  " ).append("\n"); 
		query.append("                                                   AND (A.SKD_CNG_STS_CD IS NULL OR A.SKD_CNG_STS_CD <> 'S') " ).append("\n"); 
		query.append("                                                   AND A.SLAN_CD = B.VSL_SLAN_CD" ).append("\n"); 
		query.append("                                                   AND B.VSL_SVC_TP_CD IN ('J','I','S')" ).append("\n"); 
		query.append("                                                   AND A.VSL_CD = @[vsl_cd]                                                   " ).append("\n"); 
		query.append("                                                 GROUP BY A.VSL_CD" ).append("\n"); 
		query.append("                                               ) T1" ).append("\n"); 
		query.append("                                              ,TOT_VESSEL T2 " ).append("\n"); 
		query.append("                                         WHERE T2.VSL_CD = T1.VSL_CD " ).append("\n"); 
		query.append("                                           AND T2.TONG_FLET_TP_CD = 'E'  " ).append("\n"); 
		query.append("                                           AND TO_DATE(@[stl_yrmon],'YYYYMM') >= TO_DATE(TO_CHAR(T2.CTRT_ST_DT,'YYYYMM'),'YYYYMM')" ).append("\n"); 
		query.append("                                           AND TO_DATE(@[stl_yrmon],'YYYYMM') <= TO_DATE(TO_CHAR(T2.CTRT_END_DT,'YYYYMM'),'YYYYMM')" ).append("\n"); 
		query.append("                                           AND DELT_FLG = 'N'" ).append("\n"); 
		query.append("                                       ) T2" ).append("\n"); 
		query.append("                                 WHERE T1.VSL_CD = T2.VSL_CD(+)" ).append("\n"); 
		query.append("                                 ORDER BY T1.VSL_CD, T1.F_DATE, T1.T_DATE ASC  " ).append("\n"); 
		query.append("                               ) T" ).append("\n"); 
		query.append("                          GROUP BY T.VSL_CD" ).append("\n"); 
		query.append("                                  ,T.SKD_VOY_NO" ).append("\n"); 
		query.append("                                  ,T.SKD_DIR_CD" ).append("\n"); 
		query.append("                                  ,T.SLAN_CD" ).append("\n"); 
		query.append("                                  ,T.VPS_PORT_CD" ).append("\n"); 
		query.append("                                  ,T.SEQ_IN_MONTH" ).append("\n"); 
		query.append("                                  ,T.VPS_ETD_DT" ).append("\n"); 
		query.append("                                  ,T.F_DATE" ).append("\n"); 
		query.append("                                  ,T.T_DATE" ).append("\n"); 
		query.append("                                  ,T.VVD" ).append("\n"); 
		query.append("                                  ,T.TURN_VVD" ).append("\n"); 
		query.append("                                  ,T.PREV_VVD" ).append("\n"); 
		query.append("                                  ,T.NEXT_VVD" ).append("\n"); 
		query.append("                                  ,T.NEXT_TURN_VVD" ).append("\n"); 
		query.append("                                  ,T.MIN_SEQ" ).append("\n"); 
		query.append("                                  ,T.MAX_SEQ" ).append("\n"); 
		query.append("                                  ,T.DAYS                               " ).append("\n"); 
		query.append("                       ) U1" ).append("\n"); 
		query.append("                      ,(                             " ).append("\n"); 
		query.append("                        SELECT VSL_CD" ).append("\n"); 
		query.append("                              ,SKD_VOY_NO" ).append("\n"); 
		query.append("                              ,SKD_DIR_CD" ).append("\n"); 
		query.append("                              ,VPS_PORT_CD" ).append("\n"); 
		query.append("                              ,CLPT_IND_SEQ" ).append("\n"); 
		query.append("                              ,CLPT_SEQ" ).append("\n"); 
		query.append("                              ,LOADING_QTY" ).append("\n"); 
		query.append("                              ,DISCHARGE_QTY " ).append("\n"); 
		query.append("                              ,DECODE(LOADING_YN,'Y',SUM(DECODE(LOADING_YN,'Y',PRE_ROB)) OVER (PARTITION BY VSL_CD ORDER BY MIN_VPS_ETD_DT, CLPT_SEQ)) AS ROB " ).append("\n"); 
		query.append("                              ,LOADING_YN" ).append("\n"); 
		query.append("                              ,VPS_ETD_DT" ).append("\n"); 
		query.append("                              ,MIN_VPS_ETD_DT" ).append("\n"); 
		query.append("                          FROM (" ).append("\n"); 
		query.append("                                SELECT T1.VSL_CD" ).append("\n"); 
		query.append("                                      ,T1.SKD_VOY_NO" ).append("\n"); 
		query.append("                                      ,T1.SKD_DIR_CD" ).append("\n"); 
		query.append("                                      ,T1.VPS_PORT_CD" ).append("\n"); 
		query.append("                                      ,T1.CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                      ,T1.CLPT_SEQ" ).append("\n"); 
		query.append("                                      ,NVL(LOADING_QTY,0) AS LOADING_QTY" ).append("\n"); 
		query.append("                                      ,NVL(DISCHARGE_QTY,0) AS DISCHARGE_QTY" ).append("\n"); 
		query.append("                                      ,SUM(LOADING_QTY - DISCHARGE_QTY) OVER (PARTITION BY T1.VSL_CD, T1.ORG_VVD,T1.VPS_PORT_CD,T1.CLPT_IND_SEQ) AS PRE_ROB" ).append("\n"); 
		query.append("                                      ,CASE WHEN T1.TURN_PORT_IND_CD IN ('Y','N') THEN " ).append("\n"); 
		query.append("                                                 'Y' " ).append("\n"); 
		query.append("                                            ELSE " ).append("\n"); 
		query.append("                                                 'N' " ).append("\n"); 
		query.append("                                             END " ).append("\n"); 
		query.append("                                       AS LOADING_YN" ).append("\n"); 
		query.append("                                      ,T1.ORG_VVD" ).append("\n"); 
		query.append("                                      ,T1.MIN_VPS_ETD_DT" ).append("\n"); 
		query.append("                                      ,T1.VPS_ETD_DT" ).append("\n"); 
		query.append("                                  FROM (" ).append("\n"); 
		query.append("                                        SELECT V.VSL_CD" ).append("\n"); 
		query.append("                                              ,V.SKD_VOY_NO" ).append("\n"); 
		query.append("                                              ,V.SKD_DIR_CD" ).append("\n"); 
		query.append("                                              ,DECODE(TURN_PORT_IND_CD,'Y', V.VSL_CD||V.SKD_VOY_NO||V.SKD_DIR_CD, 'N', V.VSL_CD||V.SKD_VOY_NO||V.SKD_DIR_CD, V.VSL_CD||NVL(TURN_SKD_VOY_NO, V.SKD_VOY_NO)||NVL(TURN_SKD_DIR_CD,V.SKD_DIR_CD)) AS ORG_VVD" ).append("\n"); 
		query.append("                                              ,V.TURN_PORT_IND_CD" ).append("\n"); 
		query.append("                                              ,V.VPS_PORT_CD" ).append("\n"); 
		query.append("                                              ,V.CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                              ,V.CLPT_SEQ" ).append("\n"); 
		query.append("                                              ,V.VPS_ETD_DT" ).append("\n"); 
		query.append("                                              ,MIN(VPS_ETD_DT) OVER (PARTITION BY V.VSL_CD, V.SKD_VOY_NO, V.SKD_DIR_CD) AS MIN_VPS_ETD_DT" ).append("\n"); 
		query.append("                                          FROM VSK_VSL_PORT_SKD V" ).append("\n"); 
		query.append("                                         WHERE 1=1" ).append("\n"); 
		query.append("                                           AND (V.VSL_CD, V.SKD_VOY_NO, V.SKD_DIR_CD) IN (" ).append("\n"); 
		query.append("                                                                                          SELECT VSL_CD" ).append("\n"); 
		query.append("                                                                                                ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                                                                                ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                                                                            FROM VSK_VSL_PORT_SKD" ).append("\n"); 
		query.append("                                                                                           WHERE VPS_ETD_DT BETWEEN ADD_MONTHS(TO_DATE(@[stl_yrmon],'YYYYMM'), -4) AND ADD_MONTHS(TO_DATE(@[stl_yrmon],'YYYYMM'), 2)+0.99999" ).append("\n"); 
		query.append("                                                                                             AND VSL_CD = @[vsl_cd]                                                                                             " ).append("\n"); 
		query.append("                                                                                         )" ).append("\n"); 
		query.append("                                       ) T1" ).append("\n"); 
		query.append("                                      ,(" ).append("\n"); 
		query.append("                                        SELECT VSL_CD" ).append("\n"); 
		query.append("                                              ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                              ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                              ,CASE WHEN GUBUN IN ('LOADING TOTAL')   THEN POL_CD" ).append("\n"); 
		query.append("                                            		WHEN GUBUN IN ('DISCHARGE TOTAL') THEN POD_CD " ).append("\n"); 
		query.append("                                                     END " ).append("\n"); 
		query.append("                                               AS VPS_PORT_CD" ).append("\n"); 
		query.append("                                              ,CASE WHEN GUBUN IN ('LOADING TOTAL')   THEN POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                            		WHEN GUBUN IN ('DISCHARGE TOTAL') THEN POD_CLPT_IND_SEQ " ).append("\n"); 
		query.append("                                                     END " ).append("\n"); 
		query.append("                                               AS CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                              ,NVL(SUM(DECODE(GUBUN,'LOADING TOTAL',QTY)),0)   AS LOADING_QTY" ).append("\n"); 
		query.append("                                              ,NVL(SUM(DECODE(GUBUN,'DISCHARGE TOTAL',QTY)),0) AS DISCHARGE_QTY" ).append("\n"); 
		query.append("                                          FROM (" ).append("\n"); 
		query.append("                                                SELECT VSL_CD" ).append("\n"); 
		query.append("                                                      ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                                      ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                                      ,DECODE(GROUPING(POL_CD),1,'ALL POL',0, POL_CD) AS POL_CD" ).append("\n"); 
		query.append("                                                      ,DECODE(GROUPING(POL_CLPT_IND_SEQ),1,'ALL POL',0,POL_CLPT_IND_SEQ) AS POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                                      ,DECODE(GROUPING(POD_CD),1,'ALL POD',0,POD_CD) AS POD_CD" ).append("\n"); 
		query.append("                                                      ,DECODE(GROUPING(POD_CLPT_IND_SEQ),1,'ALL POD',0,POD_CLPT_IND_SEQ) AS POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                                      ,CASE WHEN GROUPING(POL_CD)=1 AND GROUPING(POD_CD)=0 THEN 'DISCHARGE TOTAL'" ).append("\n"); 
		query.append("                                                            WHEN GROUPING(POL_CD)=0 AND GROUPING(POD_CD)=1 THEN 'LOADING TOTAL'" ).append("\n"); 
		query.append("                                                             END" ).append("\n"); 
		query.append("                                                       AS GUBUN" ).append("\n"); 
		query.append("                                                      ,SUM(QTY) AS QTY" ).append("\n"); 
		query.append("                                                  FROM (" ).append("\n"); 
		query.append("                                                        SELECT B1.VSL_CD" ).append("\n"); 
		query.append("                                                              ,B1.SKD_VOY_NO" ).append("\n"); 
		query.append("                                                              ,B1.SKD_DIR_CD" ).append("\n"); 
		query.append("                                                              ,DECODE(SUBSTR(CNTR_TPSZ_CD,2,1),'2', 1, 2) * CNTR_VOL_QTY AS QTY" ).append("\n"); 
		query.append("                                                              ,B1.POL_CD" ).append("\n"); 
		query.append("                                                              ,DECODE(B1.POL_CD,NULL,NULL,NVL(B1.POL_CLPT_IND_SEQ,1)) AS POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                                              ,B1.POD_CD" ).append("\n"); 
		query.append("                                                              ,NVL(B1.POD_CLPT_IND_SEQ,1) AS POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                                          FROM BKG_VVD B1" ).append("\n"); 
		query.append("                                                              ,BKG_CONTAINER C" ).append("\n"); 
		query.append("                                                              ,BKG_BOOKING K" ).append("\n"); 
		query.append("                                                         WHERE 1=1" ).append("\n"); 
		query.append("                                                           AND B1.BKG_NO = C.BKG_NO" ).append("\n"); 
		query.append("                                                           AND B1.BKG_NO = K.BKG_NO" ).append("\n"); 
		query.append("                                                           AND K.BKG_STS_CD = 'F'                                        /* F = CONFIRM인 경우 */" ).append("\n"); 
		query.append("                                                           AND (B1.VSL_CD, B1.SKD_VOY_NO, B1.SKD_DIR_CD) IN (" ).append("\n"); 
		query.append("                                                                                                             SELECT VSL_CD, SKD_VOY_NO, SKD_DIR_CD" ).append("\n"); 
		query.append("                                                                                                               FROM VSK_VSL_PORT_SKD" ).append("\n"); 
		query.append("                                                                                                              WHERE VPS_ETD_DT BETWEEN ADD_MONTHS(TO_DATE(@[stl_yrmon],'YYYYMM'), -4) AND ADD_MONTHS(TO_DATE(@[stl_yrmon],'YYYYMM'), 2)+0.99999" ).append("\n"); 
		query.append("                                                                                                                AND VSL_CD = @[vsl_cd]                                                                                                                " ).append("\n"); 
		query.append("                                                                                                            )" ).append("\n"); 
		query.append("                                                       )" ).append("\n"); 
		query.append("                                                  GROUP BY VSL_CD" ).append("\n"); 
		query.append("                                                          ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                                          ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                                          ,CUBE((POL_CD,POL_CLPT_IND_SEQ),(POD_CD,POD_CLPT_IND_SEQ)) " ).append("\n"); 
		query.append("                                                    HAVING ((GROUPING(POL_CD)=1 AND GROUPING(POD_CD)=0) OR (GROUPING(POL_CD)=0 AND GROUPING(POD_CD)=1))" ).append("\n"); 
		query.append("                                               ) T02              " ).append("\n"); 
		query.append("                                          GROUP BY VSL_CD" ).append("\n"); 
		query.append("                                                  ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                                  ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                                  ,CASE WHEN GUBUN IN ('LOADING TOTAL')   THEN POL_CD" ).append("\n"); 
		query.append("                                        		        WHEN GUBUN IN ('DISCHARGE TOTAL') THEN POD_CD " ).append("\n"); 
		query.append("                                                         END" ).append("\n"); 
		query.append("                                                  ,CASE WHEN GUBUN IN ('LOADING TOTAL')   THEN POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                        		        WHEN GUBUN IN ('DISCHARGE TOTAL') THEN POD_CLPT_IND_SEQ " ).append("\n"); 
		query.append("                                                         END" ).append("\n"); 
		query.append("                                       ) T2         " ).append("\n"); 
		query.append("                                  WHERE T1.VSL_CD = T2.VSL_CD(+)" ).append("\n"); 
		query.append("                                    AND T1.SKD_VOY_NO = T2.SKD_VOY_NO(+)" ).append("\n"); 
		query.append("                                    AND T1.SKD_DIR_CD = T2.SKD_DIR_CD(+)" ).append("\n"); 
		query.append("                                    AND T1.VPS_PORT_CD =  T2.VPS_PORT_CD(+)" ).append("\n"); 
		query.append("                                    AND T1.CLPT_IND_SEQ = T2.CLPT_IND_SEQ(+)" ).append("\n"); 
		query.append("                               )" ).append("\n"); 
		query.append("                          ORDER BY VSL_CD, SKD_VOY_NO,MIN_VPS_ETD_DT,CLPT_SEQ                     " ).append("\n"); 
		query.append("                       ) U2" ).append("\n"); 
		query.append("                  WHERE U1.VSL_CD = U2.VSL_CD(+)" ).append("\n"); 
		query.append("                    AND U1.SKD_VOY_NO = U2.SKD_VOY_NO(+)" ).append("\n"); 
		query.append("                    AND U1.SKD_DIR_CD = U2.SKD_DIR_CD(+)" ).append("\n"); 
		query.append("                    AND U1.VPS_PORT_CD = U2.VPS_PORT_CD(+)" ).append("\n"); 
		query.append("                    AND U1.VPS_ETD_DT = U2.VPS_ETD_DT(+)" ).append("\n"); 
		query.append("                  ORDER BY U1.VSL_CD, U1.F_DATE ASC	" ).append("\n"); 
		query.append("               ) T1" ).append("\n"); 
		query.append("              ,(" ).append("\n"); 
		query.append("                SELECT T1.VSL_CD" ).append("\n"); 
		query.append("                      ,T1.SLAN_CD" ).append("\n"); 
		query.append("                      ,T1.TRD_CD" ).append("\n"); 
		query.append("                      ,T1.SKD_VOY_NO" ).append("\n"); 
		query.append("                      ,T1.SKD_DIR_CD" ).append("\n"); 
		query.append("                      ,T1.VPS_PORT_CD" ).append("\n"); 
		query.append("                      ,T1.CLPT_IND_SEQ" ).append("\n"); 
		query.append("                      ,T1.VPS_ETD_DT" ).append("\n"); 
		query.append("                      ,T1.CLPT_SEQ" ).append("\n"); 
		query.append("                      ,T2.VSL_ENG_NM" ).append("\n"); 
		query.append("                      ,DECODE(SUBSTR(T1.VSL_CD, 1, 2), 'HJ', 'O', 'C') AS TONG_FLET_TP_CD" ).append("\n"); 
		query.append("                      ,NVL(T2.GRS_RGST_TONG_WGT,0) AS VSL_GRT" ).append("\n"); 
		query.append("                      ,NVL(T2.NET_RGST_TONG_WGT,0) AS VSL_NRT" ).append("\n"); 
		query.append("                      ,TO_CHAR(T2.VSL_DE_DT, 'YYYYMMDD') AS VSL_DE_DT" ).append("\n"); 
		query.append("                      ,T1.LDB_CAPA_QTY" ).append("\n"); 
		query.append("                      ,T1.FNL_HJS_BSA_CAPA" ).append("\n"); 
		query.append("                      ,T1.CRR_BSA_CAPA" ).append("\n"); 
		query.append("                  FROM (" ).append("\n"); 
		query.append("                        SELECT A.VSL_CD" ).append("\n"); 
		query.append("                              ,A.SKD_VOY_NO" ).append("\n"); 
		query.append("                              ,A.SKD_DIR_CD" ).append("\n"); 
		query.append("                              ,A.VPS_PORT_CD" ).append("\n"); 
		query.append("                              ,A.SLAN_CD" ).append("\n"); 
		query.append("                              ,A.CLPT_IND_SEQ" ).append("\n"); 
		query.append("                              ,A.CLPT_SEQ" ).append("\n"); 
		query.append("                              ,A.VPS_ETD_DT" ).append("\n"); 
		query.append("                              ,A.TURN_PORT_IND_CD" ).append("\n"); 
		query.append("                              ,A.SKD_CNG_STS_CD" ).append("\n"); 
		query.append("                              ,B.TRD_CD" ).append("\n"); 
		query.append("                              ,B.LDB_CAPA_QTY" ).append("\n"); 
		query.append("                              ,B.FNL_HJS_BSA_CAPA" ).append("\n"); 
		query.append("                              ,B.CRR_BSA_CAPA" ).append("\n"); 
		query.append("                          FROM ( " ).append("\n"); 
		query.append("                                SELECT V.VSL_CD" ).append("\n"); 
		query.append("                                      ,V.SKD_VOY_NO" ).append("\n"); 
		query.append("                                      ,V.SKD_DIR_CD" ).append("\n"); 
		query.append("                                      ,V.VPS_PORT_CD" ).append("\n"); 
		query.append("                                      ,V.CLPT_IND_SEQ " ).append("\n"); 
		query.append("                                      ,V.CLPT_SEQ" ).append("\n"); 
		query.append("                                      ,V.VPS_ETD_DT" ).append("\n"); 
		query.append("                                      ,V.TURN_PORT_IND_CD " ).append("\n"); 
		query.append("                                      ,V.TURN_SKD_VOY_NO" ).append("\n"); 
		query.append("                                      ,DECODE(LEAD(V.VPS_ETD_DT) OVER (PARTITION BY V.VSL_CD ORDER BY V.VPS_ETD_DT),NULL,V.VPS_ETD_DT,LEAD(V.VPS_ETD_DT) OVER (PARTITION BY V.VSL_CD ORDER BY V.VPS_ETD_DT)) AS NEXT_VPS_ETD_DT" ).append("\n"); 
		query.append("                                      ,V.SKD_CNG_STS_CD" ).append("\n"); 
		query.append("                                      ,V.SLAN_CD" ).append("\n"); 
		query.append("                                  FROM VSK_VSL_PORT_SKD V" ).append("\n"); 
		query.append("                                 WHERE 1=1" ).append("\n"); 
		query.append("                                   AND V.VPS_ETD_DT BETWEEN ADD_MONTHS(TO_DATE(@[stl_yrmon],'YYYYMM'), -4) AND ADD_MONTHS(TO_DATE(@[stl_yrmon],'YYYYMM'), 2)+0.99999" ).append("\n"); 
		query.append("                                   AND (V.SKD_CNG_STS_CD IS NULL OR V.SKD_CNG_STS_CD <> 'S') " ).append("\n"); 
		query.append("                                   AND V.TURN_PORT_IND_CD NOT IN ('V','D',DECODE(NVL(V.TURN_SKD_VOY_NO,''),'','V','F'))  " ).append("\n"); 
		query.append("                                   AND V.VPS_PORT_CD NOT IN ('EGSUZ', 'PAPAC')" ).append("\n"); 
		query.append("                                   AND V.VSL_CD = @[vsl_cd]                                  " ).append("\n"); 
		query.append("                               ) A" ).append("\n"); 
		query.append("                              ,(  /*해당 선박의 service lane의 VSL Loadable CAPA와 BSA를 가져오기 위해 조인*/" ).append("\n"); 
		query.append("                                SELECT T.STL_YRMON" ).append("\n"); 
		query.append("                                      ,T.VSL_CD" ).append("\n"); 
		query.append("                                      ,T.SKD_VOY_NO" ).append("\n"); 
		query.append("                                      ,T.SKD_DIR_CD" ).append("\n"); 
		query.append("                                      ,T.SLAN_CD" ).append("\n"); 
		query.append("                                      ,T.TRD_CD" ).append("\n"); 
		query.append("                                      ,T.LDB_CAPA_QTY" ).append("\n"); 
		query.append("                                      ,T.FNL_HJS_BSA_CAPA" ).append("\n"); 
		query.append("                                      ,T.CRR_BSA_CAPA    " ).append("\n"); 
		query.append("                                  FROM (" ).append("\n"); 
		query.append("                                        SELECT STL_YRMON" ).append("\n"); 
		query.append("                                              ,VSL_CD" ).append("\n"); 
		query.append("                                              ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                              ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                              ,SLAN_CD" ).append("\n"); 
		query.append("                                              ,TRD_CD" ).append("\n"); 
		query.append("                                              ,LDB_CAPA_QTY" ).append("\n"); 
		query.append("                                              ,FNL_HJS_BSA_CAPA" ).append("\n"); 
		query.append("                                              ,CRR_BSA_CAPA    " ).append("\n"); 
		query.append("                                              ,ROW_NUMBER() OVER(PARTITION BY VSL_CD,SKD_VOY_NO, SKD_DIR_CD, SLAN_CD ORDER BY STL_YRMON, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, SLAN_CD ASC, FNL_HJS_BSA_CAPA DESC, TRD_CD ASC) NUM_BY_LANE" ).append("\n"); 
		query.append("                                          FROM TOT_BSA" ).append("\n"); 
		query.append("          	                             WHERE STL_YRMON BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(@[stl_yrmon],'YYYYMM'), -4), 'YYYYMMDD') AND @[stl_yrmon]" ).append("\n"); 
		query.append("                                           AND VSL_CD = @[vsl_cd]                                           " ).append("\n"); 
		query.append("                                       ) T" ).append("\n"); 
		query.append("                                  WHERE NUM_BY_LANE = 1" ).append("\n"); 
		query.append("                               ) B" ).append("\n"); 
		query.append("                          WHERE 1=1" ).append("\n"); 
		query.append("                            AND A.VSL_CD = B.VSL_CD(+)" ).append("\n"); 
		query.append("                            AND A.SKD_VOY_NO = B.SKD_VOY_NO(+)" ).append("\n"); 
		query.append("                            AND A.SKD_DIR_CD = B.SKD_DIR_CD(+)" ).append("\n"); 
		query.append("                            AND A.SLAN_CD = B.SLAN_CD(+)         " ).append("\n"); 
		query.append("                       ) T1" ).append("\n"); 
		query.append("                      ,MDM_VSL_CNTR T2 /*GRT,NRT, VSL_ENG_NM을 구하기 위해 조인*/" ).append("\n"); 
		query.append("                 WHERE T1.VSL_CD = T2.VSL_CD(+)" ).append("\n"); 
		query.append("               ) T2       				" ).append("\n"); 
		query.append("          WHERE T1.VSL_CD = T2.VSL_CD(+)" ).append("\n"); 
		query.append("            AND T1.SKD_VOY_NO = T2.SKD_VOY_NO(+)" ).append("\n"); 
		query.append("            AND T1.SKD_DIR_CD = T2.SKD_DIR_CD(+)" ).append("\n"); 
		query.append("            AND T1.VPS_PORT_CD = T2.VPS_PORT_CD(+)" ).append("\n"); 
		query.append("            AND T1.VPS_ETD_DT = T2.VPS_ETD_DT(+)																	        " ).append("\n"); 
		query.append("       ) S      " ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("     /* 대선 BSA, 운항일수와 물량정보를 조회한다. */" ).append("\n"); 
		query.append("SELECT T.STL_YRMON" ).append("\n"); 
		query.append("      ,T.TONG_STL_BAT_JB_SEQ  " ).append("\n"); 
		query.append("      ,T.VSL_CD" ).append("\n"); 
		query.append("      ,T.PORT_CD AS VPS_PORT_CD" ).append("\n"); 
		query.append("      /* 2010.04.19 대선인 경우 VSL_CD, PORT_CD로 두건 이상 발생할 수 있으므로 아래와 같이 수정함*/" ).append("\n"); 
		query.append("      ,ROW_NUMBER() OVER(PARTITION BY  T.STL_YRMON, T.TONG_STL_BAT_JB_SEQ, T.VSL_CD, T.PORT_CD  ORDER BY T.VSL_CD, T.PORT_CD )" ).append("\n"); 
		query.append("      /*, T.PORT_SEQ*/ " ).append("\n"); 
		query.append("      ,T.TRD_CD" ).append("\n"); 
		query.append("      ,T.SLAN_CD" ).append("\n"); 
		query.append("      ,T.SKD_VOY_NO " ).append("\n"); 
		query.append("      ,T.SKD_DIR_CD" ).append("\n"); 
		query.append("      ,T.BSA_CAPA" ).append("\n"); 
		query.append("      ,T.ACT_BSA_CAPA" ).append("\n"); 
		query.append("      ,T.LDB_CAPA_QTY" ).append("\n"); 
		query.append("      ,T.CHTR_BSA_CAPA" ).append("\n"); 
		query.append("      ,T.BSA_CAPA_MODI_FLG" ).append("\n"); 
		query.append("      ,T.ETD_DT" ).append("\n"); 
		query.append("      ,T.USG_RT" ).append("\n"); 
		query.append("      ,T.VOY_DYS " ).append("\n"); 
		query.append("      ,T.PER_TON_REV*T.VOY_DYS*(T.USG_RT/100)" ).append("\n"); 
		query.append("      ,T.PER_TON_REV     " ).append("\n"); 
		query.append("      ,T.VSL_NRT " ).append("\n"); 
		query.append("      ,SYSDATE  " ).append("\n"); 
		query.append("      ,@[cre_usr_id]" ).append("\n"); 
		query.append("      ,SYSDATE" ).append("\n"); 
		query.append("      ,@[cre_usr_id]" ).append("\n"); 
		query.append("      FROM (      " ).append("\n"); 
		query.append("            SELECT T.STL_YRMON" ).append("\n"); 
		query.append("                  ,T.TONG_STL_BAT_JB_SEQ  " ).append("\n"); 
		query.append("                  ,T.VSL_CD" ).append("\n"); 
		query.append("                  ,T.PORT_CD                     " ).append("\n"); 
		query.append("                  ,T.PORT_SEQ " ).append("\n"); 
		query.append("                  ,T.TRD_CD" ).append("\n"); 
		query.append("                  ,T.SLAN_CD" ).append("\n"); 
		query.append("                  ,T.SKD_VOY_NO " ).append("\n"); 
		query.append("                  ,T.SKD_DIR_CD" ).append("\n"); 
		query.append("                  ,T.BSA_CAPA" ).append("\n"); 
		query.append("                  ,T.ACT_BSA_CAPA" ).append("\n"); 
		query.append("                  ,T.LDB_CAPA_QTY" ).append("\n"); 
		query.append("                  ,T.CHTR_BSA_CAPA" ).append("\n"); 
		query.append("                  ,T.BSA_CAPA_MODI_FLG" ).append("\n"); 
		query.append("                  ,T.ETD_DT" ).append("\n"); 
		query.append("                  ,T.USG_RT" ).append("\n"); 
		query.append("                  ,T.VOY_DYS                          " ).append("\n"); 
		query.append("                  ,CASE WHEN T.VSL_NRT > 1000 THEN" ).append("\n"); 
		query.append("                             CASE WHEN (T.VSL_NRT-1000) > 9000 THEN" ).append("\n"); 
		query.append("                                       CASE WHEN (T.VSL_NRT-10000) > 15000 THEN" ).append("\n"); 
		query.append("                                                 ((T.VSL_NRT-25000)*4)+(15000*7)+(9000*11)+(1000*14)" ).append("\n"); 
		query.append("                                            ELSE" ).append("\n"); 
		query.append("                                                 ((T.VSL_NRT-10000)*7)+(9000*11)+(1000*14)" ).append("\n"); 
		query.append("                                             END" ).append("\n"); 
		query.append("                                  ELSE" ).append("\n"); 
		query.append("                                       ((T.VSL_NRT-1000)*11)+(1000*14)" ).append("\n"); 
		query.append("                                   END " ).append("\n"); 
		query.append("                        ELSE" ).append("\n"); 
		query.append("                             T.VSL_NRT*14    " ).append("\n"); 
		query.append("                         END" ).append("\n"); 
		query.append("                   AS PER_TON_REV     " ).append("\n"); 
		query.append("                  ,T.VSL_NRT" ).append("\n"); 
		query.append("              FROM (" ).append("\n"); 
		query.append("                    SELECT @[stl_yrmon] AS STL_YRMON" ).append("\n"); 
		query.append("                          ,( SELECT NVL(MAX(TONG_STL_BAT_JB_SEQ),0) " ).append("\n"); 
		query.append("                               FROM TOT_PORT_STL_AMT WHERE STL_YRMON = @[stl_yrmon]" ).append("\n"); 
		query.append("                           ) AS TONG_STL_BAT_JB_SEQ  " ).append("\n"); 
		query.append("                          ,A.VSL_CD" ).append("\n"); 
		query.append("                          ,DECODE(A.TONG_FLET_TP_CD,'T','ZZZZZ','L','YYYYY') AS PORT_CD" ).append("\n"); 
		query.append("                          ,1 AS PORT_SEQ " ).append("\n"); 
		query.append("                          ,DECODE(A.TONG_FLET_TP_CD,'T','ZZZ','L','YYY') AS TRD_CD" ).append("\n"); 
		query.append("                          ,DECODE(A.TONG_FLET_TP_CD,'T','ZZZ','L','YYY') AS SLAN_CD" ).append("\n"); 
		query.append("                          ,NULL AS SKD_VOY_NO" ).append("\n"); 
		query.append("                          ,NULL AS SKD_DIR_CD" ).append("\n"); 
		query.append("                          ,0 AS BSA_CAPA" ).append("\n"); 
		query.append("                          ,0 AS ACT_BSA_CAPA" ).append("\n"); 
		query.append("                          ,0 AS LDB_CAPA_QTY" ).append("\n"); 
		query.append("                          ,0 AS CHTR_BSA_CAPA" ).append("\n"); 
		query.append("                          ,'N' AS BSA_CAPA_MODI_FLG" ).append("\n"); 
		query.append("                          ,TO_DATE(@[stl_yrmon]||'01','YYYYMMDD') AS ETD_DT" ).append("\n"); 
		query.append("                          ,100 AS USG_RT" ).append("\n"); 
		query.append("                          ,A.CTRT_ST_DT" ).append("\n"); 
		query.append("                          ,A.CTRT_END_DT" ).append("\n"); 
		query.append("                          ,CASE WHEN TO_DATE(TO_CHAR(CTRT_ST_DT,'YYYYMM'),'YYYYMM') = TO_DATE(@[stl_yrmon],'YYYYMM') AND TO_DATE(TO_CHAR(CTRT_END_DT,'YYYYMM'),'YYYYMM') = TO_DATE(@[stl_yrmon],'YYYYMM') THEN" ).append("\n"); 
		query.append("                                     CTRT_END_DT - CTRT_ST_DT " ).append("\n"); 
		query.append("                                ELSE" ).append("\n"); 
		query.append("                                     CASE WHEN TO_DATE(TO_CHAR(CTRT_ST_DT,'YYYYMM'),'YYYYMM') < TO_DATE(@[stl_yrmon],'YYYYMM') AND TO_DATE(TO_CHAR(CTRT_END_DT,'YYYYMM'),'YYYYMM') = TO_DATE(@[stl_yrmon],'YYYYMM') THEN" ).append("\n"); 
		query.append("                           			           CTRT_END_DT - TO_DATE(@[stl_yrmon]||'01' ,'YYYYMMDD')+1" ).append("\n"); 
		query.append("                      				      ELSE" ).append("\n"); 
		query.append("                                               CASE WHEN TO_DATE(TO_CHAR(CTRT_ST_DT,'YYYYMM'),'YYYYMM') = TO_DATE(@[stl_yrmon],'YYYYMM') AND TO_DATE(TO_CHAR(CTRT_END_DT,'YYYYMM'),'YYYYMM') > TO_DATE(@[stl_yrmon],'YYYYMM') THEN" ).append("\n"); 
		query.append("                           							   	 TO_DATE(@[stl_yrmon]|| TO_CHAR(LAST_DAY(TO_DATE(@[stl_yrmon],'YYYYMM')),'DD'),'YYYYMMDD') - CTRT_ST_DT" ).append("\n"); 
		query.append("                      						        ELSE" ).append("\n"); 
		query.append("                      								     CASE WHEN TO_DATE(TO_CHAR(CTRT_ST_DT,'YYYYMM'),'YYYYMM') < TO_DATE(@[stl_yrmon],'YYYYMM') AND TO_DATE(TO_CHAR(CTRT_END_DT,'YYYYMM'),'YYYYMM') > TO_DATE(@[stl_yrmon],'YYYYMM') THEN" ).append("\n"); 
		query.append("                           									       TO_DATE(@[stl_yrmon]|| TO_CHAR(LAST_DAY(TO_DATE(@[stl_yrmon],'YYYYMM')),'DD'),'YYYYMMDD') - TO_DATE(@[stl_yrmon]||'01','YYYYMMDD') + 1" ).append("\n"); 
		query.append("                      										  ELSE" ).append("\n"); 
		query.append("                                                	               0" ).append("\n"); 
		query.append("                      										   END" ).append("\n"); 
		query.append("                      							     END" ).append("\n"); 
		query.append("                                           END" ).append("\n"); 
		query.append("                                 END" ).append("\n"); 
		query.append("                           AS VOY_DYS" ).append("\n"); 
		query.append("                          ,NVL(B.NET_RGST_TONG_WGT,0) AS VSL_NRT" ).append("\n"); 
		query.append("                      FROM TOT_VESSEL A, MDM_VSL_CNTR B" ).append("\n"); 
		query.append("                     WHERE A.TONG_FLET_TP_CD IN ( 'T' ,'L')" ).append("\n"); 
		query.append("                       AND (A.STL_YR, A.VSL_SEQ) = ( SELECT STL_YR, MAX(VSL_SEQ) FROM TOT_VESSEL WHERE TONG_FLET_TP_CD = A.TONG_FLET_TP_CD AND VSL_CD = A.VSL_CD AND STL_YR = SUBSTR(@[stl_yrmon],1,4) GROUP BY STL_YR) " ).append("\n"); 
		query.append("                       AND A.DELT_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TO_DATE(@[stl_yrmon],'YYYYMM') BETWEEN TO_DATE(TO_CHAR(A.CTRT_ST_DT,'YYYYMM'),'YYYYMM') AND TO_DATE(TO_CHAR(A.CTRT_END_DT,'YYYYMM'),'YYYYMM')" ).append("\n"); 
		query.append("                       AND A.VSL_CD = B.VSL_CD(+)" ).append("\n"); 
		query.append("                       AND A.VSL_CD = @[vsl_cd]                       " ).append("\n"); 
		query.append("                   ) T       " ).append("\n"); 
		query.append("           ) T   " ).append("\n"); 
		query.append("      ORDER BY VSL_CD, ETD_DT ASC" ).append("\n"); 

	}
}