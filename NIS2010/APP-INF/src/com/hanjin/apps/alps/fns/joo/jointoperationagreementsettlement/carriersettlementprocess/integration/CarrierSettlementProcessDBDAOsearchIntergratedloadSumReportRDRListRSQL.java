/*=========================================================
*Copyright(c) 2017 CyberLogitec
*@FileName : CarrierSettlementProcessDBDAOsearchIntergratedloadSumReportRDRListRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2017.01.19
*@LastModifier : 
*@LastVersion : 1.0
* 2017.01.19 
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.fns.joo.jointoperationagreementsettlement.carriersettlementprocess.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class CarrierSettlementProcessDBDAOsearchIntergratedloadSumReportRDRListRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * Intergrated Loging Summary Report 조회
	  * </pre>
	  */
	public CarrierSettlementProcessDBDAOsearchIntergratedloadSumReportRDRListRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vvd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("pre_fr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("rlane_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("re_divr_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("pre_to",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("skd_dir_cd",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.fns.joo.jointoperationagreementsettlement.carriersettlementprocess.integration").append("\n"); 
		query.append("FileName : CarrierSettlementProcessDBDAOsearchIntergratedloadSumReportRDRListRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("WITH PA AS " ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("            SELECT H.VSL_CD," ).append("\n"); 
		query.append("                   H.VOY_NO," ).append("\n"); 
		query.append("                   H.DIR_CD," ).append("\n"); 
		query.append("                   H.REGION," ).append("\n"); 
		query.append("                   H.REMARK," ).append("\n"); 
		query.append("                   H.PORT_CD," ).append("\n"); 
		query.append("                   TO_CHAR(K.VPS_ETD_DT, 'YYYY-MM-DD')  VPS_ETD_DT,  " ).append("\n"); 
		query.append("                   TO_CHAR(K.VPS_ETA_DT, 'YYYY-MM-DD')  VPS_ETA_DT, " ).append("\n"); 
		query.append("                   K.VSL_CD||K.SKD_VOY_NO||K.SKD_DIR_CD VVD," ).append("\n"); 
		query.append("                   K.VPS_PORT_CD," ).append("\n"); 
		query.append("                   K.CLPT_IND_SEQ," ).append("\n"); 
		query.append("                   B.JO_CRR_CD," ).append("\n"); 
		query.append("                   B.TRD_CD," ).append("\n"); 
		query.append("                   B.RLANE_CD," ).append("\n"); 
		query.append("                   B.BSA_CAPA," ).append("\n"); 
		query.append("                   B.RE_DIVR_CD," ).append("\n"); 
		query.append("                   B.JO_TON_TEU_QTY," ).append("\n"); 
		query.append("                   B.CGO_TON_WGT," ).append("\n"); 
		query.append("                   B.JO_TON_WGT_RND_RT," ).append("\n"); 
		query.append("                   B.JO_40FT_GNTE_QTY," ).append("\n"); 
		query.append("                   B.JO_40FT_TEU_QTY," ).append("\n"); 
		query.append("                   B.JO_40FT_RND_RT," ).append("\n"); 
		query.append("                   B.JO_20FT_GNTE_QTY," ).append("\n"); 
		query.append("                   B.JO_20FT_TEU_QTY," ).append("\n"); 
		query.append("                   B.JO_20FT_RND_RT," ).append("\n"); 
		query.append("                   B.JO_45FT_GNTE_QTY," ).append("\n"); 
		query.append("                   B.JO_45FT_RND_RT," ).append("\n"); 
		query.append("                   B.JO_RF_GNTE_OCN_QTY," ).append("\n"); 
		query.append("                   B.JO_RF_GNTE_INTER_QTY," ).append("\n"); 
		query.append("                   B.JO_45FT_OVR_TEU_QTY," ).append("\n"); 
		query.append("                   B.JO_45FT_UND_TEU_QTY," ).append("\n"); 
		query.append("                   B.SKD_DIR_CD," ).append("\n"); 
		query.append("                   B.JO_REF_NO           " ).append("\n"); 
		query.append("      FROM RDR_HEADER H," ).append("\n"); 
		query.append("                 VSK_VSL_PORT_SKD K," ).append("\n"); 
		query.append("                 JOO_BZC_AGMT B" ).append("\n"); 
		query.append("      WHERE K.VPS_ETD_DT BETWEEN TO_DATE (REPLACE (@[pre_fr], '-', ''), 'YYYYMMDD')" ).append("\n"); 
		query.append("           AND TO_DATE (REPLACE (@[pre_to], '-', ''), 'YYYYMMDD') + 0.99999" ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           #if (${region} != '') " ).append("\n"); 
		query.append("              AND H.REGION IN (${region}) --Region " ).append("\n"); 
		query.append("           #end" ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           AND H.VSL_CD = K.VSL_CD" ).append("\n"); 
		query.append("           AND H.VOY_NO = K.SKD_VOY_NO" ).append("\n"); 
		query.append("           AND H.PORT_CD = K.VPS_PORT_CD" ).append("\n"); 
		query.append("           AND H.DIR_CD = K.SKD_DIR_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("           AND K.CLPT_IND_SEQ = (SELECT MAX(K1.CLPT_IND_SEQ) CLPT_IND_SEQ" ).append("\n"); 
		query.append("                                 FROM  VSK_VSL_PORT_SKD K1" ).append("\n"); 
		query.append("                                 WHERE K1.VSL_CD||K1.SKD_VOY_NO||K1.SKD_DIR_CD||K1.VPS_PORT_CD = " ).append("\n"); 
		query.append("                                       K.VSL_CD||K.SKD_VOY_NO||K.SKD_DIR_CD||K.VPS_PORT_CD" ).append("\n"); 
		query.append("           #if (${vvd} != '') " ).append("\n"); 
		query.append("                                   AND K1.VSL_CD||K1.SKD_VOY_NO||K1.SKD_DIR_CD like  @[vvd]||'%'  --VVD " ).append("\n"); 
		query.append("           #end" ).append("\n"); 
		query.append("                                 )" ).append("\n"); 
		query.append("            " ).append("\n"); 
		query.append("           #if (${vvd} != '') " ).append("\n"); 
		query.append("               AND K.VSL_CD||K.SKD_VOY_NO||K.SKD_DIR_CD LIKE @[vvd]||'%'  --VVD " ).append("\n"); 
		query.append("           #end" ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           #if (${re_divr_cd} != '') " ).append("\n"); 
		query.append("              AND   B.RE_DIVR_CD = @[re_divr_cd]                  --Rev/Exp" ).append("\n"); 
		query.append("           #end" ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           #if (${skd_dir_cd} != '') " ).append("\n"); 
		query.append("              AND   H.DIR_CD = @[skd_dir_cd]                  --Dir" ).append("\n"); 
		query.append("           #end" ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           AND B.JO_SRC_CD IN ( 'A', 'R', 'C')" ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           #if (${opr_cd} != '') " ).append("\n"); 
		query.append("              AND B.JO_CRR_CD IN (${opr_cd})                      --Carrier " ).append("\n"); 
		query.append("           #end" ).append("\n"); 
		query.append("           " ).append("\n"); 
		query.append("           AND K.SLAN_CD = SUBSTR(B.RLANE_CD, 1, 3)" ).append("\n"); 
		query.append("           #if (${rlane_cd} != '') " ).append("\n"); 
		query.append("               AND  B.RLANE_CD  = @[rlane_cd]         --Lane " ).append("\n"); 
		query.append("           #end" ).append("\n"); 
		query.append("           AND B.DELT_FLG = 'N'" ).append("\n"); 
		query.append("           AND TO_CHAR(K.VPS_ETD_DT, 'YYYYMMDD') BETWEEN  B.AGMT_EFF_DT AND B.AGMT_EXP_DT" ).append("\n"); 
		query.append("           AND H.DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("SELECT A.RE_DIVR_CD, --11번" ).append("\n"); 
		query.append("              A.JO_CRR_CD,  --12번" ).append("\n"); 
		query.append("              A.VVD,             -- 13번" ).append("\n"); 
		query.append("              H.PORT_CD,      -- 14번" ).append("\n"); 
		query.append("              H.VPS_ETD_DT,  -- 15번" ).append("\n"); 
		query.append("              A.ALLOC_TEU + A.JO_ALOC_ADJ_TEU_QTY  ALLOC_TEU,     -- 16번" ).append("\n"); 
		query.append("              " ).append("\n"); 
		query.append("     CASE WHEN A.JO_ALOC_ADJ_WGT > 0" ).append("\n"); 
		query.append("           THEN A.JO_ALOC_ADJ_WGT" ).append("\n"); 
		query.append("           ELSE (A.ALLOC_TEU + A.JO_ALOC_ADJ_TEU_QTY) *  H.JO_TON_TEU_QTY" ).append("\n"); 
		query.append("           END ALLOC_WT,-- 17번" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("            CASE WHEN  A.FULL_20HC > H.JO_20FT_GNTE_QTY" ).append("\n"); 
		query.append("                  THEN                                                       " ).append("\n"); 
		query.append("                      DECODE(H.JO_20FT_RND_RT, 1, ROUND((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1))," ).append("\n"); 
		query.append("                                               2, CEIL((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1))," ).append("\n"); 
		query.append("                                                  FLOOR((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1)))" ).append("\n"); 
		query.append("                  ELSE 0" ).append("\n"); 
		query.append("             END +" ).append("\n"); 
		query.append("             CASE WHEN  A.FULL_40HC > H.JO_40FT_GNTE_QTY" ).append("\n"); 
		query.append("                  THEN                                                       " ).append("\n"); 
		query.append("                      DECODE(H.JO_40FT_RND_RT, 1, ROUND((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                               2, CEIL((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                   FLOOR((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2)))" ).append("\n"); 
		query.append("                  ELSE 0" ).append("\n"); 
		query.append("             END +" ).append("\n"); 
		query.append("             CASE WHEN  A.FULL_45 <= H.JO_45FT_GNTE_QTY" ).append("\n"); 
		query.append("                  THEN DECODE(H.JO_45FT_RND_RT, 1, ROUND(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                2, CEIL(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                   FLOOR(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2)))" ).append("\n"); 
		query.append("                  ELSE   DECODE(H.JO_45FT_RND_RT, 1, ROUND((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) ))," ).append("\n"); 
		query.append("                                                  2, CEIL((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) ))," ).append("\n"); 
		query.append("                                                     FLOOR((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) )))" ).append("\n"); 
		query.append("             END +" ).append("\n"); 
		query.append("             A.AK_VOID + A.JO_VOID_TEU_QTY + A.TOTAL_TEU  ACTU_TEU,           -- 18번" ).append("\n"); 
		query.append("                    " ).append("\n"); 
		query.append("                    " ).append("\n"); 
		query.append("       A.AK_VOID      ACTU_TEU_AK_VOID,         " ).append("\n"); 
		query.append("             A.JO_VOID_TEU_QTY    ACTU_TEU_JO_VOID_TEU_QTY,  " ).append("\n"); 
		query.append("                  A.TOTAL_TEU     ACTU_TEU_TOTAL_TEU,             " ).append("\n"); 
		query.append("                    " ).append("\n"); 
		query.append("                    " ).append("\n"); 
		query.append("                    " ).append("\n"); 
		query.append("              A.ACTU_WT,                                                             -- 19번" ).append("\n"); 
		query.append("              " ).append("\n"); 
		query.append("             CASE WHEN  A.FULL_20HC > H.JO_20FT_GNTE_QTY" ).append("\n"); 
		query.append("                  THEN                                                       " ).append("\n"); 
		query.append("                      DECODE(H.JO_20FT_RND_RT, 1, ROUND((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1))," ).append("\n"); 
		query.append("                                               2, CEIL((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1))," ).append("\n"); 
		query.append("                                                  FLOOR((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1)))" ).append("\n"); 
		query.append("                  ELSE 0" ).append("\n"); 
		query.append("             END    ADD_20HC_TEU,  -- 39번                                           " ).append("\n"); 
		query.append("              " ).append("\n"); 
		query.append("             CASE WHEN  A.FULL_40HC > H.JO_40FT_GNTE_QTY" ).append("\n"); 
		query.append("                  THEN                                                       " ).append("\n"); 
		query.append("                      DECODE(H.JO_40FT_RND_RT, 1, ROUND((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                               2, CEIL((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                   FLOOR((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2)))" ).append("\n"); 
		query.append("                  ELSE 0" ).append("\n"); 
		query.append("             END    ADD_40HC_TEU,       -- 20번 " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("              CASE WHEN  A.FULL_45 <= H.JO_45FT_GNTE_QTY" ).append("\n"); 
		query.append("                    THEN DECODE(H.JO_45FT_RND_RT, 1, ROUND(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                                         2, CEIL(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                                             FLOOR(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2)))" ).append("\n"); 
		query.append("                    ELSE   DECODE(H.JO_45FT_RND_RT, 1, ROUND((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) ))," ).append("\n"); 
		query.append("                                                                           2, CEIL((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) ))," ).append("\n"); 
		query.append("                                                                               FLOOR((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) )))" ).append("\n"); 
		query.append("                    END AS ADD_45_TEU,               -- 21번" ).append("\n"); 
		query.append("              A.AK_VOID + A.JO_VOID_TEU_QTY AK_JO_VOID_TEU_QTY,    -- 22번" ).append("\n"); 
		query.append("              A.FULL_20,                       -- 23번" ).append("\n"); 
		query.append("              A.FULL_20HC,                     -- 40번" ).append("\n"); 
		query.append("              A.FULL_40,                       -- 24번" ).append("\n"); 
		query.append("              A.FULL_40HC,                  -- 25번" ).append("\n"); 
		query.append("              A.FULL_45,                      -- 26번" ).append("\n"); 
		query.append("              A.TOTAL_TEU,                 -- 27번" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("             CASE WHEN " ).append("\n"); 
		query.append("                        (CASE WHEN  A.FULL_20HC > H.JO_20FT_GNTE_QTY" ).append("\n"); 
		query.append("                            THEN                                                       " ).append("\n"); 
		query.append("                                DECODE(H.JO_20FT_RND_RT, 1, ROUND((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1))," ).append("\n"); 
		query.append("                                                         2, CEIL((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1))," ).append("\n"); 
		query.append("                                                            FLOOR((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1)))" ).append("\n"); 
		query.append("                            ELSE 0" ).append("\n"); 
		query.append("                       END +" ).append("\n"); 
		query.append("                       CASE WHEN  A.FULL_40HC > H.JO_40FT_GNTE_QTY" ).append("\n"); 
		query.append("                            THEN                                                       " ).append("\n"); 
		query.append("                                DECODE(H.JO_40FT_RND_RT, 1, ROUND((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                         2, CEIL((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                             FLOOR((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2)))" ).append("\n"); 
		query.append("                            ELSE 0" ).append("\n"); 
		query.append("                       END +" ).append("\n"); 
		query.append("                       CASE WHEN  A.FULL_45 <= H.JO_45FT_GNTE_QTY" ).append("\n"); 
		query.append("                            THEN DECODE(H.JO_45FT_RND_RT, 1, ROUND(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                          2, CEIL(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                             FLOOR(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2)))" ).append("\n"); 
		query.append("                            ELSE   DECODE(H.JO_45FT_RND_RT, 1, ROUND((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) ))," ).append("\n"); 
		query.append("                                                            2, CEIL((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) ))," ).append("\n"); 
		query.append("                                                               FLOOR((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) )))" ).append("\n"); 
		query.append("                       END +" ).append("\n"); 
		query.append("                       A.AK_VOID + A.JO_VOID_TEU_QTY + A.TOTAL_TEU) - (A.ALLOC_TEU + A.JO_ALOC_ADJ_TEU_QTY)" ).append("\n"); 
		query.append("                    <= 0" ).append("\n"); 
		query.append("             THEN 0" ).append("\n"); 
		query.append("             ELSE    " ).append("\n"); 
		query.append("                   (CASE WHEN  A.FULL_20HC > H.JO_20FT_GNTE_QTY" ).append("\n"); 
		query.append("                            THEN                                                       " ).append("\n"); 
		query.append("                                DECODE(H.JO_20FT_RND_RT, 1, ROUND((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1))," ).append("\n"); 
		query.append("                                                         2, CEIL((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1))," ).append("\n"); 
		query.append("                                                            FLOOR((A.FULL_20HC - H.JO_20FT_GNTE_QTY ) * (H.JO_20FT_TEU_QTY - 1)))" ).append("\n"); 
		query.append("                            ELSE 0" ).append("\n"); 
		query.append("                       END +" ).append("\n"); 
		query.append("                       CASE WHEN  A.FULL_40HC > H.JO_40FT_GNTE_QTY" ).append("\n"); 
		query.append("                            THEN                                                       " ).append("\n"); 
		query.append("                                DECODE(H.JO_40FT_RND_RT, 1, ROUND((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                         2, CEIL((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                             FLOOR((A.FULL_40HC - H.JO_40FT_GNTE_QTY ) * (H.JO_40FT_TEU_QTY - 2)))" ).append("\n"); 
		query.append("                            ELSE 0" ).append("\n"); 
		query.append("                       END +" ).append("\n"); 
		query.append("                       CASE WHEN  A.FULL_45 <= H.JO_45FT_GNTE_QTY" ).append("\n"); 
		query.append("                            THEN DECODE(H.JO_45FT_RND_RT, 1, ROUND(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                          2, CEIL(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2))," ).append("\n"); 
		query.append("                                                             FLOOR(A.FULL_45 * (H.JO_45FT_UND_TEU_QTY - 2)))" ).append("\n"); 
		query.append("                            ELSE   DECODE(H.JO_45FT_RND_RT, 1, ROUND((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) ))," ).append("\n"); 
		query.append("                                                            2, CEIL((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) ))," ).append("\n"); 
		query.append("                                                               FLOOR((H.JO_45FT_GNTE_QTY * (H.JO_45FT_UND_TEU_QTY - 2)) + ((A.FULL_45 - H.JO_45FT_GNTE_QTY) * ( H.JO_45FT_OVR_TEU_QTY - 2) )))" ).append("\n"); 
		query.append("                       END +" ).append("\n"); 
		query.append("                       A.AK_VOID + A.JO_VOID_TEU_QTY + A.TOTAL_TEU) - (A.ALLOC_TEU + A.JO_ALOC_ADJ_TEU_QTY)" ).append("\n"); 
		query.append("             " ).append("\n"); 
		query.append("              END      OVER_LONG_TEU,      -- 28번   " ).append("\n"); 
		query.append("              " ).append("\n"); 
		query.append("             CASE WHEN " ).append("\n"); 
		query.append("                      A.ACTU_WT - (CASE WHEN A.JO_ALOC_ADJ_WGT > 0" ).append("\n"); 
		query.append("                                     THEN A.JO_ALOC_ADJ_WGT" ).append("\n"); 
		query.append("                                     ELSE (A.ALLOC_TEU + A.JO_ALOC_ADJ_TEU_QTY) *  H.JO_TON_TEU_QTY" ).append("\n"); 
		query.append("                                     END)" ).append("\n"); 
		query.append("                         <= 0" ).append("\n"); 
		query.append("             THEN 0" ).append("\n"); 
		query.append("             ELSE  " ).append("\n"); 
		query.append("                       A.ACTU_WT - (CASE WHEN A.JO_ALOC_ADJ_WGT > 0" ).append("\n"); 
		query.append("                                       THEN A.JO_ALOC_ADJ_WGT" ).append("\n"); 
		query.append("                                       ELSE (A.ALLOC_TEU + A.JO_ALOC_ADJ_TEU_QTY) *  H.JO_TON_TEU_QTY" ).append("\n"); 
		query.append("                                       END)  " ).append("\n"); 
		query.append("              END      OVER_LONG_WT,  -- 29번 " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("              A.JO_SHRT_LEG_RMK_TEU_QTY,           -- 30번" ).append("\n"); 
		query.append("              A.JO_SHRT_LEG_RMK_WGT,               -- 31번" ).append("\n"); 
		query.append("              A.JO_SHRT_LEG_RMK_SCTR_NM,          -- 32번" ).append("\n"); 
		query.append("              --A.RF_O + A.JO_RF_OCN_QTY  RF_O,      -- 33번" ).append("\n"); 
		query.append("              --A.RF_I + A.JO_RF_IPT_QTY  RF_I,      -- 34번" ).append("\n"); 
		query.append("              " ).append("\n"); 
		query.append("               CASE WHEN JO_RF_GNTE_OCN_QTY > A.RF_O + A.JO_RF_OCN_QTY THEN 0" ).append("\n"); 
		query.append("               ELSE A.RF_O + A.JO_RF_OCN_QTY - JO_RF_GNTE_OCN_QTY" ).append("\n"); 
		query.append("               END RF_O,      -- 33번" ).append("\n"); 
		query.append("               " ).append("\n"); 
		query.append("               CASE WHEN JO_RF_GNTE_INTER_QTY > A.RF_I + A.JO_RF_IPT_QTY THEN 0" ).append("\n"); 
		query.append("               ELSE A.RF_I + A.JO_RF_IPT_QTY - JO_RF_GNTE_INTER_QTY" ).append("\n"); 
		query.append("               END RF_I,      -- 34번" ).append("\n"); 
		query.append("               " ).append("\n"); 
		query.append("              A.MT_TEU,                            -- 35번" ).append("\n"); 
		query.append("              A.MT_WT,                             -- 36번" ).append("\n"); 
		query.append("              A.REMARK_YN,                         -- 37번" ).append("\n"); 
		query.append("              A.JO_ALOC_ADJ_RMK_YN,                -- 38번" ).append("\n"); 
		query.append("              A.REMARK ,                           -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("              A.JO_RF_OCN_QTY,                     -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("              A.JO_RF_IPT_QTY,                     -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("              A.JO_VOID_TEU_QTY,                   -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("              A.JO_ALOC_ADJ_TEU_QTY,               -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("              A.JO_ALOC_ADJ_WGT                   -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("             -- A.JO_ALOC_ADJ_RMK                    -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("FROM" ).append("\n"); 
		query.append("      (" ).append("\n"); 
		query.append("        SELECT RE_DIVR_CD,                         -- 11번" ).append("\n"); 
		query.append("                      JO_CRR_CD,                   --12번" ).append("\n"); 
		query.append("                      VVD,                         -- 13번" ).append("\n"); 
		query.append("                      MAX(PORT_CD) PORT_CD ,       -- 14번" ).append("\n"); 
		query.append("                      MAX(VPS_ETD_DT) VPS_ETD_DT , -- 15번" ).append("\n"); 
		query.append("                      MAX(ALLOC_TEU) ALLOC_TEU ,   -- 16번" ).append("\n"); 
		query.append("                      MAX(ALLOC_WT) ALLOC_WT,      -- 17번" ).append("\n"); 
		query.append("                      SUM(ACTU_WT)  ACTU_WT,       -- 19번" ).append("\n"); 
		query.append("                      SUM(AK_VOID)  AK_VOID,       --22번" ).append("\n"); 
		query.append("                      SUM(FULL_20) FULL_20 ,       --23번" ).append("\n"); 
		query.append("                      SUM(FULL_20HC) FULL_20HC,    --40번" ).append("\n"); 
		query.append("                      SUM(FULL_40) FULL_40,        --24번" ).append("\n"); 
		query.append("                      SUM(FULL_40HC) FULL_40HC,    -- 25번" ).append("\n"); 
		query.append("                      SUM(FULL_45) FULL_45,        -- 26번" ).append("\n"); 
		query.append("                      ((SUM(FULL_40) + SUM(FULL_40HC) +SUM(FULL_45)) * 2) + SUM(FULL_20) + SUM(FULL_20HC) TOTAL_TEU, -- 27번" ).append("\n"); 
		query.append("                      --SUM(FULL_20) + SUM(FULL_40) + SUM(FULL_40HC) +SUM(FULL_45)  TOTAL_TEU, -- 27번" ).append("\n"); 
		query.append("                      --SUM(TOTAL_TEU) TOTAL_TEU,  -- 27번" ).append("\n"); 
		query.append("                      SUM(RF_O)  RF_O,             -- 33번" ).append("\n"); 
		query.append("                      SUM(RF_I)  RF_I,             -- 34번" ).append("\n"); 
		query.append("                      SUM(MT_TEU)  MT_TEU,         -- 35번" ).append("\n"); 
		query.append("                      SUM(MT_WT)  MT_WT,           -- 36번" ).append("\n"); 
		query.append("                      NVL2 (MAX (REMARK), 'Yes', 'No') REMARK_YN,   -- 37번" ).append("\n"); 
		query.append("                      MAX(REMARK) REMARK ,                                      -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                      SUM(JO_SHRT_LEG_RMK_TEU_QTY) JO_SHRT_LEG_RMK_TEU_QTY,     -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                      SUM(JO_SHRT_LEG_RMK_WGT) JO_SHRT_LEG_RMK_WGT,             -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                      MAX(JO_SHRT_LEG_RMK_SCTR_NM) JO_SHRT_LEG_RMK_SCTR_NM,   -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                      SUM(JO_RF_OCN_QTY) JO_RF_OCN_QTY,                         -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                      SUM(JO_RF_IPT_QTY) JO_RF_IPT_QTY,                         -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                      SUM(JO_VOID_TEU_QTY) JO_VOID_TEU_QTY,                     -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                      NVL2 (MAX (JO_ALOC_ADJ_RMK), 'Yes', 'No') JO_ALOC_ADJ_RMK_YN,   -- 38번" ).append("\n"); 
		query.append("                      SUM(JO_ALOC_ADJ_TEU_QTY) JO_ALOC_ADJ_TEU_QTY,             -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                      SUM(JO_ALOC_ADJ_WGT) JO_ALOC_ADJ_WGT,                     -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                      MAX(JO_ALOC_ADJ_RMK) JO_ALOC_ADJ_RMK                      -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("        FROM " ).append("\n"); 
		query.append("        (  " ).append("\n"); 
		query.append("               /*  16번 CRR_CD */" ).append("\n"); 
		query.append("                SELECT DECODE(H. RE_DIVR_CD, 'R', 'Rev', 'Exp') RE_DIVR_CD,     -- 11번" ).append("\n"); 
		query.append("                              H.JO_CRR_CD,                 --12번" ).append("\n"); 
		query.append("                              H.VVD,                       -- 13번" ).append("\n"); 
		query.append("                              '' PORT_CD,                  -- 14번" ).append("\n"); 
		query.append("                              '' VPS_ETD_DT,               -- 15번" ).append("\n"); 
		query.append("                              SUM(D.CRR_BSA_CAPA)  ALLOC_TEU,   -- 16번" ).append("\n"); 
		query.append("                              0  ALLOC_WT,                 -- 17번" ).append("\n"); 
		query.append("                              0  ACTU_WT,                  -- 19번" ).append("\n"); 
		query.append("                              0 AK_VOID,                   -- 22번" ).append("\n"); 
		query.append("                              0 FULL_20,                   -- 23번" ).append("\n"); 
		query.append("                              0 FULL_20HC,                 -- 40번" ).append("\n"); 
		query.append("                              0 FULL_40,                   -- 24번" ).append("\n"); 
		query.append("                              0 FULL_40HC,                 -- 25번" ).append("\n"); 
		query.append("                              0 FULL_45,                   -- 26번" ).append("\n"); 
		query.append("                              0 RF_O,                      -- 33번 " ).append("\n"); 
		query.append("                              0 RF_I,                      -- 34번" ).append("\n"); 
		query.append("                              0 MT_TEU,                    -- 35번" ).append("\n"); 
		query.append("                              0 MT_WT,                     -- 36번" ).append("\n"); 
		query.append("                              MAX(H.REMARK) REMARK ,       -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_TEU_QTY,   -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_WGT,       -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                              '' JO_SHRT_LEG_RMK_SCTR_NM,  -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                              0 JO_RF_OCN_QTY,             -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                              0 JO_RF_IPT_QTY,             -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                              0 JO_VOID_TEU_QTY,           -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_TEU_QTY,       -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_WGT,           -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                              '' JO_ALOC_ADJ_RMK           -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                FROM MAS_MON_VVD A, " ).append("\n"); 
		query.append("                     MAS_LANE_RGST B," ).append("\n"); 
		query.append("                     BSA_VVD_MST C, " ).append("\n"); 
		query.append("                     BSA_VVD_OTR_CRR D" ).append("\n"); 
		query.append("                    ,BSA_VVD_SWAP_INFO F " ).append("\n"); 
		query.append("                    ,PA H" ).append("\n"); 
		query.append("                    ,JOO_BZC_AGMT_CRR R" ).append("\n"); 
		query.append("                WHERE A.TRD_CD     = C.TRD_CD " ).append("\n"); 
		query.append("                  AND A.RLANE_CD   = C.RLANE_CD " ).append("\n"); 
		query.append("                  AND A.IOC_CD     = C.IOC_CD " ).append("\n"); 
		query.append("                  AND A.VSL_CD     = C.VSL_CD " ).append("\n"); 
		query.append("                  AND A.SKD_VOY_NO = C.SKD_VOY_NO " ).append("\n"); 
		query.append("                  AND A.DIR_CD     = C.SKD_DIR_CD " ).append("\n"); 
		query.append("                  AND A.TRD_CD     = B.TRD_CD " ).append("\n"); 
		query.append("                  AND A.RLANE_CD   = B.RLANE_CD " ).append("\n"); 
		query.append("                  AND A.DIR_CD     = B.DIR_CD " ).append("\n"); 
		query.append("                  AND A.IOC_CD     = B.IOC_CD " ).append("\n"); 
		query.append("                  AND C.TRD_CD     = D.TRD_CD(+) " ).append("\n"); 
		query.append("                  AND C.RLANE_CD   = D.RLANE_CD(+) " ).append("\n"); 
		query.append("                  AND C.VSL_CD     = D.VSL_CD(+) " ).append("\n"); 
		query.append("                  AND C.SKD_VOY_NO = D.SKD_VOY_NO(+) " ).append("\n"); 
		query.append("                  AND C.SKD_DIR_CD = D.SKD_DIR_CD(+) " ).append("\n"); 
		query.append("                  AND D.TRD_CD     = F.TRD_CD(+) " ).append("\n"); 
		query.append("                  AND D.RLANE_CD   = F.RLANE_CD(+) " ).append("\n"); 
		query.append("                  AND D.VSL_CD     = F.VSL_CD(+) " ).append("\n"); 
		query.append("                  AND D.SKD_VOY_NO = F.SKD_VOY_NO(+) " ).append("\n"); 
		query.append("                  AND D.SKD_DIR_CD = F.SKD_DIR_CD(+) " ).append("\n"); 
		query.append("                  AND D.BSA_OP_JB_CD= F.BSA_OP_JB_CD(+) " ).append("\n"); 
		query.append("                  AND D.CRR_CD      = F.CRR_CD(+) " ).append("\n"); 
		query.append("                  AND NVL(A.DELT_FLG,'N') = 'N' " ).append("\n"); 
		query.append("                  AND D.BSA_OP_JB_CD(+) = '007'" ).append("\n"); 
		query.append("                  " ).append("\n"); 
		query.append("                  AND H.RLANE_CD = A.RLANE_CD" ).append("\n"); 
		query.append("                  " ).append("\n"); 
		query.append("                  --AND H.JO_CRR_CD = R.JO_REP_CRR_CD" ).append("\n"); 
		query.append("                  --AND R.JO_CRR_CD = D.CRR_CD" ).append("\n"); 
		query.append("                  " ).append("\n"); 
		query.append("                  AND H.JO_REF_NO = R.JO_REF_NO" ).append("\n"); 
		query.append("                  AND R.JO_CRR_CD = D.CRR_CD" ).append("\n"); 
		query.append("                  AND H.VVD = C.VSL_CD||C.SKD_VOY_NO||C.SKD_DIR_CD" ).append("\n"); 
		query.append("                  --AND A.RLANE_CD = R.RLANE_CD" ).append("\n"); 
		query.append("                GROUP BY H.RE_DIVR_CD, H.JO_CRR_CD, H.VVD" ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("                UNION ALL" ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("               /*  19번 CRR_CD  <> 'SML'  */" ).append("\n"); 
		query.append("                SELECT DECODE(H. RE_DIVR_CD, 'R', 'Rev', 'Exp') RE_DIVR_CD,     -- 11번" ).append("\n"); 
		query.append("                              H.JO_CRR_CD,                 --12번" ).append("\n"); 
		query.append("                              H.VVD,                       -- 13번" ).append("\n"); 
		query.append("                              '' PORT_CD,                  -- 14번" ).append("\n"); 
		query.append("                              '' VPS_ETD_DT,               -- 15번" ).append("\n"); 
		query.append("                              0   ALLOC_TEU,   -- 16번" ).append("\n"); 
		query.append("                              0  ALLOC_WT,                 -- 17번" ).append("\n"); 
		query.append("                              SUM(A.WEIGHT) ACTU_WT,       -- 19번" ).append("\n"); 
		query.append("                              0 AK_VOID,                   -- 22번" ).append("\n"); 
		query.append("                              0 FULL_20,                   -- 23번" ).append("\n"); 
		query.append("                              0 FULL_20HC,                 -- 40번" ).append("\n"); 
		query.append("                              0 FULL_40,                   -- 24번" ).append("\n"); 
		query.append("                              0 FULL_40HC,                 -- 25번" ).append("\n"); 
		query.append("                              0 FULL_45,                   -- 26번" ).append("\n"); 
		query.append("                              0 RF_O,                      -- 33번 " ).append("\n"); 
		query.append("                              0 RF_I,                      -- 34번" ).append("\n"); 
		query.append("                              0 MT_TEU,                    -- 35번" ).append("\n"); 
		query.append("                              0 MT_WT,                     -- 36번" ).append("\n"); 
		query.append("                              MAX(H.REMARK) REMARK ,       -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_TEU_QTY,   -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_WGT,       -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                              '' JO_SHRT_LEG_RMK_SCTR_NM,  -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                              0 JO_RF_OCN_QTY,             -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                              0 JO_RF_IPT_QTY,             -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                              0 JO_VOID_TEU_QTY,           -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_TEU_QTY,       -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_WGT,           -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                              '' JO_ALOC_ADJ_RMK           -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                FROM PA H," ).append("\n"); 
		query.append("                          RDR_UTILIZE A," ).append("\n"); 
		query.append("                          JOO_BZC_AGMT_CRR C" ).append("\n"); 
		query.append("                WHERE 1 = 1" ).append("\n"); 
		query.append("                     AND H.VSL_CD = A.VSL_CD" ).append("\n"); 
		query.append("                     AND H.VOY_NO = A.VOY_NO" ).append("\n"); 
		query.append("                     AND H.DIR_CD = A.DIR_CD" ).append("\n"); 
		query.append("                     AND H.REGION = A.REGION" ).append("\n"); 
		query.append("                     --AND H.RLANE_CD = C.RLANE_CD" ).append("\n"); 
		query.append("                     --AND H.JO_CRR_CD = C.JO_REP_CRR_CD" ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                     AND H.JO_REF_NO = C.JO_REF_NO" ).append("\n"); 
		query.append("                     --AND C.JO_CRR_CD = D.CRR_CD" ).append("\n"); 
		query.append("                  " ).append("\n"); 
		query.append("                     AND C.JO_CRR_CD = A.OPR_CD" ).append("\n"); 
		query.append("                     AND H.JO_CRR_CD <> 'SML'" ).append("\n"); 
		query.append("                GROUP BY H. RE_DIVR_CD, H.JO_CRR_CD, H.VVD, H.PORT_CD, H.VPS_ETD_DT, H.JO_TON_TEU_QTY" ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("                 UNION ALL" ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("                 /* 19번   CRR_CD = 'SML' */" ).append("\n"); 
		query.append("                 SELECT DECODE(H. RE_DIVR_CD, 'R', 'Rev', 'Exp') RE_DIVR_CD,  -- 11번" ).append("\n"); 
		query.append("                              H.JO_CRR_CD,                    --12번" ).append("\n"); 
		query.append("                              H.VVD,                          -- 13번" ).append("\n"); 
		query.append("                              '' PORT_CD,                     -- 14번" ).append("\n"); 
		query.append("                              '' VPS_ETD_DT,                  -- 15번" ).append("\n"); 
		query.append("                              0  ALLOC_TEU,  -- 16번" ).append("\n"); 
		query.append("                              0  ALLOC_WT,                    -- 17번" ).append("\n"); 
		query.append("                              SUM(A.WEIGHT) ACTU_WT,          -- 19번" ).append("\n"); 
		query.append("                              0 AK_VOID,                      -- 22번" ).append("\n"); 
		query.append("                              0 FULL_20,                      -- 23번" ).append("\n"); 
		query.append("                              0 FULL_20HC,                    -- 40번" ).append("\n"); 
		query.append("                              0 FULL_40,                      -- 24번" ).append("\n"); 
		query.append("                              0 FULL_40HC,                    -- 25번" ).append("\n"); 
		query.append("                              0 FULL_45,                      -- 26번" ).append("\n"); 
		query.append("                              0 RF_O,                         -- 33번" ).append("\n"); 
		query.append("                              0 RF_I,                         -- 34번" ).append("\n"); 
		query.append("                              0 MT_TEU,                       -- 35번" ).append("\n"); 
		query.append("                              0 MT_WT,                        -- 36번" ).append("\n"); 
		query.append("                              MAX(H.REMARK)  REMARK,          -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_TEU_QTY,      -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_WGT,          -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                              '' JO_SHRT_LEG_RMK_SCTR_NM,     -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                              0 JO_RF_OCN_QTY,                -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                              0 JO_RF_IPT_QTY,                -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                              0 JO_VOID_TEU_QTY,              -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_TEU_QTY,          -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_WGT,              -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                              '' JO_ALOC_ADJ_RMK              -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                FROM PA H," ).append("\n"); 
		query.append("                          RDR_UTILIZE A," ).append("\n"); 
		query.append("                          JOO_BZC_AGMT_CRR C" ).append("\n"); 
		query.append("                WHERE 1 = 1" ).append("\n"); 
		query.append("                     AND H.JO_CRR_CD =  'SML'" ).append("\n"); 
		query.append("                     AND H.VSL_CD = A.VSL_CD" ).append("\n"); 
		query.append("                     AND H.VOY_NO = A.VOY_NO" ).append("\n"); 
		query.append("                     AND H.DIR_CD = A.DIR_CD" ).append("\n"); 
		query.append("                     AND H.REGION = A.REGION" ).append("\n"); 
		query.append("                     --AND H.RLANE_CD = C.RLANE_CD" ).append("\n"); 
		query.append("                     --AND H.JO_CRR_CD = C.JO_REP_CRR_CD" ).append("\n"); 
		query.append("                     AND H.JO_REF_NO = C.JO_REF_NO" ).append("\n"); 
		query.append("                     AND C.JO_CRR_CD = A.OPR_CD" ).append("\n"); 
		query.append("                GROUP BY H. RE_DIVR_CD, H.JO_CRR_CD, H.VVD, H.PORT_CD, H.VPS_ETD_DT, H.JO_TON_TEU_QTY" ).append("\n"); 
		query.append("                               " ).append("\n"); 
		query.append("                UNION ALL" ).append("\n"); 
		query.append("                /* 'AK' Void  22번 */" ).append("\n"); 
		query.append("                 SELECT RE_DIVR_CD,           -- 11번" ).append("\n"); 
		query.append("                              JO_CRR_CD,      --12번" ).append("\n"); 
		query.append("                              VVD,            -- 13번" ).append("\n"); 
		query.append("                              '' PORT_CD,     -- 14번" ).append("\n"); 
		query.append("                              '' VPS_ETD_DT,  -- 15번" ).append("\n"); 
		query.append("                              0 ALLOC_TEU,    -- 16번" ).append("\n"); 
		query.append("                              0  ALLOC_WT,    -- 17번" ).append("\n"); 
		query.append("                              0  ACTU_WT,     -- 19번" ).append("\n"); 
		query.append("                              SUM (CASE" ).append("\n"); 
		query.append("                              WHEN ACT > 0 THEN" ).append("\n"); 
		query.append("                                          ACT" ).append("\n"); 
		query.append("                                       WHEN X * Y * Z > 0 THEN" ).append("\n"); 
		query.append("                                          (X + 1) * (Y + 1) * (Z + 1) - S" ).append("\n"); 
		query.append("                                       WHEN X * Y > 0 THEN" ).append("\n"); 
		query.append("                                          (X + 1) * (Y + 1) * S - S" ).append("\n"); 
		query.append("                                       WHEN X * Z > 0 THEN" ).append("\n"); 
		query.append("                                          (X + 1) * (Z + 1) - 1 + X * (S - 1)" ).append("\n"); 
		query.append("                                       WHEN Y * Z > 0 THEN" ).append("\n"); 
		query.append("                                          (Y + 1) * (Z + 1) - 1 + Y * (S - 1)" ).append("\n"); 
		query.append("                                       WHEN X + Y > 0 THEN" ).append("\n"); 
		query.append("                                          (X + Y + 1) * S - S" ).append("\n"); 
		query.append("                                       WHEN Z > 0 THEN Z" ).append("\n"); 
		query.append("                                       ELSE 0" ).append("\n"); 
		query.append("                                    END) AS AK_VOID,       -- 22번" ).append("\n"); 
		query.append("                              0 FULL_20,                   -- 23번" ).append("\n"); 
		query.append("                              0 FULL_20HC,                 -- 40번" ).append("\n"); 
		query.append("                              0 FULL_40,                   -- 24번" ).append("\n"); 
		query.append("                              0 FULL_40HC,                 -- 25번" ).append("\n"); 
		query.append("                              0 FULL_45,                   -- 26번" ).append("\n"); 
		query.append("                              0 RF_O,                      -- 33번" ).append("\n"); 
		query.append("                              0 RF_I,                      -- 34번" ).append("\n"); 
		query.append("                              0 MT_TEU,                    -- 35번" ).append("\n"); 
		query.append("                              0 MT_WT,                     -- 36번" ).append("\n"); 
		query.append("                              '' REMARK ,                  -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_TEU_QTY,   -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_WGT,       -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                              '' JO_SHRT_LEG_RMK_SCTR_NM,  -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                              0 JO_RF_OCN_QTY,             -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                              0 JO_RF_IPT_QTY,             -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                              0 JO_VOID_TEU_QTY,           -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_TEU_QTY,       -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_WGT,           -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                              '' JO_ALOC_ADJ_RMK           -- 38번 팝업 내의 REMARK                                    " ).append("\n"); 
		query.append("                FROM (" ).append("\n"); 
		query.append("                              SELECT  DECODE(H. RE_DIVR_CD, 'R', 'Rev', 'Exp') RE_DIVR_CD," ).append("\n"); 
		query.append("                                              H.JO_CRR_CD," ).append("\n"); 
		query.append("                                              H.VVD," ).append("\n"); 
		query.append("                                             NVL (B.OVP_SLOT, 0) + NVL (B.OVS_SLOT, 0) X," ).append("\n"); 
		query.append("                                             NVL (B.OVH_SLOT, 0) Y," ).append("\n"); 
		query.append("                                             NVL (B.OVA_SLOT, 0) + NVL (B.OVF_SLOT, 0) Z," ).append("\n"); 
		query.append("                                             (2 - MOD (B.BAY, 2)) S," ).append("\n"); 
		query.append("                                             TO_NUMBER(ACT_SLOT) ACT " ).append("\n"); 
		query.append("                              FROM PA H," ).append("\n"); 
		query.append("                                        BAY_PLAN B," ).append("\n"); 
		query.append("                                        JOO_BZC_AGMT_CRR C" ).append("\n"); 
		query.append("                              WHERE 1 = 1" ).append("\n"); 
		query.append("                                   AND H.VSL_CD = B.VSL_CD" ).append("\n"); 
		query.append("                                   AND H.VOY_NO = B.VOY_NO" ).append("\n"); 
		query.append("                                   AND H.DIR_CD = B.DIR_CD" ).append("\n"); 
		query.append("                                   --AND H.RLANE_CD = C.RLANE_CD" ).append("\n"); 
		query.append("                                   --AND H.JO_CRR_CD = C.JO_REP_CRR_CD" ).append("\n"); 
		query.append("                                   AND H.JO_REF_NO = C.JO_REF_NO" ).append("\n"); 
		query.append("                                   AND C.JO_CRR_CD = B.OPR_CD" ).append("\n"); 
		query.append("                                   AND H.VPS_PORT_CD = B.PORT_CD" ).append("\n"); 
		query.append("                                   AND H.CLPT_IND_SEQ = B.CALL_IND" ).append("\n"); 
		query.append("                                   AND B.PLAN_TYPE = 'F'" ).append("\n"); 
		query.append("                                   " ).append("\n"); 
		query.append("                              )" ).append("\n"); 
		query.append("                GROUP BY RE_DIVR_CD, JO_CRR_CD, VVD" ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("                UNION ALL" ).append("\n"); 
		query.append("                /* 20', 40', 40HC, 45'  LOADING */" ).append("\n"); 
		query.append("               SELECT  DECODE(H. RE_DIVR_CD, 'R', 'Rev', 'Exp') RE_DIVR_CD, --11번" ).append("\n"); 
		query.append("                              H.JO_CRR_CD,                 --12번" ).append("\n"); 
		query.append("                              H.VVD,                       -- 13번" ).append("\n"); 
		query.append("                              '' PORT_CD,                  -- 14번" ).append("\n"); 
		query.append("                              '' VPS_ETD_DT,               -- 15번" ).append("\n"); 
		query.append("                              0 ALLOC_TEU,                 -- 16번" ).append("\n"); 
		query.append("                              0  ALLOC_WT,                 -- 17번" ).append("\n"); 
		query.append("                              0  ACTU_WT,                  -- 19번" ).append("\n"); 
		query.append("                              0 AK_VOID,                   -- 22번                              " ).append("\n"); 
		query.append("                              SUM (DECODE (B.CNTR_SIZE, '2', 1, 0)) FULL_20,  -- 23번" ).append("\n"); 
		query.append("                              SUM (DECODE (b.cntr_size, 'H', DECODE(SUBSTR(SZTP_ISO,0,1),'2', 1, 0) )) FULL_20HC,  -- 40번" ).append("\n"); 
		query.append("                              " ).append("\n"); 
		query.append("                              SUM (DECODE (B.CNTR_SIZE, '4', 1, 0)) FULL_40,                                                                    -- 24번" ).append("\n"); 
		query.append("                              SUM (DECODE (b.cntr_size, 'H', DECODE(SUBSTR(SZTP_ISO,0,1),'2', 0, 1) )) FULL_40HC,           -- 25번" ).append("\n"); 
		query.append("                              SUM (DECODE (b.cntr_size, 'L', 1, 0)) FULL_45 ,         -- 26번" ).append("\n"); 
		query.append("                              0 RF_O,                      -- 33번" ).append("\n"); 
		query.append("                              0 RF_I,                      -- 34번" ).append("\n"); 
		query.append("                              0 MT_TEU,                    -- 35번" ).append("\n"); 
		query.append("                              0 MT_WT,                     -- 36번" ).append("\n"); 
		query.append("                              '' REMARK ,                  -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_TEU_QTY,   -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_WGT,       -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                              '' JO_SHRT_LEG_RMK_SCTR_NM,  -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                              0 JO_RF_OCN_QTY,             -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                              0 JO_RF_IPT_QTY,             -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                              0 JO_VOID_TEU_QTY,           -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_TEU_QTY,       -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_WGT,           -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                              '' JO_ALOC_ADJ_RMK           -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                  FROM PA H," ).append("\n"); 
		query.append("                       BAY_PLAN B," ).append("\n"); 
		query.append("                       JOO_BZC_AGMT_CRR C," ).append("\n"); 
		query.append("                        (SELECT MAX(D.CALL_IND) CALL_IND, D.VSL_CD||D.VOY_NO||D.DIR_CD VVD" ).append("\n"); 
		query.append("                         FROM  BAY_PLAN D, PA H" ).append("\n"); 
		query.append("                        WHERE D.VSL_CD = H.VSL_CD" ).append("\n"); 
		query.append("                         AND D.VOY_NO = H.VOY_NO" ).append("\n"); 
		query.append("                         AND D.DIR_CD = H.DIR_CD" ).append("\n"); 
		query.append("                        GROUP BY  D.VSL_CD||D.VOY_NO||D.DIR_CD" ).append("\n"); 
		query.append("                        ) D                                    " ).append("\n"); 
		query.append("                  WHERE 1 = 1" ).append("\n"); 
		query.append("                       AND H.VSL_CD = B.VSL_CD" ).append("\n"); 
		query.append("                       AND H.VOY_NO = B.VOY_NO" ).append("\n"); 
		query.append("                       AND H.DIR_CD = B.DIR_CD" ).append("\n"); 
		query.append("                       AND H.JO_REF_NO = C.JO_REF_NO" ).append("\n"); 
		query.append("                       " ).append("\n"); 
		query.append("                       AND C.JO_CRR_CD = B.OPR_CD" ).append("\n"); 
		query.append("                       AND H.VPS_PORT_CD = B.PORT_CD" ).append("\n"); 
		query.append("                       " ).append("\n"); 
		query.append("                       AND D.VVD = H.VSL_CD||H.VOY_NO||H.DIR_CD" ).append("\n"); 
		query.append("                       AND D.CALL_IND = B.CALL_IND" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                       AND B.PLAN_TYPE = 'F'" ).append("\n"); 
		query.append("                GROUP BY H.RE_DIVR_CD, H.JO_CRR_CD, H.VVD" ).append("\n"); 
		query.append("                      " ).append("\n"); 
		query.append("                UNION ALL      " ).append("\n"); 
		query.append("                /* RF_O */" ).append("\n"); 
		query.append("                SELECT DECODE(H. RE_DIVR_CD, 'R', 'Rev', 'Exp') RE_DIVR_CD, --11번" ).append("\n"); 
		query.append("                              H.JO_CRR_CD,                 --12번" ).append("\n"); 
		query.append("                              H.VVD,                       -- 13번" ).append("\n"); 
		query.append("                              '' PORT_CD,                  -- 14번" ).append("\n"); 
		query.append("                              '' VPS_ETD_DT,               -- 15번" ).append("\n"); 
		query.append("                              0 ALLOC_TEU,                 -- 16번" ).append("\n"); 
		query.append("                              0 ALLOC_WT,                  -- 17번" ).append("\n"); 
		query.append("                              0 ACTU_WT,                   -- 19번" ).append("\n"); 
		query.append("                              0 AK_VOID,                   -- 22번" ).append("\n"); 
		query.append("                              0 FULL_20,                   -- 23번" ).append("\n"); 
		query.append("                              0 FULL_20HC,                 -- 40번" ).append("\n"); 
		query.append("                              0 FULL_40,                   -- 24번" ).append("\n"); 
		query.append("                              0 FULL_40HC,                 --25 번" ).append("\n"); 
		query.append("                              0 FULL_45,                   --26 번" ).append("\n"); 
		query.append("                              SUM (DECODE (M.CNTR_SIZE, '2', 1, '3', 1, 0)) + SUM (DECODE (M.CNTR_SIZE, '4', 1, 'H', 1, 'L', 1, 0)) RF_O,  -- 33 번" ).append("\n"); 
		query.append("                              0 RF_I,                      -- 34 번" ).append("\n"); 
		query.append("                              0 MT_TEU,                    -- 35번" ).append("\n"); 
		query.append("                              0 MT_WT,                     -- 36번" ).append("\n"); 
		query.append("                              '' REMARK ,                  -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_TEU_QTY,   -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_WGT,       -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                              '' JO_SHRT_LEG_RMK_SCTR_NM,  -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                              0 JO_RF_OCN_QTY,             -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                              0 JO_RF_IPT_QTY,             -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                              0 JO_VOID_TEU_QTY,           -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_TEU_QTY,       -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_WGT,           -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                              '' JO_ALOC_ADJ_RMK           -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                  FROM PA H," ).append("\n"); 
		query.append("                             RDR_CNTR_DETAIL M," ).append("\n"); 
		query.append("                             JOO_BZC_AGMT_CRR C" ).append("\n"); 
		query.append("                 WHERE H.VSL_CD = M.VSL_CD" ).append("\n"); 
		query.append("                      AND H.VOY_NO = M.VOY_NO" ).append("\n"); 
		query.append("                      AND H.DIR_CD = M.DIR_CD" ).append("\n"); 
		query.append("                      AND M.TEMP IS NOT NULL" ).append("\n"); 
		query.append("                      AND M.CARGO_TYPE != 'IR'" ).append("\n"); 
		query.append("                      AND H.REGION = M.REGION" ).append("\n"); 
		query.append("                      --AND H.RLANE_CD = C.RLANE_CD" ).append("\n"); 
		query.append("                      --AND H.JO_CRR_CD = C.JO_REP_CRR_CD" ).append("\n"); 
		query.append("                      AND H.JO_REF_NO = C.JO_REF_NO" ).append("\n"); 
		query.append("                      AND C.JO_CRR_CD = M.OPR_CD" ).append("\n"); 
		query.append("                GROUP BY H.RE_DIVR_CD, H.JO_CRR_CD, H.VVD" ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("                UNION ALL      " ).append("\n"); 
		query.append("                /* RF_I */" ).append("\n"); 
		query.append("                SELECT DECODE(H. RE_DIVR_CD, 'R', 'Rev', 'Exp') RE_DIVR_CD, --11번" ).append("\n"); 
		query.append("                              H.JO_CRR_CD,    --12번" ).append("\n"); 
		query.append("                              H.VVD,          -- 13번" ).append("\n"); 
		query.append("                              '' PORT_CD,     -- 14번" ).append("\n"); 
		query.append("                              '' VPS_ETD_DT,  -- 15번" ).append("\n"); 
		query.append("                              0 ALLOC_TEU,    -- 16번" ).append("\n"); 
		query.append("                              0 ALLOC_WT,     -- 17번" ).append("\n"); 
		query.append("                              0 ACTU_WT,      -- 19번" ).append("\n"); 
		query.append("                              0 AK_VOID,      -- 22번" ).append("\n"); 
		query.append("                              0 FULL_20,      -- 23번" ).append("\n"); 
		query.append("                              0 FULL_20HC,    -- 40번" ).append("\n"); 
		query.append("                              0 FULL_40,      -- 24번" ).append("\n"); 
		query.append("                              0 FULL_40HC,    --25 번" ).append("\n"); 
		query.append("                              0 FULL_45,      --26 번" ).append("\n"); 
		query.append("                              0  RF_O,        -- 33  번" ).append("\n"); 
		query.append("                              SUM (DECODE (M.CNTR_SIZE, '2', 1, '3', 1, 0)) + SUM (DECODE (M.CNTR_SIZE, '4', 1, 'H', 1, 'L', 1, 0)) RF_I,  -- 34  번" ).append("\n"); 
		query.append("                              0 MT_TEU,       -- 35번" ).append("\n"); 
		query.append("                              0 MT_WT,        -- 36번" ).append("\n"); 
		query.append("                              '' REMARK ,                  -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_TEU_QTY,   -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_WGT,       -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                              '' JO_SHRT_LEG_RMK_SCTR_NM,  -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                              0 JO_RF_OCN_QTY,             -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                              0 JO_RF_IPT_QTY,             -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                              0 JO_VOID_TEU_QTY,           -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_TEU_QTY,       -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_WGT,           -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                              '' JO_ALOC_ADJ_RMK           -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                  FROM PA H," ).append("\n"); 
		query.append("                             RDR_CNTR_DETAIL M," ).append("\n"); 
		query.append("                             JOO_BZC_AGMT_CRR C" ).append("\n"); 
		query.append("                 WHERE H.VSL_CD = M.VSL_CD" ).append("\n"); 
		query.append("                      AND H.VOY_NO = M.VOY_NO" ).append("\n"); 
		query.append("                      AND H.DIR_CD = M.DIR_CD" ).append("\n"); 
		query.append("                      AND M.TEMP IS NOT NULL" ).append("\n"); 
		query.append("                      AND M.CARGO_TYPE = 'IR'" ).append("\n"); 
		query.append("                      AND H.REGION = M.REGION" ).append("\n"); 
		query.append("                      --AND H.RLANE_CD = C.RLANE_CD" ).append("\n"); 
		query.append("                      --AND H.JO_CRR_CD = C.JO_REP_CRR_CD" ).append("\n"); 
		query.append("                      AND H.JO_REF_NO = C.JO_REF_NO" ).append("\n"); 
		query.append("                      AND C.JO_CRR_CD = M.OPR_CD" ).append("\n"); 
		query.append("                GROUP BY H.RE_DIVR_CD, H.JO_CRR_CD, H.VVD" ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("                UNION ALL" ).append("\n"); 
		query.append("                /* EMPTY TEU, WT  */" ).append("\n"); 
		query.append("               SELECT  DECODE(H. RE_DIVR_CD, 'R', 'Rev', 'Exp') RE_DIVR_CD, --11번" ).append("\n"); 
		query.append("                              H.JO_CRR_CD,    --12번" ).append("\n"); 
		query.append("                              H.VVD,          -- 13번" ).append("\n"); 
		query.append("                              '' PORT_CD,     -- 14번" ).append("\n"); 
		query.append("                              '' VPS_ETD_DT,  -- 15번" ).append("\n"); 
		query.append("                              0 ALLOC_TEU,    -- 16번" ).append("\n"); 
		query.append("                              0  ALLOC_WT,    -- 17번" ).append("\n"); 
		query.append("                              0  ACTU_WT,     -- 19번" ).append("\n"); 
		query.append("                              0 AK_VOID,      -- 22번" ).append("\n"); 
		query.append("                              0 FULL_20,      -- 23번" ).append("\n"); 
		query.append("                              0 FULL_20HC,    -- 40번" ).append("\n"); 
		query.append("                              0 FULL_40,      -- 24번" ).append("\n"); 
		query.append("                              0 FULL_40HC,    -- 25번" ).append("\n"); 
		query.append("                              0 FULL_45,      -- 26번" ).append("\n"); 
		query.append("                              0 RF_O,         -- 33번" ).append("\n"); 
		query.append("                              0 RF_I,         -- 34번" ).append("\n"); 
		query.append("                              SUM (DECODE (MOD (B.BAY, 2), 0, 2, 1)) MT_TEU,   -- 35번" ).append("\n"); 
		query.append("                              SUM (B.WEIGHT) MT_WT,        -- 36번" ).append("\n"); 
		query.append("                              '' REMARK ,                  -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_TEU_QTY,   -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_WGT,       -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                              '' JO_SHRT_LEG_RMK_SCTR_NM,  -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                              0 JO_RF_OCN_QTY,             -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                              0 JO_RF_IPT_QTY,             -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                              0 JO_VOID_TEU_QTY,           -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_TEU_QTY,       -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_WGT,           -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                              '' JO_ALOC_ADJ_RMK           -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                  FROM PA H," ).append("\n"); 
		query.append("                            BAY_PLAN B," ).append("\n"); 
		query.append("                            JOO_BZC_AGMT_CRR C" ).append("\n"); 
		query.append("                  WHERE 1 = 1" ).append("\n"); 
		query.append("                       AND H.VSL_CD = B.VSL_CD" ).append("\n"); 
		query.append("                       AND H.VOY_NO = B.VOY_NO" ).append("\n"); 
		query.append("                       AND H.DIR_CD = B.DIR_CD" ).append("\n"); 
		query.append("                       --AND H.RLANE_CD = C.RLANE_CD" ).append("\n"); 
		query.append("                       --AND H.JO_CRR_CD = C.JO_REP_CRR_CD" ).append("\n"); 
		query.append("                       AND H.JO_REF_NO = C.JO_REF_NO" ).append("\n"); 
		query.append("                       AND C.JO_CRR_CD = B.OPR_CD" ).append("\n"); 
		query.append("                       AND H.VPS_PORT_CD = B.PORT_CD" ).append("\n"); 
		query.append("                       AND H.CLPT_IND_SEQ = B.CALL_IND" ).append("\n"); 
		query.append("                       AND B.PLAN_TYPE = 'F' " ).append("\n"); 
		query.append("                       AND B.FE = 'E' " ).append("\n"); 
		query.append("                GROUP BY H.RE_DIVR_CD, H.JO_CRR_CD, H.VVD       " ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("                UNION ALL" ).append("\n"); 
		query.append("                  /* JOO_INTG_LODG_SMRY  DATA 산출  */" ).append("\n"); 
		query.append("               SELECT  DECODE(H. RE_DIVR_CD, 'R', 'Rev', 'Exp') RE_DIVR_CD, --11번" ).append("\n"); 
		query.append("                              H.JO_CRR_CD,    --12번" ).append("\n"); 
		query.append("                              H.VVD,          -- 13번" ).append("\n"); 
		query.append("                              '' PORT_CD,     -- 14번" ).append("\n"); 
		query.append("                              '' VPS_ETD_DT,  -- 15번" ).append("\n"); 
		query.append("                              0 ALLOC_TEU,    -- 16번" ).append("\n"); 
		query.append("                              0  ALLOC_WT,    -- 17번" ).append("\n"); 
		query.append("                              0  ACTU_WT,     -- 19번" ).append("\n"); 
		query.append("                              0 AK_VOID,      -- 22번" ).append("\n"); 
		query.append("                              0 FULL_20,      -- 23번" ).append("\n"); 
		query.append("                              0 FULL_20HC,    -- 40번" ).append("\n"); 
		query.append("                              0 FULL_40,      -- 24번" ).append("\n"); 
		query.append("                              0 FULL_40HC,    -- 25번" ).append("\n"); 
		query.append("                              0 FULL_45,      -- 26번" ).append("\n"); 
		query.append("                              0 RF_O,         -- 33번" ).append("\n"); 
		query.append("                              0 RF_I,         -- 34번" ).append("\n"); 
		query.append("                              0 MT_TEU,       -- 35번" ).append("\n"); 
		query.append("                              0 MT_WT,        -- 36번" ).append("\n"); 
		query.append("                              MAX(S.JO_SHRT_LEG_RMK) REMARK ,                              -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                              SUM(S.JO_SHRT_LEG_RMK_TEU_QTY) JO_SHRT_LEG_RMK_TEU_QTY,      -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                              SUM(S.JO_SHRT_LEG_RMK_WGT) JO_SHRT_LEG_RMK_WGT,              -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                              MAX(JO_SHRT_LEG_RMK_SCTR_NM) JO_SHRT_LEG_RMK_SCTR_NM,        -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                              SUM(S.JO_RF_OCN_QTY) JO_RF_OCN_QTY,                          -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                              SUM(S.JO_RF_IPT_QTY) JO_RF_IPT_QTY,                          -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                              SUM(S.JO_VOID_TEU_QTY) JO_VOID_TEU_QTY,                      -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_TEU_QTY,                   -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                              0 JO_ALOC_ADJ_WGT,                       -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                              ''  JO_ALOC_ADJ_RMK                      -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                  FROM PA H," ).append("\n"); 
		query.append("                             JOO_BZC_AGMT B," ).append("\n"); 
		query.append("                             JOO_INTG_LODG_SMRY S," ).append("\n"); 
		query.append("                             JOO_BZC_AGMT_CRR C" ).append("\n"); 
		query.append("                  WHERE 1 = 1" ).append("\n"); 
		query.append("                       AND H.VSL_CD = S.VSL_CD" ).append("\n"); 
		query.append("                       AND H.VOY_NO = S.SKD_VOY_NO" ).append("\n"); 
		query.append("                       AND H.DIR_CD = S.SKD_DIR_CD" ).append("\n"); 
		query.append("                       AND H.RLANE_CD = B.RLANE_CD" ).append("\n"); 
		query.append("                       --AND B.RLANE_CD = C.RLANE_CD" ).append("\n"); 
		query.append("                       --AND B.JO_CRR_CD = C.JO_REP_CRR_CD" ).append("\n"); 
		query.append("                       AND B.JO_REF_NO = C.JO_REF_NO" ).append("\n"); 
		query.append("                       AND H.JO_REF_NO = B.JO_REF_NO" ).append("\n"); 
		query.append("                       " ).append("\n"); 
		query.append("                       AND C.JO_CRR_CD = S.JO_CRR_CD" ).append("\n"); 
		query.append("                       AND B.DELT_FLG = 'N'" ).append("\n"); 
		query.append("                GROUP BY H.RE_DIVR_CD, H.JO_CRR_CD, H.VVD" ).append("\n"); 
		query.append("                " ).append("\n"); 
		query.append("                UNION ALL" ).append("\n"); 
		query.append("               /* JOO_BZC_AGMT  DATA 산출  */" ).append("\n"); 
		query.append("               SELECT  DECODE(H. RE_DIVR_CD, 'R', 'Rev', 'Exp') RE_DIVR_CD, --11번" ).append("\n"); 
		query.append("                              H.JO_CRR_CD,    --12번" ).append("\n"); 
		query.append("                              H.VVD,          -- 13번" ).append("\n"); 
		query.append("                              '' PORT_CD,     -- 14번" ).append("\n"); 
		query.append("                              '' VPS_ETD_DT,  -- 15번" ).append("\n"); 
		query.append("                              0 ALLOC_TEU,    -- 16번" ).append("\n"); 
		query.append("                              0  ALLOC_WT,    -- 17번" ).append("\n"); 
		query.append("                              0  ACTU_WT,     -- 19번" ).append("\n"); 
		query.append("                              0 AK_VOID,      -- 22번" ).append("\n"); 
		query.append("                              0 FULL_20,      -- 23번" ).append("\n"); 
		query.append("                              0 FULL_20HC,    -- 40번" ).append("\n"); 
		query.append("                              0 FULL_40,      -- 24번" ).append("\n"); 
		query.append("                              0 FULL_40HC,    -- 25번" ).append("\n"); 
		query.append("                              0 FULL_45,      -- 26번" ).append("\n"); 
		query.append("                              0 RF_O,         -- 33번" ).append("\n"); 
		query.append("                              0 RF_I,         -- 34번" ).append("\n"); 
		query.append("                              0 MT_TEU,       -- 35번" ).append("\n"); 
		query.append("                              0 MT_WT,        -- 36번" ).append("\n"); 
		query.append("                              '' REMARK ,                          -- 37번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_TEU_QTY,           -- 37번 팝업 내의 30번" ).append("\n"); 
		query.append("                              0 JO_SHRT_LEG_RMK_WGT,               -- 37번 팝업 내의 31번" ).append("\n"); 
		query.append("                              '' JO_SHRT_LEG_RMK_SCTR_NM,          -- 37번 팝업 내의 32번" ).append("\n"); 
		query.append("                              0 JO_RF_OCN_QTY,                     -- 37번 팝업 내의 33번" ).append("\n"); 
		query.append("                              0 JO_RF_IPT_QTY,                     -- 37번 팝업 내의 34번" ).append("\n"); 
		query.append("                              0 JO_VOID_TEU_QTY,                   -- 37번 팝업 내의 22번" ).append("\n"); 
		query.append("                              MAX(B.JO_ALOC_ADJ_TEU_QTY) JO_ALOC_ADJ_TEU_QTY,              -- 38번 팝업 내의 TEU" ).append("\n"); 
		query.append("                              MAX(B.JO_ALOC_ADJ_WGT) JO_ALOC_ADJ_WGT,                      -- 38번 팝업 내의 WT" ).append("\n"); 
		query.append("                              MAX(B.JO_ALOC_ADJ_RMK)  JO_ALOC_ADJ_RMK                      -- 38번 팝업 내의 REMARK" ).append("\n"); 
		query.append("                  FROM PA H," ).append("\n"); 
		query.append("                       JOO_BZC_AGMT B" ).append("\n"); 
		query.append("                  WHERE 1 = 1" ).append("\n"); 
		query.append("                       AND H.RLANE_CD = B.RLANE_CD" ).append("\n"); 
		query.append("                       AND H.JO_CRR_CD = B.JO_CRR_CD" ).append("\n"); 
		query.append("                       AND H.RE_DIVR_CD = B.RE_DIVR_CD" ).append("\n"); 
		query.append("                       AND B.DELT_FLG = 'N'" ).append("\n"); 
		query.append("                       " ).append("\n"); 
		query.append("                       AND H.JO_REF_NO = B.JO_REF_NO" ).append("\n"); 
		query.append("                GROUP BY H.RE_DIVR_CD, H.JO_CRR_CD, H.VVD" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("        GROUP BY RE_DIVR_CD, JO_CRR_CD, VVD" ).append("\n"); 
		query.append("   )A, PA H" ).append("\n"); 
		query.append("WHERE 1= 1" ).append("\n"); 
		query.append("     AND SUBSTR(A.VVD, 1, 4) = H.VSL_CD" ).append("\n"); 
		query.append("     AND SUBSTR(A.VVD, 5, 4) = H.VOY_NO" ).append("\n"); 
		query.append("     AND SUBSTR(A.VVD, 9, 1) = H.DIR_CD" ).append("\n"); 
		query.append("     AND A.JO_CRR_CD = H.JO_CRR_CD" ).append("\n"); 
		query.append("ORDER BY VPS_ETD_DT, JO_CRR_CD" ).append("\n"); 

	}
}