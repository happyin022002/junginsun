<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ARInvoiceInquiryDBDAOSearchInvoiceIssueTermByDateRSQL">
			<desc><![CDATA[Office code, issue date/Good date 조건으로 조회된 데이타의 issue date와 S/A  date, issue date와 Good date간의 Trem별 현황데이터를 조회해 온다.]]></desc>
			<sql><![CDATA[
SELECT 
#if (${office} == 'A' )
  /*+ LEADING(B) USE_HASH(B A) */
#end
  OFFICE,
  MONTH,
  NVL(DECODE(GROUPING(MONTH), 1, '', DECODE(IO_BND_CD, 'O', 'O/B', 'I', 'I/B')), 'ALL') IO_BND_CD,
  DECODE(SUM(TOTAL_CNT), 0, 0, ROUND(SUM(TOTAL_SUM) / SUM(TOTAL_CNT), 1)) TOTAL_AVERAGE,
  SUM(TOTAL_CNT) TOTAL_CNT,
  DECODE(SUM(BELOW_CNT), 0, 0, ROUND(SUM(BELOW_SUM) / SUM(BELOW_CNT), 1)) BELOW,
  SUM(BELOW_CNT) BELOW_CNT,
  DECODE(SUM(CNT10_0), 0, 0, ROUND(SUM(SUM10_0) / SUM(CNT10_0), 1)) AVERAGE10_0,
  SUM(CNT10_0) CNT10_0,
  DECODE(SUM(CNT0_10), 0, 0, ROUND(SUM(SUM0_10) / SUM(CNT0_10), 1)) AVERAGE0_10,
  SUM(CNT0_10) CNT0_10,
  DECODE(SUM(CNT10_20), 0, 0, ROUND(SUM(SUM10_20) / SUM(CNT10_20), 1)) AVERAGE10_20,
  SUM(CNT10_20) CNT10_20,
  DECODE(SUM(CNT20_30), 0, 0, ROUND(SUM(SUM20_30) / SUM(CNT20_30), 1)) AVERAGE20_30,
  SUM(CNT20_30) CNT20_30,
  DECODE(SUM(CNT30_40), 0, 0, ROUND(SUM(SUM30_40) / SUM(CNT30_40), 1)) AVERAGE30_40,
  SUM(CNT30_40) CNT30_40,
  DECODE(SUM(CNT40_50), 0, 0, ROUND(SUM(SUM40_50) / SUM(CNT40_50), 1)) AVERAGE40_50,
  SUM(CNT40_50) CNT40_50,
  DECODE(SUM(OVER_CNT), 0, 0, ROUND(SUM(OVER_SUM) / SUM(OVER_CNT), 1)) OVER,
  SUM(OVER_CNT) OVER_CNT
FROM (
    SELECT TB.AR_OFC_CD OFFICE,
      SUBSTR(TB.ISS_DT, 1, 6) MONTH,
      TB.IO_BND_CD,
      SUM(TB.CAL_DT) TOTAL_SUM,
      COUNT(TB.INV_NO) TOTAL_CNT,
      SUM(CASE WHEN TB.CAL_DT < -10 THEN TB.CAL_DT ELSE 0 END) BELOW_SUM,
      SUM(CASE WHEN TB.CAL_DT < -10 THEN 1 ELSE 0 END) BELOW_CNT,
      SUM(CASE WHEN -10 <= TB.CAL_DT AND TB.CAL_DT < 0 THEN TB.CAL_DT ELSE 0 END) SUM10_0,
      SUM(CASE WHEN -10 <= TB.CAL_DT AND TB.CAL_DT < 0 THEN 1 ELSE 0 END) CNT10_0,
      SUM(CASE WHEN 0 <= TB.CAL_DT AND TB.CAL_DT < 10 THEN TB.CAL_DT ELSE 0 END) SUM0_10,
      SUM(CASE WHEN 0 <= TB.CAL_DT AND TB.CAL_DT < 10 THEN 1 ELSE 0 END) CNT0_10,
      SUM(CASE WHEN 10 <= TB.CAL_DT AND TB.CAL_DT < 20 THEN TB.CAL_DT ELSE 0 END) SUM10_20,
      SUM(CASE WHEN 10 <= TB.CAL_DT AND TB.CAL_DT < 20 THEN 1 ELSE 0 END) CNT10_20,
      SUM(CASE WHEN 20 <= TB.CAL_DT AND TB.CAL_DT < 30 THEN TB.CAL_DT ELSE 0 END) SUM20_30,
      SUM(CASE WHEN 20 <= TB.CAL_DT AND TB.CAL_DT < 30 THEN 1 ELSE 0 END) CNT20_30,
      SUM(CASE WHEN 30 <= TB.CAL_DT AND TB.CAL_DT < 40 THEN TB.CAL_DT ELSE 0 END) SUM30_40,
      SUM(CASE WHEN 30 <= TB.CAL_DT AND TB.CAL_DT < 40 THEN 1 ELSE 0 END) CNT30_40,
      SUM(CASE WHEN 40 <= TB.CAL_DT AND TB.CAL_DT < 50 THEN TB.CAL_DT ELSE 0 END) SUM40_50,
      SUM(CASE WHEN 40 <= TB.CAL_DT AND TB.CAL_DT < 50 THEN 1 ELSE 0 END) CNT40_50,
      SUM(CASE WHEN 50 <= TB.CAL_DT THEN TB.CAL_DT ELSE 0 END) OVER_SUM,
      SUM(CASE WHEN 50 <= TB.CAL_DT THEN 1 ELSE 0 END) OVER_CNT
    FROM (
        SELECT A.AR_IF_NO,
          C.INV_NO,
          A.AR_OFC_CD,
          A.IO_BND_CD,
          C.ISS_DT,
#if (${date_option} == 'S')
          TO_DATE(C.ISS_DT, 'YYYYMMDD') - TO_DATE(A.SAIL_ARR_DT, 'YYYYMMDD') CAL_DT
#else
          TO_DATE(C.ISS_DT, 'YYYYMMDD') - TO_DATE(A.BL_INV_CFM_DT, 'YYYYMMDD') CAL_DT
#end
        FROM INV_AR_MN A,
          INV_AR_ISS C
        WHERE A.AR_IF_NO = (
            SELECT SUBSTR(MAX(DECODE(K.REV_TP_CD, 'M', '1', '2')||B.AR_IF_NO), 2,11)
            FROM INV_AR_ISS_DTL B,
              INV_AR_MN K
            WHERE B.INV_NO = C.INV_NO
              AND B.AR_IF_NO = K.AR_IF_NO)
#if (${office} != 'A' )
          AND A.AR_OFC_CD = @[office]
          AND C.ISS_DT BETWEEN REPLACE(@[from_date], '-', '') AND REPLACE(@[to_date], '-', '')
          AND C.ISS_OFC_CD IN (
            SELECT OFC_CD
            FROM MDM_ORGANIZATION
            WHERE AR_OFC_CD = @[office] )
#else
          AND A.AR_OFC_CD IN (
            SELECT OFC_CD
            FROM MDM_ORGANIZATION
            WHERE AR_HD_QTR_OFC_CD = (
                SELECT  AR_HD_QTR_OFC_CD
                FROM    MDM_ORGANIZATION
                WHERE   OFC_CD = (
                    SELECT  AR_OFC_CD
                    FROM    MDM_ORGANIZATION
                    WHERE   OFC_CD = @[login_ofc_cd] ) )
                  AND     OFC_CD = AR_OFC_CD )
          AND C.ISS_DT BETWEEN REPLACE(@[from_date], '-', '') AND REPLACE(@[to_date], '-', '')
          AND C.ISS_OFC_CD IN (
            SELECT OFC_CD
            FROM MDM_ORGANIZATION
            WHERE AR_HD_QTR_OFC_CD = (
                SELECT AR_HD_QTR_OFC_CD
                FROM MDM_ORGANIZATION
                WHERE OFC_CD = (
                    SELECT AR_OFC_CD
                    FROM MDM_ORGANIZATION
                    WHERE OFC_CD = @[login_ofc_cd] ) )
              AND OFC_CD = AR_OFC_CD )
#end
          AND NVL(A.INV_DELT_DIV_CD, 'N') <> 'Y'
#if (${act_cust_cnt_cd} != '')
          AND A.ACT_CUST_CNT_CD = @[act_cust_cnt_cd]
#end
#if (${act_cust_seq} != '')
          AND A.ACT_CUST_SEQ = @[act_cust_seq]
#end
#if (${rev_tp_cd} != 'A')
          AND A.REV_TP_CD = @[rev_tp_cd]
#end
           ) TB
#if (${office} != 'A' )
    WHERE TB.CAL_DT IS NOT NULL
    GROUP BY TB.AR_OFC_CD, SUBSTR(TB.ISS_DT, 1, 6), TB.IO_BND_CD )
#else
    WHERE TB.CAL_DT IS NOT NULL
    GROUP BY TB.AR_OFC_CD, SUBSTR(TB.ISS_DT, 1, 6), TB.IO_BND_CD ) A,
  (
    SELECT OFC_CD,
      ROWNUM
    FROM MDM_ORGANIZATION
    WHERE AR_HD_QTR_OFC_CD = (
        SELECT AR_HD_QTR_OFC_CD
        FROM MDM_ORGANIZATION
        WHERE OFC_CD = (
            SELECT AR_OFC_CD
            FROM MDM_ORGANIZATION
            WHERE OFC_CD = @[login_ofc_cd] ) )
      AND OFC_CD = AR_OFC_CD ) B
WHERE A.OFFICE = B.OFC_CD
#end
GROUP BY ROLLUP (OFFICE, MONTH, IO_BND_CD)
ORDER BY OFFICE, MONTH, DECODE(IO_BND_CD, 'O/B', 1, 'I/B', 2)			]]></sql>
			<params>
				<param name="office" type="12" value="" out="N"/>
				<param name="from_date" type="12" value="" out="N"/>
				<param name="to_date" type="12" value="" out="N"/>
				<param name="login_ofc_cd" type="12" value="" out="N"/>
				<param name="act_cust_cnt_cd" type="12" value="" out="N"/>
				<param name="act_cust_seq" type="12" value="" out="N"/>
				<param name="rev_tp_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
