<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="JointOperationAccrualCreationDBDAOSearchEstmPerformanceChangeStatusAdjRSQL">
			<desc><![CDATA[Estimate Performance Change Status Inquiry]]></desc>
			<sql><![CDATA[
WITH ESTM AS (
SELECT 
	  EXE_YRMON
	, REV_YRMON
	, JO_CRR_CD
	, VVD
	, RLANE_CD
	, JO_STL_JB_CD
	, ACCT_CD
	, ESTM1_BSA_QTY
	, ESTM1_BSA_SLT_PRC
	, ESTM1_AMT
	, ESTM2_BSA_QTY
	, ESTM2_BSA_SLT_PRC
	, ESTM2_AMT
	, CAL_AMT
	, CHANGE_ITEM
	, ADJ_ESTM1_BSA_QTY
	, ADJ_ESTM1_BSA_SLT_PRC
	, ADJ_ESTM1_AMT
	, ADJ_ESTM2_BSA_QTY
	, ADJ_ESTM2_BSA_SLT_PRC
	, ADJ_ESTM2_AMT
	, ADJ_CAL_AMT
	, ADJ_CHANGE_ITEM
	, ESTM_OPTION
	, ADJ_RMK
	, JB_EXE_YRMON
FROM (
		SELECT 
			  A.EXE_YRMON
			, A.REV_YRMON
			, A.JO_CRR_CD
			, A.VVD
			, A.RLANE_CD
			, DECODE(A.JO_STL_JB_CD, '101', 'JOINT OPERATION', '102', 'LEASE', '103', 'ADDITIONAL') JO_STL_JB_CD
			, A.ACCT_CD
			, A.BSA_QTY ESTM1_BSA_QTY
			, A.BSA_SLT_PRC ESTM1_BSA_SLT_PRC
			, ROUND(A.ESTM_AMT, 2) ESTM1_AMT
			, B.BSA_QTY ESTM2_BSA_QTY
			, B.BSA_SLT_PRC ESTM2_BSA_SLT_PRC
			, ROUND(B.ESTM_AMT, 2) ESTM2_AMT
			, NVL(ROUND(B.ESTM_AMT, 2), 0) - NVL(ROUND(A.ESTM_AMT, 2), 0)  CAL_AMT
			, A.ADJ_BSA_QTY ADJ_ESTM1_BSA_QTY
			, A.ADJ_BSA_SLT_PRC ADJ_ESTM1_BSA_SLT_PRC
			, ROUND(A.ADJ_ESTM_AMT, 2) ADJ_ESTM1_AMT
			, B.ADJ_BSA_QTY ADJ_ESTM2_BSA_QTY
			, B.ADJ_BSA_SLT_PRC ADJ_ESTM2_BSA_SLT_PRC
			, ROUND(B.ADJ_ESTM_AMT, 2) ADJ_ESTM2_AMT
			, NVL(ROUND(B.ADJ_ESTM_AMT, 2), 0) - NVL(ROUND(A.ADJ_ESTM_AMT, 2), 0)  ADJ_CAL_AMT
			, CASE WHEN A.BSA_QTY = B.BSA_QTY  AND A.BSA_SLT_PRC <> B.BSA_SLT_PRC  THEN 'Price'
                        WHEN A.BSA_QTY <> B.BSA_QTY  AND A.BSA_SLT_PRC = B.BSA_SLT_PRC  THEN 'BSA'
                        WHEN A.BSA_QTY <> B.BSA_QTY  AND A.BSA_SLT_PRC <> B.BSA_SLT_PRC  THEN 'BSA, Price'
                        WHEN  NVL(B.BSA_QTY, 0) = 0    THEN 'C, V, BT'
              END CHANGE_ITEM 
			, CASE WHEN A.ADJ_BSA_QTY = B.ADJ_BSA_QTY  AND A.ADJ_BSA_SLT_PRC <> B.ADJ_BSA_SLT_PRC  THEN 'Price'
                        WHEN A.ADJ_BSA_QTY <> B.ADJ_BSA_QTY  AND A.ADJ_BSA_SLT_PRC = B.ADJ_BSA_SLT_PRC  THEN 'BSA'
                        WHEN A.ADJ_BSA_QTY <> B.ADJ_BSA_QTY  AND A.ADJ_BSA_SLT_PRC <> B.ADJ_BSA_SLT_PRC  THEN 'BSA, Price'
                        WHEN  NVL(B.ADJ_BSA_QTY, 0) = 0  AND NVL(A.ADJ_BSA_QTY, 0) <> 0 THEN 'C, V, BT'
              END ADJ_CHANGE_ITEM 
			, DECODE(@[estm_option],'0','INI', '1','ADJ') ESTM_OPTION
			, REPLACE(@[rev_yrmon],'-','') JB_EXE_YRMON
			,(SELECT L.ADJ_RMK
               FROM JOO_ESTM_ACT_RSLT_ANAL L 
               WHERE L.EXE_YRMON		= REPLACE(@[exe_yrmon],'-','')
               AND  L.JB_EXE_YRMON		= REPLACE(@[rev_yrmon],'-','')
			#if (${estm_option} != '')
				AND  L.JO_ESTM_ANAL_ID	= DECODE(@[estm_option],'0','INI', '1','ADJ')	-- Initial Estimate(INI), Adjusted Estimate(ADJ)
			#else
				AND  L.JO_ESTM_ANAL_ID	= 'INI'	-- Initial Estimate(INI), Adjusted Estimate(ADJ)
			#end
               AND  A.REV_YRMON			= L.REV_YRMON
               AND  A.JO_CRR_CD			= L.JO_CRR_CD
               AND  A.VVD				= L.VSL_CD||L.SKD_VOY_NO||L.SKD_DIR_CD||L.REV_DIR_CD
               AND  A.RLANE_CD			= L.RLANE_CD
               AND  A.JO_STL_JB_CD		= L.JO_STL_JB_CD
               AND  A.ACCT_CD			= L.ACCT_CD
              ) ADJ_RMK
FROM
      ( SELECT 	  T.EXE_YRMON
				, T.REV_YRMON
				, T.JO_CRR_CD
				, T.VSL_CD||T.SKD_VOY_NO||T.SKD_DIR_CD||T.REV_DIR_CD VVD
				, T.RLANE_CD
				, T.ACCT_CD
				, T.JO_STL_JB_CD
				, T.BSA_QTY
				, T.BSA_SLT_PRC
                , T.ESTM_AMT	
				, T.ADJ_BSA_QTY
				, T.ADJ_BSA_SLT_PRC
                , T.ACT_AMT + T.ADJ_ACCL_AMT AS ADJ_ESTM_AMT  --Actual + Adj. Accrual Cost		
        FROM JOO_ESTM_ACT_RSLT T
        WHERE 1 = 1
        AND T.EXE_YRMON	= REPLACE(@[exe_yrmon],'-','')	-- FROM 년월		-- exe_yrmon
		#if (${rev_yrmon_fr} == ${rev_yrmon_to})
        AND T.REV_YRMON	= REPLACE(@[rev_yrmon_fr],'-','')
		#else
        AND T.REV_YRMON	BETWEEN REPLACE(@[rev_yrmon_fr],'-','') AND  REPLACE(@[rev_yrmon_to],'-','')
		#end
		#if (${re_divr_cd} != 'A')
		AND T.ACCT_CD = DECODE(@[re_divr_cd],'R','411221','E','510921')	-- Rev/Exp
		#else
		AND T.ACCT_CD IN ('510921', '411221')	-- Rev/Exp
		#end
      )  A,
      ( SELECT 	  T.EXE_YRMON
				, T.REV_YRMON
				, T.JO_CRR_CD
				, T.VSL_CD||T.SKD_VOY_NO||T.SKD_DIR_CD||T.REV_DIR_CD VVD
				, T.RLANE_CD
				, T.ACCT_CD
				, T.JO_STL_JB_CD
				, T.BSA_QTY
				, T.BSA_SLT_PRC
				, T.ESTM_AMT
				, T.ADJ_BSA_QTY
				, T.ADJ_BSA_SLT_PRC
                , T.ACT_AMT + T.ADJ_ACCL_AMT AS ADJ_ESTM_AMT  --Actual + Adj. Accrual Cost		
        FROM JOO_ESTM_ACT_RSLT T
        WHERE 1 = 1
        AND T.EXE_YRMON	= REPLACE(@[rev_yrmon],'-','')	-- TO 년월	-- rev_yrmon
		#if (${rev_yrmon_fr} == ${rev_yrmon_to})
        AND T.REV_YRMON	= REPLACE(@[rev_yrmon_fr],'-','')
		#else
        AND T.REV_YRMON	BETWEEN REPLACE(@[rev_yrmon_fr],'-','') AND  REPLACE(@[rev_yrmon_to],'-','')
		#end
		#if (${re_divr_cd} != 'A')
		AND T.ACCT_CD = DECODE(@[re_divr_cd],'R','411221','E','510921')	-- Rev/Exp
		#else
		AND T.ACCT_CD IN ('510921', '411221')	-- Rev/Exp
		#end
      )  B
	  , MDM_REV_LANE M
	  WHERE 1 = 1
		AND A.REV_YRMON		=  B.REV_YRMON (+)
		#if (${jo_crr_cd} != '')
		AND A.JO_CRR_CD		=  @[jo_crr_cd]
		#end
		AND A.JO_CRR_CD		=  B.JO_CRR_CD (+)
		#if (${vvd} != '')
		AND A.VVD			LIKE @[vvd]||'%'
		#end
		AND A.VVD			=  B.VVD (+)
		AND A.ACCT_CD		=  B.ACCT_CD (+)
		#if (${jo_stl_jb_cd} != '')
		AND A.JO_STL_JB_CD = @[jo_stl_jb_cd]
		#end
		AND A.JO_STL_JB_CD	=  B.JO_STL_JB_CD (+)
		#if (${rlane_cd} != '')
		AND A.RLANE_CD  = @[rlane_cd]
		#end	
		AND A.RLANE_CD		=  B.RLANE_CD (+)
		AND M.RLANE_CD		=  A.RLANE_CD	-- Lane
		#if (${trd_cd} != '')
		AND M.REP_TRD_CD    = @[trd_cd]	-- Trade
		#end
		UNION ALL
		SELECT 	  A.EXE_YRMON
				, A.REV_YRMON
				, A.JO_CRR_CD
				, A.VVD
				, A.RLANE_CD
				, DECODE(A.JO_STL_JB_CD, '101', 'JOINT OPERATION', '102', 'LEASE', '103', 'ADDITIONAL') JO_STL_JB_CD
				, A.ACCT_CD
				, B.BSA_QTY ESTM1_BSA_QTY
				, B.BSA_SLT_PRC ESTM1_BSA_SLT_PRC
				, ROUND(B.ESTM_AMT, 2) ESTM1_AMT
				, A.BSA_QTY ESTM2_BSA_QTY
				, A.BSA_SLT_PRC ESTM2_BSA_SLT_PRC
				, ROUND(A.ESTM_AMT, 2) ESTM2_AMT
				, NVL(ROUND(A.ESTM_AMT, 2), 0) - NVL(ROUND(B.ESTM_AMT, 2), 0)  CAL_AMT
				, B.ADJ_BSA_QTY ADJ_ESTM1_BSA_QTY
				, B.ADJ_BSA_SLT_PRC ADJ_ESTM1_BSA_SLT_PRC
				, ROUND(B.ADJ_ESTM_AMT, 2) ADJ_ESTM1_AMT
				, A.ADJ_BSA_QTY ADJ_ESTM2_BSA_QTY
				, A.ADJ_BSA_SLT_PRC ADJ_ESTM2_BSA_SLT_PRC
				, ROUND(A.ADJ_ESTM_AMT, 2) ADJ_ESTM2_AMT, NVL(ROUND(A.ADJ_ESTM_AMT, 2), 0) - NVL(ROUND(B.ADJ_ESTM_AMT, 2), 0) ADJ_CAL_AMT,
              CASE WHEN NVL(B.BSA_QTY, 0) = 0    THEN 'C, V, BT'
              END CHANGE_ITEM, 
              CASE WHEN NVL(B.ADJ_BSA_QTY, 0) = 0 AND NVL(A.ADJ_BSA_QTY, 0) <> 0   THEN 'C, V, BT'
              END ADJ_CHANGE_ITEM, 
			  DECODE(@[estm_option],'0','INI', '1','ADJ') ESTM_OPTION , REPLACE(@[rev_yrmon],'-','') JB_EXE_YRMON,
              (SELECT L.ADJ_RMK
               FROM JOO_ESTM_ACT_RSLT_ANAL L 
               WHERE L.EXE_YRMON		= REPLACE(@[exe_yrmon],'-','')
               AND  L.JB_EXE_YRMON		= REPLACE(@[rev_yrmon],'-','')
			#if (${estm_option} != '')
				AND  L.JO_ESTM_ANAL_ID	= DECODE(@[estm_option],'0','INI', '1','ADJ')	-- Initial Estimate(INI), Adjusted Estimate(ADJ)
			#else
				AND  L.JO_ESTM_ANAL_ID	= 'INI'	-- Initial Estimate(INI), Adjusted Estimate(ADJ)
			#end
               AND  A.REV_YRMON			= L.REV_YRMON
               AND  A.JO_CRR_CD			= L.JO_CRR_CD
               AND  A.VVD				= L.VSL_CD||L.SKD_VOY_NO||L.SKD_DIR_CD||L.REV_DIR_CD
               AND  A.RLANE_CD			= L.RLANE_CD
               AND  A.JO_STL_JB_CD		= L.JO_STL_JB_CD
               AND  A.ACCT_CD			= L.ACCT_CD
              ) ADJ_RMK 
FROM
      ( SELECT 	  
				T.EXE_YRMON
			  , T.REV_YRMON
			  , T.JO_CRR_CD
			  , T.VSL_CD||T.SKD_VOY_NO||T.SKD_DIR_CD||T.REV_DIR_CD VVD
			  , T.RLANE_CD
			  , T.ACCT_CD
			  , T.JO_STL_JB_CD
			  , T.BSA_QTY
			  , T.BSA_SLT_PRC
			  , T.ESTM_AMT
			  , T.ADJ_BSA_QTY
			  , T.ADJ_BSA_SLT_PRC
              , T.ACT_AMT + T.ADJ_ACCL_AMT AS ADJ_ESTM_AMT  --Actual + Adj. Accrual Cost		
        FROM JOO_ESTM_ACT_RSLT T
        WHERE 1 = 1
        AND T.EXE_YRMON	= REPLACE(@[rev_yrmon],'-','')	-- TO 년월	-- rev_yrmon
		#if (${rev_yrmon_fr} == ${rev_yrmon_to})
        AND T.REV_YRMON	= REPLACE(@[rev_yrmon_fr],'-','')
		#else
        AND T.REV_YRMON	BETWEEN REPLACE(@[rev_yrmon_fr],'-','') AND  REPLACE(@[rev_yrmon_to],'-','')
		#end
		#if (${re_divr_cd} != 'A')
		AND T.ACCT_CD = DECODE(@[re_divr_cd],'R','411221','E','510921')	-- Rev/Exp
		#else
		AND T.ACCT_CD IN ('510921', '411221')	-- Rev/Exp
		#end
      )  A,
      ( SELECT 
				T.EXE_YRMON
			  , T.REV_YRMON
			  , T.JO_CRR_CD
			  , T.VSL_CD||T.SKD_VOY_NO||T.SKD_DIR_CD||T.REV_DIR_CD VVD
			  , T.RLANE_CD
			  , T.ACCT_CD
			  , T.JO_STL_JB_CD
			  , T.BSA_QTY
			  , T.BSA_SLT_PRC
			  , T.ESTM_AMT
			  , T.ADJ_BSA_QTY
			  , T.ADJ_BSA_SLT_PRC
              , T.ACT_AMT + T.ADJ_ACCL_AMT AS ADJ_ESTM_AMT  --Actual + Adj. Accrual Cost		
        FROM JOO_ESTM_ACT_RSLT T
        WHERE 1 = 1
        AND T.EXE_YRMON	= REPLACE(@[exe_yrmon],'-','')	-- FROM 년월		-- exe_yrmon
		#if (${rev_yrmon_fr} == ${rev_yrmon_to})
        AND T.REV_YRMON	= REPLACE(@[rev_yrmon_fr],'-','')
		#else
        AND T.REV_YRMON	BETWEEN REPLACE(@[rev_yrmon_fr],'-','') AND  REPLACE(@[rev_yrmon_to],'-','')
		#end
		#if (${re_divr_cd} != 'A')
		AND T.ACCT_CD = DECODE(@[re_divr_cd],'R','411221','E','510921')	-- Rev/Exp
		#else
		AND T.ACCT_CD IN ('510921', '411221')	-- Rev/Exp
		#end
      )  B
	  , MDM_REV_LANE M
	  WHERE 1 = 1
	  	AND A.REV_YRMON		=  B.REV_YRMON (+)
		#if (${jo_crr_cd} != '')
		AND A.JO_CRR_CD		=  @[jo_crr_cd]
		#end
		AND A.JO_CRR_CD		=  B.JO_CRR_CD (+)
		#if (${vvd} != '')
		AND A.VVD			LIKE @[vvd]||'%'
		#end
		AND A.VVD			=  B.VVD (+)
		AND A.ACCT_CD		=  B.ACCT_CD (+)
		#if (${jo_stl_jb_cd} != '')
		AND A.JO_STL_JB_CD = @[jo_stl_jb_cd]
		#end
		AND A.JO_STL_JB_CD	=  B.JO_STL_JB_CD (+)
		#if (${rlane_cd} != '')
		AND A.RLANE_CD  = @[rlane_cd]
		#end
		AND A.RLANE_CD		=  B.RLANE_CD (+)
		AND NVL(B.BSA_QTY  , 0)	= 0
		AND M.RLANE_CD		=  A.RLANE_CD	-- Lane
		#if (${trd_cd} != '')
		AND M.REP_TRD_CD    = @[trd_cd]	-- Trade
		#end
	)
	#if(${changed_option} == 'Y')
		#if(${estm_option} == '0')
			WHERE CHANGE_ITEM IS NOT NULL
		#else
			WHERE ADJ_CHANGE_ITEM IS NOT NULL
		#end
	#end
)
SELECT DISTINCT  
	  REV_YRMON
	, JO_CRR_CD
	, VVD
	, RLANE_CD
	, JO_STL_JB_CD
	, ACCT_CD
	, ESTM1_BSA_QTY
	, ESTM1_BSA_SLT_PRC
	, ESTM1_AMT
	, ESTM2_BSA_QTY
	, ESTM2_BSA_SLT_PRC
	, ESTM2_AMT
	, CAL_AMT
--	, CHANGE_ITEM
	, ADJ_ESTM1_BSA_QTY
	, ADJ_ESTM1_BSA_SLT_PRC
	, ADJ_ESTM1_AMT
	, ADJ_ESTM2_BSA_QTY
	, ADJ_ESTM2_BSA_SLT_PRC
	, ADJ_ESTM2_AMT
	, ADJ_CAL_AMT
--	, ADJ_CHANGE_ITEM
	, ESTM_OPTION
	, ADJ_RMK
	, JB_EXE_YRMON
FROM ESTM E
ORDER BY REV_YRMON, JO_CRR_CD, VVD, RLANE_CD, ACCT_CD			]]></sql>
			<params>
				<param name="estm_option" type="12" value="" out="N"/>
				<param name="rev_yrmon" type="12" value="" out="N"/>
				<param name="exe_yrmon" type="12" value="" out="N"/>
				<param name="rev_yrmon_fr" type="12" value="" out="N"/>
				<param name="rev_yrmon_to" type="12" value="" out="N"/>
				<param name="re_divr_cd" type="12" value="" out="N"/>
				<param name="jo_crr_cd" type="12" value="" out="N"/>
				<param name="vvd" type="12" value="" out="N"/>
				<param name="jo_stl_jb_cd" type="12" value="" out="N"/>
				<param name="rlane_cd" type="12" value="" out="N"/>
				<param name="trd_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
