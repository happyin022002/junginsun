<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="CarrierSettlementProcessDBDAOSearchTDRDownloadSumListByLaneRSQL">
			<desc><![CDATA[History --------------------------------------------------------
1. 2012.05.11 김창헌 [CHM-201217413-01]
                   [ALPS JOO] TDR Inquiry by VVD 및 RDR Inquiry by Lane
                   - Sum 기능 추가, 정렬순서 및 표시형식 변경
2. 2012.06.19 김상근 [CHM-201218380]
                  [ALPS JOO] TDR Inquiry by VVD : Additional Slot 칼럼 및 Sub Alloc and Ratio
3. [2013.01.07] Ticket No  : CHM-201322276
   개발자 : 이수진
   Ticket Title : [ALPS JOO] 모델링 표준에 맞게 처리 되도록 테이블 칼럼 변경 작업 및 기능 변경
   Description  :  JO_REP_CRR_CD_FLG => JO_REP_CRR_FLG으로 컬럼명 변경 작업]]></desc>
			<sql><![CDATA[
WITH VSL AS (SELECT VSL_CD,
                    SKD_VOY_NO,
                    SKD_DIR_CD,
                    VPS_PORT_CD,
                    CLPT_IND_SEQ,
                    VPS_ETA_DT,
                    VPS_ETD_DT,
                    SLAN_CD,
                    YD_CD
               FROM VSK_VSL_PORT_SKD
              WHERE SLAN_CD LIKE @[rlane_cd] || '%'
                AND ( (VPS_ETD_DT BETWEEN TO_DATE (REPLACE (@[pre_fr], '-', ''), 'YYYYMMDD')
                                      AND TO_DATE (REPLACE (@[pre_to], '-', ''), 'YYYYMMDD') + 0.99999) OR VPS_ETD_DT IS NULL )
                AND TURN_PORT_IND_CD NOT IN ('D', 'V', 'F')
            )

 , SRC AS (

SELECT OPR_CD,
       VSL_CD || VOY_NO || DIR_CD VVD,
       VSL_CD,
       VOY_NO  SKD_VOY_NO,
       DIR_CD  SKD_DIR_CD,
       PORT_CD  VPS_PORT_CD,
       SLAN_CD,
       VPS_ETD_DT,
       CASE 
            WHEN NVL(SUM (ALL_TEU), 0) <>  0 THEN 
                 NVL(SUM (ALL_TEU), 0)
            ELSE
               (
	       /* ALLOCATION  - TEU : SPC Info Inquiry by VVD */
                   SELECT NVL(MAX(D.CRR_BSA_CAPA), 0)  ALL_TEU
                      FROM BSA_VVD_OTR_CRR D
                   WHERE D.BSA_OP_JB_CD = '007'    
                     AND Y.VSL_CD = D.VSL_CD
                     AND Y.VOY_NO = D.SKD_VOY_NO
                     AND Y.DIR_CD = D.SKD_DIR_CD
                     AND Y.OPR_CD = D.CRR_CD 
                     AND Y.SLAN_CD  =  SUBSTR(D.RLANE_CD, 1, 3)
            )
       END ALL_TEU,
       --SUM (ALL_WGT) ALL_WGT,
         CASE 
            WHEN NVL(SUM (ALL_WGT), 0) <>  0 THEN 
                 NVL(SUM (ALL_WGT), 0)
            ELSE
               (   /* ALLOCATION  - WGT : SPC Info Inquiry by VVD */
                   SELECT NVL(MAX(D.CRR_BSA_CAPA), 0) ALL_WGT  
                     FROM BSA_VVD_OTR_CRR D
                   WHERE D.BSA_OP_JB_CD = '008'    
                     AND Y.VSL_CD = D.VSL_CD
                     AND Y.VOY_NO = D.SKD_VOY_NO
                     AND Y.DIR_CD = D.SKD_DIR_CD
                     AND Y.OPR_CD = D.CRR_CD
                     AND Y.SLAN_CD  =  SUBSTR(D.RLANE_CD, 1, 3)
            )
       END ALL_WGT,
       CASE 
            WHEN NVL(MAX (ALL_WGT), 0) <>  0 THEN 
                 1
            ELSE
                 2
       END SUB_CHK,
       SUM (GRAND_TTL_SLOT) GRAND_TTL_SLOT,
       SUM (GRAND_TTL_WGT) GRAND_TTL_WGT,
       CASE
          WHEN SUM (GRAND_TTL_SLOT) > SUM (ALL_TEU) THEN
             SUM (GRAND_TTL_SLOT) - SUM (ALL_TEU)
          ELSE 0
       END OVER_SLOT,
       CASE
          WHEN SUM (GRAND_TTL_WGT) > SUM (ALL_WGT) THEN
             SUM (GRAND_TTL_WGT) - SUM (ALL_WGT)
          ELSE 0
       END OVER_WGT,
       SUM (HC_LD_20) HC_LD_20,
       SUM (HC_BSA_20) HC_BSA_20,
       SUM (HC_LD_40) HC_LD_40,
       SUM (HC_BSA_40) HC_BSA_40,
       SUM (HC_LD_45) HC_LD_45,
       SUM (HC_BSA_45) HC_BSA_45,
       SUM (AK_UNIT) AK_UNIT,
       SUM (AK_VOID) AK_VOID,
       SUM (DG_20) DG_20,
       SUM (DG_40) DG_40,
       SUM (RF_20_QTY) RF_20_QTY,
       SUM (RF_40_QTY) RF_40_QTY,
       SUM (MT_TEU) MT_TEU,
       SUM (FULL_20) FULL_20,
       SUM (MT_20) MT_20,
       SUM (FULL_40) FULL_40,
       SUM (MT_40) MT_40,
       SUM (MT_WT) MT_WT,
       'IST'  SOURCE
FROM
    (
               /* ALLOCATION  - TEU : Port Step Up/Down by VVD */
                SELECT NVL(B.CRR_CD, 'ZZZ') OPR_CD,
                       B.VSL_CD,
                       B.SKD_VOY_NO VOY_NO,
                       B.SKD_DIR_CD DIR_CD,
                       DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.PORT_CD)  PORT_CD,
                       K.SLAN_CD,
                       TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI') VPS_ETD_DT,
                       MAX(DECODE(B.BSA_OP_JB_CD, '007', B.PORT_BSA_CAPA)) ALL_TEU,
                       ROUND(MAX(DECODE(B.BSA_OP_JB_CD, '016', B.PORT_BSA_CAPA)), 1) ALL_WGT,
                       0 GRAND_TTL_SLOT,
                       0 GRAND_TTL_WGT,
                       0 OVER_SLOT,
                       0 OVER_WGT,
                       0 HC_LD_20,
                       0 HC_BSA_20,
                       0 HC_LD_40,
                       0 HC_BSA_40,
                       0 HC_LD_45,
                       0 HC_BSA_45,
                       0 AK_UNIT,
                       0 AK_VOID,
                       0 DG_20,
                       0 DG_40,
                       0 RF_20_QTY,
                       0 RF_40_QTY,
                       0 MT_TEU,
                       0 FULL_20,
                       0 MT_20,
                       0 FULL_40,
                       0 MT_40,
                       0 MT_WT
                  FROM BSA_VVD_PORT_DWN B,
                       VSL K
                 WHERE ( (K.VPS_ETD_DT BETWEEN TO_DATE (REPLACE (@[pre_fr], '-', ''), 'YYYYMMDD')
                                           AND TO_DATE (REPLACE (@[pre_to], '-', ''), 'YYYYMMDD') + 0.99999) OR K.VPS_ETD_DT IS NULL)
                   AND K.VSL_CD = B.VSL_CD
                   AND K.SKD_VOY_NO = B.SKD_VOY_NO
                   AND K.SKD_DIR_CD = B.SKD_DIR_CD
                   AND K.VPS_PORT_CD = B.PORT_CD
                   AND K.CLPT_IND_SEQ = 1
                   AND B.BSA_OP_JB_CD IN ('007','016')
                   AND B.PORT_SEQ     <> 999
                   AND K.SLAN_CD LIKE @[rlane_cd] || '%'
                   AND K.SKD_DIR_CD LIKE @[skd_dir_cd] || '%'
                   AND K.SLAN_CD  =  SUBSTR(B.RLANE_CD, 1, 3)
#if (${vvd} != '')
                   AND B.VSL_CD || B.SKD_VOY_NO || B.SKD_DIR_CD LIKE @[vvd] || '%'
#end

#if (${opr_cd} != '')
                   AND B.CRR_CD IN (${opr_cd})
#end
                   AND EXISTS (SELECT 'A'
                                 FROM BAY_PLAN
                                WHERE VSL_CD = K.VSL_CD
                                  AND VOY_NO = K.SKD_VOY_NO
                                  AND DIR_CD = K.SKD_DIR_CD
                                  AND OPR_CD = B.CRR_CD
                                  AND PORT_CD =B.PORT_CD
                                  AND CALL_IND = K.CLPT_IND_SEQ ) 
                 GROUP BY B.CRR_CD,
                          B.VSL_CD,
                          B.SKD_VOY_NO,
                          B.SKD_DIR_CD,
                          DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.PORT_CD),
                          K.SLAN_CD,
                          TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI')

                UNION ALL


               /* 20HC, 40HC, 45HC, F20, E20, F40, E40 */
                SELECT NVL(B.OPR_CD, 'ZZZ') OPR_CD,
                       B.VSL_CD,
                       B.VOY_NO,
                       B.DIR_CD,
                       DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.PORT_CD)  PORT_CD,
                       K.SLAN_CD,
                       TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI') VPS_ETD_DT,
                       0 ALL_TEU,
                       0 ALL_WGT,
                       0 GRAND_TTL_SLOT,
                       SUM(B.WEIGHT) GRAND_TTL_WGT,
                       0 OVER_SLOT,
                       0 OVER_WGT,
                       SUM (DECODE (B.CNTR_SIZE || B.FE || MOD (B.BAY, 2), 'HF1', 1, 0)) HC_LD_20,
                       SUM (DECODE (B.CNTR_SIZE || B.FE || MOD (B.BAY, 2), 'HE1', 1, 0)) HC_BSA_20,
                       SUM (DECODE (B.CNTR_SIZE || B.FE || MOD (B.BAY, 2), 'HF0', 1, 0)) HC_LD_40,
                       SUM (DECODE (B.CNTR_SIZE || B.FE || MOD (B.BAY, 2), 'HE0', 1, 0)) HC_BSA_40,
                       SUM (DECODE (B.CNTR_SIZE || B.FE, 'LF', 1, 0)) HC_LD_45,
                       SUM (DECODE (B.CNTR_SIZE || B.FE, 'LE', 1, 0)) HC_BSA_45,
                       0 AK_UNIT,
                       0 AK_VOID,
                       0 DG_20,
                       0 DG_40,
                       0 RF_20_QTY,
                       0 RF_40_QTY,
                       0 MT_TEU,
                       SUM (DECODE (B.CNTR_SIZE || B.FE, '2F', 1, 0)) FULL_20,
                       SUM (DECODE (B.CNTR_SIZE || B.FE, '2E', 1, 0)) MT_20,
                       SUM (DECODE (B.CNTR_SIZE || B.FE, '4F', 1, 0)) FULL_40,
                       SUM (DECODE (B.CNTR_SIZE || B.FE, '4E', 1, 0)) MT_40,
                       0 MT_WT
                  FROM BAY_PLAN B,
                       VSL K
                 WHERE ( (K.VPS_ETD_DT BETWEEN TO_DATE (REPLACE (@[pre_fr], '-', ''), 'YYYYMMDD')
                                           AND TO_DATE (REPLACE (@[pre_to], '-', ''), 'YYYYMMDD') + 0.99999) OR K.VPS_ETD_DT IS NULL)
                   AND K.VSL_CD = B.VSL_CD
                   AND K.SKD_VOY_NO = B.VOY_NO
                   AND K.SKD_DIR_CD = B.DIR_CD
                   AND K.VPS_PORT_CD = B.PORT_CD
                   AND K.CLPT_IND_SEQ = B.CALL_IND
                   AND B.PLAN_TYPE= 'F'
                   AND K.SLAN_CD LIKE @[rlane_cd] || '%'
                   AND K.SKD_DIR_CD LIKE @[skd_dir_cd] || '%'
#if (${vvd} != '')
                   AND B.VSL_CD || B.VOY_NO || B.DIR_CD LIKE @[vvd] || '%'
#end

#if (${opr_cd} != '')
                   AND B.OPR_CD IN (${opr_cd})
#end
                 GROUP BY B.OPR_CD,
                          B.VSL_CD,
                          B.VOY_NO,
                          B.DIR_CD,
                           DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.PORT_CD),
                          K.SLAN_CD,
                          TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI')

                UNION ALL

                /* DG20, DG40 */
                SELECT NVL(B.OPR_CD, 'ZZZ') OPR_CD,
                       B.VSL_CD,
                       B.VOY_NO,
                       B.DIR_CD,
                       DECODE(DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL), 'KRPU1', DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL)), DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL)) PORT_CD,
                       K.SLAN_CD,
                       TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI') VPS_ETD_DT,
                       0 ALL_TEU,
                       0 ALL_WGT,
                       0 GRAND_TTL_SLOT,
                       0 GRAND_TTL_WGT,
                       0 OVER_SLOT,
                       0 OVER_WGT,
                       0 HC_LD_20,
                       0 HC_BSA_20,
                       0 HC_LD_40,
                       0 HC_BSA_40,
                       0 HC_LD_45,
                       0 HC_BSA_45,
                       0 AK_UNIT,
                       0 AK_VOID,
                       SUM(DECODE(CNTR_SIZE,'2',1, 'H', DECODE(SUBSTR(SZTP_ISO,0,1), '2', 1, 0), 0))DG_20,
                       SUM(DECODE(CNTR_SIZE,'4',1, 'L', 1, 'W', 1, 'X', 1,'H', DECODE(SUBSTR(SZTP_ISO,0,1), '4', 1, 0), 0) ) DG_40,
                       0 RF_20_QTY,
                       0 RF_40_QTY,
                       0 MT_TEU,
                       0 FULL_20,
                       0 MT_20,
                       0 FULL_40,
                       0 MT_40,
                       0 MT_WT
                  FROM BAY_PLAN B,
                       VSL K
                 WHERE ( (K.VPS_ETD_DT BETWEEN TO_DATE (REPLACE (@[pre_fr], '-', ''), 'YYYYMMDD')
                                           AND TO_DATE (REPLACE (@[pre_to], '-', ''), 'YYYYMMDD') + 0.9999) OR K.VPS_ETD_DT IS NULL)
                   AND K.VSL_CD = B.VSL_CD
                   AND K.SKD_VOY_NO = B.VOY_NO
                   AND K.SKD_DIR_CD = B.DIR_CD
                   AND K.VPS_PORT_CD = B.PORT_CD
                   AND K.CLPT_IND_SEQ = B.CALL_IND
                   AND B.CARGO_TYPE = 'DG'
                   AND B.PLAN_TYPE = 'F'
                   AND DECODE(DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL), 'KRPU1', 'KRPUS', DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL)) = B.PORT_CD 
                   AND DECODE(DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL), 'KRPU1',  'KRPUSYG', 'KRPUS', 'KRPUSHN',  B.PORT_CD)   = DECODE(DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL), 'KRPU1',  K.YD_CD , 'KRPUS', K.YD_CD ,  K.VPS_PORT_CD)
                   AND K.SLAN_CD LIKE @[rlane_cd] || '%'
                   AND K.SKD_DIR_CD LIKE @[skd_dir_cd] || '%'
#if (${vvd} != '')
                   AND B.VSL_CD || B.VOY_NO || B.DIR_CD LIKE @[vvd] || '%'
#end

#if (${opr_cd} != '')
                   AND B.OPR_CD IN (${opr_cd})
#end
                 GROUP BY B.OPR_CD,
                          B.VSL_CD,
                          B.VOY_NO,
                          B.DIR_CD,
                          DECODE(DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL), 'KRPU1', DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL)), DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL)),
                          K.SLAN_CD,
                          TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI')

                UNION ALL

                /* RF20, RF40 */
                SELECT NVL(B.OPR_CD, 'ZZZ') OPR_CD,
                       B.VSL_CD,
                       B.VOY_NO,
                       B.DIR_CD,
                       --DECODE(B.POL, 'KRPU1', DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.POL), B.POL) PORT_CD, //2012.08.08 수정
                       DECODE(DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL), 'KRPU1', DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL)), DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL)) PORT_CD,
                       K.SLAN_CD,
                       TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI') VPS_ETD_DT,
                       0 ALL_TEU,
                       0 ALL_WGT,
                       0 GRAND_TTL_SLOT,
                       0 GRAND_TTL_WGT,
                       0 OVER_SLOT,
                       0 OVER_WGT,
                       0 HC_LD_20,
                       0 HC_BSA_20,
                       0 HC_LD_40,
                       0 HC_BSA_40,
                       0 HC_LD_45,
                       0 HC_BSA_45,
                       0 AK_UNIT,
                       0 AK_VOID,
                       0 DG_20,
                       0 DG_40,
                       SUM (DECODE (MOD (B.BAY, 2), 1, 1)) RF_20_QTY,
                       SUM (DECODE (MOD (B.BAY, 2), 0, 1)) RF_40_QTY,
                       0 MT_TEU,
                       0 FULL_20,
                       0 MT_20,
                       0 FULL_40,
                       0 MT_40,
                       0 MT_WT
                  FROM BAY_PLAN B,
                       VSL K
                 WHERE ( (K.VPS_ETD_DT BETWEEN TO_DATE (REPLACE (@[pre_fr], '-', ''), 'YYYYMMDD')
                                           AND TO_DATE (REPLACE (@[pre_to], '-', ''), 'YYYYMMDD') + 0.9999) OR K.VPS_ETD_DT IS NULL)
                   AND K.VSL_CD = B.VSL_CD
                   AND K.SKD_VOY_NO = B.VOY_NO
                   AND K.SKD_DIR_CD = B.DIR_CD
                   AND K.VPS_PORT_CD = B.PORT_CD
                   AND K.CLPT_IND_SEQ = B.CALL_IND
                   AND (B.CARGO_TYPE = 'RF' OR TEMP IS NOT NULL)
                   AND B.PLAN_TYPE = 'F'
                   --AND DECODE(B.POL, 'KRPU1', 'KRPUS', B.POL) = B.PORT_CD     //2012.08.08 수정
                   AND DECODE(DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL), 'KRPU1', 'KRPUS', DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL)) = B.PORT_CD 
                   --AND DECODE(B.POL, 'KRPU1',  'KRPUSYG', 'KRPUS', 'KRPUSHN',  B.PORT_CD)   = DECODE(B.POL, 'KRPU1',  K.YD_CD , 'KRPUS', K.YD_CD ,  K.VPS_PORT_CD)    //2012.08.08 수정
                   AND DECODE(DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL), 'KRPU1',  'KRPUSYG', 'KRPUS', 'KRPUSHN',  B.PORT_CD)   = DECODE(DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL), 'KRPU1',  K.YD_CD , 'KRPUS', K.YD_CD ,  K.VPS_PORT_CD)
                   AND K.SLAN_CD LIKE @[rlane_cd] || '%'
                   AND K.SKD_DIR_CD LIKE @[skd_dir_cd] || '%'
#if (${vvd} != '')
                   AND B.VSL_CD || B.VOY_NO || B.DIR_CD LIKE @[vvd] || '%'
#end

#if (${opr_cd} != '')
                   AND B.OPR_CD IN (${opr_cd})
#end
                 GROUP BY B.OPR_CD,
                          B.VSL_CD,
                          B.VOY_NO,
                          B.DIR_CD,
                          --DECODE(B.POL, 'KRPU1', DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.POL), B.POL),    //2012.08.08 수정
                          DECODE(DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL), 'KRPU1', DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL)), DECODE(B.POL, 'EGPSE', 'EGPSD', 'CNNGO', 'CNNBO', B.POL)),
                          K.SLAN_CD,
                          TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI')


                UNION ALL


                  /* empty */
                SELECT NVL(B.OPR_CD, 'ZZZ') OPR_CD,
                       B.VSL_CD,
                       B.VOY_NO,
                       B.DIR_CD,
                       DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.PORT_CD)  PORT_CD,
                       K.SLAN_CD,
                       TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI') VPS_ETD_DT,
                       0 ALL_TEU,
                       0 ALL_WGT,
                       0 GRAND_TTL_SLOT,
                       0 GRAND_TTL_WGT,
                       0 OVER_SLOT,
                       0 OVER_WGT,
                       0 HC_LD_20,
                       0 HC_BSA_20,
                       0 HC_LD_40,
                       0 HC_BSA_40,
                       0 HC_LD_45,
                       0 HC_BSA_45,
                       0 AK_UNIT,
                       0 AK_VOID,
                       0 DG_20,
                       0 DG_40,
                       0 RF_20_QTY,
                       0 RF_40_QTY,
                       SUM (DECODE (MOD (B.BAY, 2), 0, 2, 1)) MT_TEU,
                       0 FULL_20,
                       0 MT_20,
                       0 FULL_40,
                       0 MT_40,
                       SUM (B.WEIGHT) MT_WT
                  FROM BAY_PLAN B,
                       VSL K
                 WHERE ( (K.VPS_ETD_DT BETWEEN TO_DATE (REPLACE (@[pre_fr], '-', ''), 'YYYYMMDD')
                                           AND TO_DATE (REPLACE (@[pre_to], '-', ''), 'YYYYMMDD') + 0.99999) OR K.VPS_ETD_DT IS NULL)
                   AND K.VSL_CD = B.VSL_CD
                   AND K.SKD_VOY_NO = B.VOY_NO
                   AND K.SKD_DIR_CD = B.DIR_CD
                   AND K.VPS_PORT_CD = B.PORT_CD
                   AND K.CLPT_IND_SEQ = B.CALL_IND
                   AND B.FE = 'E'
                   AND B.PLAN_TYPE = 'F'
                   AND K.SLAN_CD LIKE @[rlane_cd] || '%'
                   AND K.SKD_DIR_CD LIKE @[skd_dir_cd] || '%'
#if (${vvd} != '')
                   AND B.VSL_CD || B.VOY_NO || B.DIR_CD LIKE @[vvd] || '%'
#end

#if (${opr_cd} != '')
                   AND B.OPR_CD IN (${opr_cd})
#end
                 GROUP BY B.OPR_CD,
                          B.VSL_CD,
                          B.VOY_NO,
                          B.DIR_CD,
                           DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.PORT_CD),
                          K.SLAN_CD,
                          TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI')


                UNION ALL


                /* 'AK' UNIT */
                SELECT NVL(B.OPR_CD, 'ZZZ') OPR_CD,
                       B.VSL_CD,
                       B.VOY_NO,
                       B.DIR_CD,
                       DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.PORT_CD)  PORT_CD,
                       K.SLAN_CD,
                       TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI') VPS_ETD_DT,
                       0 ALL_TEU,
                       0 ALL_WGT,
                       0 GRAND_TTL_SLOT,
                       0 GRAND_TTL_WGT,
                       0 OVER_SLOT,
                       0 OVER_WGT,
                       0 HC_LD_20,
                       0 HC_BSA_20,
                       0 HC_LD_40,
                       0 HC_BSA_40,
                       0 HC_LD_45,
                       0 HC_BSA_45,
                       COUNT (*) AK_UNIT,
                       0 AK_VOID,
                       0 DG_20,
                       0 DG_40,
                       0 RF_20_QTY,
                       0 RF_40_QTY,
                       0 MT_TEU,
                       0 FULL_20,
                       0 MT_20,
                       0 FULL_40,
                       0 MT_40,
                       0 MT_WT
                  FROM BAY_PLAN B,
                       VSL K
                 WHERE ( (K.VPS_ETD_DT BETWEEN TO_DATE (REPLACE (@[pre_fr], '-', ''), 'YYYYMMDD')
                                           AND TO_DATE (REPLACE (@[pre_to], '-', ''), 'YYYYMMDD') + 0.99999) OR K.VPS_ETD_DT IS NULL)
                   AND K.VSL_CD = B.VSL_CD
                   AND K.SKD_VOY_NO = B.VOY_NO
                   AND K.SKD_DIR_CD = B.DIR_CD
                   AND K.VPS_PORT_CD = B.PORT_CD
                   AND K.CLPT_IND_SEQ = B.CALL_IND
                   AND B.CARGO_TYPE IN ('AK', 'BB')
                   AND B.PLAN_TYPE = 'F'
                   AND K.SLAN_CD LIKE @[rlane_cd] || '%'
                   AND K.SKD_DIR_CD LIKE @[skd_dir_cd] || '%'
#if (${vvd} != '')
                   AND B.VSL_CD || B.VOY_NO || B.DIR_CD LIKE @[vvd] || '%'
#end

#if (${opr_cd} != '')
                   AND B.OPR_CD IN (${opr_cd})
#end
                 GROUP BY B.OPR_CD,
                          B.VSL_CD,
                          B.VOY_NO,
                          B.DIR_CD,
                           DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.PORT_CD),
                          K.SLAN_CD,
                          TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI')


                UNION ALL


                /* 'AK' Void */
                SELECT NVL(OPR_CD, 'ZZZ') OPR_CD,
                       VSL_CD,
                       VOY_NO,
                       DIR_CD,
                       PORT_CD,
                       SLAN_CD,
                       VPS_ETD_DT,
                       0 ALL_TEU,
                       0 ALL_WGT,
                       0 GRAND_TTL_SLOT,
                       0 GRAND_TTL_WGT,
                       0 OVER_SLOT,
                       0 OVER_WGT,
                       0 HC_LD_20,
                       0 HC_BSA_20,
                       0 HC_LD_40,
                       0 HC_BSA_40,
                       0 HC_LD_45,
                       0 HC_BSA_45,
                       0 AK_UNIT,
                       SUM (CASE
                            WHEN ACT > 0 THEN
                                        ACT
                                     WHEN X * Y * Z > 0 THEN
                                        (X + 1) * (Y + 1) * (Z + 1) - S
                                     WHEN X * Y > 0 THEN
                                        (X + 1) * (Y + 1) * S - S
                                     WHEN X * Z > 0 THEN
                                        (X + 1) * (Z + 1) - 1 + X * (S - 1)
                                     WHEN Y * Z > 0 THEN
                                        (Y + 1) * (Z + 1) - 1 + Y * (S - 1)
                                     WHEN X + Y > 0 THEN
                                        (X + Y + 1) * S - S
                                     WHEN Z > 0 THEN Z
                                     ELSE 0
                          END) AS AK_VOID,
                       0 DG_20,
                       0 DG_40,
                       0 RF_20_QTY,
                       0 RF_40_QTY,
                       0 MT_TEU,
                       0 FULL_20,
                       0 MT_20,
                       0 FULL_40,
                       0 MT_40,
                       0 MT_WT
                  FROM (SELECT NVL(B.OPR_CD, 'ZZZ') OPR_CD,
                               B.VSL_CD,
                               B.VOY_NO,
                               B.DIR_CD,
                               DECODE(K.YD_CD,  'KRPUSYG',  'KRPU1', B.PORT_CD)  PORT_CD,
                               K.SLAN_CD,
                               TO_CHAR (K.VPS_ETD_DT, 'YYYY-MM-DD HH24:MI') VPS_ETD_DT,
                               NVL (B.OVP_SLOT, 0) + NVL (B.OVS_SLOT, 0) X,
                               NVL (B.OVH_SLOT, 0) Y,
                               NVL (B.OVA_SLOT, 0) + NVL (B.OVF_SLOT, 0) Z,
                               (2 - MOD (B.BAY, 2)) S,
                               TO_NUMBER(ACT_SLOT) ACT
                          FROM BAY_PLAN B,
                               VSL K
                         WHERE ( (K.VPS_ETD_DT BETWEEN TO_DATE (REPLACE (@[pre_fr], '-', ''), 'YYYYMMDD')
                                                   AND TO_DATE (REPLACE (@[pre_to], '-', ''), 'YYYYMMDD') +  1) OR K.VPS_ETD_DT IS NULL)
                           AND K.VSL_CD = B.VSL_CD
                           AND K.SKD_VOY_NO = B.VOY_NO
                           AND K.SKD_DIR_CD = B.DIR_CD
                           AND K.VPS_PORT_CD = B.PORT_CD
                           AND K.CLPT_IND_SEQ = B.CALL_IND
                           AND B.CARGO_TYPE IN ('AK', 'BB')
                           AND B.PLAN_TYPE = 'F'
                           AND K.SLAN_CD LIKE @[rlane_cd] || '%'
                           AND K.SKD_DIR_CD LIKE @[skd_dir_cd] || '%'
#if (${vvd} != '')
                           AND B.VSL_CD || B.VOY_NO || B.DIR_CD LIKE @[vvd] || '%'
#end

#if (${opr_cd} != '')
                           AND B.OPR_CD IN (${opr_cd})
#end
                       )
                 GROUP BY OPR_CD,
                          VSL_CD,
                          VOY_NO,
                          DIR_CD,
                          PORT_CD,
                          SLAN_CD,
                          VPS_ETD_DT
     ) Y
     
GROUP BY OPR_CD,
        VSL_CD,
        VOY_NO,
        DIR_CD,
        PORT_CD,
        SLAN_CD,
        VPS_ETD_DT
)

SELECT  VVD_ETD_GROUP,OPR_CD, VVD,SLAN_CD,VPS_PORT_CD,VPS_ETD_DT, SUB_CHK,
                MAX(VSL_CD) VSL_CD, MAX(SKD_VOY_NO) SKD_VOY_NO, MAX(SKD_DIR_CD) SKD_DIR_CD, MAX(SOURCE) SOURCE,
                SUM(ALL_TEU) ALL_TEU, SUM(ALL_WGT) ALL_WGT, SUM(GRAND_TTL_SLOT) GRAND_TTL_SLOT, SUM(GRAND_TTL_WGT) GRAND_TTL_WGT, 
                CASE
                   WHEN SUM (GRAND_TTL_SLOT) > SUM (ALL_TEU) THEN
                      SUM (GRAND_TTL_SLOT) - SUM (ALL_TEU)
                   ELSE 0
                END OVER_SLOT,
                CASE
                   WHEN SUM (GRAND_TTL_WGT) > SUM (ALL_WGT) THEN
                      SUM (GRAND_TTL_WGT) - SUM (ALL_WGT)
                   ELSE 0
                END OVER_WGT,
                SUM(HC_LD_20) HC_LD_20, SUM(HC_BSA_20) HC_BSA_20, SUM(HC_LD_40) HC_LD_40, SUM(HC_BSA_40) HC_BSA_40,
                SUM(HC_LD_45) HC_LD_45, SUM(HC_BSA_45) HC_BSA_45, SUM(AK_UNIT) AK_UNIT,
                SUM(AK_VOID) AK_VOID, SUM(DG_20) DG_20, SUM(DG_40) DG_40, 
                SUM(RF_20_QTY) RF_20_QTY, SUM(RF_40_QTY) RF_40_QTY, 
                SUM(MT_TEU) MT_TEU, SUM(FULL_20) FULL_20, SUM(MT_20) MT_20, SUM(FULL_40) FULL_40, SUM(MT_40) MT_40, SUM(MT_WT) MT_WT,
                
                MAX(JO_20FT_N1ST_RTO)     JO_20FT_N1ST_RTO,        
                MAX(JO_20FT_SUB_TEU_QTY)  JO_20FT_SUB_TEU_QTY,        
                MAX(JO_40FT_N1ST_RTO)     JO_40FT_N1ST_RTO,        
                MAX(JO_40FT_SUB_TEU_QTY)  JO_40FT_SUB_TEU_QTY,        
                MAX(JO_45FT_N1ST_RTO)     JO_45FT_N1ST_RTO,        
                MAX(JO_45FT_N2ND_RTO)     JO_45FT_N2ND_RTO,        
                MAX(JO_45FT_SUB_TEU_QTY)  JO_45FT_SUB_TEU_QTY,      
                MAX(JO_RND_RULE_LVL)      JO_RND_RULE_LVL
FROM    (
        SELECT  VVD_ETD_GROUP,VVD,SLAN_CD,VPS_PORT_CD,VPS_ETD_DT, SUB_CHK, 
                VSL_CD, SKD_VOY_NO, SKD_DIR_CD,
                ALL_TEU, ALL_WGT, GRAND_TTL_SLOT, GRAND_TTL_WGT, OVER_SLOT, OVER_WGT,
                HC_LD_20, HC_BSA_20, HC_LD_40, HC_BSA_40, HC_LD_45, HC_BSA_45, AK_UNIT,
                AK_VOID, DG_20, DG_40, RF_20_QTY, RF_40_QTY, MT_TEU, FULL_20, MT_20,FULL_40, MT_40, MT_WT, SOURCE,
                JO_20FT_N1ST_RTO, JO_20FT_SUB_TEU_QTY, JO_40FT_N1ST_RTO,    JO_40FT_SUB_TEU_QTY,
                JO_45FT_N1ST_RTO, JO_45FT_N2ND_RTO,    JO_45FT_SUB_TEU_QTY, JO_RND_RULE_LVL,
                JO_CRR_CD OPR_CD
        FROM    (
                    SELECT    
                            MIN(T1.VVD || T1.VPS_ETD_DT) OVER (PARTITION BY T1.VVD) AS VVD_ETD_GROUP
                            ,T1.*,
                            NVL(TR.JO_20FT_N1ST_RTO, 0)    JO_20FT_N1ST_RTO,
                            NVL(TR.JO_20FT_SUB_TEU_QTY, 0) JO_20FT_SUB_TEU_QTY,
                            NVL(TR.JO_40FT_N1ST_RTO, 0)    JO_40FT_N1ST_RTO,
                            NVL(TR.JO_40FT_SUB_TEU_QTY, 0) JO_40FT_SUB_TEU_QTY,
                            NVL(TR.JO_45FT_N1ST_RTO, 0)    JO_45FT_N1ST_RTO,
                            NVL(TR.JO_45FT_N2ND_RTO, 0)    JO_45FT_N2ND_RTO,
                            NVL(TR.JO_45FT_SUB_TEU_QTY, 0) JO_45FT_SUB_TEU_QTY,
                    	      TR.JO_RND_RULE_LVL,
                            TR.JO_CRR_CD
                    FROM    SRC T1, JOO_TDR_RTO TR
                    WHERE T1.SLAN_CD = TR.RLANE_CD
                      AND TR.JO_REP_CRR_FLG = 'Y'
#if (${opr_cd} != '')
                      AND TR.JO_CRR_CD IN (${opr_cd})
#end
                ) T2
        )
WHERE 1=1
GROUP BY VVD_ETD_GROUP, OPR_CD, VVD,SLAN_CD, VPS_PORT_CD, VPS_ETD_DT, SUB_CHK 
ORDER BY SUBSTR(VVD_ETD_GROUP, 10), VVD, VPS_ETD_DT			]]></sql>
			<params>
				<param name="rlane_cd" type="12" value="" out="N"/>
				<param name="pre_fr" type="12" value="" out="N"/>
				<param name="pre_to" type="12" value="" out="N"/>
				<param name="skd_dir_cd" type="12" value="" out="N"/>
				<param name="vvd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
