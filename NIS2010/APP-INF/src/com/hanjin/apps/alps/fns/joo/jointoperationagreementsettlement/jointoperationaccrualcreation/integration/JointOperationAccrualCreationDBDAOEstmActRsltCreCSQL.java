/*=========================================================
*Copyright(c) 2017 CyberLogitec
*@FileName : JointOperationAccrualCreationDBDAOEstmActRsltCreCSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2017.01.19
*@LastModifier : 
*@LastVersion : 1.0
* 2017.01.19 
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.fns.joo.jointoperationagreementsettlement.jointoperationaccrualcreation.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class JointOperationAccrualCreationDBDAOEstmActRsltCreCSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * Estimate Create하면서 Save
	  * </pre>
	  */
	public JointOperationAccrualCreationDBDAOEstmActRsltCreCSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("jo_crr_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("rlane_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("usr_id",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("rev_yrmon_to",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("re_divr_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("trd_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("rev_yrmon_fr",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("ofc_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("exe_yrmon",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.fns.joo.jointoperationagreementsettlement.jointoperationaccrualcreation.integration").append("\n"); 
		query.append("FileName : JointOperationAccrualCreationDBDAOEstmActRsltCreCSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("INSERT INTO JOO_ESTM_ACT_RSLT (" ).append("\n"); 
		query.append(" EXE_YRMON" ).append("\n"); 
		query.append(",REV_YRMON" ).append("\n"); 
		query.append(",JO_CRR_CD" ).append("\n"); 
		query.append(",RLANE_CD" ).append("\n"); 
		query.append(",VSL_CD" ).append("\n"); 
		query.append(",SKD_VOY_NO" ).append("\n"); 
		query.append(",SKD_DIR_CD" ).append("\n"); 
		query.append(",REV_DIR_CD" ).append("\n"); 
		query.append(",ESTM_VVD_TP_CD" ).append("\n"); 
		query.append(",ACCT_CD" ).append("\n"); 
		query.append(",ESTM_ACT_SEQ" ).append("\n"); 
		query.append(",BSA_QTY" ).append("\n"); 
		query.append(",BSA_SLT_PRC" ).append("\n"); 
		query.append(",ESTM_AMT" ).append("\n"); 
		query.append(",ACT_AMT" ).append("\n"); 
		query.append(",ACCL_AMT" ).append("\n"); 
		query.append(",SYS_SRC_ID" ).append("\n"); 
		query.append(",LOC_CD" ).append("\n"); 
		query.append(",JO_IOC_DIV_CD" ).append("\n"); 
		query.append(",ESTM_VVD_HDR_ID" ).append("\n"); 
		query.append(",JO_CNTR_DIV_CTNT" ).append("\n"); 
		query.append(",CNTR_BLK_DIV_CD" ).append("\n"); 
		query.append(",ACCL_AMT_CORR_FLG" ).append("\n"); 
		query.append(",JO_STL_JB_CD" ).append("\n"); 
		query.append(",ADJ_ESTM_FLG" ).append("\n"); 
		query.append(",ADJ_BSA_QTY" ).append("\n"); 
		query.append(",ADJ_BSA_SLT_PRC" ).append("\n"); 
		query.append(",ADJ_ESTM_AMT" ).append("\n"); 
		query.append(",ADJ_ACCL_AMT" ).append("\n"); 
		query.append(",ADJ_RMK" ).append("\n"); 
		query.append(",CRE_DT" ).append("\n"); 
		query.append(",CRE_USR_ID" ).append("\n"); 
		query.append(",UPD_DT" ).append("\n"); 
		query.append(",UPD_USR_ID" ).append("\n"); 
		query.append(",ADJ_RLSE_RMK" ).append("\n"); 
		query.append(",ADJ_RSLT_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("WITH TARGET_YRMON AS (" ).append("\n"); 
		query.append("    SELECT" ).append("\n"); 
		query.append("     A.LVL" ).append("\n"); 
		query.append("    ,CASE WHEN SUBSTR(A.REV_YRMON1,1,4) >= SUBSTR(@[exe_yrmon],1,4) THEN '999999'" ).append("\n"); 
		query.append("          ELSE A.REV_YRMON1" ).append("\n"); 
		query.append("          END REV_YRMON1" ).append("\n"); 
		query.append("    ,CASE WHEN SUBSTR(A.REV_YRMON2,1,4) >= SUBSTR(@[exe_yrmon],1,4) THEN '999999'" ).append("\n"); 
		query.append("          ELSE A.REV_YRMON2" ).append("\n"); 
		query.append("          END REV_YRMON2      " ).append("\n"); 
		query.append("    FROM" ).append("\n"); 
		query.append("    (" ).append("\n"); 
		query.append("        SELECT " ).append("\n"); 
		query.append("         LEVEL AS LVL" ).append("\n"); 
		query.append("        ,TO_CHAR(TO_NUMBER(SUBSTR(@[rev_yrmon_fr],1,4))+LEVEL-1) || '01' AS REV_YRMON1" ).append("\n"); 
		query.append("        ,TO_CHAR(TO_NUMBER(SUBSTR(@[rev_yrmon_fr],1,4))+LEVEL-1) || '12' AS REV_YRMON2" ).append("\n"); 
		query.append("        FROM DUAL" ).append("\n"); 
		query.append("        CONNECT BY LEVEL <=3" ).append("\n"); 
		query.append("    ) A   " ).append("\n"); 
		query.append(")    " ).append("\n"); 
		query.append(",GLVVD AS (" ).append("\n"); 
		query.append("SELECT A.EXE_YRMON" ).append("\n"); 
		query.append("      ,A.REV_YRMON" ).append("\n"); 
		query.append("      ,A.VSL_CD" ).append("\n"); 
		query.append("      ,A.SKD_VOY_NO" ).append("\n"); 
		query.append("      ,A.SKD_DIR_CD" ).append("\n"); 
		query.append("      ,A.REV_DIR_CD" ).append("\n"); 
		query.append("      ,A.ESTM_VVD_TP_CD" ).append("\n"); 
		query.append("      ,A.VVD_TP" ).append("\n"); 
		query.append("      ,A.ESTM_VVD_HDR_ID" ).append("\n"); 
		query.append("      ,A.RLANE_CD" ).append("\n"); 
		query.append("      ,A.ESTM_IOC_DIV_CD    " ).append("\n"); 
		query.append("  FROM ( " ).append("\n"); 
		query.append("        SELECT EXE_YRMON" ).append("\n"); 
		query.append("              ,REV_YRMON" ).append("\n"); 
		query.append("              ,VSL_CD" ).append("\n"); 
		query.append("              ,SKD_VOY_NO" ).append("\n"); 
		query.append("              ,SKD_DIR_CD" ).append("\n"); 
		query.append("              ,REV_DIR_CD" ).append("\n"); 
		query.append("              ,ESTM_VVD_TP_CD" ).append("\n"); 
		query.append("              ,VVD_TP" ).append("\n"); 
		query.append("              ,ESTM_VVD_HDR_ID" ).append("\n"); 
		query.append("              ,RLANE_CD" ).append("\n"); 
		query.append("              ,ESTM_IOC_DIV_CD" ).append("\n"); 
		query.append("              ,ROW_NUMBER() OVER (PARTITION BY VSL_CD, SKD_VOY_NO, SKD_DIR_CD, REV_DIR_CD, RLANE_CD ORDER BY VVD_TP) AS VVD_CNT" ).append("\n"); 
		query.append("          FROM (" ).append("\n"); 
		query.append("                SELECT EXE_YRMON" ).append("\n"); 
		query.append("                      ,REV_YRMON" ).append("\n"); 
		query.append("                      ,VSL_CD" ).append("\n"); 
		query.append("                      ,SKD_VOY_NO" ).append("\n"); 
		query.append("                      ,SKD_DIR_CD" ).append("\n"); 
		query.append("                      ,REV_DIR_CD" ).append("\n"); 
		query.append("                      ,ESTM_VVD_TP_CD" ).append("\n"); 
		query.append("                      ,ESTM_IOC_DIV_CD" ).append("\n"); 
		query.append("                      ,ESTM_VVD_HDR_ID" ).append("\n"); 
		query.append("                      ,RLANE_CD" ).append("\n"); 
		query.append("                      ,DECODE(ESTM_VVD_TP_CD, 'RV', '1', 'BV', '2', 'PV', '3') AS VVD_TP" ).append("\n"); 
		query.append("                      ,ROW_NUMBER() OVER (PARTITION BY EXE_YRMON, REV_YRMON, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, REV_DIR_CD, RLANE_CD ORDER BY ESTM_IOC_DIV_CD DESC) AS IO_CNT" ).append("\n"); 
		query.append("                  FROM GL_ESTM_REV_VVD" ).append("\n"); 
		query.append("                 WHERE EXE_YRMON = REPLACE(@[exe_yrmon],'-','')" ).append("\n"); 
		query.append("                   AND ESTM_BC_DIV_CD = 'C'" ).append("\n"); 
		query.append("                   AND ESTM_IOC_DIV_CD IN ('OO', 'IA', 'IE', 'IM')" ).append("\n"); 
		query.append("                   #if (${rlane_cd}!='')" ).append("\n"); 
		query.append("                   AND RLANE_CD = @[rlane_cd]" ).append("\n"); 
		query.append("                   #end              " ).append("\n"); 
		query.append("             UNION ALL" ).append("\n"); 
		query.append("                SELECT REPLACE(@[exe_yrmon],'-','') AS EXE_YRMON" ).append("\n"); 
		query.append("                      ,REV_YRMON" ).append("\n"); 
		query.append("                      ,VSL_CD" ).append("\n"); 
		query.append("                      ,SKD_VOY_NO" ).append("\n"); 
		query.append("                      ,SKD_DIR_CD" ).append("\n"); 
		query.append("                      ,REV_DIR_CD" ).append("\n"); 
		query.append("                      ,ESTM_VVD_TP_CD" ).append("\n"); 
		query.append("                      ,ESTM_IOC_DIV_CD" ).append("\n"); 
		query.append("                      ,ESTM_VVD_HDR_ID" ).append("\n"); 
		query.append("                      ,RLANE_CD" ).append("\n"); 
		query.append("                      ,DECODE(ESTM_VVD_TP_CD, 'RV', '1', 'BV', '2', 'PV', '3') AS VVD_TP" ).append("\n"); 
		query.append("                      ,ROW_NUMBER() OVER (PARTITION BY EXE_YRMON, REV_YRMON, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, REV_DIR_CD, RLANE_CD ORDER BY ESTM_IOC_DIV_CD DESC) AS IO_CNT" ).append("\n"); 
		query.append("                  FROM GL_ESTM_REV_VVD" ).append("\n"); 
		query.append("                 WHERE 1=1" ).append("\n"); 
		query.append("				   AND EXE_YRMON IN ((SELECT REV_YRMON2 FROM TARGET_YRMON WHERE LVL=1)" ).append("\n"); 
		query.append("									,(SELECT REV_YRMON2 FROM TARGET_YRMON WHERE LVL=2)" ).append("\n"); 
		query.append("									,(SELECT REV_YRMON2 FROM TARGET_YRMON WHERE LVL=3)" ).append("\n"); 
		query.append("									)" ).append("\n"); 
		query.append("                   AND ESTM_BC_DIV_CD = 'C'" ).append("\n"); 
		query.append("                   AND ESTM_IOC_DIV_CD IN ('OO', 'IA', 'IE', 'IM')" ).append("\n"); 
		query.append("                   #if (${rlane_cd}!='')" ).append("\n"); 
		query.append("                   AND RLANE_CD = @[rlane_cd]" ).append("\n"); 
		query.append("                   #end              " ).append("\n"); 
		query.append("               )" ).append("\n"); 
		query.append("          WHERE REV_YRMON BETWEEN REPLACE(@[rev_yrmon_fr], '-', '') AND REPLACE(@[rev_yrmon_to], '-', '')" ).append("\n"); 
		query.append("            AND IO_CNT = 1" ).append("\n"); 
		query.append("       ) A" ).append("\n"); 
		query.append("         -- Inter/Ocean중 Ocean 값만 취하기 위해 join건다." ).append("\n"); 
		query.append("        ,AR_ROUT_RNK B" ).append("\n"); 
		query.append("   WHERE A.VVD_CNT = 1" ).append("\n"); 
		query.append("     AND A.RLANE_CD = B.RLANE_CD" ).append("\n"); 
		query.append("     AND A.ESTM_IOC_DIV_CD = SUBSTR(B.ZN_IOC_CD, 1, 2)" ).append("\n"); 
		query.append("     --IA, IAO, IE, IEO, IM, IMO 가 있음" ).append("\n"); 
		query.append("     AND B.ZN_IOC_CD NOT IN ('IA', 'IE', 'IM')" ).append("\n"); 
		query.append("     AND B.DELT_FLG = 'N'    " ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("SELECT '999912' AS EXE_YRMON" ).append("\n"); 
		query.append("      ,A.REV_YRMON" ).append("\n"); 
		query.append("      ,A.JO_CRR_CD" ).append("\n"); 
		query.append("      ,A.RLANE_CD" ).append("\n"); 
		query.append("      ,A.VSL_CD      " ).append("\n"); 
		query.append("      ,A.SKD_VOY_NO" ).append("\n"); 
		query.append("      ,A.SKD_DIR_CD" ).append("\n"); 
		query.append("      ,A.REV_DIR_CD" ).append("\n"); 
		query.append("      ,A.ESTM_VVD_TP_CD      " ).append("\n"); 
		query.append("      ,A.ACCT_CD" ).append("\n"); 
		query.append("      ,A.ESTM_ACT_SEQ      " ).append("\n"); 
		query.append("      ,A.BSA_QTY      " ).append("\n"); 
		query.append("      ,NVL(ROUND(A.BSA_SLT_PRC, 2),0) BSA_SLT_PRC      " ).append("\n"); 
		query.append("      ,A.ESTM_AMT" ).append("\n"); 
		query.append("      ,A.ACT_AMT      " ).append("\n"); 
		query.append("      ,CASE WHEN A.ACCL_AMT <= 50 THEN 0 ELSE A.ACCL_AMT END AS ACCL_AMT    " ).append("\n"); 
		query.append("      ,A.SYS_SRC_ID" ).append("\n"); 
		query.append("      ,A.LOC_CD      " ).append("\n"); 
		query.append("      ,A.JO_IOC_DIV_CD      " ).append("\n"); 
		query.append("      ,A.ESTM_VVD_HDR_ID" ).append("\n"); 
		query.append("      ,A.JO_CNTR_DIV_CTNT      " ).append("\n"); 
		query.append("      ,A.CNTR_BLK_DIV_CD" ).append("\n"); 
		query.append("      ,A.ACCL_AMT_CORR_FLG" ).append("\n"); 
		query.append("      ,A.JO_STL_JB_CD" ).append("\n"); 
		query.append("      ,DECODE(B.ADJ_ESTM_FLG, 'Y'," ).append("\n"); 
		query.append("							      CASE WHEN A.REV_YRMON = B.REV_YRMON " ).append("\n"); 
		query.append("									    AND A.JO_CRR_CD = B.JO_CRR_CD " ).append("\n"); 
		query.append("										AND A.VVD = B.VSL_CD||B.SKD_VOY_NO||B.SKD_DIR_CD||B.REV_DIR_CD " ).append("\n"); 
		query.append("										AND A.RLANE_CD = B.RLANE_CD " ).append("\n"); 
		query.append("										AND A.JO_STL_JB_CD = B.JO_STL_JB_CD " ).append("\n"); 
		query.append("										AND A.BSA_QTY = B.BSA_QTY " ).append("\n"); 
		query.append("									    AND TRUNC(A.BSA_SLT_PRC,1) = TRUNC(B.BSA_SLT_PRC,1) -- BSA에서 소수 3자리가 나올수 있어서, 소수점 1자리만 비교" ).append("\n"); 
		query.append("							      THEN 'Y'" ).append("\n"); 
		query.append("							      ELSE 'N'" ).append("\n"); 
		query.append("							      END, DECODE(A.ADJ_ESTM_FLG, 'Y',     -- B.ADJ_ESTM_FLG 이 NULL 이니까 수행" ).append("\n"); 
		query.append("														           CASE WHEN A.REV_YRMON = A.JER_REV_YRMON " ).append("\n"); 
		query.append("																		 AND A.JO_CRR_CD = A.JER_JO_CRR_CD " ).append("\n"); 
		query.append("																		 AND A.VVD = A.JER_VVD " ).append("\n"); 
		query.append("													   					 AND A.RLANE_CD = A.JER_RLANE_CD " ).append("\n"); 
		query.append("																		 AND A.JO_STL_JB_CD = A.JER_JO_STL_JB_CD " ).append("\n"); 
		query.append("																		 AND A.BSA_QTY = A.JER_BSA_QTY " ).append("\n"); 
		query.append("								     									 AND TRUNC(A.BSA_SLT_PRC,1) = TRUNC(A.JER_BSA_SLT_PRC,1) -- BSA에서 소수 3자리가 나올수 있어서, 소수점 1자리만 비교" ).append("\n"); 
		query.append("														            THEN 'Y'" ).append("\n"); 
		query.append("														            ELSE 'N'" ).append("\n"); 
		query.append("														            END, 'N'     -- A.ADJ_ESTM_FLG  가 'N' 인 경우  " ).append("\n"); 
		query.append("      )) AS ADJ_ESTM_FLG      " ).append("\n"); 
		query.append("     ,DECODE(B.ADJ_ESTM_FLG, 'Y',   B.ADJ_BSA_QTY, " ).append("\n"); 
		query.append("          DECODE(A.ADJ_ESTM_FLG, 'Y',   A.ADJ_BSA_QTY  , A.BSA_QTY       -- A.ADJ_ESTM_FLG  가 'N' 인 경우  " ).append("\n"); 
		query.append("      )) AS ADJ_BSA_QTY      " ).append("\n"); 
		query.append("     ,DECODE(B.ADJ_ESTM_FLG, 'Y',   B.ADJ_BSA_SLT_PRC, " ).append("\n"); 
		query.append("          DECODE(A.ADJ_ESTM_FLG, 'Y',   A.ADJ_BSA_SLT_PRC  , A.BSA_SLT_PRC   " ).append("\n"); 
		query.append("      )) AS ADJ_BSA_SLT_PRC      " ).append("\n"); 
		query.append("     ,DECODE(B.ADJ_ESTM_FLG, 'Y',   B.ADJ_BSA_QTY * B.ADJ_BSA_SLT_PRC, " ).append("\n"); 
		query.append("          DECODE(A.ADJ_ESTM_FLG, 'Y',   A.ADJ_BSA_QTY * A.ADJ_BSA_SLT_PRC  , A.BSA_QTY * A.BSA_SLT_PRC" ).append("\n"); 
		query.append("      )) AS ADJ_ESTM_AMT      " ).append("\n"); 
		query.append("     ,CASE  WHEN A.ACCT_CD in ('411222','510991') THEN 0" ).append("\n"); 
		query.append("	        ELSE " ).append("\n"); 
		query.append("     		     DECODE(B.ADJ_ESTM_FLG, 'Y',CASE  WHEN  -50 <=  (B.ADJ_BSA_QTY * B.ADJ_BSA_SLT_PRC) - A.ACT_AMT " ).append("\n"); 
		query.append("												   AND  (B.ADJ_BSA_QTY * B.ADJ_BSA_SLT_PRC) - A.ACT_AMT <= 50 THEN 0  " ).append("\n"); 
		query.append("												   ELSE  (B.ADJ_BSA_QTY * B.ADJ_BSA_SLT_PRC) - A.ACT_AMT  END ," ).append("\n"); 
		query.append(" 	             DECODE(A.ADJ_ESTM_FLG, 'Y',CASE  WHEN  -50 <=  (A.ADJ_BSA_QTY * A.ADJ_BSA_SLT_PRC) - A.ACT_AMT " ).append("\n"); 
		query.append("												   AND (A.ADJ_BSA_QTY * A.ADJ_BSA_SLT_PRC) - A.ACT_AMT  <= 50 THEN 0 " ).append("\n"); 
		query.append("												   ELSE (A.ADJ_BSA_QTY * A.ADJ_BSA_SLT_PRC) - A.ACT_AMT END" ).append("\n"); 
		query.append("							               ,CASE  WHEN  -50 <=  (A.BSA_QTY * A.BSA_SLT_PRC) - A.ACT_AMT " ).append("\n"); 
		query.append("												   AND (A.BSA_QTY * A.BSA_SLT_PRC) - A.ACT_AMT <= 50 THEN 0 " ).append("\n"); 
		query.append("												  ELSE (A.BSA_QTY * A.BSA_SLT_PRC) - A.ACT_AMT END" ).append("\n"); 
		query.append("         )) END AS ADJ_ACCL_AMT      " ).append("\n"); 
		query.append("     ,DECODE(B.ADJ_ESTM_FLG, 'Y',B.ADJ_RMK, DECODE(A.ADJ_ESTM_FLG,'Y', A.ADJ_RMK,'')) AS ADJ_RMK          " ).append("\n"); 
		query.append("     ,SYSDATE AS CRE_DT " ).append("\n"); 
		query.append("     ,@[usr_id] AS CRE_USR_ID" ).append("\n"); 
		query.append("     ,SYSDATE AS UPD_DT " ).append("\n"); 
		query.append("     ,@[usr_id] AS UPD_USR_ID" ).append("\n"); 
		query.append("     ,DECODE(B.ADJ_ESTM_FLG, 'Y',  " ).append("\n"); 
		query.append(" 							  CASE WHEN A.REV_YRMON = B.REV_YRMON " ).append("\n"); 
		query.append("									AND A.JO_CRR_CD = B.JO_CRR_CD " ).append("\n"); 
		query.append("									AND A.VVD = B.VSL_CD||B.SKD_VOY_NO||B.SKD_DIR_CD||B.REV_DIR_CD " ).append("\n"); 
		query.append("									AND A.RLANE_CD = B.RLANE_CD " ).append("\n"); 
		query.append("									AND A.JO_STL_JB_CD = B.JO_STL_JB_CD " ).append("\n"); 
		query.append("									AND A.BSA_QTY = B.BSA_QTY " ).append("\n"); 
		query.append("									AND TRUNC(A.BSA_SLT_PRC,1) = TRUNC(B.BSA_SLT_PRC,1) -- BSA에서 소수 3자리가 나올수 있어서, 소수점 1자리만 비교" ).append("\n"); 
		query.append("					        THEN ''" ).append("\n"); 
		query.append("					        ELSE 'Released'" ).append("\n"); 
		query.append("					        END, DECODE(A.ADJ_ESTM_FLG, 'Y',  " ).append("\n"); 
		query.append("											              CASE WHEN A.REV_YRMON = A.JER_REV_YRMON " ).append("\n"); 
		query.append("															    AND A.JO_CRR_CD = A.JER_JO_CRR_CD " ).append("\n"); 
		query.append("															    AND A.VVD = A.JER_VVD " ).append("\n"); 
		query.append("															    AND A.RLANE_CD = A.JER_RLANE_CD " ).append("\n"); 
		query.append("																AND A.JO_STL_JB_CD = A.JER_JO_STL_JB_CD " ).append("\n"); 
		query.append("															    AND A.BSA_QTY = A.JER_BSA_QTY " ).append("\n"); 
		query.append("   					     									    AND TRUNC(A.BSA_SLT_PRC,1) = TRUNC(A.JER_BSA_SLT_PRC,1) -- BSA에서 소수 3자리가 나올수 있어서, 소수점 1자리만 비교" ).append("\n"); 
		query.append("											              THEN ''" ).append("\n"); 
		query.append("											              ELSE 'Released'" ).append("\n"); 
		query.append("											              END, ''" ).append("\n"); 
		query.append("       )) AS ADJ_RLSE_RMK        " ).append("\n"); 
		query.append("       ,DECODE(B.ADJ_ESTM_FLG, 'Y',   B.ADJ_RSLT_CD, " ).append("\n"); 
		query.append("            DECODE(A.ADJ_ESTM_FLG, 'Y',   A.ADJ_RSLT_CD, ''" ).append("\n"); 
		query.append("        )) AS ADJ_RSLT_CD                    " ).append("\n"); 
		query.append("--      ,A.VNDR_CUST_SEQ" ).append("\n"); 
		query.append("--      ,A.CUST_CNT_CD" ).append("\n"); 
		query.append("--      ,A.CUST_SEQ" ).append("\n"); 
		query.append("--      ,A.VVD" ).append("\n"); 
		query.append("--      ,A.JO_STL_JB_NM   " ).append("\n"); 
		query.append("  FROM (   -- EEE" ).append("\n"); 
		query.append("        SELECT /*+ ORDERED USE_HASH(X R) INDEX(E XAK99GL_ESTM_IF_ERP) */" ).append("\n"); 
		query.append("               X.EXE_YRMON" ).append("\n"); 
		query.append("              ,X.REV_YRMON" ).append("\n"); 
		query.append("              ,X.JO_CRR_CD" ).append("\n"); 
		query.append("              ,X.CUST_CNT_CD||X.CUST_SEQ AS VNDR_CUST_SEQ" ).append("\n"); 
		query.append("              ,X.CUST_CNT_CD" ).append("\n"); 
		query.append("              ,X.CUST_SEQ" ).append("\n"); 
		query.append("              ,X.VVD" ).append("\n"); 
		query.append("              ,X.VSL_CD" ).append("\n"); 
		query.append("              ,X.SKD_VOY_NO" ).append("\n"); 
		query.append("              ,X.SKD_DIR_CD" ).append("\n"); 
		query.append("              ,X.REV_DIR_CD" ).append("\n"); 
		query.append("              ,X.RLANE_CD" ).append("\n"); 
		query.append("              ,X.JO_STL_JB_CD" ).append("\n"); 
		query.append("              ,G.NAME AS JO_STL_JB_NM" ).append("\n"); 
		query.append("              ,X.BSA_QTY" ).append("\n"); 
		query.append("              ,X.BSA_SLT_PRC" ).append("\n"); 
		query.append("              ,X.ACCT_CD" ).append("\n"); 
		query.append("              ,X.ESTM_AMT" ).append("\n"); 
		query.append("              --,DECODE(X.ESTM_VVD_TP_CD, 'PV', 0, ROUND(PSO_CONV_CURR_USD_FNC(X.LOCL_CURR_CD, X.ACT_AMT, X.REV_YRMON, 3), 2)) AS ACT_AMT" ).append("\n"); 
		query.append("              ,DECODE(X.ESTM_VVD_TP_CD, 'PV', 0,  ROUND(X.ACT_AMT, 2) ) AS ACT_AMT" ).append("\n"); 
		query.append("              -- ERP쪽에 DATA가 없는 경우 ESTM전월의 ESTM_AMT, ACT_AMT가 같으면 전월것을 아니면 현재월 것을 ACCL_AMT로 한다." ).append("\n"); 
		query.append("              --2010.05.10 오미랑과장 PV인 경우 Accrual도 0이다." ).append("\n"); 
		query.append("              ,DECODE(X.ESTM_VVD_TP_CD, 'PV', 0," ).append("\n"); 
		query.append("                  CASE WHEN X.JO_STL_ITM_CD = 'S/H'" ).append("\n"); 
		query.append("                          THEN CASE WHEN E.EXE_YRMON IS NULL" ).append("\n"); 
		query.append("                                      THEN CASE WHEN NVL(X.ESTM_AMT, 0) = NVL(R.ESTM_AMT, 0) " ).append("\n"); 
		query.append("                                                     AND DECODE(X.ESTM_VVD_TP_CD, 'PV', 0,  NVL(X.ACT_AMT, 0) ) = NVL(R.ACT_AMT, 0)" ).append("\n"); 
		query.append("                                                 THEN GREATEST(DECODE(NVL(R.ACCL_AMT,0), 0, NVL(X.ACCL_AMT,0), NVL(R.ACCL_AMT,0)), 0)" ).append("\n"); 
		query.append("                                                 ELSE GREATEST(NVL(X.ACCL_AMT,0),0) END" ).append("\n"); 
		query.append("                                      ELSE GREATEST(NVL(X.ACCL_AMT,0),0) END" ).append("\n"); 
		query.append("                            ELSE 0 " ).append("\n"); 
		query.append("                  END ) AS ACCL_AMT" ).append("\n"); 
		query.append("              ,X.ESTM_VVD_TP_CD" ).append("\n"); 
		query.append("              ,X.ESTM_VVD_HDR_ID" ).append("\n"); 
		query.append("              ,X.ESTM_IOC_DIV_CD AS JO_IOC_DIV_CD" ).append("\n"); 
		query.append("              ,'C'    AS CNTR_BLK_DIV_CD" ).append("\n"); 
		query.append("              ,'JOO'  AS SYS_SRC_ID" ).append("\n"); 
		query.append("              ,'CNTR' AS JO_CNTR_DIV_CTNT" ).append("\n"); 
		query.append("              ,F.LOC_CD" ).append("\n"); 
		query.append("              ,CASE WHEN X.JO_STL_ITM_CD = 'S/H' " ).append("\n"); 
		query.append("                    THEN CASE WHEN E.EXE_YRMON IS NULL " ).append("\n"); 
		query.append("                              THEN CASE WHEN X.ESTM_AMT = R.ESTM_AMT AND X.ACT_AMT = R.ACT_AMT " ).append("\n"); 
		query.append("                                        THEN R.ACCL_AMT_CORR_FLG" ).append("\n"); 
		query.append("                                        ELSE 'N' END" ).append("\n"); 
		query.append("                              ELSE 'N' END" ).append("\n"); 
		query.append("                    ELSE 'N' END AS ACCL_AMT_CORR_FLG" ).append("\n"); 
		query.append("              ,X.ESTM_ACT_SEQ --SEQ는 JO_STL_JB_CD에 따라만 발생하므로... " ).append("\n"); 
		query.append("            " ).append("\n"); 
		query.append("              ,R.REV_YRMON AS JER_REV_YRMON" ).append("\n"); 
		query.append("              ,R.JO_CRR_CD AS JER_JO_CRR_CD" ).append("\n"); 
		query.append("              ,R.VSL_CD||R.SKD_VOY_NO||R.SKD_DIR_CD||R.REV_DIR_CD AS JER_VVD" ).append("\n"); 
		query.append("              ,R.RLANE_CD AS JER_RLANE_CD" ).append("\n"); 
		query.append("              ,R.JO_STL_JB_CD AS JER_JO_STL_JB_CD" ).append("\n"); 
		query.append("              ,R.BSA_QTY AS JER_BSA_QTY" ).append("\n"); 
		query.append("              ,R.BSA_SLT_PRC AS JER_BSA_SLT_PRC" ).append("\n"); 
		query.append("              ,R.ACT_AMT AS JER_ACT_AMT" ).append("\n"); 
		query.append("              ,R.ADJ_ESTM_FLG" ).append("\n"); 
		query.append("              ,R.ADJ_BSA_QTY " ).append("\n"); 
		query.append("              ,R.ADJ_BSA_SLT_PRC" ).append("\n"); 
		query.append("              ,R.ADJ_ESTM_AMT" ).append("\n"); 
		query.append("              ,R.ADJ_ACCL_AMT" ).append("\n"); 
		query.append("              ,R.ADJ_RMK    " ).append("\n"); 
		query.append("              ,R.ADJ_RLSE_RMK" ).append("\n"); 
		query.append("              ,R.ADJ_RSLT_CD" ).append("\n"); 
		query.append("          FROM (   --DDD" ).append("\n"); 
		query.append("       --S/H => BSA에는 S/H만 있음" ).append("\n"); 
		query.append("                SELECT /*+ ORDERED USE_HASH(A C D B) FULL(D) */" ).append("\n"); 
		query.append("                       'S/H' AS JO_STL_ITM_CD" ).append("\n"); 
		query.append("                      ,A.EXE_YRMON" ).append("\n"); 
		query.append("                      ,A.REV_YRMON" ).append("\n"); 
		query.append("                      ,C.JO_CRR_CD" ).append("\n"); 
		query.append("                      ,DECODE(C.RE_DIVR_CD, 'R', B.CUST_CNT_CD, '') AS CUST_CNT_CD" ).append("\n"); 
		query.append("                      ,DECODE(C.RE_DIVR_CD, 'R', B.CUST_SEQ, B.VNDR_SEQ) AS CUST_SEQ" ).append("\n"); 
		query.append("                      ,A.VSL_CD||A.SKD_VOY_NO||A.SKD_DIR_CD||A.REV_DIR_CD AS VVD" ).append("\n"); 
		query.append("                      ,A.VSL_CD" ).append("\n"); 
		query.append("                      ,A.SKD_VOY_NO" ).append("\n"); 
		query.append("                      ,A.SKD_DIR_CD" ).append("\n"); 
		query.append("                      ,A.REV_DIR_CD" ).append("\n"); 
		query.append("                      ,A.RLANE_CD" ).append("\n"); 
		query.append("                      ,C.JO_STL_JB_CD" ).append("\n"); 
		query.append("                      ,C.BSA_QTY" ).append("\n"); 
		query.append("                      ,C.BSA_SLT_PRC" ).append("\n"); 
		query.append("                      ,C.LOCL_CURR_CD" ).append("\n"); 
		query.append("                      ,D.JO_ESTM_ACCT_CD AS ACCT_CD" ).append("\n"); 
		query.append("                      ,ROUND(NVL(SUM(C.ESTM_AMT), 0), 2) AS ESTM_AMT" ).append("\n"); 
		query.append("                      ,ROUND(NVL(SUM(C.STL_LOCL_AMT), 0), 2) AS ACT_AMT" ).append("\n"); 
		query.append("                      ,NVL(ROUND(SUM(C.ESTM_AMT), 2), 0) - NVL(ROUND(SUM(C.STL_LOCL_AMT), 2), 0) AS ACCL_AMT" ).append("\n"); 
		query.append("                      ,MAX(A.ESTM_VVD_TP_CD) AS ESTM_VVD_TP_CD" ).append("\n"); 
		query.append("                      ,MAX(A.VVD_TP) AS VVD_TP" ).append("\n"); 
		query.append("                      ,MAX(A.ESTM_VVD_HDR_ID) AS ESTM_VVD_HDR_ID" ).append("\n"); 
		query.append("                      ,MAX(A.ESTM_IOC_DIV_CD) AS ESTM_IOC_DIV_CD" ).append("\n"); 
		query.append("                       --2010.02.22 001인 DATA가 있으므로 (이행잘못) 전체를 TO_NUBMER로 하여 SEQ를 삼는다." ).append("\n"); 
		query.append("                       --TO_NUMBER(NVL(SUBSTR(C.JO_STL_JB_CD,3,1),'1')) AS ESTM_ACT_SEQ" ).append("\n"); 
		query.append("                      ,TO_NUMBER(NVL(C.JO_STL_JB_CD, '1')) AS ESTM_ACT_SEQ" ).append("\n"); 
		query.append("                  FROM GLVVD A" ).append("\n"); 
		query.append("                      ,(  -- CC" ).append("\n"); 
		query.append("                        SELECT /*+ NATIVE_FULL_OUTER_JOIN */" ).append("\n"); 
		query.append("                               NVL(C.VSL_CD,D.VSL_CD) AS VSL_CD" ).append("\n"); 
		query.append("                              ,NVL(C.SKD_VOY_NO, D.SKD_VOY_NO) AS SKD_VOY_NO" ).append("\n"); 
		query.append("                              ,NVL(C.SKD_DIR_CD, D.SKD_DIR_CD) AS SKD_DIR_CD" ).append("\n"); 
		query.append("                              ,NVL(C.RLANE_CD, D.RLANE_CD)     AS RLANE_CD" ).append("\n"); 
		query.append("                              ,NVL(C.JO_CRR_CD,D.JO_CRR_CD)    AS JO_CRR_CD" ).append("\n"); 
		query.append("                              ,NVL(C.JO_STL_JB_CD, D.JO_STL_JB_CD) AS JO_STL_JB_CD" ).append("\n"); 
		query.append("                              ,NVL(C.RE_DIVR_CD, D.RE_DIVR_CD) AS RE_DIVR_CD" ).append("\n"); 
		query.append("                              ,D.LOCL_CURR_CD" ).append("\n"); 
		query.append("                              ,NVL(C.BSA_SLT_PRC,0) AS BSA_SLT_PRC" ).append("\n"); 
		query.append("                              ,NVL(C.BSA_QTY,0)     AS BSA_QTY" ).append("\n"); 
		query.append("                              ,C.ESTM_AMT" ).append("\n"); 
		query.append("                              ,D.STL_LOCL_AMT" ).append("\n"); 
		query.append("                              --,DECODE( C.CURR_CD,'USD', D.STL_LOCL_AMT, D.STL_LOCL_AMT /USD_XCH_RT ) STL_LOCL_AMT" ).append("\n"); 
		query.append("                              --,DECODE( NVL(C.CURR_CD,'USD') ,'USD', D.STL_LOCL_AMT, D.STL_LOCL_AMT /USD_XCH_RT ) STL_LOCL_AMT" ).append("\n"); 
		query.append("                          FROM (  -- KK" ).append("\n"); 
		query.append("                                SELECT /*+ ORDERED USE_HASH(A B C) */" ).append("\n"); 
		query.append("                                       A.COST_YRMON AS REV_YRMON" ).append("\n"); 
		query.append("                                      ,A.VSL_CD" ).append("\n"); 
		query.append("                                      ,A.SKD_VOY_NO" ).append("\n"); 
		query.append("                                      ,A.DIR_CD AS SKD_DIR_CD" ).append("\n"); 
		query.append("                                      ,A.RLANE_CD" ).append("\n"); 
		query.append("                                      ,C.CRR_CD AS JO_CRR_CD" ).append("\n"); 
		query.append("                                      ,CASE WHEN C.BSA_OP_JB_CD IN ('000','001') " ).append("\n"); 
		query.append("                                            THEN '101' " ).append("\n"); 
		query.append("                                            WHEN C.BSA_OP_JB_CD IN ('002','003') " ).append("\n"); 
		query.append("                                            THEN '102' " ).append("\n"); 
		query.append("                                            WHEN C.BSA_OP_JB_CD IN ('004','005') " ).append("\n"); 
		query.append("                                            THEN '103' " ).append("\n"); 
		query.append("                                       END AS JO_STL_JB_CD" ).append("\n"); 
		query.append("                                      ,CASE WHEN C.BSA_OP_JB_CD IN ('001','002','004') " ).append("\n"); 
		query.append("                                            THEN 'R'" ).append("\n"); 
		query.append("                                                  WHEN C.BSA_OP_JB_CD IN ('000','003','005') " ).append("\n"); 
		query.append("                                            THEN 'E' " ).append("\n"); 
		query.append("                                       END AS RE_DIVR_CD" ).append("\n"); 
		query.append("                                      ,C.SLT_PRC_CAPA AS BSA_SLT_PRC" ).append("\n"); 
		query.append("                                      ,C.CRR_BSA_CAPA AS BSA_QTY" ).append("\n"); 
		query.append("                                      ,C.CRR_PERF_AMT AS ESTM_AMT" ).append("\n"); 
		query.append("                                      ,C.CURR_CD" ).append("\n"); 
		query.append("                                      ,C.USD_XCH_RT" ).append("\n"); 
		query.append("                                  FROM MAS_MON_VVD A" ).append("\n"); 
		query.append("                                      ,BSA_VVD_MST B" ).append("\n"); 
		query.append("                                      ,BSA_VVD_CRR_PERF C" ).append("\n"); 
		query.append("                                 WHERE A.VSL_CD = B.VSL_CD" ).append("\n"); 
		query.append("                                   AND A.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                                   AND A.DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("                                   AND A.TRD_CD = B.TRD_CD" ).append("\n"); 
		query.append("                                   AND A.RLANE_CD = B.RLANE_CD" ).append("\n"); 
		query.append("                                   AND A.VSL_CD = C.VSL_CD" ).append("\n"); 
		query.append("                                   AND A.SKD_VOY_NO = C.SKD_VOY_NO" ).append("\n"); 
		query.append("                                   AND A.DIR_CD = C.SKD_DIR_CD" ).append("\n"); 
		query.append("                                   AND A.TRD_CD = C.TRD_CD" ).append("\n"); 
		query.append("                                   AND A.RLANE_CD = C.RLANE_CD" ).append("\n"); 
		query.append("                                   AND A.COST_YRMON BETWEEN TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE(@[rev_yrmon_fr], '-', ''), 'YYYYMM'), -1), 'YYYYMM') AND TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE(@[rev_yrmon_to], '-', ''), 'YYYYMM'), +1),'YYYYMM')" ).append("\n"); 
		query.append("                                   #if (${re_divr_cd}=='R')" ).append("\n"); 
		query.append("                                   AND C.BSA_OP_JB_CD IN ('001','002','004')" ).append("\n"); 
		query.append("                                   #elseif (${re_divr_cd}=='E')" ).append("\n"); 
		query.append("                                   AND C.BSA_OP_JB_CD IN ('000','003','005')" ).append("\n"); 
		query.append("                                   #else" ).append("\n"); 
		query.append("                                   AND C.BSA_OP_JB_CD IN ('000','001','002','003','004','005')" ).append("\n"); 
		query.append("                                   #end" ).append("\n"); 
		query.append("                                   #if (${jo_crr_cd}!='')" ).append("\n"); 
		query.append("                                   AND C.CRR_CD = @[jo_crr_cd]" ).append("\n"); 
		query.append("                                   #end              " ).append("\n"); 
		query.append("                                   #if (${trd_cd}!='')" ).append("\n"); 
		query.append("                                   AND A.TRD_CD = @[trd_cd]" ).append("\n"); 
		query.append("                                   #end" ).append("\n"); 
		query.append("                                   #if (${rlane_cd}!='')" ).append("\n"); 
		query.append("                                   AND A.RLANE_CD = @[rlane_cd]" ).append("\n"); 
		query.append("                                   #end" ).append("\n"); 
		query.append("                                   AND C.CRR_CD <> 'SML'" ).append("\n"); 
		query.append("                                   AND A.DELT_FLG = 'N'" ).append("\n"); 
		query.append("                                   -- 2010.01.20 TEU, PRICE중 하나라도 0이 아니면 나와야 한다." ).append("\n"); 
		query.append("                                   AND NOT(NVL(C.CRR_BSA_CAPA,0) = 0 AND NVL(C.SLT_PRC_CAPA,0) = 0 )" ).append("\n"); 
		query.append("                               ) C FULL OUTER JOIN" ).append("\n"); 
		query.append("                               (   -- BB" ).append("\n"); 
		query.append("                                SELECT JO_CRR_CD" ).append("\n"); 
		query.append("                                      ,RLANE_CD" ).append("\n"); 
		query.append("                                      ,RE_DIVR_CD" ).append("\n"); 
		query.append("                                      ,VSL_CD" ).append("\n"); 
		query.append("                                      ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                      ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                      ,REV_DIR_CD" ).append("\n"); 
		query.append("                                      ,LOCL_CURR_CD" ).append("\n"); 
		query.append("                                      ,JO_STL_JB_CD" ).append("\n"); 
		query.append("                                      ,SUM(STL_LOCL_AMT) AS STL_LOCL_AMT" ).append("\n"); 
		query.append("                                    FROM (    -- AA" ).append("\n"); 
		query.append("                                        SELECT " ).append("\n"); 
		query.append("                                                              JO_CRR_CD" ).append("\n"); 
		query.append("                                                              ,RLANE_CD" ).append("\n"); 
		query.append("                                                              ,RE_DIVR_CD" ).append("\n"); 
		query.append("                                                              ,VSL_CD" ).append("\n"); 
		query.append("                                                              ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                                              ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                                              ,REV_DIR_CD" ).append("\n"); 
		query.append("                                                              ,LOCL_CURR_CD" ).append("\n"); 
		query.append("                                                              ,JO_STL_JB_CD" ).append("\n"); 
		query.append("                                                              ,TO_CHAR(R.EFF_DT, 'YYYYMM') EFF_DT" ).append("\n"); 
		query.append("                                                              ,ROUND(SUM(A.STL_LOCL_AMT), 2) AS STL_LOCL_AMT" ).append("\n"); 
		query.append("                                                  FROM  (" ).append("\n"); 
		query.append("                                                              SELECT /*+ ORDERED USE_HASH(D C B A) */" ).append("\n"); 
		query.append("                                                                      D.JO_CRR_CD" ).append("\n"); 
		query.append("                                                                      ,D.RLANE_CD" ).append("\n"); 
		query.append("                                                                      ,D.RE_DIVR_CD" ).append("\n"); 
		query.append("                                                                      ,D.VSL_CD" ).append("\n"); 
		query.append("                                                                      ,D.SKD_VOY_NO" ).append("\n"); 
		query.append("                                                                      ,D.SKD_DIR_CD" ).append("\n"); 
		query.append("                                                                      ,D.REV_DIR_CD" ).append("\n"); 
		query.append("                                                                      ,D.LOCL_CURR_CD" ).append("\n"); 
		query.append("                                                                      ,D.JO_STL_JB_CD" ).append("\n"); 
		query.append("                                                                      --,D.STL_LOCL_AMT" ).append("\n"); 
		query.append("                                                                      ,D.STL_LOCL_AMT/DECODE(D.LOCL_CURR_CD, 'USD', 1, " ).append("\n"); 
		query.append("                                                                         (SELECT NVL(EX1.USD_LOCL_XCH_RT,1) " ).append("\n"); 
		query.append("                                                                           FROM GL_MON_XCH_RT EX1" ).append("\n"); 
		query.append("                                                                           WHERE  EX1.CURR_CD                 = D.LOCL_CURR_CD" ).append("\n"); 
		query.append("                                                                                AND EX1.ACCT_XCH_RT_YRMON     = TO_CHAR(A.EFF_DT,'YYYYMM')" ).append("\n"); 
		query.append("                                                                                 AND EX1.ACCT_XCH_RT_LVL      = '3'" ).append("\n"); 
		query.append("                                                                          )) STL_LOCL_AMT" ).append("\n"); 
		query.append("                                                                     ,A.SLP_TP_CD, A.SLP_FUNC_CD, A.SLP_OFC_CD, A.SLP_ISS_DT, A.SLP_SER_NO" ).append("\n"); 
		query.append("                                                              FROM JOO_SETTLEMENT D" ).append("\n"); 
		query.append("                                                                        ,JOO_STL_CMB_DTL C" ).append("\n"); 
		query.append("                                                                        ,JOO_STL_CMB B" ).append("\n"); 
		query.append("                                                                        ,JOO_CSR A" ).append("\n"); 
		query.append("                                                              WHERE 1 = 1" ).append("\n"); 
		query.append("                                                                        AND D.ACCT_YRMON  = C.ACCT_YRMON" ).append("\n"); 
		query.append("                                                                        AND D.STL_VVD_SEQ = C.STL_VVD_SEQ" ).append("\n"); 
		query.append("                                                                        AND D.STL_SEQ     = C.STL_SEQ" ).append("\n"); 
		query.append("                                                                        AND C.ACCT_YRMON  = B.ACCT_YRMON" ).append("\n"); 
		query.append("                                                                        AND C.JO_CRR_CD   = B.JO_CRR_CD" ).append("\n"); 
		query.append("                                                                        AND C.STL_CMB_SEQ = B.STL_CMB_SEQ" ).append("\n"); 
		query.append("                                                                        AND C.RE_DIVR_CD  = B.RE_DIVR_CD" ).append("\n"); 
		query.append("                                                                        AND B.SLP_TP_CD   = A.SLP_TP_CD" ).append("\n"); 
		query.append("                                                                        AND B.SLP_FUNC_CD = A.SLP_FUNC_CD" ).append("\n"); 
		query.append("                                                                        AND B.SLP_OFC_CD  = A.SLP_OFC_CD" ).append("\n"); 
		query.append("                                                                        AND B.SLP_ISS_DT  = A.SLP_ISS_DT" ).append("\n"); 
		query.append("                                                                        AND B.SLP_SER_NO  = A.SLP_SER_NO" ).append("\n"); 
		query.append("                                                                        AND A.APRO_FLG    = 'Y'" ).append("\n"); 
		query.append("                                                                        AND (( A.SLP_TP_CD = '06' AND  TO_CHAR(A.EFF_DT, 'YYYYMM') <=  REPLACE(@[exe_yrmon], '-', '')) OR ( A.SLP_TP_CD = '18' AND 1 = 1))" ).append("\n"); 
		query.append("																		--2010.03.19 REVERSE, REJECT건 제외(박효숙 차장)" ).append("\n"); 
		query.append("																		--2015.10.15 REVERSE건은 보여준다(김영명 대리)																		" ).append("\n"); 
		query.append("                                                                        -- AND B.RVS_CMB_FLG = 'N'" ).append("\n"); 
		query.append("                                                                        AND B.RJCT_CMB_FLG= 'N'" ).append("\n"); 
		query.append("                                                                        AND D.ACCT_YRMON >= TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE(@[rev_yrmon_fr], '-', ''), 'YYYYMM'), -12), 'YYYYMM')" ).append("\n"); 
		query.append("                                                                        AND D.ACCT_YRMON <= TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE(@[rev_yrmon_to], '-', ''), 'YYYYMM'),  +1), 'YYYYMM')" ).append("\n"); 
		query.append("                                                                        AND D.JO_STL_ITM_CD = 'S/H'" ).append("\n"); 
		query.append("                                                                        #if (${re_divr_cd} !='')" ).append("\n"); 
		query.append("                                                                           AND D.RE_DIVR_CD  = @[re_divr_cd]" ).append("\n"); 
		query.append("                                                                        #end              " ).append("\n"); 
		query.append("                                                                        #if (${jo_crr_cd}!='')" ).append("\n"); 
		query.append("                                                                           AND D.JO_CRR_CD   = @[jo_crr_cd]" ).append("\n"); 
		query.append("                                                                        #end              " ).append("\n"); 
		query.append("                                                                        #if (${trd_cd}!='')" ).append("\n"); 
		query.append("                                                                            AND D.TRD_CD      = @[trd_cd]" ).append("\n"); 
		query.append("                                                                        #end              " ).append("\n"); 
		query.append("                                                                        #if (${rlane_cd}!='')" ).append("\n"); 
		query.append("                                                                            AND D.RLANE_CD    = @[rlane_cd]" ).append("\n"); 
		query.append("                                                                        #end  " ).append("\n"); 
		query.append("                                                                        AND A.APRO_DT    <= NVL((" ).append("\n"); 
		query.append("                                                                                            SELECT LST_UPD_DT" ).append("\n"); 
		query.append("                                                                                            FROM AP_PERIOD" ).append("\n"); 
		query.append("                                                                                            WHERE SYS_DIV_CD = '25'" ).append("\n"); 
		query.append("                                                                                            AND EFF_YRMON  = REPLACE(@[exe_yrmon], '-', '')" ).append("\n"); 
		query.append("                                                                                            AND OFC_CD     = 'SELHO'" ).append("\n"); 
		query.append("                                                                                            AND CLZ_STS_CD = 'C')" ).append("\n"); 
		query.append("                                                                                            ,SYSDATE)" ).append("\n"); 
		query.append("                                                  ) A, JOO_CSR R  -- KK" ).append("\n"); 
		query.append("                                                  WHERE 1 = 1      " ).append("\n"); 
		query.append("                                                    AND A.SLP_TP_CD   = R.SLP_TP_CD" ).append("\n"); 
		query.append("                                                    AND A.SLP_FUNC_CD = R.SLP_FUNC_CD" ).append("\n"); 
		query.append("                                                    AND A.SLP_OFC_CD  = R.SLP_OFC_CD" ).append("\n"); 
		query.append("                                                    AND A.SLP_ISS_DT  = R.SLP_ISS_DT" ).append("\n"); 
		query.append("                                                    AND A.SLP_SER_NO  = R.SLP_SER_NO" ).append("\n"); 
		query.append("                                                    " ).append("\n"); 
		query.append("                                                  GROUP BY JO_CRR_CD" ).append("\n"); 
		query.append("                                                                    ,RLANE_CD" ).append("\n"); 
		query.append("                                                                    ,RE_DIVR_CD" ).append("\n"); 
		query.append("                                                                    ,VSL_CD" ).append("\n"); 
		query.append("                                                                    ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                                                    ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                                                    ,REV_DIR_CD" ).append("\n"); 
		query.append("                                                                    ,LOCL_CURR_CD" ).append("\n"); 
		query.append("                                                                    ,JO_STL_JB_CD" ).append("\n"); 
		query.append("                                                                    ,TO_CHAR(R.EFF_DT, 'YYYYMM')" ).append("\n"); 
		query.append("                                                                    " ).append("\n"); 
		query.append("                                                  HAVING SUM(STL_LOCL_AMT) <> 0" ).append("\n"); 
		query.append("                                              --MIGRATION 누락된부분 포함" ).append("\n"); 
		query.append("                                     UNION ALL" ).append("\n"); 
		query.append("                                        SELECT D.JO_CRR_CD" ).append("\n"); 
		query.append("                                              ,D.RLANE_CD" ).append("\n"); 
		query.append("                                              ,CASE WHEN D.ACCT_CD LIKE '4%' " ).append("\n"); 
		query.append("                                                    THEN 'R' " ).append("\n"); 
		query.append("                                                    ELSE 'E' " ).append("\n"); 
		query.append("                                               END AS RE_DIVR_CD" ).append("\n"); 
		query.append("                                              ,D.VSL_CD" ).append("\n"); 
		query.append("                                              ,D.SKD_VOY_NO" ).append("\n"); 
		query.append("                                              ,D.SKD_DIR_CD" ).append("\n"); 
		query.append("                                              ,D.REV_DIR_CD" ).append("\n"); 
		query.append("                                              ,'USD'" ).append("\n"); 
		query.append("                                              ,D.JO_STL_JB_CD" ).append("\n"); 
		query.append("                                              ,'' EFF_DT" ).append("\n"); 
		query.append("                                              ,SUM(D.ACT_AMT) AS STL_LOCL_AMT" ).append("\n"); 
		query.append("                                          FROM JOO_ESTM_ACT_RSLT D" ).append("\n"); 
		query.append("                                              ,JOO_CARRIER C" ).append("\n"); 
		query.append("                                         WHERE D.JO_CRR_CD = C.JO_CRR_CD" ).append("\n"); 
		query.append("                                           AND D.RLANE_CD  = C.RLANE_CD" ).append("\n"); 
		query.append("                                           AND D.EXE_YRMON = '99'||SUBSTR(REPLACE(@[exe_yrmon], '-', ''), 3, 2)||'01'" ).append("\n"); 
		query.append("                                           #if (${re_divr_cd} == 'R')" ).append("\n"); 
		query.append("                                           AND D.ACCT_CD LIKE '4%'" ).append("\n"); 
		query.append("                                           #elseif (${re_divr_cd} == 'E')" ).append("\n"); 
		query.append("                                           AND D.ACCT_CD LIKE '5%'" ).append("\n"); 
		query.append("                                           #end              " ).append("\n"); 
		query.append("                                           #if (${jo_crr_cd}!='')" ).append("\n"); 
		query.append("                                           AND D.JO_CRR_CD = @[jo_crr_cd]" ).append("\n"); 
		query.append("                                           #end              " ).append("\n"); 
		query.append("                                           #if (${trd_cd}!='')" ).append("\n"); 
		query.append("                                           AND C.TRD_CD    = @[trd_cd]" ).append("\n"); 
		query.append("                                           #end              " ).append("\n"); 
		query.append("                                           #if (${rlane_cd}!='')" ).append("\n"); 
		query.append("                                           AND D.RLANE_CD  = @[rlane_cd]" ).append("\n"); 
		query.append("                                           #end      " ).append("\n"); 
		query.append("                                       GROUP BY D.JO_CRR_CD" ).append("\n"); 
		query.append("                                               ,D.RLANE_CD" ).append("\n"); 
		query.append("                                               ,CASE WHEN D.ACCT_CD LIKE '4%' " ).append("\n"); 
		query.append("                                                     THEN 'R' " ).append("\n"); 
		query.append("                                                     ELSE 'E' " ).append("\n"); 
		query.append("                                                END" ).append("\n"); 
		query.append("                                               ,D.VSL_CD" ).append("\n"); 
		query.append("                                               ,D.SKD_VOY_NO" ).append("\n"); 
		query.append("                                               ,D.SKD_DIR_CD" ).append("\n"); 
		query.append("                                               ,D.REV_DIR_CD" ).append("\n"); 
		query.append("                                               ,D.JO_STL_JB_CD  " ).append("\n"); 
		query.append("                                       )  -- AA" ).append("\n"); 
		query.append("                               GROUP BY JO_CRR_CD" ).append("\n"); 
		query.append("                                       ,RLANE_CD" ).append("\n"); 
		query.append("                                       ,RE_DIVR_CD" ).append("\n"); 
		query.append("                                       ,VSL_CD" ).append("\n"); 
		query.append("                                       ,SKD_VOY_NO" ).append("\n"); 
		query.append("                                       ,SKD_DIR_CD" ).append("\n"); 
		query.append("                                       ,REV_DIR_CD" ).append("\n"); 
		query.append("                                       ,LOCL_CURR_CD" ).append("\n"); 
		query.append("                                       ,JO_STL_JB_CD" ).append("\n"); 
		query.append("                                HAVING SUM(STL_LOCL_AMT) <> 0" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                               ) D   -- BB" ).append("\n"); 
		query.append("                             ON (C.VSL_CD      = D.VSL_CD" ).append("\n"); 
		query.append("                            AND C.SKD_VOY_NO   = D.SKD_VOY_NO" ).append("\n"); 
		query.append("                            AND C.SKD_DIR_CD   = D.SKD_DIR_CD" ).append("\n"); 
		query.append("                            AND C.JO_CRR_CD    = D.JO_CRR_CD" ).append("\n"); 
		query.append("                            AND C.RLANE_CD     = D.RLANE_CD" ).append("\n"); 
		query.append("                            AND C.RE_DIVR_CD   = D.RE_DIVR_CD" ).append("\n"); 
		query.append("                            AND C.JO_STL_JB_CD = D.JO_STL_JB_CD )" ).append("\n"); 
		query.append("                       ) C   -- CC" ).append("\n"); 
		query.append("                      ,JOO_STL_ITM_ACCT D" ).append("\n"); 
		query.append("                      ,JOO_CARRIER B" ).append("\n"); 
		query.append("                 WHERE A.VSL_CD     = C.VSL_CD       " ).append("\n"); 
		query.append("                   AND A.SKD_VOY_NO = C.SKD_VOY_NO   " ).append("\n"); 
		query.append("                   AND A.SKD_DIR_CD = C.SKD_DIR_CD   " ).append("\n"); 
		query.append("                   AND A.RLANE_CD   = C.RLANE_CD     " ).append("\n"); 
		query.append("                   AND C.JO_CRR_CD  = B.JO_CRR_CD" ).append("\n"); 
		query.append("                   AND C.RLANE_CD   = B.RLANE_CD" ).append("\n"); 
		query.append("                   AND C.RE_DIVR_CD = D.RE_DIVR_CD" ).append("\n"); 
		query.append("                   AND D.JO_STL_ITM_CD = 'S/H'" ).append("\n"); 
		query.append("              GROUP BY A.EXE_YRMON" ).append("\n"); 
		query.append("                      ,A.REV_YRMON" ).append("\n"); 
		query.append("                      ,C.JO_CRR_CD" ).append("\n"); 
		query.append("                      ,DECODE(C.RE_DIVR_CD, 'R', B.CUST_CNT_CD, '')" ).append("\n"); 
		query.append("                      ,DECODE(C.RE_DIVR_CD, 'R', B.CUST_SEQ, B.VNDR_SEQ)" ).append("\n"); 
		query.append("                      ,A.VSL_CD" ).append("\n"); 
		query.append("                      ,A.SKD_VOY_NO" ).append("\n"); 
		query.append("                      ,A.SKD_DIR_CD" ).append("\n"); 
		query.append("                      ,A.REV_DIR_CD" ).append("\n"); 
		query.append("                      ,A.RLANE_CD" ).append("\n"); 
		query.append("                      ,C.JO_STL_JB_CD" ).append("\n"); 
		query.append("                      ,C.BSA_QTY" ).append("\n"); 
		query.append("                      ,C.BSA_SLT_PRC" ).append("\n"); 
		query.append("                      ,C.LOCL_CURR_CD" ).append("\n"); 
		query.append("                      ,D.JO_ESTM_ACCT_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("             UNION ALL" ).append("\n"); 
		query.append("             -- S/H외" ).append("\n"); 
		query.append("                SELECT /*+ ORDERED USE_HASH( A D) */" ).append("\n"); 
		query.append("                       'OUS' AS JO_STL_ITM_CD" ).append("\n"); 
		query.append("                      ,A.EXE_YRMON" ).append("\n"); 
		query.append("                      ,A.REV_YRMON" ).append("\n"); 
		query.append("                      ,D.JO_CRR_CD" ).append("\n"); 
		query.append("                      ,D.CUST_CNT_CD" ).append("\n"); 
		query.append("                      ,D.CUST_SEQ" ).append("\n"); 
		query.append("                      ,A.VSL_CD||A.SKD_VOY_NO||A.SKD_DIR_CD||A.REV_DIR_CD AS VVD" ).append("\n"); 
		query.append("                      ,A.VSL_CD" ).append("\n"); 
		query.append("                      ,A.SKD_VOY_NO" ).append("\n"); 
		query.append("                      ,A.SKD_DIR_CD" ).append("\n"); 
		query.append("                      ,A.REV_DIR_CD" ).append("\n"); 
		query.append("                      ,A.RLANE_CD" ).append("\n"); 
		query.append("                      ,'' AS JO_STL_JB_CD" ).append("\n"); 
		query.append("                      ,SUM(D.BSA_QTY) AS BSA_QTY" ).append("\n"); 
		query.append("                      ,D.BSA_SLT_PRC" ).append("\n"); 
		query.append("                      ,D.LOCL_CURR_CD" ).append("\n"); 
		query.append("                      ,D.ACCT_CD" ).append("\n"); 
		query.append("                      ,ROUND(SUM(D.OUS_AMT), 2) AS ESTM_AMT" ).append("\n"); 
		query.append("                      ,ROUND(SUM(D.STL_LOCL_AMT), 2) AS ACT_AMT" ).append("\n"); 
		query.append("                      ,ROUND(SUM(D.OUS_AMT) - SUM(D.STL_LOCL_AMT), 2) AS ACCL_AMT" ).append("\n"); 
		query.append("                      ,MAX(A.ESTM_VVD_TP_CD) AS ESTM_VVD_TP_CD" ).append("\n"); 
		query.append("                      ,MAX(A.VVD_TP) AS VVD_TP" ).append("\n"); 
		query.append("                      ,MAX(A.ESTM_VVD_HDR_ID) AS ESTM_VVD_HDR_ID" ).append("\n"); 
		query.append("                      ,MAX(A.ESTM_IOC_DIV_CD) AS ESTM_IOC_DIV_CD" ).append("\n"); 
		query.append("                      ,ROW_NUMBER() OVER (PARTITION BY A.REV_YRMON, D.JO_CRR_CD, A.RLANE_CD, A.VSL_CD, A.SKD_VOY_NO, A.SKD_DIR_CD, A.REV_DIR_CD, D.ACCT_CD" ).append("\n"); 
		query.append("                                              ORDER BY A.REV_YRMON, D.JO_CRR_CD, A.RLANE_CD, A.VSL_CD, A.SKD_VOY_NO, A.SKD_DIR_CD, A.REV_DIR_CD, D.ACCT_CD) AS ESTM_ACT_SEQ" ).append("\n"); 
		query.append("                  FROM GLVVD A" ).append("\n"); 
		query.append("                      ,(  --KK" ).append("\n"); 
		query.append("                        SELECT /*+ ORDERED USE_HASH(D C B A F G) FULL(C) */" ).append("\n"); 
		query.append("                               D.JO_CRR_CD" ).append("\n"); 
		query.append("                              ,D.RLANE_CD" ).append("\n"); 
		query.append("                              ,D.RE_DIVR_CD" ).append("\n"); 
		query.append("                              ,D.VSL_CD" ).append("\n"); 
		query.append("                              ,D.SKD_VOY_NO" ).append("\n"); 
		query.append("                              ,D.SKD_DIR_CD" ).append("\n"); 
		query.append("                              ,D.REV_DIR_CD" ).append("\n"); 
		query.append("                              ,D.LOCL_CURR_CD" ).append("\n"); 
		query.append("                              ,DECODE(D.RE_DIVR_CD, 'R', F.CUST_CNT_CD, 'E', '') AS CUST_CNT_CD" ).append("\n"); 
		query.append("                              ,DECODE(D.RE_DIVR_CD, 'R', F.CUST_SEQ, 'E', F.VNDR_SEQ) AS CUST_SEQ" ).append("\n"); 
		query.append("                              ,G.JO_ESTM_ACCT_CD AS ACCT_CD" ).append("\n"); 
		query.append("                              ,DECODE(D.JO_STL_ITM_CD, 'OUS', D.BSA_SLT_PRC/DECODE (D.LOCL_CURR_CD, 'USD', 1, " ).append("\n"); 
		query.append("                                  (SELECT NVL(EX1.USD_LOCL_XCH_RT,1) " ).append("\n"); 
		query.append("                                   FROM GL_MON_XCH_RT EX1" ).append("\n"); 
		query.append("                                   WHERE  EX1.CURR_CD                  = D.LOCL_CURR_CD" ).append("\n"); 
		query.append("                                         AND EX1.ACCT_XCH_RT_YRMON     = TO_CHAR(A.EFF_DT, 'YYYYMM')" ).append("\n"); 
		query.append("                                         AND EX1.ACCT_XCH_RT_LVL           = '3'" ).append("\n"); 
		query.append("                                  )  ), 0)  AS BSA_SLT_PRC" ).append("\n"); 
		query.append("                              ,DECODE(D.JO_STL_ITM_CD, 'OUS', D.BSA_QTY, 0) AS BSA_QTY" ).append("\n"); 
		query.append("                              ,DECODE(D.JO_STL_ITM_CD,'OUS', D.STL_LOCL_AMT/DECODE (D.LOCL_CURR_CD, 'USD', 1, " ).append("\n"); 
		query.append("                                  (SELECT NVL(EX1.USD_LOCL_XCH_RT,1) " ).append("\n"); 
		query.append("                                   FROM GL_MON_XCH_RT EX1" ).append("\n"); 
		query.append("                                   WHERE  EX1.CURR_CD                  = D.LOCL_CURR_CD" ).append("\n"); 
		query.append("                                         AND EX1.ACCT_XCH_RT_YRMON     = TO_CHAR(A.EFF_DT, 'YYYYMM')" ).append("\n"); 
		query.append("                                         AND EX1.ACCT_XCH_RT_LVL           = '3'" ).append("\n"); 
		query.append("                                  )  ),0) OUS_AMT" ).append("\n"); 
		query.append("                                  " ).append("\n"); 
		query.append("                              ,D.STL_LOCL_AMT/DECODE (D.LOCL_CURR_CD, 'USD', 1, " ).append("\n"); 
		query.append("                                  (SELECT NVL(EX1.USD_LOCL_XCH_RT,1) " ).append("\n"); 
		query.append("                                   FROM GL_MON_XCH_RT EX1" ).append("\n"); 
		query.append("                                   WHERE  EX1.CURR_CD                  = D.LOCL_CURR_CD" ).append("\n"); 
		query.append("                                         AND EX1.ACCT_XCH_RT_YRMON     = TO_CHAR(A.EFF_DT, 'YYYYMM')" ).append("\n"); 
		query.append("                                         AND EX1.ACCT_XCH_RT_LVL           = '3'" ).append("\n"); 
		query.append("                                  )  )  STL_LOCL_AMT" ).append("\n"); 
		query.append("                              ,A.SLP_TP_CD" ).append("\n"); 
		query.append("                              --,A.EFF_DT" ).append("\n"); 
		query.append("                          FROM JOO_SETTLEMENT D" ).append("\n"); 
		query.append("                              ,JOO_STL_CMB_DTL C" ).append("\n"); 
		query.append("                              ,JOO_STL_CMB B" ).append("\n"); 
		query.append("                              ,JOO_CSR A" ).append("\n"); 
		query.append("                              ,JOO_CARRIER F" ).append("\n"); 
		query.append("                              ,JOO_STL_ITM_ACCT G" ).append("\n"); 
		query.append("                         WHERE A.SLP_TP_CD    = B.SLP_TP_CD" ).append("\n"); 
		query.append("                           AND A.SLP_FUNC_CD  = B.SLP_FUNC_CD" ).append("\n"); 
		query.append("                           AND A.SLP_OFC_CD   = B.SLP_OFC_CD" ).append("\n"); 
		query.append("                           AND A.SLP_ISS_DT   = B.SLP_ISS_DT" ).append("\n"); 
		query.append("                           AND A.SLP_SER_NO   = B.SLP_SER_NO" ).append("\n"); 
		query.append("                           AND A.APRO_FLG     = 'Y'" ).append("\n"); 
		query.append("							--2010.03.19 REVERSE, REJECT건 제외(박효숙 차장)" ).append("\n"); 
		query.append("							--2015.10.15 REVERSE건은 보여준다(김영명 대리)" ).append("\n"); 
		query.append("                           -- AND B.RVS_CMB_FLG  = 'N'" ).append("\n"); 
		query.append("                           AND B.RJCT_CMB_FLG = 'N'" ).append("\n"); 
		query.append("                           AND B.ACCT_YRMON   = C.ACCT_YRMON" ).append("\n"); 
		query.append("                           AND B.JO_CRR_CD    = C.JO_CRR_CD" ).append("\n"); 
		query.append("                           AND B.STL_CMB_SEQ  = C.STL_CMB_SEQ" ).append("\n"); 
		query.append("                           AND B.RE_DIVR_CD   = C.RE_DIVR_CD" ).append("\n"); 
		query.append("                           AND C.ACCT_YRMON   = D.ACCT_YRMON" ).append("\n"); 
		query.append("                           AND C.STL_VVD_SEQ  = D.STL_VVD_SEQ" ).append("\n"); 
		query.append("                           AND C.STL_SEQ      = D.STL_SEQ" ).append("\n"); 
		query.append("                           AND D.JO_CRR_CD    = F.JO_CRR_CD" ).append("\n"); 
		query.append("                           AND D.RLANE_CD     = F.RLANE_CD" ).append("\n"); 
		query.append("                           AND D.RE_DIVR_CD   = G.RE_DIVR_CD" ).append("\n"); 
		query.append("                           AND D.JO_STL_ITM_CD = G.JO_STL_ITM_CD" ).append("\n"); 
		query.append("                           AND D.ACCT_YRMON  >= TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE(@[rev_yrmon_fr], '-', ''), 'YYYYMM'), -12), 'YYYYMM')" ).append("\n"); 
		query.append("                           AND D.ACCT_YRMON  <= TO_CHAR(ADD_MONTHS(TO_DATE(REPLACE(@[rev_yrmon_to], '-', ''), 'YYYYMM'),  +1), 'YYYYMM') " ).append("\n"); 
		query.append("                           AND (( A.SLP_TP_CD = '06' AND TO_CHAR(A.EFF_DT, 'YYYYMM') <= REPLACE(@[exe_yrmon], '-', ''))  OR ( A.SLP_TP_CD = '18' AND 1 = 1))" ).append("\n"); 
		query.append("                           AND D.JO_STL_ITM_CD != 'S/H'" ).append("\n"); 
		query.append("                           #if (${re_divr_cd} !='')" ).append("\n"); 
		query.append("                           AND D.RE_DIVR_CD   = @[re_divr_cd]" ).append("\n"); 
		query.append("                           #end              " ).append("\n"); 
		query.append("                           #if (${jo_crr_cd}!='')" ).append("\n"); 
		query.append("                           AND D.JO_CRR_CD    = @[jo_crr_cd]" ).append("\n"); 
		query.append("                           #end              " ).append("\n"); 
		query.append("                           #if (${trd_cd}!='')" ).append("\n"); 
		query.append("                           AND D.TRD_CD       = @[trd_cd]" ).append("\n"); 
		query.append("                           #end              " ).append("\n"); 
		query.append("                           #if (${rlane_cd}!='')" ).append("\n"); 
		query.append("                           AND D.RLANE_CD     = @[rlane_cd]" ).append("\n"); 
		query.append("                           #end              " ).append("\n"); 
		query.append("                           AND A.APRO_DT <= NVL((" ).append("\n"); 
		query.append("                                                 SELECT LST_UPD_DT" ).append("\n"); 
		query.append("                                                   FROM AP_PERIOD" ).append("\n"); 
		query.append("                                                  WHERE SYS_DIV_CD = '25'" ).append("\n"); 
		query.append("                                                    AND EFF_YRMON  = REPLACE(@[exe_yrmon], '-', '')" ).append("\n"); 
		query.append("                                                    AND OFC_CD     = 'SELHO'" ).append("\n"); 
		query.append("                                                    AND CLZ_STS_CD = 'C')" ).append("\n"); 
		query.append("                                                 ,SYSDATE)" ).append("\n"); 
		query.append("                       ) D  --KK" ).append("\n"); 
		query.append("                  WHERE A.VSL_CD     = D.VSL_CD    " ).append("\n"); 
		query.append("                    AND A.SKD_VOY_NO = D.SKD_VOY_NO" ).append("\n"); 
		query.append("                    AND A.SKD_DIR_CD = D.SKD_DIR_CD" ).append("\n"); 
		query.append("                    AND A.REV_DIR_CD = D.REV_DIR_CD" ).append("\n"); 
		query.append("               GROUP BY A.EXE_YRMON" ).append("\n"); 
		query.append("                       ,A.REV_YRMON" ).append("\n"); 
		query.append("                       ,D.JO_CRR_CD" ).append("\n"); 
		query.append("                       ,D.CUST_CNT_CD" ).append("\n"); 
		query.append("                       ,D.CUST_SEQ" ).append("\n"); 
		query.append("                       ,A.VSL_CD" ).append("\n"); 
		query.append("                       ,A.SKD_VOY_NO" ).append("\n"); 
		query.append("                       ,A.SKD_DIR_CD" ).append("\n"); 
		query.append("                       ,A.REV_DIR_CD" ).append("\n"); 
		query.append("                       ,A.RLANE_CD" ).append("\n"); 
		query.append("                       ,D.BSA_SLT_PRC" ).append("\n"); 
		query.append("                       ,D.LOCL_CURR_CD" ).append("\n"); 
		query.append("                       ,D.ACCT_CD" ).append("\n"); 
		query.append("                       ,D.SLP_TP_CD" ).append("\n"); 
		query.append("                       --,D.EFF_DT" ).append("\n"); 
		query.append("               ) X  --DDD" ).append("\n"); 
		query.append("              ,JOO_ESTM_ACT_RSLT R" ).append("\n"); 
		query.append("              ,GL_ESTM_IF_ERP    E" ).append("\n"); 
		query.append("              ,(" ).append("\n"); 
		query.append("                SELECT LOC_CD " ).append("\n"); 
		query.append("                  FROM MDM_ORGANIZATION " ).append("\n"); 
		query.append("                 WHERE OFC_CD = @[ofc_cd]" ).append("\n"); 
		query.append("               ) F" ).append("\n"); 
		query.append("              ,(" ).append("\n"); 
		query.append("                SELECT A.INTG_CD_VAL_CTNT AS CODE" ).append("\n"); 
		query.append("                      ,A.INTG_CD_VAL_DP_DESC AS NAME " ).append("\n"); 
		query.append("                  FROM COM_INTG_CD_DTL A " ).append("\n"); 
		query.append("                 WHERE A.INTG_CD_ID = 'CD01866'" ).append("\n"); 
		query.append("               ) G" ).append("\n"); 
		query.append("         WHERE TO_CHAR(ADD_MONTHS(TO_DATE(X.EXE_YRMON,'YYYYMM'),-1),'YYYYMM') = R.EXE_YRMON(+)" ).append("\n"); 
		query.append("           AND X.REV_YRMON               = R.REV_YRMON      (+)" ).append("\n"); 
		query.append("           AND X.JO_CRR_CD               = R.JO_CRR_CD      (+)" ).append("\n"); 
		query.append("           AND X.RLANE_CD                = R.RLANE_CD       (+)" ).append("\n"); 
		query.append("           AND X.VSL_CD                  = R.VSL_CD         (+)" ).append("\n"); 
		query.append("           AND X.SKD_VOY_NO              = R.SKD_VOY_NO     (+)" ).append("\n"); 
		query.append("           AND X.SKD_DIR_CD              = R.SKD_DIR_CD     (+)" ).append("\n"); 
		query.append("           AND X.REV_DIR_CD              = R.REV_DIR_CD     (+)" ).append("\n"); 
		query.append("           --AND X.ESTM_VVD_TP_CD          = R.ESTM_VVD_TP_CD (+)" ).append("\n"); 
		query.append("           AND X.ACCT_CD                 = R.ACCT_CD        (+)" ).append("\n"); 
		query.append("           AND X.JO_STL_JB_CD            = R.ESTM_ACT_SEQ   (+)" ).append("\n"); 
		query.append("           AND NVL(X.EXE_YRMON,'A')      = E.EXE_YRMON      (+)" ).append("\n"); 
		query.append("           AND E.SYS_SRC_ID(+)           = 'JOO'" ).append("\n"); 
		query.append("           AND NVL(X.REV_YRMON ,'A')     = E.REV_YRMON      (+)" ).append("\n"); 
		query.append("           AND NVL(X.VSL_CD    ,'A')     = E.VSL_CD         (+)" ).append("\n"); 
		query.append("           AND NVL(X.SKD_VOY_NO,'A')     = E.SKD_VOY_NO     (+)" ).append("\n"); 
		query.append("           AND NVL(X.SKD_DIR_CD,'A')     = E.SKD_DIR_CD     (+)" ).append("\n"); 
		query.append("           AND NVL(X.REV_DIR_CD,'A')     = E.REV_DIR_CD     (+)" ).append("\n"); 
		query.append("           AND NVL(X.ACCT_CD   ,'A')     = E.ACCT_CD        (+)" ).append("\n"); 
		query.append("           AND NVL(X.ESTM_VVD_HDR_ID,'A')= NVL(E.ESTM_VVD_HDR_ID(+),'A')" ).append("\n"); 
		query.append("           AND NVL(X.JO_CRR_CD ,'A')     = NVL(E.CRR_CD         (+),'A')" ).append("\n"); 
		query.append("           AND NVL(X.JO_STL_JB_CD,'101') = NVL(E.AGMT_NO(+),'101') --사용하지 않는 COLUMN이므로 임의로 사용함" ).append("\n"); 
		query.append("           AND NVL(X.RLANE_CD,'A')       = NVL(E.WO_NO(+),'A')" ).append("\n"); 
		query.append("           AND NVL(X.ESTM_VVD_TP_CD,'A') = NVL(E.ESTM_VVD_TP_CD (+),'A')" ).append("\n"); 
		query.append("           AND NVL(X.ESTM_IOC_DIV_CD,'A')= NVL(E.ESTM_IOC_DIV_CD(+),'A')" ).append("\n"); 
		query.append("           AND NVL(X.BSA_QTY,0)          = NVL(E.BSA_SLT_QTY(+),0)" ).append("\n"); 
		query.append("           AND NVL(X.BSA_SLT_PRC,0)      = NVL(E.SLT_COST_AMT(+),0)" ).append("\n"); 
		query.append("           AND TRUNC(NVL(X.ESTM_AMT,0),2)= TRUNC(NVL(E.ESTM_AMT(+),0),2)" ).append("\n"); 
		query.append("           --AND    NVL(X.CUST_CNT_CD,'A')= NVL(E.CUST_CNT_CD(+),'A')" ).append("\n"); 
		query.append("           --AND    NVL(X.CUST_SEQ,0)     = NVL(E.CUST_SEQ(+),0)" ).append("\n"); 
		query.append("           AND NVL(ROUND(PSO_CONV_CURR_USD_FNC(X.LOCL_CURR_CD, X.ACT_AMT, X.REV_YRMON,3),2),0) = NVL(E.ACT_AMT(+),0)" ).append("\n"); 
		query.append("           AND X.JO_STL_JB_CD          = G.CODE(+)" ).append("\n"); 
		query.append("       ) A  -- EEE" ).append("\n"); 
		query.append("      ,JOO_ESTM_ACT_RSLT B" ).append("\n"); 
		query.append(" WHERE A.EXE_YRMON      = B.EXE_YRMON(+)" ).append("\n"); 
		query.append("   AND A.REV_YRMON      = B.REV_YRMON(+)" ).append("\n"); 
		query.append("   AND A.JO_CRR_CD      = B.JO_CRR_CD(+)" ).append("\n"); 
		query.append("   AND A.RLANE_CD       = B.RLANE_CD(+)" ).append("\n"); 
		query.append("   AND A.VSL_CD         = B.VSL_CD(+)" ).append("\n"); 
		query.append("   AND A.SKD_VOY_NO     = B.SKD_VOY_NO(+)" ).append("\n"); 
		query.append("   AND A.SKD_DIR_CD     = B.SKD_DIR_CD(+)" ).append("\n"); 
		query.append("   AND A.REV_DIR_CD     = B.REV_DIR_CD(+)" ).append("\n"); 
		query.append("   --AND A.ESTM_VVD_TP_CD = B.ESTM_VVD_TP_CD(+)" ).append("\n"); 
		query.append("   AND A.ACCT_CD        = B.ACCT_CD(+)" ).append("\n"); 
		query.append("   AND A.ESTM_ACT_SEQ   = B.ESTM_ACT_SEQ(+)" ).append("\n"); 
		query.append("ORDER BY ACCT_CD, REV_YRMON, VVD" ).append("\n"); 

	}
}