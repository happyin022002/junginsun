<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="SettlementProcessDBDAOSearchTDRDownloadSumListByLaneRSQL">
			<desc><![CDATA[I-Strorage조회(Merge)]]></desc>
			<sql><![CDATA[
WITH MERGE_DATA AS(
    
    SELECT @[merge_crr] CRR_CD
         , A.TRD_CD
         , A.RLANE_CD
         , A.REV_DIR_CD
         , A.RE_DIVR_CD
         , A.VSL_CD
         , A.SKD_VOY_NO
         , A.SKD_DIR_CD
         , A.VPS_PORT_CD
         , A.YD_CD
         , A.CLPT_IND_SEQ
         , SUBSTR(A.RLANE_CD,0,3) AS SLAN_CD
         , A.VPS_ETD_DT
         , SUM(A.TTL_SLT_KNT) AS TTL_SLT_KNT
         , SUM(A.HC_20FT_FCNTR_KNT) AS HC_20FT_FCNTR_KNT
         , SUM(A.HC_20FT_MCNTR_KNT) AS HC_20FT_MCNTR_KNT
         , SUM(A.HC_40FT_FCNTR_KNT) AS HC_40FT_FCNTR_KNT
         , SUM(A.HC_40FT_MCNTR_KNT) AS HC_40FT_MCNTR_KNT
         , SUM(A.FCNTR_45FT_KNT) AS FCNTR_45FT_KNT
         , SUM(A.MCNTR_45FT_KNT) AS MCNTR_45FT_KNT
         , SUM(A.AWK_CNTR_KNT) AS AWK_CNTR_KNT
         , SUM(A.AWK_VOID_CNTR_KNT) AS AWK_VOID_CNTR_KNT
         , SUM(A.DG_20FT_CNTR_KNT) AS DG_20FT_CNTR_KNT
         , SUM(A.DG_40FT_CNTR_KNT) AS DG_40FT_CNTR_KNT
         , SUM(A.RF_20FT_CNTR_KNT) AS RF_20FT_CNTR_KNT
         , SUM(A.RF_40FT_CNTR_KNT) AS RF_40FT_CNTR_KNT
         , SUM(A.CNTR_TEU_QTY) AS CNTR_TEU_QTY
         , SUM(A.FCNTR_20FT_KNT) AS FCNTR_20FT_KNT
         , SUM(A.MCNTR_20FT_KNT) AS MCNTR_20FT_KNT
         , SUM(A.FCNTR_40FT_KNT) AS FCNTR_40FT_KNT
         , SUM(A.MCNTR_40FT_KNT) AS MCNTR_40FT_KNT
         , SUM(A.CNTR_WGT) AS CNTR_WGT
         , SUM(A.TTL_SLT_WGT) TTL_SLT_WGT
         , 1 SUB_CHK
         , 'IST'  AS SOURCE
      FROM JOO_BAY_PLN A
     WHERE 1 = 1
       AND A.RLANE_CD LIKE @[rlane_cd] || '%'
       #if (${vvd} != '')   
       AND A.VSL_CD LIKE SUBSTR(@[vvd], 1, 4) || '%'
       AND A.SKD_VOY_NO LIKE SUBSTR(@[vvd], 5, 4) || '%'
       AND A.SKD_DIR_CD LIKE SUBSTR(@[vvd], 9, 1) || '%'
       #end
       #if (${vps_port_cd} != '')
       AND A.VPS_PORT_CD = @[vps_port_cd]
       #end
       #if (${skd_dir_cd} != '')
       AND A.SKD_DIR_CD = @[skd_dir_cd]
       #end
       #if (${opr_cd} != '')
       AND A.CRR_CD IN (
			#foreach($key IN ${opr_cd2})
				#if($velocityCount < $opr_cd2.size())
					'${key}',
				#else
					'$key'
				#end
			#end
       )
       #end
       AND A.VPS_ETD_DT BETWEEN TO_DATE(REPLACE (@[pre_fr], '-', '') || '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(REPLACE (@[pre_to], '-', '') || '235959', 'YYYYMMDDHH24MISS')
     GROUP BY A.TRD_CD
            , A.RLANE_CD
            , A.REV_DIR_CD
            , A.RE_DIVR_CD
            , A.VSL_CD
            , A.SKD_VOY_NO
            , A.SKD_DIR_CD
            , A.VPS_PORT_CD
            , A.YD_CD
            , A.CLPT_IND_SEQ
            , A.SLAN_CD
            , A.VPS_ETD_DT
)
SELECT A.CRR_CD
     , A.TRD_CD
     , A.RLANE_CD
     , A.REV_DIR_CD
     , A.RE_DIVR_CD
     , A.VSL_CD
     , A.SKD_VOY_NO
     , A.SKD_DIR_CD
     , A.VPS_PORT_CD
     , A.YD_CD
     , A.CLPT_IND_SEQ
     , A.CLPT_SEQ
     , A.PORT_SKD_STS
     , A.RDR_FLG
     , A.SLAN_CD
     , A.VPS_ETD_DT
     , A.GRAND_TTL_SLOT
     , A.GRAND_TTL_WGT
     , A.HC_LD_20
     , A.HC_BSA_20
     , A.HC_LD_40
     , A.HC_BSA_40
     , A.HC_LD_45
     , A.HC_BSA_45
     , A.AK_UNIT
     , A.AK_VOID
     , A.DG_20
     , A.DG_40
     , A.RF_20_QTY
     , A.RF_40_QTY
     , A.RF_RDR_QTY
     , A.MT_TEU
     , A.FULL_20
     , A.MT_20
     , A.FULL_40
     , A.MT_40
     , A.MT_WT
     , A.JO_20FT_N1ST_RTO
     , A.JO_20FT_SUB_TEU_QTY
     , A.JO_40FT_N1ST_RTO
     , A.JO_40FT_SUB_TEU_QTY
     , A.JO_45FT_N1ST_RTO
     , A.JO_45FT_N2ND_RTO
     , A.JO_45FT_SUB_TEU_QTY
     , A.JO_RND_RULE_LVL
     , A.TEU_QTY
     , A.ALL_TEU
     , A.ALL_WGT
     , A.BSA_FLG
     , TGT.REV_YRMON
     , TGT.REV_YRMON_SEQ
     , NVL(TGT.STL_TGT_FLG, 0) AS STL_TGT_FLG
     , NVL(TGT.STL_TGT_FLG, 0) AS STL_TGT_FLG2
     , NVL(TGT.STL_CLZ_FLG, 0) AS STL_CLZ_FLG
     ,(
         SELECT NVL(MAX(J3.ACCT_YRMON),'999912') AS ACCT_YRMON
         FROM JOO_STL_TGT J2, JOO_SETTLEMENT J3
         WHERE J2.REV_YRMON = TGT.REV_YRMON
           AND J2.REV_YRMON_SEQ = TGT.REV_YRMON_SEQ
           AND J2.ACCT_YRMON = J3.ACCT_YRMON(+)
           AND J2.STL_VVD_SEQ = J3.STL_VVD_SEQ(+)
           AND J2.STL_SEQ = J3.STL_SEQ(+)
           AND J2.CRR_CD = J3.JO_CRR_CD(+)
           AND J2.TRD_CD = J3.TRD_CD(+)
           AND J2.RLANE_CD = J3.RLANE_CD(+)
           AND J2.CRR_CD = @[merge_crr]
           AND J3.JO_CRR_CD (+)= @[merge_crr]
       ) ACCT_YRMON	 
     , TGT.JO_STL_RMK_CD AS RMK_FLG
     , TGT.JO_STL_RMK AS RMK
     , SUB_CHK
     , SOURCE
     , MIN(TO_CHAR(A.VPS_ETD_DT, 'YYYYMMDDHH24MISS')) OVER (PARTITION BY A.VSL_CD || A.SKD_VOY_NO || A.SKD_DIR_CD) AS VVD_ETD_GROUP
  FROM
  (
    SELECT @[merge_crr] CRR_CD
         , A.TRD_CD
         , A.RLANE_CD
         , A.REV_DIR_CD
         , A.RE_DIVR_CD
         , A.VSL_CD
         , A.SKD_VOY_NO
         , A.SKD_DIR_CD
         , A.VPS_PORT_CD
         , A.YD_CD
         , A.CLPT_IND_SEQ
         , LPAD(MAX(VSK.CLPT_SEQ), 2, '0') || (
           SELECT '/' || LPAD(MAX(CLPT_SEQ), 2, '0')
             FROM VSK_VSL_PORT_SKD Q
            WHERE VSK.VSL_CD = Q.VSL_CD
              AND VSK.SKD_VOY_NO = Q.SKD_VOY_NO
              AND VSK.SKD_DIR_CD = Q.SKD_DIR_CD
              AND Q.TURN_PORT_IND_CD NOT IN ('D','V','F')       
              AND NVL(Q.SKD_CNG_STS_CD, 'A') <>  'S'         
         ) CLPT_SEQ
         , (
             SELECT DECODE(INTG_CD_VAL_DP_DESC, NULL, INTG_CD_VAL_DESC, INTG_CD_VAL_DP_DESC) AS CODE_DESC
               FROM COM_INTG_CD_DTL
              WHERE INTG_CD_ID = 'CD01821'
                AND INTG_CD_VAL_CTNT = VSK.PORT_SKD_STS_CD
         ) AS PORT_SKD_STS  
         ,CASE WHEN JRDR.RDR_FLG = 'Y' THEN 'R'
               WHEN JRDR.RDR_FLG = 'N' THEN ''
          ELSE DECODE(A.VPS_PORT_CD,RDR.PORT_CD,'R','')
          END AS RDR_FLG
         , SUBSTR(A.RLANE_CD,0,3) AS SLAN_CD
         , A.VPS_ETD_DT
         , SUM(A.TTL_SLT_KNT) AS GRAND_TTL_SLOT
         , DECODE(DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_OVR_TON_WGT), 0), NVL(MAX(PRT_BSA.JO_OVR_TON_WGT), 0)), 0, 0, SUM(A.TTL_SLT_WGT)) AS GRAND_TTL_WGT
         , SUM(A.HC_20FT_FCNTR_KNT) AS HC_LD_20
         , SUM(A.HC_20FT_MCNTR_KNT) AS HC_BSA_20
         , SUM(A.HC_40FT_FCNTR_KNT) AS HC_LD_40
         , SUM(A.HC_40FT_MCNTR_KNT) AS HC_BSA_40
         , SUM(A.FCNTR_45FT_KNT) AS HC_LD_45
         , SUM(A.MCNTR_45FT_KNT) AS HC_BSA_45
         , SUM(A.AWK_CNTR_KNT) AS AK_UNIT
         , SUM(A.AWK_VOID_CNTR_KNT) AS AK_VOID
         , SUM(A.DG_20FT_CNTR_KNT) AS DG_20
         , SUM(A.DG_40FT_CNTR_KNT) AS DG_40
         , SUM(A.RF_20FT_CNTR_KNT) AS RF_20_QTY
         , SUM(A.RF_40FT_CNTR_KNT) AS RF_40_QTY
         ,(
             SELECT COUNT(1)
             FROM BAY_PLAN BB
             WHERE 1=1
             AND BB.VSL_CD     = A.VSL_CD
             AND BB.VOY_NO     = A.SKD_VOY_NO
             AND BB.DIR_CD     = A.SKD_DIR_CD
             AND BB.PORT_CD    = A.VPS_PORT_CD
             AND BB.CALL_IND   = A.CLPT_IND_SEQ
             AND BB.OPR_CD     IN (
                 #foreach($key IN ${opr_cd2})
                     #if($velocityCount < $opr_cd2.size())
                         '${key}',
                     #else
                         '$key'
                     #end
                 #end
             )
             AND (BB.CARGO_TYPE = 'RF' OR BB.TEMP IS NOT NULL)
             AND BB.PLAN_TYPE = 'F'                       
         ) RF_RDR_QTY
         , SUM(A.CNTR_TEU_QTY) AS MT_TEU
         , SUM(A.FCNTR_20FT_KNT) AS FULL_20
         , SUM(A.MCNTR_20FT_KNT) AS MT_20
         , SUM(A.FCNTR_40FT_KNT) AS FULL_40
         , SUM(A.MCNTR_40FT_KNT) AS MT_40
         , SUM(A.CNTR_WGT) AS MT_WT
         
         -- JOO BSA AGMT 데이터 출력 DECODE(PORT_BSA, NULL, ALL_BSA, PORT_BSA) 1순위 : PORT별설정, 2순위 ALL설정, 3순위 NULL
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_20FT_OVR_RTO), 0),        NVL(MAX(PRT_BSA.JO_20FT_OVR_RTO), 0)) * 2 AS JO_20FT_N1ST_RTO
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_20FT_SUB_TEU_QTY), 0),    NVL(MAX(PRT_BSA.JO_20FT_SUB_TEU_QTY), 0)) AS JO_20FT_SUB_TEU_QTY
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_40FT_OVR_RTO), 0),        NVL(MAX(PRT_BSA.JO_40FT_OVR_RTO), 0)) * 2 AS JO_40FT_N1ST_RTO
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_40FT_SUB_TEU_QTY), 0),    NVL(MAX(PRT_BSA.JO_40FT_SUB_TEU_QTY), 0)) AS JO_40FT_SUB_TEU_QTY
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_45FT_UND_RTO), 0),        NVL(MAX(PRT_BSA.JO_45FT_UND_RTO), 0)) * 2 AS JO_45FT_N1ST_RTO
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_45FT_OVR_RTO), 0),        NVL(MAX(PRT_BSA.JO_45FT_OVR_RTO), 0)) * 2 AS JO_45FT_N2ND_RTO
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_45FT_SUB_TEU_QTY), 0),    NVL(MAX(PRT_BSA.JO_45FT_SUB_TEU_QTY), 0)) AS JO_45FT_SUB_TEU_QTY	
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_RND_RULE_LVL), 4),        NVL(MAX(PRT_BSA.JO_RND_RULE_LVL), 4))     AS JO_RND_RULE_LVL
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_TON_TEU_QTY), 0),         NVL(MAX(PRT_BSA.JO_TON_TEU_QTY), 0))      AS TEU_QTY  
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_OVR_BSA_TEU_QTY), 0),     NVL(MAX(PRT_BSA.JO_OVR_BSA_TEU_QTY), 0))  AS ALL_TEU
         , DECODE(MAX(PRT_BSA.TRD_CD),   NULL,   NVL(MAX(ALL_BSA.JO_OVR_TON_WGT), 0),         NVL(MAX(PRT_BSA.JO_OVR_TON_WGT), 0))      AS ALL_WGT
         , CASE WHEN MAX(PRT_BSA.TRD_CD) IS NULL AND MAX(ALL_BSA.TRD_CD) IS NULL THEN ''
                WHEN MAX(PRT_BSA.TRD_CD) IS NOT NULL THEN 'P'
           ELSE 'A'
           END BSA_FLG
         , 1 SUB_CHK
         , 'IST'  AS SOURCE
      FROM MERGE_DATA A
         , JOO_BSA_AGMT ALL_BSA 
         , JOO_BSA_AGMT PRT_BSA
         , VSK_VSL_PORT_SKD VSK
         , RDR_HEADER RDR
         , JOO_RDR_PORT JRDR
     WHERE 1 = 1
       ----- BSA ALL DATA JOIN START ------------------
       AND A.TRD_CD = ALL_BSA.TRD_CD(+)
       AND A.RLANE_CD = ALL_BSA.RLANE_CD(+)
       AND A.VSL_CD = ALL_BSA.VSL_CD(+)
       AND A.SKD_VOY_NO = ALL_BSA.SKD_VOY_NO(+)
       AND A.SKD_DIR_CD = ALL_BSA.SKD_DIR_CD(+)
       AND A.CRR_CD = ALL_BSA.JO_CRR_CD(+)
       AND A.RE_DIVR_CD = ALL_BSA.RE_DIVR_CD(+)
       AND ALL_BSA.JO_CRR_CD(+) = @[merge_crr]
       AND ALL_BSA.PORT_CD(+) = 'ALL'
       AND ALL_BSA.DELT_FLG(+) = 'N'	
       AND ALL_BSA.RE_DIVR_CD(+) = 'R'	
       ----- BSA PORT ALL DATA JOIN END ---------------
       
       ----- BSA PORT 개별 DATA JOIN START ------------
       AND A.TRD_CD = PRT_BSA.TRD_CD(+)
       AND A.RLANE_CD = PRT_BSA.RLANE_CD(+)
       AND A.VSL_CD = PRT_BSA.VSL_CD(+)
       AND A.SKD_VOY_NO = PRT_BSA.SKD_VOY_NO(+)
       AND A.SKD_DIR_CD = PRT_BSA.SKD_DIR_CD(+)
       AND A.VPS_PORT_CD = PRT_BSA.PORT_CD(+)
       AND A.CLPT_IND_SEQ = PRT_BSA.PORT_SEQ(+)
       AND A.CRR_CD = PRT_BSA.JO_CRR_CD(+)
       AND A.RE_DIVR_CD = PRT_BSA.RE_DIVR_CD(+)
       AND PRT_BSA.JO_CRR_CD(+) = @[merge_crr]
       AND PRT_BSA.DELT_FLG(+) = 'N'	
       AND PRT_BSA.RE_DIVR_CD(+) = 'R'	
       ----- BSA PORT 개별 DATA JOIN END --------------

       ----- VVD PORT SKD JOIN START ------------------
       AND A.VSL_CD = VSK.VSL_CD
       AND A.SKD_VOY_NO = VSK.SKD_VOY_NO
       AND A.SKD_DIR_CD = VSK.SKD_DIR_CD
       AND A.VPS_PORT_CD = VSK.VPS_PORT_CD
       AND A.YD_CD = VSK.YD_CD
       AND A.CLPT_IND_SEQ = VSK.CLPT_IND_SEQ
       AND A.SLAN_CD = VSK.SLAN_CD
       ----- VVD SKD JOIN END -------------------------
       
       ------ RDR_HEADER JOIN START -------------------
       AND A.VSL_CD 		= RDR.VSL_CD(+)
       AND A.SKD_VOY_NO 	= RDR.VOY_NO(+) 
       AND A.SKD_DIR_CD 	= RDR.DIR_CD(+)  
       AND A.VPS_PORT_CD 	= RDR.PORT_CD(+)
       ------ RDR_HEADER JOIN END ---------------------
       ------ JOO RDR PORT JOIN START -----------------
       AND A.VSL_CD       = JRDR.VSL_CD(+)
       AND A.SKD_VOY_NO   = JRDR.SKD_VOY_NO(+)
       AND A.SKD_DIR_CD   = JRDR.SKD_DIR_CD(+)  
       AND A.VPS_PORT_CD  = JRDR.VPS_PORT_CD(+)  
       AND A.CLPT_IND_SEQ = JRDR.CLPT_IND_SEQ(+)
       AND A.SLAN_CD      = JRDR.SLAN_CD(+)
       AND A.YD_CD        = JRDR.YD_CD(+)
       ------ JOO RDR PORT JOIN END -------------------
       AND A.RLANE_CD LIKE @[rlane_cd] || '%'
       #if (${vvd} != '')   
       AND A.VSL_CD LIKE SUBSTR(@[vvd], 1, 4) || '%'
       AND A.SKD_VOY_NO LIKE SUBSTR(@[vvd], 5, 4) || '%'
       AND A.SKD_DIR_CD LIKE SUBSTR(@[vvd], 9, 1) || '%'
       #end
       #if (${vps_port_cd} != '')
       AND A.VPS_PORT_CD = @[vps_port_cd]
       #end
       #if (${skd_dir_cd} != '')
       AND A.SKD_DIR_CD = @[skd_dir_cd]
       #end
       #if (${opr_cd} != '')
       AND A.CRR_CD IN (
			#foreach($key IN ${opr_cd2})
				#if($velocityCount < $opr_cd2.size())
					'${key}',
				#else
					'$key'
				#end
			#end
       )
       #end
       AND A.VPS_ETD_DT BETWEEN TO_DATE(REPLACE (@[pre_fr], '-', '') || '000000', 'YYYYMMDDHH24MISS') AND TO_DATE(REPLACE (@[pre_to], '-', '') || '235959', 'YYYYMMDDHH24MISS')
     GROUP BY A.TRD_CD
            , A.RLANE_CD
            , A.REV_DIR_CD
            , A.RE_DIVR_CD
            , A.VSL_CD
            , A.SKD_VOY_NO
            , A.SKD_DIR_CD
            , A.VPS_PORT_CD
            , A.YD_CD
            , A.CLPT_IND_SEQ
            , A.SLAN_CD
            , A.VPS_ETD_DT
            , VSK.VSL_CD
            , VSK.SKD_VOY_NO
            , VSK.SKD_DIR_CD
            , VSK.PORT_SKD_STS_CD
            , JRDR.RDR_FLG
            , RDR.PORT_CD
  ) A, JOO_LODG_TGT TGT
 WHERE 1 = 1
   ------ JOO LODG TGT JOIN START -----------------
   AND A.VSL_CD        = TGT.VSL_CD(+)
   AND A.SKD_VOY_NO    = TGT.SKD_VOY_NO(+)
   AND A.SKD_DIR_CD    = TGT.SKD_DIR_CD(+)
   AND A.VPS_PORT_CD   = TGT.VPS_PORT_CD(+)
   AND A.YD_CD         = TGT.YD_CD(+)
   AND A.CLPT_IND_SEQ  = TGT.CLPT_IND_SEQ(+)
   AND A.CRR_CD        = TGT.CRR_CD(+)
   AND A.RLANE_CD      = TGT.RLANE_CD(+)
   AND A.TRD_CD        = TGT.TRD_CD(+)
   AND A.RE_DIVR_CD    = TGT.RE_DIVR_CD(+)
   AND TGT.CRR_CD(+)   = @[merge_crr]
   ------ JOO LODG TGT JOIN END -------------------
   #if (${opt_tgt} == 'T') 
   AND TGT.STL_TGT_FLG = '1'
   #end
   #if (${opt_tgt} == 'N')
   AND TGT.STL_TGT_FLG = '0' 
   #end
   #if (${opt_clz} == 'C') 
   AND TGT.STL_CLZ_FLG = '1'
   #end
   #if (${opt_clz} == 'N')
   AND TGT.STL_CLZ_FLG = '0' 
   #end
 ORDER BY VVD_ETD_GROUP, VSL_CD || SKD_VOY_NO || SKD_DIR_CD, VPS_ETD_DT, VPS_PORT_CD, CRR_CD			]]></sql>
			<params>
				<param name="merge_crr" type="12" value="" out="N"/>
				<param name="rlane_cd" type="12" value="" out="N"/>
				<param name="vvd" type="12" value="" out="N"/>
				<param name="vps_port_cd" type="12" value="" out="N"/>
				<param name="skd_dir_cd" type="12" value="" out="N"/>
				<param name="pre_fr" type="12" value="" out="N"/>
				<param name="pre_to" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
