<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="MarineTerminalStorageInvoiceManageDBDAOVerifyStorageInvoiceVolumneRSQL">
			<desc><![CDATA[VerifyStorageInvoiceVolumne]]></desc>
			<sql><![CDATA[
SELECT X.*
FROM (
	SELECT DENSE_RANK() OVER (PARTITION BY Z.TML_SO_TMP_SEQ, Z.CNTR_NO ORDER BY Z.GT_IN_DT_DIFF ASC) DIFF_RANK,
			Z.CNTR_NO,
			Z.CNTR_TPSZ_CD,
			TO_CHAR(Z.INV_GATE_IN_DT, 'YYYYMMDDHH24MI') INV_GATE_IN_DT,
			TO_CHAR(Z.INV_GATE_OUT_DT, 'YYYYMMDDHH24MI') INV_GATE_OUT_DT,
			TO_CHAR(Z.MVMT_GATE_IN_DT, 'YYYYMMDDHH24MI') MVMT_GATE_IN_DT,
			TO_CHAR(Z.MVMT_GATE_OUT_DT, 'YYYYMMDDHH24MI') MVMT_GATE_OUT_DT,
			TRUNC(Z.MVMT_GATE_IN_DT - Z.INV_GATE_IN_DT) GATE_IN_TD_DYS,
			TRUNC(DECODE(Z.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), Z.MVMT_GATE_OUT_DT) - Z.INV_GATE_OUT_DT) GATE_OUT_TD_DYS,
			TRUNC(DECODE(Z.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), Z.MVMT_GATE_OUT_DT) - Z.MVMT_GATE_IN_DT) MVMT_STAY_DYS,
			TRUNC(Z.INV_GATE_OUT_DT - Z.INV_GATE_IN_DT) INV_STAY_DYS,
			TRUNC((DECODE(Z.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), Z.MVMT_GATE_OUT_DT) - Z.MVMT_GATE_IN_DT)) - TRUNC(Z.INV_GATE_OUT_DT - Z.INV_GATE_IN_DT) STAY_DIFF_DYS,
			Z.CNTR_STY_CD,
			Z.IO_BND_CD,
			Z.LOCL_TS_IND_CD,
			Z.DCGO_CLSS_CD,
			Z.BB_CGO_FLG,
			Z.RC_FLG,
			Z.AWK_CGO_FLG,
			Z.DSCR_IND_CD,
			Z.BKG_NO,
			Z.BL_NO,
			Z.BL_NO_TP,
			Z.VSL_CD,
			Z.SKD_VOY_NO,
			Z.SKD_DIR_CD,
			CASE 
			WHEN Z.DSCR_IND_CD IN ('DD', 'DP', 'HO', 'PD', 'NH', 'DB', 'DF', 'AM') 
			THEN 'DC' 
			ELSE 'CO' 
			END VRFY_RSLT_IND_CD,
			CASE 
			WHEN Z.DSCR_IND_CD IS NULL 
			THEN 'Y' 
			ELSE '' 
			END CO_FLG,
			CASE 
			WHEN Z.DSCR_IND_CD IS NOT NULL 
			THEN 'Y' 
			ELSE '' 
			END DC_FLG, 
			CASE 
			WHEN Z.DSCR_IND_CD = 'DB' 
			THEN (
				SELECT A.INV_NO
				FROM TES_TML_SO_HDR A,
				  TES_TML_SO_CNTR_LIST B
				WHERE A.TML_SO_OFC_CTY_CD = B.TML_SO_OFC_CTY_CD
				  AND A.TML_SO_SEQ = B.TML_SO_SEQ
				  AND A.VNDR_SEQ = Z.VNDR_SEQ
				  AND A.YD_CD = Z.YD_CD
				  AND B.CNTR_NO = Z.CNTR_NO
				  AND B.CNTR_STY_CD = Z.CNTR_STY_CD
				  AND A.INV_NO <> @[inv_no]
				  AND NVL(A.DELT_FLG, 'N') <> 'Y'
				  AND A.TML_INV_TP_CD = 'ST'
				  AND A.TML_INV_RJCT_STS_CD <> 'RJ'
				  AND A.UPD_DT >= Z.MIN_INV_GATE_IN_DT
				  AND ABS(MONTHS_BETWEEN(Z.MVMT_GATE_IN_DT, B.MVMT_GATE_IN_DT)) <= 0.25
				  AND CASE 
					  WHEN (SIGN(A.TO_PRD_DT-A.FM_PRD_DT)>0 AND SIGN(replace(@[fm_prd_dt], '-')-A.TO_PRD_DT)>0)
						OR (SIGN(A.TO_PRD_DT-A.FM_PRD_DT)>0 AND SIGN(A.FM_PRD_DT- replace(@[to_prd_dt], '-'))>0) 
					  THEN  'N' 
					  ELSE  'Y' 
					  END = 'Y'
				  AND CASE 
					  WHEN (SIGN(Z.MVMT_GATE_IN_DT-B.MVMT_GATE_IN_DT)>0 AND SIGN(DECODE(Z.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), Z.MVMT_GATE_OUT_DT) - B.MVMT_GATE_IN_DT)>0)
						OR (SIGN(Z.MVMT_GATE_IN_DT-B.MVMT_GATE_IN_DT)<0 AND SIGN(B.MVMT_GATE_OUT_DT-Z.MVMT_GATE_IN_DT)>0) 
					  THEN  'N' 
					  ELSE  'Y' 
					  END = 'Y'
				  AND ROWNUM = 1) 
			ELSE '' 
			END CNTR_RMK
    FROM (
            SELECT    ORG.CNTR_NO,
                      MC.CNTR_TPSZ_CD CNTR_TPSZ_CD,
                      ORG.INV_GATE_IN_DT,
                      ORG.INV_GATE_OUT_DT,
                      ORG.MIN_INV_GATE_IN_DT,
                      CASE 
                      WHEN ORG.CNTR_STY_CD = 'F'
                        AND CALC.CNTR_NO IS NULL
                        AND CALC.CNTR_TP IS NULL 
                      THEN 'NH'           
                      WHEN ORG.CNTR_STY_CD = 'F'
                        AND CALC.CNTR_STY_CD IS NULL 
                      THEN 'NH'    
#if (${sto_dys_ind_cd} == 'IO')        
                      WHEN CALC.MVMT_GATE_IN_DT IS NULL
                         OR CALC.MVMT_GATE_OUT_DT IS NULL 
                      THEN 'NH'
#end  
                      WHEN (                                
                            SELECT CNT
            		        FROM (
					              SELECT AM1.CNTR_NO, COUNT(AM1.CNTR_NO) CNT
					              FROM  ( -- 업로드된 데이타의 Seq 구분하는 로직 추가 2015.09.17(조아영D 요청)
					        			SELECT /*+ ORDERED */LAG(M.MVMT_STS_CD) OVER (PARTITION BY M.CNTR_NO, P.TML_SO_TMP_SEQ ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ) PREV_MVMT_STS,
					            			   M.MVMT_STS_CD,
					            			   LEAD(M.MVMT_STS_CD) OVER (PARTITION BY M.CNTR_NO, P.TML_SO_TMP_SEQ ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ) NEXT_MVMT_STS,
					          			       M.CNTR_NO,
					          			       M.CNMV_YR,
					         			       M.CNMV_SEQ,
                                               LAG(M.CNMV_EVNT_DT) OVER (PARTITION BY M.CNTR_NO, P.TML_SO_TMP_SEQ ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ) PREV_EVNT_DT,
					         			       M.CNMV_EVNT_DT,
											   LEAD(M.CNMV_EVNT_DT) OVER (PARTITION BY M.CNTR_NO, P.TML_SO_TMP_SEQ ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ) NEXT_EVNT_DT,
					          			       P.TML_SO_TMP_SEQ,
					          			       P.YD_CD,
					          			       M.BKG_NO,  
					          			       M.CNMV_SPLIT_NO
					      				  FROM TES_FILE_IMP_TMP P, CTM_MOVEMENT M, BKG_BOOKING B
					     				 WHERE P.TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]
					     				   AND P.TML_SO_SEQ = @[tml_so_seq]
					     				   AND M.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')-730 ) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421
					     				   AND M.CNTR_NO = P.CNTR_NO
					     				   AND M.ORG_YD_CD = P.YD_CD
					     				   AND M.BKG_NO = B.BKG_NO(+)
										   AND P.CNTR_STY_CD = DECODE(M.FCNTR_FLG, 'N', 'M', 'F')
					     				   --  AND NVL(M.MVMT_CRE_TP_CD, 'N') <> 'C'
					      			  ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ ASC ) AM1
#if (${sto_dys_ind_cd} == 'IO')
									WHERE AM1.PREV_MVMT_STS||AM1.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
					                           					                 'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
					                       					                     'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
					                                  					         'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')
									AND AM1.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421   
#else
                    				WHERE	((AM1.PREV_MVMT_STS||AM1.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
       					                        	             				  'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
   					                            	             				  'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
              					               	                 				  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX'))																				  
											AND		(AM1.PREV_EVNT_DT >= TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))
											AND		(AM1.CNMV_EVNT_DT <= TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')+ 0.99999421))
									OR		((AM1.PREV_MVMT_STS||AM1.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
       					                        	             				  'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
   					                            	             				  'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
              					               	                 				  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX'))	
                                      		AND (AM1.PREV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))
											AND	(AM1.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421))
									OR    ((AM1.PREV_MVMT_STS||AM1.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
       					                        	             				  'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
   					                            	             				  'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
              					               	                 				  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX'))	
                                      		AND (AM1.PREV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421)
											AND	(AM1.CNMV_EVNT_DT > TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')))
									OR    ((AM1.PREV_MVMT_STS||AM1.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
       					                        	             				  'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
   					                            	             				  'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
              					               	                 				  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX'))	
                                      		AND (AM1.PREV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))
											AND	(AM1.CNMV_EVNT_DT > TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')))
									-- GATE OUT이 없고 GATE IN만 있는 경우 조건 추가 - 4347-10-22
									OR    ((AM1.MVMT_STS_CD || AM1.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ'))
                                            AND (AM1.CNMV_EVNT_DT >= TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')))
#end                                          
									GROUP BY AM1.CNTR_NO)
                            WHERE CNTR_NO = ORG.CNTR_NO ) > 1 
                      THEN 'AM'        
                      WHEN (
                            SELECT COUNT(B.CNTR_NO) CNT
                            FROM TES_TML_SO_HDR A, TES_TML_SO_CNTR_LIST B
                            WHERE A.TML_SO_OFC_CTY_CD   = B.TML_SO_OFC_CTY_CD
                              AND A.TML_SO_SEQ          = B.TML_SO_SEQ
                              AND A.VNDR_SEQ            = ORG.VNDR_SEQ
                              AND A.YD_CD               = ORG.YD_CD
                              AND B.CNTR_NO             = ORG.CNTR_NO
                              AND B.CNTR_STY_CD         = ORG.CNTR_STY_CD
                              AND A.INV_NO              <> @[inv_no]
                              AND NVL(A.DELT_FLG, 'N')  <> 'Y'
                              AND A.TML_INV_TP_CD       = 'ST'
                              AND A.TML_INV_RJCT_STS_CD <> 'RJ'
                              AND A.UPD_DT              >= ORG.MIN_INV_GATE_IN_DT
                              AND ABS(MONTHS_BETWEEN(B.MVMT_GATE_IN_DT, CALC.MVMT_GATE_IN_DT)) <= 0.25
                              AND CASE 
                                  WHEN (SIGN(A.TO_PRD_DT-A.FM_PRD_DT)>0
                                    AND SIGN(replace(@[fm_prd_dt], '-')-A.TO_PRD_DT)>0)
                                     OR (SIGN(A.TO_PRD_DT-A.FM_PRD_DT)>0
                                    AND SIGN(A.FM_PRD_DT- replace(@[to_prd_dt], '-'))>0) 
                                  THEN 'N' 
                                  ELSE 'Y' 
                                  END = 'Y'              
                              AND CASE 
                                  WHEN (SIGN(CALC.MVMT_GATE_IN_DT-B.MVMT_GATE_IN_DT)>0
                                    AND SIGN(DECODE(CALC.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), CALC.MVMT_GATE_OUT_DT)-B.MVMT_GATE_IN_DT)>0)
                                     OR (SIGN(CALC.MVMT_GATE_IN_DT-B.MVMT_GATE_IN_DT)<0
                                    AND SIGN(B.MVMT_GATE_OUT_DT-CALC.MVMT_GATE_IN_DT)>0) 
                                  THEN 'N' 
                                  ELSE 'Y' 
                                  END = 'Y' ) > 0 
                      THEN 'DB' 
                      
#if (${sto_dys_ind_cd} == 'IO') 
					  WHEN TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD')-ORG.TO_PRD_DT>0 
					  THEN 'PD'
#end                      
                      WHEN ABS(CALC.MVMT_GATE_IN_DT-ORG.INV_GATE_IN_DT)>=2
                         OR ABS(DECODE(CALC.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), CALC.MVMT_GATE_OUT_DT)-ORG.INV_GATE_OUT_DT)>=2 
                      THEN 'DD' 
                      ELSE '' 
                      END DSCR_IND_CD,
                      ORG.TML_SO_TMP_SEQ,
                      ORG.YD_CD,
                      ORG.VNDR_SEQ,
                      ORG.RCV_DT,
                      CALC.RC_FLG,
                      CALC.AWK_CGO_FLG,
                      CALC.MVMT_GATE_IN_DT,
                      CALC.MVMT_GATE_OUT_DT,
                      ORG.CNTR_STY_CD,
                      CALC.IO_BND_CD,
                      CALC.LOCL_TS_IND_CD,
                      CALC.DCGO_CLSS_CD,
                      CALC.BB_CGO_FLG,
                      CALC.BKG_NO,
                      CALC.BL_NO,
                      CALC.BL_NO_TP,
                      CALC.VSL_CD,
                      CALC.SKD_VOY_NO,
                      CALC.SKD_DIR_CD,
                      ABS(ORG.INV_GATE_IN_DT - CALC.MVMT_GATE_IN_DT) GT_IN_DT_DIFF,
                      ABS(ORG.INV_GATE_OUT_DT - CALC.MVMT_GATE_OUT_DT) GT_OUT_DT_DIFF
            FROM (
                    SELECT M3.BKG_NO,
                           M3.CNMV_CYC_NO,
                           M3.CNTR_TP,
                           M3.CNTR_STY_CD,
                           M3.DCGO_CLSS_CD,
                           M3.BB_CGO_FLG,
                           M3.RC_FLG,
                           M3.AWK_CGO_FLG,
                           M3.BL_NO,
                           M3.BL_NO_TP,
                           M3.VSL_CD,
                           M3.SKD_VOY_NO,
                           M3.SKD_DIR_CD,
                           M3.POL,
                           M3.CNTR_NO,
                           M3.CNMV_SEQ, 
                           M3.MVMT_GATE_IN_DT,
                           M3.MVMT_GATE_OUT_DT,
                           M3.STY,
                           M3.TML_SO_TMP_SEQ,
                           M3.YD_CD,
                           M3.MVMT_FM,
                           CASE WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'OP'
                                THEN 'O'
                                WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'VL'
                                THEN 'O'     
                                WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'ID'
                                THEN 'I'
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'OP'
                                THEN 'O'  
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'VL'
                                THEN 'O'
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'ID'
                                THEN 'I'
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'TN'
                                THEN 'O'
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'EN'
                                THEN 'O'
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'XX'
                                THEN 'O'
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'OP'
                                THEN 'O'  
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'VL'
                                THEN 'O'
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'ID'
                                THEN 'I'
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'TN'
                                THEN 'I'
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'EN'
                                THEN 'I'
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'XX'
                                THEN 'I'            
                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'OP'
                                THEN 'O'
                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'VL'
                                THEN 'O'     
                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'ID'
                                THEN 'I'            
                           		ELSE ''
                           END IO_BND_CD,
                                  
                           CASE WHEN M3.MI_STS = 'TS' OR M3.MO_STS = 'TS'
                                THEN 'T'
                           		ELSE 'L'
                           END  LOCL_TS_IND_CD
                    FROM (
                            SELECT C.BKG_NO ,
                                   C.CNMV_CYC_NO ,
                                   C.CNTR_TPSZ_CD CNTR_TP,
                                   DECODE(B.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M') CNTR_STY_CD,
                                   MIN(NVL(SUBSTR(D.IMDG_CLSS_CD, 1, 1), 'N')) DCGO_CLSS_CD,
                                   NVL(C.BB_CGO_FLG, 'N') BB_CGO_FLG,
                                   NVL(B.RC_FLG, 'N') RC_FLG,
                                   NVL(B.AWK_CGO_FLG, 'N') AWK_CGO_FLG,                            
                                   B.BL_NO BL_NO,
                                   B.BL_NO_TP BL_NO_TP,
                                   B.VSL_CD VSL_CD,
                                   B.SKD_VOY_NO SKD_VOY_NO,
                                   B.SKD_DIR_CD SKD_DIR_CD,
                                   B.POL_CD POL,
                                   M2.CNTR_NO,
                                   M2.CNMV_SEQ, 
                                   M2.GATE_IN MVMT_GATE_IN_DT,
                                   M2.GATE_OUT MVMT_GATE_OUT_DT,
                                   M2.STY,
                                   M2.TML_SO_TMP_SEQ,
                                   M2.YD_CD,
                                   MVMT_FM,
                                   M2.MI_STS,
                                   M2.MO_STS
                            FROM (SELECT	MIO.MVMT_FM,
                      						MIO.CNTR_NO CNTR_NO,
                     				 		MIO.CNMV_SEQ CNMV_SEQ,
                      						CASE WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNTR_TP WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNTR_TP END CNTR_TPSZ_CD,
                      						CASE WHEN MIO.MVMT_STS_CD||MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ') THEN MIO.CNMV_EVNT_DT
                                                 ELSE MIO.PREV_EVNT_DT 
                                            END GATE_IN,
										    CASE WHEN MIO.MVMT_STS_CD||MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ') THEN NULL
												 ELSE MIO.CNMV_EVNT_DT
										    END GATE_OUT,
                      						MIO.CNTR_STY_CD STY,
                      						CASE WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNMV_CYC_NO WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNMV_CYC_NO END CYC,
                      						MIO.TML_SO_TMP_SEQ,
                      						MIO.YD_CD,
                      						CASE WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.BKG_NO WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.BKG_NO END BKG_NO,
                      						MIO.CNTR_STY_CD,
                      						MIO.PREV_MVMT_STS MI_STS,
                      						MIO.MVMT_STS_CD MO_STS
                                  FROM ( -- 업로드된 데이타의 Seq 구분하는 로직 추가 2015.09.17(조아영D 요청)
                    					SELECT  /*+ ORDERED */LAG(M.MVMT_STS_CD)  OVER (PARTITION BY M.CNTR_NO, P.TML_SO_TMP_SEQ ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ) PREV_MVMT_STS,
                      							M.MVMT_STS_CD,
												-- GATE OUT이 없고 GATE IN만 있는 경우 조건 추가 - 4347-10-22
                      							NVL(LEAD(M.MVMT_STS_CD) OVER (PARTITION BY M.CNTR_NO, P.TML_SO_TMP_SEQ ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ), 'ZZ') NEXT_MVMT_STS,
                      							LAG(M.CNMV_EVNT_DT) OVER (PARTITION BY M.CNTR_NO, P.TML_SO_TMP_SEQ ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ) PREV_EVNT_DT,  
                      							M.CNMV_EVNT_DT,
                      							LEAD(M.CNMV_EVNT_DT)OVER (PARTITION BY M.CNTR_NO, P.TML_SO_TMP_SEQ ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ) NEXT_EVNT_DT,
                      							M.CNTR_NO,
                      							M.CNMV_YR,
                     							M.CNMV_SEQ,
                      							P.CNTR_STY_CD,                      
                      							P.TML_SO_TMP_SEQ,
                      							P.YD_CD,
                      							M.BKG_NO,
                      							M.CNMV_SPLIT_NO,
                      							DECODE(M.FCNTR_FLG, 'N', 'M', 'F') MVMT_FM,
                      							M.CNTR_TPSZ_CD CNTR_TP,
                      							M.CNMV_CYC_NO,
                      							B.BKG_CGO_TP_CD
                       	                FROM TES_FILE_IMP_TMP P, CTM_MOVEMENT M, BKG_BOOKING B
                       	                WHERE P.TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]
                         	              AND P.TML_SO_SEQ = @[tml_so_seq]
                      	 	              AND M.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')-730 ) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421
                         	              AND M.CNTR_NO = P.CNTR_NO
                         	              AND M.ORG_YD_CD = P.YD_CD
                         	              AND M.BKG_NO = B.BKG_NO(+)
 										  AND P.CNTR_STY_CD = DECODE(M.FCNTR_FLG, 'N', 'M', 'F')
                         	              --  AND NVL(M.MVMT_CRE_TP_CD, 'N') <> 'C'
                    	             ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ ASC ) MIO
#if (${sto_dys_ind_cd} == 'IO') 
                       	                WHERE	MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')
                         	            AND		MIO.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421
#else
                                        WHERE	((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX'))
												AND		(MIO.PREV_EVNT_DT >= TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))
												AND		(MIO.CNMV_EVNT_DT <= TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')+ 0.99999421))
										OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX'))
												AND		(MIO.PREV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))
												AND		(MIO.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421))
										OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX'))
												AND		(MIO.PREV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421)
												AND		(MIO.CNMV_EVNT_DT > TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')))
										OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX'))
												AND		(MIO.PREV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))
												AND		(MIO.CNMV_EVNT_DT > TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')))
										-- GATE OUT이 없고 GATE IN만 있는 경우 조건 추가 - 4347-10-22
										 OR    ((MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ'))
                                                AND (MIO.CNMV_EVNT_DT >= TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')))
#end
									) M2,
                                    BKG_CONTAINER C,
                                    BKG_BOOKING B,
                                    BKG_DG_CGO D
                            WHERE 1=1
                            AND M2.CNTR_NO = C.CNTR_NO(+)
                            AND M2.BKG_NO  = C.BKG_NO(+)
                            AND C.BKG_NO   = B.BKG_NO(+)
                            AND B.BKG_NO   = D.BKG_NO(+)
                            AND M2.CYC     = C.CNMV_CYC_NO(+)
                            GROUP BY   C.BKG_NO,
                                       C.CNMV_CYC_NO,
                                       C.CNTR_TPSZ_CD, 
                                       DECODE(B.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M'),
                                       NVL(C.BB_CGO_FLG, 'N'),
                                       NVL(B.RC_FLG, 'N'),
                                       NVL(B.AWK_CGO_FLG, 'N'),
                                       B.BL_NO,
                                       B.BL_NO_TP,
                                       B.VSL_CD,
                                       B.SKD_VOY_NO,
                                       B.SKD_DIR_CD,
                                       B.POL_CD,
                                       M2.CNTR_NO,
                                       M2.CNMV_SEQ,
                                       M2.GATE_IN,
                                       M2.GATE_OUT,
                                       M2.STY,
                                       M2.TML_SO_TMP_SEQ,
                                       M2.YD_CD,
                                       MVMT_FM,
                                       M2.MI_STS,
                                       M2.MO_STS) M3) CALC,              
                        (SELECT CNTR_NO,
                                CNTR_TPSZ_CD,
                                INV_GATE_IN_DT,
                                INV_GATE_OUT_DT,
                                CNTR_STY_CD,
                                TML_SO_TMP_SEQ,
                                YD_CD,
                                VNDR_SEQ,
                                RCV_DT,
                                FM_PRD_DT,
                                TO_PRD_DT ,
                                (SELECT MIN(INV_GATE_IN_DT)
                                   FROM TES_FILE_IMP_TMP
                                  WHERE TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]
                                    AND TML_SO_SEQ = @[tml_so_seq] ) MIN_INV_GATE_IN_DT
                          FROM TES_FILE_IMP_TMP
                         WHERE TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]
                           AND TML_SO_SEQ = @[tml_so_seq]) ORG,
                         MST_CONTAINER MC
            WHERE ORG.CNTR_NO = CALC.CNTR_NO(+)
              AND ORG.CNTR_NO = MC.CNTR_NO(+)
              AND ORG.TML_SO_TMP_SEQ = CALC.TML_SO_TMP_SEQ(+)
              and ORG.CNTR_STY_CD = CALC.MVMT_FM(+) ) Z ) X
WHERE DIFF_RANK = 1			]]></sql>
			<params>
				<param name="to_prd_dt" type="12" value="" out="N"/>
				<param name="inv_no" type="12" value="" out="N"/>
				<param name="fm_prd_dt" type="12" value="" out="N"/>
				<param name="tml_so_ofc_cty_cd" type="12" value="" out="N"/>
				<param name="tml_so_seq" type="2" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
