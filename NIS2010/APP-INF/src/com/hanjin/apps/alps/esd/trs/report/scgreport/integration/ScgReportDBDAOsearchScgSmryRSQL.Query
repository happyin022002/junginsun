<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ScgReportDBDAOsearchScgSmryRSQL">
			<desc><![CDATA[Surcharge Report 를 조회한다.]]></desc>
			<sql><![CDATA[
SELECT B.CRE_OFC_CD WO_OFC_CD
      ,C.CRE_OFC_CD INV_OFC_CD
#if(${sel_date} == 'inv')
      ,TO_CHAR(C.INV_CFM_DT,'YYYYMM') MONTH
#elseif(${sel_date} == 'wo')
      ,TO_CHAR(E.LOCL_CRE_DT,'YYYYMM') MONTH
#end
      ,COUNT(DISTINCT B.TRSP_SO_OFC_CTY_CD||B.TRSP_SO_SEQ) BOX_COUNT
      ,'USD' CURR
#if(${scg_type} == 'WO')
      ,SUM(DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2))) TOT_AMT
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'ALAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) ADD_LABOR
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'LWAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) BARGE_LOW
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'CDAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) CHASSIS
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'DPAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) DROP_PULL
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'DRAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) DRY_RUN
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'FRAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) FERRY_COST
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'FIAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) FINE
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'FGAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) FUMIGATION
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'GNAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) GEN_SET
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'HZAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) HAZMAT
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'INAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) INSPECTION
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'LFAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) LIFTING
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'MDAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) MULTIPLE
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'OSAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) OVER_SIZE
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'OWAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) OVER_WEIGHT
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'PPAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) PRE_PULL
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'RCAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) REDIRECTION
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'SSAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) SCALE_STOP
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'SRAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) STORAGE
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'STAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) STREET_TURN
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'SNAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) SUNDAY
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'SFAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) SWING_FLIP
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'TDAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) T_DOC
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'TLAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) TOLL
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'WTAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) WAITING_CHARGE
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'OTAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) OTHER
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'ENAL', DECODE(B.CURR_CD, 'USD', A.SCG_AMT, ROUND(A.SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) ENSF
#elseif(${scg_type} == 'INV')
      ,SUM(DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2))) TOT_AMT
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'ALAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) ADD_LABOR
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'LWAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) BARGE_LOW
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'CDAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) CHASSIS
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'DPAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) DROP_PULL
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'DRAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) DRY_RUN
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'FRAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) FERRY_COST
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'FIAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) FINE
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'FGAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) FUMIGATION
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'GNAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) GEN_SET
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'HZAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) HAZMAT
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'INAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) INSPECTION
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'LFAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) LIFTING
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'MDAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) MULTIPLE
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'OSAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) OVER_SIZE
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'OWAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) OVER_WEIGHT
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'PPAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) PRE_PULL
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'RCAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) REDIRECTION
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'SSAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) SCALE_STOP
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'SRAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) STORAGE
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'STAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) STREET_TURN
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'SNAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) SUNDAY
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'SFAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) SWING_FLIP
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'TDAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) T_DOC
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'TLAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) TOLL
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'WTAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) WAITING_CHARGE
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'OTAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) OTHER
      ,SUM(DECODE(SUBSTR(A.LGS_COST_CD,3,6),'ENAL', DECODE(B.CURR_CD, 'USD', A.INV_SCG_AMT, ROUND(A.INV_SCG_AMT/D.USD_LOCL_XCH_RT, 2)))) ENSF
#end
  FROM TRS_TRSP_SCG_DTL A, TRS_TRSP_SVC_ORD B, TRS_TRSP_INV_WRK C, GL_MON_XCH_RT D
#if(${sel_date} == 'wo')
      ,TRS_TRSP_WRK_ORD E
#end
 WHERE A.TRSP_SO_OFC_CTY_CD = B.TRSP_SO_OFC_CTY_CD
   AND A.TRSP_SO_SEQ = B.TRSP_SO_SEQ
   AND B.INV_NO = C.INV_NO
   AND B.INV_VNDR_SEQ = C.INV_VNDR_SEQ
#if(${sel_date} == 'wo')
   AND B.TRSP_WO_OFC_CTY_CD = E.TRSP_WO_OFC_CTY_CD
   AND B.TRSP_WO_SEQ = E.TRSP_WO_SEQ
#end
   AND B.INV_NO IS NOT NULL
   AND B.TRSP_INV_ACT_STS_CD IS NOT NULL
#if(${scg_type} == 'WO')
   AND A.SCG_AMT != 0
   AND B.CRE_OFC_CD IN (SELECT COLUMN_VALUE FROM TABLE(BKG_SPLIT_FNC(@[input_office], ',')))
#elseif(${scg_type} == 'INV')
   AND A.INV_SCG_AMT != 0
   AND C.CRE_OFC_CD IN (SELECT COLUMN_VALUE FROM TABLE(BKG_SPLIT_FNC(@[input_office], ',')))
#end
   AND A.LGS_COST_CD NOT IN ('SCOTAX','SMOTAX' ,'SCFURD' ,'SCFURT' ,'SCFUTD' ,'SCFUWD' ,'SCFUWR' ,'SCFUWT' ,'SMFURD' ,'SMFURT' ,'SMFUTD' ,'SMFUWD' ,'SMFUWR' ,'SMFUWT', 'SCHLOP', 'SCHLCF')
   AND B.DELT_FLG= 'N'
   AND C.DELT_FLG= 'N'
#if(${sel_date} == 'inv')
   AND C.INV_CFM_DT BETWEEN TO_DATE(REPLACE(@[from_date],'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(@[to_date],'-',''),'YYYYMMDD')+ 0.99999 /* 0.99999 는 23시 59분 59초를 의미 */ 
#elseif(${sel_date} == 'wo')
   AND E.LOCL_CRE_DT BETWEEN TO_DATE(REPLACE(@[from_date],'-',''), 'YYYYMMDD') AND TO_DATE(REPLACE(@[to_date],'-',''),'YYYYMMDD')+ 0.99999 /* 0.99999 는 23시 59분 59초를 의미 */ 
#end
#if(${sel_date} == 'inv')
   AND D.ACCT_XCH_RT_YRMON = TO_CHAR(C.INV_CFM_DT, 'YYYYMM')
#elseif(${sel_date} == 'wo')
   AND D.ACCT_XCH_RT_YRMON = TO_CHAR(E.LOCL_CRE_DT, 'YYYYMM')
#end
   AND D.CURR_CD = B.CURR_CD
   AND D.ACCT_XCH_RT_LVL = 1
#if(${sel_date} == 'inv')
 GROUP BY B.CRE_OFC_CD,C.CRE_OFC_CD, TO_CHAR(C.INV_CFM_DT,'YYYYMM')
#elseif(${sel_date} == 'wo')
 GROUP BY B.CRE_OFC_CD,C.CRE_OFC_CD, TO_CHAR(E.LOCL_CRE_DT,'YYYYMM')
#end			]]></sql>
			<params>
				<param name="input_office" type="12" value="" out="N"/>
				<param name="from_date" type="12" value="" out="N"/>
				<param name="to_date" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
