CREATE OR REPLACE FUNCTION PRD_GET_FEEDER_SKD_FNC--CREATE OR REPLACE FUNCTION PRD_GET_FEEDER_SKD_CHO_FNC/* ========================================================   1. Object Name      : PRD_GET_FEEDER_SKD_FNC   2. Version          : 1.1   3. Create Date      : 2009.08.24   4. Sub System       : Product Catalog   5. Author           : 조용인   6. Description      : 해상 운송 구간중 Feeder Vessel에 대한 Detail Route 정보 생성   7. Revision History : 2009.08.24 조용인 최초 생성                       : 2009.11.06 EXCEPTION 추가                       : 2010.03.09 calling port seq 적용                       : 2010.07.12 Double Call관련 Yard 비교를 위한 Data  Return                       : 2010.08.19 Yard 값이 Null인 경우 공백 7문자 생기도록 처리 - Park Mangeon                       : 2011.02.07 CHM-201108672 PRD_PORT_TML_MTX.CRR_CD는 항상 FDR만 사용하도록 변경 - Park Mangeon                       : 2011.08.19 t/s point출발요일이 rhq skd요일과 동일하지 않을때, rhq다음 출발요일의 18:00                                    t/s point출발요일이 rhq skd요일과 동일할 때, t/s point도착예정일 + 1.75일로 조정                       : 2014.07.31 CCT 에 VVD 적용======================================================== */(    ------------------------------PARAMETERS------------------------------    V_D_DATE IN VARCHAR2,   -- Milestone Time ('20061115123000')    V_ORG_NOD   IN VARCHAR2,  -- Origin Node Code ('USCHI01')    V_ORG_SEQ   IN VARCHAR2,  -- Origin Calling seq 2    V_DST_NOD   IN VARCHAR2,  -- Destination Node Code ('KRPUS01')    V_DST_SEQ   IN VARCHAR2,  -- Destination Calling seq 2    V_SLANE_CD IN VARCHAR2, -- SLANE CODE ('PDS')    V_DIR_CD IN VARCHAR2,   -- Direction Code ('E')    V_REVERSE IN VARCHAR2,   -- Door Arrival Date OR Loading Due Date ('N'/'Y')    V_ORD     IN VARCHAR2,    V_CGO_TP  IN VARCHAR2,    V_ORG_YD1   IN VARCHAR2,    -- Post Vessel's 1st Calling Yard    V_ORG_YD2   IN VARCHAR2,    -- Post Vessel's 2nd Calling Yard    V_DST_YD1   IN VARCHAR2,    -- Pre Vessel's 1st  Calling Yard    V_DST_YD2   IN VARCHAR2,    -- Pre Vessel's 2nd  Calling Yard    V_GMT     IN VARCHAR2   -- GMY YN    -----------------------------------------------------------------------)RETURN VARCHAR2             -- Departure Time + Arrival Time ('2006111512300020061117143000')authid current_userIS    RET_VAL VARCHAR2(200) := NULL;    V_DATE DATE;    VV_ETD VARCHAR2(200) := NULL;    VV_ETB VARCHAR2(200) := NULL;    VV_CCT VARCHAR2(200) := NULL;    VV_CCNT VARCHAR2(200) := NULL;    VV_VSL_CD VARCHAR2(4) := NULL;    VV_VOY_NO VARCHAR2(4) := NULL;    VV_DIR_CD VARCHAR2(1) := NULL;    VV_LANE_CD VARCHAR2(4):= NULL;    VV_ORG_YD_CD1 VARCHAR2(7):= NULL;    VV_ORG_YD_CD2 VARCHAR2(7):= NULL;    VV_DST_YD_CD1  VARCHAR2(7):= NULL;    VV_DST_YD_CD2  VARCHAR2(7):= NULL;BEGIN    DBMS_OUTPUT.ENABLE;    --V_DATE := TO_DATE(V_D_DATE,'yyyymmdd hh24:mi:ss');    --Feeder 에서 찾는다...    IF V_REVERSE = 'N' THEN        IF V_GMT = 'Y' THEN            V_DATE := GLOBALDATE_PKG.TIME_CONV_FNC('GMT',TO_DATE(V_D_DATE,'yyyymmddhh24miss'),SUBSTR(V_ORG_NOD,1,5));        ELSE            V_DATE := TO_DATE(V_D_DATE, 'yyyymmddhh24miss');        END IF;        DBMS_OUTPUT.PUT_LINE('V_DATE:'||V_DATE);        FOR V_AA IN        (            SELECT            MIN(D_TIME) D_TIME,            MIN(A_TIME) KEEP(DENSE_RANK FIRST ORDER BY D_TIME ASC) A_TIME            FROM            (                SELECT                DECODE(TO_CHAR(P_TIME,'D')                       ,NDAY,P_TIME + 1.75                       ,NEXT_DAY(TRUNC(P_DATE), NDAY) + TO_CHAR (TO_DATE (DT,'hh24:mi'), 'sssss')/24/60/60                      ) AS D_TIME,                DECODE(TO_CHAR(P_TIME,'D')                       ,NDAY,P_TIME + 1.75                       ,NEXT_DAY(TRUNC(P_DATE), NDAY) + TO_CHAR (TO_DATE (DT,'hh24:mi'), 'sssss')/24/60/60                      ) + TT/24 AS A_TIME,                P_TIME, P_DATE                FROM                (                    SELECT                    NDAY,DT,TT                    FROM                    (                        SELECT                        DECODE(LEV, 1,SUN, 2,MON, 3,TUE, 4,WED, 5,THU, 6,FRI, 7,SAT) NDAY, DT,TT                        FROM                        (                            SELECT                            DECODE(SUN_ST_FLG,'Y',1,NULL) SUN,                            DECODE(MON_ST_FLG,'Y',2,NULL) MON,                            DECODE(TUE_ST_FLG,'Y',3,NULL) TUE,                            DECODE(WED_ST_FLG,'Y',4,NULL) WED,                            DECODE(THU_ST_FLG,'Y',5,NULL) THU,                            DECODE(FRI_ST_FLG,'Y',6,NULL) FRI,                            DECODE(SAT_ST_FLG,'Y',7,NULL) SAT,                            '1800' DT, TZTM_HRS TT                            FROM PRD_FDR_LNK                            WHERE LNK_ORG_LOC_CD = SUBSTR(V_ORG_NOD,1,5)                            AND LNK_DEST_LOC_CD = SUBSTR(V_DST_NOD,1,5)                            AND VSL_SLAN_CD = V_SLANE_CD                        ) A,                        (SELECT LEVEL LEV FROM DUAL CONNECT BY LEVEL <= 7) B                    )                    WHERE NDAY IS NOT NULL                ),                ( SELECT V_DATE P_TIME, TRUNC(V_DATE) P_DATE FROM DUAL )            )            WHERE D_TIME >= P_TIME        )        LOOP            VV_ETD  := TO_CHAR(V_AA.D_TIME,'yyyymmddhh24miss') ;            VV_ETB  := TO_CHAR(V_AA.A_TIME,'yyyymmddhh24miss') ;             DBMS_OUTPUT.PUT_LINE('VV_ETD:'||VV_ETD);             DBMS_OUTPUT.PUT_LINE('VV_ETB:'||VV_ETB);        END LOOP;    ELSE        IF V_GMT = 'Y' THEN            V_DATE := GLOBALDATE_PKG.TIME_CONV_FNC('GMT',TO_DATE(V_D_DATE,'yyyymmddhh24miss'),SUBSTR(V_DST_NOD,1,5));        ELSE            V_DATE := TO_DATE(V_D_DATE, 'yyyymmddhh24miss');        END IF;        FOR V_AA IN        (            SELECT            MAX(A_TIME) A_TIME,            MAX(D_TIME) KEEP(DENSE_RANK FIRST ORDER BY A_TIME DESC) D_TIME            FROM            (                SELECT                DECODE(TO_CHAR(P_TIME-TT/24,'D')                      ,NDAY,P_TIME-TT/24                      ,NEXT_DAY(TRUNC(P_TIME-TT/24), NDAY)-7 + TO_CHAR (TO_DATE (DT,'hh24:mi'), 'sssss')/24/60/60                      ) D_TIME,                DECODE(TO_CHAR(P_TIME-TT/24,'D')                      ,NDAY,P_TIME-TT/24                      ,NEXT_DAY(TRUNC(P_TIME-TT/24), NDAY)-7 + TO_CHAR (TO_DATE (DT,'hh24:mi'), 'sssss')/24/60/60                      ) + TT/24 A_TIME,                P_TIME, P_DATE                FROM                (                    SELECT                    NDAY,DT,TT                    FROM                    (                        SELECT                        DECODE(LEV, 1,SUN, 2,MON, 3,TUE, 4,WED, 5,THU, 6,FRI, 7,SAT) NDAY, DT, TT                        FROM                        (                            SELECT                            DECODE(SUN_ST_FLG,'Y',1,NULL) SUN,                            DECODE(MON_ST_FLG,'Y',2,NULL) MON,                            DECODE(TUE_ST_FLG,'Y',3,NULL) TUE,                            DECODE(WED_ST_FLG,'Y',4,NULL) WED,                            DECODE(THU_ST_FLG,'Y',5,NULL) THU,                            DECODE(FRI_ST_FLG,'Y',6,NULL) FRI,                            DECODE(SAT_ST_FLG,'Y',7,NULL) SAT,                            '1800' DT, TZTM_HRS TT                            FROM PRD_FDR_LNK                            WHERE LNK_ORG_LOC_CD = SUBSTR(V_ORG_NOD,1,5)                            AND LNK_DEST_LOC_CD = SUBSTR(V_DST_NOD,1,5)                            AND VSL_SLAN_CD = V_SLANE_CD                        ) A,                        (SELECT LEVEL LEV FROM DUAL CONNECT BY LEVEL <= 7) B                    )                    WHERE NDAY IS NOT NULL                ),                ( SELECT V_DATE P_TIME, TRUNC(V_DATE) P_DATE FROM DUAL )            )            WHERE DECODE(V_REVERSE,'Y',A_TIME,D_TIME) <= P_TIME        )        LOOP            VV_ETD  := TO_CHAR(V_AA.D_TIME,'yyyymmddhh24miss') ;            VV_ETB  := TO_CHAR(V_AA.A_TIME,'yyyymmddhh24miss') ;        END LOOP;    END IF;    IF (VV_ETD IS NOT NULL) AND (VV_ETB IS NOT NULL) THEN        IF V_GMT = 'Y' THEN            VV_ETD := GLOBALDATE_PKG.TIME_CONV_FNC(SUBSTR(V_ORG_NOD,1,5),VV_ETD,'GMT');            VV_ETB := GLOBALDATE_PKG.TIME_CONV_FNC(SUBSTR(V_DST_NOD,1,5),VV_ETB,'GMT');        END IF;        RET_VAL := 'POLT'||V_ORD||VV_ETD||'PODT'||V_ORD||VV_ETB                    ||'POLTN'||V_ORD||VV_ETD||'PODTN'||V_ORD||VV_ETB;        DBMS_OUTPUT.PUT_LINE('RET_VAL:'||RET_VAL);--        SELECT ORG.TML_CD ORG_YD_CD, DST.TML_CD DST_YD_CD--        INTO VV_ORG_YD_CD, VV_DST_YD_CD--        FROM PRD_PORT_TML_MTX ORG,PRD_PORT_TML_MTX DST--        WHERE DST.PORT_CD = SUBSTR(V_DST_NOD, 1, 5)--          AND DST.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')--          AND DST.SKD_DIR_CD = V_DIR_CD--          AND ORG.PORT_CD = SUBSTR(V_ORG_NOD, 1, 5)--          AND ORG.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')--          AND ORG.SKD_DIR_CD = V_DIR_CD--          AND ORG.VSL_SLAN_CD = DST.VSL_SLAN_CD--          AND ROWNUM =1;        SELECT        (CASE WHEN V_ORD = '1' AND LENGTH(V_ORG_NOD) = 7 THEN V_ORG_NOD        ELSE            (                SELECT TML_CD                FROM (                    SELECT ORG.TML_CD                    FROM PRD_PORT_TML_MTX ORG                    WHERE ORG.PORT_CD = SUBSTR(V_ORG_NOD, 1, 5)                    AND  ORG.TML_CD = V_ORG_YD1--                    AND ORG.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                    AND ORG.VSL_SLAN_CD = 'FDR'                    AND ORG.SKD_DIR_CD = V_DIR_CD                    AND ORG.CRR_CD = 'FDR'                    UNION ALL                    SELECT ORG.TML_CD                    FROM PRD_PORT_TML_EXPT ORG                    WHERE ORG.PORT_CD = SUBSTR(V_ORG_NOD, 1, 5)                    AND  ORG.TML_CD = V_ORG_YD1--                    AND ORG.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                    AND ORG.VSL_SLAN_CD = 'FDR'                    AND ORG.SKD_DIR_CD = V_DIR_CD                    UNION ALL                    SELECT ORG.TML_CD                    FROM PRD_PORT_TML_MTX ORG                    WHERE ORG.PORT_CD = SUBSTR(V_ORG_NOD, 1, 5)                    AND  ORG.TML_CD = DECODE(LENGTH(V_ORG_NOD),7,V_ORG_NOD,ORG.TML_CD)--                    AND ORG.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                    AND ORG.VSL_SLAN_CD = 'FDR'                    AND ORG.SKD_DIR_CD = V_DIR_CD                    AND ORG.CRR_CD = 'FDR'                    UNION ALL                    SELECT ORG.TML_CD                    FROM PRD_PORT_TML_EXPT ORG                    WHERE ORG.PORT_CD = SUBSTR(V_ORG_NOD, 1, 5)                    AND  ORG.TML_CD = DECODE(LENGTH(V_ORG_NOD),7,V_ORG_NOD,ORG.TML_CD)--                    AND ORG.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                    AND ORG.VSL_SLAN_CD = 'FDR'                    AND ORG.SKD_DIR_CD = V_DIR_CD                )                WHERE ROWNUM =1            )        END ) ORG_YD_CD1,        (CASE WHEN V_ORD = '1' AND LENGTH(V_ORG_NOD) = 7 THEN V_ORG_NOD        ELSE            (                SELECT TML_CD                FROM (                    SELECT ORG.TML_CD                    FROM PRD_PORT_TML_MTX ORG                    WHERE ORG.PORT_CD = SUBSTR(V_ORG_NOD, 1, 5)                    AND  ORG.TML_CD = V_ORG_YD2--                    AND ORG.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                    AND ORG.VSL_SLAN_CD = 'FDR'                    AND ORG.SKD_DIR_CD = V_DIR_CD                    AND ORG.CRR_CD = 'FDR'                    UNION ALL                    SELECT ORG.TML_CD                    FROM PRD_PORT_TML_EXPT ORG                    WHERE ORG.PORT_CD = SUBSTR(V_ORG_NOD, 1, 5)                    AND  ORG.TML_CD = V_ORG_YD2--                    AND ORG.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                    AND ORG.VSL_SLAN_CD = 'FDR'                    AND ORG.SKD_DIR_CD = V_DIR_CD                    UNION ALL                    SELECT ORG.TML_CD                    FROM PRD_PORT_TML_MTX ORG                    WHERE ORG.PORT_CD = SUBSTR(V_ORG_NOD, 1, 5)                    AND  ORG.TML_CD = DECODE(LENGTH(V_ORG_NOD),7,V_ORG_NOD,ORG.TML_CD)--                    AND ORG.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                    AND ORG.VSL_SLAN_CD = 'FDR'                    AND ORG.SKD_DIR_CD = V_DIR_CD                    AND ORG.CRR_CD = 'FDR'                    UNION ALL                    SELECT ORG.TML_CD                    FROM PRD_PORT_TML_EXPT ORG                    WHERE ORG.PORT_CD = SUBSTR(V_ORG_NOD, 1, 5)                    AND  ORG.TML_CD = DECODE(LENGTH(V_ORG_NOD),7,V_ORG_NOD,ORG.TML_CD)--                    AND ORG.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                    AND ORG.VSL_SLAN_CD = 'FDR'                    AND ORG.SKD_DIR_CD = V_DIR_CD                    )                WHERE ROWNUM =1            )        END ) ORG_YD_CD2,        (            SELECT TML_CD            FROM (                SELECT DST.TML_CD                FROM PRD_PORT_TML_MTX DST                WHERE DST.PORT_CD = SUBSTR(V_DST_NOD, 1, 5)                AND  DST.TML_CD = V_DST_YD1--                AND DST.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                AND DST.VSL_SLAN_CD = 'FDR'                AND DST.SKD_DIR_CD = V_DIR_CD                AND DST.CRR_CD = 'FDR'                UNION ALL                SELECT DST.TML_CD                FROM PRD_PORT_TML_EXPT DST                WHERE DST.PORT_CD = SUBSTR(V_DST_NOD, 1, 5)                AND  DST.TML_CD = V_DST_YD1--                AND DST.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                AND DST.VSL_SLAN_CD = 'FDR'                AND DST.SKD_DIR_CD = V_DIR_CD                UNION ALL                SELECT DST.TML_CD                FROM PRD_PORT_TML_MTX DST                WHERE DST.PORT_CD = SUBSTR(V_DST_NOD, 1, 5)                AND  DST.TML_CD = DECODE(LENGTH(V_DST_NOD),7,V_DST_NOD,DST.TML_CD)--                AND DST.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                AND DST.VSL_SLAN_CD = 'FDR'                AND DST.SKD_DIR_CD = V_DIR_CD                AND DST.CRR_CD = 'FDR'                UNION ALL                SELECT DST.TML_CD                FROM PRD_PORT_TML_EXPT DST                WHERE DST.PORT_CD = SUBSTR(V_DST_NOD, 1, 5)                AND  DST.TML_CD = DECODE(LENGTH(V_DST_NOD),7,V_DST_NOD,DST.TML_CD)--                AND DST.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                AND DST.VSL_SLAN_CD = 'FDR'                AND DST.SKD_DIR_CD = V_DIR_CD                )            WHERE ROWNUM =1        ) DST_YD_CD1,        (            SELECT TML_CD            FROM (                SELECT DST.TML_CD                FROM PRD_PORT_TML_MTX DST                WHERE DST.PORT_CD = SUBSTR(V_DST_NOD, 1, 5)                AND  DST.TML_CD = V_DST_YD2--                AND DST.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                AND DST.VSL_SLAN_CD = 'FDR'                AND DST.SKD_DIR_CD = V_DIR_CD                AND DST.CRR_CD = 'FDR'                UNION ALL                SELECT DST.TML_CD                FROM PRD_PORT_TML_EXPT DST                WHERE DST.PORT_CD = SUBSTR(V_DST_NOD, 1, 5)                AND  DST.TML_CD = V_DST_YD2--                AND DST.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                AND DST.VSL_SLAN_CD = 'FDR'                AND DST.SKD_DIR_CD = V_DIR_CD                UNION ALL                SELECT DST.TML_CD                FROM PRD_PORT_TML_MTX DST                WHERE DST.PORT_CD = SUBSTR(V_DST_NOD, 1, 5)                AND  DST.TML_CD = DECODE(LENGTH(V_DST_NOD),7,V_DST_NOD,DST.TML_CD)--                AND DST.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                AND DST.VSL_SLAN_CD = 'FDR'                AND DST.SKD_DIR_CD = V_DIR_CD                AND DST.CRR_CD = 'FDR'                UNION ALL                SELECT DST.TML_CD                FROM PRD_PORT_TML_EXPT DST                WHERE DST.PORT_CD = SUBSTR(V_DST_NOD, 1, 5)                AND  DST.TML_CD = DECODE(LENGTH(V_DST_NOD),7,V_DST_NOD,DST.TML_CD)--                AND DST.VSL_SLAN_CD IN (V_SLANE_CD, 'FDR')                AND DST.VSL_SLAN_CD = 'FDR'                AND DST.SKD_DIR_CD = V_DIR_CD                )            WHERE ROWNUM =1        ) DST_YD_CD2        INTO VV_ORG_YD_CD1, VV_ORG_YD_CD2, VV_DST_YD_CD1, VV_DST_YD_CD2        FROM DUAL ;        RET_VAL := RET_VAL||'POL'||V_ORD|| RPAD(NVL(VV_ORG_YD_CD1, ' '),7,' ') ||'POD'||V_ORD||RPAD(NVL(VV_DST_YD_CD1, ' '),7,' ')                          ||'POLN'||V_ORD|| RPAD(NVL(VV_ORG_YD_CD1, ' '),7,' ') ||'PODN'||V_ORD||RPAD(NVL(VV_DST_YD_CD1, ' '),7,' ') ;        DBMS_OUTPUT.PUT_LINE('RET_VAL2:'||RET_VAL);        IF V_ORD = '1' THEN            VV_CCT  := 'CCT$' ||TO_CHAR(NVL(PRD_GET_CCT_FNC(VV_ORG_YD_CD1, V_SLANE_CD,V_DIR_CD,NVL(V_CGO_TP,'AL'), TO_DATE(VV_ETD,'yyyymmddhh24miss'), TO_DATE(VV_ETD,'yyyymmddhh24miss'), '' ),TO_DATE(VV_ETD,'yyyymmddhh24miss') -10/24),'yyyymmddhh24miss') ;            VV_CCNT := 'CCNT$'||TO_CHAR(NVL(PRD_GET_CCT_FNC(VV_ORG_YD_CD2, V_SLANE_CD,V_DIR_CD,NVL(V_CGO_TP,'AL'), TO_DATE(VV_ETD,'yyyymmddhh24miss'), TO_DATE(VV_ETD,'yyyymmddhh24miss'), '' ),TO_DATE(VV_ETD,'yyyymmddhh24miss') -10/24),'yyyymmddhh24miss') ;            RET_VAL := VV_CCT||VV_CCNT||RET_VAL ;        END IF ;    ELSE        RET_VAL := NULL;    END IF;    RETURN RET_VAL;    EXCEPTION WHEN NO_DATA_FOUND THEN    RETURN RET_VAL;END;/