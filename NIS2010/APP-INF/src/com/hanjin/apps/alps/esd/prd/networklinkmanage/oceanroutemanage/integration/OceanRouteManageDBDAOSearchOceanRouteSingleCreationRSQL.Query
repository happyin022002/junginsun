<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="OceanRouteManageDBDAOSearchOceanRouteSingleCreationRSQL">
			<desc><![CDATA[2011.09.08 변종건 Ocean Route Multi Creation의 Validation Check 및 Total Time 구하기]]></desc>
			<sql><![CDATA[
SELECT 'M' ST
     , TRIM(@[s_pol]) ORG_LOC_CD
     , TRIM(@[s_pod]) DEST_LOC_CD
     , POL1, POD1, LANE1, DIR1, FDR_FLG1, SVC_TP1
     , POL2, POD2, LANE2, DIR2, FDR_FLG2, SVC_TP2
     , POL3, POD3, LANE3, DIR3, FDR_FLG3, SVC_TP3
     , POL4, POD4, LANE4, DIR4, FDR_FLG4, SVC_TP4
--     , DECODE(LINK_VALID_FLG, 'N', NULL, DECODE(LK.LINK_COUNT,1,1,2,2,3,4,4,6,NULL)) PRIO
     , CASE WHEN LINK_VALID_FLG = 'N' THEN NULL
            WHEN LK.LINK_COUNT = 1 THEN 1
            WHEN LK.LINK_COUNT = 2 THEN DECODE('C', SVC_TP1, 3, SVC_TP2, 3, 2)
            WHEN LK.LINK_COUNT = 3 THEN DECODE('C', SVC_TP1, 5, SVC_TP2, 5, SVC_TP3, 5, 4)
            WHEN LK.LINK_COUNT = 4 THEN 6
            END PRIO
     , '' RMK
     , NVL(TT1 + TT2 + TT3 + TT4,0) TOT_TT
     , LTRIM(TO_CHAR(TRUNC((TT1 + TT2 + TT3 + TT4)/24),'00'))||LTRIM(TO_CHAR(MOD((TT1 + TT2 + TT3 + TT4),24  ),'00')) FMT_TOT_TT
     , TT1, TT2, TT3, TT4
     , ST1 + ST2 + ST3 TOT_ST
     , LTRIM(TO_CHAR(TRUNC((ST1 + ST2 + ST3)/24),'00'))||LTRIM(TO_CHAR(MOD((ST1 + ST2 + ST3),24  ),'00')) FMT_TOT_ST
     , ST1, ST2, ST3
     , LNK_DIST1 N1ST_LNK_DIST, LNK_DIST2 N2ND_LNK_DIST, LNK_DIST3 N3RD_LNK_DIST, LNK_DIST4 N4TH_LNK_DIST
     , TS_IND
     , FDR_USD
     , POD1ETB, POL2ETB, POD2ETB, POL3ETB, POD3ETB, POL4ETB
     , LK.LINK_COUNT
     , '' P1
     , 'N' BKG_IND
     , DECODE(TG.ORG_LOC_CD, NULL, 'N', 'Y') TG_EXIST
     , 0 BKG_CNT
     , NVL(TG.UPD_IND_CD,'S') UPD_IND_CD
     , TO_CHAR(TG.CRE_DT , 'YYYY-MM-DD')C_DATE
     , TG.CRE_USR_ID C_USER
     , TG.ROUT_SEQ
     , CASE WHEN LINK_VALID_FLG = 'Y' THEN 'Y'
            WHEN LK.LK1 = 1 AND SVC_TP1 IS NULL THEN '1'
            WHEN LK.LK2 = 2 AND SVC_TP2 IS NULL THEN '2'
            WHEN LK.LK3 = 3 AND SVC_TP3 IS NULL THEN '3'
            WHEN LK.LK4 = 4 AND SVC_TP4 IS NULL THEN '4'
            ELSE 'N' END LINK_VALID_FLG
     , LTRIM(TO_CHAR(TRUNC((TT1 + TT2 + TT3 + TT4)/24),'00'))||LTRIM(TO_CHAR(MOD((TT1 + TT2 + TT3 + TT4),24  ),'00')) FMT_TOT_TT
     , LTRIM(TO_CHAR(TRUNC((ST1 + ST2 + ST3)/24),'00'))||LTRIM(TO_CHAR(MOD((ST1 + ST2 + ST3),24  ),'00')) FMT_TOT_ST
     , LTRIM(TO_CHAR(TRUNC((TT1 + TT2 + TT3 + TT4 + ST1 + ST2 + ST3)/24),'00'))||LTRIM(TO_CHAR(MOD((TT1 + TT2 + TT3 + TT4 + ST1 + ST2 + ST3),24  ),'00')) FMT_TT
     , TRIM(@[s_pol]) || '/' || TRIM(@[s_ts1_lane]) || '/' || TRIM(@[s_ts1_port])
                      || '/' || TRIM(@[s_ts2_lane]) || '/' || TRIM(@[s_ts2_port])
                      || '/' || TRIM(@[s_ts3_lane]) || '/' || TRIM(@[s_ts3_port])
                      || '/' || TRIM(@[s_ts4_lane]) || '/' || TRIM(@[s_pod]) FULL_ROUT
FROM (SELECT MAX(DECODE(LINK_POS, 1, '1')) LK1
           , MAX(DECODE(LINK_POS, 2, '2')) LK2
           , MAX(DECODE(LINK_POS, 3, '3')) LK3
           , MAX(DECODE(LINK_POS, 4, '4')) LK4
           , MAX(LINK_COUNT) LINK_COUNT
        FROM (
             SELECT LINK_POS, POL_CD, SLAN_CD
                   , DECODE(LINK_POS, MAX(DECODE(LINK_POS, 5, 0, LINK_POS)) OVER (), TRIM(@[s_pod]), POD_CD) POD_CD
                   , MAX(DECODE(LINK_POS, 5, 0, LINK_POS)) OVER () LINK_COUNT
              FROM (
                  SELECT CPY_NO LINK_POS
                       , DECODE(CPY_NO, 1, TRIM(@[s_pol]), 2, TRIM(@[s_ts1_port]), 3, TRIM(@[s_ts2_port]), 4, TRIM(@[s_ts3_port]), 5, TRIM(@[s_pod]) ) POL_CD
                       , DECODE(CPY_NO, 1, TRIM(@[s_ts1_lane]), 2, TRIM(@[s_ts2_lane]), 3, TRIM(@[s_ts3_lane]), 4, TRIM(@[s_ts4_lane]) ) SLAN_CD
                       , DECODE(CPY_NO, 1, TRIM(@[s_ts1_port]), 2, TRIM(@[s_ts2_port]), 3, TRIM(@[s_ts3_port]) ) POD_CD
                  FROM COM_CPY_NO
                  WHERE CPY_NO BETWEEN 1 AND 5
                   )
              WHERE POL_CD IS NOT NULL OR SLAN_CD IS NOT NULL
             )
         WHERE 'Y' = CASE WHEN POL_CD IS NOT NULL AND SLAN_CD IS NOT NULL AND POD_CD IS NOT NULL THEN 'Y' ELSE 'N' END
    ) LK
    LEFT OUTER JOIN
    (
    SELECT MAX(DECODE(LINK_POS, 1, POL    ))     POL1
         , MAX(DECODE(LINK_POS, 1, POD    ))     POD1
         , MAX(DECODE(LINK_POS, 1, LANE   ))    LANE1
         , MAX(DECODE(LINK_POS, 1, DIR    ))     DIR1
         , MAX(DECODE(LINK_POS, 1, FDR_FLG)) FDR_FLG1
         , MAX(DECODE(LINK_POS, 1, SVC_TP ))  SVC_TP1

         , MAX(DECODE(LINK_POS, 2, POL    ))     POL2
         , MAX(DECODE(LINK_POS, 2, POD    ))     POD2
         , MAX(DECODE(LINK_POS, 2, LANE   ))    LANE2
         , MAX(DECODE(LINK_POS, 2, DIR    ))     DIR2
         , MAX(DECODE(LINK_POS, 2, FDR_FLG)) FDR_FLG2
         , MAX(DECODE(LINK_POS, 2, SVC_TP ))  SVC_TP2

         , MAX(DECODE(LINK_POS, 3, POL    ))     POL3
         , MAX(DECODE(LINK_POS, 3, POD    ))     POD3
         , MAX(DECODE(LINK_POS, 3, LANE   ))    LANE3
         , MAX(DECODE(LINK_POS, 3, DIR    ))     DIR3
         , MAX(DECODE(LINK_POS, 3, FDR_FLG)) FDR_FLG3
         , MAX(DECODE(LINK_POS, 3, SVC_TP ))  SVC_TP3

         , MAX(DECODE(LINK_POS, 4, POL    ))     POL4
         , MAX(DECODE(LINK_POS, 4, POD    ))     POD4
         , MAX(DECODE(LINK_POS, 4, LANE   ))    LANE4
         , MAX(DECODE(LINK_POS, 4, DIR    ))     DIR4
         , MAX(DECODE(LINK_POS, 4, FDR_FLG)) FDR_FLG4
         , MAX(DECODE(LINK_POS, 4, SVC_TP ))  SVC_TP4

         , NVL(MAX(DECODE(LINK_POS, 1, TT)),0)     TT1
         , NVL(MAX(DECODE(LINK_POS, 2, TT)),0)     TT2
         , NVL(MAX(DECODE(LINK_POS, 3, TT)),0)     TT3
         , NVL(MAX(DECODE(LINK_POS, 4, TT)),0)     TT4

         , MAX(DECODE(LINK_POS, 1, LNK_DIST))     LNK_DIST1
         , MAX(DECODE(LINK_POS, 2, LNK_DIST))     LNK_DIST2
         , MAX(DECODE(LINK_POS, 3, LNK_DIST))     LNK_DIST3
         , MAX(DECODE(LINK_POS, 4, LNK_DIST))     LNK_DIST4

         , CASE WHEN MAX(DECODE(LINK_POS, 1, SVC_TP)) <> 'C' AND MAX(DECODE(LINK_POS, 2, SVC_TP)) <> 'C'
                THEN NVL(DECODE(
                     DECODE(MAX(DECODE(LINK_POS, 1, TO_PORT_ETB_DY_CD)), 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)
                     - DECODE(MAX(DECODE(LINK_POS, 2, FM_PORT_ETB_DY_CD)), 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)
                     ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24,0)
                ELSE 0 END ST1
         , CASE WHEN MAX(DECODE(LINK_POS, 2, SVC_TP)) <> 'C' AND MAX(DECODE(LINK_POS, 3, SVC_TP)) <> 'C'
                THEN NVL(DECODE(
                     DECODE(MAX(DECODE(LINK_POS, 2, TO_PORT_ETB_DY_CD)), 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)
                     - DECODE(MAX(DECODE(LINK_POS, 3, FM_PORT_ETB_DY_CD)), 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)
                     ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24,0)
                ELSE 0 END ST2
         , CASE WHEN MAX(DECODE(LINK_POS, 3, SVC_TP)) <> 'C' AND MAX(DECODE(LINK_POS, 4, SVC_TP)) <> 'C'
                THEN NVL(DECODE(
                     DECODE(MAX(DECODE(LINK_POS, 3, TO_PORT_ETB_DY_CD)), 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)
                     - DECODE(MAX(DECODE(LINK_POS, 4, FM_PORT_ETB_DY_CD)), 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)
                     ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24,0)
                ELSE 0 END ST3

         , DECODE(MAX(LINK_COUNT), 0, NULL, NULL, NULL, 1, 'D', 'T') TS_IND
         , 'N' FDR_USD
         , MAX(DECODE(LINK_POS, 1, TO_PORT_ETB_DY_CD    ))     POD1ETB
         , MAX(DECODE(LINK_POS, 2, FM_PORT_ETB_DY_CD    ))     POL2ETB
         , MAX(DECODE(LINK_POS, 2, TO_PORT_ETB_DY_CD    ))     POD2ETB
         , MAX(DECODE(LINK_POS, 3, FM_PORT_ETB_DY_CD    ))     POL3ETB
         , MAX(DECODE(LINK_POS, 3, TO_PORT_ETB_DY_CD    ))     POD3ETB
         , MAX(DECODE(LINK_POS, 4, FM_PORT_ETB_DY_CD    ))     POL4ETB
         , MAX(LINK_COUNT) LINK_COUNT
         , CASE WHEN TRIM(@[s_pod]) IS NULL THEN 'N'
                WHEN MAX(LINK_COUNT) = 4 THEN DECODE(NULL, MAX(DECODE(LINK_POS, 1, DIR)), '1', MAX(DECODE(LINK_POS, 2, DIR)),'2', MAX(DECODE(LINK_POS, 3, DIR)), '3', MAX(DECODE(LINK_POS, 4, DIR)), '4', 'Y')
                WHEN MAX(LINK_COUNT) = 3 THEN DECODE(NULL, MAX(DECODE(LINK_POS, 1, DIR)), '1', MAX(DECODE(LINK_POS, 2, DIR)),'2', MAX(DECODE(LINK_POS, 3, DIR)), '3', 'Y')
                WHEN MAX(LINK_COUNT) = 2 THEN DECODE(NULL, MAX(DECODE(LINK_POS, 1, DIR)), '1', MAX(DECODE(LINK_POS, 2, DIR)),'2', 'Y')
                WHEN MAX(LINK_COUNT) = 1 THEN DECODE(NULL, MAX(DECODE(LINK_POS, 1, DIR)), '1', 'Y')
                ELSE 'N' END LINK_VALID_FLG
        FROM (
              SELECT A.FM_PORT_CD   POL
                   , A.TO_PORT_CD   POD
                   ,  A.VSL_SLAN_CD  LANE
                   ,  A.SKD_DIR_CD   DIR
                   ,  'N'            FDR_FLG
                   , (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP
                   , A.TZTM_HRS TT
                   , M.LINK_POS
                   , A.FM_PORT_ETB_DY_CD
                   , A.TO_PORT_ETB_DY_CD
                   , M.LINK_COUNT
                   , A.LNK_DIST
              FROM (SELECT LINK_POS, POL_CD, SLAN_CD
                         , DECODE(LINK_POS, MAX(DECODE(LINK_POS, 5, 0, LINK_POS)) OVER (), TRIM(@[s_pod]), POD_CD) POD_CD
                         , MAX(DECODE(LINK_POS, 5, 0, LINK_POS)) OVER () LINK_COUNT
                      FROM (
                            SELECT CPY_NO LINK_POS
                                 , DECODE(CPY_NO, 1, TRIM(@[s_pol]), 2, TRIM(@[s_ts1_port]), 3, TRIM(@[s_ts2_port]), 4, TRIM(@[s_ts3_port]), 5, TRIM(@[s_pod]) ) POL_CD
                                 , DECODE(CPY_NO, 1, TRIM(@[s_ts1_lane]), 2, TRIM(@[s_ts2_lane]), 3, TRIM(@[s_ts3_lane]), 4, TRIM(@[s_ts4_lane]) ) SLAN_CD
                                 , DECODE(CPY_NO, 1, TRIM(@[s_ts1_port]), 2, TRIM(@[s_ts2_port]), 3, TRIM(@[s_ts3_port]) ) POD_CD
                            FROM COM_CPY_NO
                            WHERE CPY_NO BETWEEN 1 AND 5
                           )
                      WHERE POL_CD IS NOT NULL OR SLAN_CD IS NOT NULL) M
                 , PRD_PF_TZ_TM A
              WHERE M.LINK_POS < 5
                AND A.FM_PORT_CD = M.POL_CD
                AND A.TO_PORT_CD = M.POD_CD
                AND A.VSL_SLAN_CD = M.SLAN_CD
                AND A.DELT_FLG <> 'Y'
             UNION ALL
             SELECT LNK_ORG_LOC_CD POL
                  , LNK_DEST_LOC_CD POD
                  , VSL_SLAN_CD LANE
                  , SKD_DIR_CD DIR
                  , 'Y' FDR_FLG
                  , (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP
                  , TZTM_HRS TT
                  , M.LINK_POS
                  , '' FM_PORT_ETB_DY_CD
                  , '' TO_PORT_ETB_DY_CD
                  , M.LINK_COUNT
                  , NVL(B.STND_DIST,0) AS LNK_DIST
              FROM (SELECT LINK_POS, POL_CD, SLAN_CD
                        , DECODE(LINK_POS, MAX(DECODE(LINK_POS, 5, 0, LINK_POS)) OVER (), TRIM(@[s_pod]), POD_CD) POD_CD
                        , MAX(DECODE(LINK_POS, 5, 0, LINK_POS)) OVER () LINK_COUNT
                     FROM (
                           SELECT CPY_NO LINK_POS
                                , DECODE(CPY_NO, 1, TRIM(@[s_pol]), 2, TRIM(@[s_ts1_port]), 3, TRIM(@[s_ts2_port]), 4, TRIM(@[s_ts3_port]), 5, TRIM(@[s_pod]) ) POL_CD
                                , DECODE(CPY_NO, 1, TRIM(@[s_ts1_lane]), 2, TRIM(@[s_ts2_lane]), 3, TRIM(@[s_ts3_lane]), 4, TRIM(@[s_ts4_lane]) ) SLAN_CD
                                , DECODE(CPY_NO, 1, TRIM(@[s_ts1_port]), 2, TRIM(@[s_ts2_port]), 3, TRIM(@[s_ts3_port]) ) POD_CD
                           FROM COM_CPY_NO
                           WHERE CPY_NO BETWEEN 1 AND 5
                         )
                    WHERE POL_CD IS NOT NULL OR SLAN_CD IS NOT NULL) M
                 , PRD_FDR_LNK A
                 , VSK_PORT_DIST B
             WHERE M.LINK_POS < 5
              AND A.LNK_ORG_LOC_CD = M.POL_CD
              AND A.LNK_DEST_LOC_CD = M.POD_CD
              AND A.VSL_SLAN_CD = M.SLAN_CD
              AND NVL(DELT_FLG,'N') <> 'Y'
              AND B.FM_LOC_CD(+) = M.POL_CD
              AND B.TO_LOC_CD(+) = M.POD_CD
            )
    ) MK
    ON (1=1)
    LEFT OUTER JOIN PRD_OCN_ROUT TG
    ON (TG.UPD_IND_CD NOT IN ('D', 'N', 'O')
        AND   POL1            = TG.N1ST_POL_CD
        AND   LANE1           = TG.N1ST_LANE_CD
        AND   POD1            = TG.N1ST_POD_CD
        AND   NVL(LANE2, 'N') = NVL(TG.N2ND_LANE_CD,'N')
        AND   NVL(POD2,  'N') = NVL(TG.N2ND_POD_CD, 'N')
        AND   NVL(LANE3, 'N') = NVL(TG.N3RD_LANE_CD,'N')
        AND   NVL(POD3,  'N') = NVL(TG.N3RD_POD_CD, 'N')
        AND   NVL(LANE4, 'N') = NVL(TG.N4TH_LANE_CD,'N')
        AND   NVL(POD4,  'N') = NVL(TG.N4TH_POD_CD, 'N')
       )			]]></sql>
			<params>
				<param name="s_pol" type="12" value="" out="N"/>
				<param name="s_pod" type="12" value="" out="N"/>
				<param name="s_ts1_lane" type="12" value="" out="N"/>
				<param name="s_ts1_port" type="12" value="" out="N"/>
				<param name="s_ts2_lane" type="12" value="" out="N"/>
				<param name="s_ts2_port" type="12" value="" out="N"/>
				<param name="s_ts3_lane" type="12" value="" out="N"/>
				<param name="s_ts3_port" type="12" value="" out="N"/>
				<param name="s_ts4_lane" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
