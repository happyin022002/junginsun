<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="MarineTerminalStorageInvoiceManageDBDAOVerifyStorageInvoiceCostByPoolRSQL">
			<desc><![CDATA[VerifyStorageInvoiceCostByPool]]></desc>
			<sql><![CDATA[
SELECT 	  'I' AS IBFLAG
		, 'A' AS CALC_TP_CD
		, 'SP' AS CALC_COST_GRP_CD
#if (${mode} == 'M') 
		, 'M' FP_CALC_PRD_CD
#else 
		, 'D' FP_CALC_PRD_CD
#end
		, NVL(CALC.LGS_COST_CD, 'SRNDMT') AS LGS_COST_CD
		, NVL(CALC.LGS_COST_CD, 'SRNDMT') AS LGS_COST_CD2
		, ORG.WRK_DT
		, ORG.INV_VOL_QTY
		, C.ACCT_CD
		, CALC.M_DATE
		, NVL(CALC.TML_AGMT_OFC_CTY_CD, AGMT.TML_AGMT_OFC_CTY_CD) AS TML_AGMT_OFC_CTY_CD
		, NVL(CALC.TML_AGMT_SEQ, AGMT.TML_AGMT_SEQ) AS TML_AGMT_SEQ
		, NVL(CALC.TML_AGMT_VER_NO, AGMT.TML_AGMT_VER_NO) AS TML_AGMT_VER_NO
		, NVL(CALC.FP_TEU_QTY, AGMT.FP_TEU_QTY) AS FP_TEU_QTY
		, NVL(CALC.UOM, AGMT.UOM) AS VOL_TR_UT_CD
		, NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT) AS CTRT_RT
		-- CHM-201433247 MR Storage Cost Cal.(SR by FP)에서 Auto Cal하면 이중계산 되는 오류 수정 (양양선B 요청)
		-- AGMT Tier Over Days 계산위한 로직 수정 (2015-03-10)
--		, NVL(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), 0) AS INV_AMT
--		, NVL(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), 0) AS CALC_AMT
--		, NVL(DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS)), -1, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), -1, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), DECODE(NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS), 999, (NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1)  * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), (NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT))), 0) AS INV_AMT
--		, NVL(DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS)), -1, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), -1, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), DECODE(NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS), 999, (NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1)  * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), (NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT))), 0) AS CALC_AMT
		-- [CHM-201535623]TES: Over Days를 구하는 부분에서 Tier Over Days 값이 없는 경우를 고려한 로직 수정 (MR Storage) 
		, CASE WHEN NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) = 0 THEN NVL(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), 0)
               ELSE NVL(DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS)), -1, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), -1, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), DECODE(NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS), 999, (NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1)  * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), (NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT))), 0)
          END AS INV_AMT 
        , CASE WHEN NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) = 0 THEN NVL(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), 0)
               ELSE NVL(DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS)), -1, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), -1, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), DECODE(NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS), 999, (NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1)  * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), (NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT))), 0) 
          END AS CALC_AMT
		, NVL(CALC.STACKING_VOL, 0) AS STK_VOL_QTY
		, NVL(CALC.STACKING_VOL, 0) - NVL(ORG.INV_VOL_QTY, 0) AS DIFF_VOL_QTY
		-- CHM-201433247 MR Storage Cost Cal.(SR by FP)에서 Auto Cal하면 이중계산 되는 오류 수정 (양양선B 요청)
		-- AGMT Tier Over Days 계산위한 로직 수정 (2015-03-10)
--		, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY)), -1, 0, 0, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY)) AS OVR_VOL_QTY
--		, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS)), -1, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), -1, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), DECODE(NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS), 999, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1, NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1 )) AS OVR_VOL_QTY
		-- [CHM-201535623]TES: Over Days를 구하는 부분에서 Tier Over Days 값이 없는 경우를 고려한 로직 수정 (MR Storage) 
		, CASE WHEN NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) = 0 THEN DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY)), -1, 0, 0, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY))
               ELSE DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS)), -1, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), -1, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), DECODE(NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS), 999, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1, NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1 ))
		  END AS OVR_VOL_QTY
		, NVL(CALC.CURR_CHK, AGMT.CURR_CHK) AS CURR_CHK
		, NVL(CALC.CURR_CD, AGMT.CURR_CD) AS CURR_CD
		, 1 AS INV_XCH_RT
		, NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) AS FM_TR_DYS
		, NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS) AS TO_TR_DYS
FROM	( SELECT 'SRNDMT' AS LGS_COST_CD,
#if (${mode} == 'M') 
				SUBSTR(TGT_MVMT_DT, 0, 6) AS M_DATE,
#else 
				SUBSTR(TGT_MVMT_DT, 0, 8) AS M_DATE,
#end
				SUM(DECODE(M.CNTR_TPSZ_CD,'D7', M.CNTR_KNT,0))*2.25+
				SUM(DECODE(M.CNTR_TPSZ_CD,'D8', M.CNTR_KNT,0))*2.4+
				SUM(DECODE(M.CNTR_TPSZ_CD,'D9', M.CNTR_KNT,0))*2.4+
				SUM(DECODE(M.CNTR_TPSZ_CD,'DW', M.CNTR_KNT,0))*2.65+
				SUM(DECODE(M.CNTR_TPSZ_CD,'DX', M.CNTR_KNT,0))*2.25+
				SUM(DECODE(M.CNTR_TPSZ_CD,'D7',0,'D8',0,'D9',0,'DW',0,'DX',0,DECODE(SUBSTR(M.CNTR_TPSZ_CD,2,1),2, M.CNTR_KNT,0)))+
				SUM(DECODE(M.CNTR_TPSZ_CD,'D7',0,'D8',0,'D9',0,'DW',0,'DX',0,DECODE(SUBSTR(M.CNTR_TPSZ_CD,2,1),2,0, M.CNTR_KNT*2))) AS STACKING_VOL,
				P.INV_VOL_QTY,
				D.FP_TEU_QTY,
				DECODE(SIGN(P.INV_VOL_QTY - D.FP_TEU_QTY), -1, 0, 0, 0, (P.INV_VOL_QTY - D.FP_TEU_QTY)) OVR_VOL_QTY, --P.INV_VOL_QTY - D.FP_TEU_QTY OVR_VOL_QTY,
				D.TML_AGMT_VOL_UT_CD AS UOM,
				D.AGMT_UT_RT
				, H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO,
				( P.INV_VOL_QTY - D.FP_TEU_QTY ) * D.AGMT_UT_RT AS AMOUNT,
				DECODE(@[curr_cd], D.CURR_CD, 'Y', 'N') AS CURR_CHK
				, D.CURR_CD
				--2015.04.20 [CHM-201535341]Storage Rate List에서 Tier Over Days 없어도 CNTR Verification되도록 설정변경
				, NVL(FM_TR_DYS, 0) FM_TR_DYS
				, NVL(TO_TR_DYS, 0) TO_TR_DYS
		-- CHM-201538470 TES: MT Storage(FP)의 verify data 변경 (ATLAS->CIM) TES_EQ_LAND_STAY > CIM_DLY_INV_SMRY 변경 - (2015-10-22 양양선B) TEST만 반영 테스트후 라이브 반영 여부 결정
        FROM   CIM_DLY_INV_SMRY M, TES_TML_AGMT_HDR H, TES_TML_AGMT_DTL D, TES_FILE_IMP_TMP P
  	    WHERE  M.TGT_MVMT_DT  >= DECODE(@[mode], 'D', P.WRK_DT, P.WRK_DT||'01')
  	    AND    M.TGT_MVMT_DT  <= DECODE(@[mode], 'D', P.WRK_DT, TO_CHAR(LAST_DAY(TO_DATE(P.WRK_DT, 'YYYYMM')), 'YYYYMMDD'))
--        AND    M.CNTR_FULL_FLG <> 'Y'	-- TES_EQ_LAND_STAY > CIM_DLY_INV_SMRY 변경 - (2015-10-22 양양선B)
  	    AND    P.TML_SO_OFC_CTY_CD	= @[tml_so_ofc_cty_cd]
  	    AND    P.TML_SO_SEQ    		= @[tml_so_seq]
        AND    M.YD_CD         		= P.YD_CD
        AND    M.YD_CD         		= H.YD_CD
        AND    H.VNDR_SEQ      		= P.VNDR_SEQ
        AND    H.TML_AGMT_STS_CD 	= 'C'
		AND    M.MVMT_STS_CD     	= 'MT' -- 2013.11.20 양양선 부장님 요청으로 추가함.(MT, OP가 같이 나오고 있어서 OP때문에 중복되고 있었음)
        AND    H.DELT_FLG        	= 'N'
        AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)
                                     FROM   TES_TML_AGMT_HDR M
                                     WHERE  M.YD_CD               = P.YD_CD
                                     AND    M.VNDR_SEQ            = P.VNDR_SEQ
                                     AND    M.TML_AGMT_STS_CD     = 'C'
                                     AND    M.DELT_FLG            = 'N'
                                     AND    TO_CHAR(M.EFF_FM_DT, 'YYYYMMDD') <= P.FM_PRD_DT
                                     AND    TO_CHAR(M.EFF_TO_DT, 'YYYYMMDD') >= P.TO_PRD_DT )
        AND    H.TML_AGMT_OFC_CTY_CD = D.TML_AGMT_OFC_CTY_CD(+)
        AND    H.TML_AGMT_SEQ        = D.TML_AGMT_SEQ(+)
        AND    H.TML_AGMT_VER_NO     = D.TML_AGMT_VER_NO(+)
        AND    D.TML_AGMT_TP_CD      = 'S'
        AND    D.AUTO_CALC_FLG       = 'Y'
        AND    D.LGS_COST_CD         = 'SRNDMT'
        AND    D.TML_STO_AGMT_TP_CD  = 'FP'
#if (${mode} == 'M') 
		AND    D.FP_CALC_PRD_CD      = 'M'
		GROUP BY SUBSTR(TGT_MVMT_DT, 0, 6)
#else 
		AND    D.FP_CALC_PRD_CD      = 'D'
		GROUP BY TGT_MVMT_DT
#end
				, P.INV_VOL_QTY
				, H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO
				, D.FP_TEU_QTY, D.TML_AGMT_VOL_UT_CD, D.AGMT_UT_RT, D.CURR_CD
				, FM_TR_DYS
				, TO_TR_DYS
		) CALC
		, (SELECT	WRK_DT, INV_VOL_QTY
		FROM	TES_FILE_IMP_TMP
		WHERE	TML_SO_OFC_CTY_CD	= @[tml_so_ofc_cty_cd]
		AND		TML_SO_SEQ			= @[tml_so_seq]
		 ) ORG
		, TES_LGS_COST C
		, (SELECT	T.WRK_DT, T.INV_VOL_QTY, D.FP_TEU_QTY, D.TML_AGMT_VOL_UT_CD UOM, D.AGMT_UT_RT,
                DECODE(@[curr_cd], D.CURR_CD, 'Y', 'N') CURR_CHK, D.CURR_CD,
                H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO,
                DECODE(SIGN(T.INV_VOL_QTY - D.FP_TEU_QTY),-1,0,0,0,(T.INV_VOL_QTY - D.FP_TEU_QTY)) OVR_VOL_QTY
				--2015.04.20 [CHM-201535341]Storage Rate List에서 Tier Over Days 없어도 CNTR Verification되도록 설정변경
				, NVL(FM_TR_DYS, 0) FM_TR_DYS
				, NVL(TO_TR_DYS, 0) TO_TR_DYS
		FROM   TES_FILE_IMP_TMP T, TES_TML_AGMT_HDR H, TES_TML_AGMT_DTL D
		WHERE  T.TML_SO_OFC_CTY_CD	= @[tml_so_ofc_cty_cd]
		AND    T.TML_SO_SEQ			= @[tml_so_seq]
		AND    H.VNDR_SEQ			= T.VNDR_SEQ
		AND    H.TML_AGMT_STS_CD	= 'C'
		AND    H.DELT_FLG        	= 'N'
		AND    H.TML_AGMT_VER_NO 	= (SELECT MAX(M.TML_AGMT_VER_NO)
                                      FROM   TES_TML_AGMT_HDR M
                                      WHERE  M.YD_CD               = T.YD_CD
                                      AND    M.VNDR_SEQ            = T.VNDR_SEQ
                                      AND    M.TML_AGMT_STS_CD     = 'C'
                                      AND    M.DELT_FLG            = 'N'
                                      AND    TO_CHAR(M.EFF_FM_DT, 'YYYYMMDD') <= T.FM_PRD_DT
                                      AND    TO_CHAR(M.EFF_TO_DT, 'YYYYMMDD') >= T.TO_PRD_DT )
		AND    H.TML_AGMT_OFC_CTY_CD = D.TML_AGMT_OFC_CTY_CD(+)
		AND    H.TML_AGMT_SEQ        = D.TML_AGMT_SEQ(+)
		AND    H.TML_AGMT_VER_NO     = D.TML_AGMT_VER_NO(+)
		AND    D.TML_AGMT_TP_CD      = 'S'
		AND    D.AUTO_CALC_FLG       = 'Y'
		AND    D.LGS_COST_CD         = 'SRNDMT'
		AND    D.TML_STO_AGMT_TP_CD  = 'FP'
-- 20091228 FILE IMPORT 시  월,일별로 나누어서 처리해야함 
#if (${mode} == 'M') 
		AND    D.FP_CALC_PRD_CD      = 'M'
#else
		AND    D.FP_CALC_PRD_CD      = 'D'
#end
		) AGMT		
WHERE	ORG.WRK_DT      	= CALC.M_DATE(+)
AND		ORG.INV_VOL_QTY 	= CALC.INV_VOL_QTY(+)
AND		ORG.WRK_DT      	= AGMT.WRK_DT(+)
AND		ORG.INV_VOL_QTY 	= AGMT.INV_VOL_QTY(+)
--2015.04.20 [CHM-201535341]Storage Rate List에서 Tier Over Days 없어도 CNTR Verification되도록 설정변경
AND		((NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) = 1 OR NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) = 0)
OR		(ORG.INV_VOL_QTY	>= CALC.FP_TEU_QTY
AND		ORG.INV_VOL_QTY - CALC.FP_TEU_QTY >= CALC.FM_TR_DYS))
AND		CALC.LGS_COST_CD	= C.LGS_COST_CD(+)
GROUP BY  NVL(CALC.LGS_COST_CD, 'SRNDMT')
		, NVL(CALC.LGS_COST_CD, 'SRNDMT')
		, ORG.WRK_DT
		, ORG.INV_VOL_QTY
		, C.ACCT_CD
		, CALC.M_DATE
		, NVL(CALC.TML_AGMT_OFC_CTY_CD, AGMT.TML_AGMT_OFC_CTY_CD)
		, NVL(CALC.TML_AGMT_SEQ, AGMT.TML_AGMT_SEQ)
		, NVL(CALC.TML_AGMT_VER_NO, AGMT.TML_AGMT_VER_NO)
		, NVL(CALC.FP_TEU_QTY, AGMT.FP_TEU_QTY)
		, NVL(CALC.UOM, AGMT.UOM)
		, NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT)
        , NVL(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), 0)
		, NVL(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), 0)
		, NVL(DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS)), -1, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), -1, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), DECODE(NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS), 999, (NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1)  * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), (NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT))), 0)
		, NVL(DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS)), -1, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), -1, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), DECODE(NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS), 999, (NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1)  * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT), (NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1) * NVL(CALC.AGMT_UT_RT, AGMT.AGMT_UT_RT))), 0)
		, NVL(CALC.STACKING_VOL, 0)
		, NVL(CALC.STACKING_VOL, 0) - NVL(ORG.INV_VOL_QTY, 0)
	    , DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY)), -1, 0, 0, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY))
    	, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS)), -1, DECODE(SIGN(NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), -1, 0, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - (NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) - 1)), DECODE(NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS), 999, NVL(CALC.OVR_VOL_QTY, AGMT.OVR_VOL_QTY) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1, NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS) - NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS) + 1 ))
		, NVL(CALC.CURR_CHK, AGMT.CURR_CHK)
		, NVL(CALC.CURR_CD, AGMT.CURR_CD)
		, NVL(CALC.FM_TR_DYS, AGMT.FM_TR_DYS)
		, NVL(CALC.TO_TR_DYS, AGMT.TO_TR_DYS)
ORDER BY  ORG.WRK_DT			]]></sql>
			<params>
				<param name="curr_cd" type="12" value="" out="N"/>
				<param name="mode" type="12" value="" out="N"/>
				<param name="tml_so_ofc_cty_cd" type="12" value="" out="N"/>
				<param name="tml_so_seq" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
