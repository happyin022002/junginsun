/*=========================================================
*Copyright(c) 2011 CyberLogitec
*@FileName : OceanRouteManageDBDAOSearchOceanRouteAutoCreationRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2011.08.11
*@LastModifier : 박만건
*@LastVersion : 1.0
* 2011.08.11 박만건
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esd.prd.networklinkmanage.oceanroutemanage.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author Park Mangeon
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class OceanRouteManageDBDAOSearchOceanRouteAutoCreationRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * SearchOceanRouteAutoCreation
	  * </pre>
	  */
	public OceanRouteManageDBDAOSearchOceanRouteAutoCreationRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("pod_port_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("tnk_lane_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("pol_port_cd",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esd.prd.networklinkmanage.oceanroutemanage.integration").append("\n"); 
		query.append("FileName : OceanRouteManageDBDAOSearchOceanRouteAutoCreationRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("SELECT ST," ).append("\n"); 
		query.append("     @[pol_port_cd] ORG_LOC_CD," ).append("\n"); 
		query.append("     @[pod_port_cd] DEST_LOC_CD," ).append("\n"); 
		query.append("     POL1," ).append("\n"); 
		query.append("     POD1," ).append("\n"); 
		query.append("     LANE1," ).append("\n"); 
		query.append("     DIR1," ).append("\n"); 
		query.append("     FDR_FLG1," ).append("\n"); 
		query.append("     SVC_TP1," ).append("\n"); 
		query.append("     POL2," ).append("\n"); 
		query.append("     POD2," ).append("\n"); 
		query.append("     LANE2," ).append("\n"); 
		query.append("     DIR2," ).append("\n"); 
		query.append("     FDR_FLG2," ).append("\n"); 
		query.append("     SVC_TP2," ).append("\n"); 
		query.append("     POL3," ).append("\n"); 
		query.append("     POD3," ).append("\n"); 
		query.append("     LANE3," ).append("\n"); 
		query.append("     DIR3," ).append("\n"); 
		query.append("     FDR_FLG3," ).append("\n"); 
		query.append("     SVC_TP3," ).append("\n"); 
		query.append("     POL4," ).append("\n"); 
		query.append("     POD4," ).append("\n"); 
		query.append("     LANE4," ).append("\n"); 
		query.append("     DIR4," ).append("\n"); 
		query.append("     FDR_FLG4," ).append("\n"); 
		query.append("     SVC_TP4," ).append("\n"); 
		query.append("     PRIO," ).append("\n"); 
		query.append("     decode(tg.upd_ind_cd, '',RMK, tg.ocn_rout_usr_rmk ) RMK," ).append("\n"); 
		query.append("     TOT_TT," ).append("\n"); 
		query.append("     ltrim(to_char(trunc((TOT_TT)/24),'00'))||ltrim(to_char(mod((TOT_TT),24  ),'00')) FMT_TOT_TT ," ).append("\n"); 
		query.append("     TT1," ).append("\n"); 
		query.append("     TT2," ).append("\n"); 
		query.append("     TT3," ).append("\n"); 
		query.append("     TT4," ).append("\n"); 
		query.append("     TOT_ST," ).append("\n"); 
		query.append("     ltrim(to_char(trunc((TOT_ST)/24),'00'))||ltrim(to_char(mod((TOT_ST),24  ),'00')) FMT_TOT_ST ," ).append("\n"); 
		query.append("     ST1," ).append("\n"); 
		query.append("     ST2," ).append("\n"); 
		query.append("     ST3," ).append("\n"); 
		query.append("     TS_IND," ).append("\n"); 
		query.append("     FDR_USD," ).append("\n"); 
		query.append("     POD1ETB," ).append("\n"); 
		query.append("     POL2ETB," ).append("\n"); 
		query.append("     POD2ETB," ).append("\n"); 
		query.append("     POL3ETB," ).append("\n"); 
		query.append("     POD3ETB," ).append("\n"); 
		query.append("     POL4ETB," ).append("\n"); 
		query.append("     LINK_COUNT," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	'N' BKG_IND ," ).append("\n"); 
		query.append(" 	DECODE(TG.ORG_LOC_CD, NULL, 'N', 'Y') TG_EXIST," ).append("\n"); 
		query.append("	0 BKG_CNT ," ).append("\n"); 
		query.append("	 nvl(tg.upd_ind_cd,'S') upd_ind_cd" ).append("\n"); 
		query.append(" FROM (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(" 	SELECT 'A' ST," ).append("\n"); 
		query.append(" 	       A.FM_PORT_CD   POL1," ).append("\n"); 
		query.append(" 	       A.TO_PORT_CD   POD1," ).append("\n"); 
		query.append(" 	       A.VSL_SLAN_CD  LANE1," ).append("\n"); 
		query.append(" 	       A.SKD_DIR_CD   DIR1," ).append("\n"); 
		query.append(" 	       'N'            FDR_FLG1," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP1," ).append("\n"); 
		query.append(" 	       NULL           POL2," ).append("\n"); 
		query.append(" 	       NULL           POD2," ).append("\n"); 
		query.append(" 	       NULL           LANE2," ).append("\n"); 
		query.append(" 	       NULL           DIR2," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG2," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP2," ).append("\n"); 
		query.append(" 	       NULL           POL3," ).append("\n"); 
		query.append(" 	       NULL           POD3," ).append("\n"); 
		query.append(" 	       NULL           LANE3," ).append("\n"); 
		query.append(" 	       NULL           DIR3," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG3," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP3," ).append("\n"); 
		query.append(" 	       NULL           POL4," ).append("\n"); 
		query.append(" 	       NULL           POD4," ).append("\n"); 
		query.append(" 	       NULL           LANE4," ).append("\n"); 
		query.append(" 	       NULL           DIR4," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG4," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP4," ).append("\n"); 
		query.append(" 	       1              PRIO," ).append("\n"); 
		query.append(" 	       NULL           RMK," ).append("\n"); 
		query.append(" 	       A.TZTM_HRS     TOT_TT," ).append("\n"); 
		query.append(" 	       A.TZTM_HRS     TT1," ).append("\n"); 
		query.append(" 	       0              TT2," ).append("\n"); 
		query.append(" 	       0              TT3," ).append("\n"); 
		query.append(" 	       0              TT4," ).append("\n"); 
		query.append(" 	       0              TOT_ST," ).append("\n"); 
		query.append(" 	       0              ST1," ).append("\n"); 
		query.append(" 	       0              ST2," ).append("\n"); 
		query.append(" 	       0              ST3," ).append("\n"); 
		query.append(" 	       'D'            TS_IND," ).append("\n"); 
		query.append(" 	       'N'            FDR_USD," ).append("\n"); 
		query.append(" 		   A.TO_PORT_ETB_DY_CD POD1ETB," ).append("\n"); 
		query.append(" 		   NULL           POL2ETB," ).append("\n"); 
		query.append(" 		   NULL           POD2ETB," ).append("\n"); 
		query.append(" 		   NULL           POL3ETB," ).append("\n"); 
		query.append(" 		   NULL           POD3ETB," ).append("\n"); 
		query.append(" 		   NULL           POL4ETB," ).append("\n"); 
		query.append(" 		   1              LINK_COUNT" ).append("\n"); 
		query.append(" 	FROM PRD_PF_TZ_TM A" ).append("\n"); 
		query.append(" 	WHERE A.FM_PORT_CD   = @[pol_port_cd]" ).append("\n"); 
		query.append(" 	AND   A.TO_PORT_CD   = @[pod_port_cd]" ).append("\n"); 
		query.append("     AND   A.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%'" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE A.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND A.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND A.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D')" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE A.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1)" ).append("\n"); 
		query.append("       AND A.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("     UNION ALL" ).append("\n"); 
		query.append(" 	SELECT 'B' ST," ).append("\n"); 
		query.append(" 	       A.FM_PORT_CD   POL1," ).append("\n"); 
		query.append(" 	       A.TO_PORT_CD   POD1," ).append("\n"); 
		query.append(" 	       A.VSL_SLAN_CD  LANE1," ).append("\n"); 
		query.append(" 	       A.SKD_DIR_CD   DIR1," ).append("\n"); 
		query.append(" 	       'N'            FDR_FLG1," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP1," ).append("\n"); 
		query.append(" 	       B.FM_PORT_CD   POL2," ).append("\n"); 
		query.append(" 	       B.TO_PORT_CD   POD2," ).append("\n"); 
		query.append(" 	       B.VSL_SLAN_CD  LANE2," ).append("\n"); 
		query.append(" 	       B.SKD_DIR_CD   DIR2," ).append("\n"); 
		query.append(" 	       'N'            FDR_FLG2," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = B.VSL_SLAN_CD) SVC_TP2," ).append("\n"); 
		query.append(" 	       NULL           POL3," ).append("\n"); 
		query.append(" 	       NULL           POD3," ).append("\n"); 
		query.append(" 	       NULL           LANE3," ).append("\n"); 
		query.append(" 	       NULL           DIR3," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG3," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP3," ).append("\n"); 
		query.append(" 	       NULL           POL4," ).append("\n"); 
		query.append(" 	       NULL           POD4," ).append("\n"); 
		query.append(" 	       NULL           LANE4," ).append("\n"); 
		query.append(" 	       NULL           DIR4," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG4," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP4," ).append("\n"); 
		query.append(" 	       2              PRIO," ).append("\n"); 
		query.append(" 	       NULL           RMK," ).append("\n"); 
		query.append(" 	       (A.TZTM_HRS + B.TZTM_HRS)     TOT_TT," ).append("\n"); 
		query.append(" 	       A.TZTM_HRS     TT1," ).append("\n"); 
		query.append(" 	       B.TZTM_HRS     TT2," ).append("\n"); 
		query.append(" 	       0              TT3," ).append("\n"); 
		query.append(" 	       0              TT4," ).append("\n"); 
		query.append(" 	       DECODE(" ).append("\n"); 
		query.append("                 DECODE(A.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(B.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24              TOT_ST," ).append("\n"); 
		query.append(" 	       DECODE(" ).append("\n"); 
		query.append("                 DECODE(A.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(B.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24              ST1," ).append("\n"); 
		query.append(" 	       0              ST2," ).append("\n"); 
		query.append(" 	       0              ST3," ).append("\n"); 
		query.append(" 	       'T'            TS_IND," ).append("\n"); 
		query.append(" 	       'N'            FDR_USD," ).append("\n"); 
		query.append(" 		   A.TO_PORT_ETB_DY_CD POD1ETB," ).append("\n"); 
		query.append(" 		   B.FM_PORT_ETB_DY_CD POL2ETB," ).append("\n"); 
		query.append(" 		   B.TO_PORT_ETB_DY_CD POD2ETB," ).append("\n"); 
		query.append(" 		   NULL           POL3ETB," ).append("\n"); 
		query.append(" 		   NULL           POD3ETB," ).append("\n"); 
		query.append(" 		   NULL           POL4ETB," ).append("\n"); 
		query.append(" 		   2              LINK_COUNT" ).append("\n"); 
		query.append(" 	FROM PRD_PF_TZ_TM A, PRD_PF_TZ_TM B" ).append("\n"); 
		query.append(" 	WHERE A.TO_PORT_CD   = B.FM_PORT_CD" ).append("\n"); 
		query.append(" 	AND   A.FM_PORT_CD   = @[pol_port_cd]" ).append("\n"); 
		query.append(" 	AND   B.TO_PORT_CD   = @[pod_port_cd]" ).append("\n"); 
		query.append("     AND   (A.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR B.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%')" ).append("\n"); 
		query.append("     AND   A.VSL_SLAN_CD  <> B.VSL_SLAN_CD" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE A.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1)" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE B.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1)" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE A.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND A.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND A.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D')" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE B.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND B.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND B.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D')" ).append("\n"); 
		query.append("     AND   (A.TZTM_HRS + B.TZTM_HRS) < 50 * 24" ).append("\n"); 
		query.append("     AND A.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("       AND B.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("     UNION ALL" ).append("\n"); 
		query.append(" 	SELECT 'C' ST," ).append("\n"); 
		query.append(" 	       A.LNK_ORG_LOC_CD   POL1," ).append("\n"); 
		query.append(" 	       A.LNK_DEST_LOC_CD  POD1," ).append("\n"); 
		query.append(" 	       A.VSL_SLAN_CD      LANE1," ).append("\n"); 
		query.append(" 	       A.SKD_DIR_CD       DIR1," ).append("\n"); 
		query.append(" 	       'Y'                FDR_FLG1," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP1," ).append("\n"); 
		query.append(" 	       B.FM_PORT_CD   POL2," ).append("\n"); 
		query.append(" 	       B.TO_PORT_CD   POD2," ).append("\n"); 
		query.append(" 	       B.VSL_SLAN_CD  LANE2," ).append("\n"); 
		query.append(" 	       B.SKD_DIR_CD   DIR2," ).append("\n"); 
		query.append(" 	       'N'            FDR_FLG2," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = B.VSL_SLAN_CD) SVC_TP2," ).append("\n"); 
		query.append(" 	       NULL           POL3," ).append("\n"); 
		query.append(" 	       NULL           POD3," ).append("\n"); 
		query.append(" 	       NULL           LANE3," ).append("\n"); 
		query.append(" 	       NULL           DIR3," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG3," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP3," ).append("\n"); 
		query.append(" 	       NULL           POL4," ).append("\n"); 
		query.append(" 	       NULL           POD4," ).append("\n"); 
		query.append(" 	       NULL           LANE4," ).append("\n"); 
		query.append(" 	       NULL           DIR4," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG4," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP4," ).append("\n"); 
		query.append(" 	       3              PRIO," ).append("\n"); 
		query.append(" 	       NULL           RMK," ).append("\n"); 
		query.append(" 	       (A.TZTM_HRS + B.TZTM_HRS)     TOT_TT," ).append("\n"); 
		query.append(" 	       A.TZTM_HRS     TT1," ).append("\n"); 
		query.append(" 	       B.TZTM_HRS     TT2," ).append("\n"); 
		query.append(" 	       0              TT3," ).append("\n"); 
		query.append(" 	       0              TT4," ).append("\n"); 
		query.append("            0              TOT_ST," ).append("\n"); 
		query.append(" 	       0              ST1," ).append("\n"); 
		query.append(" 	       0              ST2," ).append("\n"); 
		query.append(" 	       0              ST3," ).append("\n"); 
		query.append(" 	       'T'            TS_IND," ).append("\n"); 
		query.append(" 	       'N'            FDR_USD,  -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POD1ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.FM_PORT_ETB_DY_CD POL2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.TO_PORT_ETB_DY_CD POD2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL3ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POD3ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL4ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   2              LINK_COUNT      -- OPTION" ).append("\n"); 
		query.append(" 	FROM PRD_FDR_LNK A, PRD_PF_TZ_TM B" ).append("\n"); 
		query.append(" 	WHERE A.LNK_DEST_LOC_CD = B.FM_PORT_CD" ).append("\n"); 
		query.append(" 	AND   A.LNK_ORG_LOC_CD  = @[pol_port_cd]" ).append("\n"); 
		query.append(" 	AND   B.TO_PORT_CD      = @[pod_port_cd]" ).append("\n"); 
		query.append("     AND   (A.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR B.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%')" ).append("\n"); 
		query.append("     AND   A.VSL_SLAN_CD  <> B.VSL_SLAN_CD" ).append("\n"); 
		query.append("     AND   A.PCTL_IO_BND_CD IN ('O', 'B')" ).append("\n"); 
		query.append("     AND   SUBSTR(A.LNK_ORG_LOC_CD, 1, 2) <> SUBSTR(B.TO_PORT_CD, 1, 2)" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE B.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1)" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE B.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND B.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND B.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D')" ).append("\n"); 
		query.append("     AND   (A.TZTM_HRS + B.TZTM_HRS) < 50 * 24" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = A.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = B.TO_PORT_CD )" ).append("\n"); 
		query.append("       AND B.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("     -- CASE D   2개의 LINK로 이루어진거, HO LINK - FDR" ).append("\n"); 
		query.append("     UNION ALL" ).append("\n"); 
		query.append(" 	SELECT 'D' ST,                     -- ST (CASE)" ).append("\n"); 
		query.append(" 	       A.FM_PORT_CD       POL1," ).append("\n"); 
		query.append(" 	       A.TO_PORT_CD       POD1," ).append("\n"); 
		query.append(" 	       A.VSL_SLAN_CD      LANE1," ).append("\n"); 
		query.append(" 	       A.SKD_DIR_CD       DIR1," ).append("\n"); 
		query.append(" 	       'N'                FDR_FLG1," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP1," ).append("\n"); 
		query.append(" 	       B.LNK_ORG_LOC_CD   POL2," ).append("\n"); 
		query.append(" 	       B.LNK_DEST_LOC_CD   POD2," ).append("\n"); 
		query.append(" 	       B.VSL_SLAN_CD  LANE2," ).append("\n"); 
		query.append(" 	       B.SKD_DIR_CD   DIR2," ).append("\n"); 
		query.append(" 	       'Y'            FDR_FLG2," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = B.VSL_SLAN_CD) SVC_TP2," ).append("\n"); 
		query.append(" 	       NULL           POL3," ).append("\n"); 
		query.append(" 	       NULL           POD3," ).append("\n"); 
		query.append(" 	       NULL           LANE3," ).append("\n"); 
		query.append(" 	       NULL           DIR3," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG3," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP3," ).append("\n"); 
		query.append(" 	       NULL           POL4," ).append("\n"); 
		query.append(" 	       NULL           POD4," ).append("\n"); 
		query.append(" 	       NULL           LANE4," ).append("\n"); 
		query.append(" 	       NULL           DIR4," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG4," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP4," ).append("\n"); 
		query.append(" 	       3              PRIO,        -- MOTHER - FEEDER" ).append("\n"); 
		query.append(" 	       NULL           RMK,         -- OPTION" ).append("\n"); 
		query.append(" 	       (A.TZTM_HRS + B.TZTM_HRS)     TOT_TT,    -- TRANSIT TIME WHY SUM" ).append("\n"); 
		query.append(" 	       A.TZTM_HRS     TT1," ).append("\n"); 
		query.append(" 	       B.TZTM_HRS     TT2," ).append("\n"); 
		query.append(" 	       0              TT3," ).append("\n"); 
		query.append(" 	       0              TT4," ).append("\n"); 
		query.append("            0              TOT_ST," ).append("\n"); 
		query.append(" 	       0              ST1," ).append("\n"); 
		query.append(" 	       0              ST2," ).append("\n"); 
		query.append(" 	       0              ST3," ).append("\n"); 
		query.append(" 	       'T'            TS_IND,   -- OPTION" ).append("\n"); 
		query.append(" 	       'N'            FDR_USD,  -- OPTION" ).append("\n"); 
		query.append(" 		   A.TO_PORT_ETB_DY_CD POD1ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POD2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL3ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POD3ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL4ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   2              LINK_COUNT      -- OPTION" ).append("\n"); 
		query.append(" 	FROM PRD_PF_TZ_TM A, PRD_FDR_LNK B" ).append("\n"); 
		query.append(" 	WHERE A.TO_PORT_CD      = B.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append(" 	AND   A.FM_PORT_CD      = @[pol_port_cd]" ).append("\n"); 
		query.append(" 	AND   B.LNK_DEST_LOC_CD = @[pod_port_cd]" ).append("\n"); 
		query.append("     AND   (A.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR B.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%')" ).append("\n"); 
		query.append("     AND   A.VSL_SLAN_CD  <> B.VSL_SLAN_CD" ).append("\n"); 
		query.append("     AND   B.PCTL_IO_BND_CD IN ('I', 'B')    -- FEEDER가 INBOUND, BOTH인 경우만 붙임" ).append("\n"); 
		query.append("     AND   SUBSTR(A.FM_PORT_CD, 1, 2) <> SUBSTR(B.LNK_DEST_LOC_CD, 1, 2) -- 모선 출발 국가와 FEEDER 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE A.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE A.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND A.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND A.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append("     AND   (A.TZTM_HRS + B.TZTM_HRS) < 50 * 24   -- TOTAL TRANSIT TIME 이 50일 보다 작은 ROUT만" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = A.FM_PORT_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = B.LNK_DEST_LOC_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("       AND A.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("     -- CASE E   3개의 LINK로 이루어진거, FDR - HO - HO" ).append("\n"); 
		query.append("     UNION ALL" ).append("\n"); 
		query.append(" 	SELECT 'E' ST,                     -- ST (CASE)" ).append("\n"); 
		query.append(" 	       A.LNK_ORG_LOC_CD   POL1," ).append("\n"); 
		query.append(" 	       A.LNK_DEST_LOC_CD  POD1," ).append("\n"); 
		query.append(" 	       A.VSL_SLAN_CD      LANE1," ).append("\n"); 
		query.append(" 	       A.SKD_DIR_CD       DIR1," ).append("\n"); 
		query.append(" 	       'Y'                FDR_FLG1," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP1," ).append("\n"); 
		query.append(" 	       B.FM_PORT_CD   POL2," ).append("\n"); 
		query.append(" 	       B.TO_PORT_CD   POD2," ).append("\n"); 
		query.append(" 	       B.VSL_SLAN_CD  LANE2," ).append("\n"); 
		query.append(" 	       B.SKD_DIR_CD   DIR2," ).append("\n"); 
		query.append(" 	       'N'            FDR_FLG2," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = B.VSL_SLAN_CD) SVC_TP2," ).append("\n"); 
		query.append(" 	       C.FM_PORT_CD   POL3," ).append("\n"); 
		query.append(" 	       C.TO_PORT_CD   POD3," ).append("\n"); 
		query.append(" 	       C.VSL_SLAN_CD  LANE3," ).append("\n"); 
		query.append(" 	       C.SKD_DIR_CD   DIR3," ).append("\n"); 
		query.append(" 	       'N'            FDR_FLG3," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = C.VSL_SLAN_CD) SVC_TP3," ).append("\n"); 
		query.append(" 	       NULL           POL4," ).append("\n"); 
		query.append(" 	       NULL           POD4," ).append("\n"); 
		query.append(" 	       NULL           LANE4," ).append("\n"); 
		query.append(" 	       NULL           DIR4," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG4," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP4," ).append("\n"); 
		query.append(" 	       4              PRIO,        -- FEEDER - MOTHER - MOTHER" ).append("\n"); 
		query.append(" 	       NULL           RMK,         -- OPTION" ).append("\n"); 
		query.append(" 	       (A.TZTM_HRS + B.TZTM_HRS + C.TZTM_HRS)     TOT_TT,    -- TRANSIT TIME WHY SUM" ).append("\n"); 
		query.append(" 	       A.TZTM_HRS     TT1," ).append("\n"); 
		query.append(" 	       B.TZTM_HRS     TT2," ).append("\n"); 
		query.append(" 	       C.TZTM_HRS     TT3," ).append("\n"); 
		query.append(" 	       0              TT4," ).append("\n"); 
		query.append("            DECODE(" ).append("\n"); 
		query.append("                 DECODE(B.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(C.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24              TOT_ST," ).append("\n"); 
		query.append(" 	       0              ST1," ).append("\n"); 
		query.append(" 	       DECODE(" ).append("\n"); 
		query.append("                 DECODE(B.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(C.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24              ST2," ).append("\n"); 
		query.append(" 	       0              ST3," ).append("\n"); 
		query.append(" 	       'T'            TS_IND,   -- OPTION" ).append("\n"); 
		query.append(" 	       'N'            FDR_USD,  -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POD1ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.FM_PORT_ETB_DY_CD POL2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.TO_PORT_ETB_DY_CD POD2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   C.FM_PORT_ETB_DY_CD POL3ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   C.TO_PORT_ETB_DY_CD POD3ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL4ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   3              LINK_COUNT      -- OPTION" ).append("\n"); 
		query.append(" 	FROM PRD_FDR_LNK A, PRD_PF_TZ_TM B, PRD_PF_TZ_TM C" ).append("\n"); 
		query.append(" 	WHERE A.LNK_DEST_LOC_CD = B.FM_PORT_CD" ).append("\n"); 
		query.append(" 	AND   B.TO_PORT_CD      = C.FM_PORT_CD" ).append("\n"); 
		query.append(" 	AND   A.LNK_ORG_LOC_CD  = @[pol_port_cd]" ).append("\n"); 
		query.append(" 	AND   C.TO_PORT_CD      = @[pod_port_cd]" ).append("\n"); 
		query.append("     AND   (A.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR B.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR C.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%')" ).append("\n"); 
		query.append("     AND   A.VSL_SLAN_CD  <> B.VSL_SLAN_CD   -- 1, 2 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append("     AND   B.VSL_SLAN_CD  <> C.VSL_SLAN_CD   -- 2, 3 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append("     AND   A.PCTL_IO_BND_CD IN ('O', 'B')    -- FEEDER가 OUTBOUND, BOTH인 경우만 붙임" ).append("\n"); 
		query.append("     AND   SUBSTR(A.LNK_ORG_LOC_CD, 1, 2) <> SUBSTR(B.TO_PORT_CD, 1, 2) -- FEEDER 출발 국가와 모선 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("     AND   SUBSTR(A.LNK_ORG_LOC_CD, 1, 2) <> SUBSTR(C.TO_PORT_CD, 1, 2) -- FEEDER 출발 국가와 모선 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE B.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE C.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE B.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND B.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND B.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE C.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND C.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND C.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append("     AND   (A.TZTM_HRS + B.TZTM_HRS + C.TZTM_HRS) < 50 * 24   -- TOTAL TRANSIT TIME 이 50일 보다 작은 ROUT만" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = A.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = C.TO_PORT_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = A.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = B.TO_PORT_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("       AND B.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("       AND C.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("     -- CASE F   3개의 LINK로 이루어진거, HO - HO - FDR" ).append("\n"); 
		query.append("     UNION ALL" ).append("\n"); 
		query.append(" 	SELECT 'F' ST,                     -- ST (CASE)" ).append("\n"); 
		query.append(" 	       A.FM_PORT_CD       POL1," ).append("\n"); 
		query.append(" 	       A.TO_PORT_CD       POD1," ).append("\n"); 
		query.append(" 	       A.VSL_SLAN_CD      LANE1," ).append("\n"); 
		query.append(" 	       A.SKD_DIR_CD       DIR1," ).append("\n"); 
		query.append(" 	       'N'                FDR_FLG1," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP1," ).append("\n"); 
		query.append(" 	       B.FM_PORT_CD       POL2," ).append("\n"); 
		query.append(" 	       B.TO_PORT_CD       POD2," ).append("\n"); 
		query.append(" 	       B.VSL_SLAN_CD      LANE2," ).append("\n"); 
		query.append(" 	       B.SKD_DIR_CD       DIR2," ).append("\n"); 
		query.append(" 	       'N'                FDR_FLG2," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = B.VSL_SLAN_CD) SVC_TP2," ).append("\n"); 
		query.append(" 	       C.LNK_ORG_LOC_CD   POL3," ).append("\n"); 
		query.append(" 	       C.LNK_DEST_LOC_CD   POD3," ).append("\n"); 
		query.append(" 	       C.VSL_SLAN_CD  LANE3," ).append("\n"); 
		query.append(" 	       C.SKD_DIR_CD   DIR3," ).append("\n"); 
		query.append(" 	       'Y'            FDR_FLG3," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = C.VSL_SLAN_CD) SVC_TP3," ).append("\n"); 
		query.append(" 	       NULL           POL4," ).append("\n"); 
		query.append(" 	       NULL           POD4," ).append("\n"); 
		query.append(" 	       NULL           LANE4," ).append("\n"); 
		query.append(" 	       NULL           DIR4," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG4," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP4," ).append("\n"); 
		query.append(" 	       4              PRIO,        -- MOTHER - MOTHER - FEEDER" ).append("\n"); 
		query.append(" 	       NULL           RMK,         -- OPTION" ).append("\n"); 
		query.append(" 	       (A.TZTM_HRS + B.TZTM_HRS + C.TZTM_HRS)     TOT_TT,    -- TRANSIT TIME WHY SUM" ).append("\n"); 
		query.append(" 	       A.TZTM_HRS     TT1," ).append("\n"); 
		query.append(" 	       B.TZTM_HRS     TT2," ).append("\n"); 
		query.append(" 	       C.TZTM_HRS     TT3," ).append("\n"); 
		query.append(" 	       0              TT4," ).append("\n"); 
		query.append("            DECODE(" ).append("\n"); 
		query.append("                 DECODE(A.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(B.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24              TOT_ST," ).append("\n"); 
		query.append(" 	       DECODE(" ).append("\n"); 
		query.append("                 DECODE(A.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(B.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24              ST1," ).append("\n"); 
		query.append(" 	       0              ST2," ).append("\n"); 
		query.append(" 	       0              ST3," ).append("\n"); 
		query.append(" 	       'T'            TS_IND,   -- OPTION" ).append("\n"); 
		query.append(" 	       'N'            FDR_USD,  -- OPTION" ).append("\n"); 
		query.append(" 		   A.TO_PORT_ETB_DY_CD POD1ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.FM_PORT_ETB_DY_CD POL2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.TO_PORT_ETB_DY_CD POD2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL3ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POD3ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL4ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   3              LINK_COUNT      -- OPTION" ).append("\n"); 
		query.append(" 	FROM PRD_PF_TZ_TM A, PRD_PF_TZ_TM B, PRD_FDR_LNK C" ).append("\n"); 
		query.append(" 	WHERE A.TO_PORT_CD      = B.FM_PORT_CD" ).append("\n"); 
		query.append(" 	AND   B.TO_PORT_CD      = C.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append(" 	AND   A.FM_PORT_CD      = @[pol_port_cd]" ).append("\n"); 
		query.append(" 	AND   C.LNK_DEST_LOC_CD = @[pod_port_cd]" ).append("\n"); 
		query.append("     AND   (A.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR B.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR C.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%')" ).append("\n"); 
		query.append("     AND   A.VSL_SLAN_CD  <> B.VSL_SLAN_CD   -- 1, 2 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append("     AND   B.VSL_SLAN_CD  <> C.VSL_SLAN_CD   -- 2, 3 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append("     AND   C.PCTL_IO_BND_CD IN ('I', 'B')    -- FEEDER가 INBOUND, BOTH인 경우만 붙임" ).append("\n"); 
		query.append("     AND   SUBSTR(A.FM_PORT_CD, 1, 2) <> SUBSTR(C.LNK_DEST_LOC_CD, 1, 2) -- 모선 출발 국가와 FEEDER 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("     AND   SUBSTR(B.FM_PORT_CD, 1, 2) <> SUBSTR(C.LNK_DEST_LOC_CD, 1, 2) -- 모선 출발 국가와 FEEDER 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE A.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE B.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE A.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND A.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND A.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE B.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND B.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND B.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append("     AND   (A.TZTM_HRS + B.TZTM_HRS + C.TZTM_HRS) < 50 * 24   -- TOTAL TRANSIT TIME 이 50일 보다 작은 ROUT만" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = A.FM_PORT_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = C.LNK_DEST_LOC_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = B.FM_PORT_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = C.LNK_DEST_LOC_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("       AND A.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("	 AND B.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("     -- CASE I   3개의 LINK로 이루어진거, HQ - HQ - HQ" ).append("\n"); 
		query.append(" 	UNION ALL" ).append("\n"); 
		query.append(" 	SELECT 'I' ST,                     -- ST (CASE)" ).append("\n"); 
		query.append(" 	       A.FM_PORT_CD       POL1," ).append("\n"); 
		query.append(" 	       A.TO_PORT_CD       POD1," ).append("\n"); 
		query.append(" 	       A.VSL_SLAN_CD      LANE1," ).append("\n"); 
		query.append(" 	       A.SKD_DIR_CD       DIR1," ).append("\n"); 
		query.append(" 	       'N'                FDR_FLG1," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP1," ).append("\n"); 
		query.append(" 	       B.FM_PORT_CD       POL2," ).append("\n"); 
		query.append(" 	       B.TO_PORT_CD       POD2," ).append("\n"); 
		query.append(" 	       B.VSL_SLAN_CD      LANE2," ).append("\n"); 
		query.append(" 	       B.SKD_DIR_CD       DIR2," ).append("\n"); 
		query.append(" 	       'N'                FDR_FLG2," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = B.VSL_SLAN_CD) SVC_TP2," ).append("\n"); 
		query.append(" 	       C.FM_PORT_CD   POL3," ).append("\n"); 
		query.append(" 	       C.TO_PORT_CD   POD3," ).append("\n"); 
		query.append(" 	       C.VSL_SLAN_CD  LANE3," ).append("\n"); 
		query.append(" 	       C.SKD_DIR_CD   DIR3," ).append("\n"); 
		query.append(" 	       'N'            FDR_FLG3," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = C.VSL_SLAN_CD) SVC_TP3," ).append("\n"); 
		query.append(" 	       NULL           POL4," ).append("\n"); 
		query.append(" 	       NULL           POD4," ).append("\n"); 
		query.append(" 	       NULL           LANE4," ).append("\n"); 
		query.append(" 	       NULL           DIR4," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG4," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP4," ).append("\n"); 
		query.append(" 	       4              PRIO,        -- MOTHER - MOTHER - MOTHER" ).append("\n"); 
		query.append(" 	       NULL           RMK,         -- OPTION" ).append("\n"); 
		query.append(" 	       (A.TZTM_HRS + B.TZTM_HRS + C.TZTM_HRS)     TOT_TT,    -- TRANSIT TIME WHY SUM" ).append("\n"); 
		query.append(" 	       A.TZTM_HRS     TT1," ).append("\n"); 
		query.append(" 	       B.TZTM_HRS     TT2," ).append("\n"); 
		query.append(" 	       C.TZTM_HRS     TT3," ).append("\n"); 
		query.append(" 	       0              TT4," ).append("\n"); 
		query.append("            DECODE(" ).append("\n"); 
		query.append("                 DECODE(A.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(B.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24  +" ).append("\n"); 
		query.append(" 	       DECODE(" ).append("\n"); 
		query.append("                 DECODE(B.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(C.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24             TOT_ST," ).append("\n"); 
		query.append(" 	       DECODE(" ).append("\n"); 
		query.append("                 DECODE(A.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(B.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24              ST1," ).append("\n"); 
		query.append(" 	       DECODE(" ).append("\n"); 
		query.append("                 DECODE(B.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(C.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24              ST2," ).append("\n"); 
		query.append(" 	       0              ST3," ).append("\n"); 
		query.append(" 	       'T'            TS_IND,   -- OPTION" ).append("\n"); 
		query.append(" 	       'N'            FDR_USD,  -- OPTION" ).append("\n"); 
		query.append(" 		   A.TO_PORT_ETB_DY_CD POD1ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.FM_PORT_ETB_DY_CD POL2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.TO_PORT_ETB_DY_CD POD2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   C.FM_PORT_ETB_DY_CD POL3ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   C.TO_PORT_ETB_DY_CD POD3ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL4ETB,      -- OPTION" ).append("\n"); 
		query.append(" 		   3              LINK_COUNT    -- OPTION" ).append("\n"); 
		query.append(" 	FROM PRD_PF_TZ_TM A, PRD_PF_TZ_TM B, PRD_PF_TZ_TM C" ).append("\n"); 
		query.append(" 	WHERE A.TO_PORT_CD = B.FM_PORT_CD" ).append("\n"); 
		query.append(" 	AND   B.TO_PORT_CD = C.FM_PORT_CD" ).append("\n"); 
		query.append(" 	AND   A.FM_PORT_CD = @[pol_port_cd]" ).append("\n"); 
		query.append(" 	AND   C.TO_PORT_CD = @[pod_port_cd]" ).append("\n"); 
		query.append(" 	AND   (A.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR B.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR C.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%')" ).append("\n"); 
		query.append(" 	AND   A.VSL_SLAN_CD  <> B.VSL_SLAN_CD   -- 1, 2 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append(" 	AND   B.VSL_SLAN_CD  <> C.VSL_SLAN_CD   -- 2, 3 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append(" 	AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE A.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append(" 	AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE B.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append(" 	AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE C.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append(" 	AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE A.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND A.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND A.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append(" 	AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE B.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND B.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND B.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append(" 	AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE C.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND C.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND C.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append(" 	AND   (A.TZTM_HRS + B.TZTM_HRS + C.TZTM_HRS) < 50 * 24   -- TOTAL TRANSIT TIME 이 50일 보다 작은 ROUT만" ).append("\n"); 
		query.append(" 	AND A.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append(" 	AND B.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append(" 	AND C.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("     -- CASE G   3개의 LINK로 이루어진거, FDR - HO - FDR" ).append("\n"); 
		query.append("     UNION ALL" ).append("\n"); 
		query.append(" 	SELECT 'G' ST,                     -- ST (CASE)" ).append("\n"); 
		query.append(" 	       A.LNK_ORG_LOC_CD   POL1," ).append("\n"); 
		query.append(" 	       A.LNK_DEST_LOC_CD  POD1," ).append("\n"); 
		query.append(" 	       A.VSL_SLAN_CD      LANE1," ).append("\n"); 
		query.append(" 	       A.SKD_DIR_CD       DIR1," ).append("\n"); 
		query.append(" 	       'Y'                FDR_FLG1," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP1," ).append("\n"); 
		query.append(" 	       B.FM_PORT_CD   POL2," ).append("\n"); 
		query.append(" 	       B.TO_PORT_CD   POD2," ).append("\n"); 
		query.append(" 	       B.VSL_SLAN_CD  LANE2," ).append("\n"); 
		query.append(" 	       B.SKD_DIR_CD   DIR2," ).append("\n"); 
		query.append(" 	       'N'            FDR_FLG2," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = B.VSL_SLAN_CD) SVC_TP2," ).append("\n"); 
		query.append(" 	       C.LNK_ORG_LOC_CD   POL3," ).append("\n"); 
		query.append(" 	       C.LNK_DEST_LOC_CD  POD3," ).append("\n"); 
		query.append(" 	       C.VSL_SLAN_CD      LANE3," ).append("\n"); 
		query.append(" 	       C.SKD_DIR_CD       DIR3," ).append("\n"); 
		query.append(" 	       'Y'                FDR_FLG3," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = C.VSL_SLAN_CD) SVC_TP3," ).append("\n"); 
		query.append(" 	       NULL           POL4," ).append("\n"); 
		query.append(" 	       NULL           POD4," ).append("\n"); 
		query.append(" 	       NULL           LANE4," ).append("\n"); 
		query.append(" 	       NULL           DIR4," ).append("\n"); 
		query.append(" 	       NULL           FDR_FLG4," ).append("\n"); 
		query.append(" 	       NULL           SVC_TP4," ).append("\n"); 
		query.append(" 	       5              PRIO,        -- FEEDER - MOTHER - FEEDER" ).append("\n"); 
		query.append(" 	       NULL           RMK,         -- OPTION" ).append("\n"); 
		query.append(" 	       (A.TZTM_HRS + B.TZTM_HRS + C.TZTM_HRS)     TOT_TT,    -- TRANSIT TIME WHY SUM" ).append("\n"); 
		query.append(" 	       A.TZTM_HRS     TT1," ).append("\n"); 
		query.append(" 	       B.TZTM_HRS     TT2," ).append("\n"); 
		query.append(" 	       C.TZTM_HRS     TT3," ).append("\n"); 
		query.append(" 	       0              TT4," ).append("\n"); 
		query.append("            0              TOT_ST," ).append("\n"); 
		query.append(" 	       0              ST1," ).append("\n"); 
		query.append(" 	       0              ST2," ).append("\n"); 
		query.append(" 	       0              ST3," ).append("\n"); 
		query.append(" 	       'T'            TS_IND,   -- OPTION" ).append("\n"); 
		query.append(" 	       'N'            FDR_USD,  -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POD1ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.FM_PORT_ETB_DY_CD POL2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.TO_PORT_ETB_DY_CD POD2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL3ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POD3ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL4ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   3              LINK_COUNT      -- OPTION" ).append("\n"); 
		query.append(" 	FROM PRD_FDR_LNK A, PRD_PF_TZ_TM B, PRD_FDR_LNK C" ).append("\n"); 
		query.append(" 	WHERE A.LNK_DEST_LOC_CD = B.FM_PORT_CD" ).append("\n"); 
		query.append(" 	AND   B.TO_PORT_CD      = C.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append(" 	AND   A.LNK_ORG_LOC_CD  = @[pol_port_cd]" ).append("\n"); 
		query.append(" 	AND   C.LNK_DEST_LOC_CD = @[pod_port_cd]" ).append("\n"); 
		query.append("     AND   (A.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR B.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR C.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%')" ).append("\n"); 
		query.append("     AND   A.VSL_SLAN_CD  <> B.VSL_SLAN_CD   -- 1, 2 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append("     AND   B.VSL_SLAN_CD  <> C.VSL_SLAN_CD   -- 2, 3 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append("     AND   A.PCTL_IO_BND_CD IN ('O', 'B')    -- FEEDER가 OUTBOUND, BOTH인 경우만 붙임" ).append("\n"); 
		query.append("     AND   C.PCTL_IO_BND_CD IN ('I', 'B')    -- FEEDER가 INBOUND, BOTH인 경우만 붙임" ).append("\n"); 
		query.append("     AND   SUBSTR(A.LNK_ORG_LOC_CD, 1, 2) <> SUBSTR(B.TO_PORT_CD, 1, 2) -- FEEDER 출발 국가와 모선 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("     AND   SUBSTR(B.FM_PORT_CD, 1, 2)     <> SUBSTR(C.LNK_DEST_LOC_CD, 1, 2) -- 모선 출발 국가와 FEEDER 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE B.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE B.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND B.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND B.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append("     AND   (A.TZTM_HRS + B.TZTM_HRS + C.TZTM_HRS) < 50 * 24   -- TOTAL TRANSIT TIME 이 50일 보다 작은 ROUT만" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = A.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = C.LNK_DEST_LOC_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = A.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = B.TO_PORT_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = B.FM_PORT_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = C.LNK_DEST_LOC_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("       AND B.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("     -- CASE H   4개의 LINK로 이루어진거, FDR - HO - HO - FDR" ).append("\n"); 
		query.append("     UNION ALL" ).append("\n"); 
		query.append(" 	SELECT 'H' ST,                     -- ST (CASE)" ).append("\n"); 
		query.append(" 	       A.LNK_ORG_LOC_CD   POL1," ).append("\n"); 
		query.append(" 	       A.LNK_DEST_LOC_CD  POD1," ).append("\n"); 
		query.append(" 	       A.VSL_SLAN_CD      LANE1," ).append("\n"); 
		query.append(" 	       A.SKD_DIR_CD       DIR1," ).append("\n"); 
		query.append(" 	       'Y'                FDR_FLG1," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = A.VSL_SLAN_CD) SVC_TP1," ).append("\n"); 
		query.append(" 	       B.FM_PORT_CD   POL2," ).append("\n"); 
		query.append(" 	       B.TO_PORT_CD   POD2," ).append("\n"); 
		query.append(" 	       B.VSL_SLAN_CD  LANE2," ).append("\n"); 
		query.append(" 	       B.SKD_DIR_CD   DIR2," ).append("\n"); 
		query.append(" 	       'N'            FDR_FLG2," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = B.VSL_SLAN_CD) SVC_TP2," ).append("\n"); 
		query.append(" 	       C.FM_PORT_CD   POL3," ).append("\n"); 
		query.append(" 	       C.TO_PORT_CD   POD3," ).append("\n"); 
		query.append(" 	       C.VSL_SLAN_CD  LANE3," ).append("\n"); 
		query.append(" 	       C.SKD_DIR_CD   DIR3," ).append("\n"); 
		query.append(" 	       'N'            FDR_FLG3," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = C.VSL_SLAN_CD) SVC_TP3," ).append("\n"); 
		query.append(" 	       D.LNK_ORG_LOC_CD   POL4," ).append("\n"); 
		query.append(" 	       D.LNK_DEST_LOC_CD  POD4," ).append("\n"); 
		query.append(" 	       D.VSL_SLAN_CD      LANE4," ).append("\n"); 
		query.append(" 	       D.SKD_DIR_CD       DIR4," ).append("\n"); 
		query.append(" 	       'Y'                FDR_FLG4," ).append("\n"); 
		query.append(" 	       (SELECT DECODE(VSL_SVC_TP_CD, 'O','C', VSL_SVC_TP_CD) FROM MDM_VSL_SVC_LANE WHERE VSL_SLAN_CD = D.VSL_SLAN_CD) SVC_TP4," ).append("\n"); 
		query.append(" 	       6              PRIO,        -- FEEDER - MOTHER - MOTHER - FEEDER" ).append("\n"); 
		query.append(" 	       NULL           RMK,         -- OPTION" ).append("\n"); 
		query.append(" 	       (A.TZTM_HRS + B.TZTM_HRS + C.TZTM_HRS + D.TZTM_HRS)     TOT_TT,    -- TRANSIT TIME WHY SUM" ).append("\n"); 
		query.append(" 	       A.TZTM_HRS     TT1," ).append("\n"); 
		query.append(" 	       B.TZTM_HRS     TT2," ).append("\n"); 
		query.append(" 	       C.TZTM_HRS     TT3," ).append("\n"); 
		query.append(" 	       D.TZTM_HRS     TT4," ).append("\n"); 
		query.append("            DECODE(" ).append("\n"); 
		query.append("                 DECODE(B.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(C.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24              TOT_ST," ).append("\n"); 
		query.append(" 	       0              ST1," ).append("\n"); 
		query.append(" 	       DECODE(" ).append("\n"); 
		query.append("                 DECODE(B.TO_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 - DECODE(C.FM_PORT_ETB_DY_CD, 'SUN', 7, 'MON', 6, 'TUE', 5, 'WED', 4, 'THU', 3, 'FRI', 2, 'SAT', 1)" ).append("\n"); 
		query.append("                 ,  -1, 7, -2, 6, -3, 5, -4, 4, -5, 3, -6, 2, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7 ) * 24              ST2," ).append("\n"); 
		query.append(" 	       0              ST3," ).append("\n"); 
		query.append(" 	       'T'            TS_IND,   -- OPTION" ).append("\n"); 
		query.append(" 	       'N'            FDR_USD,  -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POD1ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.FM_PORT_ETB_DY_CD POL2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   B.TO_PORT_ETB_DY_CD POD2ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   C.FM_PORT_ETB_DY_CD POL3ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   C.TO_PORT_ETB_DY_CD POD3ETB, -- OPTION" ).append("\n"); 
		query.append(" 		   NULL           POL4ETB,     -- OPTION" ).append("\n"); 
		query.append(" 		   4              LINK_COUNT      -- OPTION" ).append("\n"); 
		query.append(" 	FROM PRD_FDR_LNK A, PRD_PF_TZ_TM B, PRD_PF_TZ_TM C, PRD_FDR_LNK D" ).append("\n"); 
		query.append(" 	WHERE A.LNK_DEST_LOC_CD = B.FM_PORT_CD" ).append("\n"); 
		query.append(" 	AND   B.TO_PORT_CD      = C.FM_PORT_CD" ).append("\n"); 
		query.append(" 	AND   C.TO_PORT_CD      = D.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append(" 	AND   A.LNK_ORG_LOC_CD  = @[pol_port_cd]" ).append("\n"); 
		query.append(" 	AND   D.LNK_DEST_LOC_CD = @[pod_port_cd]" ).append("\n"); 
		query.append("     AND   (A.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR B.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR C.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%' OR D.VSL_SLAN_CD  LIKE RTRIM(@[tnk_lane_cd])||'%')" ).append("\n"); 
		query.append("     AND   A.VSL_SLAN_CD  <> B.VSL_SLAN_CD   -- 1, 2 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append("     AND   B.VSL_SLAN_CD  <> C.VSL_SLAN_CD   -- 2, 3 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append("     AND   C.VSL_SLAN_CD  <> D.VSL_SLAN_CD   -- 3, 4 링크의 LANE이 서로 다를 것" ).append("\n"); 
		query.append("     AND   A.PCTL_IO_BND_CD IN ('O', 'B')    -- FEEDER가 OUTBOUND, BOTH인 경우만 붙임" ).append("\n"); 
		query.append("     AND   D.PCTL_IO_BND_CD IN ('I', 'B')    -- FEEDER가 INBOUND, BOTH인 경우만 붙임" ).append("\n"); 
		query.append("     AND   SUBSTR(A.LNK_ORG_LOC_CD, 1, 2) <> SUBSTR(B.TO_PORT_CD, 1, 2) -- FEEDER 출발 국가와 모선 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("     AND   SUBSTR(A.LNK_ORG_LOC_CD, 1, 2) <> SUBSTR(C.TO_PORT_CD, 1, 2) -- FEEDER 출발 국가와 모선 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("     AND   SUBSTR(B.FM_PORT_CD, 1, 2)     <> SUBSTR(D.LNK_DEST_LOC_CD, 1, 2) -- 모선 출발 국가와 FEEDER 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("     AND   SUBSTR(C.FM_PORT_CD, 1, 2)     <> SUBSTR(D.LNK_DEST_LOC_CD, 1, 2) -- 모선 출발 국가와 FEEDER 도착 국가가 다른 경우만 선택" ).append("\n"); 
		query.append("       AND   B.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("       AND   C.DELT_FLG <> 'Y'" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE B.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append("     AND   EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_SVC_LANE PSL" ).append("\n"); 
		query.append("                     WHERE C.VSL_SLAN_CD = PSL.VSL_SLAN_CD" ).append("\n"); 
		query.append("                       AND PSL.UPD_IND_CD <> 'D'" ).append("\n"); 
		query.append("                       AND ROWNUM = 1) -- PRD_SVC_LANE에 유효한 LANE이 존재해야 됨" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE B.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND B.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND B.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append("     AND   NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_OCN_ROUT TG" ).append("\n"); 
		query.append("                     WHERE C.FM_PORT_CD   = TG.N1ST_POL_CD" ).append("\n"); 
		query.append("                       AND C.TO_PORT_CD   = TG.N1ST_POD_CD" ).append("\n"); 
		query.append("                       AND C.VSL_SLAN_CD  = TG.N1ST_LANE_CD" ).append("\n"); 
		query.append("                       AND TG.TS_IND_CD   = 'D'" ).append("\n"); 
		query.append("                       AND TG.N1ST_LANE_FDR_FLG = 'N'" ).append("\n"); 
		query.append("                       AND TG.UPD_IND_CD  = 'D') -- PRD_OCN_ROUT에 삭제된 DIRECT ROUT 제외" ).append("\n"); 
		query.append("     AND   (A.TZTM_HRS + B.TZTM_HRS + C.TZTM_HRS + D.TZTM_HRS) < 50 * 24   -- TOTAL TRANSIT TIME 이 50일 보다 작은 ROUT만" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = A.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = D.LNK_DEST_LOC_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = A.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = B.TO_PORT_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = A.LNK_ORG_LOC_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = C.TO_PORT_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = B.FM_PORT_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = D.LNK_DEST_LOC_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("     AND NOT EXISTS ( SELECT 'X'" ).append("\n"); 
		query.append("                      FROM PRD_FDR_LNK TFS" ).append("\n"); 
		query.append("                     WHERE TFS.LNK_ORG_LOC_CD  = C.FM_PORT_CD" ).append("\n"); 
		query.append("                       AND TFS.LNK_DEST_LOC_CD = D.LNK_DEST_LOC_CD )     -- 조합한 ROUTE의 출발/도착지가 이미 FEEDER LINK에 있을 경우 제외" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(" )," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("	  PRD_OCN_ROUT TG" ).append("\n"); 
		query.append(" WHERE" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("  TG.UPD_IND_CD(+) NOT IN ('D', 'N', 'O')" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(" AND   POL1            = TG.N1ST_POL_CD(+)" ).append("\n"); 
		query.append(" AND   LANE1           = TG.N1ST_LANE_CD(+)" ).append("\n"); 
		query.append(" AND   POD1            = TG.N1ST_POD_CD(+)" ).append("\n"); 
		query.append(" AND   NVL(LANE2, 'N') = NVL(TG.N2ND_LANE_CD(+),'N')" ).append("\n"); 
		query.append(" AND   NVL(POD2,  'N') = NVL(TG.N2ND_POD_CD(+), 'N')" ).append("\n"); 
		query.append(" AND   NVL(LANE3, 'N') = NVL(TG.N3RD_LANE_CD(+),'N')" ).append("\n"); 
		query.append(" AND   NVL(POD3,  'N') = NVL(TG.N3RD_POD_CD(+), 'N')" ).append("\n"); 
		query.append(" AND   NVL(LANE4, 'N') = NVL(TG.N4TH_LANE_CD(+),'N')" ).append("\n"); 
		query.append(" AND   NVL(POD4,  'N') = NVL(TG.N4TH_POD_CD(+), 'N')" ).append("\n"); 
		query.append(" GROUP BY ST, POL1, POD1, LANE1, DIR1, FDR_FLG1, SVC_TP1, POL2, POD2, LANE2, DIR2, FDR_FLG2, SVC_TP2," ).append("\n"); 
		query.append("          POL3, POD3, LANE3, DIR3, FDR_FLG3, SVC_TP3, POL4, POD4, LANE4, DIR4, FDR_FLG4, SVC_TP4," ).append("\n"); 
		query.append("          PRIO, RMK,  TOT_TT,  TT1,  TT2,  TT3, TT4, TOT_ST, ST1, ST2, ST3, TS_IND, FDR_USD," ).append("\n"); 
		query.append("          POD1ETB, POL2ETB, POD2ETB, POL3ETB, POD3ETB, POL4ETB, LINK_COUNT," ).append("\n"); 
		query.append("          DECODE(TG.ORG_LOC_CD, NULL, 'N', 'Y') , tg.upd_ind_cd,  tg.ocn_rout_usr_rmk" ).append("\n"); 
		query.append(" ORDER BY ST, TOT_TT" ).append("\n"); 

	}
}