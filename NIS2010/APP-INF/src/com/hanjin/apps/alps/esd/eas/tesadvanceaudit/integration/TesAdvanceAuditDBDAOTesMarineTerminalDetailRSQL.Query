<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="TesAdvanceAuditDBDAOTesMarineTerminalDetailRSQL">
			<desc><![CDATA[TesMarineTerminalDetail]]></desc>
			<sql><![CDATA[
SELECT    CALC_TP_CD
        , LGS_COST_CD
		, (SELECT LGS_COST_FULL_NM  FROM TES_LGS_COST WHERE LGS_COST_CD = X.LGS_COST_CD) AS LGS_COST_FULL_NM 
        , DECODE(CNTR_TPSZ_CD, 'XX', NULL, CNTR_TPSZ_CD) CNTR_TPSZ_CD
        , IO_BND_CD
        , DG_FLG
        , RC_FLG
        , TML_WRK_DY_CD -- Applied date
        , IOC_CD  -- IPC
        , TML_TRNS_MOD_CD -- Mode
        , LANE_CD
        , TIER_VOL
        , CALC_VOL_QTY
        , RVIS_VOL_QTY
        , VOL_TR_UT_CD
        , CTRT_RT
        , CURR_CD
        , INV_XCH_RT
        , INV_AMT
        , CALC_RMK
        , N3MON_TOT_VOL
		, N3MON_TOT_INV_VOL 
        , N3MON_TOT_AMT
		, FREQ * 100 AS FREQ
        , VVD_CNT
        , CTRT_RT AS AGMT_RT
        , UNIT_AVG_COST
		, VVD_VOL
		, CASE WHEN VVD_VOL * FREQ < 1 THEN 1
               WHEN VVD_VOL * FREQ IS NULL THEN 1
			   ELSE ROUND(VVD_VOL * FREQ, 1)
		  END AS ESTM_VOL	-- Estimation Volume
        , ESTM_AMT
        , CASE WHEN EXPN_MAX_PRMT_RTO < ((INV_AMT - ESTM_AMT) / DECODE(ESTM_AMT, 0, 1, ESTM_AMT)) * 100
              THEN 'Y'
          END EXCEED_AVG_FLG
		, ROUND((INV_AMT - ESTM_AMT) / DECODE(ESTM_AMT, 0, 1, ESTM_AMT) * 100, 3) AS INV_DIFF_PCT
        , VOL_DIFF_FLG      
        , DSCR_CTNT
        , EAC_FLG
        , INV_NO
        , VNDR_SEQ
        , ATB_DT
        , YD_CD
		, INV_CFM_DT
        , VSL_CD
        , SKD_VOY_NO
        , SKD_DIR_CD
		, YD_NM
		, VNDR_NM
		, AGMT_NO
		, AGMT_VER_NO
		, EXPN_AUD_SEQ
        , EXPN_MAX_PRMT_RTO
FROM	(
		SELECT    DECODE(SEMI_AUTO_CALC_FLG, 'Y', 'S', CALC_TP_CD) AS CALC_TP_CD
				, LGS_COST_CD
				, CNTR_TPSZ_CD
				, IO_BND_CD
				, DCGO_FLG AS DG_FLG
				, RC_FLG
				, TML_WRK_DY_CD -- Applied date
				, IOC_CD  -- IPC
				, TML_TRNS_MOD_CD -- Mode
				, VSL_SLAN_CD AS LANE_CD
				, TIER_VOL
				, CALC_VOL_QTY
				, RVIS_VOL_QTY
				, VOL_TR_UT_CD
				, CTRT_RT
				, CURR_CD
				, INV_XCH_RT
				, INV_AMT
				, CALC_RMK
				, N3MON_TOT_VOL -- MVMT VOL.
				, TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 1)) AS N3MON_TOT_AMT -- Amount
				, TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) AS N3MON_TOT_INV_VOL -- INVOICE VOL.
				, VVD_CNT 
				, CASE WHEN LGS_COST_CD  = 'SVXXHC' THEN ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 1)) / TO_NUMBER(DECODE(BKG_GET_TOKEN_FNC(N3MON_INV, 2), NULL, 1, 0, 1, BKG_GET_TOKEN_FNC(N3MON_INV, 2))), 2)
					   WHEN LGS_COST_CD <> 'SVXXHC' THEN ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 1)) / TO_NUMBER(DECODE(BKG_GET_TOKEN_FNC(N3MON_INV, 2), NULL, 1, 0, 1, BKG_GET_TOKEN_FNC(N3MON_INV, 2))), 2)
				  END UNIT_AVG_COST
				, CASE WHEN N3MON_TOT_VOL IS NULL OR N3MON_TOT_VOL = 0 THEN 1
                       WHEN VVD_VOL / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) BETWEEN 0.9 AND 1.1 THEN 1
					   WHEN TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,NULL,N3MON_TOT_VOL) BETWEEN 0.9 AND 1.1 THEN 1
                       WHEN (NVL(RVIS_VOL_QTY,0) - NVL(VVD_VOL,0)) / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) 
                            <= (NVL(RVIS_VOL_QTY,0) - (NVL(VVD_VOL,0)) * ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,1,N3MON_TOT_VOL),3)) / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY)
                            THEN 1
					   ELSE ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,1,N3MON_TOT_VOL), 3)
				  END AS FREQ	-- FREQUENCY
				, DECODE(VVD_VOL, 0, 1, NULL, 1, VVD_VOL) VVD_VOL		-- MVMT VOL.
				, NVL((CASE WHEN CALC_TP_CD = 'A' OR SEMI_AUTO_CALC_FLG = 'Y' THEN CTRT_RT * NVL(INV_XCH_RT, 1)
                            WHEN CALC_TP_CD = 'M' AND LGS_COST_CD  = 'SVXXHC' THEN ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 1)) / DECODE(VVD_CNT, 0, 1, VVD_CNT), 2)
                            WHEN CALC_TP_CD = 'M' AND LGS_COST_CD <> 'SVXXHC' THEN NVL(ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 1)) / TO_NUMBER(DECODE(BKG_GET_TOKEN_FNC(N3MON_INV, 2), '0', '1', BKG_GET_TOKEN_FNC(N3MON_INV, 2))), 2), CTRT_RT * NVL(INV_XCH_RT, 1))
                       END)
                   * NVL((CASE WHEN VVD_VOL * (CASE WHEN N3MON_TOT_VOL IS NULL OR N3MON_TOT_VOL = 0 THEN 1
                                                    WHEN VVD_VOL / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) BETWEEN 0.9 AND 1.1 THEN 1
                                                    WHEN TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,NULL,N3MON_TOT_VOL) BETWEEN 0.9 AND 1.1 THEN 1
                                                    WHEN (NVL(RVIS_VOL_QTY,0) - NVL(VVD_VOL,0)) / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) 
                                                      <= (NVL(RVIS_VOL_QTY,0) - (NVL(VVD_VOL,0)) * ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,1,N3MON_TOT_VOL),3)) / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY)
                                                    THEN 1
                                                    ELSE ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,1,N3MON_TOT_VOL), 3)
                                               END) < 1
					           THEN 1
                               ELSE ROUND(VVD_VOL * (CASE WHEN N3MON_TOT_VOL IS NULL OR N3MON_TOT_VOL = 0 THEN 1
                                                          WHEN VVD_VOL / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) BETWEEN 0.9 AND 1.1 THEN 1
                                                          WHEN TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,NULL,N3MON_TOT_VOL) BETWEEN 0.9 AND 1.1 THEN 1
                                                          WHEN (NVL(RVIS_VOL_QTY,0) - NVL(VVD_VOL,0)) / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) 
                                                             <= (NVL(RVIS_VOL_QTY,0) - (NVL(VVD_VOL,0)) * ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,1,N3MON_TOT_VOL),3)) / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY)
                                                          THEN 1
                                                          ELSE ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,1,N3MON_TOT_VOL), 3)
                                                     END), 1)
						  END), 1)
                  , 0) AS ESTM_AMT 
				, CASE WHEN CALC_VOL_QTY <> RVIS_VOL_QTY THEN 'Y' END VOL_DIFF_FLG
				, EXPN_MAX_PRMT_RTO
				, DSCR_CTNT
				, EAC_FLG
				, INV_NO
				, VNDR_SEQ
				, ATB_DT
				, YD_CD
				, INV_CFM_DT
				, VSL_CD
				, SKD_VOY_NO
				, SKD_DIR_CD
				, YD_NM
				, VNDR_NM
				, AGMT_NO
				, AGMT_VER_NO
				, EXPN_AUD_SEQ
		FROM	(		
				SELECT    A.CALC_TP_CD 
						, A.SEMI_AUTO_CALC_FLG
						, A.LGS_COST_CD
						, A.CNTR_TPSZ_CD
						, A.IO_BND_CD
						, A.DCGO_FLG
						, A.RC_FLG
						, A.VSL_CD
						, A.SKD_VOY_NO
						, A.SKD_DIR_CD
						, A.TML_WRK_DY_CD
						, A.IOC_CD
						, A.TML_TRNS_MOD_CD
						, A.FM_TR_VOL_VAL
						, A.TO_TR_VOL_VAL
						, A.CALC_VOL_QTY
						, A.RVIS_VOL_QTY
						, A.VOL_TR_UT_CD
						, A.FM_TR_VOL_VAL || '~' || A.TO_TR_VOL_VAL AS TIER_VOL
						, A.CTRT_RT
						, A.CURR_CD
						, A.INV_XCH_RT
						, A.INV_AMT
						, A.CALC_RMK
						, A.YD_CD
						, A.INV_NO
						, A.INV_CFM_DT
						, A.VNDR_SEQ
						, A.ATB_DT
						, A.CNTR_STY_CD
						, A.TS_FLG
						, A.VSL_SLAN_CD
						, A.EXPN_MAX_PRMT_RTO
						, A.TML_AGMT_OFC_CTY_CD
						, A.TML_AGMT_SEQ
						, A.TML_AGMT_VER_NO
						, (A.INV_AMT / DECODE(A.RVIS_VOL_QTY, 0, 1, A.RVIS_VOL_QTY)) AS INV_AVG_COST
						, (SELECT YD_NM FROM MDM_YARD WHERE YD_CD = A.YD_CD) AS YD_NM
						, (SELECT VNDR_LGL_ENG_NM FROM MDM_VENDOR WHERE VNDR_SEQ = A.VNDR_SEQ) AS VNDR_NM
						, TML_AGMT_OFC_CTY_CD || LPAD(TML_AGMT_SEQ, 5, '0') AS AGMT_NO
						, SUBSTR(LPAD(A.TML_AGMT_VER_NO, 4, '0'), 0, 2 ) || DECODE(A.TML_AGMT_VER_NO, NULL, '', '.') || SUBSTR(LPAD(A.TML_AGMT_VER_NO, 4, '0'), 3, 2 ) AS AGMT_VER_NO
						
						, (SELECT X.TTL_TML_AMT ||','|| TTL_RVIS_VOL_QTY
							 FROM EAS_TML_MRN_TTL_AMT X
							WHERE X.TML_AUD_YRMON = TO_CHAR(ADD_MONTHS(A.ATB_DT, -1), 'YYYYMM')
							  AND X.YD_CD            = A.YD_CD
							  AND X.IO_BND_CD      = A.IO_BND_CD
							  AND X.CNTR_TPSZ_CD  = (CASE WHEN A.CNTR_STY_CD = 'F' AND SUBSTR(A.CNTR_TPSZ_CD ,1,1) = 'R' AND NVL(A.RC_FLG, 'N') = 'N' THEN 'D'||SUBSTR(A.CNTR_TPSZ_CD ,2,1) ELSE A.CNTR_TPSZ_CD END)
							  AND X.LGS_COST_CD    = A.LGS_COST_CD
							  AND X.CURR_CD         = A.CURR_CD
							  AND X.DCGO_FLG        = A.DCGO_FLG
							  AND X.RC_FLG            = A.RC_FLG
							  AND X.COM_VVD_FLG   = A.COM_VVD_FLG
						 ) N3MON_INV
							
						, (SELECT SUM((CASE WHEN A.SPCL_CGO_TP_CALC_CD = 'DG' THEN DCGO_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'RF' THEN RC_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'AK' THEN AWK_CGO_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'BB' THEN BB_CGO_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'BA' THEN AWK_BB_CGO_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'GH' THEN HNGR_CGO_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'CF' THEN CFS_CGO_QTY
										  WHEN A.DCGO_FLG = 'Y' AND NVL(A.RC_FLG,'N') = 'Y' THEN DG_RC_QTY
										  WHEN A.DCGO_FLG = 'Y' AND NVL(A.RC_FLG,'N') = 'N' THEN DCGO_QTY
										  WHEN A.DCGO_FLG = 'N' AND NVL(A.RC_FLG,'N') = 'Y' THEN RC_QTY
										  ELSE (CASE WHEN CNTR_TTL_QTY - NVL(DCGO_QTY,0) - NVL(RC_QTY,0) - NVL(DG_RC_QTY,0) < 0 THEN 0
													 ELSE CNTR_TTL_QTY - NVL(DCGO_QTY,0) - NVL(RC_QTY,0) - NVL(DG_RC_QTY,0)
												END)
									END))
							   FROM EAS_TML_MRN_TTL_QTY X
							  WHERE X.TML_AUD_YRMON = TO_CHAR(ADD_MONTHS(A.ATB_DT, -1), 'YYYYMM')
								AND X.YD_CD        = A.YD_CD
								AND X.CNTR_TPSZ_CD = (CASE WHEN A.CNTR_STY_CD = 'F' AND SUBSTR(A.CNTR_TPSZ_CD ,1,1) = 'R' AND NVL(A.RC_FLG, 'N') = 'N' THEN 'D'||SUBSTR(A.CNTR_TPSZ_CD ,2,1) ELSE NVL(A.CNTR_TPSZ_CD, 'XX') END)
								AND X.IO_BND_CD    = A.IO_BND_CD
								AND X.FULL_MTY_CD  = A.CNTR_STY_CD
								AND X.TS_FLG       LIKE (CASE WHEN A.TS_FLG IN ('Y', 'N') THEN A.TS_FLG ELSE '%' END)
								AND X.COM_VVD_FLG  = A.COM_VVD_FLG 
							) N3MON_TOT_VOL
						  , NVL((SELECT SUM((CASE WHEN A.SPCL_CGO_TP_CALC_CD = 'DG' THEN DCGO_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'RF' THEN RC_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'AK' THEN AWK_CGO_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'BB' THEN BB_CGO_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'BA' THEN AWK_BB_CGO_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'GH' THEN HNGR_CGO_QTY
										  WHEN A.SPCL_CGO_TP_CALC_CD = 'CF' THEN CFS_CGO_QTY
										  WHEN A.DCGO_FLG = 'Y' AND NVL(A.RC_FLG,'N') = 'Y' THEN DG_RC_QTY
										  WHEN A.DCGO_FLG = 'Y' AND NVL(A.RC_FLG,'N') = 'N' THEN DCGO_QTY
										  WHEN A.DCGO_FLG = 'N' AND NVL(A.RC_FLG,'N') = 'Y' THEN RC_QTY
										  ELSE (CASE WHEN CNTR_TTL_QTY - NVL(DCGO_QTY,0) - NVL(RC_QTY,0) - NVL(DG_RC_QTY,0) < 0 THEN 0
													 ELSE CNTR_TTL_QTY - NVL(DCGO_QTY,0) - NVL(RC_QTY,0) - NVL(DG_RC_QTY,0)
												END)
									END))
							   FROM EAS_TML_MRN_VVD_QTY X
							  WHERE X.YD_CD        = A.YD_CD
								AND X.CNTR_TPSZ_CD = NVL(A.CNTR_TPSZ_CD, 'XX')
								AND X.IO_BND_CD    = A.IO_BND_CD
								AND X.FULL_MTY_CD  = A.CNTR_STY_CD
								AND X.TS_FLG       LIKE (CASE WHEN A.TS_FLG IN ('Y', 'N') THEN A.TS_FLG ELSE '%' END)
								AND X.VSL_CD       = A.VSL_CD
								AND X.SKD_VOY_NO   = A.SKD_VOY_NO
								AND X.SKD_DIR_CD   = A.SKD_DIR_CD
							), 0) VVD_VOL            
						  , (SELECT COUNT(DISTINCT X.VSL_CD||X.SKD_VOY_NO)
							   FROM EAS_TML_MRN_VVD_CD X
							  WHERE X.TML_AUD_YRMON = TO_CHAR(ADD_MONTHS(A.ATB_DT, -1), 'YYYYMM')
								AND X.YD_CD         = A.YD_CD
								AND X.VSL_SLAN_CD   = A.VSL_SLAN_CD
								AND X.CNTR_STY_CD   = A.CNTR_STY_CD
							) VVD_CNT
						  , (SELECT WM_CONCAT(DISTINCT DSCR_IND_CD)  -- DSCR_IND_CD
							   FROM TES_TML_SO_CNTR_LIST X
							  WHERE X.TML_SO_OFC_CTY_CD = A.TML_SO_OFC_CTY_CD
								AND X.TML_SO_SEQ        = A.TML_SO_SEQ
								AND X.VSL_CD            = A.VSL_CD
								AND X.SKD_VOY_NO        = A.SKD_VOY_NO
								AND X.SKD_DIR_CD        = A.SKD_DIR_CD
								AND X.IO_BND_CD         = A.IO_BND_CD
								AND X.CNTR_TPSZ_CD      = A.CNTR_TPSZ_CD
								AND X.CNTR_STY_CD       = A.CNTR_STY_CD
								AND X.LOCL_TS_IND_CD    LIKE DECODE(A.TS_FLG, 'Y', 'T', 'N', 'L', '%')
								AND X.RC_FLG            = A.RC_FLG
								AND X.DCGO_CLSS_CD      = A.DCGO_FLG
								AND (VRFY_RSLT_IND_CD = 'CO' AND MODI_FLG = 'Y')
                                AND A.CALC_TP_CD = 'A'
							 ) DSCR_CTNT
						, ( SELECT DECODE(EAC_NO, NULL, 'N', 'Y')
							FROM   EAS_TML_AUD E
								, EAS_TML_AUD_DTL EA
							WHERE  1 = 1
							AND    E.INV_NO       = A.INV_NO
							AND    E.YD_CD        = A.YD_CD
							AND    E.VNDR_SEQ     = A.VNDR_SEQ
							AND    E.INV_CFM_DT   = A.INV_CFM_DT
							AND    E.VSL_CD       = A.VSL_CD
							AND    E.SKD_VOY_NO   = A.SKD_VOY_NO
							AND    E.SKD_DIR_CD   = A.SKD_DIR_CD
							AND    E.IO_BND_CD    = A.IO_BND_CD
							AND    E.INV_NO       = EA.INV_NO(+)
							AND    E.VNDR_SEQ     = EA.VNDR_SEQ(+)
							AND    E.INV_CFM_DT   = EA.INV_CFM_DT(+)
							AND    E.EXPN_AUD_SEQ = EA.EXPN_AUD_SEQ(+)
							AND    A.CALC_TP_CD   = EA.CALC_TP_CD(+)
							AND    A.LGS_COST_CD  = EA.LGS_COST_CD(+)
							AND    A.CNTR_TPSZ_CD = EA.CNTR_TPSZ_CD(+)
							AND    A.IO_BND_CD    = EA.IO_BND_CD(+)
							AND    A.DCGO_FLG     = EA.DCGO_FLG(+)
							AND    A.RC_FLG	      = EA.RC_FLG(+)
						  ) AS EAC_FLG
						, ( SELECT	EXPN_AUD_SEQ
							FROM	EAS_TML_AUD E
							WHERE  1    = 1
							AND    E.INV_NO       = A.INV_NO
							AND    E.YD_CD        = A.YD_CD
							AND    E.VNDR_SEQ     = A.VNDR_SEQ
							AND    E.VSL_CD       = A.VSL_CD
							AND    E.SKD_VOY_NO   = A.SKD_VOY_NO
							AND    E.SKD_DIR_CD   = A.SKD_DIR_CD
							AND    E.IO_BND_CD    = A.IO_BND_CD
							AND    E.INV_CFM_DT   = A.INV_CFM_DT
						  ) AS EXPN_AUD_SEQ
				 
				FROM	(
						SELECT    D.CALC_TP_CD
								, D.LGS_COST_CD
								, NVL(D.CNTR_TPSZ_CD,'XX') AS CNTR_TPSZ_CD
								, D.IO_BND_CD
								, MAX(D.SEMI_AUTO_CALC_FLG) AS SEMI_AUTO_CALC_FLG
								, DECODE(D.DCGO_IND_CD, NULL, 'N', 'N', 'N', 'Y') DCGO_FLG
								, NVL(D.RC_FLG, 'N') AS RC_FLG
								, MAX(D.VSL_CD) AS VSL_CD
								, MAX(D.SKD_VOY_NO) AS SKD_VOY_NO
								, MAX(D.SKD_DIR_CD) AS SKD_DIR_CD
								, MAX(D.TML_WRK_DY_CD) AS TML_WRK_DY_CD
								, MAX(D.IOC_CD) AS IOC_CD
								, MAX(D.TML_TRNS_MOD_CD) AS TML_TRNS_MOD_CD
								, MIN(D.FM_TR_VOL_VAL) AS FM_TR_VOL_VAL
								, MAX(D.TO_TR_VOL_VAL) AS TO_TR_VOL_VAL
								, SUM(D.CALC_VOL_QTY) AS CALC_VOL_QTY
								, SUM(D.RVIS_VOL_QTY) AS RVIS_VOL_QTY
								, MAX(D.VOL_TR_UT_CD) AS VOL_TR_UT_CD
								, MAX(D.CTRT_RT) AS CTRT_RT
								, MAX(H.CURR_CD) AS CURR_CD
								, MAX(D.INV_XCH_RT) AS INV_XCH_RT
								, SUM(D.INV_AMT) AS INV_AMT
								, MAX(D.CALC_RMK) AS CALC_RMK
								, MAX(H.YD_CD) AS YD_CD
								, MAX(H.INV_NO) AS INV_NO
								, MAX(H.INV_CFM_DT) AS INV_CFM_DT
								, MAX(H.VNDR_SEQ) AS VNDR_SEQ
								, MAX(D.ATB_DT) AS ATB_DT
								, MAX(A.SPCL_CGO_TP_CALC_CD) AS SPCL_CGO_TP_CALC_CD
								, MAX(NVL(A.TS_FLG, 'A')) AS TS_FLG
                                , (CASE WHEN MAX(A.EXPN_AUD_TGT_FLG) = 'N' THEN NULL ELSE MAX(A.EXPN_MAX_PRMT_RTO) END) AS EXPN_MAX_PRMT_RTO
								, MAX(B.CNTR_STY_CD) AS CNTR_STY_CD
								, MAX(C.VSL_SLAN_CD) AS VSL_SLAN_CD
								, MAX(H.TML_SO_OFC_CTY_CD) AS TML_SO_OFC_CTY_CD
								, MAX(H.TML_SO_SEQ) AS TML_SO_SEQ
								, MAX(D.TML_AGMT_OFC_CTY_CD) AS TML_AGMT_OFC_CTY_CD
								, MAX(D.TML_AGMT_SEQ) AS TML_AGMT_SEQ	
								, MAX(D.TML_AGMT_VER_NO) AS TML_AGMT_VER_NO
								, (CASE WHEN MAX(D.VSL_CD) = 'CNTC' THEN 'Y' ELSE 'N' END) AS COM_VVD_FLG
						FROM (SELECT EAS_EXPN_AUD_PKG.GET_RHQ_OFC_CD(X.INV_OFC_CD) RHQ_OFC_CD
								   , X.*
								FROM TES_TML_SO_HDR X
							 ) H
						   , TES_TML_SO_DTL D
						   , EAS_TML_AUTO_AUD_CRTE A
						   , TES_TML_SO_COST B
						   , VSK_VSL_SKD     C
						WHERE 1 = 1
						AND  H.TML_SO_OFC_CTY_CD = D.TML_SO_OFC_CTY_CD
						AND  H.TML_SO_SEQ = D.TML_SO_SEQ
						AND  H.RHQ_OFC_CD = A.AUD_OFC_CD
						AND  D.LGS_COST_CD = A.LGS_COST_CD
						AND  D.LGS_COST_CD = B.LGS_COST_CD
						AND  D.VSL_CD     = C.VSL_CD(+)
						AND  D.SKD_VOY_NO = C.SKD_VOY_NO(+)
						AND  D.SKD_DIR_CD = C.SKD_DIR_CD(+)
						AND  NVL(H.DELT_FLG, 'N') <> 'Y'
						AND  H.TML_INV_STS_CD <> 'R'
						AND  H.TML_INV_RJCT_STS_CD <> 'RJ'
						AND  H.YD_CD      = @[s_yd_cd]
						AND  H.VNDR_SEQ   = @[s_vndr_seq]
						AND  H.INV_NO     = @[s_inv_no]
						AND  D.VSL_CD     = SUBSTR(@[s_vvd], 1, 4)
						AND  D.SKD_VOY_NO = SUBSTR(@[s_vvd], 5, 4)
						AND  D.SKD_DIR_CD = SUBSTR(@[s_vvd], 9, 1)
						AND  D.IO_BND_CD  = @[s_io_bnd_cd]

						GROUP BY D.CALC_TP_CD 
							  , D.LGS_COST_CD
							  , NVL(D.CNTR_TPSZ_CD,'XX')
							  , D.IO_BND_CD
							  , DECODE(D.DCGO_IND_CD, NULL, 'N', 'N', 'N', 'Y')
							  , D.RC_FLG
						) A
				) Z
		) X			]]></sql>
			<params>
				<param name="s_yd_cd" type="12" value="" out="N"/>
				<param name="s_vndr_seq" type="12" value="" out="N"/>
				<param name="s_inv_no" type="12" value="" out="N"/>
				<param name="s_vvd" type="12" value="" out="N"/>
				<param name="s_io_bnd_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
