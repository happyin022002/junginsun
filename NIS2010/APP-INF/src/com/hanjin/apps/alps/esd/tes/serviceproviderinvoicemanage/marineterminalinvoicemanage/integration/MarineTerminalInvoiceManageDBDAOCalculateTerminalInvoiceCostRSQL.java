/*=========================================================
*Copyright(c) 2018 CyberLogitec
*@FileName : MarineTerminalInvoiceManageDBDAOCalculateTerminalInvoiceCostRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2018.05.16
*@LastModifier : 
*@LastVersion : 1.0
* 2018.05.16 
* 1.0 Creation
=========================================================*/
package com.hanjin.apps.alps.esd.tes.serviceproviderinvoicemanage.marineterminalinvoicemanage.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.hanjin.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class MarineTerminalInvoiceManageDBDAOCalculateTerminalInvoiceCostRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * CalculateTerminalInvoiceCost
	  * </pre>
	  */
	public MarineTerminalInvoiceManageDBDAOCalculateTerminalInvoiceCostRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("pay_vol_qty",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("curr_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vvd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vndr_seq",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("atb_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("tml_so_seq",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("io_bnd_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("accm_seq",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("tml_so_ofc_cty_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("yd_cd",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.hanjin.apps.alps.esd.tes.serviceproviderinvoicemanage.marineterminalinvoicemanage.integration").append("\n"); 
		query.append("FileName : MarineTerminalInvoiceManageDBDAOCalculateTerminalInvoiceCostRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("SELECT /*+ opt_param('_complex_view_merging', 'false') */ " ).append("\n"); 
		query.append("		COST_CODE LGS_COST_CD," ).append("\n"); 
		query.append("	   CNTR_TPSZ_CD," ).append("\n"); 
		query.append("	   IO_BND_CD," ).append("\n"); 
		query.append("	   DECODE(DCGO_CLSS_CD,'','N',DCGO_CLSS_CD) DCGO_IND_CD," ).append("\n"); 
		query.append("	   RC_FLG," ).append("\n"); 
		query.append("	   TML_WRK_DY_CD," ).append("\n"); 
		query.append("	   IOC_CD," ).append("\n"); 
		query.append("	   LANE_CD," ).append("\n"); 
		query.append("	   LANE_CD LANE_CD2," ).append("\n"); 
		query.append("	   TML_TRNS_MOD_CD," ).append("\n"); 
		query.append("	   FM_TIER FM_TR_VOL_VAL," ).append("\n"); 
		query.append("	   TO_TIER TO_TR_VOL_VAL," ).append("\n"); 
		query.append("	   FM_TIER||' ~ '||TO_TIER TIER," ).append("\n"); 
		query.append("	   CALC_VOL_QTY," ).append("\n"); 
		query.append("	   RVIS_VOL_QTY," ).append("\n"); 
		query.append("	   VOL_TR_UT_CD," ).append("\n"); 
		query.append("	   CTRT_RT," ).append("\n"); 
		query.append("	   INV_AMT," ).append("\n"); 
		query.append("	   INV_AMT						CALC_AMT," ).append("\n"); 
		query.append("	   VSL_CD," ).append("\n"); 
		query.append("	   SKD_VOY_NO," ).append("\n"); 
		query.append("	   SKD_DIR_CD," ).append("\n"); 
		query.append("	   VSL_CD||SKD_VOY_NO||SKD_DIR_CD	VVD," ).append("\n"); 
		query.append("	   'TM'							CALC_COST_GRP_CD," ).append("\n"); 
		query.append("	   'A'							CALC_TP_CD," ).append("\n"); 
		query.append("	   ACCT_CD," ).append("\n"); 
		query.append("	   ATB_DT," ).append("\n"); 
		query.append("	   ''								CALC_RMK," ).append("\n"); 
		query.append("	   ''								TML_CRR_CD," ).append("\n"); 
		query.append("	   ''								N3PTY_FLG," ).append("\n"); 
		query.append("	   @[tml_so_ofc_cty_cd]								TML_SO_OFC_CTY_CD," ).append("\n"); 
		query.append("	   @[tml_so_seq]								TML_SO_SEQ," ).append("\n"); 
		query.append("	   0								TML_SO_DTL_SEQ," ).append("\n"); 
		query.append("	   CTY							TML_AGMT_OFC_CTY_CD," ).append("\n"); 
		query.append("	   SEQ							TML_AGMT_SEQ," ).append("\n"); 
		query.append("	   NO								TML_AGMT_VER_NO," ).append("\n"); 
		query.append("	   CURR_CHK," ).append("\n"); 
		query.append("	   CURR							CURR_CD," ).append("\n"); 
		query.append("	   '1'							INV_XCH_RT," ).append("\n"); 
		query.append("	   ACCM_CHK" ).append("\n"); 
		query.append("FROM ( SELECT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD, RC_FLG, AWK_CGO_FLG, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD, FM_TIER, TO_TIER," ).append("\n"); 
		query.append("			  DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY)+1,CAL_VOL) CALC_VOL_QTY, DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY)+1,CAL_VOL) RVIS_VOL_QTY, VOL_TR_UT_CD, CTRT_RT," ).append("\n"); 
		query.append("			  CTRT_RT * DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY)+1,CAL_VOL) INV_AMT, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ACCT_CD, ATB_DT, CTY, SEQ, NO," ).append("\n"); 
		query.append("			  DECODE(@[curr_cd],CURR,'Y','N') CURR_CHK, CURR, ACCM_CHK," ).append("\n"); 
		query.append("			  -- [CHM-201640588]자동계산시 Agreement Rate 값에 특정 Lane이 등록된 경우 lane을 우선해서 읽도록 로직 수정(2016.03.16 CAY D) " ).append("\n"); 
		query.append("			  RANK() OVER(PARTITION BY COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD ORDER BY RANK_CD) AS RANK_CD" ).append("\n"); 
		query.append("	   FROM ( SELECT COST_CODE, Q.CNTR_TPSZ_CD, Q.CNTR_STY_CD, Q.IO_BND_CD, Q.DCGO_CLSS_CD, TML_WRK_DY_CD, Q.IOC_CD, Q.LANE_CD, Q.TML_TRNS_MOD_CD, Q.RC_FLG, Q.AWK_CGO_FLG, ACCM, CAL_VOL," ).append("\n"); 
		query.append("					 VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO, T.TML_AGMT_VOL_UT_CD VOL_TR_UT_CD," ).append("\n"); 
		query.append("					 DECODE(T.TML_AGMT_VOL_UT_CD,'C',C.AGMT_RT,T.AGMT_UT_RT) CTRT_RT, L.ACCT_CD," ).append("\n"); 
		query.append("					 NVL(T.FM_TR_VOL_VAL,1) FM_TIER, NVL(T.TO_TR_VOL_VAL,9999999) TO_TIER," ).append("\n"); 
		query.append("					 -- CHM-201538524 TES Accumulate Volume 계산인 경우 Tier 중복으로 처리되는 로직 부분을 수정 - (2015-10-16 YYS B) FM_QTY 부분만 원복" ).append("\n"); 
		query.append("					 ( CASE WHEN CHK_FM_QTY >= NVL(T.FM_TR_VOL_VAL,1)" ).append("\n"); 
		query.append("							THEN CHK_FM_QTY + 1" ).append("\n"); 
		query.append("							ELSE NVL(T.FM_TR_VOL_VAL,1)" ).append("\n"); 
		query.append("					   END )  FM_QTY," ).append("\n"); 
		query.append("					 -- CHM-201537921 TES Invoice Calculation로직 오류(CNTR Verify) - (2015-09-07 CAY D)" ).append("\n"); 
		query.append("					 --( CASE WHEN NVL(CHK_FM_QTY, ACCM) >= NVL(T.FM_TR_VOL_VAL, 1) AND NVL(CHK_FM_QTY, ACCM) <> CHK_TO_QTY THEN NVL(CHK_FM_QTY, ACCM) + 1" ).append("\n"); 
		query.append("					--		WHEN NVL(CHK_FM_QTY, ACCM) >= NVL(T.FM_TR_VOL_VAL, 1) THEN NVL(CHK_FM_QTY, ACCM)" ).append("\n"); 
		query.append("					--		ELSE NVL(T.FM_TR_VOL_VAL, 1)" ).append("\n"); 
		query.append("					--   END )  FM_QTY," ).append("\n"); 
		query.append("					 ( CASE WHEN CHK_TO_QTY <= NVL(T.TO_TR_VOL_VAL,9999999)" ).append("\n"); 
		query.append("							THEN CHK_TO_QTY" ).append("\n"); 
		query.append("							ELSE NVL(T.TO_TR_VOL_VAL,9999999)" ).append("\n"); 
		query.append("					   END )  TO_QTY," ).append("\n"); 
		query.append("					   T.CURR_CD CURR," ).append("\n"); 
		query.append("					   ACCM_CHK," ).append("\n"); 
		query.append("					   TES_GET_MAS_RANK_FNC(NVL(T.LANE_CD,'N'),NVL(T.TML_TRNS_MOD_CD,'N')) RANK_CD" ).append("\n"); 
		query.append("			  FROM ( SELECT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD, RC_FLG, AWK_CGO_FLG, ACCM, CAL_VOL, CHK_TO_QTY," ).append("\n"); 
		query.append("							DECODE(ACCM+CAL_VOL,CHK_TO_QTY,ACCM, NVL(LAG(CHK_TO_QTY) OVER (PARTITION BY ACCM_CHK --COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD," ).append("\n"); 
		query.append("									--TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD, ACCM, CAL_VOL, CHK_TO_QTY, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO" ).append("\n"); 
		query.append("									ORDER BY COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD,TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD), ACCM)) CHK_FM_QTY," ).append("\n"); 
		query.append("							VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO, ACCM_CHK" ).append("\n"); 
		query.append("					 FROM ( SELECT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD, RC_FLG, AWK_CGO_FLG, ACCM, CAL_VOL," ).append("\n"); 
		query.append("							SUM(CAL_VOL) OVER (PARTITION BY ACCM_CHK--COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD," ).append("\n"); 
		query.append("															 --ACCM, CAL_VOL, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO" ).append("\n"); 
		query.append("												ORDER BY COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD" ).append("\n"); 
		query.append("												RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) + ACCM CHK_TO_QTY," ).append("\n"); 
		query.append("							 VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO, ACCM_CHK" ).append("\n"); 
		query.append("					  FROM   (" ).append("\n"); 
		query.append("					  SELECT DISTINCT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, I.IO_BND_CD, I.DCGO_CLSS_CD," ).append("\n"); 
		query.append("							 DECODE(I.HO,0,I.TML_WRK_DY_CD,'HO') TML_WRK_DY_CD, TML_WRK_DY_CD TML_WRK_DY_CD2, I.IOC_CD, I.LANE_CD, --I.WRK_DT," ).append("\n"); 
		query.append("							 D.TML_TRNS_MOD_CD, --DECODE(D.TML_TRNS_MOD_CD,'S','S',I.TML_TRNS_MOD_CD) TML_TRNS_MOD_CD," ).append("\n"); 
		query.append("							 I.RC_FLG, I.AWK_CGO_FLG, DECODE(ACCM,'Y',TO_NUMBER(REPLACE(@[pay_vol_qty],',')),0) ACCM," ).append("\n"); 
		query.append("							 DECODE(ACCM,'Y',DECODE(ACCM_UOM,'T',TEU_CAL,CAL_VOL),DECODE(D.TML_AGMT_VOL_UT_CD,'T',TEU_CAL,CAL_VOL)) CAL_VOL," ).append("\n"); 
		query.append("							 VSL_CD, SKD_VOY_NO, SKD_DIR_CD, TO_CHAR(ATB_DT,'YYYYMMDD') ATB_DT, CTY, SEQ, NO, NVL(ACCM,'N') ACCM_CHK" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- TM 비용 Auto Calculation위해 추가한부분" ).append("\n"); 
		query.append("					  FROM ( SELECT DECODE(L.LOCL_TS_IND_CD," ).append("\n"); 
		query.append("												  'T', DECODE(L.CNTR_STY_CD," ).append("\n"); 
		query.append("																   'F',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("																	   DECODE(SUBSTR(C.COST_CODE,5,2),'TM',C.COST_CODE))," ).append("\n"); 
		query.append("													   DECODE(L.CNTR_STY_CD," ).append("\n"); 
		query.append("																   'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("																	   DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) COST_CODE," ).append("\n"); 
		query.append("--		 TM 비용 Auto Calculation위해 삭제한부분" ).append("\n"); 
		query.append("--		                      FROM ( SELECT DECODE(L.LOCL_TS_IND_CD,'T',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                          DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                          DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) COST_CODE," ).append("\n"); 
		query.append("										  CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, L.DCGO_CLSS_CD, --L.WRK_DT," ).append("\n"); 
		query.append("										  DECODE(TO_CHAR(L.WRK_DT,'D'),7,'SA',1,'SU','WD') TML_WRK_DY_CD," ).append("\n"); 
		query.append("--		                                          DECODE(TO_CHAR(L.WRK_DT,'DY'),'SAT','SA','SUN','SU','WD') TML_WRK_DY_CD," ).append("\n"); 
		query.append("										  MAX(( SELECT COUNT(*)" ).append("\n"); 
		query.append("											FROM   DMT_HOLIDAY" ).append("\n"); 
		query.append("											WHERE  1=1" ).append("\n"); 
		query.append("											AND	   TO_CHAR(HOL_DT,'YYYYMMDD')    =  TO_CHAR(L.WRK_DT,'YYYYMMDD')" ).append("\n"); 
		query.append("											AND    CNT_CD    = SUBSTR(@[yd_cd],1,2)" ).append("\n"); 
		query.append("											)) HO," ).append("\n"); 
		query.append("										  IOC_CD, LANE_CD, COUNT(DISTINCT CNTR_NO) CAL_VOL," ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D7',1,'O7',1,0))*2.25+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D8',1,0))*2.4+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D9',1,0))*2.4+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'DW',1,0))*2.65+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'DX',1,0))*2.25+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D7',0,'D8',0,'D9',0,'DW',0,'DX',0,'O7',0," ).append("\n"); 
		query.append("											  DECODE(SUBSTR(L.CNTR_TPSZ_CD,2,1),2,1,0)))+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D7',0,'D8',0,'D9',0,'DW',0,'DX',0,'O7',0," ).append("\n"); 
		query.append("											  DECODE(SUBSTR(L.CNTR_TPSZ_CD,2,1),2,0,1*2))) TEU_CAL," ).append("\n"); 
		query.append("										  CTY, SEQ, NO, L.VSL_CD, L.SKD_VOY_NO, L.SKD_DIR_CD, L.ATB_DT," ).append("\n"); 
		query.append("										  DECODE(C.TML_TRNS_MOD_CD,'S','S',L.TML_TRNS_MOD_CD) TML_TRNS_MOD_CD, L.RC_FLG, L.AWK_CGO_FLG," ).append("\n"); 
		query.append("										  MAX(( SELECT 'Y'" ).append("\n"); 
		query.append("											FROM   TES_TML_SO_ACCM_COST" ).append("\n"); 
		query.append("											WHERE  VNDR_SEQ = @[vndr_seq]" ).append("\n"); 
		query.append("											AND    ACCM_SEQ = @[accm_seq]" ).append("\n"); 
		query.append("--		                                            AND    LGS_COST_CD = DECODE(L.LOCL_TS_IND_CD,'T',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                               DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                               DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) ) ACCM," ).append("\n"); 
		query.append("/* 2008-06-20 : 김기영 부장님의 요청으로 TS/TM 구분에도 F/M 기준으로 변경  */" ).append("\n"); 
		query.append("											AND    LGS_COST_CD = DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("																													  DECODE(SUBSTR(C.COST_CODE,5,2),'TM',C.COST_CODE))," ).append("\n"); 
		query.append("																							 DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("																													  DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE)))) ) ACCM," ).append("\n"); 
		query.append("										  ( SELECT TML_ACCM_UT_CD" ).append("\n"); 
		query.append("											FROM   TES_TML_SO_ACCM_MZD" ).append("\n"); 
		query.append("											WHERE  VNDR_SEQ = @[vndr_seq]" ).append("\n"); 
		query.append("											AND    ACCM_SEQ = @[accm_seq] ) ACCM_UOM" ).append("\n"); 
		query.append("								   FROM   TES_TML_SO_CNTR_LIST L," ).append("\n"); 
		query.append("										  ( SELECT DISTINCT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE," ).append("\n"); 
		query.append("												   CTY, SEQ, NO, NVL(D.TML_TRNS_MOD_CD,'S') TML_TRNS_MOD_CD" ).append("\n"); 
		query.append("											FROM ( SELECT COUNT(T.LGS_COST_CD) CNT," ).append("\n"); 
		query.append("														  T.LGS_COST_CD TP," ).append("\n"); 
		query.append("														  T.THRP_LGS_COST_CD CD," ).append("\n"); 
		query.append("														  H.TML_AGMT_OFC_CTY_CD CTY," ).append("\n"); 
		query.append("														  H.TML_AGMT_SEQ SEQ," ).append("\n"); 
		query.append("														  H.TML_AGMT_VER_NO NO" ).append("\n"); 
		query.append("												   FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T" ).append("\n"); 
		query.append("												   WHERE  H.YD_CD            = @[yd_cd]" ).append("\n"); 
		query.append("												   AND    H.VNDR_SEQ         = @[vndr_seq]" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_STS_CD = 'C'" ).append("\n"); 
		query.append("												   AND    H.DELT_FLG        = 'N'" ).append("\n"); 
		query.append("												   AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[atb_dt],'-')" ).append("\n"); 
		query.append("												   AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[atb_dt],'-')" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)" ).append("\n"); 
		query.append("																				FROM   TES_TML_AGMT_HDR M" ).append("\n"); 
		query.append("																				WHERE  M.YD_CD               = @[yd_cd]" ).append("\n"); 
		query.append("																				AND    M.VNDR_SEQ            = @[vndr_seq]" ).append("\n"); 
		query.append("																				AND    M.TML_AGMT_STS_CD     = 'C'" ).append("\n"); 
		query.append("																				AND    M.DELT_FLG            = 'N'" ).append("\n"); 
		query.append("																				AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[atb_dt],'-')" ).append("\n"); 
		query.append("																				AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[atb_dt],'-'))" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("												   GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO," ).append("\n"); 
		query.append("															T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("											WHERE  C.COST_CALC_MZD_CD = 'A'" ).append("\n"); 
		query.append("											AND    C.TML_AGMT_MGMT_CD = 'A'" ).append("\n"); 
		query.append("											AND    C.MRN_TML_FLG = 'Y'" ).append("\n"); 
		query.append("											AND    C.STO_INV_FLG = 'N'" ).append("\n"); 
		query.append("											AND    D.TML_AGMT_OFC_CTY_CD = A.CTY" ).append("\n"); 
		query.append("											AND    D.TML_AGMT_SEQ = A.SEQ" ).append("\n"); 
		query.append("											AND    D.TML_AGMT_VER_NO  = A.NO" ).append("\n"); 
		query.append("--		                                            AND    D.LGS_COST_CD  = A.TP(+)" ).append("\n"); 
		query.append("											AND    C.LGS_COST_CD = D.LGS_COST_CD" ).append("\n"); 
		query.append("											AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' ) C" ).append("\n"); 
		query.append("								   WHERE  VRFY_RSLT_IND_CD = 'CO'" ).append("\n"); 
		query.append("								   AND    L.TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]" ).append("\n"); 
		query.append("								   AND    L.TML_SO_SEQ        = @[tml_so_seq]" ).append("\n"); 
		query.append("								   AND    L.VSL_CD            = SUBSTR(@[vvd],1,4)" ).append("\n"); 
		query.append("								   AND    L.SKD_VOY_NO        = SUBSTR(@[vvd],5,4)" ).append("\n"); 
		query.append("								   AND    L.SKD_DIR_CD        = SUBSTR(@[vvd],9,1)" ).append("\n"); 
		query.append("								   AND    L.IO_BND_CD	        = @[io_bnd_cd]" ).append("\n"); 
		query.append("								   AND    NVL(L.CNTR_STY_CD,'N') <> 'R'" ).append("\n"); 
		query.append("								   AND    NVL(L.BB_CGO_FLG,'N')  <> 'Y'" ).append("\n"); 
		query.append("								   AND    ( NVL(L.CNTR_STY_CD,'N') <> 'M' OR NVL(LOCL_TS_IND_CD,'N') <> 'T' )" ).append("\n"); 
		query.append("--TM 비용 Auto Calculation을 위해 추가한 부분" ).append("\n"); 
		query.append("								   AND    DECODE(LOCL_TS_IND_CD,'T', DECODE(CNTR_STY_CD,'F','TS','TM')" ).append("\n"); 
		query.append("																 , DECODE(CNTR_STY_CD,'F','FL','MT')) = SUBSTR(C.COST_CODE,5,2)" ).append("\n"); 
		query.append("--TM 비용 Auto Calculation을 위해 삭제한 부분" ).append("\n"); 
		query.append("--		                                   AND    DECODE(LOCL_TS_IND_CD,'T','TS',DECODE(CNTR_STY_CD,'F','FL','MT')) = SUBSTR(C.COST_CODE,5,2)" ).append("\n"); 
		query.append("								   AND    DECODE(NVL(C.TML_TRNS_MOD_CD,'S'),'S','N',C.TML_TRNS_MOD_CD) = DECODE(NVL(C.TML_TRNS_MOD_CD,'S'),'S','N',L.TML_TRNS_MOD_CD)" ).append("\n"); 
		query.append("								   GROUP BY C.COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, LOCL_TS_IND_CD, IO_BND_CD, L.DCGO_CLSS_CD," ).append("\n"); 
		query.append("											DECODE(TO_CHAR(L.WRK_DT,'D'),7,'SA',1,'SU','WD'), --L.WRK_DT," ).append("\n"); 
		query.append("--		                                            DECODE(TO_CHAR(L.WRK_DT,'DY'),'SAT','SA','SUN','SU','WD'), --L.WRK_DT," ).append("\n"); 
		query.append("											IOC_CD, LANE_CD, CTY, SEQ, NO, L.VSL_CD, L.SKD_VOY_NO, L.SKD_DIR_CD, L.ATB_DT," ).append("\n"); 
		query.append("											DECODE(C.TML_TRNS_MOD_CD,'S','S',L.TML_TRNS_MOD_CD), L.RC_FLG, L.AWK_CGO_FLG) I," ).append("\n"); 
		query.append("							TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("					 WHERE  I.CTY = D.TML_AGMT_OFC_CTY_CD" ).append("\n"); 
		query.append("					 AND    I.SEQ = D.TML_AGMT_SEQ" ).append("\n"); 
		query.append("					 AND    I.NO  = D.TML_AGMT_VER_NO" ).append("\n"); 
		query.append("					 AND    D.TML_AGMT_TP_CD       = 'T'" ).append("\n"); 
		query.append("					 AND    D.AUTO_CALC_FLG        = 'Y'" ).append("\n"); 
		query.append("					 AND    SUBSTR(I.COST_CODE,1,4) <> 'SVSS'" ).append("\n"); 
		query.append("					 AND    I.COST_CODE = D.LGS_COST_CD(+)" ).append("\n"); 
		query.append("					 AND    SUBSTR(I.COST_CODE,5,2) <> 'MT'" ).append("\n"); 
		query.append("					 AND    NVL(D.THRP_COST_CD_FLG,'N') <> 'Y'" ).append("\n"); 
		query.append("					 AND    NVL(D.IO_BND_CD,'N')  = DECODE(NVL(D.IO_BND_CD,'N'),'N','N','S','S',I.IO_BND_CD)" ).append("\n"); 
		query.append("					 AND    NVL(D.IOC_CD,'N')  = DECODE(NVL(D.IOC_CD,'N'),'N','N','S','S',I.IOC_CD)" ).append("\n"); 
		query.append("--		                     AND    NVL(D.LANE_CD,'N')  = DECODE(NVL(D.LANE_CD,'N'),'N','N','Sam','Sam',I.LANE_CD)" ).append("\n"); 
		query.append("					 AND    NVL(D.LANE_CD,'N') = DECODE(NVL(D.LANE_CD,'N'),'N','N','Sam','Sam'," ).append("\n"); 
		query.append("											( SELECT DECODE((SELECT NVL('X','N')" ).append("\n"); 
		query.append("															 FROM   TES_TML_AGMT_DTL" ).append("\n"); 
		query.append("															 WHERE  TML_AGMT_OFC_CTY_CD = I.CTY" ).append("\n"); 
		query.append("															 AND    TML_AGMT_SEQ        = I.SEQ" ).append("\n"); 
		query.append("															 AND    TML_AGMT_VER_NO     = I.NO" ).append("\n"); 
		query.append("															 AND    LANE_CD = I.LANE_CD" ).append("\n"); 
		query.append("															 AND    ROWNUM = 1),'X',I.LANE_CD,'OTH')" ).append("\n"); 
		query.append("											  FROM DUAL ))" ).append("\n"); 
		query.append("					 AND    NVL(D.TML_TRNS_MOD_CD,'S') = DECODE(NVL(D.TML_TRNS_MOD_CD,'S'),'S','S',I.TML_TRNS_MOD_CD)" ).append("\n"); 
		query.append("					 AND    NVL(D.FM_TR_VOL_VAL,1) = 1 ) ) ) Q, TES_TML_AGMT_DTL T, TES_TML_AGMT_TP_SZ C, TES_LGS_COST L," ).append("\n"); 
		query.append("				   TES_TML_AGMT_APLY_DY A, TES_TML_AGMT_DG_CGO_CLSS G" ).append("\n"); 
		query.append("			  WHERE  Q.CTY = T.TML_AGMT_OFC_CTY_CD" ).append("\n"); 
		query.append("			  AND    Q.SEQ = T.TML_AGMT_SEQ" ).append("\n"); 
		query.append("			  AND    Q.NO  = T.TML_AGMT_VER_NO" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_TP_CD       = 'T'" ).append("\n"); 
		query.append("			  AND    T.AUTO_CALC_FLG        = 'Y'" ).append("\n"); 
		query.append("			  AND    SUBSTR(Q.COST_CODE,1,4) <> 'SVSS'" ).append("\n"); 
		query.append("			  AND    Q.COST_CODE = T.LGS_COST_CD(+)" ).append("\n"); 
		query.append("			  AND    SUBSTR(Q.COST_CODE,5,2) <> 'MT'" ).append("\n"); 
		query.append("			  AND    NVL(T.THRP_COST_CD_FLG,'N') <> 'Y'" ).append("\n"); 
		query.append("			  AND    NVL(T.IO_BND_CD,'N')  = DECODE(NVL(T.IO_BND_CD,'N'),'N','N','S','S',Q.IO_BND_CD)" ).append("\n"); 
		query.append("			  AND    NVL(T.IOC_CD,'N')  = DECODE(NVL(T.IOC_CD,'N'),'N','N','S','S',Q.IOC_CD)" ).append("\n"); 
		query.append("--		              AND    NVL(T.LANE_CD,'N')  = DECODE(NVL(T.LANE_CD,'N'),'N','N','Sam','Sam',Q.LANE_CD)" ).append("\n"); 
		query.append("			  AND    NVL(T.LANE_CD,'N') = DECODE(NVL(T.LANE_CD,'N'),'N','N','Sam','Sam'," ).append("\n"); 
		query.append("											( SELECT DECODE((SELECT NVL('X','N')" ).append("\n"); 
		query.append("															 FROM   TES_TML_AGMT_DTL" ).append("\n"); 
		query.append("															 WHERE  TML_AGMT_OFC_CTY_CD = Q.CTY" ).append("\n"); 
		query.append("															 AND    TML_AGMT_SEQ        = Q.SEQ" ).append("\n"); 
		query.append("															 AND    TML_AGMT_VER_NO     = Q.NO" ).append("\n"); 
		query.append("															 AND    LANE_CD = Q.LANE_CD" ).append("\n"); 
		query.append("															 AND    ROWNUM = 1),'X',Q.LANE_CD,'OTH')" ).append("\n"); 
		query.append("											  FROM DUAL ))" ).append("\n"); 
		query.append("			  AND    NVL(T.TML_TRNS_MOD_CD,'N') = DECODE(NVL(T.TML_TRNS_MOD_CD,'N'),'N','N','S','S',Q.TML_TRNS_MOD_CD)" ).append("\n"); 
		query.append("--			  AND    ( NVL(T.FM_TR_VOL_VAL,1) >= CHK_FM_QTY" ).append("\n"); 
		query.append("--			  OR     NVL(T.TO_TR_VOL_VAL,9999999) <= CHK_TO_QTY" ).append("\n"); 
		query.append("--			  OR     NVL(T.TO_TR_VOL_VAL,9999999) >= CHK_TO_QTY )" ).append("\n"); 
		query.append("				-- CHM-201537921 TES Invoice Calculation로직 오류(CNTR Verify) - (2015-09-07 CAY D)" ).append("\n"); 
		query.append("				AND	DECODE(ACCM_CHK, 'Y', DECODE(CHK_FM_QTY, 0, 1, CHK_FM_QTY) - NVL(T.FM_TR_VOL_VAL, 1), DECODE(CHK_FM_QTY, 0, 1, CHK_FM_QTY) - ACCM - NVL(T.FM_TR_VOL_VAL, 1)) >= 0" ).append("\n"); 
		query.append("				AND	NVL(T.TO_TR_VOL_VAL, 9999999) - CHK_TO_QTY >= 0" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_OFC_CTY_CD = C.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_SEQ = C.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_VER_NO = C.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_DTL_SEQ = C.TML_AGMT_DTL_SEQ(+)" ).append("\n"); 
		query.append("--Special Cargo 관련 적용   --- 2008.05.26" ).append("\n"); 
		query.append("			  AND    DECODE(T.TML_AGMT_VOL_UT_CD,'C',C.CNTR_TPSZ_CD,'N') " ).append("\n"); 
		query.append("					   = DECODE(T.TML_AGMT_VOL_UT_CD," ).append("\n"); 
		query.append("										'C', DECODE(Q.CNTR_STY_CD," ).append("\n"); 
		query.append("														'F', DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,1)," ).append("\n"); 
		query.append("															   'R',DECODE(Q.RC_FLG,'N',DECODE(Q.CNTR_STY_CD, 'M', Q.CNTR_TPSZ_CD,'D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1)),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("															   'O',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("															   'F',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("															   'P',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("															   'A',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("															   'S',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																Q.CNTR_TPSZ_CD), Q.CNTR_TPSZ_CD),'N')" ).append("\n"); 
		query.append("-- Special Cargo 적용 전 원본.." ).append("\n"); 
		query.append("--		              AND    DECODE(T.TML_AGMT_VOL_UT_CD,'C',C.CNTR_TPSZ_CD,'N')" ).append("\n"); 
		query.append("--							   = DECODE(T.TML_AGMT_VOL_UT_CD," ).append("\n"); 
		query.append("--							   					'C',DECODE(Q.RC_FLG,'N',DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,1),'R','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD),Q.CNTR_TPSZ_CD),'N')" ).append("\n"); 
		query.append("			  AND    Q.COST_CODE = L.LGS_COST_CD(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_OFC_CTY_CD  = A.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_SEQ         = A.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_VER_NO      = A.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_DTL_SEQ     = A.TML_AGMT_DTL_SEQ(+)" ).append("\n"); 
		query.append("		  AND    ( DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.WKDY_FLG,'Y','WD'),'S')" ).append("\n"); 
		query.append("		  OR       DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.SAT_FLG,'Y','SA'),'S')" ).append("\n"); 
		query.append("		  OR       DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.SUN_FLG,'Y','SU'),'S')" ).append("\n"); 
		query.append("		  OR       DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.HOL_FLG,'Y','HO'),'S') )" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_OFC_CTY_CD = G.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_SEQ        = G.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_VER_NO     = G.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_DTL_SEQ    = G.TML_AGMT_DTL_SEQ(+)" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'N','N',G.DCGO_APLY_TP_CD) = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'N','N','R')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N','N',G.DCGO_SAM_CLSS_FLG),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N','N','Y'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N',G.DCGO_NON_CLSS_FLG,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'N',G.DCGO_NON_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N','Y','N'),'S',DECODE(Q.DCGO_CLSS_CD,'N','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'1',G.DCGO_N1ST_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'1','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'2',G.DCGO_N2ND_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'2','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'3',G.DCGO_N3RD_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'3','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'4',G.DCGO_N4TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'4','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'5',G.DCGO_N5TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'5','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'6',G.DCGO_N6TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'6','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'7',G.DCGO_N7TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'7','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'8',G.DCGO_N8TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'8','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'9',G.DCGO_N9TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'9','Y','N'),'N')  )" ).append("\n"); 
		query.append("	   WHERE DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY),0) >= 0" ).append("\n"); 
		query.append("	   UNION ALL" ).append("\n"); 
		query.append("	   SELECT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD, RC_FLG, AWK_CGO_FLG, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD, FM_TIER, TO_TIER," ).append("\n"); 
		query.append("			  DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY)+1,CAL_VOL) CALC_VOL_QTY, DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY)+1,CAL_VOL) RVIS_VOL_QTY, VOL_TR_UT_CD, CTRT_RT," ).append("\n"); 
		query.append("			  CTRT_RT * DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY)+1,CAL_VOL) INV_AMT, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ACCT_CD, ATB_DT," ).append("\n"); 
		query.append("			  CTY, SEQ, NO, DECODE(@[curr_cd],CURR,'Y','N') CURR_CHK, CURR, ACCM_CHK," ).append("\n"); 
		query.append("			  -- [CHM-201640588]자동계산시 Agreement Rate 값에 특정 Lane이 등록된 경우 lane을 우선해서 읽도록 로직 수정(2016.03.16 CAY D) " ).append("\n"); 
		query.append("			  RANK() OVER(PARTITION BY COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD ORDER BY RANK_CD) AS RANK_CD" ).append("\n"); 
		query.append("	   FROM ( SELECT COST_CODE, Q.CNTR_TPSZ_CD, Q.CNTR_STY_CD, Q.IO_BND_CD, Q.DCGO_CLSS_CD, TML_WRK_DY_CD, Q.IOC_CD, Q.LANE_CD, Q.TML_TRNS_MOD_CD, Q.RC_FLG, Q.AWK_CGO_FLG, ACCM, CAL_VOL," ).append("\n"); 
		query.append("					 VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO, T.TML_AGMT_VOL_UT_CD VOL_TR_UT_CD," ).append("\n"); 
		query.append("					 DECODE(T.TML_AGMT_VOL_UT_CD,'C',C.AGMT_RT,T.AGMT_UT_RT) CTRT_RT, L.ACCT_CD," ).append("\n"); 
		query.append("					 NVL(T.FM_TR_VOL_VAL,1) FM_TIER, NVL(T.TO_TR_VOL_VAL,9999999) TO_TIER," ).append("\n"); 
		query.append("					 -- CHM-201538524 TES Accumulate Volume 계산인 경우 Tier 중복으로 처리되는 로직 부분을 수정 - (2015-10-16 YYS B) FM_QTY 부분만 원복" ).append("\n"); 
		query.append("					 ( CASE WHEN CHK_FM_QTY >= NVL(T.FM_TR_VOL_VAL,1)" ).append("\n"); 
		query.append("							THEN CHK_FM_QTY + 1" ).append("\n"); 
		query.append("							ELSE NVL(T.FM_TR_VOL_VAL,1)" ).append("\n"); 
		query.append("					   END )  FM_QTY," ).append("\n"); 
		query.append("					 -- CHM-201537921 TES Invoice Calculation로직 오류(CNTR Verify) - (2015-09-07 CAY D)" ).append("\n"); 
		query.append("					 --( CASE WHEN NVL(CHK_FM_QTY, ACCM) >= NVL(T.FM_TR_VOL_VAL, 1) AND NVL(CHK_FM_QTY, ACCM) <> CHK_TO_QTY THEN NVL(CHK_FM_QTY, ACCM) + 1" ).append("\n"); 
		query.append("					--		WHEN NVL(CHK_FM_QTY, ACCM) >= NVL(T.FM_TR_VOL_VAL, 1) THEN NVL(CHK_FM_QTY, ACCM)" ).append("\n"); 
		query.append("					--		ELSE NVL(T.FM_TR_VOL_VAL, 1)" ).append("\n"); 
		query.append("					--   END )  FM_QTY," ).append("\n"); 
		query.append("					 ( CASE WHEN CHK_TO_QTY <= NVL(T.TO_TR_VOL_VAL,9999999)" ).append("\n"); 
		query.append("							THEN CHK_TO_QTY" ).append("\n"); 
		query.append("							ELSE NVL(T.TO_TR_VOL_VAL,9999999)" ).append("\n"); 
		query.append("					   END )  TO_QTY," ).append("\n"); 
		query.append("					   T.CURR_CD CURR," ).append("\n"); 
		query.append("					   ACCM_CHK," ).append("\n"); 
		query.append("					   TES_GET_MAS_RANK_FNC(NVL(T.LANE_CD,'N'),NVL(T.TML_TRNS_MOD_CD,'N')) RANK_CD" ).append("\n"); 
		query.append("			  FROM ( SELECT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD, RC_FLG, AWK_CGO_FLG, ACCM, CAL_VOL, CHK_TO_QTY," ).append("\n"); 
		query.append("					  DECODE(ACCM+CAL_VOL,CHK_TO_QTY,ACCM, NVL(LAG(CHK_TO_QTY) OVER (PARTITION BY ACCM_CHK --COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD," ).append("\n"); 
		query.append("																							-- IOC_CD, LANE_CD, TML_TRNS_MOD_CD, ACCM, CAL_VOL, CHK_TO_QTY," ).append("\n"); 
		query.append("																							-- VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO" ).append("\n"); 
		query.append("																				ORDER BY COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD," ).append("\n"); 
		query.append("																			  TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD), ACCM)) CHK_FM_QTY," ).append("\n"); 
		query.append("					  VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO, ACCM_CHK" ).append("\n"); 
		query.append("					 FROM ( SELECT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD, RC_FLG, AWK_CGO_FLG, ACCM, CAL_VOL," ).append("\n"); 
		query.append("						   SUM(CAL_VOL) OVER (PARTITION BY ACCM_CHK --COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD," ).append("\n"); 
		query.append("															 --ACCM, CAL_VOL, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO" ).append("\n"); 
		query.append("												ORDER BY COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD" ).append("\n"); 
		query.append("												RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) + ACCM CHK_TO_QTY," ).append("\n"); 
		query.append("							 VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO, ACCM_CHK" ).append("\n"); 
		query.append("					  FROM   (" ).append("\n"); 
		query.append("					  SELECT DISTINCT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, I.IO_BND_CD, I.DCGO_CLSS_CD," ).append("\n"); 
		query.append("							 DECODE(I.HO,0,I.TML_WRK_DY_CD,'HO') TML_WRK_DY_CD, TML_WRK_DY_CD TML_WRK_DY_CD2, I.IOC_CD, I.LANE_CD, --I.WRK_DT," ).append("\n"); 
		query.append("							 D.TML_TRNS_MOD_CD, --DECODE(D.TML_TRNS_MOD_CD,'S','S',I.TML_TRNS_MOD_CD) TML_TRNS_MOD_CD, I.RC_FLG," ).append("\n"); 
		query.append("							 I.RC_FLG, I.AWK_CGO_FLG, DECODE(ACCM,'Y',TO_NUMBER(REPLACE(@[pay_vol_qty],',')),0) ACCM," ).append("\n"); 
		query.append("							 DECODE(ACCM,'Y',DECODE(ACCM_UOM,'T',TEU_CAL,CAL_VOL),DECODE(D.TML_AGMT_VOL_UT_CD,'T',TEU_CAL,CAL_VOL)) CAL_VOL," ).append("\n"); 
		query.append("							 VSL_CD, SKD_VOY_NO, SKD_DIR_CD, TO_CHAR(ATB_DT,'YYYYMMDD') ATB_DT, CTY, SEQ, NO, NVL(ACCM,'N') ACCM_CHK" ).append("\n"); 
		query.append("-- TM 비용 Auto Calculation위해 추가한부분" ).append("\n"); 
		query.append("					  FROM ( SELECT DECODE(L.LOCL_TS_IND_CD," ).append("\n"); 
		query.append("												  'T', DECODE(L.CNTR_STY_CD," ).append("\n"); 
		query.append("																   'F',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("																	   DECODE(SUBSTR(C.COST_CODE,5,2),'TM',C.COST_CODE))," ).append("\n"); 
		query.append("													   DECODE(L.CNTR_STY_CD," ).append("\n"); 
		query.append("																   'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("																	   DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) COST_CODE," ).append("\n"); 
		query.append("--		 TM 비용 Auto Calculation위해 삭제한부분" ).append("\n"); 
		query.append("--		                            FROM ( SELECT DECODE(L.LOCL_TS_IND_CD,'T',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                          DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                          DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) COST_CODE," ).append("\n"); 
		query.append("										  CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, L.DCGO_CLSS_CD, --L.WRK_DT," ).append("\n"); 
		query.append("										  DECODE(TO_CHAR(L.WRK_DT,'D'),7,'SA',1,'SU','WD') TML_WRK_DY_CD," ).append("\n"); 
		query.append("--		                                          DECODE(TO_CHAR(L.WRK_DT,'DY'),'SAT','SA','SUN','SU','WD') TML_WRK_DY_CD," ).append("\n"); 
		query.append("										  MAX(( SELECT COUNT(*)" ).append("\n"); 
		query.append("											FROM   DMT_HOLIDAY" ).append("\n"); 
		query.append("											WHERE  1=1" ).append("\n"); 
		query.append("											AND	   TO_CHAR(HOL_DT,'YYYYMMDD')    =  TO_CHAR(L.WRK_DT,'YYYYMMDD')" ).append("\n"); 
		query.append("											AND    CNT_CD    = SUBSTR(@[yd_cd],1,2)" ).append("\n"); 
		query.append("											)) HO," ).append("\n"); 
		query.append("										  IOC_CD, LANE_CD, COUNT(DISTINCT CNTR_NO) CAL_VOL," ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D7',1,'O7',1,0))*2.25+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D8',1,0))*2.4+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D9',1,0))*2.4+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'DW',1,0))*2.65+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'DX',1,0))*2.25+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D7',0,'D8',0,'D9',0,'DW',0,'DX',0,'O7',0," ).append("\n"); 
		query.append("											  DECODE(SUBSTR(L.CNTR_TPSZ_CD,2,1),2,1,0)))+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D7',0,'D8',0,'D9',0,'DW',0,'DX',0,'O7',0," ).append("\n"); 
		query.append("											  DECODE(SUBSTR(L.CNTR_TPSZ_CD,2,1),2,0,1*2))) TEU_CAL," ).append("\n"); 
		query.append("										  CTY, SEQ, NO, L.VSL_CD, L.SKD_VOY_NO, L.SKD_DIR_CD, L.ATB_DT," ).append("\n"); 
		query.append("										  DECODE(C.TML_TRNS_MOD_CD,'S','S',L.TML_TRNS_MOD_CD) TML_TRNS_MOD_CD, L.RC_FLG, L.AWK_CGO_FLG," ).append("\n"); 
		query.append("										  MAX(( SELECT 'Y'" ).append("\n"); 
		query.append("											FROM   TES_TML_SO_ACCM_COST" ).append("\n"); 
		query.append("											WHERE  VNDR_SEQ = @[vndr_seq]" ).append("\n"); 
		query.append("											AND    ACCM_SEQ = @[accm_seq]" ).append("\n"); 
		query.append("--		                                            AND    LGS_COST_CD = DECODE(L.LOCL_TS_IND_CD,'T',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                               DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                               DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) ) ACCM," ).append("\n"); 
		query.append("/* 2008-06-20 : 김기영 부장님의 요청으로 TS/TM 구분에도 F/M 기준으로 변경  */" ).append("\n"); 
		query.append("											AND    LGS_COST_CD = DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("																													  DECODE(SUBSTR(C.COST_CODE,5,2),'TM',C.COST_CODE))," ).append("\n"); 
		query.append("																							 DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("																													  DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) )) ACCM," ).append("\n"); 
		query.append("										  ( SELECT TML_ACCM_UT_CD" ).append("\n"); 
		query.append("											FROM   TES_TML_SO_ACCM_MZD" ).append("\n"); 
		query.append("											WHERE  VNDR_SEQ = @[vndr_seq]" ).append("\n"); 
		query.append("											AND    ACCM_SEQ = @[accm_seq] ) ACCM_UOM" ).append("\n"); 
		query.append("								   FROM   TES_TML_SO_CNTR_LIST L," ).append("\n"); 
		query.append("										  ( SELECT DISTINCT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE," ).append("\n"); 
		query.append("												   CTY, SEQ, NO, NVL(D.TML_TRNS_MOD_CD,'S') TML_TRNS_MOD_CD" ).append("\n"); 
		query.append("											FROM ( SELECT COUNT(T.LGS_COST_CD) CNT," ).append("\n"); 
		query.append("														  T.LGS_COST_CD TP," ).append("\n"); 
		query.append("														  T.THRP_LGS_COST_CD CD," ).append("\n"); 
		query.append("														  H.TML_AGMT_OFC_CTY_CD CTY," ).append("\n"); 
		query.append("														  H.TML_AGMT_SEQ SEQ," ).append("\n"); 
		query.append("														  H.TML_AGMT_VER_NO NO" ).append("\n"); 
		query.append("												   FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T" ).append("\n"); 
		query.append("												   WHERE  H.YD_CD            = @[yd_cd]" ).append("\n"); 
		query.append("												   AND    H.VNDR_SEQ         = @[vndr_seq]" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_STS_CD = 'C'" ).append("\n"); 
		query.append("												   AND    H.DELT_FLG        = 'N'" ).append("\n"); 
		query.append("												   AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[atb_dt],'-')" ).append("\n"); 
		query.append("												   AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[atb_dt],'-')" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)" ).append("\n"); 
		query.append("																				FROM   TES_TML_AGMT_HDR M" ).append("\n"); 
		query.append("																				WHERE  M.YD_CD               = @[yd_cd]" ).append("\n"); 
		query.append("																				AND    M.VNDR_SEQ            = @[vndr_seq]" ).append("\n"); 
		query.append("																				AND    M.TML_AGMT_STS_CD     = 'C'" ).append("\n"); 
		query.append("																				AND    M.DELT_FLG            = 'N'" ).append("\n"); 
		query.append("																				AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[atb_dt],'-')" ).append("\n"); 
		query.append("																				AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[atb_dt],'-'))" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("												   GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO," ).append("\n"); 
		query.append("															T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("											WHERE  C.COST_CALC_MZD_CD = 'A'" ).append("\n"); 
		query.append("											AND    C.TML_AGMT_MGMT_CD = 'A'" ).append("\n"); 
		query.append("											AND    C.MRN_TML_FLG = 'Y'" ).append("\n"); 
		query.append("											AND    C.STO_INV_FLG = 'N'" ).append("\n"); 
		query.append("											AND    D.TML_AGMT_OFC_CTY_CD = A.CTY" ).append("\n"); 
		query.append("											AND    D.TML_AGMT_SEQ = A.SEQ" ).append("\n"); 
		query.append("											AND    D.TML_AGMT_VER_NO = A.NO" ).append("\n"); 
		query.append("--		                                            AND    D.LGS_COST_CD  = A.TP(+)" ).append("\n"); 
		query.append("											AND    C.LGS_COST_CD = D.LGS_COST_CD" ).append("\n"); 
		query.append("											AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' ) C" ).append("\n"); 
		query.append("								   WHERE  VRFY_RSLT_IND_CD = 'CO'" ).append("\n"); 
		query.append("								   AND    L.TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]" ).append("\n"); 
		query.append("								   AND    L.TML_SO_SEQ        = @[tml_so_seq]" ).append("\n"); 
		query.append("								   AND    L.VSL_CD            = SUBSTR(@[vvd],1,4)" ).append("\n"); 
		query.append("								   AND    L.SKD_VOY_NO        = SUBSTR(@[vvd],5,4)" ).append("\n"); 
		query.append("								   AND    L.SKD_DIR_CD        = SUBSTR(@[vvd],9,1)" ).append("\n"); 
		query.append("								   AND    L.IO_BND_CD	        = @[io_bnd_cd]" ).append("\n"); 
		query.append("								   AND    NVL(L.CNTR_STY_CD,'N') <> 'R'" ).append("\n"); 
		query.append("								   AND    NVL(L.BB_CGO_FLG,'N')  <> 'Y'" ).append("\n"); 
		query.append("								   AND    ( NVL(L.CNTR_STY_CD,'N') <> 'M' OR NVL(LOCL_TS_IND_CD,'N') <> 'T' )" ).append("\n"); 
		query.append("--TM 비용 Auto Calculation을 위해 추가한 부분" ).append("\n"); 
		query.append("								   AND    DECODE(LOCL_TS_IND_CD,'T', DECODE(CNTR_STY_CD,'F','TS','TM')" ).append("\n"); 
		query.append("																 , DECODE(CNTR_STY_CD,'F','FL','MT')) = SUBSTR(C.COST_CODE,5,2)" ).append("\n"); 
		query.append("--TM 비용 Auto Calculation을 위해 삭제한 부분" ).append("\n"); 
		query.append("--		                                   AND    DECODE(LOCL_TS_IND_CD,'T','TS',DECODE(CNTR_STY_CD,'F','FL','MT')) = SUBSTR(C.COST_CODE,5,2)" ).append("\n"); 
		query.append("								   AND    DECODE(NVL(C.TML_TRNS_MOD_CD,'S'),'S','N',C.TML_TRNS_MOD_CD) = DECODE(NVL(C.TML_TRNS_MOD_CD,'S'),'S','N',L.TML_TRNS_MOD_CD)" ).append("\n"); 
		query.append("								   GROUP BY C.COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, LOCL_TS_IND_CD, IO_BND_CD, L.DCGO_CLSS_CD," ).append("\n"); 
		query.append("											DECODE(TO_CHAR(L.WRK_DT,'D'),7,'SA',1,'SU','WD'), --L.WRK_DT," ).append("\n"); 
		query.append("--		                                            DECODE(TO_CHAR(L.WRK_DT,'DY'),'SAT','SA','SUN','SU','WD'), --L.WRK_DT," ).append("\n"); 
		query.append("											IOC_CD, LANE_CD, CTY, SEQ, NO, L.VSL_CD, L.SKD_VOY_NO, L.SKD_DIR_CD," ).append("\n"); 
		query.append("											L.ATB_DT, DECODE(C.TML_TRNS_MOD_CD,'S','S',L.TML_TRNS_MOD_CD), L.RC_FLG, L.AWK_CGO_FLG) I," ).append("\n"); 
		query.append("							TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("					 WHERE  I.CTY = D.TML_AGMT_OFC_CTY_CD" ).append("\n"); 
		query.append("					 AND    I.SEQ = D.TML_AGMT_SEQ" ).append("\n"); 
		query.append("					 AND    I.NO  = D.TML_AGMT_VER_NO" ).append("\n"); 
		query.append("					 AND    D.TML_AGMT_TP_CD       = 'T'" ).append("\n"); 
		query.append("					 AND    D.AUTO_CALC_FLG        = 'Y'" ).append("\n"); 
		query.append("					 AND    SUBSTR(I.COST_CODE,1,4) = 'SVSS'" ).append("\n"); 
		query.append("					 AND    I.COST_CODE = D.LGS_COST_CD(+)" ).append("\n"); 
		query.append("					 AND    SUBSTR(I.COST_CODE,5,2) <> 'MT'" ).append("\n"); 
		query.append("					 AND    NVL(D.THRP_COST_CD_FLG,'N') <> 'Y'" ).append("\n"); 
		query.append("					 AND    NVL(D.IO_BND_CD,'N')  = DECODE(NVL(D.IO_BND_CD,'N'),'N','N','S','S',I.IO_BND_CD)" ).append("\n"); 
		query.append("					 AND    NVL(D.IOC_CD,'N')  = DECODE(NVL(D.IOC_CD,'N'),'N','N','S','S',I.IOC_CD)" ).append("\n"); 
		query.append("--		                     AND    NVL(D.LANE_CD,'N')  = DECODE(NVL(D.LANE_CD,'N'),'N','N','Sam','Sam',I.LANE_CD)" ).append("\n"); 
		query.append("					 AND    NVL(D.LANE_CD,'N') = DECODE(NVL(D.LANE_CD,'N'),'N','N','Sam','Sam'," ).append("\n"); 
		query.append("											( SELECT DECODE((SELECT NVL('X','N')" ).append("\n"); 
		query.append("															 FROM   TES_TML_AGMT_DTL" ).append("\n"); 
		query.append("															 WHERE  TML_AGMT_OFC_CTY_CD = I.CTY" ).append("\n"); 
		query.append("															 AND    TML_AGMT_SEQ        = I.SEQ" ).append("\n"); 
		query.append("															 AND    TML_AGMT_VER_NO     = I.NO" ).append("\n"); 
		query.append("															 AND    LANE_CD = I.LANE_CD" ).append("\n"); 
		query.append("															 AND    ROWNUM = 1),'X',I.LANE_CD,'OTH')" ).append("\n"); 
		query.append("											  FROM DUAL ))" ).append("\n"); 
		query.append("					 AND    NVL(D.TML_TRNS_MOD_CD,'S') = DECODE(NVL(D.TML_TRNS_MOD_CD,'S'),'S','S',I.TML_TRNS_MOD_CD)" ).append("\n"); 
		query.append("					 AND    NVL(D.FM_TR_VOL_VAL,1) = 1 ) ) ) Q, TES_TML_AGMT_DTL T, TES_TML_AGMT_TP_SZ C, TES_LGS_COST L," ).append("\n"); 
		query.append("				   TES_TML_AGMT_APLY_DY A, TES_TML_AGMT_DG_CGO_CLSS G" ).append("\n"); 
		query.append("			  WHERE  Q.CTY = T.TML_AGMT_OFC_CTY_CD" ).append("\n"); 
		query.append("			  AND    Q.SEQ = T.TML_AGMT_SEQ" ).append("\n"); 
		query.append("			  AND    Q.NO  = T.TML_AGMT_VER_NO" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_TP_CD       = 'T'" ).append("\n"); 
		query.append("			  AND    T.AUTO_CALC_FLG        = 'Y'" ).append("\n"); 
		query.append("			  AND    SUBSTR(Q.COST_CODE,1,4) = 'SVSS'" ).append("\n"); 
		query.append("			  AND    Q.COST_CODE = T.LGS_COST_CD(+)" ).append("\n"); 
		query.append("			  AND    SUBSTR(Q.COST_CODE,5,2) <> 'MT'" ).append("\n"); 
		query.append("			  AND    NVL(T.THRP_COST_CD_FLG,'N') <> 'Y'" ).append("\n"); 
		query.append("			  AND    NVL(T.IO_BND_CD,'N')  = DECODE(NVL(T.IO_BND_CD,'N'),'N','N','S','S',Q.IO_BND_CD)" ).append("\n"); 
		query.append("			  AND    NVL(T.IOC_CD,'N')  = DECODE(NVL(T.IOC_CD,'N'),'N','N','S','S',Q.IOC_CD)" ).append("\n"); 
		query.append("--		              AND    NVL(T.LANE_CD,'N')  = DECODE(NVL(T.LANE_CD,'N'),'N','N','Sam','Sam',Q.LANE_CD)" ).append("\n"); 
		query.append("			  AND    NVL(T.LANE_CD,'N') = DECODE(NVL(T.LANE_CD,'N'),'N','N','Sam','Sam'," ).append("\n"); 
		query.append("											( SELECT DECODE((SELECT NVL('X','N')" ).append("\n"); 
		query.append("															 FROM   TES_TML_AGMT_DTL" ).append("\n"); 
		query.append("															 WHERE  TML_AGMT_OFC_CTY_CD = Q.CTY" ).append("\n"); 
		query.append("															 AND    TML_AGMT_SEQ        = Q.SEQ" ).append("\n"); 
		query.append("															 AND    TML_AGMT_VER_NO     = Q.NO" ).append("\n"); 
		query.append("															 AND    LANE_CD = Q.LANE_CD" ).append("\n"); 
		query.append("															 AND    ROWNUM = 1),'X',Q.LANE_CD,'OTH')" ).append("\n"); 
		query.append("											  FROM DUAL ))" ).append("\n"); 
		query.append("			  AND    NVL(T.TML_TRNS_MOD_CD,'N') = DECODE(NVL(T.TML_TRNS_MOD_CD,'N'),'N','N','S','S',Q.TML_TRNS_MOD_CD)" ).append("\n"); 
		query.append("--			  AND    ( NVL(T.FM_TR_VOL_VAL,1) >= CHK_FM_QTY" ).append("\n"); 
		query.append("--			  OR     NVL(T.TO_TR_VOL_VAL,9999999) <= CHK_TO_QTY" ).append("\n"); 
		query.append("--			  OR     NVL(T.TO_TR_VOL_VAL,9999999) >= CHK_TO_QTY )" ).append("\n"); 
		query.append("				-- CHM-201537921 TES Invoice Calculation로직 오류(CNTR Verify) - (2015-09-07 CAY D)" ).append("\n"); 
		query.append("				AND	DECODE(ACCM_CHK, 'Y', DECODE(CHK_FM_QTY, 0, 1, CHK_FM_QTY) - NVL(T.FM_TR_VOL_VAL, 1), DECODE(CHK_FM_QTY, 0, 1, CHK_FM_QTY) - ACCM - NVL(T.FM_TR_VOL_VAL, 1)) >= 0" ).append("\n"); 
		query.append("				AND	NVL(T.TO_TR_VOL_VAL, 9999999) - CHK_TO_QTY >= 0" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_OFC_CTY_CD = C.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_SEQ = C.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_VER_NO = C.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_DTL_SEQ = C.TML_AGMT_DTL_SEQ(+)" ).append("\n"); 
		query.append("			  AND    DECODE(T.TML_AGMT_VOL_UT_CD,'C',C.CNTR_TPSZ_CD,'N') " ).append("\n"); 
		query.append("					   = DECODE(T.TML_AGMT_VOL_UT_CD," ).append("\n"); 
		query.append("										'C', DECODE(Q.CNTR_STY_CD," ).append("\n"); 
		query.append("														'F', DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,1)," ).append("\n"); 
		query.append("																   'R',DECODE(Q.RC_FLG,'N',DECODE(Q.CNTR_STY_CD, 'M', Q.CNTR_TPSZ_CD,'D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1)),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																   'O',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																   'F',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																   'P',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																   'A',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																   'S',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																	Q.CNTR_TPSZ_CD),Q.CNTR_TPSZ_CD),'N')" ).append("\n"); 
		query.append("--		              AND    DECODE(T.TML_AGMT_VOL_UT_CD,'C',C.CNTR_TPSZ_CD,'N') =" ).append("\n"); 
		query.append("--						 		DECODE(T.TML_AGMT_VOL_UT_CD," ).append("\n"); 
		query.append("--						 					'C',DECODE(Q.RC_FLG,'N',DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,1),'R','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD),Q.CNTR_TPSZ_CD),'N')" ).append("\n"); 
		query.append("			  AND    Q.COST_CODE = L.LGS_COST_CD(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_OFC_CTY_CD  = A.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_SEQ         = A.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_VER_NO      = A.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_DTL_SEQ     = A.TML_AGMT_DTL_SEQ(+)" ).append("\n"); 
		query.append("		  AND    ( DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.WKDY_FLG,'Y','WD'),'S')" ).append("\n"); 
		query.append("		  OR       DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.SAT_FLG,'Y','SA'),'S')" ).append("\n"); 
		query.append("		  OR       DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.SUN_FLG,'Y','SU'),'S')" ).append("\n"); 
		query.append("		  OR       DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.HOL_FLG,'Y','HO'),'S') )" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_OFC_CTY_CD = G.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_SEQ        = G.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_VER_NO     = G.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_DTL_SEQ    = G.TML_AGMT_DTL_SEQ(+)" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'N','N',G.DCGO_APLY_TP_CD) = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'N','N','R')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N','N',G.DCGO_SAM_CLSS_FLG),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N','N','Y'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N',G.DCGO_NON_CLSS_FLG,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'N',G.DCGO_NON_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N','Y','N'),'S',DECODE(Q.DCGO_CLSS_CD,'N','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'1',G.DCGO_N1ST_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'1','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'2',G.DCGO_N2ND_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'2','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'3',G.DCGO_N3RD_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'3','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'4',G.DCGO_N4TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'4','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'5',G.DCGO_N5TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'5','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'6',G.DCGO_N6TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'6','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'7',G.DCGO_N7TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'7','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'8',G.DCGO_N8TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'8','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'9',G.DCGO_N9TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'9','Y','N'),'N')  )" ).append("\n"); 
		query.append("	   WHERE DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY),0) >= 0" ).append("\n"); 
		query.append("	   UNION ALL" ).append("\n"); 
		query.append("	   SELECT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD, RC_FLG, AWK_CGO_FLG, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD, FM_TIER, TO_TIER," ).append("\n"); 
		query.append("			  DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY)+1,CAL_VOL) CALC_VOL_QTY, DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY)+1,CAL_VOL) RVIS_VOL_QTY, VOL_TR_UT_CD, CTRT_RT," ).append("\n"); 
		query.append("			  CTRT_RT * DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY)+1,CAL_VOL) INV_AMT, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ACCT_CD, ATB_DT," ).append("\n"); 
		query.append("			  CTY, SEQ, NO, DECODE(@[curr_cd],CURR,'Y','N') CURR_CHK, CURR, ACCM_CHK," ).append("\n"); 
		query.append("			  -- [CHM-201640588]자동계산시 Agreement Rate 값에 특정 Lane이 등록된 경우 lane을 우선해서 읽도록 로직 수정(2016.03.16 CAY D) " ).append("\n"); 
		query.append("			  RANK() OVER(PARTITION BY COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD ORDER BY RANK_CD) AS RANK_CD" ).append("\n"); 
		query.append("	   FROM ( SELECT COST_CODE, Q.CNTR_TPSZ_CD, Q.CNTR_STY_CD, Q.IO_BND_CD, Q.DCGO_CLSS_CD, TML_WRK_DY_CD, Q.IOC_CD, Q.LANE_CD, Q.TML_TRNS_MOD_CD, Q.RC_FLG, Q.AWK_CGO_FLG, ACCM, CAL_VOL," ).append("\n"); 
		query.append("					 VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO, T.TML_AGMT_VOL_UT_CD VOL_TR_UT_CD," ).append("\n"); 
		query.append("					 DECODE(T.TML_AGMT_VOL_UT_CD,'C',C.AGMT_RT,T.AGMT_UT_RT) CTRT_RT, L.ACCT_CD," ).append("\n"); 
		query.append("					 NVL(T.FM_TR_VOL_VAL,1) FM_TIER, NVL(T.TO_TR_VOL_VAL,9999999) TO_TIER," ).append("\n"); 
		query.append("					 -- CHM-201538524 TES Accumulate Volume 계산인 경우 Tier 중복으로 처리되는 로직 부분을 수정 - (2015-10-16 YYS B) FM_QTY 부분만 원복" ).append("\n"); 
		query.append("					 ( CASE WHEN CHK_FM_QTY >= NVL(T.FM_TR_VOL_VAL,1)" ).append("\n"); 
		query.append("							THEN CHK_FM_QTY + 1" ).append("\n"); 
		query.append("							ELSE NVL(T.FM_TR_VOL_VAL,1)" ).append("\n"); 
		query.append("					   END )  FM_QTY," ).append("\n"); 
		query.append("					 -- CHM-201537921 TES Invoice Calculation로직 오류(CNTR Verify) - (2015-09-07 CAY D)" ).append("\n"); 
		query.append("					 --( CASE WHEN NVL(CHK_FM_QTY, ACCM) >= NVL(T.FM_TR_VOL_VAL, 1) AND NVL(CHK_FM_QTY, ACCM) <> CHK_TO_QTY THEN NVL(CHK_FM_QTY, ACCM) + 1" ).append("\n"); 
		query.append("					--		WHEN NVL(CHK_FM_QTY, ACCM) >= NVL(T.FM_TR_VOL_VAL, 1) THEN NVL(CHK_FM_QTY, ACCM)" ).append("\n"); 
		query.append("					--		ELSE NVL(T.FM_TR_VOL_VAL, 1)" ).append("\n"); 
		query.append("					--   END )  FM_QTY," ).append("\n"); 
		query.append("					 ( CASE WHEN CHK_TO_QTY <= NVL(T.TO_TR_VOL_VAL,9999999)" ).append("\n"); 
		query.append("							THEN CHK_TO_QTY" ).append("\n"); 
		query.append("							ELSE NVL(T.TO_TR_VOL_VAL,9999999)" ).append("\n"); 
		query.append("					   END )  TO_QTY," ).append("\n"); 
		query.append("					   T.CURR_CD CURR," ).append("\n"); 
		query.append("					   ACCM_CHK," ).append("\n"); 
		query.append("					   TES_GET_MAS_RANK_FNC(NVL(T.LANE_CD,'N'),NVL(T.TML_TRNS_MOD_CD,'N')) RANK_CD" ).append("\n"); 
		query.append("			  FROM ( SELECT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD, RC_FLG, AWK_CGO_FLG, ACCM, CAL_VOL, CHK_TO_QTY," ).append("\n"); 
		query.append("					  DECODE(ACCM+CAL_VOL,CHK_TO_QTY,ACCM, NVL(LAG(CHK_TO_QTY) OVER (PARTITION BY ACCM_CHK --COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD," ).append("\n"); 
		query.append("																							-- IOC_CD, LANE_CD, TML_TRNS_MOD_CD, ACCM, CAL_VOL, CHK_TO_QTY," ).append("\n"); 
		query.append("																							-- VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO" ).append("\n"); 
		query.append("																				ORDER BY COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD," ).append("\n"); 
		query.append("																			  TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD), ACCM)) CHK_FM_QTY," ).append("\n"); 
		query.append("					  VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO, ACCM_CHK" ).append("\n"); 
		query.append("					 FROM ( SELECT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD, RC_FLG, AWK_CGO_FLG, ACCM, CAL_VOL," ).append("\n"); 
		query.append("						   SUM(CAL_VOL) OVER (PARTITION BY ACCM_CHK --COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD," ).append("\n"); 
		query.append("															 --ACCM, CAL_VOL, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO" ).append("\n"); 
		query.append("												ORDER BY COST_CODE, CNTR_TPSZ_CD, IO_BND_CD, DCGO_CLSS_CD, TML_WRK_DY_CD, IOC_CD, LANE_CD, TML_TRNS_MOD_CD" ).append("\n"); 
		query.append("												RANGE BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW ) + ACCM CHK_TO_QTY," ).append("\n"); 
		query.append("							 VSL_CD, SKD_VOY_NO, SKD_DIR_CD, ATB_DT, CTY, SEQ, NO, ACCM_CHK" ).append("\n"); 
		query.append("					  FROM   (" ).append("\n"); 
		query.append("					  SELECT DISTINCT COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, I.IO_BND_CD, I.DCGO_CLSS_CD," ).append("\n"); 
		query.append("							 DECODE(I.HO,0,I.TML_WRK_DY_CD,'HO') TML_WRK_DY_CD, TML_WRK_DY_CD TML_WRK_DY_CD2, I.IOC_CD, I.LANE_CD, --I.WRK_DT," ).append("\n"); 
		query.append("							 D.TML_TRNS_MOD_CD,--DECODE(D.TML_TRNS_MOD_CD,'S','S',I.TML_TRNS_MOD_CD) TML_TRNS_MOD_CD, I.RC_FLG," ).append("\n"); 
		query.append("							 I.RC_FLG, I.AWK_CGO_FLG, DECODE(ACCM,'Y',TO_NUMBER(REPLACE(@[pay_vol_qty],',')),0) ACCM," ).append("\n"); 
		query.append("							 DECODE(ACCM,'Y',DECODE(ACCM_UOM,'T',TEU_CAL,CAL_VOL),DECODE(D.TML_AGMT_VOL_UT_CD,'T',TEU_CAL,CAL_VOL)) CAL_VOL," ).append("\n"); 
		query.append("							 VSL_CD, SKD_VOY_NO, SKD_DIR_CD, TO_CHAR(ATB_DT,'YYYYMMDD') ATB_DT, CTY, SEQ, NO, NVL(ACCM,'N') ACCM_CHK" ).append("\n"); 
		query.append("-- TM 비용 Auto Calculation위해 추가한부분" ).append("\n"); 
		query.append("					  FROM ( SELECT DECODE(L.LOCL_TS_IND_CD," ).append("\n"); 
		query.append("												  'T', DECODE(L.CNTR_STY_CD," ).append("\n"); 
		query.append("																   'F',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("																	   DECODE(SUBSTR(C.COST_CODE,5,2),'TM',C.COST_CODE))," ).append("\n"); 
		query.append("													   DECODE(L.CNTR_STY_CD," ).append("\n"); 
		query.append("																   'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("																	   DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) COST_CODE," ).append("\n"); 
		query.append("--		 TM 비용 Auto Calculation위해 삭제한부분" ).append("\n"); 
		query.append("--		                      FROM ( SELECT DECODE(L.LOCL_TS_IND_CD,'T',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                          DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                          DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) COST_CODE," ).append("\n"); 
		query.append("										  CNTR_TPSZ_CD, CNTR_STY_CD, IO_BND_CD, L.DCGO_CLSS_CD, --L.WRK_DT," ).append("\n"); 
		query.append("										  DECODE(TO_CHAR(L.WRK_DT,'D'),7,'SA',1,'SU','WD') TML_WRK_DY_CD," ).append("\n"); 
		query.append("--		                                          DECODE(TO_CHAR(L.WRK_DT,'DY'),'SAT','SA','SUN','SU','WD') TML_WRK_DY_CD," ).append("\n"); 
		query.append("										  MAX(( SELECT COUNT(*)" ).append("\n"); 
		query.append("											FROM   DMT_HOLIDAY" ).append("\n"); 
		query.append("											WHERE  1=1" ).append("\n"); 
		query.append("											AND	   TO_CHAR(HOL_DT,'YYYYMMDD')    =  TO_CHAR(L.WRK_DT,'YYYYMMDD')" ).append("\n"); 
		query.append("											AND    CNT_CD    = SUBSTR(@[yd_cd],1,2)" ).append("\n"); 
		query.append("											)) HO," ).append("\n"); 
		query.append("										  IOC_CD, LANE_CD, COUNT(DISTINCT CNTR_NO) CAL_VOL," ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D7',1,'O7',1,0))*2.25+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D8',1,0))*2.4+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D9',1,0))*2.4+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'DW',1,0))*2.65+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'DX',1,0))*2.25+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D7',0,'D8',0,'D9',0,'DW',0,'DX',0,'O7',0," ).append("\n"); 
		query.append("											  DECODE(SUBSTR(L.CNTR_TPSZ_CD,2,1),2,1,0)))+" ).append("\n"); 
		query.append("										  SUM(DECODE(L.CNTR_TPSZ_CD,'D7',0,'D8',0,'D9',0,'DW',0,'DX',0,'O7',0," ).append("\n"); 
		query.append("											  DECODE(SUBSTR(L.CNTR_TPSZ_CD,2,1),2,0,1*2))) TEU_CAL," ).append("\n"); 
		query.append("										  CTY, SEQ, NO, L.VSL_CD, L.SKD_VOY_NO, L.SKD_DIR_CD, L.ATB_DT," ).append("\n"); 
		query.append("										  DECODE(C.TML_TRNS_MOD_CD,'S','S',L.TML_TRNS_MOD_CD) TML_TRNS_MOD_CD, L.RC_FLG, L.AWK_CGO_FLG," ).append("\n"); 
		query.append("										  MAX(( SELECT 'Y'" ).append("\n"); 
		query.append("											FROM   TES_TML_SO_ACCM_COST" ).append("\n"); 
		query.append("											WHERE  VNDR_SEQ = @[vndr_seq]" ).append("\n"); 
		query.append("											AND    ACCM_SEQ = @[accm_seq]" ).append("\n"); 
		query.append("--		                                            AND    LGS_COST_CD = DECODE(L.LOCL_TS_IND_CD,'T',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                               DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("--		                                               DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) ) ACCM," ).append("\n"); 
		query.append("/* 2008-06-20 : 김기영 부장님의 요청으로 TS/TM 구분에도 F/M 기준으로 변경  */" ).append("\n"); 
		query.append("											AND    LGS_COST_CD = DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'TS',C.COST_CODE)," ).append("\n"); 
		query.append("																													  DECODE(SUBSTR(C.COST_CODE,5,2),'TM',C.COST_CODE))," ).append("\n"); 
		query.append("																							 DECODE(L.CNTR_STY_CD,'F',DECODE(SUBSTR(C.COST_CODE,5,2),'FL',C.COST_CODE)," ).append("\n"); 
		query.append("																													  DECODE(SUBSTR(C.COST_CODE,5,2),'MT',C.COST_CODE))) )) ACCM," ).append("\n"); 
		query.append("										  ( SELECT TML_ACCM_UT_CD" ).append("\n"); 
		query.append("											FROM   TES_TML_SO_ACCM_MZD" ).append("\n"); 
		query.append("											WHERE  VNDR_SEQ = @[vndr_seq]" ).append("\n"); 
		query.append("											AND    ACCM_SEQ = @[accm_seq] ) ACCM_UOM" ).append("\n"); 
		query.append("								   FROM   TES_TML_SO_CNTR_LIST L," ).append("\n"); 
		query.append("										  ( SELECT DISTINCT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE," ).append("\n"); 
		query.append("												   CTY, SEQ, NO, NVL(D.TML_TRNS_MOD_CD,'S') TML_TRNS_MOD_CD" ).append("\n"); 
		query.append("											FROM ( SELECT COUNT(T.LGS_COST_CD) CNT," ).append("\n"); 
		query.append("														  T.LGS_COST_CD TP," ).append("\n"); 
		query.append("														  T.THRP_LGS_COST_CD CD," ).append("\n"); 
		query.append("														  H.TML_AGMT_OFC_CTY_CD CTY," ).append("\n"); 
		query.append("														  H.TML_AGMT_SEQ SEQ," ).append("\n"); 
		query.append("														  H.TML_AGMT_VER_NO NO" ).append("\n"); 
		query.append("												   FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T" ).append("\n"); 
		query.append("												   WHERE  H.YD_CD            = @[yd_cd]" ).append("\n"); 
		query.append("												   AND    H.VNDR_SEQ         = @[vndr_seq]" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_STS_CD = 'C'" ).append("\n"); 
		query.append("												   AND    H.DELT_FLG        = 'N'" ).append("\n"); 
		query.append("												   AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[atb_dt],'-')" ).append("\n"); 
		query.append("												   AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[atb_dt],'-')" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)" ).append("\n"); 
		query.append("																				FROM   TES_TML_AGMT_HDR M" ).append("\n"); 
		query.append("																				WHERE  M.YD_CD               = @[yd_cd]" ).append("\n"); 
		query.append("																				AND    M.VNDR_SEQ            = @[vndr_seq]" ).append("\n"); 
		query.append("																				AND    M.TML_AGMT_STS_CD     = 'C'" ).append("\n"); 
		query.append("																				AND    M.DELT_FLG            = 'N'" ).append("\n"); 
		query.append("																				AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[atb_dt],'-')" ).append("\n"); 
		query.append("																				AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[atb_dt],'-'))" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("												   AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("												   GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO," ).append("\n"); 
		query.append("															T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("											WHERE  C.COST_CALC_MZD_CD = 'A'" ).append("\n"); 
		query.append("											AND    C.TML_AGMT_MGMT_CD = 'A'" ).append("\n"); 
		query.append("											AND    C.MRN_TML_FLG = 'Y'" ).append("\n"); 
		query.append("											AND    C.STO_INV_FLG = 'N'" ).append("\n"); 
		query.append("											AND    D.TML_AGMT_OFC_CTY_CD = A.CTY" ).append("\n"); 
		query.append("											AND    D.TML_AGMT_SEQ = A.SEQ" ).append("\n"); 
		query.append("											AND    D.TML_AGMT_VER_NO = A.NO" ).append("\n"); 
		query.append("--		                                            AND    D.LGS_COST_CD  = A.TP(+)" ).append("\n"); 
		query.append("											AND    C.LGS_COST_CD = D.LGS_COST_CD" ).append("\n"); 
		query.append("											AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' ) C" ).append("\n"); 
		query.append("								   WHERE  VRFY_RSLT_IND_CD = 'CO'" ).append("\n"); 
		query.append("								   AND    L.TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]" ).append("\n"); 
		query.append("								   AND    L.TML_SO_SEQ        = @[tml_so_seq]" ).append("\n"); 
		query.append("								   AND    L.VSL_CD            = SUBSTR(@[vvd],1,4)" ).append("\n"); 
		query.append("								   AND    L.SKD_VOY_NO        = SUBSTR(@[vvd],5,4)" ).append("\n"); 
		query.append("								   AND    L.SKD_DIR_CD        = SUBSTR(@[vvd],9,1)" ).append("\n"); 
		query.append("								   AND    L.IO_BND_CD	        = @[io_bnd_cd]" ).append("\n"); 
		query.append("								   AND    NVL(L.CNTR_STY_CD,'N') <> 'R'" ).append("\n"); 
		query.append("								   AND    NVL(L.BB_CGO_FLG,'N')  <> 'Y'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("--		TM 비용 Auto Calculation을 위해 삭제한 부분" ).append("\n"); 
		query.append("--		                                   AND    ( NVL(L.CNTR_STY_CD,'N') <> 'M' OR NVL(LOCL_TS_IND_CD,'N') <> 'T' )" ).append("\n"); 
		query.append("--TM 비용 Auto Calculation을 위해 추가한 부분" ).append("\n"); 
		query.append("								   AND    DECODE(LOCL_TS_IND_CD,'T', DECODE(CNTR_STY_CD,'F','TS','TM')" ).append("\n"); 
		query.append("																 , DECODE(CNTR_STY_CD,'F','FL','MT')) = SUBSTR(C.COST_CODE,5,2)" ).append("\n"); 
		query.append("--TM 비용 Auto Calculation을 위해 삭제한 부분" ).append("\n"); 
		query.append("--		                                   AND    DECODE(LOCL_TS_IND_CD,'T','TS',DECODE(CNTR_STY_CD,'F','FL','MT')) = SUBSTR(C.COST_CODE,5,2)" ).append("\n"); 
		query.append("								   AND    DECODE(NVL(C.TML_TRNS_MOD_CD,'S'),'S','N',C.TML_TRNS_MOD_CD) = DECODE(NVL(C.TML_TRNS_MOD_CD,'S'),'S','N',L.TML_TRNS_MOD_CD)" ).append("\n"); 
		query.append("								   GROUP BY C.COST_CODE, CNTR_TPSZ_CD, CNTR_STY_CD, LOCL_TS_IND_CD, IO_BND_CD, L.DCGO_CLSS_CD," ).append("\n"); 
		query.append("											DECODE(TO_CHAR(L.WRK_DT,'D'),7,'SA',1,'SU','WD'), --L.WRK_DT," ).append("\n"); 
		query.append("--		                                            DECODE(TO_CHAR(L.WRK_DT,'DY'),'SAT','SA','SUN','SU','WD'), --L.WRK_DT," ).append("\n"); 
		query.append("											IOC_CD, LANE_CD, CTY, SEQ, NO, L.VSL_CD, L.SKD_VOY_NO, L.SKD_DIR_CD," ).append("\n"); 
		query.append("											L.ATB_DT, DECODE(C.TML_TRNS_MOD_CD,'S','S',L.TML_TRNS_MOD_CD), L.RC_FLG, L.AWK_CGO_FLG) I," ).append("\n"); 
		query.append("							TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("					 WHERE  I.CTY = D.TML_AGMT_OFC_CTY_CD" ).append("\n"); 
		query.append("					 AND    I.SEQ = D.TML_AGMT_SEQ" ).append("\n"); 
		query.append("					 AND    I.NO  = D.TML_AGMT_VER_NO" ).append("\n"); 
		query.append("					 AND    D.TML_AGMT_TP_CD       = 'T'" ).append("\n"); 
		query.append("					 AND    D.AUTO_CALC_FLG        = 'Y'" ).append("\n"); 
		query.append("--		TM 비용 Auto Calculation을 위해 추가한 부분" ).append("\n"); 
		query.append("					 AND    (SUBSTR(I.COST_CODE,1,4)||'MT' = DECODE(D.THRP_COST_CD_FLG,'Y',D.THRP_LGS_COST_CD,D.LGS_COST_CD)" ).append("\n"); 
		query.append("							or SUBSTR(I.COST_CODE,1,4)||'TM' = DECODE(D.THRP_COST_CD_FLG,'Y',D.THRP_LGS_COST_CD,D.LGS_COST_CD)    )" ).append("\n"); 
		query.append("--		TM 비용 Auto Calculation을 위해 삭제한 부분" ).append("\n"); 
		query.append("--		                     AND    SUBSTR(I.COST_CODE,1,4)||'MT' = DECODE(D.THRP_COST_CD_FLG,'Y',D.THRP_LGS_COST_CD,D.LGS_COST_CD)" ).append("\n"); 
		query.append("					 AND    I.COST_CODE = D.LGS_COST_CD(+)" ).append("\n"); 
		query.append("					 AND    NVL(D.THRP_COST_CD_FLG,'N') <> 'Y'" ).append("\n"); 
		query.append("					 AND    NVL(D.IO_BND_CD,'N')  = DECODE(NVL(D.IO_BND_CD,'N'),'N','N','S','S',I.IO_BND_CD)" ).append("\n"); 
		query.append("					 AND    NVL(D.IOC_CD,'N')  = DECODE(NVL(D.IOC_CD,'N'),'N','N','S','S',I.IOC_CD)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("--		                     AND    NVL(D.LANE_CD,'N')  = DECODE(NVL(D.LANE_CD,'N'),'N','N','Sam','Sam',I.LANE_CD)" ).append("\n"); 
		query.append("					 AND    NVL(D.LANE_CD,'N') = DECODE(NVL(D.LANE_CD,'N'),'N','N','Sam','Sam'," ).append("\n"); 
		query.append("											( SELECT DECODE((SELECT NVL('X','N')" ).append("\n"); 
		query.append("															 FROM   TES_TML_AGMT_DTL" ).append("\n"); 
		query.append("															 WHERE  TML_AGMT_OFC_CTY_CD = I.CTY" ).append("\n"); 
		query.append("															 AND    TML_AGMT_SEQ        = I.SEQ" ).append("\n"); 
		query.append("															 AND    TML_AGMT_VER_NO     = I.NO" ).append("\n"); 
		query.append("															 AND    LANE_CD = I.LANE_CD" ).append("\n"); 
		query.append("															 AND    ROWNUM = 1),'X',I.LANE_CD,'OTH')" ).append("\n"); 
		query.append("											  FROM DUAL ))" ).append("\n"); 
		query.append("					 AND    NVL(D.TML_TRNS_MOD_CD,'S') = DECODE(NVL(D.TML_TRNS_MOD_CD,'S'),'S','S',I.TML_TRNS_MOD_CD)" ).append("\n"); 
		query.append("					 AND    NVL(D.FM_TR_VOL_VAL,1) = 1 ) ) ) Q, TES_TML_AGMT_DTL T, TES_TML_AGMT_TP_SZ C, TES_LGS_COST L," ).append("\n"); 
		query.append("				   TES_TML_AGMT_APLY_DY A, TES_TML_AGMT_DG_CGO_CLSS G" ).append("\n"); 
		query.append("			  WHERE  Q.CTY = T.TML_AGMT_OFC_CTY_CD" ).append("\n"); 
		query.append("			  AND    Q.SEQ = T.TML_AGMT_SEQ" ).append("\n"); 
		query.append("			  AND    Q.NO  = T.TML_AGMT_VER_NO" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_TP_CD       = 'T'" ).append("\n"); 
		query.append("			  AND    T.AUTO_CALC_FLG        = 'Y'" ).append("\n"); 
		query.append("			  AND    ( SUBSTR(Q.COST_CODE,1,4)||'MT' = DECODE(T.THRP_COST_CD_FLG,'Y',T.THRP_LGS_COST_CD,T.LGS_COST_CD)" ).append("\n"); 
		query.append("					 OR SUBSTR(Q.COST_CODE,1,4)||'TM' = DECODE(T.THRP_COST_CD_FLG,'Y',T.THRP_LGS_COST_CD,T.LGS_COST_CD))" ).append("\n"); 
		query.append("--		              AND    SUBSTR(Q.COST_CODE,1,4)||'MT' = DECODE(T.THRP_COST_CD_FLG,'Y',T.THRP_LGS_COST_CD,T.LGS_COST_CD)" ).append("\n"); 
		query.append("			  AND    Q.COST_CODE = T.LGS_COST_CD(+)" ).append("\n"); 
		query.append("			  AND    NVL(T.THRP_COST_CD_FLG,'N') <> 'Y'" ).append("\n"); 
		query.append("			  AND    NVL(T.IO_BND_CD,'N')  = DECODE(NVL(T.IO_BND_CD,'N'),'N','N','S','S',Q.IO_BND_CD)" ).append("\n"); 
		query.append("			  AND    NVL(T.IOC_CD,'N')  = DECODE(NVL(T.IOC_CD,'N'),'N','N','S','S',Q.IOC_CD)" ).append("\n"); 
		query.append("--		              AND    NVL(T.LANE_CD,'N')  = DECODE(NVL(T.LANE_CD,'N'),'N','N','Sam','Sam',Q.LANE_CD)" ).append("\n"); 
		query.append("			  AND    NVL(T.LANE_CD,'N') = DECODE(NVL(T.LANE_CD,'N'),'N','N','Sam','Sam'," ).append("\n"); 
		query.append("											( SELECT DECODE((SELECT NVL('X','N')" ).append("\n"); 
		query.append("															 FROM   TES_TML_AGMT_DTL" ).append("\n"); 
		query.append("															 WHERE  TML_AGMT_OFC_CTY_CD = Q.CTY" ).append("\n"); 
		query.append("															 AND    TML_AGMT_SEQ        = Q.SEQ" ).append("\n"); 
		query.append("															 AND    TML_AGMT_VER_NO     = Q.NO" ).append("\n"); 
		query.append("															 AND    LANE_CD = Q.LANE_CD" ).append("\n"); 
		query.append("															 AND    ROWNUM = 1),'X',Q.LANE_CD,'OTH')" ).append("\n"); 
		query.append("											  FROM DUAL ))" ).append("\n"); 
		query.append("			  AND    NVL(T.TML_TRNS_MOD_CD,'N') = DECODE(NVL(T.TML_TRNS_MOD_CD,'N'),'N','N','S','S',Q.TML_TRNS_MOD_CD)" ).append("\n"); 
		query.append("--			  AND    ( NVL(T.FM_TR_VOL_VAL,1) >= CHK_FM_QTY" ).append("\n"); 
		query.append("--			  OR     NVL(T.TO_TR_VOL_VAL,9999999) <= CHK_TO_QTY" ).append("\n"); 
		query.append("--			  OR     NVL(T.TO_TR_VOL_VAL,9999999) >= CHK_TO_QTY )" ).append("\n"); 
		query.append("				-- CHM-201537921 TES Invoice Calculation로직 오류(CNTR Verify) - (2015-09-07 CAY D)" ).append("\n"); 
		query.append("				AND	DECODE(ACCM_CHK, 'Y', DECODE(CHK_FM_QTY, 0, 1, CHK_FM_QTY) - NVL(T.FM_TR_VOL_VAL, 1), DECODE(CHK_FM_QTY, 0, 1, CHK_FM_QTY) - ACCM - NVL(T.FM_TR_VOL_VAL, 1)) >= 0" ).append("\n"); 
		query.append("				AND	NVL(T.TO_TR_VOL_VAL, 9999999) - CHK_TO_QTY >= 0" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_OFC_CTY_CD = C.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_SEQ = C.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_VER_NO = C.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_DTL_SEQ = C.TML_AGMT_DTL_SEQ(+)" ).append("\n"); 
		query.append("			  AND    DECODE(T.TML_AGMT_VOL_UT_CD,'C',C.CNTR_TPSZ_CD,'N') " ).append("\n"); 
		query.append("					   = DECODE(T.TML_AGMT_VOL_UT_CD," ).append("\n"); 
		query.append("										'C',DECODE(Q.CNTR_STY_CD," ).append("\n"); 
		query.append("														'F', DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,1)," ).append("\n"); 
		query.append("																   'R',DECODE(Q.RC_FLG,'N',DECODE(Q.CNTR_STY_CD, 'M', Q.CNTR_TPSZ_CD,'D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1)),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																   'O',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																   'F',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																   'P',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																   'A',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																   'S',DECODE(Q.AWK_CGO_FLG,'N','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD)," ).append("\n"); 
		query.append("																	Q.CNTR_TPSZ_CD),Q.CNTR_TPSZ_CD),'N')" ).append("\n"); 
		query.append("--		              AND    DECODE(T.TML_AGMT_VOL_UT_CD,'C',C.CNTR_TPSZ_CD,'N') =" ).append("\n"); 
		query.append("--						 			DECODE(T.TML_AGMT_VOL_UT_CD," ).append("\n"); 
		query.append("--						 						'C',DECODE(Q.RC_FLG,'N',DECODE(SUBSTR(Q.CNTR_TPSZ_CD,1,1),'R','D'||SUBSTR(Q.CNTR_TPSZ_CD,2,1),Q.CNTR_TPSZ_CD),Q.CNTR_TPSZ_CD),'N')" ).append("\n"); 
		query.append("			  AND    Q.COST_CODE = L.LGS_COST_CD(+)" ).append("\n"); 
		query.append("			  AND    T.TML_AGMT_OFC_CTY_CD  = A.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_SEQ         = A.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_VER_NO      = A.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_DTL_SEQ     = A.TML_AGMT_DTL_SEQ(+)" ).append("\n"); 
		query.append("		  AND    ( DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.WKDY_FLG,'Y','WD'),'S')" ).append("\n"); 
		query.append("		  OR       DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.SAT_FLG,'Y','SA'),'S')" ).append("\n"); 
		query.append("		  OR       DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.SUN_FLG,'Y','SU'),'S')" ).append("\n"); 
		query.append("		  OR       DECODE(T.TML_DY_APLY_TP_CD,'P',Q.TML_WRK_DY_CD,'S') = DECODE(T.TML_DY_APLY_TP_CD,'P',DECODE(A.HOL_FLG,'Y','HO'),'S') )" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_OFC_CTY_CD = G.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_SEQ        = G.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_VER_NO     = G.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("		  AND    T.TML_AGMT_DTL_SEQ    = G.TML_AGMT_DTL_SEQ(+)" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'N','N',G.DCGO_APLY_TP_CD) = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'N','N','R')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N','N',G.DCGO_SAM_CLSS_FLG),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N','N','Y'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N',G.DCGO_NON_CLSS_FLG,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'N',G.DCGO_NON_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'A',DECODE(Q.DCGO_CLSS_CD,'N','Y','N'),'S',DECODE(Q.DCGO_CLSS_CD,'N','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'1',G.DCGO_N1ST_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'1','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'2',G.DCGO_N2ND_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'2','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'3',G.DCGO_N3RD_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'3','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'4',G.DCGO_N4TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'4','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'5',G.DCGO_N5TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'5','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'6',G.DCGO_N6TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'6','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'7',G.DCGO_N7TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'7','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'8',G.DCGO_N8TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'8','Y','N'),'N')" ).append("\n"); 
		query.append("		  AND    DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'9',G.DCGO_N9TH_CLSS_FLG,'N'),'N')" ).append("\n"); 
		query.append("				 = DECODE(NVL(T.DCGO_APLY_TP_CD,'N'),'S',DECODE(Q.DCGO_CLSS_CD,'9','Y','N'),'N')  )" ).append("\n"); 
		query.append("	   WHERE DECODE(ACCM_CHK,'Y',(TO_QTY - FM_QTY),0) >= 0 )" ).append("\n"); 
		query.append("WHERE RANK_CD = 1" ).append("\n"); 
		query.append("ORDER BY  COST_CODE, VVD, CNTR_TPSZ_CD, TIER" ).append("\n"); 

	}
}