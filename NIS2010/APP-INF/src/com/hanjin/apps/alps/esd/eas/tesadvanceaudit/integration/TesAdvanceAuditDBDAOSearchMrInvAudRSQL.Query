<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="TesAdvanceAuditDBDAOSearchMrInvAudRSQL">
			<desc><![CDATA[Mr Invoice를 심사한다.]]></desc>
			<sql><![CDATA[
SELECT	  INV_NO
		, VNDR_SEQ
		, VSL_CD
		, SKD_VOY_NO
		, SKD_DIR_CD
		, IO_BND_CD
		, TO_CHAR(MAX(INV_CFM_DT), 'YYYYMMDDHH24MISS') AS INV_CFM_DT
		, TO_CHAR(MAX(ATB_DT), 'YYYYMMDDHH24MISS') AS ATB_DT
		, MAX(TML_INV_TP_CD) AS TML_INV_TP_CD
		, MAX(YD_CD) AS YD_CD
		, TO_CHAR(MAX(ISS_DT), 'YYYYMMDDHH24MISS') AS ISS_DT
		, MAX(RHQ_OFC_CD) AS RHQ_CD
		, MAX(INV_OFC_CD) AS INV_OFC_CD 
		, MAX(COST_OFC_CD) AS COST_OFC_CD
		, MAX(CURR_CD) AS CURR_CD
		, SUM(INV_AMT) AS INV_AMT
		, SUM(EXPN_AUD_ESTM_AMT) AS EXPN_AUD_ESTM_AMT		     
		, COUNT(DISTINCT ERR_LGS_COST_CD) AS AUD_LGS_COST_CD_QTY
		, CASE WHEN MIN(AMT_AUTO_AUD_CD) = 'C' THEN 'Y' END AS AMT_AUD_TGT_FLG
		, (CASE WHEN MIN(CALC_TP_CD) = 'A' AND WM_CONCAT(AAAAA.VRFY_RSLT_CD_CTNT) IS NOT NULL 
                     THEN (SELECT WM_CONCAT(DISTINCT X.DSCR_IND_CD)
                     		FROM TES_TML_SO_CNTR_LIST X
                     		WHERE X.TML_SO_OFC_CTY_CD	= AAAAA.TML_SO_OFC_CTY_CD
                     		AND X.TML_SO_SEQ			= AAAAA.TML_SO_SEQ
                     		AND X.VSL_CD				= AAAAA.VSL_CD
							AND X.SKD_VOY_NO			= AAAAA.SKD_VOY_NO
							AND X.SKD_DIR_CD			= AAAAA.SKD_DIR_CD
							AND X.IO_BND_CD				= AAAAA.IO_BND_CD
							AND (X.VRFY_RSLT_IND_CD		= 'CO' AND X.MODI_FLG = 'Y')
							) 
		  END) AS VRFY_RSLT_CD_CTNT
		, SUM(NVL(VOL_AUD_TGT_QTY, 0)) AS VOL_AUD_TGT_QTY
		, MIN(BAT_VOL_RSLT_CD) AS BAT_VOL_RSLT_CD
		, MIN(BAT_AMT_RSLT_CD) AS BAT_AMT_RSLT_CD
		, MIN(BAT_ESTM_VOL_RSLT_CD) AS BAT_ESTM_VOL_RSLT_CD
		, CASE WHEN MAX(CALC_TP_CD) = 'A' THEN 'S' -- Auto일 경우 항상 Coincidence
				-- CHM-201642319 TES Auto Audit 수정 요청 ( 2016-07-08)
				WHEN MAX(AMT_AUTO_AUD_CD) = 'O' THEN 'O' -- Auto Audit Target Flag 'N', Diff Ratio Non
				WHEN MIN(AMT_AUTO_AUD_CD) IN ('F', 'C')  AND SUM(EXPN_AUD_ESTM_AMT) > SUM(INV_AMT) THEN 'F'
				WHEN MIN(AMT_AUTO_AUD_CD) IN ('F', 'C') AND DECODE(SUM(EXPN_AUD_ESTM_AMT), 0, NULL, ROUND(((SUM(INV_AMT) - SUM(EXPN_AUD_ESTM_AMT)) / DECODE(SUM(EXPN_AUD_ESTM_AMT), 0, 1, SUM(EXPN_AUD_ESTM_AMT))) * 100, 1)) <= MIN(EXPN_MAX_PRMT_RTO)
					THEN LEAST('F', MIN(VRFY_RSLT_AUD_CD), MIN(VOL_AOTO_AUD_CD))
		            ELSE (CASE WHEN MIN(VRFY_RSLT_AUD_CD) = 'S' AND MIN(VOL_AOTO_AUD_CD) = 'S' 
									THEN (CASE WHEN MAX(DECODE(AMT_AUTO_AUD_CD, 'O', 'A',AMT_AUTO_AUD_CD)) = 'A' THEN 'O'
													ELSE MIN(DECODE(AMT_AUTO_AUD_CD, 'O', 'Z', AMT_AUTO_AUD_CD))
										  END)
                               		ELSE LEAST(MIN(AMT_AUTO_AUD_CD), MIN(VRFY_RSLT_AUD_CD), MIN(VOL_AOTO_AUD_CD)) 
                          END)
		  END AS AUTO_EXPN_AUD_STS_CD
		, COUNT(1) AS AUD_DTL_TGT_QTY
		, WM_CONCAT(DISTINCT CALC_TP_CD_DESC) AS CALC_TP_CD_CTNT
		, SUM(DECODE(BAT_VOL_RSLT_CD, 'F', 1, 0)) AS BAT_VOL_RSLT_CD_QTY
		, SUM(DECODE(BAT_AMT_RSLT_CD, 'F', 1, 0)) AS BAT_AMT_RSLT_CD_QTY
		, SUM(DECODE(BAT_ESTM_VOL_RSLT_CD, 'F', 1, 0)) AS BAT_ESTM_VOL_RSLT_CD_QTY
FROM	(
		SELECT	  AAAA.*
				, CASE WHEN (CASE WHEN EXPN_MAX_PRMT_RTO < ((INV_AMT - EXPN_AUD_ESTM_AMT) / DECODE(EXPN_AUD_ESTM_AMT, 0, 1, EXPN_AUD_ESTM_AMT) ) * 100 THEN 'Y' END) = 'Y' THEN LGS_COST_CD
						WHEN VRFY_RSLT_CD_CTNT IS NOT NULL THEN LGS_COST_CD
						WHEN NVL(VOL_AUD_TGT_QTY, 0) > 0 THEN LGS_COST_CD
				  END AS ERR_LGS_COST_CD
				, CASE WHEN CALC_TP_CD = 'A' THEN 'S' -- Auto일 경우 금액에 관계없이 항상 Coincidence
						WHEN EXPN_MAX_PRMT_RTO IS NULL THEN 'O'
						WHEN INV_AMT - EXPN_AUD_ESTM_AMT < 0 THEN 'F' -- 마이너스 금액은 잠재적인 심사대상
						WHEN EXPN_MAX_PRMT_RTO >= ((INV_AMT - EXPN_AUD_ESTM_AMT) / DECODE(EXPN_AUD_ESTM_AMT,0,1,EXPN_AUD_ESTM_AMT) ) * 100 -- 허용범위내(%)
							THEN (CASE WHEN COST_CALC_MZD_CD = 'A' AND CALC_TP_CD = 'M' AND (((INV_AMT - EXPN_AUD_ESTM_AMT) / DECODE(EXPN_AUD_ESTM_AMT, 0, 1, EXPN_AUD_ESTM_AMT) ) * 100 BETWEEN 0 AND 1) THEN 'S' -- Auto는 1%이내일 경우 심사대상에서 제외
										WHEN COST_CALC_MZD_CD = 'M' AND CALC_TP_CD = 'M' AND (((INV_AMT - EXPN_AUD_ESTM_AMT) / DECODE(EXPN_AUD_ESTM_AMT, 0, 1, EXPN_AUD_ESTM_AMT) ) * 100 BETWEEN 0 AND 3) THEN 'S' -- Manual은 3%이내일 경우 심사대상에서 제외
											ELSE 'F'
									END)
						WHEN EXPN_MAX_PRMT_RTO < ((INV_AMT - EXPN_AUD_ESTM_AMT) / DECODE(EXPN_AUD_ESTM_AMT, 0, 1, EXPN_AUD_ESTM_AMT) ) * 100 THEN 'C' -- 설정된 허용범위를 초과화면 심사대상
						WHEN N3MON_TOT_VOL IS NULL OR N3MON_TOT_AMT IS NULL OR VVD_VOL IS NULL THEN 'F'
						ELSE 'O' -- Ratio가 등록되지 않아 비교값이 없는 경우
					END AS AMT_AUTO_AUD_CD
				, CASE WHEN VRFY_RSLT_CD_CTNT IS NOT NULL THEN 'F'
							ELSE 'S'
				  END AS VRFY_RSLT_AUD_CD
				, CASE WHEN NVL(VOL_AUD_TGT_QTY, 0) > 0 THEN 'C'
							ELSE 'S'
				  END VOL_AOTO_AUD_CD
				, (CASE WHEN N3MON_TOT_VOL IS NOT NULL THEN 'S' ELSE 'F' END) BAT_VOL_RSLT_CD
				, (CASE WHEN N3MON_TOT_AMT IS NOT NULL THEN 'S' ELSE 'F' END) BAT_AMT_RSLT_CD
				, (CASE WHEN VVD_VOL IS NOT NULL THEN 'S' ELSE 'F' END) BAT_ESTM_VOL_RSLT_CD
				, (CASE WHEN SEMI_AUTO_CALC_FLG = 'Y' THEN 'S' ELSE CALC_TP_CD END) CALC_TP_CD_DESC
		FROM	(
				SELECT	AAA.*
						, NVL( (CASE WHEN CALC_TP_CD = 'A' OR SEMI_AUTO_CALC_FLG = 'Y' THEN CTRT_RT * INV_XCH_RT
									WHEN CALC_TP_CD = 'M' AND LGS_COST_CD  = 'SVXXHC' THEN ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 1)) / DECODE(VVD_CNT, 0, 1, VVD_CNT), 2)
									WHEN CALC_TP_CD = 'M' AND LGS_COST_CD <> 'SVXXHC' THEN NVL(ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 1)) / TO_NUMBER(DECODE(BKG_GET_TOKEN_FNC(N3MON_INV, 2), '0', '1', BKG_GET_TOKEN_FNC(N3MON_INV, 2))), 2), CTRT_RT * INV_XCH_RT)
								END)
								*  NVL((CASE WHEN VVD_VOL * (CASE WHEN N3MON_TOT_VOL IS NULL OR N3MON_TOT_VOL = 0 THEN 1
																  WHEN VVD_VOL / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) BETWEEN 0.9 AND 1.1 THEN 1
																  WHEN TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,NULL,N3MON_TOT_VOL) BETWEEN 0.9 AND 1.1 THEN 1
																  WHEN (NVL(RVIS_VOL_QTY,0) - NVL(VVD_VOL,0)) / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) 
										                                                       <= (NVL(RVIS_VOL_QTY,0) - (NVL(VVD_VOL,0)) * ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,1,N3MON_TOT_VOL),3)) / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) THEN 1
																  	ELSE ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,1,N3MON_TOT_VOL),3)
															 END) < 1
												THEN 1
												ELSE ROUND(VVD_VOL * (CASE WHEN N3MON_TOT_VOL IS NULL OR N3MON_TOT_VOL = 0 THEN 1
																		   WHEN VVD_VOL / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) BETWEEN 0.9 AND 1.1 THEN 1
																		   WHEN TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,NULL,N3MON_TOT_VOL) BETWEEN 0.9 AND 1.1 THEN 1
																		   WHEN (NVL(RVIS_VOL_QTY,0) - NVL(VVD_VOL,0)) / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) 
																				<= (NVL(RVIS_VOL_QTY,0) - (NVL(VVD_VOL,0)) * ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,1,N3MON_TOT_VOL),3)) / DECODE(RVIS_VOL_QTY,0,NULL,RVIS_VOL_QTY) THEN 1
																				ELSE ROUND(TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) / DECODE(N3MON_TOT_VOL,0,1,N3MON_TOT_VOL),3)
																	  END)
															, 1)
										 END)
										, 1)
								, 0) AS EXPN_AUD_ESTM_AMT 
						, TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 1)) AS N3MON_TOT_AMT
						, TO_NUMBER(BKG_GET_TOKEN_FNC(N3MON_INV, 2)) AS N3MON_TOT_INV_VOL
				FROM	(
						SELECT	AA.*
								, (SELECT	X.TTL_TML_AMT ||','|| TTL_RVIS_VOL_QTY
									FROM	EAS_TML_MRN_TTL_AMT X
									WHERE	X.TML_AUD_YRMON = AA.ATB_YM
									AND		X.YD_CD         = AA.YD_CD
									AND		X.IO_BND_CD     = AA.IO_BND_CD
									AND		X.CNTR_TPSZ_CD  = (CASE WHEN AA.CNTR_STY_CD = 'F' AND SUBSTR(AA.CNTR_TPSZ_CD ,1,1) = 'R' AND NVL(AA.RC_FLG, 'N') = 'N' THEN 'D'||SUBSTR(AA.CNTR_TPSZ_CD ,2,1) ELSE AA.CNTR_TPSZ_CD END)
									AND		X.LGS_COST_CD   = AA.LGS_COST_CD
									AND		X.CURR_CD       = AA.CURR_CD
									AND		X.DCGO_FLG      = AA.DCGO_FLG
									AND		X.RC_FLG        = AA.RC_FLG
									AND		X.COM_VVD_FLG   = AA.COM_VVD_FLG
									) AS N3MON_INV
								, (SELECT SUM(CASE WHEN AA.SPCL_CGO_TP_CALC_CD = 'DG' THEN X.DCGO_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'RF' THEN X.RC_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'AK' THEN X.AWK_CGO_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'BB' THEN X.BB_CGO_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'BA' THEN X.AWK_BB_CGO_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'GH' THEN X.HNGR_CGO_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'CF' THEN X.CFS_CGO_QTY
													WHEN AA.DCGO_FLG = 'Y' AND AA.RC_FLG = 'Y' THEN X.DG_RC_QTY
													WHEN AA.DCGO_FLG = 'Y' AND AA.RC_FLG = 'N' THEN X.DCGO_QTY
													WHEN AA.DCGO_FLG = 'N' AND AA.RC_FLG = 'Y' THEN X.RC_QTY
														ELSE (CASE WHEN X.CNTR_TTL_QTY - NVL(X.DCGO_QTY,0) - NVL(X.RC_QTY,0) - NVL(X.DG_RC_QTY,0) < 0 THEN 0
																		ELSE X.CNTR_TTL_QTY - NVL(X.DCGO_QTY,0) - NVL(X.RC_QTY,0) - NVL(X.DG_RC_QTY,0)
															  END)
												END)
									FROM	EAS_TML_MRN_TTL_QTY X
									WHERE	X.TML_AUD_YRMON	= AA.ATB_YM
									AND		X.YD_CD			= AA.YD_CD
									AND		X.CNTR_TPSZ_CD	= (CASE WHEN AA.CNTR_STY_CD = 'F' AND SUBSTR(AA.CNTR_TPSZ_CD ,1,1) = 'R' AND NVL(AA.RC_FLG, 'N') = 'N' THEN 'D'||SUBSTR(AA.CNTR_TPSZ_CD ,2,1) ELSE AA.CNTR_TPSZ_CD END)
									AND		X.IO_BND_CD		= AA.IO_BND_CD
									AND		X.FULL_MTY_CD	= AA.CNTR_STY_CD
									AND		X.TS_FLG		LIKE (CASE WHEN AA.TS_FLG IN ('Y', 'N') THEN AA.TS_FLG ELSE '%' END)       
									AND		X.COM_VVD_FLG	= AA.COM_VVD_FLG
									) AS N3MON_TOT_VOL
								, (SELECT SUM(CASE WHEN AA.SPCL_CGO_TP_CALC_CD = 'DG' THEN X.DCGO_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'RF' THEN X.RC_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'AK' THEN X.AWK_CGO_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'BB' THEN X.BB_CGO_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'BA' THEN X.AWK_BB_CGO_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'GH' THEN X.HNGR_CGO_QTY
													WHEN AA.SPCL_CGO_TP_CALC_CD = 'CF' THEN X.CFS_CGO_QTY
													WHEN AA.DCGO_FLG = 'Y' AND AA.RC_FLG = 'Y' THEN X.DG_RC_QTY
													WHEN AA.DCGO_FLG = 'Y' AND AA.RC_FLG = 'N' THEN X.DCGO_QTY
													WHEN AA.DCGO_FLG = 'N' AND AA.RC_FLG = 'Y' THEN X.RC_QTY
														ELSE (CASE WHEN X.CNTR_TTL_QTY - NVL(X.DCGO_QTY,0) - NVL(X.RC_QTY,0) - NVL(X.DG_RC_QTY,0) < 0 THEN 0
																		ELSE X.CNTR_TTL_QTY - NVL(X.DCGO_QTY,0) - NVL(X.RC_QTY,0) - NVL(X.DG_RC_QTY,0)
															  END)
												END)
									FROM	EAS_TML_MRN_VVD_QTY X
									WHERE	X.YD_CD			= AA.YD_CD
									AND		X.CNTR_TPSZ_CD	= AA.CNTR_TPSZ_CD
									AND		X.IO_BND_CD		= AA.IO_BND_CD
									AND		X.FULL_MTY_CD	= AA.CNTR_STY_CD
									AND		X.TS_FLG		LIKE (CASE WHEN AA.TS_FLG IN ('Y', 'N') THEN AA.TS_FLG ELSE '%' END)       
									AND		X.VSL_CD		= AA.VSL_CD
									AND		X.SKD_VOY_NO	= AA.SKD_VOY_NO
									AND		X.SKD_DIR_CD	= AA.SKD_DIR_CD
									) AS VVD_VOL
								, (SELECT	COUNT(DISTINCT X.VSL_CD || X.SKD_VOY_NO)
									FROM	EAS_TML_MRN_VVD_CD X
									WHERE	X.TML_AUD_YRMON	= AA.ATB_YM
									AND		X.YD_CD			= AA.YD_CD
									AND		X.VSL_SLAN_CD   = AA.VSL_SLAN_CD
									AND		X.CNTR_STY_CD   = AA.CNTR_STY_CD
									) AS VVD_CNT
								, (SELECT	WM_CONCAT(DISTINCT X.DSCR_IND_CD)
									FROM	TES_TML_SO_CNTR_LIST X
									WHERE	X.TML_SO_OFC_CTY_CD	= AA.TML_SO_OFC_CTY_CD
									AND		X.TML_SO_SEQ		= AA.TML_SO_SEQ
									AND		X.VSL_CD			= AA.VSL_CD
									AND		X.SKD_VOY_NO		= AA.SKD_VOY_NO
									AND		X.SKD_DIR_CD		= AA.SKD_DIR_CD
									AND		X.IO_BND_CD			= AA.IO_BND_CD
									AND		X.CNTR_TPSZ_CD		= AA.CNTR_TPSZ_CD
									AND		X.CNTR_STY_CD		= AA.CNTR_STY_CD
									AND		X.LOCL_TS_IND_CD	LIKE DECODE(AA.TS_FLG, 'Y', 'T', 'N', 'L', '%')
									AND		X.RC_FLG			= AA.RC_FLG
									AND		DECODE(X.DCGO_CLSS_CD, NULL, 'N', 'N', 'N', 'Y') = AA.DCGO_FLG
									AND		(X.VRFY_RSLT_IND_CD	= 'CO' AND X.MODI_FLG = 'Y')
									AND		AA.CALC_TP_CD		= 'A'
									) AS VRFY_RSLT_CD_CTNT
								, CASE WHEN NVL(CALC_VOL_QTY,0) <> NVL(RVIS_VOL_QTY,0) THEN 1 ELSE 0 END VOL_AUD_TGT_QTY  -- 0이 아니면 심사대상  
						FROM	(
								SELECT	  D.CALC_TP_CD 
										, D.LGS_COST_CD
										, NVL(D.CNTR_TPSZ_CD,'XX') CNTR_TPSZ_CD
										, DECODE(D.DCGO_IND_CD, NULL, 'N', 'N', 'N', 'Y') DCGO_FLG
										, NVL(D.RC_FLG, 'N') AS RC_FLG
										, MAX(D.TML_WRK_DY_CD) AS TML_WRK_DY_CD
										, MAX(D.IOC_CD) AS IOC_CD
										, MAX(D.TML_TRNS_MOD_CD) AS TML_TRNS_MOD_CD
										, SUM(D.CALC_VOL_QTY) AS CALC_VOL_QTY
										, SUM(D.RVIS_VOL_QTY) AS RVIS_VOL_QTY
										, MAX(D.VOL_TR_UT_CD) AS VOL_TR_UT_CD
										, MAX(D.CTRT_RT) AS CTRT_RT
										, MAX(H.CURR_CD) CURR_CD
										, MAX(D.INV_XCH_RT) AS INV_XCH_RT
										, SUM(D.INV_AMT) AS INV_AMT
										, MAX(D.CALC_RMK) AS CALC_RMK
										, MAX(D.ATB_DT) AS ATB_DT
										, MAX(TO_CHAR(ADD_MONTHS(D.ATB_DT, -1), 'YYYYMM')) ATB_YM
										, MAX(B.CNTR_STY_CD) AS CNTR_STY_CD
										, NVL(MAX(A.TS_FLG),'A') AS TS_FLG
										, MAX(C.VSL_SLAN_CD) AS VSL_SLAN_CD
										, MAX(H.INV_CFM_DT) AS INV_CFM_DT
										, (CASE WHEN MAX(A.EXPN_AUD_TGT_FLG) = 'N' THEN NULL ELSE MAX(A.EXPN_MAX_PRMT_RTO) END) AS EXPN_MAX_PRMT_RTO
										, MAX(H.TML_INV_TP_CD) AS TML_INV_TP_CD
										, MAX(H.ISS_DT) AS ISS_DT
										, MAX(H.RHQ_OFC_CD) AS RHQ_OFC_CD
										, MAX(H.INV_OFC_CD) AS INV_OFC_CD
										, MAX(H.COST_OFC_CD) AS COST_OFC_CD
										, MAX(H.YD_CD) AS YD_CD
										, MAX(H.VNDR_SEQ) AS VNDR_SEQ
										, MAX(H.INV_NO) AS INV_NO
										, MAX(D.VSL_CD) AS VSL_CD
										, MAX(D.SKD_VOY_NO) AS SKD_VOY_NO
										, MAX(D.SKD_DIR_CD) AS SKD_DIR_CD
										, MAX(D.IO_BND_CD) AS IO_BND_CD
										, MAX(A.SPCL_CGO_TP_CALC_CD) AS SPCL_CGO_TP_CALC_CD
										, MAX(H.TML_SO_OFC_CTY_CD) AS TML_SO_OFC_CTY_CD
										, MAX(H.TML_SO_SEQ) AS TML_SO_SEQ
										, (CASE WHEN MAX(D.VSL_CD) = 'CNTC' THEN 'Y' ELSE 'N' END) AS COM_VVD_FLG
										, NVL(MAX(D.SEMI_AUTO_CALC_FLG),'N') AS SEMI_AUTO_CALC_FLG
										, MAX(B.COST_CALC_MZD_CD) AS COST_CALC_MZD_CD
								FROM	(SELECT	EAS_EXPN_AUD_PKG.GET_RHQ_OFC_CD(X.INV_OFC_CD) RHQ_OFC_CD
												, X.*
										FROM	TES_TML_SO_HDR X
										) H
										, TES_TML_SO_DTL D
										, EAS_TML_AUTO_AUD_CRTE A
										, TES_TML_SO_COST B
										, VSK_VSL_SKD     C
								WHERE	1	= 1
								AND		H.TML_SO_OFC_CTY_CD		= D.TML_SO_OFC_CTY_CD
								AND		H.TML_SO_SEQ			= D.TML_SO_SEQ
								AND		H.RHQ_OFC_CD			= A.AUD_OFC_CD
								AND		D.LGS_COST_CD			= A.LGS_COST_CD
								AND		D.LGS_COST_CD			= B.LGS_COST_CD
								AND		D.VSL_CD				= C.VSL_CD(+)
								AND		D.SKD_VOY_NO			= C.SKD_VOY_NO(+)
								AND		D.SKD_DIR_CD			= C.SKD_DIR_CD(+)
								AND		NVL(H.DELT_FLG, 'N')	<> 'Y'
								AND		H.TML_INV_STS_CD		<> 'R'
								AND		H.TML_INV_RJCT_STS_CD	<> 'RJ'
								AND		H.VNDR_SEQ				= @[vndr_seq]
								AND		H.INV_NO				= @[inv_no]
								AND		D.VSL_CD				= @[vsl_cd]
								AND		D.SKD_VOY_NO			= @[skd_voy_no]
								AND		D.SKD_DIR_CD			= @[skd_dir_cd]
								AND		D.IO_BND_CD				= @[io_bnd_cd]
								GROUP BY  D.CALC_TP_CD 
										, D.LGS_COST_CD
										, NVL(D.CNTR_TPSZ_CD, 'XX')
										, DECODE(D.DCGO_IND_CD, NULL, 'N', 'N', 'N', 'Y')
										, D.RC_FLG
		                        ) AA
		                ) AAA
		        ) AAAA
		) AAAAA
GROUP BY  INV_NO
		, VNDR_SEQ
		, VSL_CD
		, SKD_VOY_NO
		, SKD_DIR_CD
		, IO_BND_CD
		, TML_SO_OFC_CTY_CD
		, TML_SO_SEQ			]]></sql>
			<params>
				<param name="vndr_seq" type="12" value="" out="N"/>
				<param name="inv_no" type="12" value="" out="N"/>
				<param name="vsl_cd" type="12" value="" out="N"/>
				<param name="skd_voy_no" type="12" value="" out="N"/>
				<param name="skd_dir_cd" type="12" value="" out="N"/>
				<param name="io_bnd_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
