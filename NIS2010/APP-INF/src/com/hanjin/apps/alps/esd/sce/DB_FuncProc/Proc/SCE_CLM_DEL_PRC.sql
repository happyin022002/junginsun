CREATE OR REPLACE PROCEDURE SCE_CLM_DEL_PRC(NAME IN  CHAR)
AUTHID CURRENT_USER
IS
    V_LOG_SEQ         MIG_LOG.MIG_LOG_SEQ%TYPE;
    V_LOG_SEQ2         MIG_LOG.MIG_LOG_SEQ%TYPE;
    V_LOG_SEQ3         MIG_LOG.MIG_LOG_SEQ%TYPE;

    V_WORK_SEQ        MIG_LOG.WORK_SEQ%TYPE;
    V_SYS_NM          MIG_LOG.SYS_NM%TYPE;
    V_PROG_NM         MIG_LOG.PROG_NM%TYPE;
    V_OWN_NM          VARCHAR2(30);
    V_ENT_NM          MIG_LOG.ENT_NM%TYPE;
    V_TAB_NM          MIG_LOG.TAB_NM%TYPE;
    V_ACT_TP          MIG_LOG.ACT_TP%TYPE;
    
    V_INS_ROW_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    V_PRC_ROW_CNT     MIG_LOG.INS_ROW_CNT%TYPE;    
    
    V_INS_SCE_CLM_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    v_SCE_CLM_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    
    V_INS_SCE_CLM_IF_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    V_SCE_CLM_IF_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    
    V_INS_PROD_CTL_QTY_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    V_PRC_PROD_CTL_QTY_CNT     MIG_LOG.INS_ROW_CNT%TYPE;  
     
    V_INS_BKG_COP_MAP_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    V_PRC_BKG_COP_MAP_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    
    V_INS_PROD_CTL_VAL_CHK_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    V_PRC_PROD_CTL_VAL_CHK_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    
    V_INS_SCE_COP_HDR_CNT     MIG_LOG.INS_ROW_CNT%TYPE;
    V_SCE_COP_HDR_CNT     MIG_LOG.INS_ROW_CNT%TYPE;  
       
    V_LOG_MSG         MIG_LOG.LOG_MSG%TYPE;
    V_LOG_MSG_MAIN    MIG_LOG.LOG_MSG%TYPE;
    V_AUTHOR_NM       MIG_LOG.AUTHOR_NM%TYPE;
    V_WORK_GRP_ID     MIG_LOG.WORK_GRP_ID%TYPE;
    V_SUB_STEP_DESC   MIG_LOG_SUB_STEP.SUB_STEP_DESC%TYPE;
    V_LOG_SUB_SEQ     MIG_LOG_SUB_STEP.MIG_LOG_SUB_SEQ%TYPE;

    V_ERRNO           MIG_LOG.ERR_TP%TYPE;
    V_ERRMSG          MIG_LOG.LOG_MSG%TYPE;
    V_ERRNO_SUB_STEP  MIG_LOG_SUB_STEP.ERR_TP%TYPE;

    ARRAY_SIZE  CONSTANT NUMBER := 10000;
    TYPE ARRAY_CNTR_NO IS VARRAY(10000) OF VARCHAR2(100);
    TYPE ARRAY_CNMV_YR IS VARRAY(10000) OF VARCHAR2(100);
    TYPE ARRAY_CNMV_ID_NO IS VARRAY(10000) OF VARCHAR2(100);
    TYPE ARRAY_CLM_SEQ IS VARRAY(10000) OF VARCHAR2(100);
    
    VA_CNTR_NO  ARRAY_CNTR_NO;
    VA_CNMV_YR  ARRAY_CNMV_YR;
    VA_CNMV_ID_NO  ARRAY_CNMV_ID_NO;
    VA_CLM_SEQ  ARRAY_CLM_SEQ;
    
    I           NUMBER;

    /*
     * SCE Purge대상테이블 중 Master 테이블의 키인 SCE_COP_HDR.COP_NO 가
     * SCE PURGE Delete이후 SCE에서 참조하지 않는 것만 선택적으로 삭제한다.
     */
    CURSOR CLM_KEY_CUR IS
          SELECT CNTR_NO, CNMV_YR, CNMV_ID_NO,  CLM_SEQ
          FROM PUG_CLM_NO
          ;

BEGIN

    V_WORK_SEQ      := 2;
          
    V_SYS_NM        := 'SCE';
    V_PROG_NM       := 'SCE PURGE';
    V_OWN_NM        := 'NISADM';
    V_ENT_NM        := 'SCE';
    V_TAB_NM        := 'SCE_CLM_IF';
    V_INS_ROW_CNT   := 0;
    V_LOG_MSG       := '';
    V_LOG_MSG_MAIN  := '';
    V_ERRNO         := '';
    V_WORK_GRP_ID   := '${WORK_GRP_ID}';
--        
    -- LOG START
    MIG_UTL_PURGE.PRC_MIG_PGM_LOG (
        I_LOG_MODE => 'LOG_START',  I_LOG_SEQ => NULL,      I_WORK_SEQ => V_WORK_SEQ,   I_SYS_NM => V_SYS_NM,       I_PROG_NM=> V_PROG_NM,
        I_ENT_NM => V_ENT_NM,       I_TAB_NM => 'SCE_CLM',   I_ACT_TP   => 'D',          I_INS_ROW_CNT => 0,         I_LOG_MSG => V_LOG_MSG_MAIN,
        I_AUTHOR_NM => V_AUTHOR_NM, O_LOG_SEQ => V_LOG_SEQ2, O_ERRNO => V_ERRNO,         O_ERRMSG => V_ERRMSG,       I_WORK_GRP_ID => V_WORK_GRP_ID);


        
         V_SUB_STEP_DESC := 'DATA_PURGE';    
    

    OPEN CLM_KEY_CUR;
    LOOP
        FETCH CLM_KEY_CUR BULK COLLECT INTO VA_CNTR_NO, VA_CNMV_YR, VA_CNMV_ID_NO, VA_CLM_SEQ  LIMIT ARRAY_SIZE;
        
        -- SUB STEP LOG START
            MIG_UTL_PURGE.PRC_MIG_PGM_LOG_SUB_STEP (
               I_LOG_MODE => 'LOG_START',      I_LOG_SEQ => V_LOG_SEQ,      I_LOG_SUB_SEQ => NULL,  I_SUB_STEP_DESC => V_SUB_STEP_DESC,
               I_ACT_TP   => 'D',              I_PRC_ROW_CNT => 0,          I_LOG_MSG => NULL,
               O_LOG_SUB_SEQ => V_LOG_SUB_SEQ, O_ERRNO => V_ERRNO_SUB_STEP, O_ERRMSG => V_ERRMSG );
                       

        FORALL I IN VA_CNTR_NO.FIRST..VA_CNTR_NO.LAST
            DELETE SCE_CLM    WHERE CNTR_NO = VA_CNTR_NO(I) AND CNMV_YR = VA_CNMV_YR(I) AND CNMV_ID_NO = VA_CNMV_ID_NO(I) AND CLM_SEQ = VA_CLM_SEQ(I); -- 20
            DBMS_OUTPUT.PUT_LINE('[' ||  SQL%ROWCOUNT  || '] 1 ');
            v_SCE_CLM_CNT := SQL%ROWCOUNT;
            V_INS_SCE_CLM_CNT := V_INS_SCE_CLM_CNT + v_SCE_CLM_CNT;
          COMMIT;  
            -- SUB STEP LOG FINISH
            MIG_UTL_PURGE.PRC_MIG_PGM_LOG_SUB_STEP (
               I_LOG_MODE => 'LOG_FINISH',     I_LOG_SEQ => V_LOG_SEQ,      I_LOG_SUB_SEQ => V_LOG_SUB_SEQ,  I_SUB_STEP_DESC => V_SUB_STEP_DESC,
               I_PRC_ROW_CNT => v_SCE_CLM_CNT, I_LOG_MSG => V_LOG_MSG,    
               O_LOG_SUB_SEQ => V_LOG_SUB_SEQ, O_ERRNO => V_ERRNO_SUB_STEP, O_ERRMSG => V_ERRMSG  );
                       
--               
        EXIT WHEN CLM_KEY_CUR%NOTFOUND;
    END LOOP;


    -- LOG FINISH
    MIG_UTL_PURGE.PRC_MIG_PGM_LOG (
        I_LOG_MODE => 'LOG_FINISH', I_LOG_SEQ => V_LOG_SEQ, I_WORK_SEQ => V_WORK_SEQ,       I_SYS_NM => V_SYS_NM,       I_PROG_NM=> V_PROG_NM,
        I_ENT_NM => V_ENT_NM,       I_TAB_NM =>  'SCE_CLM',   I_INS_ROW_CNT => V_INS_SCE_CLM_CNT, I_LOG_MSG => V_LOG_MSG_MAIN,     I_AUTHOR_NM => V_AUTHOR_NM,
        O_LOG_SEQ => V_LOG_SEQ,     O_ERRNO => V_ERRNO,     O_ERRMSG => V_ERRMSG );
   
    V_INS_ROW_CNT := 0;   -- SUB STEP PROCESS COUNT CLEAR
    
    COMMIT;
    CLOSE CLM_KEY_CUR;
EXCEPTION WHEN OTHERS THEN
    CLOSE CLM_KEY_CUR;
    COMMIT;
END;
/
