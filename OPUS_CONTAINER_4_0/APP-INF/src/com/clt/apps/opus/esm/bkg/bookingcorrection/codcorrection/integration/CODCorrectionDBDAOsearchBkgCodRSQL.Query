<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="CODCorrectionDBDAOsearchBkgCodRSQL">
			<desc><![CDATA[bkg_cod을 조회한다.]]></desc>
			<sql><![CDATA[
#if(${pctl_no}=='')
select bk.bkg_no
        , bk.bl_no
        , bk.bl_tp_cd
        , cod.cod_sts_cd        cod_status
        , nvl(cod.cod_rqst_seq, nvl(@[codRqstSeq], 1)) seq
		, (select max(cod_rqst_seq) from bkg_cod seq where seq.bkg_no = cod.bkg_no) max_seq
        , cod.cod_auth_flg      arrpoval
        , rgn_cd                approval_rso
        , cod.cod_rqst_rsn_cd   cod_reason
        , diff_rmk              cod_remark
        , cod.cod_rhnd_port_cd||substr(cod.cod_rhnd_port_yd_cd, 6, 2) rehandling_port
        , cod.cod_rjct_cd       reject_reason_code
        , cod.cod_rjct_rsn_rmk  reject_reason_remark
		, cod.cod_mnl_flg 
        , cod.pctl_no 
        , nvl(substr(cod.old_por_yd_cd, 1, 5), bk.por_cd)                   old_por_cd
        , nvl(substr(cod.old_por_yd_cd, 6, 2), substr(bk.por_nod_cd, 6, 2)) old_por_nod_cd
        , nvl(substr(cod.old_pol_yd_cd, 1, 5), bk.pol_cd)                   old_pol_cd
        , nvl(substr(cod.old_pol_yd_cd, 6, 2), substr(bk.pol_nod_cd, 6, 2)) old_pol_nod_cd
        , nvl(substr(cod.old_pod_yd_cd, 1, 5), bk.pod_cd)                   old_pod_cd
        , nvl(substr(cod.old_pod_yd_cd, 6, 2), substr(bk.pod_nod_cd, 6, 2)) old_pod_nod_cd
        , nvl(substr(cod.old_del_yd_cd, 1, 5), bk.del_cd)                   old_del_cd
        , nvl(substr(cod.old_del_yd_cd, 6, 2), substr(bk.del_nod_cd, 6, 2)) old_del_nod_cd
		, nvl(cod.old_de_term_cd, bk.de_term_cd) old_de_term_cd
		, case when cod.old_pol_yd_cd is null             then substr(bk.pre_rly_port_cd, 1, 5) --bkg_cod 생성 전 bkg의  relay port
		       when cod.old_pol_yd_cd = old_VVD.POL_YD_CD then null								--t/s 없는 경우
		       else substr(old_VVD.POL_YD_CD, 1, 5) end old_pre_cd								--trunk의 loading 
		, case when cod.old_pol_yd_cd is null             then substr(bk.pre_rly_port_cd, 6, 2)
		       when cod.old_pol_yd_cd = old_VVD.POL_YD_CD then null
		       else substr(old_VVD.POL_YD_CD, 6, 2) end old_pre_nod_cd
		, case when cod.old_pod_yd_cd is null             then substr(bk.pst_rly_port_cd, 1, 5)
		       when cod.old_pod_yd_cd = old_VVD.POd_YD_CD then null
		       else substr(old_VVD.POd_YD_CD, 1, 5) end old_pst_cd
		, case when cod.old_pod_yd_cd is null             then substr(bk.pst_rly_port_cd, 6, 2)
		       when cod.old_pod_yd_cd = old_VVD.Pod_YD_CD then null
		       else substr(old_VVD.POd_YD_CD, 6, 2) end old_pst_nod_cd
        , nvl(cod.old_vsl_cd||cod.old_skd_voy_no||cod.old_skd_dir_cd, bk.vsl_cd||bk.skd_voy_no||bk.skd_dir_cd) old_tvvd
        , substr(cod.new_por_yd_cd, 1, 5) new_por_cd
        , substr(cod.new_por_yd_cd, 6, 2) new_por_nod_cd
        , substr(cod.new_pol_yd_cd, 1, 5) new_pol_cd
        , substr(cod.new_pol_yd_cd, 6, 2) new_pol_nod_cd
        , substr(cod.new_pod_yd_cd, 1, 5) new_pod_cd
        , substr(cod.new_pod_yd_cd, 6, 2) new_pod_nod_cd
        , substr(cod.new_del_yd_cd, 1, 5) new_del_cd
        , substr(cod.new_del_yd_cd, 6, 2) new_del_nod_cd
		, cod.new_de_term_cd
		, substr(DECODE(cod.new_pol_yd_cd, NEW_VVD.POL_YD_CD, NULL, NEW_VVD.POL_YD_CD), 1, 5) new_pre_cd
		, substr(DECODE(cod.new_pol_yd_cd, NEW_VVD.POL_YD_CD, NULL, NEW_VVD.POL_YD_CD), 6, 2) new_pre_nod_cd
		, substr(DECODE(cod.new_poD_yd_cd, NEW_VVD.POD_YD_CD, NULL, NEW_VVD.POD_YD_CD), 1, 5) new_pst_cd
		, substr(DECODE(cod.new_poD_yd_cd, NEW_VVD.POD_YD_CD, NULL, NEW_VVD.POD_YD_CD), 6, 2) new_pst_nod_cd
        , cod.new_vsl_cd||cod.new_skd_voy_no||cod.new_skd_dir_cd    new_tvvd
        , bk.bkg_sts_cd 
        , bl.bdr_flg
        , nvl((select '1'
                 from bkg_cod pre_cod
                where cod.bkg_no         = pre_cod.bkg_no
                  and cod.cod_rqst_seq   > pre_cod.cod_rqst_seq 
                  and pre_cod.cod_sts_cd in ('R', 'W', 'Y')
                  and rownum             = 1
              ), '0') cannot_confirm_flg    
		, (select count(1) from bkg_cod where bkg_no = @[bkgNo]) cod_cnt   
  from bkg_cod cod
        , bkg_cod_vvd new_vvd
        , bkg_cod_vvd old_vvd
        , bkg_booking bk
        , bkg_bl_doc bl
 where bk.bkg_no = bl.bkg_no 
 and bk.bkg_no   = cod.bkg_no(+)
	#if(${codRqstSeq} !='')
	   and @[codRqstSeq] = cod.cod_rqst_seq(+)
	#end
	   and bk.bkg_no   = new_vvd.bkg_no(+)
	#if(${codRqstSeq} !='')
	   and @[codRqstSeq] = new_vvd.cod_rqst_seq(+)
	#end
	   and 'N'         = new_vvd.vvd_op_cd(+) 
	   and 'T'         = new_vvd.vsl_pre_pst_cd(+)
	   and bk.bkg_no   = old_vvd.bkg_no(+)
	#if(${codRqstSeq} !='')
	   and @[codRqstSeq] = old_vvd.cod_rqst_seq(+)
	#end
	   and 'O'         = old_vvd.vvd_op_cd(+)
	   and 'T'         = old_vvd.vsl_pre_pst_cd(+)
	#if(${bkgNo} !='')
	   and bk.bkg_no   = @[bkgNo]
	#end
#else
select    substr(mst.pod_nod_cd, 1, 5) new_pod_cd
        , substr(mst.pod_nod_cd, 6, 2) new_pod_nod_cd
        , substr(mst.del_nod_cd, 1, 5) new_del_cd
        , substr(mst.del_nod_cd, 6, 2) new_del_nod_cd
		, mst.bkg_de_term_cd new_de_term_cd
		, decode(mst.pol_nod_cd, trunk.ORG_NOD_CD,  '', SUBSTR(trunk.ORG_NOD_CD,  1, 5)) new_pre_cd
		, decode(mst.pol_nod_cd, trunk.ORG_NOD_CD,  '', SUBSTR(trunk.ORG_NOD_CD,  6, 2)) new_pre_nod_cd
		, decode(mst.pod_nod_cd, trunk.DEST_NOD_CD, '', SUBSTR(trunk.DEST_NOD_CD, 1, 5)) new_pst_cd
		, decode(mst.pod_nod_cd, trunk.DEST_NOD_CD, '', SUBSTR(trunk.DEST_NOD_CD, 6, 2)) new_pst_nod_cd
        , trnk_vsl_cd||trnk_skd_voy_no||trnk_skd_dir_cd    new_tvvd
  from prd_prod_ctl_mst  mst
      , prd_prod_ctl_rout_dtl trunk
 where mst.pctl_no       = trunk.pctl_no
   and trunk.TRSP_MOD_CD in ('VD', 'WD')
   and trunk.vsl_cd      = mst.trnk_vsl_cd
   and trunk.skd_voy_no  = mst.trnk_skd_voy_no 
   and trunk.skd_dir_cd  = mst.trnk_skd_dir_cd
   and mst.pctl_no       = @[pctl_no]
#end			]]></sql>
			<params>
				<param name="codRqstSeq" type="12" value="1" out="N"/>
				<param name="bkgNo" type="12" value="NYCX3090060" out="N"/>
				<param name="pctl_no" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
