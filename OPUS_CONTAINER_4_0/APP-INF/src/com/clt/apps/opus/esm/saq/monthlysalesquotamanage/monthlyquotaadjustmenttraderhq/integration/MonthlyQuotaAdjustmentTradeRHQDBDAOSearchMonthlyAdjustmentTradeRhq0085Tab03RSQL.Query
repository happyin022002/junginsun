<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="MonthlyQuotaAdjustmentTradeRHQDBDAOSearchMonthlyAdjustmentTradeRhq0085Tab03RSQL">
			<desc><![CDATA[MonthlyQuotaAdjustmentTradeRHQ의 상단 TAB Lane의 데이타 모델에 해당되는 값을 불러온다.
2011.02.15 김종준 [T-선사] YEARLY QTA 부분 삭제]]></desc>
			<sql><![CDATA[
WITH TMP_INPUT_PARMAS AS
    (SELECT
            @[year] AS BSE_YR,
            @[bse_quarter] AS BSE_QTR_CD,
            @[bef_yr_qtr] AS BEF_YR_QTR,
            TO_CHAR(ADD_MONTHS(TO_DATE(@[year]||DECODE(@[bse_quarter],'1Q','01','2Q','04','3Q','07','4Q','10'), 'YYYYMM'), -1), 'YYYYMM') AS BEF_YR_MON,
            TO_CHAR(ADD_MONTHS(TO_DATE(@[year]||DECODE(@[bse_quarter],'1Q','01','2Q','04','3Q','07','4Q','10'), 'YYYYMM'), 1), 'YYYYMM') AS ADD1_YR_MON,
            TO_CHAR(ADD_MONTHS(TO_DATE(@[year]||DECODE(@[bse_quarter],'1Q','01','2Q','04','3Q','07','4Q','10'), 'YYYYMM'), 2), 'YYYYMM') AS ADD2_YR_MON,
            @[pfmc_fr_yr_mon] AS PFMC_FR_YR_MON,
            @[pfmc_to_yr_mon] AS PFMC_TO_YR_MON,
            @[pfmc_fr_yr_qtr] AS PFMC_FR_YR_QTR,
            @[pfmc_to_yr_qtr] AS PFMC_TO_YR_QTR,
            @[bound] AS DIR_CD,
            @[trade] AS TRD_CD,
            @[slsFcastPubNo] AS SLS_FCAST_PUB_NO,
            @[mqtaMdlVerNo] AS MQTA_MDL_VER_NO,
            @[glineVerNo] AS GLINE_VER_NO,
            @[mQtaVerNo] AS MQTA_VER_NO,
            @[ctrt_rhq_cd] AS CTRT_RHQ_CD
     FROM   DUAL )
SELECT
    MIN(UNI.KEY) AS KEY,
    UNI.SLEVEL,
    UNI.CTRT_RHQ_CD,
    UNI.SUB_TRD_CD,
    CASE WHEN UNI.SUB_TRD_CD = 'TOTAL' AND UNI.RLANE_CD = 'TOTAL'
        THEN ' ' ELSE DECODE(DIR.DIR_CD,'',UNI.RLANE_CD,UNI.RLANE_CD||' - '||DIR.DIR_CD) END AS RLANE_CD,
    DIR.DIR_CD CONV_DIR_CD,
    ITM.ROW_SEQ,
    REPLACE(ITM.TEXT, '(P)','') AS ITEM_TEXT,
    DECODE( ITM.CODE,
             '05', REPLACE(ITM.TEXT, '(P)','')||'*', -- G.REV
             '07', REPLACE(ITM.TEXT, '(P)','')||'*', -- CM
             '08', REPLACE(ITM.TEXT, '(P)','')||'*', -- CM
             '11', REPLACE(ITM.TEXT, '(P)','')||'*', -- OP
             '12', REPLACE(ITM.TEXT, '(P)','')||'*', -- OP
             REPLACE(ITM.TEXT, '(P)','') ) AS ITEM,
    MIN(CASE WHEN UNI.GUBUN = 'PFMC_QTA' AND UNI.MON_SEQ = '0' THEN
        DECODE( ITM.CODE,
                 '02', UNI.TOT_VOY,
                 '03', UNI.TOT_LOD,
                 '05', UNI.TOT_REV/1000,
                 '06', UNI.TOT_RPB,
                 '07', UNI.TOT_CM/1000,
                 '08', UNI.TOT_RA_CM/1000,
                 '09', UNI.TOT_CMB,
                 '10', UNI.TOT_RA_CMB,
                 '11', UNI.TOT_OP/1000,
                 '12', UNI.TOT_RA_OP/1000,
                 '13', UNI.TOT_OPB,
                 '14', UNI.TOT_RA_OPB )
        END) AS PFMC_QTA,
    MIN(CASE WHEN UNI.GUBUN = 'PFMC_SMR' AND UNI.MON_SEQ = '0' THEN
        DECODE( ITM.CODE,
                 '02', UNI.TOT_VOY,
                 '03', UNI.TOT_LOD,
                 '05', UNI.TOT_REV/1000,
                 '06', UNI.TOT_RPB,
                 '07', UNI.TOT_CM/1000,
                 '08', UNI.TOT_RA_CM/1000,
                 '09', UNI.TOT_CMB,
                 '10', UNI.TOT_RA_CMB,
                 '11', UNI.TOT_OP/1000,
                 '12', UNI.TOT_RA_OP/1000,
                 '13', UNI.TOT_OPB,
                 '14', UNI.TOT_RA_OPB )
        END) AS PFMC_SMR,
    MIN(CASE WHEN UNI.GUBUN = 'MONTHLY' AND UNI.MON_SEQ = '0' THEN
        DECODE( ITM.CODE,
                 '02', UNI.TOT_VOY,
                 '03', UNI.TOT_LOD,
                 '05', UNI.TOT_REV/1000,
                 '06', UNI.TOT_RPB,
                 '07', UNI.TOT_CM/1000,
                 '08', UNI.TOT_RA_CM/1000,
                 '09', UNI.TOT_CMB,
                 '10', UNI.TOT_RA_CMB,
                 '11', UNI.TOT_OP/1000,
                 '12', UNI.TOT_RA_OP/1000,
                 '13', UNI.TOT_OPB,
                 '14', UNI.TOT_RA_OPB )
        END) AS RECENT_MON,

    DECODE( ITM.CODE,
                '02', SUM( DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_VOY,0)),
                '03', SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_LOD,0)),
                '05', SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_REV,0))/1000,
                '06', DECODE(SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_REV,0))/SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_LOD,0))),
                '07', SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_CM,0))/1000,
                '08', 0,
                '09', DECODE(SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_CM,0))/SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_LOD,0))),
                '10', 0,
                '11', SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_OP,0))/1000,
                '12', SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_RA_OP,0))/1000,
                '13', DECODE(SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_OP,0))/SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_LOD,0))),
                '14', DECODE(SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_RA_OP,0))/SUM(DECODE(UNI.GUBUN , 'FORECAST',UNI.TOT_LOD,0)))
    )
    AS FORECAST_TOT,
    DECODE( ITM.CODE,
                '02', SUM( DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_VOY,0)),
                '03', SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0)),
                '05', SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_REV,0))/1000,
                '06', DECODE(SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_REV,0))/SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0))),
                '07', SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_CM,0))/1000,
                '08', SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_RA_CM,0))/1000,
                '09', DECODE(SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_CM,0))/SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0))),
                '10', DECODE(SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_RA_CM,0))/SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0))),
                '11', SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_OP,0))/1000,
                '12', SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_RA_OP,0))/1000,
                '13', DECODE(SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_OP,0))/SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0))),
                '14', DECODE(SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_RA_OP,0))/SUM(DECODE(UNI.GUBUN , 'MODEL',UNI.TOT_LOD,0)))
    )
    AS MODEL_TOT,

    DECODE( ITM.CODE,
                '02', SUM( DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_VOY,0)),
                '03', SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0)),
                '05', SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_REV,0))/1000,
                '06', DECODE(SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_REV,0))/SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0))),
                '07', SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_CM,0))/1000,
                '08', SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_RA_CM,0))/1000,
                '09', DECODE(SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_CM,0))/SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0))),
                '10', DECODE(SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_RA_CM,0))/SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0))),
                '11', SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_OP,0))/1000,
                '12', SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_RA_OP,0))/1000,
                '13', DECODE(SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_OP,0))/SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0))),
                '14', DECODE(SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_RA_OP,0))/SUM(DECODE(UNI.GUBUN , 'TRADE',UNI.TOT_LOD,0)))
    )
    AS TRADE_TOT,
    DECODE( ITM.CODE,
                '02', SUM( DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_VOY,0)),
                '03', SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0)),
                '05', SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_REV,0))/1000,
                '06', DECODE(SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_REV,0))/SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0))),
                '07', SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_CM,0))/1000,
                '08', SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_RA_CM,0))/1000,
                '09', DECODE(SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_CM,0))/SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0))),
                '10', DECODE(SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_RA_CM,0))/SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0))),
                '11', SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_OP,0))/1000,
                '12', SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_RA_OP,0))/1000,
                '13', DECODE(SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_OP,0))/SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0))),
                '14', DECODE(SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_RA_OP,0))/SUM(DECODE(UNI.GUBUN , 'RHQ',UNI.TOT_LOD,0)))
    )
    AS RHQ_TOT,
    DECODE( ITM.CODE,
                '02', SUM( DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_VOY,0)),
                '03', SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0)),
                '05', SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_REV,0))/1000,
                '06', DECODE(SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_REV,0))/SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0))),
                '07', SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_CM,0))/1000,
                '08', SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_RA_CM,0))/1000,
                '09', DECODE(SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_CM,0))/SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0))),
                '10', DECODE(SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_RA_CM,0))/SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0))),
                '11', SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_OP,0))/1000,
                '12', SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_RA_OP,0))/1000,
                '13', DECODE(SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_OP,0))/SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0))),
                '14', DECODE(SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_RA_OP,0))/SUM(DECODE(UNI.GUBUN , 'FINAL',UNI.TOT_LOD,0)))
    )
    AS FINAL_TOT,
    DECODE( ITM.CODE,
                '02',  SUM( DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_VOY,0)),
                '03', SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0)),
                '05', SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_REV,0))/1000,
                '06', DECODE(SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_REV,0))/SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0))),
                '07', SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_CM,0))/1000,
                '08', SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_RA_CM,0))/1000,
                '09', DECODE(SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_CM,0))/SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0))),
                '10', DECODE(SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_RA_CM,0))/SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0))),
                '11', SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_OP,0))/1000,
                '12', SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_RA_OP,0))/1000,
                '13', DECODE(SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_OP,0))/SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0))),
                '14', DECODE(SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0)),0,0,  SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_RA_OP,0))/SUM(DECODE(UNI.GUBUN , 'ADJUSTED',UNI.TOT_LOD,0)))
    )
    AS ADJUSTED_TOT

#foreach( $key in ${monthseq})
    ,MIN(CASE WHEN UNI.GUBUN = 'FORECAST' AND UNI.MON_SEQ = $key THEN
        DECODE( ITM.CODE,
                 '02', UNI.TOT_VOY,
                 '03', UNI.TOT_LOD,
                 '05', UNI.TOT_REV/1000,
                 '06', UNI.TOT_RPB,
                 '07', UNI.TOT_CM/1000,
                 '08', 0,
                 '09', UNI.TOT_CMB,
                 '10', 0,
                 '11', UNI.TOT_OP/1000,
                 '12', UNI.TOT_RA_OP/1000,
                 '13', UNI.TOT_OPB,
                 '14', UNI.TOT_RA_OPB )
        END) AS FCAST_$key,
    MIN(CASE WHEN UNI.GUBUN = 'MODEL' AND UNI.MON_SEQ = $key THEN
        DECODE( ITM.CODE,
                 '02', UNI.TOT_VOY,
                 '03', UNI.TOT_LOD,
                 '05', UNI.TOT_REV/1000,
                 '06', UNI.TOT_RPB,
                 '07', UNI.TOT_CM/1000,
                 '08', UNI.TOT_RA_CM/1000,
                 '09', UNI.TOT_CMB,
                 '10', UNI.TOT_RA_CMB,
                 '11', UNI.TOT_OP/1000,
                 '12', UNI.TOT_RA_OP/1000,
                 '13', UNI.TOT_OPB,
                 '14', UNI.TOT_RA_OPB )
        END) AS MDL_RST_$key,
    MIN(CASE WHEN UNI.GUBUN = 'TRADE' AND UNI.MON_SEQ = $key THEN
        DECODE( ITM.CODE,
                 '02', UNI.TOT_VOY,
                 '03', UNI.TOT_LOD,
                 '05', UNI.TOT_REV/1000,
                 '06', UNI.TOT_RPB,
                 '07', UNI.TOT_CM/1000,
                 '08', UNI.TOT_RA_CM/1000,
                 '09', UNI.TOT_CMB,
                 '10', UNI.TOT_RA_CMB,
                 '11', UNI.TOT_OP/1000,
                 '12', UNI.TOT_RA_OP/1000,
                 '13', UNI.TOT_OPB,
                 '14', UNI.TOT_RA_OPB )
        END) AS TRADE_$key,
    MIN(CASE WHEN UNI.GUBUN = 'RHQ' AND UNI.MON_SEQ = $key THEN
        DECODE( ITM.CODE,
                 '02', UNI.TOT_VOY,
                 '03', UNI.TOT_LOD,
                 '05', UNI.TOT_REV/1000,
                 '06', UNI.TOT_RPB,
                 '07', UNI.TOT_CM/1000,
                 '08', UNI.TOT_RA_CM/1000,
                 '09', UNI.TOT_CMB,
                 '10', UNI.TOT_RA_CMB,
                 '11', UNI.TOT_OP/1000,
                 '12', UNI.TOT_RA_OP/1000,
                 '13', UNI.TOT_OPB,
                 '14', UNI.TOT_RA_OPB )
        END) AS RHQ_$key,
    MIN(CASE WHEN UNI.GUBUN = 'FINAL' AND UNI.MON_SEQ = $key THEN
        DECODE( ITM.CODE,
                 '02', UNI.TOT_VOY,
                 '03', UNI.TOT_LOD,
                 '05', UNI.TOT_REV/1000,
                 '06', UNI.TOT_RPB,
                 '07', UNI.TOT_CM/1000,
                 '08', UNI.TOT_RA_CM/1000,
                 '09', UNI.TOT_CMB,
                 '10', UNI.TOT_RA_CMB,
                 '11', UNI.TOT_OP/1000,
                 '12', UNI.TOT_RA_OP/1000,
                 '13', UNI.TOT_OPB,
                 '14', UNI.TOT_RA_OPB )
        END) AS FINAL_$key,
    MIN(CASE WHEN UNI.GUBUN = 'ADJUSTED' AND UNI.MON_SEQ = $key THEN
        DECODE( ITM.CODE,
                 '02', UNI.TOT_VOY,
                 '03', UNI.TOT_LOD,
                 '05', UNI.TOT_REV/1000,
                 '06', UNI.TOT_RPB,
                 '07', UNI.TOT_CM/1000,
                 '08', UNI.TOT_RA_CM/1000,
                 '09', UNI.TOT_CMB,
                 '10', UNI.TOT_RA_CMB,
                 '11', UNI.TOT_OP/1000,
                 '12', UNI.TOT_RA_OP/1000,
                 '13', UNI.TOT_OPB,
                 '14', UNI.TOT_RA_OPB )
        END) AS ADJUSTED_$key
#end

FROM (
    SELECT  INTG_CD_VAL_CTNT AS CODE,
            INTG_CD_VAL_DP_DESC AS TEXT,
            INTG_CD_VAL_DP_SEQ AS ROW_SEQ
    FROM  COM_INTG_CD_DTL
    WHERE INTG_CD_ID = 'CD01388'
    ) ITM, (
    SELECT -- Performance Quota
           QTA.GUBUN,
           QTA.KEY,
           QTA.SLEVEL,
           QTA.CTRT_RHQ_CD,
           QTA.SUB_TRD_CD,
           QTA.RLANE_CD,
           QTA.MON_SEQ,
           QTA.BSE_MON,
           QTA.TOT_VOY,
           QTA.TOT_LOD,
           QTA.TOT_REV,
           QTA.TOT_RPB,
           QTA.TOT_CM,
           QTA.TOT_RA_CM,
           QTA.TOT_CMB,
           QTA.TOT_RA_CMB,
           QTA.TOT_OP ,
           QTA.TOT_RA_OP,
           QTA.TOT_OPB ,
           QTA.TOT_RA_OPB
    FROM   TMP_INPUT_PARMAS INP, (
    			SELECT -- Performance Quota
        			   'PFMC_QTA' AS GUBUN,
        			   NVL(DIR.CONV_DIR_CD, QTA.DIR_CD) DIR_CD,
        			   MIN(QTA.RHQ_CD||VVD.SUB_TRD_CD||DECODE(QTA.RLANE_CD,'RBCCO','ZZ',SUBSTR(QTA.RLANE_CD,-2))||QTA.RLANE_CD) AS KEY,
        			   DECODE(VVD.SUB_TRD_CD, '', '1',
           		      DECODE(QTA.RLANE_CD, '', '2', '3'))
            			     AS SLEVEL,
        			   DECODE(GROUPING(QTA.RHQ_CD), 1, 'TOTAL', QTA.RHQ_CD) AS CTRT_RHQ_CD,
        			   DECODE(GROUPING(VVD.SUB_TRD_CD), 1, 'TOTAL', VVD.SUB_TRD_CD) AS SUB_TRD_CD,
        			   DECODE(GROUPING(QTA.RLANE_CD), 1, 'TOTAL', QTA.RLANE_CD) AS RLANE_CD,
        			   '0' AS MON_SEQ,
        			   '00' AS BSE_MON,
        			   COUNT(DISTINCT QTA.VSL_CD||QTA.SKD_VOY_NO||QTA.SKD_DIR_CD) AS TOT_VOY,
        			   SUM(QTA.LOD_QTY         ) AS TOT_LOD,
        			   SUM(QTA.GRS_RPB_REV*QTA.LOD_QTY) AS TOT_REV ,
        			   SUM(QTA.GRS_RPB_REV*QTA.LOD_QTY)/SUM(QTA.LOD_QTY) AS TOT_RPB ,
        			   SUM((QTA.GRS_RPB_REV-QTA.CM_UC_AMT)*QTA.LOD_QTY) AS TOT_CM ,
        			   SUM((QTA.GRS_RPB_REV-QTA.RA_CM_UC_AMT)*QTA.LOD_QTY) AS TOT_RA_CM ,
        			   SUM((QTA.GRS_RPB_REV-QTA.CM_UC_AMT)*QTA.LOD_QTY)/SUM(QTA.LOD_QTY) AS TOT_CMB,
        			   SUM((QTA.GRS_RPB_REV-QTA.RA_CM_UC_AMT)*QTA.LOD_QTY)
            			   /SUM(QTA.LOD_QTY) AS TOT_RA_CMB ,
        			   SUM((QTA.GRS_RPB_REV-QTA.OPFIT_UC_AMT)*QTA.LOD_QTY    ) AS TOT_OP ,
        			   SUM((QTA.GRS_RPB_REV-QTA.RA_OPFIT_UC_AMT)*QTA.LOD_QTY ) AS TOT_RA_OP,
        			   SUM((QTA.GRS_RPB_REV-QTA.OPFIT_UC_AMT)*QTA.LOD_QTY    )
            			   /SUM(QTA.LOD_QTY) AS TOT_OPB ,
        			   SUM((QTA.GRS_RPB_REV-QTA.RA_OPFIT_UC_AMT)*QTA.LOD_QTY )
            			   /SUM(QTA.LOD_QTY) AS TOT_RA_OPB
    			FROM  (
            			SELECT DISTINCT
                   			RLS.MQTA_RLSE_VER_NO AS MQTA_RLSE_VER_NO,
                   			RLS.BSE_QTR_CD AS BSE_QTR_CD
            			FROM   	SAQ_MON_QTA_RLSE RLS,
                   			TMP_INPUT_PARMAS INP
                		WHERE  RLS.BSE_YR||RLS.BSE_QTR_CD BETWEEN INP.PFMC_FR_YR_QTR
                                                  	  AND     INP.PFMC_TO_YR_QTR
            			AND    RLS.QTA_RLSE_STS_CD = 'R'
          		  ) RLS,
          		  TMP_INPUT_PARMAS    INP,
          		  SAQ_MON_DIR_CONV    DIR,
          		  SAQ_MON_CFM_QTA     QTA ,
          		  SAQ_MON_CFM_TGT_VVD VVD
    			WHERE QTA.MQTA_RLSE_VER_NO = RLS.MQTA_RLSE_VER_NO
    			AND   QTA.BSE_QTR_CD = RLS.BSE_QTR_CD
    			AND   QTA.TRD_CD = INP.TRD_CD
    			AND   QTA.RHQ_CD = INP.CTRT_RHQ_CD
    			AND   QTA.BSE_YR||QTA.BSE_MON BETWEEN PFMC_FR_YR_MON AND PFMC_TO_YR_MON
    			AND   QTA.LOD_QTY > 0
    			AND   QTA.QTA_TGT_CD = 'Q' -- Q : Sales Quota, T : Load Target
    			AND   QTA.BSE_YR = VVD.BSE_YR
    			AND   QTA.BSE_MON = VVD.BSE_MON
    			AND   QTA.BSE_QTR_CD = VVD.BSE_QTR_CD
    			AND   QTA.TRD_CD = VVD.TRD_CD
    			AND   QTA.DIR_CD = VVD.DIR_CD
    			AND   QTA.RLANE_CD = VVD.RLANE_CD
    			AND   QTA.VSL_CD = VVD.VSL_CD
    			AND   QTA.SKD_VOY_NO = VVD.SKD_VOY_NO
    			AND   QTA.SKD_DIR_CD = VVD.SKD_DIR_CD
    			AND   QTA.MQTA_RLSE_VER_NO = VVD.MQTA_RLSE_VER_NO
    			AND   QTA.BSE_YR = DIR.BSE_YR(+)
    			AND   DIR.BSE_QTR_CD(+) = @[bse_quarter]
    			AND   QTA.TRD_CD = DIR.TRD_CD(+)
    			AND   QTA.RLANE_CD = DIR.RLANE_CD(+)
    			AND   QTA.DIR_CD = DIR.DIR_CD(+)
    			GROUP BY ROLLUP(NVL(DIR.CONV_DIR_CD, QTA.DIR_CD), VVD.SUB_TRD_CD, QTA.RLANE_CD), QTA.RHQ_CD
    ) QTA
    WHERE NVL(QTA.DIR_CD, INP.DIR_CD) = INP.DIR_CD
    UNION ALL
    SELECT -- Performance PFMC
           'PFMC_SMR' AS GUBUN,
           MIN(BPS.CTRT_RHQ_CD||BPS.SUB_TRD_CD||DECODE(BPS.RLANE_CD,'RBCCO','ZZ',SUBSTR(BPS.RLANE_CD,-2))||BPS.RLANE_CD) AS KEY,
           DECODE(BPS.SUB_TRD_CD, '', '1',
              DECODE(BPS.RLANE_CD, '', '2', '3'))
                 AS SLEVEL,
           DECODE(GROUPING(BPS.CTRT_RHQ_CD), 1, 'TOTAL', BPS.CTRT_RHQ_CD) AS CTRT_RHQ_CD,
           DECODE(GROUPING(BPS.SUB_TRD_CD), 1, 'TOTAL', BPS.SUB_TRD_CD) AS SUB_TRD_CD,
           DECODE(GROUPING(BPS.RLANE_CD), 1, 'TOTAL', BPS.RLANE_CD) AS RLANE_CD,
           '0' AS MON_SEQ,
           '00' AS BSE_MON,
           SUM(BPS.TOT_VOY) AS TOT_VOY,
           SUM(BPS.TOT_LOD) AS TOT_LOD,
           SUM(BPS.TOT_REV) AS TOT_REV,
           SUM(BPS.TOT_REV)/SUM(BPS.TOT_LOD) AS TOT_RPB,
           SUM(BPS.TOT_CM) AS TOT_CM,
           SUM(BPS.TOT_RA_CM) AS TOT_RA_CM,
           SUM(BPS.TOT_CM)/SUM(BPS.TOT_LOD) AS TOT_CMB,
           SUM(BPS.TOT_RA_CM)/SUM(BPS.TOT_LOD) AS TOT_RA_CMB,
           SUM(BPS.TOT_OP) AS TOT_OP,
           SUM(BPS.TOT_RA_OP) AS TOT_RA_OP,
           SUM(BPS.TOT_OP)/SUM(BPS.TOT_LOD) AS TOT_OPB,
           SUM(BPS.TOT_RA_OP)/SUM(BPS.TOT_LOD) AS TOT_RA_OPB
    FROM   TMP_INPUT_PARMAS INP, (
        		SELECT -- Performance VOYAGE (양방향 Bound)
            			NVL(DIR.CONV_DIR_CD, BPS.DIR_CD) AS DIR_CD,
            			BPS.CTRT_RHQ_CD AS CTRT_RHQ_CD,
            			BPS.SUB_TRD_CD AS SUB_TRD_CD,
            			BPS.RLANE_CD AS RLANE_CD,
            			MIN(PFT.VOY_KNT) AS TOT_VOY,
            			SUM(BPS.LOD_QTY) AS TOT_LOD,
            			SUM(BPS.GRS_RPB_REV*BPS.LOD_QTY) AS TOT_REV,
            			SUM((BPS.GRS_RPB_REV-BPS.CM_UC_AMT)*BPS.LOD_QTY) AS TOT_CM,
            			SUM((BPS.GRS_RPB_REV-BPS.RA_CM_UC_AMT+BPS.RA_STP_PFIT_UT_AMT)*BPS.LOD_QTY) AS TOT_RA_CM,
            			SUM((BPS.GRS_RPB_REV-BPS.OPFIT_UC_AMT)*BPS.LOD_QTY    ) AS TOT_OP,
            			SUM((BPS.GRS_RPB_REV-BPS.RA_OPFIT_UC_AMT+BPS.RA_STP_PFIT_UT_AMT)*BPS.LOD_QTY ) AS TOT_RA_OP
        		FROM  	SAQ_PERF_OFC_SMRY BPS,
             		SAQ_PERF_TGT_LANE PFT,
             		SAQ_MON_DIR_CONV  DIR,
             		( SELECT DISTINCT ADJ.TRD_CD, ADJ.DIR_CD, ADJ.RLANE_CD
             		  FROM   SAQ_MON_TGT_VVD_ADJ ADJ, TMP_INPUT_PARMAS INP
             		  WHERE  1=1
             		  AND    ADJ.GLINE_VER_NO = INP.GLINE_VER_NO   ) ADJ,
             		TMP_INPUT_PARMAS INP
        		WHERE BPS.BSE_YR||BPS.BSE_MON BETWEEN PFMC_FR_YR_MON AND PFMC_TO_YR_MON
        		AND   BPS.TRD_CD = INP.TRD_CD
             AND   BPS.CTRT_RHQ_CD = INP.CTRT_RHQ_CD
        		AND   PFT.BSE_YR = BPS.BSE_YR
        		AND   PFT.BSE_MON = BPS.BSE_MON
        		AND   PFT.TRD_CD = BPS.TRD_CD
        		AND   PFT.RLANE_CD = BPS.RLANE_CD
        		AND   PFT.DIR_CD = BPS.DIR_CD
        		AND   BPS.LOD_QTY > 0
        		AND   BPS.TRD_CD = ADJ.TRD_CD
        		AND   BPS.DIR_CD = ADJ.DIR_CD
        		AND   BPS.RLANE_CD = ADJ.RLANE_CD
        		AND   BPS.BSE_YR = DIR.BSE_YR(+)
        		AND   DIR.BSE_QTR_CD(+) = @[bse_quarter]
        		AND   BPS.TRD_CD = DIR.TRD_CD(+)
        		AND   BPS.RLANE_CD = DIR.RLANE_CD(+)
        		AND   BPS.DIR_CD = DIR.DIR_CD(+)
        		GROUP BY BPS.BSE_YR, BPS.BSE_MON, NVL(DIR.CONV_DIR_CD, BPS.DIR_CD), BPS.SUB_TRD_CD, BPS.RLANE_CD, BPS.CTRT_RHQ_CD
        ) BPS
    WHERE NVL(BPS.DIR_CD, INP.DIR_CD) = INP.DIR_CD
    GROUP BY ROLLUP(BPS.SUB_TRD_CD, BPS.RLANE_CD), BPS.CTRT_RHQ_CD
    UNION ALL
    SELECT -- MONTHLY Quota (Recent)
           QTA.GUBUN,
           QTA.KEY,
           QTA.SLEVEL,
           QTA.CTRT_RHQ_CD,
           QTA.SUB_TRD_CD,
           QTA.RLANE_CD,
           QTA.MON_SEQ,
           QTA.BSE_MON,
           QTA.TOT_VOY,
           QTA.TOT_LOD,
           QTA.TOT_REV,
           QTA.TOT_RPB,
           QTA.TOT_CM,
           QTA.TOT_RA_CM,
           QTA.TOT_CMB,
           QTA.TOT_RA_CMB,
           QTA.TOT_OP ,
           QTA.TOT_RA_OP,
           QTA.TOT_OPB ,
           QTA.TOT_RA_OPB
    FROM   TMP_INPUT_PARMAS INP, (
    			SELECT -- MONTHLY Quota (Recent)
        			   'MONTHLY' AS GUBUN,
            		   NVL(DIR.CONV_DIR_CD, QTA.DIR_CD) DIR_CD,
        			   MIN(QTA.RHQ_CD||VVD.SUB_TRD_CD||DECODE(QTA.RLANE_CD,'RBCCO','ZZ',SUBSTR(QTA.RLANE_CD,-2))||QTA.RLANE_CD) AS KEY,
        			   DECODE(VVD.SUB_TRD_CD, '', '1',
           		   DECODE(QTA.RLANE_CD, '', '2', '3'))
            		      AS SLEVEL,
        			   DECODE(GROUPING(QTA.RHQ_CD), 1, 'TOTAL', QTA.RHQ_CD) AS CTRT_RHQ_CD,
        			   DECODE(GROUPING(VVD.SUB_TRD_CD), 1, 'TOTAL', VVD.SUB_TRD_CD) AS SUB_TRD_CD,
        			   DECODE(GROUPING(QTA.RLANE_CD), 1, 'TOTAL', QTA.RLANE_CD) AS RLANE_CD,
        			   MIN(DECODE(QTA.BSE_YR||QTA.BSE_MON, INP.BEF_YR_MON, '0',
            		      INP.ADD1_YR_MON, '2', ADD2_YR_MON, '3', '1')) AS MON_SEQ,
        			   QTA.BSE_MON,
        			   COUNT(DISTINCT QTA.VSL_CD||QTA.SKD_VOY_NO||QTA.SKD_DIR_CD) AS TOT_VOY,
        			   SUM(QTA.LOD_QTY         ) AS TOT_LOD,
        			   SUM(QTA.GRS_RPB_REV*QTA.LOD_QTY) AS TOT_REV ,
        			   SUM(QTA.GRS_RPB_REV*QTA.LOD_QTY)/SUM(QTA.LOD_QTY) AS TOT_RPB ,
        			   SUM((QTA.GRS_RPB_REV-QTA.CM_UC_AMT)*QTA.LOD_QTY) AS TOT_CM ,
        			   SUM((QTA.GRS_RPB_REV-QTA.RA_CM_UC_AMT)*QTA.LOD_QTY) AS TOT_RA_CM ,
        			   SUM((QTA.GRS_RPB_REV-QTA.CM_UC_AMT)*QTA.LOD_QTY)/SUM(QTA.LOD_QTY) AS TOT_CMB,
        			   SUM((QTA.GRS_RPB_REV-QTA.RA_CM_UC_AMT)*QTA.LOD_QTY)
            			   /SUM(QTA.LOD_QTY) AS TOT_RA_CMB ,
        			   SUM((QTA.GRS_RPB_REV-QTA.OPFIT_UC_AMT)*QTA.LOD_QTY    ) AS TOT_OP ,
        			   SUM((QTA.GRS_RPB_REV-QTA.RA_OPFIT_UC_AMT)*QTA.LOD_QTY ) AS TOT_RA_OP,
        			   SUM((QTA.GRS_RPB_REV-QTA.OPFIT_UC_AMT)*QTA.LOD_QTY    )
            			   /SUM(QTA.LOD_QTY) AS TOT_OPB ,
        			   SUM((QTA.GRS_RPB_REV-QTA.RA_OPFIT_UC_AMT)*QTA.LOD_QTY )
            			   /SUM(QTA.LOD_QTY) AS TOT_RA_OPB
    			FROM  (
                		SELECT DISTINCT
                       	   RLS.MQTA_RLSE_VER_NO AS MQTA_RLSE_VER_NO,
                       	   RLS.BSE_YR AS BEF_YR,
                       	   RLS.BSE_QTR_CD AS BEF_QTR_CD
                		FROM   SAQ_MON_QTA_RLSE RLS,
                       	   TMP_INPUT_PARMAS INP
                		WHERE  RLS.BSE_YR||RLS.BSE_QTR_CD = INP.BEF_YR_QTR
                		AND    RLS.QTA_RLSE_STS_CD = 'R'
          		  ) RLS,
              	  SAQ_MON_DIR_CONV    DIR,
          		  SAQ_MON_CFM_QTA     QTA,
          		  SAQ_MON_CFM_TGT_VVD VVD,
          		  TMP_INPUT_PARMAS    INP
    			WHERE QTA.MQTA_RLSE_VER_NO = RLS.MQTA_RLSE_VER_NO
    			AND   QTA.BSE_MON = DECODE(RLS.BEF_QTR_CD, '1Q', '03', '2Q', '06', '3Q', '09', '4Q', '12')
    			AND   QTA.QTA_TGT_CD = 'Q'
    			AND   QTA.TRD_CD = INP.TRD_CD
    			AND   QTA.RHQ_CD = INP.CTRT_RHQ_CD
    			AND   VVD.MQTA_RLSE_VER_NO = QTA.MQTA_RLSE_VER_NO
    			AND   VVD.BSE_YR = QTA.BSE_YR
    			AND   VVD.BSE_QTR_CD = QTA.BSE_QTR_CD
    			AND   VVD.BSE_MON = QTA.BSE_MON
    			AND   VVD.RLANE_CD = QTA.RLANE_CD
    			AND   VVD.TRD_CD = QTA.TRD_CD
    			AND   VVD.DIR_CD = QTA.DIR_CD
    			AND   VVD.VSL_CD = QTA.VSL_CD
    			AND   VVD.SKD_VOY_NO = QTA.SKD_VOY_NO
    			AND   VVD.SKD_DIR_CD = QTA.SKD_DIR_CD
    			AND   QTA.LOD_QTY > 0
    			AND   QTA.BSE_YR = DIR.BSE_YR(+)
    			AND   DIR.BSE_QTR_CD(+) = @[bse_quarter]
    			AND   QTA.TRD_CD = DIR.TRD_CD(+)
    			AND   QTA.RLANE_CD = DIR.RLANE_CD(+)
    			AND   QTA.DIR_CD = DIR.DIR_CD(+)
    			GROUP BY ROLLUP(NVL(DIR.CONV_DIR_CD, QTA.DIR_CD), VVD.SUB_TRD_CD, QTA.RLANE_CD), QTA.RHQ_CD, QTA.BSE_MON
        ) QTA
    WHERE NVL(QTA.DIR_CD, INP.DIR_CD) = INP.DIR_CD
    UNION ALL
    SELECT -- Model Result
        'MODEL' AS GUBUN,
        MIN(MRS.CTRT_RHQ_CD||MRS.SUB_TRD_CD||DECODE(MRS.RLANE_CD,'RBCCO','ZZ',SUBSTR(MRS.RLANE_CD,-2))||MRS.RLANE_CD) AS KEY,
        DECODE(MRS.SUB_TRD_CD, '', '1',
           DECODE(MRS.RLANE_CD, '', '2', '3'))
            AS SLEVEL,
        DECODE(GROUPING(MRS.CTRT_RHQ_CD), 1, 'TOTAL', MRS.CTRT_RHQ_CD) AS CTRT_RHQ_CD,
        DECODE(GROUPING(MRS.SUB_TRD_CD), 1, 'TOTAL', MRS.SUB_TRD_CD) AS SUB_TRD_CD,
        DECODE(GROUPING(MRS.RLANE_CD), 1, 'TOTAL', MRS.RLANE_CD) AS RLANE_CD,
        MIN(DECODE(MRS.BSE_YR||MRS.BSE_MON, INP.ADD1_YR_MON, '2',
               ADD2_YR_MON, '3', '1')) AS MON_SEQ,
        MRS.BSE_MON,
        COUNT(DISTINCT VVD.VSL_CD||VVD.SKD_VOY_NO||VVD.SKD_DIR_CD) AS TOT_VOY,
        SUM(MRS.LOD_QTY         ) AS TOT_LOD ,
        SUM(MRS.GRS_RPB_REV*MRS.LOD_QTY) AS TOT_REV ,
        SUM(MRS.GRS_RPB_REV*MRS.LOD_QTY)/SUM(MRS.LOD_QTY) AS TOT_RPB ,
        SUM((MRS.GRS_RPB_REV-MRS.CM_UC_AMT)*MRS.LOD_QTY) AS TOT_CM ,
        SUM((MRS.GRS_RPB_REV-MRS.RA_CM_UC_AMT)*MRS.LOD_QTY) AS TOT_RA_CM ,
        SUM((MRS.GRS_RPB_REV-MRS.CM_UC_AMT)*MRS.LOD_QTY)/SUM(MRS.LOD_QTY) AS TOT_CMB,
        SUM((MRS.GRS_RPB_REV-MRS.RA_CM_UC_AMT)*MRS.LOD_QTY)
            /SUM(MRS.LOD_QTY) AS TOT_RA_CMB ,
        SUM((MRS.GRS_RPB_REV-MRS.OPFIT_UC_AMT)*MRS.LOD_QTY    ) AS TOT_OP ,
        SUM((MRS.GRS_RPB_REV-MRS.RA_OPFIT_UC_AMT)*MRS.LOD_QTY ) AS TOT_RA_OP,
        SUM((MRS.GRS_RPB_REV-MRS.OPFIT_UC_AMT)*MRS.LOD_QTY    )
            /SUM(MRS.LOD_QTY) AS TOT_OPB ,
        SUM((MRS.GRS_RPB_REV-MRS.RA_OPFIT_UC_AMT)*MRS.LOD_QTY )
            /SUM(MRS.LOD_QTY) AS TOT_RA_OPB
    FROM  SAQ_MON_MDL_CTRT_SMRY MRS,
          SAQ_MON_TGT_VVD_ADJ VVD,
          TMP_INPUT_PARMAS INP
    WHERE MRS.MQTA_MDL_VER_NO = INP.MQTA_MDL_VER_NO
    AND   MRS.TRD_CD = INP.TRD_CD
    AND   MRS.DIR_CD = INP.DIR_CD
    AND   MRS.CTRT_RHQ_CD = INP.CTRT_RHQ_CD
    AND   VVD.BSE_YR = INP.BSE_YR
    AND   VVD.BSE_QTR_CD = INP.BSE_QTR_CD
    AND   VVD.GLINE_VER_NO = INP.GLINE_VER_NO
    AND   VVD.BSE_MON = MRS.BSE_MON
    AND   VVD.RLANE_CD = MRS.RLANE_CD
    AND   VVD.TRD_CD = MRS.TRD_CD
    AND   VVD.DIR_CD = MRS.DIR_CD
    AND   VVD.VSL_CD = MRS.VSL_CD
    AND   VVD.SKD_VOY_NO = MRS.SKD_VOY_NO
    AND   VVD.SKD_DIR_CD = MRS.SKD_DIR_CD
    AND   MRS.LOD_QTY > 0
    GROUP BY ROLLUP(MRS.SUB_TRD_CD, MRS.RLANE_CD), MRS.CTRT_RHQ_CD, MRS.BSE_MON
    UNION ALL
    SELECT -- Trade Group, RHQ, Final
        DECODE(TRD.MQTA_STEP_CD, '01','TRADE', '02','RHQ', '03','FINAL') AS GUBUN,
        MIN(TRD.CTRT_RHQ_CD||TRD.SUB_TRD_CD||DECODE(TRD.RLANE_CD,'RBCCO','ZZ',SUBSTR(TRD.RLANE_CD,-2))||TRD.RLANE_CD) AS KEY,
        DECODE(TRD.SUB_TRD_CD, '', '1',
           DECODE(TRD.RLANE_CD, '', '2', '3'))
            AS SLEVEL,
        DECODE(GROUPING(TRD.CTRT_RHQ_CD), 1, 'TOTAL', TRD.CTRT_RHQ_CD) AS CTRT_RHQ_CD,
        DECODE(GROUPING(TRD.SUB_TRD_CD), 1, 'TOTAL', TRD.SUB_TRD_CD) AS SUB_TRD_CD,
        DECODE(GROUPING(TRD.RLANE_CD), 1, 'TOTAL', TRD.RLANE_CD) AS RLANE_CD,
        MIN(DECODE(TRD.BSE_YR||TRD.BSE_MON, INP.ADD1_YR_MON, '2',
               ADD2_YR_MON, '3', '1')) AS MON_SEQ,
        TRD.BSE_MON AS BSE_MON,
        COUNT(DISTINCT VVD.VSL_CD||VVD.SKD_VOY_NO||VVD.SKD_DIR_CD) AS TOT_VOY,
        SUM(TRD.LOD_QTY) AS TOT_LOD,
        SUM(TRD.GRS_RPB_REV*TRD.LOD_QTY) AS TOT_REV,
        DECODE(SUM(TRD.LOD_QTY), 0, 0,
            SUM(TRD.GRS_RPB_REV*TRD.LOD_QTY)/SUM(TRD.LOD_QTY)
            ) AS TOT_RPB,
        SUM((TRD.GRS_RPB_REV-TRD.CM_UC_AMT)*TRD.LOD_QTY)
            AS TOT_CM,
        SUM((TRD.GRS_RPB_REV-TRD.RA_CM_UC_AMT)*TRD.LOD_QTY)
            AS TOT_RA_CM,
        DECODE(SUM(TRD.LOD_QTY), 0, 0,
            SUM((TRD.GRS_RPB_REV-TRD.CM_UC_AMT)*TRD.LOD_QTY)/SUM(TRD.LOD_QTY)
            ) AS TOT_CMB,
        DECODE(SUM(TRD.LOD_QTY), 0, 0,
            SUM((TRD.GRS_RPB_REV-TRD.RA_CM_UC_AMT)*TRD.LOD_QTY)
                /SUM(TRD.LOD_QTY)
            ) AS TOT_RA_CMB,
        SUM((TRD.GRS_RPB_REV-TRD.OPFIT_UC_AMT)*TRD.LOD_QTY)
            AS TOT_OP,
        SUM((TRD.GRS_RPB_REV-TRD.RA_OPFIT_UC_AMT)*TRD.LOD_QTY)
            AS TOT_RA_OP,
        DECODE(SUM(TRD.LOD_QTY), 0, 0,
            SUM((TRD.GRS_RPB_REV-TRD.OPFIT_UC_AMT)*TRD.LOD_QTY)
                /SUM(TRD.LOD_QTY)
            ) AS TOT_OPB,
        DECODE(SUM(TRD.LOD_QTY), 0, 0,
            SUM((TRD.GRS_RPB_REV-TRD.RA_OPFIT_UC_AMT)*TRD.LOD_QTY)
                /SUM(TRD.LOD_QTY)
            ) AS TOT_RA_OPB
    FROM   TMP_INPUT_PARMAS INP,
           SAQ_MON_TGT_VVD_ADJ VVD,
           SAQ_MON_QTA_STEP_VER VER,
           SAQ_MON_QTA_TRD TRD
    WHERE  VER.MQTA_STEP_CD IN ('01', '02', '03') -- Trade Group, RHQ, Final
    AND    VER.BSE_YR = INP.BSE_YR
    AND    VER.BSE_QTR_CD = INP.BSE_QTR_CD
    AND    VER.TRD_CD = INP.TRD_CD
    AND    VER.DIR_CD = INP.DIR_CD
    AND    VER.GLINE_VER_NO = INP.GLINE_VER_NO
    AND    ((VER.MQTA_STEP_CD = '02' AND VER.MQTA_VER_NO = INP.MQTA_VER_NO
                AND VER.TRD_CD = INP.TRD_CD AND VER.DIR_CD = INP.DIR_CD)
            OR (VER.MQTA_STEP_CD = '02'
                AND NOT(VER.TRD_CD = INP.TRD_CD AND VER.DIR_CD = INP.DIR_CD)
                AND VER.SAQ_STS_CD IN (SELECT A.INTG_CD_VAL_CTNT
                                  FROM COM_INTG_CD_DTL A,
                                       COM_INTG_CD_DTL B
                                  WHERE A.INTG_CD_ID = 'CD00926'
                                  AND B.INTG_CD_ID = A.INTG_CD_ID
                                  AND B.INTG_CD_VAL_CTNT = 'DC'
                                  AND A.INTG_CD_VAL_DP_SEQ >= B.INTG_CD_VAL_DP_SEQ))
            OR (VER.MQTA_STEP_CD = '03' AND VER.SAQ_STS_CD NOT IN ('00', 'XX'))
            OR (VER.MQTA_STEP_CD = '01' AND VER.SAQ_STS_CD IN (SELECT A.INTG_CD_VAL_CTNT
                                  FROM COM_INTG_CD_DTL A,
                                       COM_INTG_CD_DTL B
                                  WHERE A.INTG_CD_ID = 'CD00926'
                                  AND B.INTG_CD_ID = A.INTG_CD_ID
                                  AND B.INTG_CD_VAL_CTNT = 'DN'
                                  AND A.INTG_CD_VAL_DP_SEQ >= B.INTG_CD_VAL_DP_SEQ)))
    AND    TRD.MQTA_STEP_CD = VER.MQTA_STEP_CD
    AND    TRD.BSE_YR = VER.BSE_YR
    AND    TRD.BSE_QTR_CD = VER.BSE_QTR_CD
    AND    TRD.TRD_CD = VER.TRD_CD
    AND    TRD.DIR_CD = VER.DIR_CD
    AND    TRD.MQTA_VER_NO = VER.MQTA_VER_NO
    AND    TRD.CTRT_RHQ_CD = INP.CTRT_RHQ_CD
    AND    VVD.BSE_YR = VER.BSE_YR
    AND    VVD.BSE_QTR_CD = VER.BSE_QTR_CD
    AND    VVD.GLINE_VER_NO = VER.GLINE_VER_NO
    AND    VVD.BSE_MON = TRD.BSE_MON
    AND    VVD.TRD_CD = TRD.TRD_CD
    AND    VVD.DIR_CD = TRD.DIR_CD
    AND    VVD.SUB_TRD_CD = TRD.SUB_TRD_CD
    AND    VVD.RLANE_CD = TRD.RLANE_CD
    AND    VVD.SPRT_GRP_CD = TRD.SPRT_GRP_CD
    AND    VVD.BSA_GRP_CD = TRD.BSA_GRP_CD
    GROUP BY ROLLUP(TRD.SUB_TRD_CD, TRD.RLANE_CD), TRD.CTRT_RHQ_CD, TRD.BSE_MON, TRD.MQTA_STEP_CD
    UNION ALL
    SELECT -- Final Adjusted
        'ADJUSTED' AS GUBUN,
        MIN(RHQ.CTRT_RHQ_CD||RHQ.SUB_TRD_CD||DECODE(RHQ.RLANE_CD,'RBCCO','ZZ',SUBSTR(RHQ.RLANE_CD,-2))||RHQ.RLANE_CD) AS KEY,
        DECODE(RHQ.SUB_TRD_CD, '', '1',
           DECODE(RHQ.RLANE_CD, '', '2', '3'))
            AS SLEVEL,
        DECODE(GROUPING(RHQ.CTRT_RHQ_CD), 1, 'TOTAL', RHQ.CTRT_RHQ_CD) AS CTRT_RHQ_CD,
        DECODE(GROUPING(RHQ.SUB_TRD_CD), 1, 'TOTAL', RHQ.SUB_TRD_CD) AS SUB_TRD_CD,
        DECODE(GROUPING(RHQ.RLANE_CD), 1, 'TOTAL', RHQ.RLANE_CD) AS RLANE_CD,
        MIN(DECODE(RHQ.BSE_YR||RHQ.BSE_MON, INP.ADD1_YR_MON, '2',
               ADD2_YR_MON, '3', '1')) AS MON_SEQ,
        RHQ.BSE_MON AS BSE_MON,
        COUNT(DISTINCT VVD.VSL_CD||VVD.SKD_VOY_NO||VVD.SKD_DIR_CD) AS TOT_VOY,
        SUM(RHQ.LOD_QTY) AS TOT_LOD,
        SUM(RHQ.GRS_RPB_REV*RHQ.LOD_QTY) AS TOT_REV,
        DECODE(SUM(RHQ.LOD_QTY), 0, 0,
            SUM(RHQ.GRS_RPB_REV*RHQ.LOD_QTY)/SUM(RHQ.LOD_QTY)
            ) AS TOT_RPB,
        SUM((RHQ.GRS_RPB_REV-RHQ.CM_UC_AMT)*RHQ.LOD_QTY)
            AS TOT_CM,
        SUM((RHQ.GRS_RPB_REV-RHQ.RA_CM_UC_AMT)*RHQ.LOD_QTY)
            AS TOT_RA_CM,
        DECODE(SUM(RHQ.LOD_QTY), 0, 0,
            SUM((RHQ.GRS_RPB_REV-RHQ.CM_UC_AMT)*RHQ.LOD_QTY)/SUM(RHQ.LOD_QTY)
            ) AS TOT_CMB,
        DECODE(SUM(RHQ.LOD_QTY), 0, 0,
            SUM((RHQ.GRS_RPB_REV-RHQ.RA_CM_UC_AMT)*RHQ.LOD_QTY)
                /SUM(RHQ.LOD_QTY)
            ) AS TOT_RA_CMB,
        SUM((RHQ.GRS_RPB_REV-RHQ.OPFIT_UC_AMT)*RHQ.LOD_QTY)
            AS TOT_OP,
        SUM((RHQ.GRS_RPB_REV-RHQ.RA_OPFIT_UC_AMT)*RHQ.LOD_QTY)
            AS TOT_RA_OP,
        DECODE(SUM(RHQ.LOD_QTY), 0, 0,
            SUM((RHQ.GRS_RPB_REV-RHQ.OPFIT_UC_AMT)*RHQ.LOD_QTY)
                /SUM(RHQ.LOD_QTY)
            ) AS TOT_OPB,
        DECODE(SUM(RHQ.LOD_QTY), 0, 0,
            SUM((RHQ.GRS_RPB_REV-RHQ.RA_OPFIT_UC_AMT)*RHQ.LOD_QTY)
                /SUM(RHQ.LOD_QTY)
            ) AS TOT_RA_OPB
    FROM   TMP_INPUT_PARMAS INP,
           SAQ_MON_TGT_VVD_ADJ VVD,
           SAQ_MON_QTA_STEP_VER VER,
           SAQ_MON_QTA_RHQ RHQ
    WHERE  VER.MQTA_STEP_CD = '04' -- Final Adjusted
    AND    VER.BSE_YR = INP.BSE_YR
    AND    VER.BSE_QTR_CD = INP.BSE_QTR_CD
    AND    VER.TRD_CD = INP.TRD_CD
    AND    VER.DIR_CD = INP.DIR_CD
    AND    VER.GLINE_VER_NO = INP.GLINE_VER_NO
    AND    VER.SAQ_STS_CD IN ('QN', 'QF')
    AND    RHQ.MQTA_STEP_CD = VER.MQTA_STEP_CD
    AND    RHQ.BSE_YR = VER.BSE_YR
    AND    RHQ.BSE_QTR_CD = VER.BSE_QTR_CD
    AND    RHQ.TRD_CD = VER.TRD_CD
    AND    RHQ.DIR_CD = VER.DIR_CD
    AND    RHQ.MQTA_VER_NO = VER.MQTA_VER_NO
    AND    RHQ.CTRT_RHQ_CD = INP.CTRT_RHQ_CD
    AND    VVD.BSE_YR = VER.BSE_YR
    AND    VVD.BSE_QTR_CD = VER.BSE_QTR_CD
    AND    VVD.GLINE_VER_NO = VER.GLINE_VER_NO
    AND    VVD.BSE_MON = RHQ.BSE_MON
    AND    VVD.TRD_CD = RHQ.TRD_CD
    AND    VVD.DIR_CD = RHQ.DIR_CD
    AND    VVD.SUB_TRD_CD = RHQ.SUB_TRD_CD
    AND    VVD.RLANE_CD = RHQ.RLANE_CD
    AND    VVD.SPRT_GRP_CD = RHQ.SPRT_GRP_CD
    AND    VVD.BSA_GRP_CD = RHQ.BSA_GRP_CD
    GROUP BY ROLLUP(RHQ.SUB_TRD_CD, RHQ.RLANE_CD), RHQ.CTRT_RHQ_CD, RHQ.BSE_MON, RHQ.MQTA_STEP_CD
    ) UNI
    ,     (
          SELECT
              DIR.RLANE_CD,
              DIR.DIR_CD
          FROM
              SAQ_MON_DIR_CONV DIR,
              TMP_INPUT_PARMAS INP
          WHERE
                   DIR.BSE_YR = INP.BSE_YR
             AND DIR.BSE_QTR_CD = INP.BSE_QTR_CD
             AND DIR.TRD_CD = INP.TRD_CD
             AND DIR.CONV_DIR_CD = INP.DIR_CD
          ) DIR
     WHERE
             DIR.RLANE_CD(+) = UNI.RLANE_CD
GROUP BY UNI.SLEVEL, UNI.CTRT_RHQ_CD, UNI.SUB_TRD_CD, UNI.RLANE_CD, DIR.DIR_CD,
         ITM.CODE, ITM.TEXT, ITM.ROW_SEQ
ORDER BY KEY, SLEVEL, ROW_SEQ			]]></sql>
			<params>
				<param name="year" type="12" value="" out="N"/>
				<param name="bse_quarter" type="12" value="" out="N"/>
				<param name="bef_yr_qtr" type="12" value="" out="N"/>
				<param name="pfmc_fr_yr_mon" type="12" value="" out="N"/>
				<param name="pfmc_to_yr_mon" type="12" value="" out="N"/>
				<param name="pfmc_fr_yr_qtr" type="12" value="" out="N"/>
				<param name="pfmc_to_yr_qtr" type="12" value="" out="N"/>
				<param name="bound" type="12" value="" out="N"/>
				<param name="trade" type="12" value="" out="N"/>
				<param name="slsFcastPubNo" type="12" value="" out="N"/>
				<param name="mqtaMdlVerNo" type="12" value="" out="N"/>
				<param name="glineVerNo" type="12" value="" out="N"/>
				<param name="mQtaVerNo" type="12" value="" out="N"/>
				<param name="ctrt_rhq_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
