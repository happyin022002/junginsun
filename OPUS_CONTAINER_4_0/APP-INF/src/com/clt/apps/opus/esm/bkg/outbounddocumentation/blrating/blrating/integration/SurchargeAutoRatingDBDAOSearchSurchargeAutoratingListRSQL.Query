<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="SurchargeAutoRatingDBDAOSearchSurchargeAutoratingListRSQL">
			<desc><![CDATA[SearchSurchargeAutoratingList]]></desc>
			<sql><![CDATA[
/*AUTORATING_20100329-001*/
WITH
BK AS (

/*******************************************************************************************
BOOKING 의 기본 정보를 SELECT 한다.
*******************************************************************************************/

SELECT  BK.BKG_NO         ,
        NULL CORR_NO      ,
        NVL(@[cmdt_cd], BK.CMDT_CD) CMDT_CD ,
        ( SELECT REP_CMDT_CD FROM MDM_COMMODITY WHERE CMDT_CD = NVL(@[cmdt_cd], BK.CMDT_CD) ) REP_CMDT_CD ,
        DECODE(BK.PRE_RLY_PORT_CD||BK.PST_RLY_PORT_CD,NULL,'Y','N') DIR_CALL_FLG  ,
        NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), TO_DATE(BR.RT_APLY_DT))   RT_APLY_DT    ,
        NVL(@[svc_scp_cd], BK.SVC_SCP_CD)   BKG_SVC_SCP_CD  ,
        CT.SVC_SCP_CD     ,
        CT.CTRT_TP_CD     ,
        DECODE(CT.CTRT_TP_CD, 'S', NVL(@[ctrt_no], BK.SC_NO))   SC_NO   ,
        DECODE(CT.CTRT_TP_CD, 'R', NVL(@[ctrt_no], BK.RFA_NO))  RFA_NO  ,
        DECODE(CT.CTRT_TP_CD, 'T', NVL(@[ctrt_no], BK.TAA_NO))  TAA_NO  ,
        CASE
        WHEN BK.XTER_BKG_RQST_CD = 'EDI' THEN 'E'
        WHEN BK.XTER_BKG_RQST_CD = 'WEB' THEN 'W'
        WHEN BK.XTER_BKG_RQST_CD = 'DSK' THEN 'D'
        ELSE 'E'
        END ESVC_TP_CD    ,
        CT.PROP_NO        ,
        CT.AMDT_SEQ       ,
        CT.NOTE_HDR_SEQ   ,
        CASE
        WHEN L4.CML_ZN_FLG = 'Y' AND L3.RGN_CD IN ( 'UAG', 'UAN', 'UAS' ) THEN 'CZ'
        ELSE 'NN'
        END CML_ZN_CD     ,
        CASE
        WHEN  L3.CNT_CD IN ( 'US', 'CA' ) AND BK.POD_CD = BK.DEL_CD AND BK.DE_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'
        WHEN  L3.CNT_CD IN ( 'US', 'CA' ) THEN ( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L3.RGN_CD AND A.DEST_RGN_CD = L4.RGN_CD )
        WHEN  L2.CNT_CD IN ( 'US', 'CA' ) AND BK.POL_CD = BK.POR_CD AND BK.RCV_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'
        WHEN  L2.CNT_CD IN ( 'US', 'CA' ) THEN ( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L2.RGN_CD AND A.DEST_RGN_CD = L1.RGN_CD )
        END   USA_SVC_MOD_CD  , -- PO, LO, IP, ML
        BK.POR_CD                           ,
        L1.CNT_CD||L1.STE_CD  POR_STE_CD    ,
        L1.RGN_CD             POR_RGN_CD    ,
        L1.CNT_CD             POR_CNT_CD    ,
        L1.CONTI_CD           POR_CONTI_CD  ,
        BK.POL_CD                           ,
        L2.CNT_CD||L2.STE_CD  POL_STE_CD    ,
        L2.RGN_CD             POL_RGN_CD    ,
        L2.CNT_CD             POL_CNT_CD    ,
        L2.CONTI_CD           POL_CONTI_CD  ,
        BK.POD_CD                           ,
        L3.CNT_CD||L3.STE_CD  POD_STE_CD    ,
        L3.RGN_CD             POD_RGN_CD    ,
        L3.CNT_CD             POD_CNT_CD    ,
        L3.CONTI_CD           POD_CONTI_CD  ,
        BK.DEL_CD                           ,
        L4.CNT_CD||L4.STE_CD  DEL_STE_CD    ,
        L4.RGN_CD             DEL_RGN_CD    ,
        L4.CNT_CD             DEL_CNT_CD    ,
        L4.CONTI_CD           DEL_CONTI_CD  ,
        BK.PRE_RLY_PORT_CD                  ,
        BK.PST_RLY_PORT_CD                  ,
        BK.POL_NOD_CD                       ,
        BK.POD_NOD_CD                       ,
        BK.ORG_TRNS_MOD_CD                  ,
        BK.DEST_TRNS_MOD_CD                 ,
        BK.AGMT_ACT_CNT_CD                  ,
        BK.AGMT_ACT_CUST_SEQ                ,
        BK.USA_CSTMS_FILE_CD                ,
        BK.CND_CSTMS_FILE_CD                ,
        ( SELECT SUM(A.OP_CNTR_QTY) FROM BKG_QTY_DTL A WHERE A.BKG_NO = BK.BKG_NO )       CNTR_QTY      ,
        ( SELECT SUM(CEIL(A.OP_CNTR_QTY)) FROM BKG_QTY_DTL A WHERE A.BKG_NO = BK.BKG_NO ) CNTR_CEIL_QTY ,
        DECODE(BB.MEAS_UT_CD, 'CBF', BB.MEAS_QTY  * 0.0283  , BB.MEAS_QTY )         MEAS_QTY  ,
        DECODE(BB.WGT_UT_CD , 'LBS', BB.ACT_WGT   * 0.45359 , BB.ACT_WGT  )         ACT_WGT   ,
        BR.BKG_RT_WHF_EXPT_CD               ,
        NVL(NVL(@[frt_term_cd], BR.FRT_TERM_CD), 'P') FRT_TERM_CD ,
        ( SELECT COUNT(1) FROM PRD_PROD_CTL_ROUT_DTL A WHERE A.PCTL_NO = BK.PCTL_NO AND A.TRSP_MOD_CD = 'RD' ) PRD_RD_CNT ,
        ( SELECT COUNT(1) FROM BKG_HBL A WHERE A.BKG_NO = BK.BKG_NO ) BKG_HBL_CNT ,
        DECODE(( SELECT 'X' FROM BKG_CNTR_MF_DESC A WHERE A.BKG_NO = BK.BKG_NO AND A.CNTR_MF_NO = 'SELF' AND ROWNUM = 1 ), NULL, 0, 1)  MF_SELF_CNT
FROM    BKG_BOOKING   BK  ,
        BKG_BL_DOC    BB  ,
        BKG_RATE      BR  ,
        MDM_LOCATION  L1  ,
        MDM_LOCATION  L2  ,
        MDM_LOCATION  L3  ,
        MDM_LOCATION  L4  ,
        (
        SELECT  CTRT_TP_CD    ,
                PROP_NO       ,
                AMDT_SEQ      ,
                SVC_SCP_CD    ,
                NOTE_HDR_SEQ  ,
                EFF_DT        ,
                EXP_DT
        FROM    (
                SELECT  'S' CTRT_TP_CD    ,
                        SS.PROP_NO        ,
                        SS.AMDT_SEQ       ,
                        SS.SVC_SCP_CD     ,
                        SS.NOTE_HDR_SEQ   ,
                        SS.EFF_DT         ,
                        SS.EXP_DT         ,
                        RANK() OVER ( ORDER BY DECODE(NVL(@[svc_scp_cd], BK.SVC_SCP_CD), SS.SVC_SCP_CD, 1, 2) )   SVC_MTCH_PRIO
                FROM    BKG_BOOKING   BK  ,
                        PRI_SP_HDR    SH  ,
                        PRI_SP_MN     SM  ,
                        PRI_SP_SCP_MN SS
                WHERE   SH.SC_NO        = NVL(@[ctrt_no], BK.SC_NO)
                AND     SM.PROP_NO      = SH.PROP_NO
                AND     SM.PROP_STS_CD  = 'F'       -- FILING S/C
                AND     SS.PROP_NO      = SM.PROP_NO
                AND     SS.AMDT_SEQ     = SM.AMDT_SEQ
                AND     SS.SVC_SCP_CD   IN ( NVL(@[svc_scp_cd], BK.SVC_SCP_CD), DECODE(NVL(@[svc_scp_cd], BK.SVC_SCP_CD), 'ACE', 'TPE', 'MXE', 'TPE') )
                AND     BK.BKG_NO       = @[bkg_no]
                AND     @[ctrt_tp_cd]   = 'S'
                )
        WHERE   SVC_MTCH_PRIO = 1

        UNION ALL

        SELECT  'R' CTRT_TP_CD      ,
                RS.PROP_NO          ,
                RS.AMDT_SEQ         ,
                RS.SVC_SCP_CD       ,
                NULL  NOTE_HDR_SEQ  ,
                RS.EFF_DT           ,
                RS.EXP_DT
        FROM    BKG_BOOKING   BK  ,
                PRI_RP_HDR    RH  ,
                PRI_RP_MN     RM  ,
                PRI_RP_SCP_MN RS
        WHERE   RH.RFA_NO       = NVL(@[ctrt_no], BK.RFA_NO)
        AND     RM.PROP_NO      = RH.PROP_NO
        AND     RM.PROP_STS_CD  = 'A'
        AND     RS.PROP_NO      = RM.PROP_NO
        AND     RS.AMDT_SEQ     = RM.AMDT_SEQ
        AND     RS.SVC_SCP_CD   = NVL(@[svc_scp_cd], BK.SVC_SCP_CD)
        AND     BK.BKG_NO       = @[bkg_no]
        AND     @[ctrt_tp_cd]   = 'R'

        UNION ALL

        SELECT  'T' CTRT_TP_CD            ,
                TM.TAA_PROP_NO  PROP_NO   ,
                TM.AMDT_SEQ               ,
                TM.SVC_SCP_CD             ,
                NULL  NOTE_HDR_SEQ        ,
                TM.EFF_DT                 ,
                TM.EXP_DT
        FROM    BKG_BOOKING   BK  ,
                PRI_TAA_HDR   TH  ,
                PRI_TAA_MN    TM
        WHERE   TH.TAA_NO       = NVL(@[ctrt_no], BK.TAA_NO)
        AND     TM.TAA_PROP_NO  = TH.TAA_PROP_NO
        AND     TM.SVC_SCP_CD   = NVL(@[svc_scp_cd], BK.SVC_SCP_CD)
        AND     TM.CFM_FLG      = 'Y'       -- CONFIRMED TAA
        AND     BK.BKG_NO       = @[bkg_no]
        AND     @[ctrt_tp_cd]   = 'T'
        ) CT

WHERE   BB.BKG_NO       = BK.BKG_NO
AND     BR.BKG_NO(+)    = BK.BKG_NO
AND     L1.LOC_CD       = BK.POR_CD
AND     L2.LOC_CD       = BK.POL_CD
AND     L3.LOC_CD       = BK.POD_CD
AND     L4.LOC_CD       = BK.DEL_CD
AND     NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), ( SELECT TO_DATE(RT_APLY_DT) FROM BKG_RATE A WHERE A.BKG_NO = BK.BKG_NO ))    BETWEEN CT.EFF_DT AND CT.EXP_DT
AND     BK.BKG_NO       = @[bkg_no] -- BKG No
AND     @[ca_flg]       = 'N'

UNION ALL

SELECT  BK.BKG_NO         ,
        BK.CORR_NO        ,
        NVL(@[cmdt_cd], BK.CMDT_CD) CMDT_CD ,
        ( SELECT REP_CMDT_CD FROM MDM_COMMODITY WHERE CMDT_CD = NVL(@[cmdt_cd], BK.CMDT_CD) ) REP_CMDT_CD ,
        DECODE(BK.PRE_RLY_PORT_CD||BK.PST_RLY_PORT_CD,NULL,'Y','N') DIR_CALL_FLG  ,
        NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), TO_DATE(BR.RT_APLY_DT))   RT_APLY_DT    ,
        NVL(@[svc_scp_cd], BK.SVC_SCP_CD)   BKG_SVC_SCP_CD  ,
        CT.SVC_SCP_CD     ,
        CT.CTRT_TP_CD     ,
        DECODE(CT.CTRT_TP_CD, 'S', NVL(@[ctrt_no], BK.SC_NO))   SC_NO   ,
        DECODE(CT.CTRT_TP_CD, 'R', NVL(@[ctrt_no], BK.RFA_NO))  RFA_NO  ,
        DECODE(CT.CTRT_TP_CD, 'T', NVL(@[ctrt_no], BK.TAA_NO))  TAA_NO  ,
        CASE
        WHEN BK.XTER_BKG_RQST_CD = 'EDI' THEN 'E'
        WHEN BK.XTER_BKG_RQST_CD = 'WEB' THEN 'W'
        WHEN BK.XTER_BKG_RQST_CD = 'DSK' THEN 'D'
        ELSE 'E'
        END ESVC_TP_CD    ,
        CT.PROP_NO        ,
        CT.AMDT_SEQ       ,
        CT.NOTE_HDR_SEQ   ,
        CASE
        WHEN L4.CML_ZN_FLG = 'Y' AND L3.RGN_CD IN ( 'UAG', 'UAN', 'UAS' ) THEN 'CZ'
        ELSE 'NN'
        END CML_ZN_CD     ,
        CASE
        WHEN  L3.CNT_CD IN ( 'US', 'CA' ) AND BK.POD_CD = BK.DEL_CD AND BK.DE_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'
        WHEN  L3.CNT_CD IN ( 'US', 'CA' ) THEN ( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L3.RGN_CD AND A.DEST_RGN_CD = L4.RGN_CD )
        WHEN  L2.CNT_CD IN ( 'US', 'CA' ) AND BK.POL_CD = BK.POR_CD AND BK.RCV_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'
        WHEN  L2.CNT_CD IN ( 'US', 'CA' ) THEN ( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L2.RGN_CD AND A.DEST_RGN_CD = L1.RGN_CD )
        END   USA_SVC_MOD_CD  , -- PO, LO,9 IP, ML
        BK.POR_CD                           ,
        L1.CNT_CD||L1.STE_CD  POR_STE_CD    ,
        L1.RGN_CD             POR_RGN_CD    ,
        L1.CNT_CD             POR_CNT_CD    ,
        L1.CONTI_CD           POR_CONTI_CD  ,
        BK.POL_CD                           ,
        L2.CNT_CD||L2.STE_CD  POL_STE_CD    ,
        L2.RGN_CD             POL_RGN_CD    ,
        L2.CNT_CD             POL_CNT_CD    ,
        L2.CONTI_CD           POL_CONTI_CD  ,
        BK.POD_CD                           ,
        L3.CNT_CD||L3.STE_CD  POD_STE_CD    ,
        L3.RGN_CD             POD_RGN_CD    ,
        L3.CNT_CD             POD_CNT_CD    ,
        L3.CONTI_CD           POD_CONTI_CD  ,
        BK.DEL_CD                           ,
        L4.CNT_CD||L4.STE_CD  DEL_STE_CD    ,
        L4.RGN_CD             DEL_RGN_CD    ,
        L4.CNT_CD             DEL_CNT_CD    ,
        L4.CONTI_CD           DEL_CONTI_CD  ,
        BK.PRE_RLY_PORT_CD                  ,
        BK.PST_RLY_PORT_CD                  ,
        BK.POL_NOD_CD                       ,
        BK.POD_NOD_CD                       ,
        BK.ORG_TRNS_MOD_CD                  ,
        BK.DEST_TRNS_MOD_CD                 ,
        BK.AGMT_ACT_CNT_CD                  ,
        BK.AGMT_ACT_CUST_SEQ                ,
        BK.USA_CSTMS_FILE_CD                ,
        BK.CND_CSTMS_FILE_CD                ,
        ( SELECT SUM(A.OP_CNTR_QTY) FROM BKG_QTY_DTL_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO )        CNTR_QTY      ,
        ( SELECT SUM(CEIL(A.OP_CNTR_QTY)) FROM BKG_QTY_DTL_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO )  CNTR_CEIL_QTY ,
        DECODE(BB.MEAS_UT_CD, 'CBF', BB.MEAS_QTY  * 0.0283  , BB.MEAS_QTY )   MEAS_QTY  ,
        DECODE(BB.WGT_UT_CD , 'LBS', BB.ACT_WGT   * 0.45359 , BB.ACT_WGT  )   ACT_WGT   ,
        BR.BKG_RT_WHF_EXPT_CD               ,
        NVL(NVL(@[frt_term_cd], BR.FRT_TERM_CD), 'P') FRT_TERM_CD ,
        ( SELECT COUNT(1) FROM PRD_PROD_CTL_ROUT_DTL A WHERE A.PCTL_NO = BK.PCTL_NO AND TRSP_MOD_CD = 'RD' ) PRD_RD_CNT ,
        ( SELECT COUNT(1) FROM BKG_HBL_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO )  BKG_HBL_CNT ,
        DECODE(( SELECT 'X' FROM BKG_CNTR_MF_DESC_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO AND A.CNTR_MF_NO = 'SELF' AND ROWNUM = 1 ), NULL, 0, 1) MF_SELF_CNT
FROM    BKG_BKG_HIS       BK  ,
        BKG_BL_DOC_HIS    BB  ,
        BKG_RT_HIS        BR  ,
        MDM_LOCATION      L1  ,
        MDM_LOCATION      L2  ,
        MDM_LOCATION      L3  ,
        MDM_LOCATION      L4  ,

        (
        SELECT  CTRT_TP_CD    ,
                PROP_NO       ,
                AMDT_SEQ      ,
                SVC_SCP_CD    ,
                NOTE_HDR_SEQ  ,
                EFF_DT        ,
                EXP_DT
        FROM    (
                SELECT  'S' CTRT_TP_CD    ,
                        SS.PROP_NO        ,
                        SS.AMDT_SEQ       ,
                        SS.SVC_SCP_CD     ,
                        SS.NOTE_HDR_SEQ   ,
                        SS.EFF_DT         ,
                        SS.EXP_DT         ,
                        RANK() OVER ( ORDER BY DECODE(NVL(@[svc_scp_cd], BK.SVC_SCP_CD), SS.SVC_SCP_CD, 1, 2) )   SVC_MTCH_PRIO
                FROM    BKG_BKG_HIS   BK  ,
                        PRI_SP_HDR    SH  ,
                        PRI_SP_MN     SM  ,
                        PRI_SP_SCP_MN SS
                WHERE   SH.SC_NO        = NVL(@[ctrt_no], BK.SC_NO)
                AND     SM.PROP_NO      = SH.PROP_NO
                AND     SM.PROP_STS_CD  = 'F'       -- FILING S/C
                AND     SS.PROP_NO      = SM.PROP_NO
                AND     SS.AMDT_SEQ     = SM.AMDT_SEQ
                AND     SS.SVC_SCP_CD   IN ( NVL(@[svc_scp_cd], BK.SVC_SCP_CD), DECODE(NVL(@[svc_scp_cd], BK.SVC_SCP_CD), 'ACE', 'TPE', 'MXE', 'TPE') )
                AND     BK.BKG_NO       = @[bkg_no]
                AND     BK.CORR_NO      = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값
                AND     @[ctrt_tp_cd]   = 'S'
                )
        WHERE   SVC_MTCH_PRIO = 1

        UNION ALL

        SELECT  'R' CTRT_TP_CD      ,
                RS.PROP_NO          ,
                RS.AMDT_SEQ         ,
                RS.SVC_SCP_CD       ,
                NULL  NOTE_HDR_SEQ  ,
                RS.EFF_DT           ,
                RS.EXP_DT
        FROM    BKG_BKG_HIS   BK  ,
                PRI_RP_HDR    RH  ,
                PRI_RP_MN     RM  ,
                PRI_RP_SCP_MN RS
        WHERE   RH.RFA_NO       = NVL(@[ctrt_no], BK.RFA_NO)
        AND     RM.PROP_NO      = RH.PROP_NO
        AND     RM.PROP_STS_CD  = 'A'
        AND     RS.PROP_NO      = RM.PROP_NO
        AND     RS.AMDT_SEQ     = RM.AMDT_SEQ
        AND     RS.SVC_SCP_CD   = NVL(@[svc_scp_cd], BK.SVC_SCP_CD)
        AND     BK.BKG_NO       = @[bkg_no]
        AND     BK.CORR_NO      = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값
        AND     @[ctrt_tp_cd]   = 'R'

        UNION ALL

        SELECT  'T' CTRT_TP_CD            ,
                TM.TAA_PROP_NO  PROP_NO   ,
                TM.AMDT_SEQ               ,
                TM.SVC_SCP_CD             ,
                NULL  NOTE_HDR_SEQ        ,
                TM.EFF_DT                 ,
                TM.EXP_DT
        FROM    BKG_BKG_HIS   BK  ,
                PRI_TAA_HDR   TH  ,
                PRI_TAA_MN    TM
        WHERE   TH.TAA_NO       = NVL(@[ctrt_no], BK.TAA_NO)
        AND     TM.TAA_PROP_NO  = TH.TAA_PROP_NO
        AND     TM.SVC_SCP_CD   = NVL(@[svc_scp_cd], BK.SVC_SCP_CD)
        AND     TM.CFM_FLG      = 'Y'       -- CONFIRMED TAA
        AND     BK.BKG_NO       = @[bkg_no]
        AND     BK.CORR_NO      = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값
        AND     @[ctrt_tp_cd]   = 'T'
        ) CT

WHERE   BB.BKG_NO       = BK.BKG_NO
AND     BB.CORR_NO      = BK.CORR_NO
AND     BR.BKG_NO(+)    = BK.BKG_NO
AND     BR.CORR_NO(+)   = BK.CORR_NO
AND     L1.LOC_CD       = BK.POR_CD
AND     L2.LOC_CD       = BK.POL_CD
AND     L3.LOC_CD       = BK.POD_CD
AND     L4.LOC_CD       = BK.DEL_CD
AND     NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), ( SELECT TO_DATE(RT_APLY_DT) FROM BKG_RT_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO ))   BETWEEN CT.EFF_DT AND CT.EXP_DT
AND     BK.BKG_NO       = @[bkg_no] -- BKG No
AND     BK.CORR_NO      = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값
AND     @[ca_flg]       = 'Y'
) ,
OT AS (
SELECT  OFT_CMB_SEQ           ,
        CNTR_TPSZ_CD          ,
        CTRT_CNTR_TPSZ_CD     ,
        RCV_TERM_CD           ,
        DE_TERM_CD            ,
        DRY_CGO_FLG           ,
        AWK_CGO_FLG           ,
        DCGO_FLG              ,
        RC_FLG                ,
        BB_CGO_FLG            ,
        SOC_FLG               ,
        IMDG_CLSS_CD          ,
        GEN_SPCL_RT_TP_CD     ,
        CMDT_HDR_SEQ          ,
        ROUT_SEQ              ,
        RT_SEQ                ,
        OP_CNTR_QTY           ,
        TRI_PROP_NO           ,
        OFT_CHG_UT_AMT        ,
        OAR_CHG_UT_AMT        ,
        DAR_CHG_UT_AMT
FROM    (
        SELECT  OFT_CMB_SEQ           ,
                CNTR_TPSZ_CD          ,
                CTRT_CNTR_TPSZ_CD     ,
                RCV_TERM_CD           ,
                DE_TERM_CD            ,
                DRY_CGO_FLG           ,
                AWK_CGO_FLG           ,
                DCGO_FLG              ,
                RC_FLG                ,
                BB_CGO_FLG            ,
                SOC_FLG               ,
                IMDG_CLSS_CD          ,
                PRC_GEN_SPCL_RT_TP_CD GEN_SPCL_RT_TP_CD ,
                PRC_CMDT_HDR_SEQ      CMDT_HDR_SEQ      ,
                PRC_ROUT_SEQ          ROUT_SEQ          ,
                PRC_RT_SEQ            RT_SEQ            ,
                OP_CNTR_QTY           ,
                TRI_PROP_NO           ,
                (
                SELECT  NVL(SUM(CHG_UT_AMT), 0)
                FROM    BKG_AUTO_RT_OCN_FRT_TMP B
                WHERE   B.OFT_CMB_SEQ       = A.OFT_CMB_SEQ
                AND     B.CNTR_TPSZ_CD      = A.CNTR_TPSZ_CD
                AND     B.CTRT_CNTR_TPSZ_CD = A.CTRT_CNTR_TPSZ_CD
                AND     B.RCV_TERM_CD       = A.RCV_TERM_CD
                AND     B.DE_TERM_CD        = A.DE_TERM_CD
                AND     B.DRY_CGO_FLG       = A.DRY_CGO_FLG
                AND     B.AWK_CGO_FLG       = A.AWK_CGO_FLG
                AND     B.DCGO_FLG          = A.DCGO_FLG
                AND     B.RC_FLG            = A.RC_FLG
                AND     B.BB_CGO_FLG        = A.BB_CGO_FLG
                AND     B.SOC_FLG           = A.SOC_FLG
                AND     NVL(B.IMDG_CLSS_CD, '*')  = NVL(A.IMDG_CLSS_CD, '*')
                AND     B.CHG_CD            = 'OFT'
                ) OFT_CHG_UT_AMT         ,
                (
                SELECT  NVL(SUM(CHG_UT_AMT), 0)
                FROM    BKG_AUTO_RT_OCN_FRT_TMP B
                WHERE   B.OFT_CMB_SEQ       = A.OFT_CMB_SEQ
                AND     B.CNTR_TPSZ_CD      = A.CNTR_TPSZ_CD
                AND     B.CTRT_CNTR_TPSZ_CD = A.CTRT_CNTR_TPSZ_CD
                AND     B.RCV_TERM_CD       = A.RCV_TERM_CD
                AND     B.DE_TERM_CD        = A.DE_TERM_CD
                AND     B.DRY_CGO_FLG       = A.DRY_CGO_FLG
                AND     B.AWK_CGO_FLG       = A.AWK_CGO_FLG
                AND     B.DCGO_FLG          = A.DCGO_FLG
                AND     B.RC_FLG            = A.RC_FLG
                AND     B.BB_CGO_FLG        = A.BB_CGO_FLG
                AND     B.SOC_FLG           = A.SOC_FLG
                AND     NVL(B.IMDG_CLSS_CD, '*')  = NVL(A.IMDG_CLSS_CD, '*')
                AND     B.CHG_CD            = 'OAR'
                ) OAR_CHG_UT_AMT         ,
                (
                SELECT  NVL(SUM(CHG_UT_AMT), 0)
                FROM    BKG_AUTO_RT_OCN_FRT_TMP B
                WHERE   B.OFT_CMB_SEQ       = A.OFT_CMB_SEQ
                AND     B.CNTR_TPSZ_CD      = A.CNTR_TPSZ_CD
                AND     B.CTRT_CNTR_TPSZ_CD = A.CTRT_CNTR_TPSZ_CD
                AND     B.RCV_TERM_CD       = A.RCV_TERM_CD
                AND     B.DE_TERM_CD        = A.DE_TERM_CD
                AND     B.DRY_CGO_FLG       = A.DRY_CGO_FLG
                AND     B.AWK_CGO_FLG       = A.AWK_CGO_FLG
                AND     B.DCGO_FLG          = A.DCGO_FLG
                AND     B.RC_FLG            = A.RC_FLG
                AND     B.BB_CGO_FLG        = A.BB_CGO_FLG
                AND     B.SOC_FLG           = A.SOC_FLG
                AND     NVL(B.IMDG_CLSS_CD, '*')  = NVL(A.IMDG_CLSS_CD, '*')
                AND     B.CHG_CD            = 'DAR'
                ) DAR_CHG_UT_AMT         ,
                ROW_NUMBER() OVER ( PARTITION BY OFT_CMB_SEQ, CNTR_TPSZ_CD, CTRT_CNTR_TPSZ_CD, RCV_TERM_CD, DE_TERM_CD, DRY_CGO_FLG, AWK_CGO_FLG, DCGO_FLG, RC_FLG, BB_CGO_FLG, SOC_FLG, IMDG_CLSS_CD ORDER BY PRC_GEN_SPCL_RT_TP_CD DESC ) ROW_NUMBER
        FROM    BKG_AUTO_RT_OCN_FRT_TMP A
        WHERE   CHG_CD  = 'OFT'
        )
WHERE   ROW_NUMBER  = 1
) ,
BQ AS (

/*******************************************************************************************
AUTORATING 을 실행할 단위(ROW) 를 SELECT 한다.

OFT AUTORATING 과 동일한 레벨로 SELECT 하고, OFT 에서 선택된 GEN_SPCL_RT_TP_CD, CMDT_HDR_SEQ, RT_SEQ 를 추가로 SELECT 한다.

D7/AK 를 D7/DR 운임 적용을 위한 예외 로직도 여기서 적용한다.
*******************************************************************************************/

SELECT  BK.BKG_NO                 ,
        BK.CORR_NO                ,
        BQ.OFT_CMB_SEQ            ,
        ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ ORDER BY BQ.BKG_BQ_SEQ ) BQ_SEQ ,
        BK.CMDT_CD                ,
        BK.REP_CMDT_CD            ,
        BK.DIR_CALL_FLG           ,
        BK.RT_APLY_DT             ,
        BK.BKG_SVC_SCP_CD         ,
        BK.SVC_SCP_CD             ,
        BK.CTRT_TP_CD             ,
        BK.SC_NO                  ,
        BK.RFA_NO                 ,
        BK.TAA_NO                 ,
        BK.ESVC_TP_CD             ,
        BK.PROP_NO                ,
        BK.AMDT_SEQ               ,
        BK.NOTE_HDR_SEQ           ,
        BK.CML_ZN_CD              ,
        BK.USA_SVC_MOD_CD         ,
        BK.POR_CD                 ,
        BK.POR_STE_CD             ,
        BK.POR_RGN_CD             ,
        BK.POR_CNT_CD             ,
        BK.POR_CONTI_CD           ,
        BK.POL_CD                 ,
        BK.POL_STE_CD             ,
        BK.POL_RGN_CD             ,
        BK.POL_CNT_CD             ,
        BK.POL_CONTI_CD           ,
        BK.POD_CD                 ,
        BK.POD_STE_CD             ,
        BK.POD_RGN_CD             ,
        BK.POD_CNT_CD             ,
        BK.POD_CONTI_CD           ,
        BK.DEL_CD                 ,
        BK.DEL_STE_CD             ,
        BK.DEL_RGN_CD             ,
        BK.DEL_CNT_CD             ,
        BK.DEL_CONTI_CD           ,
        BK.PRE_RLY_PORT_CD        ,
        BK.PST_RLY_PORT_CD        ,
        BK.POL_NOD_CD             ,
        BK.POD_NOD_CD             ,
        BK.ORG_TRNS_MOD_CD        ,
        BK.DEST_TRNS_MOD_CD       ,
        BK.AGMT_ACT_CNT_CD        ,
        BK.AGMT_ACT_CUST_SEQ      ,
        BK.USA_CSTMS_FILE_CD      ,
        BK.CND_CSTMS_FILE_CD      ,
        BK.CNTR_QTY               ,
        BK.MEAS_QTY               ,
        BK.ACT_WGT                ,
        BK.PRD_RD_CNT             ,
        BK.BKG_HBL_CNT            ,
        BK.MF_SELF_CNT            ,
        BK.FRT_TERM_CD            ,
        BQ.BKG_BQ_SEQ             ,
        BQ.CNTR_TPSZ_CD           ,
        BQ.CTRT_CNTR_TPSZ_CD      ,
        ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = BQ.CTRT_CNTR_TPSZ_CD ) CTRT_CNTR_SZ_CD  ,
        BQ.RCV_TERM_CD            ,
        BQ.DE_TERM_CD             ,
        CASE          /* D7/AK 를 D7/DR 운임 적용을 위한 예외 로직 */
        WHEN BQ.CTRT_CNTR_TPSZ_CD = 'D7' AND BQ.AWK_CGO_FLG = 'Y' THEN 'DR'
        WHEN BQ.DRY_CGO_FLG = 'Y' THEN 'DR'
        END                                 DR_TP   ,
        DECODE(BQ.DCGO_FLG    , 'Y', 'DG')  DG_TP   ,
        DECODE(BQ.RC_FLG      , 'Y', 'RF')  RF_TP   ,
        DECODE(BQ.AWK_CGO_FLG , 'Y', 'AK')  AK_TP   ,
        DECODE(BQ.BB_CGO_FLG  , 'Y', 'BB')  BB_TP   ,
        BQ.DCGO_FLG               ,
        BQ.RC_FLG                 ,
        BQ.DRY_CGO_FLG            ,
        BQ.AWK_CGO_FLG            ,
        BQ.BB_CGO_FLG             ,
        BQ.SOC_FLG                ,
        CASE
        WHEN BQ.DCGO_FLG    = 'Y' THEN 'DG'
        WHEN BQ.AWK_CGO_FLG = 'Y' THEN 'AK'
        WHEN BQ.RC_FLG      = 'Y' THEN 'RF'
        WHEN BQ.BB_CGO_FLG  = 'Y' THEN 'BB'
        ELSE 'DR'
        END PRC_CGO_TP_CD         ,
        BQ.IMDG_CLSS_CD           ,
        BQ.CTRT_CNTR_QTY          ,
        OT.GEN_SPCL_RT_TP_CD      ,
        OT.CMDT_HDR_SEQ           ,
        OT.ROUT_SEQ               ,
        OT.RT_SEQ                 ,
        OT.OP_CNTR_QTY            ,
        OT.TRI_PROP_NO            ,
        NVL(OT.OFT_CHG_UT_AMT, 0)  OFT_CHG_UT_AMT ,
        NVL(OT.OAR_CHG_UT_AMT, 0)  OAR_CHG_UT_AMT ,
        NVL(OT.DAR_CHG_UT_AMT, 0)  DAR_CHG_UT_AMT
FROM    BK  ,
        (
        SELECT  CM.OFT_CMB_SEQ            ,
                ROW_NUMBER() OVER ( ORDER BY CM.OFT_CMB_SEQ, QD.CNTR_TPSZ_CD, QD.CTRT_CNTR_TPSZ_CD, QD.RCV_TERM_CD, QD.DE_TERM_CD, QD.DRY_CGO_FLG, QD.AWK_CGO_FLG, QD.DCGO_FLG, QD.RC_FLG, QD.BB_CGO_FLG, QD.SOC_FLG, QD.IMDG_CLSS_CD ) BKG_BQ_SEQ  ,
                QD.CNTR_TPSZ_CD           ,
                QD.CTRT_CNTR_TPSZ_CD      ,
                QD.RCV_TERM_CD            ,
                QD.DE_TERM_CD             ,
                QD.DRY_CGO_FLG            ,
                QD.AWK_CGO_FLG            ,
                QD.DCGO_FLG               ,
                QD.RC_FLG                 ,
                QD.BB_CGO_FLG             ,
                QD.SOC_FLG                ,
                QD.IMDG_CLSS_CD           ,
                QD.CTRT_CNTR_QTY
        FROM    (

                SELECT  QD.CNTR_TPSZ_CD           ,
                        QD.CTRT_CNTR_TPSZ_CD      ,
                        QD.RCV_TERM_CD            ,
                        QD.DE_TERM_CD             ,
                        QD.DRY_CGO_FLG            ,
                        QD.AWK_CGO_FLG            ,
                        QD.DCGO_FLG               ,
                        QD.RC_FLG                 ,
                        QD.BB_CGO_FLG             ,
                        QD.SOC_FLG                ,
                        DECODE(QD.DCGO_FLG, 'Y', ( SELECT MIN(IMDG_CLSS_CD) FROM BKG_DG_CGO A WHERE A.BKG_NO = QD.BKG_NO AND A.CNTR_TPSZ_CD = QD.CNTR_TPSZ_CD ))  IMDG_CLSS_CD  ,
                        QD.CTRT_CNTR_QTY
                FROM    (
                        SELECT  QD.BKG_NO                   ,
                                QD.CNTR_TPSZ_CD             ,
                                NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  CTRT_CNTR_TPSZ_CD ,
                                QD.RCV_TERM_CD              ,
                                QD.DE_TERM_CD               ,
                                QD.DRY_CGO_FLG              ,
                                QD.AWK_CGO_FLG              ,
                                QD.DCGO_FLG                 ,
                                QD.RC_FLG                   ,
                                QD.BB_CGO_FLG               ,
                                QD.SOC_FLG                  ,
                                SUM(QD.OP_CNTR_QTY) CTRT_CNTR_QTY
                        FROM    BK  ,
                                BKG_QTY_DTL QD
                        WHERE   QD.BKG_NO   = BK.BKG_NO
                        GROUP BY
                                QD.BKG_NO                 ,
                                QD.CNTR_TPSZ_CD           ,
                                NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  ,
                                QD.RCV_TERM_CD            ,
                                QD.DE_TERM_CD             ,
                                QD.DRY_CGO_FLG            ,
                                QD.AWK_CGO_FLG            ,
                                QD.DCGO_FLG               ,
                                QD.RC_FLG                 ,
                                QD.BB_CGO_FLG             ,
                                QD.SOC_FLG
                        ) QD
                WHERE   @[ca_flg]   = 'N'

                UNION ALL

                SELECT  QD.CNTR_TPSZ_CD           ,
                        QD.CTRT_CNTR_TPSZ_CD      ,
                        QD.RCV_TERM_CD            ,
                        QD.DE_TERM_CD             ,
                        QD.DRY_CGO_FLG            ,
                        QD.AWK_CGO_FLG            ,
                        QD.DCGO_FLG               ,
                        QD.RC_FLG                 ,
                        QD.BB_CGO_FLG             ,
                        QD.SOC_FLG                ,
                        DECODE(QD.DCGO_FLG, 'Y', ( SELECT MIN(IMDG_CLSS_CD) FROM BKG_DG_CGO_HIS A WHERE A.BKG_NO = QD.BKG_NO AND A.CORR_NO = QD.CORR_NO AND A.CNTR_TPSZ_CD = QD.CNTR_TPSZ_CD )) IMDG_CLSS_CD  ,
                        QD.CTRT_CNTR_QTY
                FROM    (
                        SELECT  QD.BKG_NO                   ,
                                QD.CORR_NO                  ,
                                QD.CNTR_TPSZ_CD             ,
                                NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  CTRT_CNTR_TPSZ_CD ,
                                QD.RCV_TERM_CD              ,
                                QD.DE_TERM_CD               ,
                                QD.DRY_CGO_FLG              ,
                                QD.AWK_CGO_FLG              ,
                                QD.DCGO_FLG                 ,
                                QD.RC_FLG                   ,
                                QD.BB_CGO_FLG               ,
                                QD.SOC_FLG                  ,
                                SUM(QD.OP_CNTR_QTY) CTRT_CNTR_QTY
                        FROM    BK  ,
                                BKG_QTY_DTL_HIS QD
                        WHERE   QD.BKG_NO   = BK.BKG_NO
                        AND     QD.CORR_NO  = BK.CORR_NO
                        GROUP BY
                                QD.BKG_NO                 ,
                                QD.CORR_NO                ,
                                QD.CNTR_TPSZ_CD           ,
                                NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  ,
                                QD.RCV_TERM_CD            ,
                                QD.DE_TERM_CD             ,
                                QD.DRY_CGO_FLG            ,
                                QD.AWK_CGO_FLG            ,
                                QD.DCGO_FLG               ,
                                QD.RC_FLG                 ,
                                QD.BB_CGO_FLG             ,
                                QD.SOC_FLG
                        ) QD
                WHERE   @[ca_flg]   = 'Y'

                ) QD  ,
                (
                SELECT  OFT_CMB_SEQ
                FROM    BKG_AUTO_RT_OCN_FRT_TMP
                UNION
                SELECT  1
                FROM    DUAL
                ) CM

        ) BQ  ,
        OT
WHERE   OT.OFT_CMB_SEQ(+)             = BQ.OFT_CMB_SEQ
AND     OT.CNTR_TPSZ_CD(+)            = BQ.CNTR_TPSZ_CD
AND     OT.CTRT_CNTR_TPSZ_CD(+)       = BQ.CTRT_CNTR_TPSZ_CD
AND     OT.RCV_TERM_CD(+)             = BQ.RCV_TERM_CD
AND     OT.DE_TERM_CD(+)              = BQ.DE_TERM_CD
AND     OT.DRY_CGO_FLG(+)             = BQ.DRY_CGO_FLG
AND     OT.AWK_CGO_FLG(+)             = BQ.AWK_CGO_FLG
AND     OT.DCGO_FLG(+)                = BQ.DCGO_FLG
AND     OT.RC_FLG(+)                  = BQ.RC_FLG
AND     OT.BB_CGO_FLG(+)              = BQ.BB_CGO_FLG
AND     OT.SOC_FLG(+)                 = BQ.SOC_FLG
AND     NVL(OT.IMDG_CLSS_CD(+), '*')  = NVL(BQ.IMDG_CLSS_CD, '*')
) ,
CT AS (
/*******************************************************************************************
# BKG_CONTAINER 연결 조건
1. QTY 의 숫자와 동일한 CNTR 이 물려야 한다.
2. 모든 CNTR 의 WIEGHT 가 값이 존재해야한다.
3. 연결 기준은
    - CNTR_TPSZ_CD
    - CTRT_CNTR_TPSZ_CD
    - AWK_CGO_FLG
    - DCGO_FLG
    - RC_FLG
    - BB_CGO_FLG
4.  Hanger는 Carrier’s Hanger인 경우만(M’HGR인 경우 Rating 하지 않음) 고려한다.
*******************************************************************************************/

SELECT  QD.CNTR_TPSZ_CD             ,
        QD.CTRT_CNTR_TPSZ_CD        ,
        QD.RCV_TERM_CD              ,
        QD.DE_TERM_CD               ,
        QD.DRY_CGO_FLG              ,
        QD.AWK_CGO_FLG              ,
        QD.DCGO_FLG                 ,
        QD.RC_FLG                   ,
        QD.BB_CGO_FLG               ,
        QD.SOC_FLG                  ,
        DECODE(QD.DCGO_FLG, 'Y', ( SELECT MIN(IMDG_CLSS_CD) FROM BKG_DG_CGO A WHERE A.BKG_NO = QD.BKG_NO AND A.CNTR_TPSZ_CD = QD.CNTR_TPSZ_CD ))  IMDG_CLSS_CD  ,
        CASE
        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_TPL_BAR_USE_FLG = 'Y' THEN 'T'
        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_DBL_BAR_USE_FLG = 'Y' THEN 'D'
        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_SGL_BAR_USE_FLG = 'Y' THEN 'S'
        END PRC_HNGR_BAR_TP_CD      ,
        CASE
        WHEN (SELECT CNTR_QTY FROM BK) = 1 AND BC.CNTR_WGT = 0 THEN (SELECT ACT_WGT FROM BK)
        ELSE MIN(NVL(BC.CNTR_WGT, 0)) OVER ( PARTITION BY BC.CNTR_TPSZ_CD, BC.CTRT_CNTR_TPSZ_CD, BC.AWK_CGO_FLG, BC.DCGO_FLG, BC.RC_FLG, BC.BB_CGO_FLG )
        END CNTR_WGT  ,
        NVL(AK.IN_GA_FLG, 'N')  IN_GA_FLG ,
        QD.CNTR_QTY
FROM    (
        SELECT  ROW_NUMBER() OVER ( PARTITION BY QD.CNTR_TPSZ_CD, QD.CTRT_CNTR_TPSZ_CD, QD.RCV_TERM_CD, QD.DE_TERM_CD, QD.AWK_CGO_FLG, QD.DCGO_FLG, QD.RC_FLG, QD.BB_CGO_FLG, QD.SOC_FLG ORDER BY 1 ) CNTR_ROW_NUMBER ,
                ROW_NUMBER() OVER ( PARTITION BY QD.CNTR_TPSZ_CD  ORDER BY 1 )  AK_ROW_NUMBER ,
                QD.BKG_NO                   ,
                QD.CNTR_TPSZ_CD             ,
                QD.CTRT_CNTR_TPSZ_CD        ,
                QD.RCV_TERM_CD              ,
                QD.DE_TERM_CD               ,
                QD.DRY_CGO_FLG              ,
                QD.AWK_CGO_FLG              ,
                QD.DCGO_FLG                 ,
                QD.RC_FLG                   ,
                QD.BB_CGO_FLG               ,
                QD.SOC_FLG                  ,
                QD.CRR_HNGR_SGL_BAR_USE_FLG ,
                QD.CRR_HNGR_DBL_BAR_USE_FLG ,
                QD.CRR_HNGR_TPL_BAR_USE_FLG ,
                QD.CRR_HNGR_FLG             ,
                QD.MER_HNGR_FLG             ,
                CASE
                WHEN QD.OP_CNTR_QTY < NB.ROW_NUMBER THEN QD.OP_CNTR_QTY - TRUNC(QD.OP_CNTR_QTY)
                ELSE 1
                END CNTR_QTY
        FROM    (
                SELECT  QD.BKG_NO                   ,
                        QD.CNTR_TPSZ_CD             ,
                        NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  CTRT_CNTR_TPSZ_CD ,
                        QD.RCV_TERM_CD              ,
                        QD.DE_TERM_CD               ,
                        QD.DRY_CGO_FLG              ,
                        QD.AWK_CGO_FLG              ,
                        QD.DCGO_FLG                 ,
                        QD.RC_FLG                   ,
                        QD.BB_CGO_FLG               ,
                        QD.SOC_FLG                  ,
                        QD.CRR_HNGR_SGL_BAR_USE_FLG ,
                        QD.CRR_HNGR_DBL_BAR_USE_FLG ,
                        QD.CRR_HNGR_TPL_BAR_USE_FLG ,
                        QD.CRR_HNGR_FLG             ,
                        QD.MER_HNGR_FLG             ,
                        QD.OP_CNTR_QTY
                FROM    BK  ,
                        BKG_QTY_DTL QD
                WHERE   QD.BKG_NO   = BK.BKG_NO
                ) QD  ,
                (
                SELECT  ROWNUM ROW_NUMBER
                FROM    DUAL
                CONNECT BY LEVEL <= ( SELECT CNTR_CEIL_QTY FROM BK )
                ) NB
        WHERE CEIL(QD.OP_CNTR_QTY) >= NB.ROW_NUMBER
        ) QD  ,
        (

/*******************************************************************************************
CONTAINER 정보가 모두 INPUT 되고, PARTIAL VOLUME 이 없는 경우에만 WEIGHT 별 SURCHARGE 를 구함
*******************************************************************************************/

        SELECT  ROW_NUMBER() OVER ( PARTITION BY BC.CNTR_TPSZ_CD, NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD), BC.AWK_CGO_FLG, BC.DCGO_FLG, BC.RC_FLG, BC.BB_CGO_FLG ORDER BY BC.CNTR_NO )  CNTR_ROW_NUMBER ,
                BC.CNTR_TPSZ_CD ,
                NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD) CTRT_CNTR_TPSZ_CD ,
                BC.AWK_CGO_FLG  ,
                BC.DCGO_FLG     ,
                BC.RC_FLG       ,
                BC.BB_CGO_FLG   ,
                DECODE(BC.WGT_UT_CD , 'LBS', BC.CNTR_WGT    * 0.45359 , BC.CNTR_WGT ) CNTR_WGT
        FROM    BK  ,
                BKG_CONTAINER BC
        WHERE   BC.BKG_NO   = BK.BKG_NO
        AND     BK.CNTR_QTY
                = (
                  SELECT  NVL(SUM(BC.CNTR_VOL_QTY), 0)
                  FROM    BK  ,
                          BKG_CONTAINER BC
                  WHERE   BC.BKG_NO       = BK.BKG_NO
                  AND     BC.CNTR_VOL_QTY = 1
                  )
        ) BC  ,
        (
        SELECT  ROW_NUMBER() OVER ( PARTITION BY AK.CNTR_TPSZ_CD  ORDER BY 1 ) AK_ROW_NUMBER  ,
                AK.CNTR_TPSZ_CD ,
                AK.IN_GA_FLG
        FROM    BK  ,
                BKG_AWK_CGO AK
        WHERE   AK.BKG_NO     = BK.BKG_NO
        AND     AK.IN_GA_FLG  = 'Y'
        ) AK
WHERE   BC.CNTR_TPSZ_CD(+)      = QD.CNTR_TPSZ_CD
AND     BC.CTRT_CNTR_TPSZ_CD(+) = QD.CTRT_CNTR_TPSZ_CD
AND     BC.AWK_CGO_FLG(+)       = QD.AWK_CGO_FLG
AND     BC.DCGO_FLG(+)          = QD.DCGO_FLG
AND     BC.RC_FLG(+)            = QD.RC_FLG
AND     BC.BB_CGO_FLG(+)        = QD.BB_CGO_FLG
AND     BC.CNTR_ROW_NUMBER(+)   = QD.CNTR_ROW_NUMBER
AND     AK.CNTR_TPSZ_CD(+)      = QD.CNTR_TPSZ_CD
AND     AK.AK_ROW_NUMBER(+)     = QD.AK_ROW_NUMBER
AND     @[ca_flg]               = 'N'

UNION ALL

SELECT  QD.CNTR_TPSZ_CD             ,
        QD.CTRT_CNTR_TPSZ_CD        ,
        QD.RCV_TERM_CD              ,
        QD.DE_TERM_CD               ,
        QD.DRY_CGO_FLG              ,
        QD.AWK_CGO_FLG              ,
        QD.DCGO_FLG                 ,
        QD.RC_FLG                   ,
        QD.BB_CGO_FLG               ,
        QD.SOC_FLG                  ,
        DECODE(QD.DCGO_FLG, 'Y', ( SELECT MIN(IMDG_CLSS_CD) FROM BKG_DG_CGO_HIS A WHERE A.BKG_NO = QD.BKG_NO AND A.CORR_NO = QD.CORR_NO AND A.CNTR_TPSZ_CD = QD.CNTR_TPSZ_CD )) IMDG_CLSS_CD  ,
        CASE
        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_TPL_BAR_USE_FLG = 'Y' THEN 'T'
        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_DBL_BAR_USE_FLG = 'Y' THEN 'D'
        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_SGL_BAR_USE_FLG = 'Y' THEN 'S'
        END PRC_HNGR_BAR_TP_CD      ,
        CASE
        WHEN (SELECT CNTR_QTY FROM BK) = 1 AND BC.CNTR_WGT = 0 THEN (SELECT ACT_WGT FROM BK)
        ELSE LEAST(NVL(BC.CNTR_WGT, 0), MIN(NVL(BC.CNTR_WGT, 0)) OVER ())
        END CNTR_WGT  ,
        NVL(AK.IN_GA_FLG, 'N')  IN_GA_FLG ,
        QD.CNTR_QTY
FROM    (
        SELECT  ROW_NUMBER() OVER ( PARTITION BY QD.CNTR_TPSZ_CD, QD.CTRT_CNTR_TPSZ_CD, QD.RCV_TERM_CD, QD.DE_TERM_CD, QD.AWK_CGO_FLG, QD.DCGO_FLG, QD.RC_FLG, QD.BB_CGO_FLG, QD.SOC_FLG ORDER BY 1 ) CNTR_ROW_NUMBER ,
                ROW_NUMBER() OVER ( PARTITION BY QD.CNTR_TPSZ_CD  ORDER BY 1 )  AK_ROW_NUMBER ,
                QD.BKG_NO                   ,
                QD.CORR_NO                  ,
                QD.CNTR_TPSZ_CD             ,
                QD.CTRT_CNTR_TPSZ_CD        ,
                QD.RCV_TERM_CD              ,
                QD.DE_TERM_CD               ,
                QD.DRY_CGO_FLG              ,
                QD.AWK_CGO_FLG              ,
                QD.DCGO_FLG                 ,
                QD.RC_FLG                   ,
                QD.BB_CGO_FLG               ,
                QD.SOC_FLG                  ,
                QD.CRR_HNGR_SGL_BAR_USE_FLG ,
                QD.CRR_HNGR_DBL_BAR_USE_FLG ,
                QD.CRR_HNGR_TPL_BAR_USE_FLG ,
                QD.CRR_HNGR_FLG             ,
                QD.MER_HNGR_FLG             ,
                CASE
                WHEN QD.OP_CNTR_QTY < NB.ROW_NUMBER THEN QD.OP_CNTR_QTY - TRUNC(QD.OP_CNTR_QTY)
                ELSE 1
                END CNTR_QTY
        FROM    (
                SELECT  QD.BKG_NO                   ,
                        QD.CORR_NO                  ,
                        QD.CNTR_TPSZ_CD             ,
                        NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  CTRT_CNTR_TPSZ_CD ,
                        QD.RCV_TERM_CD              ,
                        QD.DE_TERM_CD               ,
                        QD.DRY_CGO_FLG              ,
                        QD.AWK_CGO_FLG              ,
                        QD.DCGO_FLG                 ,
                        QD.RC_FLG                   ,
                        QD.BB_CGO_FLG               ,
                        QD.SOC_FLG                  ,
                        QD.CRR_HNGR_SGL_BAR_USE_FLG ,
                        QD.CRR_HNGR_DBL_BAR_USE_FLG ,
                        QD.CRR_HNGR_TPL_BAR_USE_FLG ,
                        QD.CRR_HNGR_FLG             ,
                        QD.MER_HNGR_FLG             ,
                        QD.OP_CNTR_QTY
                FROM    BK  ,
                        BKG_QTY_DTL_HIS QD
                WHERE   QD.BKG_NO   = BK.BKG_NO
                AND     QD.CORR_NO  = BK.CORR_NO
                ) QD  ,
                (
                SELECT  ROWNUM ROW_NUMBER
                FROM    DUAL
                CONNECT BY LEVEL <= ( SELECT CNTR_CEIL_QTY FROM BK )
                ) NB
        WHERE CEIL(QD.OP_CNTR_QTY) >= NB.ROW_NUMBER
        ) QD  ,
        (

/*******************************************************************************************
CONTAINER 정보가 모두 INPUT 되고, PARTIAL VOLUME 이 없는 경우에만 WEIGHT 별 SURCHARGE 를 구함
*******************************************************************************************/

        SELECT  ROW_NUMBER() OVER ( PARTITION BY BC.CNTR_TPSZ_CD, NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD), BC.AWK_CGO_FLG, BC.DCGO_FLG, BC.RC_FLG, BC.BB_CGO_FLG ORDER BY BC.CNTR_NO )  CNTR_ROW_NUMBER ,
                BC.CNTR_TPSZ_CD ,
                NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD) CTRT_CNTR_TPSZ_CD ,
                BC.AWK_CGO_FLG  ,
                BC.DCGO_FLG     ,
                BC.RC_FLG       ,
                BC.BB_CGO_FLG   ,
                DECODE(BC.WGT_UT_CD , 'LBS', BC.CNTR_WGT    * 0.45359 , BC.CNTR_WGT ) CNTR_WGT
        FROM    BK  ,
                BKG_CNTR_HIS  BC
        WHERE   BC.BKG_NO   = BK.BKG_NO
        AND     BC.CORR_NO  = BK.CORR_NO
        AND     BK.CNTR_QTY
                = (
                  SELECT  NVL(SUM(BC.CNTR_VOL_QTY), 0)
                  FROM    BK  ,
                          BKG_CNTR_HIS  BC
                  WHERE   BC.BKG_NO       = BK.BKG_NO
                  AND     BC.CORR_NO      = BK.CORR_NO
                  AND     BC.CNTR_VOL_QTY = 1
                  )
        ) BC  ,
        (
        SELECT  ROW_NUMBER() OVER ( PARTITION BY AK.CNTR_TPSZ_CD  ORDER BY 1 ) AK_ROW_NUMBER  ,
                AK.CNTR_TPSZ_CD ,
                AK.IN_GA_FLG
        FROM    BK  ,
                BKG_AWK_CGO_HIS AK
        WHERE   AK.BKG_NO     = BK.BKG_NO
        AND     AK.CORR_NO    = BK.CORR_NO
        AND     AK.IN_GA_FLG  = 'Y'
        ) AK
WHERE   BC.CNTR_TPSZ_CD(+)      = QD.CNTR_TPSZ_CD
AND     BC.CTRT_CNTR_TPSZ_CD(+) = QD.CTRT_CNTR_TPSZ_CD
AND     BC.AWK_CGO_FLG(+)       = QD.AWK_CGO_FLG
AND     BC.DCGO_FLG(+)          = QD.DCGO_FLG
AND     BC.RC_FLG(+)            = QD.RC_FLG
AND     BC.BB_CGO_FLG(+)        = QD.BB_CGO_FLG
AND     BC.CNTR_ROW_NUMBER(+)   = QD.CNTR_ROW_NUMBER
AND     AK.CNTR_TPSZ_CD(+)      = QD.CNTR_TPSZ_CD
AND     AK.AK_ROW_NUMBER(+)     = QD.AK_ROW_NUMBER
AND     @[ca_flg]               = 'Y'
) ,
GL AS (

/*******************************************************************************************
GROUP LOCATION 을 SELECT 한다.
S/C 의 경우는 NOTE CONVERSION 에서 사용하는 GROUP LOCATION ( 'EAST', 'WEST' ) 도 포함시킨다.
*******************************************************************************************/

SELECT  G.PRC_GRP_LOC_CD  ,
        D.LOC_CD
FROM    BK  ,
        PRI_SP_SCP_GRP_LOC      G ,
        PRI_SP_SCP_GRP_LOC_DTL  D
WHERE   D.PROP_NO         = G.PROP_NO
AND     D.AMDT_SEQ        = G.AMDT_SEQ
AND     D.SVC_SCP_CD      = G.SVC_SCP_CD
AND     D.GRP_LOC_SEQ     = G.GRP_LOC_SEQ
AND     D.SRC_INFO_CD     <> 'AD'
AND     G.PROP_NO         = BK.PROP_NO
AND     G.AMDT_SEQ        = BK.AMDT_SEQ
AND     G.SVC_SCP_CD      = BK.SVC_SCP_CD
AND     @[ctrt_tp_cd]     = 'S'

UNION ALL

/* 이 부부은 OFT 에는 적용하지 않고, SURCHARGE 에만 적용한다. ( 2009/11 월 현재 S/C 만 DATA 있음 ) */
SELECT  G.NOTE_CONV_GRP_LOC_CD  PRC_GRP_LOC_CD  ,
        D.LOC_CD
FROM    PRI_NOTE_CONV_GRP_LOC     G ,
        PRI_NOTE_CONV_GRP_LOC_DTL D
WHERE   D.PRC_CTRT_TP_CD        = G.PRC_CTRT_TP_CD
AND     D.NOTE_CONV_GRP_LOC_CD  = G.NOTE_CONV_GRP_LOC_CD
AND     G.PRC_CTRT_TP_CD        = @[ctrt_tp_cd]

UNION ALL

SELECT  G.PRC_GRP_LOC_CD  ,
        D.LOC_CD
FROM    BK  ,
        PRI_RP_SCP_GRP_LOC      G ,
        PRI_RP_SCP_GRP_LOC_DTL  D
WHERE   D.PROP_NO         = G.PROP_NO
AND     D.AMDT_SEQ        = G.AMDT_SEQ
AND     D.SVC_SCP_CD      = G.SVC_SCP_CD
AND     D.GRP_LOC_SEQ     = G.GRP_LOC_SEQ
AND     G.PROP_NO         = BK.PROP_NO
AND     G.AMDT_SEQ        = BK.AMDT_SEQ
AND     G.SVC_SCP_CD      = BK.SVC_SCP_CD
AND     @[ctrt_tp_cd]     = 'R'
) ,
NC AS (

/*******************************************************************************************
BOOKING 에 해당하는 NOTE CONVERSION 을 SELECT 한다.
*******************************************************************************************/

SELECT  BQ.OFT_CMB_SEQ        ,
        BQ.BQ_SEQ             ,
        BQ.BKG_BQ_SEQ         ,
        NC.NOTE_CONV_MAPG_ID  ,
        NC.NOTE_CONV_SEQ      ,

        ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) CONV_TP_PRIO  ,

        NC.NOTE_CONV_TP_CD          ,
        NC.CHG_RULE_TP_CD           ,
        NC.NOTE_CONV_CHG_CD         ,
        NC.NOTE_CONV_RULE_CD        ,
        NC.RT_APPL_TP_CD            ,
        NC.RT_OP_CD                 ,
        NC.CURR_CD                  ,
        NC.FRT_RT_AMT               ,
        NC.PAY_TERM_CD              ,
        NC.BKG_RAT_UT_CD            ,
        NC.BKG_PRC_CGO_TP_CD        ,
        NC.BKG_IMDG_CLSS_CD         ,
        DECODE(NC.BKG_SOC_FLG, NULL, 'N', 'Y')        SOC_USE_FLG ,

#if (${ctrt_tp_cd} == 'S')

        CASE
        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.CMDT_HDR_SEQ
        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.CMDT_HDR_SEQ
        ELSE 0
        END CMDT_HDR_SEQ            ,
        CASE
        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.ROUT_SEQ
        ELSE 0
        END ROUT_SEQ                ,

        CASE
        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.GEN_SPCL_RT_TP_CD
        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.GEN_SPCL_RT_TP_CD
        ELSE NC.GEN_SPCL_RT_TP_CD
        END GEN_SPCL_RT_TP_CD       ,

        NULL                  MIN_CGO_WGT         ,
        NULL                  MAX_CGO_WGT         ,
        'N'                   HNGR_BAR_USE_FLG    ,
        NULL                  PRC_HNGR_BAR_TP_CD  ,

        ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD, NC.NOTE_CONV_RULE_CD, DECODE(NC.CHG_RULE_TP_CD, 'C', NC.BKG_RAT_UT_CD)
                            ORDER BY
                              ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ,
                              GREATEST(DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0), DECODE(BKG_SCG_GRP_CMDT_CD, NULL, 0, 500))
                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)
                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)
                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)
                                + DECODE(BKG_USA_SVC_MOD_CD   , NULL, 0, 1)
                                + DECODE(BKG_ORG_TRSP_MOD_CD  , NULL, 0, 1)
                                + DECODE(BKG_DEST_TRSP_MOD_CD , NULL, 0, 1)
                                + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)
                                + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)
                                + DECODE(BKG_SLAN_CD          , NULL, 0, 1)
                                + DECODE(BKG_VSL_CD           , NULL, 0, 1)
                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)
                                + DECODE(BKG_ACT_CUST_CNT_CD  , NULL, 0, 1)
                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)
                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) DESC  ,
                              NC.FRT_RT_AMT         ,
                              NC.NOTE_CONV_MAPG_ID  ,
                              NC.NOTE_CONV_SEQ
                            ) ROW_NUMBER  ,

        GREATEST(DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0), DECODE(BKG_SCG_GRP_CMDT_CD, NULL, 0, 500))
                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)
                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)
                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)
                                + DECODE(BKG_USA_SVC_MOD_CD   , NULL, 0, 1)
                                + DECODE(BKG_ORG_TRSP_MOD_CD  , NULL, 0, 1)
                                + DECODE(BKG_DEST_TRSP_MOD_CD , NULL, 0, 1)
                                + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)
                                + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)
                                + DECODE(BKG_SLAN_CD          , NULL, 0, 1)
                                + DECODE(BKG_VSL_CD           , NULL, 0, 1)
                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)
                                + DECODE(BKG_ACT_CUST_CNT_CD  , NULL, 0, 1)
                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)
                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) MTCH_PRIO ,

        NVL(NC.CONV_RAT_UT_CD, BQ.CTRT_CNTR_TPSZ_CD)  CONV_RAT_UT_CD            ,
        DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.DR_TP), 'DR', 'DR')  CONV_DR_TP    ,
        DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.DG_TP), 'DG', 'DG')  CONV_DG_TP    ,
        DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.RF_TP), 'RF', 'RF')  CONV_RF_TP    ,
        DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.AK_TP), 'AK', 'AK')  CONV_AK_TP    ,
        DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.BB_TP), 'BB', 'BB')  CONV_BB_TP    ,
        NC.CONV_CMDT_TP_CD          ,
        NC.CONV_CMDT_DEF_CD         ,
        NVL(NC.CONV_ORG_LOC_TP_CD, 'L')               CONV_ORG_LOC_TP_CD        ,
        NVL(NC.CONV_ORG_LOC_DEF_CD, BQ.POR_CD)        CONV_ORG_LOC_DEF_CD       ,
        NVL(NC.CONV_ORG_VIA_LOC_TP_CD, 'L')           CONV_ORG_VIA_LOC_TP_CD    ,
        NVL(NC.CONV_ORG_VIA_LOC_DEF_CD, BQ.POL_CD)    CONV_ORG_VIA_LOC_DEF_CD   ,
        NVL(NC.CONV_DEST_VIA_LOC_TP_CD, 'L')          CONV_DEST_VIA_LOC_TP_CD   ,
        NVL(NC.CONV_DEST_VIA_LOC_DEF_CD, BQ.POD_CD)   CONV_DEST_VIA_LOC_DEF_CD  ,
        NVL(NC.CONV_DEST_LOC_TP_CD, 'L')              CONV_DEST_LOC_TP_CD       ,
        NVL(NC.CONV_DEST_LOC_DEF_CD, BQ.DEL_CD)       CONV_DEST_LOC_DEF_CD      ,
        NVL(NC.CONV_PRC_RCV_TERM_CD, BQ.RCV_TERM_CD)  CONV_PRC_RCV_TERM_CD      ,
        NVL(NC.CONV_PRC_DE_TERM_CD, BQ.DE_TERM_CD)    CONV_PRC_DE_TERM_CD       ,

        NC.BKG_MST_HBL_TP_CD

FROM    BQ  ,
        (
        SELECT  NC.*
        FROM    BK                    ,
                PRI_SC_NOTE_CONV  NC
        WHERE   NC.PROP_NO    = BK.PROP_NO
        AND     NC.AMDT_SEQ   = BK.AMDT_SEQ
        AND     NC.SVC_SCP_CD = BK.SVC_SCP_CD
        AND     BK.RT_APLY_DT BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */
        UNION ALL
        SELECT  NC.*
        FROM    BK                    ,
                PRI_SC_NOTE_CONV  NC
        WHERE   NC.SVC_SCP_CD   = BK.SVC_SCP_CD
        AND     NC.NOTE_HDR_SEQ = BK.NOTE_HDR_SEQ
        AND     BK.RT_APLY_DT BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */
        ) NC                          ,
        PRI_SP_SCP_RT_CNOTE       CN  ,
        PRI_SP_SCP_RT_CMDT_RNOTE  RN  ,
        MDM_CHARGE                MC

WHERE   CN.NOTE_CONV_MAPG_ID(+) = NC.NOTE_CONV_MAPG_ID
AND     CN.SRC_INFO_CD(+)       <> 'AD'
AND     RN.NOTE_CONV_MAPG_ID(+) = NC.NOTE_CONV_MAPG_ID
AND     RN.SRC_INFO_CD(+)       <> 'AD'
AND     MC.CHG_CD(+)            = NC.NOTE_CONV_CHG_CD

AND     NVL(
        CASE
        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.GEN_SPCL_RT_TP_CD
        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.GEN_SPCL_RT_TP_CD
        ELSE NC.GEN_SPCL_RT_TP_CD
        END
        , NVL(BQ.GEN_SPCL_RT_TP_CD, '*'))   = NVL(BQ.GEN_SPCL_RT_TP_CD, '*')
AND     (
        CASE
        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.CMDT_HDR_SEQ
        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.CMDT_HDR_SEQ
        ELSE 0
        END
        ) IN ( 0, BQ.CMDT_HDR_SEQ )
AND     (
        CASE
        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.ROUT_SEQ
        ELSE 0
        END
        ) IN ( 0, BQ.ROUT_SEQ )


/*******************************************************************************************
< OFT 해당 여부 확인 >
선택된 OFT 와 일치하는 것만 대상으로 함.
*******************************************************************************************/

AND     (
            NC.RULE_APPL_CHG_TP_CD  IS NULL
        OR  NC.RULE_APPL_CHG_TP_CD  = 'S'           /* SURCHARGE 를 대상으로 함 */
        )


/*******************************************************************************************
< SURCARGE GROUP COMMODITY >
업무적으로는 SURCHARGE 에서만 사용함.
PRI_SCG_GRP_CMDT_DTL 의 EFFECTIVE DATE 는 BKG 의 APPLICATION DATE 를 기준으로 함.
*******************************************************************************************/
AND     (
            NC.BKG_SCG_GRP_CMDT_CD IS NULL
        OR  EXISTS  (
                    SELECT  'X'
                    FROM    PRI_SCG_GRP_CMDT      G ,
                            PRI_SCG_GRP_CMDT_DTL  D
                    WHERE   D.SVC_SCP_CD          = G.SVC_SCP_CD
                    AND     D.CHG_CD              = G.CHG_CD
                    AND     D.SCG_GRP_CMDT_SEQ    = G.SCG_GRP_CMDT_SEQ
                    AND     D.CMDT_CD             = BQ.CMDT_CD
                    AND     BQ.RT_APLY_DT         BETWEEN D.EFF_DT AND D.EXP_DT
                    AND     G.SVC_SCP_CD          = BQ.SVC_SCP_CD
                    AND     G.CHG_CD              = 'GRI'
                    AND     G.SCG_GRP_CMDT_CD     = NC.BKG_SCG_GRP_CMDT_CD
                    )
        )

/*******************************************************************************************
<  USA SVC MOD >
NOTE CONV 에서는 USA SVC MOD CD 에, COMMERCIAL ZONE 도 같이 합쳐서 사용한다.
따라서 NOTE CONV 의 USA SVC MOD CD 가 'CZ' 이면 BKG 의 COMMERCIAL ZONE CD 와 비교한다.
*******************************************************************************************/
AND     (
            NC.BKG_USA_SVC_MOD_CD IS NULL
        OR  NC.BKG_USA_SVC_MOD_CD = DECODE(NC.BKG_USA_SVC_MOD_CD, 'CZ', BQ.CML_ZN_CD, BQ.USA_SVC_MOD_CD )
        )


/*******************************************************************************************
ORG DEST TRANS MOD
*******************************************************************************************/
AND     (
            NC.BKG_ORG_TRSP_MOD_CD  IS NULL
        OR  NVL(NC.BKG_ORG_TRSP_MOD_CD, '*')  = NVL(BQ.ORG_TRNS_MOD_CD, '*')
        )

AND     (
            NC.BKG_DEST_TRSP_MOD_CD IS NULL
        OR  NVL(NC.BKG_DEST_TRSP_MOD_CD, '*') = NVL(BQ.DEST_TRNS_MOD_CD, '*')
        )


/*******************************************************************************************
R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )
*******************************************************************************************/
AND     (
            NC.BKG_RCV_TERM_CD  = BQ.RCV_TERM_CD
        OR  (
                NC.BKG_RCV_TERM_CD IS NULL
            AND (
                    MC.CHG_APLY_AREA_CD = 'C'
                OR  BQ.RCV_TERM_CD  IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.RCV_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )
                )
            )
        )

AND     (
            NC.BKG_DE_TERM_CD   = BQ.DE_TERM_CD
        OR  (
                NC.BKG_DE_TERM_CD IS NULL
            AND (
                    MC.CHG_APLY_AREA_CD = 'P'
                OR  BQ.DE_TERM_CD   IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.DE_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )
                )
            )
        )


/*******************************************************************************************
ACTUAL CUSTOMER
*******************************************************************************************/
AND     (
            (
                NC.BKG_ACT_CUST_CNT_CD  IS NULL
            AND NC.BKG_ACT_CUST_SEQ     IS NULL
            )
            OR
            (
                NC.BKG_ACT_CUST_CNT_CD  = BQ.AGMT_ACT_CNT_CD
            AND NC.BKG_ACT_CUST_SEQ     = BQ.AGMT_ACT_CUST_SEQ
            )
        )


/*******************************************************************************************
< LANE & VVD >
TRUNK, T/S 구분없이 LANE 이나 VVD 가 존재하는지 여부로 판단한다.
*******************************************************************************************/
AND     EXISTS  (
                SELECT  'X'
                FROM    BKG_VVD BV
                WHERE   BV.BKG_NO     = BQ.BKG_NO
                AND     BV.SLAN_CD    = NVL(NC.BKG_SLAN_CD, BV.SLAN_CD)
                AND     BV.VSL_CD     = NVL(NC.BKG_VSL_CD, BV.VSL_CD)
                AND     BV.SKD_VOY_NO = NVL(NC.BKG_SKD_VOY_NO, BV.SKD_VOY_NO)
                AND     BV.SKD_DIR_CD = NVL(NC.BKG_SKD_DIR_CD, BV.SKD_DIR_CD)
                AND     @[ca_flg]     = 'N'

                UNION ALL

                SELECT  'X'
                FROM    BKG_VVD_HIS BV
                WHERE   BV.BKG_NO     = BQ.BKG_NO
                AND     BV.CORR_NO    = BQ.CORR_NO
                AND     BV.SLAN_CD    = NVL(NC.BKG_SLAN_CD, BV.SLAN_CD)
                AND     BV.VSL_CD     = NVL(NC.BKG_VSL_CD, BV.VSL_CD)
                AND     BV.SKD_VOY_NO = NVL(NC.BKG_SKD_VOY_NO, BV.SKD_VOY_NO)
                AND     BV.SKD_DIR_CD = NVL(NC.BKG_SKD_DIR_CD, BV.SKD_DIR_CD)
                AND     @[ca_flg]     = 'Y'
                )


#elseif (${ctrt_tp_cd} == 'R')


        CASE
        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.CMDT_HDR_SEQ
        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.CMDT_HDR_SEQ
        ELSE 0
        END CMDT_HDR_SEQ            ,
        CASE
        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.ROUT_SEQ
        ELSE 0
        END ROUT_SEQ                ,

        'S' GEN_SPCL_RT_TP_CD       ,
        NC.BKG_MIN_CGO_WGT    MIN_CGO_WGT         ,
        NC.BKG_MAX_CGO_WGT    MAX_CGO_WGT         ,
        'Y'                   HNGR_BAR_USE_FLG    ,
        NC.BKG_HNGR_BAR_TP_CD PRC_HNGR_BAR_TP_CD  ,

        ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD, NC.NOTE_CONV_RULE_CD, DECODE(NC.CHG_RULE_TP_CD, 'C', NC.BKG_RAT_UT_CD), NVL(NC.BKG_MIN_CGO_WGT, 0), NVL(NC.BKG_MAX_CGO_WGT, 0), NC.BKG_HNGR_BAR_TP_CD
                            ORDER BY
                              ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ,
                                DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0)
                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)
                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)
                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)
                                + DECODE(BKG_SLAN_CD          , NULL, 0, 1)
                                + DECODE(BKG_VSL_CD           , NULL, 0, 1)
                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)
                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)
                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) DESC  ,
                              NC.FRT_RT_AMT         ,
                              NC.NOTE_CONV_MAPG_ID  ,
                              NC.NOTE_CONV_SEQ
                            ) ROW_NUMBER  ,

        DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0)
                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)
                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)
                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)
                                + DECODE(BKG_SLAN_CD          , NULL, 0, 1)
                                + DECODE(BKG_VSL_CD           , NULL, 0, 1)
                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)
                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)
                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) MTCH_PRIO ,

        NULL  CONV_RAT_UT_CD            ,
        NULL  CONV_DR_TP                ,
        NULL  CONV_DG_TP                ,
        NULL  CONV_RF_TP                ,
        NULL  CONV_AK_TP                ,
        NULL  CONV_BB_TP                ,
        NULL  CONV_CMDT_TP_CD           ,
        NULL  CONV_CMDT_DEF_CD          ,
        NULL  CONV_ORG_LOC_TP_CD        ,
        NULL  CONV_ORG_LOC_DEF_CD       ,
        NULL  CONV_ORG_VIA_LOC_TP_CD    ,
        NULL  CONV_ORG_VIA_LOC_DEF_CD   ,
        NULL  CONV_DEST_VIA_LOC_TP_CD   ,
        NULL  CONV_DEST_VIA_LOC_DEF_CD  ,
        NULL  CONV_DEST_LOC_TP_CD       ,
        NULL  CONV_DEST_LOC_DEF_CD      ,
        NULL  CONV_PRC_RCV_TERM_CD      ,
        NULL  CONV_PRC_DE_TERM_CD       ,

        NULL  BKG_MST_HBL_TP_CD

FROM    BQ  ,
        (
        SELECT  NC.*
        FROM    BK                    ,
                PRI_RFA_NOTE_CONV NC
        WHERE   NC.PROP_NO    = BK.PROP_NO
        AND     NC.AMDT_SEQ   = BK.AMDT_SEQ
        AND     NC.SVC_SCP_CD = BK.SVC_SCP_CD
        AND     BK.RT_APLY_DT BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */
        ) NC                          ,
        PRI_RP_SCP_RT_CNOTE       CN  ,
        PRI_RP_SCP_RT_CMDT_RNOTE  RN  ,
        MDM_CHARGE                MC

WHERE   CN.NOTE_CONV_MAPG_ID(+) = NC.NOTE_CONV_MAPG_ID
AND     CN.SRC_INFO_CD(+)       <> 'AD'
AND     RN.NOTE_CONV_MAPG_ID(+) = NC.NOTE_CONV_MAPG_ID
AND     RN.SRC_INFO_CD(+)       <> 'AD'
AND     MC.CHG_CD(+)            = NC.NOTE_CONV_CHG_CD
AND     (
        CASE
        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.CMDT_HDR_SEQ
        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.CMDT_HDR_SEQ
        ELSE 0
        END
        ) IN ( 0, BQ.CMDT_HDR_SEQ )
AND     (
        CASE
        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.ROUT_SEQ
        ELSE 0
        END
        ) IN ( 0, BQ.ROUT_SEQ )


/*******************************************************************************************
R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )
*******************************************************************************************/
AND     (
            MC.CHG_APLY_AREA_CD = 'C'
        OR  BQ.RCV_TERM_CD  IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.RCV_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )
        )

AND     (
            MC.CHG_APLY_AREA_CD = 'P'
        OR  BQ.DE_TERM_CD   IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.DE_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )
        )


/*******************************************************************************************
< LANE & VVD >
TRUNK, T/S 구분없이 LANE 이나 VVD 가 존재하는지 여부로 판단한다.
*******************************************************************************************/
AND     EXISTS  (
                SELECT  'X'
                FROM    BKG_VVD BV
                WHERE   BV.BKG_NO     = BQ.BKG_NO
                AND     BV.SLAN_CD    = NVL(NC.BKG_SLAN_CD, BV.SLAN_CD)
                AND     BV.VSL_CD     = NVL(NC.BKG_VSL_CD, BV.VSL_CD)
                AND     BV.SKD_VOY_NO = NVL(NC.BKG_SKD_VOY_NO, BV.SKD_VOY_NO)
                AND     BV.SKD_DIR_CD = NVL(NC.BKG_SKD_DIR_CD, BV.SKD_DIR_CD)
                AND     @[ca_flg]     = 'N'

                UNION ALL

                SELECT  'X'
                FROM    BKG_VVD_HIS BV
                WHERE   BV.BKG_NO     = BQ.BKG_NO
                AND     BV.CORR_NO    = BQ.CORR_NO
                AND     BV.SLAN_CD    = NVL(NC.BKG_SLAN_CD, BV.SLAN_CD)
                AND     BV.VSL_CD     = NVL(NC.BKG_VSL_CD, BV.VSL_CD)
                AND     BV.SKD_VOY_NO = NVL(NC.BKG_SKD_VOY_NO, BV.SKD_VOY_NO)
                AND     BV.SKD_DIR_CD = NVL(NC.BKG_SKD_DIR_CD, BV.SKD_DIR_CD)
                AND     @[ca_flg]     = 'Y'
                )


#else


        0 CMDT_HDR_SEQ              ,
        0 ROUT_SEQ                  ,

        'S' GEN_SPCL_RT_TP_CD       ,

        NC.BKG_MIN_CGO_WGT    MIN_CGO_WGT         ,
        NC.BKG_MAX_CGO_WGT    MAX_CGO_WGT         ,
        'Y'                   HNGR_BAR_USE_FLG    ,
        NC.BKG_HNGR_BAR_TP_CD PRC_HNGR_BAR_TP_CD  ,

        ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD, NC.NOTE_CONV_RULE_CD, DECODE(NC.CHG_RULE_TP_CD, 'C', NC.BKG_RAT_UT_CD), NVL(NC.BKG_MIN_CGO_WGT,0), NVL(NC.BKG_MAX_CGO_WGT,0), NC.BKG_HNGR_BAR_TP_CD
                            ORDER BY
                              ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ,
                                DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0)
                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)
                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)
                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)
                                + DECODE(BKG_USA_SVC_MOD_CD   , NULL, 0, 1)
                                + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)
                                + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)
                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)
                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)
                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) DESC  ,
                              NC.FRT_RT_AMT         ,
                              NC.NOTE_CONV_MAPG_ID  ,
                              NC.NOTE_CONV_SEQ
                            ) ROW_NUMBER  ,

        DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0)
                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)
                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)
                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)
                                + DECODE(BKG_USA_SVC_MOD_CD   , NULL, 0, 1)
                                + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)
                                + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)
                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)
                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)
                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) MTCH_PRIO ,

        NVL(NC.CONV_RAT_UT_CD, BQ.CTRT_CNTR_TPSZ_CD)  CONV_RAT_UT_CD            ,
        NULL  CONV_DR_TP                ,
        NULL  CONV_DG_TP                ,
        NULL  CONV_RF_TP                ,
        NULL  CONV_AK_TP                ,
        NULL  CONV_BB_TP                ,
        NULL  CONV_CMDT_TP_CD           ,
        NULL  CONV_CMDT_DEF_CD          ,
        NULL  CONV_ORG_LOC_TP_CD        ,
        NULL  CONV_ORG_LOC_DEF_CD       ,
        NULL  CONV_ORG_VIA_LOC_TP_CD    ,
        NULL  CONV_ORG_VIA_LOC_DEF_CD   ,
        NULL  CONV_DEST_VIA_LOC_TP_CD   ,
        NULL  CONV_DEST_VIA_LOC_DEF_CD  ,
        NULL  CONV_DEST_LOC_TP_CD       ,
        NULL  CONV_DEST_LOC_DEF_CD      ,
        NULL  CONV_PRC_RCV_TERM_CD      ,
        NULL  CONV_PRC_DE_TERM_CD       ,

        NULL  BKG_MST_HBL_TP_CD

FROM    BQ  ,
        (
        SELECT  NC.*
        FROM    BK                      ,
                PRI_TAA_TRI_LIST    TL  ,
                PRI_TRI_RT          RT  ,
                PRI_TRI_NOTE_CONV   NC
        WHERE   TL.TAA_PROP_NO  = BK.PROP_NO
        AND     TL.AMDT_SEQ     = BK.AMDT_SEQ
        AND     RT.TRI_PROP_NO  = TL.TRI_PROP_NO
        AND     BK.RT_APLY_DT   BETWEEN RT.EFF_DT AND RT.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */
        AND     RT.PROP_STS_CD  = 'F'
        AND     NC.TRI_PROP_NO  = RT.TRI_PROP_NO
        AND     NC.AMDT_SEQ     = RT.AMDT_SEQ
        AND     BK.RT_APLY_DT   BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */
        UNION ALL
        SELECT  NC.*
        FROM    BK                      ,
                PRI_SVC_SCP_TRF     ST  ,
                PRI_TRI_NOTE        TN  ,
                PRI_TRI_NOTE_CONV   NC
        WHERE   ST.SVC_SCP_CD = BK.SVC_SCP_CD
        AND     TN.TRF_PFX_CD = ST.TRF_PFX_CD
        AND     TN.TRF_NO     = ST.TRF_NO
        AND     BK.RT_APLY_DT   BETWEEN TN.EFF_DT AND TN.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */
        AND     TN.CFM_FLG    = 'Y'
        AND     NC.NOTE_CONV_MAPG_ID  = TN.NOTE_CONV_MAPG_ID
        ) NC                          ,
        MDM_CHARGE                MC

WHERE   MC.CHG_CD(+)            = NC.NOTE_CONV_CHG_CD
AND     (
            NC.TRI_PROP_NO  IS NULL
        OR  NC.TRI_PROP_NO  = BQ.TRI_PROP_NO
        )


/*******************************************************************************************
<  USA SVC MOD >
NOTE CONV 에서는 USA SVC MOD CD 에, COMMERCIAL ZONE 도 같이 합쳐서 사용한다.
따라서 NOTE CONV 의 USA SVC MOD CD 가 'CZ' 이면 BKG 의 COMMERCIAL ZONE CD 와 비교한다.
*******************************************************************************************/
AND     (
            NC.BKG_USA_SVC_MOD_CD IS NULL
        OR  NC.BKG_USA_SVC_MOD_CD = DECODE(NC.BKG_USA_SVC_MOD_CD, 'CZ', BQ.CML_ZN_CD, BQ.USA_SVC_MOD_CD )
        )


/*******************************************************************************************
R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )
*******************************************************************************************/
AND     (
            NC.BKG_RCV_TERM_CD  = BQ.RCV_TERM_CD
        OR  (
                NC.BKG_RCV_TERM_CD IS NULL
            AND (
                    MC.CHG_APLY_AREA_CD = 'C'
                OR  BQ.RCV_TERM_CD  IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.RCV_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )
                )
            )
        )

AND     (
            NC.BKG_DE_TERM_CD   = BQ.DE_TERM_CD
        OR  (
                NC.BKG_DE_TERM_CD IS NULL
            AND (
                    MC.CHG_APLY_AREA_CD = 'P'
                OR  BQ.DE_TERM_CD   IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.DE_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )
                )
            )
        )

#end


/*******************************************************************************************
NOT RULE CODE 는 SURCHARGE 에서만 사용되며,
TYP RULE CODE 는 OFT 에 사용되는 것이 기본이지만, SURCHARGE 에서도 사용된다.
*******************************************************************************************/
AND     (
            NC.CHG_RULE_TP_CD     = 'C'
        OR
            (
                NC.CHG_RULE_TP_CD     = 'R'
            AND NC.NOTE_CONV_RULE_CD  IN ( 'NOT', 'TYP' )
            )
        )


/*******************************************************************************************
< RATING UNIT >
CHARGE CODE 의 경우 아래 C1 에서 처리함.
*******************************************************************************************/
AND     (
            NC.CHG_RULE_TP_CD     = 'C'
        OR  (
                    NC.BKG_RAT_UT_CD  IS NULL
                OR  NC.BKG_RAT_UT_CD  = BQ.CTRT_CNTR_TPSZ_CD
                OR  NC.BKG_RAT_UT_CD  IN ( 'BX', 'BL' )
                OR
                (
                    NC.BKG_RAT_UT_CD  IN ( '20', '40', 'HC', '45', '53' )
                AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = NC.BKG_RAT_UT_CD )  = BQ.CTRT_CNTR_SZ_CD
                )
            )
        )


/*******************************************************************************************
< CARGO TYPE >
*******************************************************************************************/
AND     (
            NC.BKG_PRC_CGO_TP_CD  IS NULL
        OR  NC.BKG_PRC_CGO_TP_CD  IN ( BQ.DR_TP, BQ.DG_TP, BQ.RF_TP, BQ.AK_TP, BQ.BB_TP )
        )


/*******************************************************************************************
< IMDG CLASS >
NOTE CONV 의 IMDG CLSS CD 가 BKG 의 IMDG_CLSS_CD 의 일부부이라도 적용가능하다.
*******************************************************************************************/
AND     (
            NC.BKG_IMDG_CLSS_CD IS NULL
        OR  BQ.IMDG_CLSS_CD     LIKE NC.BKG_IMDG_CLSS_CD||'%'
        )

/*******************************************************************************************
< COMMODITY >
GROUP 은 사용하지 않는다.
*******************************************************************************************/
AND     (
            NC.BKG_CMDT_DEF_CD IS NULL
        OR  NC.BKG_CMDT_DEF_CD = DECODE(NC.BKG_CMDT_TP_CD, 'C', BQ.CMDT_CD, 'R', BQ.REP_CMDT_CD)
        )


/*******************************************************************************************
< ROUTE >
STANDARD NOTE 의 경우는 GROUP 을 사용하지 않으므로,
STANDARD NOTE 를 위한 특별한 고려가 필요하지 않음.
*******************************************************************************************/
/* POR */
AND     (
            NC.BKG_POR_DEF_CD IS NULL
        OR  NC.BKG_POR_DEF_CD = DECODE(NC.BKG_POR_TP_CD, 'L', BQ.POR_CD, 'T', BQ.POR_STE_CD, 'R', BQ.POR_RGN_CD, 'C', BQ.POR_CNT_CD)
        OR  (
                NC.BKG_POR_TP_CD  = 'G'
            AND EXISTS  (
                        SELECT  'X'
                        FROM    GL
                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POR_DEF_CD
                        AND     GL.LOC_CD         = BQ.POR_CD
                        )
            )
        )
/* POL */
AND     (
            NC.BKG_POL_DEF_CD IS NULL
        OR  NC.BKG_POL_DEF_CD = DECODE(NC.BKG_POL_TP_CD, 'L', BQ.POL_CD, 'T', BQ.POL_STE_CD, 'R', BQ.POL_RGN_CD, 'C', BQ.POL_CNT_CD)
        OR  (
                NC.BKG_POL_TP_CD  = 'G'
            AND EXISTS  (
                        SELECT  'X'
                        FROM    GL
                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POL_DEF_CD
                        AND     GL.LOC_CD         = BQ.POL_CD
                        )
            )
        )
/* POD */
AND     (
            NC.BKG_POD_DEF_CD IS NULL
        OR  NC.BKG_POD_DEF_CD = DECODE(NC.BKG_POD_TP_CD, 'L', BQ.POD_CD, 'T', BQ.POD_STE_CD, 'R', BQ.POD_RGN_CD, 'C', BQ.POD_CNT_CD)
        OR  (
                NC.BKG_POD_TP_CD  = 'G'
            AND EXISTS  (
                        SELECT  'X'
                        FROM    GL
                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POD_DEF_CD
                        AND     GL.LOC_CD         = BQ.POD_CD
                        )
            )
        )
/* DEL */
AND     (
            NC.BKG_DEL_DEF_CD IS NULL
        OR  NC.BKG_DEL_DEF_CD = DECODE(NC.BKG_DEL_TP_CD, 'L', BQ.DEL_CD, 'T', BQ.DEL_STE_CD, 'R', BQ.DEL_RGN_CD, 'C', BQ.DEL_CNT_CD)
        OR  (
                NC.BKG_DEL_TP_CD  = 'G'
            AND EXISTS  (
                        SELECT  'X'
                        FROM    GL
                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_DEL_DEF_CD
                        AND     GL.LOC_CD         = BQ.DEL_CD
                        )
            )
        )


/*******************************************************************************************
SOC
*******************************************************************************************/

AND     (
            NC.BKG_SOC_FLG  IS NULL
        OR  NC.BKG_SOC_FLG  = BQ.SOC_FLG
        )


/*******************************************************************************************
< T/S PORT >
T/S 가 발생하는 PORT 를 대상으로 한다.
*******************************************************************************************/
AND     (
            NC.BKG_TS_PORT_DEF_CD IS NULL
        OR  EXISTS  (
                    SELECT  'X'
                    FROM    BKG_VVD       V1  ,
                            BKG_VVD       V2  ,
                            MDM_LOCATION  LO
                    WHERE   V2.BKG_NO     = V1.BKG_NO
                    AND     V2.POL_CD     = V1.POD_CD
                    AND     LO.LOC_CD     = V1.POD_CD
                    AND     V1.BKG_NO     = BQ.BKG_NO
                    AND     DECODE(NC.BKG_TS_PORT_TP_CD, 'L', LO.LOC_CD, 'T', LO.CNT_CD||LO.STE_CD, 'R', LO.RGN_CD, 'C', LO.CNT_CD) = NC.BKG_TS_PORT_DEF_CD
                    AND     @[ca_flg]     = 'N'

                    UNION ALL

                    SELECT  'X'
                    FROM    BKG_VVD_HIS   V1  ,
                            BKG_VVD_HIS   V2  ,
                            MDM_LOCATION  LO
                    WHERE   V2.BKG_NO     = V1.BKG_NO
                    AND     V2.CORR_NO    = V1.CORR_NO
                    AND     V2.POL_CD     = V1.POD_CD
                    AND     LO.LOC_CD     = V1.POD_CD
                    AND     V1.BKG_NO     = BQ.BKG_NO
                    AND     V1.CORR_NO    = BQ.CORR_NO
                    AND     DECODE(NC.BKG_TS_PORT_TP_CD, 'L', LO.LOC_CD, 'T', LO.CNT_CD||LO.STE_CD, 'R', LO.RGN_CD, 'C', LO.CNT_CD) = NC.BKG_TS_PORT_DEF_CD
                    AND     @[ca_flg]     = 'Y'
                    )
        )
/* DIR CALL */
AND     (
            NC.BKG_DIR_CALL_FLG IS NULL
        OR  NC.BKG_DIR_CALL_FLG = BQ.DIR_CALL_FLG
        )

) ,
NC_P AS
(

/*******************************************************************************************
적용될 CONVERSION 이 같은 NOTE_CONV_TP_CD 에서 하나의 NOTE_CONV_RULE_CD 가 되도록 우선순위가 낮은 것을 제거한다.
우선순위가 똑같은 경우에는 NOTE_CONV_MAPG_ID||LPAD(NOTE_CONV_SEQ, 6, '0') 가 적은 것을 우선한다.

'TYP' 1개의 RULE CODE 를 가진 BKG DATA 를 UNION ALL 로 추가한다.
이 부분은 계약과 BKG 를 직접 비교하지 않고, NOTE CONV 와만 비교하도록 하기 위함이다.
*******************************************************************************************/

SELECT  NC.OFT_CMB_SEQ              ,
        NC.BQ_SEQ                   ,
        NC.BKG_BQ_SEQ               ,
        NC.NOTE_CONV_MAPG_ID        ,
        NC.NOTE_CONV_SEQ            ,
        'C' BKG_CONV_TP_CD          ,
        NC.GEN_SPCL_RT_TP_CD        ,
        NC.CMDT_HDR_SEQ             ,
        NC.ROUT_SEQ                 ,
        NC.CONV_TP_PRIO             ,
        NC.NOTE_CONV_TP_CD          ,
        NC.CHG_RULE_TP_CD           ,
        NC.NOTE_CONV_CHG_CD         ,
        NC.NOTE_CONV_RULE_CD        ,
        NC.CONV_RAT_UT_CD           ,
        ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = NC.CONV_RAT_UT_CD ) CONV_RAT_UT_SZ_CD   ,
        NC.CONV_DR_TP               ,
        NC.CONV_DG_TP               ,
        NC.CONV_RF_TP               ,
        NC.CONV_AK_TP               ,
        NC.CONV_BB_TP               ,
        NC.CONV_CMDT_TP_CD          ,
        NC.CONV_CMDT_DEF_CD         ,
        NC.CONV_ORG_LOC_TP_CD       ,
        NC.CONV_ORG_LOC_DEF_CD      ,
        NC.CONV_ORG_VIA_LOC_TP_CD   ,
        NC.CONV_ORG_VIA_LOC_DEF_CD  ,
        NC.CONV_DEST_VIA_LOC_TP_CD  ,
        NC.CONV_DEST_VIA_LOC_DEF_CD ,
        NC.CONV_DEST_LOC_TP_CD      ,
        NC.CONV_DEST_LOC_DEF_CD     ,
        NC.CONV_PRC_RCV_TERM_CD     ,
        NC.CONV_PRC_DE_TERM_CD      ,
        NC.BKG_MST_HBL_TP_CD        ,
        NC.MIN_CGO_WGT              ,
        NC.MAX_CGO_WGT              ,
        NC.HNGR_BAR_USE_FLG         ,
        NC.PRC_HNGR_BAR_TP_CD       ,
        NC.SOC_USE_FLG              ,
        NC.BKG_RAT_UT_CD            ,
        NC.BKG_PRC_CGO_TP_CD        ,
        NC.BKG_IMDG_CLSS_CD         ,
        NC.RT_APPL_TP_CD            ,
        NC.RT_OP_CD                 ,
        NC.CURR_CD                  ,
        NC.FRT_RT_AMT               ,
        NC.PAY_TERM_CD              ,
        NC.MTCH_PRIO
FROM    NC
WHERE   ROW_NUMBER  = 1
UNION ALL
SELECT  BQ.OFT_CMB_SEQ                                  ,
        BQ.BQ_SEQ                                       ,
        BQ.BKG_BQ_SEQ                                   ,
        NULL                  NOTE_CONV_MAPG_ID         ,
        NULL                  NOTE_CONV_SEQ             ,
        'B'                   BKG_CONV_TP_CD            ,
        NULL                  GEN_SPCL_RT_TP_CD         ,
        0                     CMDT_HDR_SEQ              ,
        0                     ROUT_SEQ                  ,
        0                     CONV_TP_PRIO              , /* BKG 의 CONV_TP_PRIO 는 0 으로 어떤 CONV 보다 높은 우선 순위를 가지게 한다. */
        NULL                  NOTE_CONV_TP_CD           ,
        'R'                   CHG_RULE_TP_CD            ,
        NULL                  NOTE_CONV_CHG_CD          ,
        RC.NOTE_CONV_RULE_CD  NOTE_CONV_RULE_CD         ,
        BQ.CTRT_CNTR_TPSZ_CD  CONV_RAT_UT_CD            ,
        ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = BQ.CTRT_CNTR_TPSZ_CD )  CONV_RAT_UT_SZ_CD   ,
        BQ.DR_TP              CONV_DR_TP                ,
        BQ.DG_TP              CONV_DG_TP                ,
        BQ.RF_TP              CONV_RF_TP                ,
        BQ.AK_TP              CONV_AK_TP                ,
        BQ.BB_TP              CONV_BB_TP                ,
        'C'                   CONV_CMDT_TP_CD           ,
        BQ.CMDT_CD            CONV_CMDT_DEF_CD          ,
        'L'                   CONV_ORG_LOC_TP_CD        ,
        BQ.POR_CD             CONV_ORG_LOC_DEF_CD       ,
        'L'                   CONV_ORG_VIA_LOC_TP_CD    ,
        BQ.POL_CD             CONV_ORG_VIA_LOC_DEF_CD   ,
        'L'                   CONV_DEST_VIA_LOC_TP_CD   ,
        BQ.POD_CD             CONV_DEST_VIA_LOC_DEF_CD  ,
        'L'                   CONV_DEST_LOC_TP_CD       ,
        BQ.DEL_CD             CONV_DEST_LOC_DEF_CD      ,
        BQ.RCV_TERM_CD        CONV_PRC_RCV_TERM_CD      ,
        BQ.DE_TERM_CD         CONV_PRC_DE_TERM_CD       ,
        NULL                  BKG_MST_HBL_TP_CD         ,
        NULL                  MIN_CGO_WGT               ,
        NULL                  MAX_CGO_WGT               ,
        NULL                  HNGR_BAR_USE_FLG          ,
        NULL                  PRC_HNGR_BAR_TP_CD        ,
        NULL                  SOC_USE_FLG               ,
        BQ.CTRT_CNTR_TPSZ_CD  BKG_RAT_UT_CD             ,
        BQ.PRC_CGO_TP_CD      BKG_PRC_CGO_TP_CD         ,
        BQ.IMDG_CLSS_CD       BKG_IMDG_CLSS_CD          ,
        NULL                  RT_APPL_TP_CD             ,
        NULL                  RT_OP_CD                  ,
        NULL                  CURR_CD                   ,
        NULL                  FRT_RT_AMT                ,
        NULL                  PAY_TERM_CD               ,
        NULL                  MTCH_PRIO
FROM    BQ  ,
        (
        SELECT  'TYP' NOTE_CONV_RULE_CD FROM DUAL
        ) RC
) ,
C1 AS (
/*******************************************************************************************
< CONVERSION SURCHARGE >

S Subject         : Tariff Surcharge 를 적용하겠다.
I Include         : Subjrect 와 동일 ( 단, 표시만 'I' )
F Fix Amount      : 고정 값
A Adjust Adjust   : Tariff Surcharge 에 계산 공식 적용 + - * /, Lower 는 더 낮은값, Higher 는 더 높은 값.
N Not Applicable  : Tariff Surcharge 도 적용하지 않겠다.


NOT RULE 의 RT_APPL_TP_CD 는 S 와 I 만 존재한다.

MTCH_PRIO 가 같은데.. CMDT 와 ROUT 만의 MTCH_PRIO 도 같으면 ERROR 로직 발생해야하는데..
*******************************************************************************************/

SELECT  C1.OFT_CMB_SEQ          ,
        C1.BQ_SEQ               ,
        C1.BKG_BQ_SEQ           ,
        C1.SEL_TP_CD            ,
        C1.SEL_TP_PRIO          ,
        C1.CHG_CD               ,

        CASE
        WHEN C1.RAT_UT_CD = 'PC' AND SP.FLT_PCT_TP_CD = 'P' THEN SP.FLT_PCT_TP_CD
        ELSE 'F'
        END FLT_PCT_TP_CD       ,
        CASE
        WHEN C1.RAT_UT_CD = 'PC' AND SP.FLT_PCT_TP_CD = 'P' THEN SP.PCT_BSE_CD
        ELSE NULL
        END PCT_BSE_CD          ,

        C1.SOC_USE_FLG          ,
        C1.HNGR_BAR_USE_FLG     ,
        C1.IO_GA_USE_FLG        ,
        C1.CGO_WGT_USE_FLG      ,
        C1.PRC_HNGR_BAR_TP_CD   ,
        C1.IO_GA_CD             ,
        C1.MIN_CGO_WGT          ,
        C1.MAX_CGO_WGT          ,
        C1.RT_APPL_TP_CD        ,
        C1.RT_OP_CD             ,
        C1.CURR_CD              ,
        C1.FRT_RT_AMT           ,
        C1.CALC_FRT_RT_AMT      ,
        CASE
        WHEN  C1.FRT_RT_AMT <> C1.CALC_FRT_RT_AMT
          THEN  CASE
                WHEN C1.SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' ) AND C1.CHG_CD IN ( 'BUC', 'FRC' )
                  THEN ROUND(C1.CALC_FRT_RT_AMT)
                WHEN C1.SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' )
                  THEN TRUNC(C1.CALC_FRT_RT_AMT, -1) + CASE WHEN MOD(C1.CALC_FRT_RT_AMT, 10) < 2.5 THEN 0 WHEN MOD(C1.CALC_FRT_RT_AMT, 10) < 7.5 THEN 5 ELSE 10 END
                ELSE ROUND(C1.CALC_FRT_RT_AMT, 2)
                END
        ELSE  C1.FRT_RT_AMT
        END RND_FRT_RT_AMT      ,
        C1.TYP_BKG_CONV_TP_CD   ,
        C1.RAT_UT_CD            ,
        C1.PRC_CGO_TP_CD        ,
        C1.IMDG_CLSS_CD         ,
        C1.PAY_TERM_CD          ,
        C1.RT_INCL_FLG          ,
        C1.BKG_MST_HBL_TP_CD
FROM    (
        SELECT  C.OFT_CMB_SEQ         ,
                C.BQ_SEQ              ,
                C.BKG_BQ_SEQ          ,
                'C'                 SEL_TP_CD           ,
                1                   SEL_TP_PRIO         ,

                ROW_NUMBER() OVER ( PARTITION BY C.OFT_CMB_SEQ, C.BQ_SEQ, C.NOTE_CONV_CHG_CD, NVL(C.MIN_CGO_WGT,0), NVL(C.MAX_CGO_WGT,0), C.PRC_HNGR_BAR_TP_CD
                                    ORDER BY
                                      ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = C.NOTE_CONV_TP_CD )  ,
                                      C.MTCH_PRIO DESC  ,
                                      DECODE(C_TYP.BKG_CONV_TP_CD, 'B', 10, 'C', 0)
                                      + DECODE(C.BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, 'PC', 4, 'CM', 4, 'MT', 4, 'RM', 4, NULL, 4, 6) DESC
                                  ) ROW_NUMBER          ,
                C.NOTE_CONV_CHG_CD  CHG_CD              ,
                C.SOC_USE_FLG                           ,
                C.HNGR_BAR_USE_FLG                      ,
                'N'                 IO_GA_USE_FLG       ,
                CASE
                WHEN NVL(TO_NUMBER(C.MIN_CGO_WGT), 0) <> 0 OR NVL(TO_NUMBER(C.MAX_CGO_WGT), 0) <> 0
                  THEN  'Y'
                ELSE    'N'
                END                 CGO_WGT_USE_FLG     ,
                C.PRC_HNGR_BAR_TP_CD                    ,
                NULL                IO_GA_CD            ,
                TO_NUMBER(C.MIN_CGO_WGT)  MIN_CGO_WGT   ,
                TO_NUMBER(C.MAX_CGO_WGT)  MAX_CGO_WGT   ,
                C.RT_APPL_TP_CD                         ,
                C.RT_OP_CD                              ,
                C.CURR_CD                               ,

                C.FRT_RT_AMT                            ,
                CASE
                WHEN C_TYP.BKG_CONV_TP_CD = 'C' AND C_TYP.RT_OP_CD = '+'
                  THEN  C.FRT_RT_AMT + C_TYP.FRT_RT_AMT
                WHEN C_TYP.BKG_CONV_TP_CD = 'C' AND C_TYP.RT_OP_CD = '-'
                  THEN  C.FRT_RT_AMT - C_TYP.FRT_RT_AMT
                WHEN C_TYP.BKG_CONV_TP_CD = 'C' AND C_TYP.RT_OP_CD = '*'
                  THEN  C.FRT_RT_AMT * C_TYP.FRT_RT_AMT
                WHEN C_TYP.BKG_CONV_TP_CD = 'C' AND C_TYP.RT_OP_CD = '/'
                  THEN  C.FRT_RT_AMT / C_TYP.FRT_RT_AMT
                ELSE  C.FRT_RT_AMT
                END CALC_FRT_RT_AMT                     ,
                BQ.SVC_SCP_CD                           ,
                BQ.BKG_SVC_SCP_CD                       ,
                C_TYP.BKG_CONV_TP_CD  TYP_BKG_CONV_TP_CD,
                C.BKG_RAT_UT_CD       RAT_UT_CD         ,
                C.BKG_PRC_CGO_TP_CD   PRC_CGO_TP_CD     ,
                C.BKG_IMDG_CLSS_CD    IMDG_CLSS_CD      ,
                C.PAY_TERM_CD                           ,
                CASE
                WHEN  C_NOT.RT_APPL_TP_CD = 'I' AND C.NOTE_CONV_CHG_CD NOT IN ( 'WHF', 'AST', 'GST', 'VDT', 'VTT', 'GRI', 'OAR', 'DAR', 'OIH', 'DIH' )
                  THEN  'Y'
                ELSE  DECODE(C.RT_APPL_TP_CD, 'I', 'Y', 'N')
                END RT_INCL_FLG                         ,
                DECODE(C_NOT.BKG_CONV_TP_CD, 'C', 'Y', 'N') NOT_RULE_FLG  ,
                C.BKG_MST_HBL_TP_CD
        FROM    BQ          ,
                NC_P  C     ,
                NC_P  C_TYP ,
                NC_P  C_NOT
        WHERE   C.OFT_CMB_SEQ               = BQ.OFT_CMB_SEQ
        AND     C.BQ_SEQ                    = BQ.BQ_SEQ
        AND     C.CHG_RULE_TP_CD            = 'C'
        AND     C_TYP.OFT_CMB_SEQ           = BQ.OFT_CMB_SEQ
        AND     C_TYP.BQ_SEQ                = BQ.BQ_SEQ
        AND     C_TYP.NOTE_CONV_RULE_CD     = 'TYP'
        AND     C_NOT.OFT_CMB_SEQ(+)        = C.OFT_CMB_SEQ
        AND     C_NOT.BQ_SEQ(+)             = C.BQ_SEQ
        AND     C_NOT.NOTE_CONV_RULE_CD(+)  = 'NOT'
        AND     C_NOT.CONV_TP_PRIO(+)       < C.CONV_TP_PRIO

        /* RATING UNIT */
        AND     (
                        C.BKG_RAT_UT_CD IS NULL
                    OR  C.BKG_RAT_UT_CD = C_TYP.CONV_RAT_UT_CD
                    OR  C.BKG_RAT_UT_CD IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )
                    OR
                    (
                        C.BKG_RAT_UT_CD IN ( '20', '40', 'HC', '45', '53' )
                    AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = C.BKG_RAT_UT_CD ) = C_TYP.CONV_RAT_UT_SZ_CD
                    )
                )
        ) C1  ,
        PRI_SCG_PRF SP
WHERE   SP.SVC_SCP_CD(+)  = C1.BKG_SVC_SCP_CD   /* BKG_SVC_SCP_CD 를 사용한다. */
AND     SP.CHG_CD(+)      = C1.CHG_CD
AND     C1.ROW_NUMBER     = 1

/*******************************************************************************************
NOT RULE 적용
*******************************************************************************************/

AND     NOT (
                C1.NOT_RULE_FLG  = 'Y'
            AND C1.RT_INCL_FLG   = 'N'
            AND C1.CHG_CD        NOT IN ( 'WHF', 'AST', 'GST', 'VDT', 'VTT', 'GRI', 'OAR', 'DAR', 'OIH', 'DIH' )
            )
) ,
G2 AS (

/*******************************************************************************************
< GOH >
BAR TYPE 별 ROW 구분 있음.

TYPE RULE CODE 가 적용되기는 하지만, 운임 계산은 하지 않고, 계약서에 있는 운임을 그대로 사용한다.

- BKG Special Cargo 정보 중 Hanger 정보가 있고, S/C상에 해당하는 GOH 운임이 존재하는 경우 Rating
*******************************************************************************************/

SELECT  OFT_CMB_SEQ         ,
        BQ_SEQ              ,
        BKG_BQ_SEQ          ,
        SEL_TP_CD           ,
        SEL_TP_PRIO         ,
        CHG_CD              ,
        FLT_PCT_TP_CD       ,
        PCT_BSE_CD          ,
        SOC_USE_FLG         ,
        HNGR_BAR_USE_FLG    ,
        IO_GA_USE_FLG       ,
        CGO_WGT_USE_FLG     ,
        PRC_HNGR_BAR_TP_CD  ,
        IO_GA_CD            ,
        MIN_CGO_WGT         ,
        MAX_CGO_WGT         ,
        RT_APPL_TP_CD       ,
        RT_OP_CD            ,
        CURR_CD             ,
        FRT_RT_AMT          ,
        TYP_BKG_CONV_TP_CD  ,

/*******************************************************************************************
TYP CONVERSION 이 적용된 경우라도, 금액 계산은 발생하지 않는다. ( 임으로 '+ 0' 으로 처리 )
*******************************************************************************************/

        '+' TYP_RT_OP_CD    ,
        0   TYP_FRT_RT_AMT  ,
        RAT_UT_CD           ,
        PRC_CGO_TP_CD       ,
        IMDG_CLSS_CD        ,
        PAY_TERM_CD         ,
        RT_INCL_FLG         ,
        NOT_RULE_FLG        ,
        NULL  BKG_MST_HBL_TP_CD ,
        NOTE_RT_APPL_TP_CD
FROM    (
        SELECT  BQ.OFT_CMB_SEQ            ,
                BQ.BQ_SEQ                 ,
                BQ.BKG_BQ_SEQ             ,
                'G'   SEL_TP_CD           ,
                2     SEL_TP_PRIO         ,

                ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, GH.PRC_HNGR_BAR_TP_CD
                                    ORDER BY

/*******************************************************************************************
ADJUST 인 경우 최우선으로 적용한다.
*******************************************************************************************/

                                      NVL(  (
                                            SELECT  '1'
                                            FROM    C1
                                            WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ
                                            AND     C1.BQ_SEQ         = BQ.BQ_SEQ
                                            AND     C1.CHG_CD         = 'GOH'
                                            AND     C1.RT_APPL_TP_CD  = 'A'
                                            AND     (
                                                        NVL(C1.RAT_UT_CD, 'BX') IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )
                                                    OR  GH.RAT_UT_CD            IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )
                                                    OR  C1.RAT_UT_CD            = GH.RAT_UT_CD
                                                    OR  ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = C1.RAT_UT_CD )  = ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = GH.RAT_UT_CD )
                                                    )
                                            AND     ROWNUM            = 1
                                            ), '2') ,
                                      DECODE(C_TYP.BKG_CONV_TP_CD, 'B', 2000, 'C', 1000, 0)
                                        + DECODE(GH.ROUT_PNT_LOC_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                        + DECODE(GH.RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BX', 4, 'BL', 3, NULL, 0, 6) DESC
                                  ) ROW_NUMBER  ,

                'GOH' CHG_CD              ,

                NULL  FLT_PCT_TP_CD       ,
                NULL  PCT_BSE_CD          ,

                'N'   SOC_USE_FLG         ,
                'Y'   HNGR_BAR_USE_FLG    ,
                'N'   IO_GA_USE_FLG       ,
                'N'   CGO_WGT_USE_FLG     ,

                GH.PRC_HNGR_BAR_TP_CD     ,
                NULL  IO_GA_CD            ,
                NULL  MIN_CGO_WGT         ,
                NULL  MAX_CGO_WGT         ,
                NULL  RT_APPL_TP_CD       ,
                NULL  RT_OP_CD            ,

                GH.CURR_CD                ,
                GH.FNL_FRT_RT_AMT   FRT_RT_AMT  ,

                C_TYP.BKG_CONV_TP_CD  TYP_BKG_CONV_TP_CD  ,
                GH.RAT_UT_CD              ,
                NULL  PRC_CGO_TP_CD       ,
                NULL  IMDG_CLSS_CD        ,

                ( SELECT A.CHG_APLY_AREA_CD FROM MDM_CHARGE A WHERE A.CHG_CD = 'GOH' ) PAY_TERM_CD  ,

                'N'   RT_INCL_FLG         ,
                'N'   NOT_RULE_FLG        ,

                (
                SELECT  C1.RT_APPL_TP_CD
                FROM    C1
                WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ
                AND     C1.BQ_SEQ         = BQ.BQ_SEQ
                AND     C1.CHG_CD         = 'GOH'
                AND     (
                            NVL(C1.RAT_UT_CD, 'BX') IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )
                        OR  GH.RAT_UT_CD            IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )
                        OR  C1.RAT_UT_CD            = GH.RAT_UT_CD
                        OR  ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = C1.RAT_UT_CD )  = ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = GH.RAT_UT_CD )
                        )
                AND     ROWNUM            = 1
                ) NOTE_RT_APPL_TP_CD

        FROM    BQ                        ,
                PRI_SP_SCP_GOH_CHG  GH    ,
                NC_P                C_TYP
        WHERE   GH.PROP_NO              = BQ.PROP_NO
        AND     GH.AMDT_SEQ             = BQ.AMDT_SEQ
        AND     GH.SVC_SCP_CD           = BQ.SVC_SCP_CD
        AND     C_TYP.OFT_CMB_SEQ       = BQ.OFT_CMB_SEQ
        AND     C_TYP.BQ_SEQ            = BQ.BQ_SEQ
        AND     C_TYP.NOTE_CONV_RULE_CD = 'TYP'
        /* POR */
        AND     (
                    GH.ROUT_PNT_LOC_DEF_CD = DECODE(GH.ROUT_PNT_LOC_TP_CD, 'L', BQ.POR_CD, 'T', BQ.POR_STE_CD, 'R', BQ.POR_RGN_CD, 'C', BQ.POR_CNT_CD)
                OR  (
                        GH.ROUT_PNT_LOC_TP_CD = 'G'
                    AND EXISTS  (
                                SELECT  'X'
                                FROM    GL
                                WHERE   GL.PRC_GRP_LOC_CD = GH.ROUT_PNT_LOC_DEF_CD
                                AND     GL.LOC_CD         = BQ.POR_CD
                                )
                    )
                )
        /* RATING UNIT */
        AND     (
                        GH.RAT_UT_CD  = C_TYP.CONV_RAT_UT_CD
                    OR  GH.RAT_UT_CD  IN ( 'BX', 'BL' )
                    OR
                    (
                        GH.RAT_UT_CD  IN ( '20', '40', 'HC', '45', '53' )
                    AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = GH.RAT_UT_CD )  = C_TYP.CONV_RAT_UT_SZ_CD
                    )
                )

/*******************************************************************************************
< RT_APPL_TP_CD = 'N' (Not Applicable) >
*******************************************************************************************/
        AND     NOT EXISTS  (
                            SELECT  'X'
                            FROM    C1
                            WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ
                            AND     C1.BQ_SEQ         = BQ.BQ_SEQ
                            AND     C1.CHG_CD         = 'GOH'
                            AND     C1.RT_APPL_TP_CD  = 'N'
                            )

        )
WHERE   ROW_NUMBER    = 1
AND     @[ctrt_tp_cd] = 'S'

) ,
S3 AS
(
/*******************************************************************************************
< TARIFF SURCHARGE >
*******************************************************************************************/

SELECT  OFT_CMB_SEQ         ,
        BQ_SEQ              ,
        BKG_BQ_SEQ          ,
        SEL_TP_CD           ,
        SEL_TP_PRIO         ,
        CHG_CD              ,
        FLT_PCT_TP_CD       ,
        PCT_BSE_CD          ,
        SOC_USE_FLG         ,
        HNGR_BAR_USE_FLG    ,
        IO_GA_USE_FLG       ,
        CGO_WGT_USE_FLG     ,
        PRC_HNGR_BAR_TP_CD  ,
        IO_GA_CD            ,
        TO_NUMBER(MIN_CGO_WGT)  MIN_CGO_WGT ,
        TO_NUMBER(MAX_CGO_WGT)  MAX_CGO_WGT ,
        RT_APPL_TP_CD       ,
        RT_OP_CD            ,
        CURR_CD             ,
        FRT_RT_AMT          ,
        TYP_BKG_CONV_TP_CD  ,
        TYP_RT_OP_CD        ,
        TYP_FRT_RT_AMT      ,
        RAT_UT_CD           ,
        PRC_CGO_TP_CD       ,
        IMDG_CLSS_CD        ,
        PAY_TERM_CD         ,
        RT_INCL_FLG         ,
        NOT_RULE_FLG        ,
        NULL  BKG_MST_HBL_TP_CD ,
        NOTE_RT_APPL_TP_CD
FROM    (
        SELECT  BQ.OFT_CMB_SEQ            ,
                BQ.BQ_SEQ                 ,
                BQ.BKG_BQ_SEQ             ,
                'S'   SEL_TP_CD           ,
                3     SEL_TP_PRIO         ,

                ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, SP.CHG_CD,
                                      DECODE(SP.HNGR_BAR_USE_FLG, 'N', NULL, SR.PRC_HNGR_BAR_TP_CD) ,
                                      DECODE(SP.IO_GA_USE_FLG   , 'N', NULL, SR.IO_GA_CD          ) ,
                                      DECODE(SP.CGO_WGT_USE_FLG , 'N', NULL, SR.MIN_CGO_WGT       ) ,
                                      DECODE(SP.CGO_WGT_USE_FLG , 'N', NULL, SR.MAX_CGO_WGT       ) ,
                                      DECODE(SP.CHG_CD, 'CFR', SR.RAT_UT_CD, 'CFD', SR.RAT_UT_CD, NULL)
                                    ORDER BY

/*******************************************************************************************
ADJUST 인 경우 최우선으로 적용한다.
*******************************************************************************************/

                                      NVL(  (
                                            SELECT  '1'
                                            FROM    C1
                                            WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ
                                            AND     C1.BQ_SEQ         = BQ.BQ_SEQ
                                            AND     C1.CHG_CD         = SP.CHG_CD
                                            AND     C1.RT_APPL_TP_CD  = 'A'
                                            AND     (
                                                        NVL(C1.RAT_UT_CD, 'BX') IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )
                                                    OR  SR.RAT_UT_CD            IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )
                                                    OR  C1.RAT_UT_CD            = SR.RAT_UT_CD
                                                    OR  ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = C1.RAT_UT_CD )  = ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = SR.RAT_UT_CD )
                                                    )
                                            AND     ROWNUM            = 1
                                            ), '2') ,
                                      GREATEST(DECODE(SR.CMDT_CD, NULL, 0, 600), DECODE(SR.SCG_GRP_CMDT_CD, NULL, 0, 500))
                                        + DECODE(SR.POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                        + DECODE(SR.POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                        + DECODE(SR.POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                        + DECODE(SR.DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)
                                        + DECODE(C_TYP.BKG_CONV_TP_CD, 'B', 10, 'C', 0)
                                        + DECODE(SR.RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, 'PC', 4, 'CM', 4, 'MT', 4, 'RM', 4, NULL, 4, 6)
                                        + DECODE(SR.PRC_CGO_TP_CD       , NULL, 0, 1)
                                        + DECODE(SR.SCG_IMDG_CLSS_CD    , NULL, 0, 1)
                                        + DECODE(SR.USA_SVC_MOD_CD      , NULL, 0, 1)
                                        + DECODE(SR.ORG_TRSP_MOD_CD     , NULL, 0, 1)
                                        + DECODE(SR.DEST_TRSP_MOD_CD    , NULL, 0, 1)
                                        + DECODE(SR.PRC_RCV_TERM_CD     , NULL, 0, 1)
                                        + DECODE(SR.PRC_DE_TERM_CD      , NULL, 0, 1)
                                        + DECODE(SR.VSL_SLAN_CD         , NULL, 0, 1)
                                        + DECODE(SR.SOC_FLG             , NULL, 0, 1)
                                        + DECODE(SR.TS_PORT_CD          , NULL, 0, 1)
                                        + DECODE(SR.DIR_CALL_FLG        , NULL, 0, 1)
                                        + DECODE(SR.SUB_TRD_CD          , NULL, 0, 1)
                                        + DECODE(SR.PRC_HNGR_BAR_TP_CD  , NULL, 0, 1)
                                        + DECODE(SR.IO_GA_CD            , NULL, 0, 1)
                                        + DECODE(SR.MIN_CGO_WGT         , NULL, 0, 1)
                                        + DECODE(SR.MAX_CGO_WGT         , NULL, 0, 1) DESC  ,
                                      DECODE(SR.PAY_TERM_CD, BQ.FRT_TERM_CD, 1, 'O', 2, 3)
                                  ) ROW_NUMBER  ,

                SP.CHG_CD                 ,

                SP.FLT_PCT_TP_CD          ,
                SP.PCT_BSE_CD             ,

                SP.SOC_USE_FLG            ,
                SP.HNGR_BAR_USE_FLG       ,
                SP.IO_GA_USE_FLG          ,
                SP.CGO_WGT_USE_FLG        ,

                DECODE(SP.HNGR_BAR_USE_FLG, 'N', NULL, SR.PRC_HNGR_BAR_TP_CD) PRC_HNGR_BAR_TP_CD  ,
                DECODE(SP.IO_GA_USE_FLG   , 'N', NULL, SR.IO_GA_CD          ) IO_GA_CD            ,
                DECODE(SP.CGO_WGT_USE_FLG , 'N', NULL, SR.MIN_CGO_WGT       ) MIN_CGO_WGT         ,
                DECODE(SP.CGO_WGT_USE_FLG , 'N', NULL, SR.MAX_CGO_WGT       ) MAX_CGO_WGT         ,
                NULL  RT_APPL_TP_CD       ,
                NULL  RT_OP_CD            ,

                SR.CURR_CD                ,

                SR.SCG_AMT  FRT_RT_AMT    ,
                BQ.SVC_SCP_CD             ,
                C_TYP.BKG_CONV_TP_CD  TYP_BKG_CONV_TP_CD  ,
                C_TYP.RT_OP_CD        TYP_RT_OP_CD        ,
                C_TYP.FRT_RT_AMT      TYP_FRT_RT_AMT      ,

                SR.RAT_UT_CD              ,
                SR.PRC_CGO_TP_CD          ,
                DECODE(SP.IMDG_CLSS_USE_FLG , 'N', NULL, SR.SCG_IMDG_CLSS_CD) IMDG_CLSS_CD  ,
                NVL(SR.PAY_TERM_CD, MC.CHG_APLY_AREA_CD)  PAY_TERM_CD ,   -- 'P', 'C', 'O'

                CASE
                WHEN  C_NOT.RT_APPL_TP_CD = 'I' AND SP.CHG_CD NOT IN ( 'WHF', 'AST', 'GST', 'VDT', 'VTT', 'GRI', 'OAR', 'DAR', 'OIH', 'DIH' )
                  THEN  'Y'
                ELSE  'N'
                END RT_INCL_FLG       ,
                DECODE(C_NOT.BKG_CONV_TP_CD, 'C', 'Y', 'N') NOT_RULE_FLG  ,

                (
                SELECT  C1.RT_APPL_TP_CD
                FROM    C1
                WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ
                AND     C1.BQ_SEQ         = BQ.BQ_SEQ
                AND     C1.CHG_CD         = SP.CHG_CD
                AND     (
                            NVL(C1.RAT_UT_CD, 'BX') IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )
                        OR  SR.RAT_UT_CD            IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )
                        OR  C1.RAT_UT_CD            = SR.RAT_UT_CD
                        OR  ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = C1.RAT_UT_CD )  = ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = SR.RAT_UT_CD )
                        )
                AND     ROWNUM            = 1
                ) NOTE_RT_APPL_TP_CD

        FROM    BQ                  ,
                PRI_SCG_PRF   SP    ,
                MDM_CHARGE    MC    ,
                PRI_SCG_RT    SR    ,
                NC_P          C_TYP ,         /* RATING UNIT CONVERSION */
                NC_P          C_NOT
        WHERE   SP.SVC_SCP_CD               = BQ.BKG_SVC_SCP_CD   /* BKG_SVC_SCP_CD 를 사용한다. */
        AND     MC.CHG_CD                   = SP.CHG_CD
        AND     MC.AUTO_RAT_FLG             = 'Y'
        AND     SR.SVC_SCP_CD               = SP.SVC_SCP_CD
        AND     SR.CHG_CD                   = SP.CHG_CD
        AND     BQ.RT_APLY_DT               BETWEEN SR.EFF_DT AND SR.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */
        AND     SR.WDR_FLG                  = 'N'
        AND     SR.DELT_FLG                 = 'N'
        AND     C_TYP.OFT_CMB_SEQ           = BQ.OFT_CMB_SEQ
        AND     C_TYP.BQ_SEQ                = BQ.BQ_SEQ
        AND     C_TYP.NOTE_CONV_RULE_CD     = 'TYP'
        AND     C_NOT.OFT_CMB_SEQ(+)        = BQ.OFT_CMB_SEQ
        AND     C_NOT.BQ_SEQ(+)             = BQ.BQ_SEQ
        AND     C_NOT.NOTE_CONV_RULE_CD(+)  = 'NOT'

/*******************************************************************************************
R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )
*******************************************************************************************/
        AND     (
                    SR.PRC_RCV_TERM_CD  = BQ.RCV_TERM_CD
                OR  (
                        ( SP.RCV_DE_TERM_USE_FLG = 'N' OR SR.PRC_RCV_TERM_CD IS NULL )
                    AND (
                            MC.CHG_APLY_AREA_CD = 'C'
                        OR  BQ.RCV_TERM_CD  IN ( DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )
                        )
                    )
                )

        AND     (
                    SR.PRC_DE_TERM_CD   = BQ.DE_TERM_CD
                OR  (
                        ( SP.RCV_DE_TERM_USE_FLG = 'N' OR SR.PRC_DE_TERM_CD IS NULL )
                    AND (
                            MC.CHG_APLY_AREA_CD = 'P'
                        OR  BQ.DE_TERM_CD   IN ( DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )
                        )
                    )
                )


        /* POR */
        AND     (
                    SP.POR_USE_FLG  = 'N'
                OR  SR.POR_DEF_CD   IS NULL
                OR  SR.POR_DEF_CD   = DECODE(SR.POR_TP_CD, 'L', BQ.POR_CD, 'T', BQ.POR_STE_CD, 'R', BQ.POR_RGN_CD, 'C', BQ.POR_CNT_CD)
                OR  (
                        SR.POR_TP_CD  = 'G'
                    AND EXISTS  (
                                SELECT  'X'
                                FROM    PRI_SCG_GRP_LOC     GL  ,
                                        PRI_SCG_GRP_LOC_DTL GD
                                WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD
                                AND     GD.CHG_CD         = GL.CHG_CD
                                AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ
                                AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD
                                AND     GL.CHG_CD         = SR.CHG_CD
                                AND     GL.SCG_GRP_LOC_CD = SR.POR_DEF_CD
                                AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', BQ.POR_CD, 'T', BQ.POR_STE_CD, 'R', BQ.POR_RGN_CD, 'C', BQ.POR_CNT_CD)
                                )
                    )
                )
        /* POL */
        AND     (
                    SP.POL_USE_FLG  = 'N'
                OR  SR.POL_DEF_CD   IS NULL
                OR  SR.POL_DEF_CD   = DECODE(SR.POL_TP_CD, 'L', BQ.POL_CD, 'T', BQ.POL_STE_CD, 'R', BQ.POL_RGN_CD, 'C', BQ.POL_CNT_CD)
                OR  (
                        SR.POL_TP_CD  = 'G'
                    AND EXISTS  (
                                SELECT  'X'
                                FROM    PRI_SCG_GRP_LOC     GL  ,
                                        PRI_SCG_GRP_LOC_DTL GD
                                WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD
                                AND     GD.CHG_CD         = GL.CHG_CD
                                AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ
                                AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD
                                AND     GL.CHG_CD         = SR.CHG_CD
                                AND     GL.SCG_GRP_LOC_CD = SR.POL_DEF_CD
                                AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', BQ.POL_CD, 'T', BQ.POL_STE_CD, 'R', BQ.POL_RGN_CD, 'C', BQ.POL_CNT_CD)
                                )
                    )
                )
        /* POD */
        AND     (
                    SP.POD_USE_FLG  = 'N'
                OR  SR.POD_DEF_CD   IS NULL
                OR  SR.POD_DEF_CD   = DECODE(SR.POD_TP_CD, 'L', BQ.POD_CD, 'T', BQ.POD_STE_CD, 'R', BQ.POD_RGN_CD, 'C', BQ.POD_CNT_CD)
                OR  (
                        SR.POD_TP_CD  = 'G'
                    AND EXISTS  (
                                SELECT  'X'
                                FROM    PRI_SCG_GRP_LOC     GL  ,
                                        PRI_SCG_GRP_LOC_DTL GD
                                WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD
                                AND     GD.CHG_CD         = GL.CHG_CD
                                AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ
                                AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD
                                AND     GL.CHG_CD         = SR.CHG_CD
                                AND     GL.SCG_GRP_LOC_CD = SR.POD_DEF_CD
                                AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', BQ.POD_CD, 'T', BQ.POD_STE_CD, 'R', BQ.POD_RGN_CD, 'C', BQ.POD_CNT_CD)
                                )
                    )
                )
        /* DEL */
        AND     (
                    SP.DEL_USE_FLG  = 'N'
                OR  SR.DEL_DEF_CD   IS NULL
                OR  SR.DEL_DEF_CD   = DECODE(SR.DEL_TP_CD, 'L', BQ.DEL_CD, 'T', BQ.DEL_STE_CD, 'R', BQ.DEL_RGN_CD, 'C', BQ.DEL_CNT_CD)
                OR  (
                        SR.DEL_TP_CD  = 'G'
                    AND EXISTS  (
                                SELECT  'X'
                                FROM    PRI_SCG_GRP_LOC     GL  ,
                                        PRI_SCG_GRP_LOC_DTL GD
                                WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD
                                AND     GD.CHG_CD         = GL.CHG_CD
                                AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ
                                AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD
                                AND     GL.CHG_CD         = SR.CHG_CD
                                AND     GL.SCG_GRP_LOC_CD = SR.DEL_DEF_CD
                                AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', BQ.DEL_CD, 'T', BQ.DEL_STE_CD, 'R', BQ.DEL_RGN_CD, 'C', BQ.DEL_CNT_CD)
                                )
                    )
                )
        /* SUB TRADE */
        AND     (
                    SP.SUB_TRD_USE_FLG  = 'N'
                OR  SR.SUB_TRD_CD       IS NULL
                OR  SR.SUB_TRD_CD       IN
                    (
                    SELECT  DL.SUB_TRD_CD
                    FROM    (
                            SELECT  SLAN_CD     ,
                                    SKD_DIR_CD  ,
                                    ( SELECT A.CONTI_CD FROM MDM_LOCATION A WHERE A.LOC_CD = BV.POL_CD )  POL_CONTI_CD  ,
                                    ( SELECT A.CONTI_CD FROM MDM_LOCATION A WHERE A.LOC_CD = BV.POD_CD )  POD_CONTI_CD
                            FROM    BK  ,
                                    BKG_VVD BV
                            WHERE   BV.BKG_NO   = BK.BKG_NO
                            AND     @[ca_flg]   = 'N'

                            UNION ALL

                            SELECT  SLAN_CD     ,
                                    SKD_DIR_CD  ,
                                    ( SELECT A.CONTI_CD FROM MDM_LOCATION A WHERE A.LOC_CD = BV.POL_CD )  POL_CONTI_CD  ,
                                    ( SELECT A.CONTI_CD FROM MDM_LOCATION A WHERE A.LOC_CD = BV.POD_CD )  POD_CONTI_CD
                            FROM    BK  ,
                                    BKG_VVD_HIS BV
                            WHERE   BV.BKG_NO   = BK.BKG_NO
                            AND     BV.CORR_NO  = BK.CORR_NO
                            AND     @[ca_flg]   = 'Y'
                            ) BV  ,
                            MDM_REV_LANE        RL  ,
                            MDM_DTL_REV_LANE    DL
                    WHERE   RL.VSL_SLAN_CD      = BV.SLAN_CD
                    AND     RL.DELT_FLG         = 'N'
                    AND     DL.RLANE_CD         = RL.RLANE_CD
                    AND     DL.VSL_SLAN_DIR_CD  = BV.SKD_DIR_CD
                    AND     DL.FM_CONTI_CD      = BV.POL_CONTI_CD
                    AND     DL.TO_CONTI_CD      = BV.POD_CONTI_CD
                    AND     DL.DELT_FLG         = 'N'
                    )
                )

        /* LANE */
        AND     (
                    SP.SLAN_USE_FLG = 'N'
                OR  SR.VSL_SLAN_CD  IS NULL
                OR  EXISTS  (
                            SELECT  'X'
                            FROM    BKG_VVD BV
                            WHERE   BV.BKG_NO   = BQ.BKG_NO
                            AND     BV.SLAN_CD  = SR.VSL_SLAN_CD
                            AND     @[ca_flg]   = 'N'

                            UNION ALL

                            SELECT  'X'
                            FROM    BKG_VVD_HIS BV
                            WHERE   BV.BKG_NO   = BQ.BKG_NO
                            AND     BV.CORR_NO  = BQ.CORR_NO
                            AND     BV.SLAN_CD  = SR.VSL_SLAN_CD
                            AND     @[ca_flg]   = 'Y'
                            )
                )
        /* T/S PORT */
        AND     (
                    SP.TS_PORT_USE_FLG  = 'N'
                OR  SR.TS_PORT_CD       IS NULL
                OR  (
                        EXISTS  (
                                SELECT  'X'
                                FROM    BKG_VVD BV
                                WHERE   BV.BKG_NO = BQ.BKG_NO
                                AND     BV.POL_CD = SR.TS_PORT_CD
                                AND     @[ca_flg] = 'N'

                                UNION ALL

                                SELECT  'X'
                                FROM    BKG_VVD_HIS BV
                                WHERE   BV.BKG_NO   = BQ.BKG_NO
                                AND     BV.CORR_NO  = BQ.CORR_NO
                                AND     BV.POL_CD   = SR.TS_PORT_CD
                                AND     @[ca_flg] = 'Y'
                                )
                    AND EXISTS  (
                                SELECT  'X'
                                FROM    BKG_VVD BV
                                WHERE   BV.BKG_NO = BQ.BKG_NO
                                AND     BV.POD_CD = SR.TS_PORT_CD
                                AND     @[ca_flg] = 'N'

                                UNION ALL

                                SELECT  'X'
                                FROM    BKG_VVD_HIS BV
                                WHERE   BV.BKG_NO   = BQ.BKG_NO
                                AND     BV.CORR_NO  = BQ.CORR_NO
                                AND     BV.POD_CD   = SR.TS_PORT_CD
                                AND     @[ca_flg] = 'Y'
                                )
                    )
                )
        /* TERMINAL */
        AND     (
                    SP.TML_USE_FLG  = 'N'
                OR  SR.TML_CD       IS NULL
                OR  SR.TML_CD       = BQ.POL_NOD_CD
                OR  SR.TML_CD       = BQ.POD_NOD_CD
                )
        /* ORG TRANS MODE */
        AND     (
                    SP.TRNS_MOD_USE_FLG = 'N'
                OR  SR.ORG_TRSP_MOD_CD  IS NULL
                OR  NVL(SR.ORG_TRSP_MOD_CD, '*')  = NVL(BQ.ORG_TRNS_MOD_CD, '*')
                )
        /* DEST TRANS MODE */
        AND     (
                    SP.TRNS_MOD_USE_FLG = 'N'
                OR  SR.DEST_TRSP_MOD_CD IS NULL
                OR  NVL(SR.DEST_TRSP_MOD_CD, '*') = NVL(BQ.DEST_TRNS_MOD_CD, '*')
                )
        /* USA SVC MODE */
        AND     (
                    SP.USA_SVC_MOD_USE_FLG  = 'N'
                OR  SR.USA_SVC_MOD_CD       IS NULL
                OR  SR.USA_SVC_MOD_CD       = DECODE(SR.USA_SVC_MOD_CD, 'CZ', BQ.CML_ZN_CD, BQ.USA_SVC_MOD_CD )
                )

        /* DIR CALL */
        AND     (
                    SP.DIR_CALL_USE_FLG = 'N'
                OR  SR.DIR_CALL_FLG     IS NULL
                OR  SR.DIR_CALL_FLG     = BQ.DIR_CALL_FLG
                )

        /* COMMODITY */
        AND     (
                    SP.CMDT_USE_FLG   = 'N'
                OR  SR.CMDT_CD        IS NULL
                OR  SR.CMDT_CD        = BQ.CMDT_CD
                )
        /* SURCARGE GROUP COMMODITY ( GRI ) */
        AND     (
                    SP.GRI_CMDT_USE_FLG = 'N'
                OR  SR.SCG_GRP_CMDT_CD  IS NULL
                OR  EXISTS  (
                            SELECT  'X'
                            FROM    PRI_SCG_GRP_CMDT      GC  ,
                                    PRI_SCG_GRP_CMDT_DTL  GD
                            WHERE   GD.SVC_SCP_CD       = GC.SVC_SCP_CD
                            AND     GD.CHG_CD           = GC.CHG_CD
                            AND     GD.SCG_GRP_CMDT_SEQ = GC.SCG_GRP_CMDT_SEQ
                            AND     GC.SVC_SCP_CD       = SR.SVC_SCP_CD
                            AND     GC.CHG_CD           = SR.CHG_CD
                            AND     GC.SCG_GRP_CMDT_CD  = SR.SCG_GRP_CMDT_CD
                            AND     GD.CMDT_CD          = BQ.CMDT_CD
                            )
                )
        /* SOC */
        AND     (
                    SP.SOC_USE_FLG  = 'N'
                OR  SR.SOC_FLG      IS NULL
                OR  SR.SOC_FLG      = BQ.SOC_FLG
                )


/*******************************************************************************************
< CANAL >
P : PAPAC
S : EGSUC
*******************************************************************************************/

        AND     (
                    SP.CNL_TZ_FLG   = 'N'
                OR  SR.CNL_TZ_CD    IS NULL
                OR  EXISTS  (
                            SELECT  'X'
                            FROM    BKG_VVD           BV  ,
                                    VSK_VSL_PORT_SKD  S1  ,
                                    VSK_VSL_PORT_SKD  S2  ,
                                    VSK_VSL_PORT_SKD  S3
                            WHERE   BV.BKG_NO       = BQ.BKG_NO
                            AND     S1.VSL_CD       = BV.VSL_CD
                            AND     S1.SKD_VOY_NO   = BV.SKD_VOY_NO
                            AND     S1.SKD_DIR_CD   = BV.SKD_DIR_CD
                            AND     S1.VPS_PORT_CD  = BV.POL_CD
                            AND     S1.CLPT_IND_SEQ = BV.POL_CLPT_IND_SEQ
                            AND     S2.VSL_CD       = BV.VSL_CD
                            AND     S2.SKD_VOY_NO   = BV.SKD_VOY_NO
                            AND     S2.SKD_DIR_CD   = BV.SKD_DIR_CD
                            AND     S2.VPS_PORT_CD  = BV.POD_CD
                            AND     S2.CLPT_IND_SEQ = BV.POD_CLPT_IND_SEQ
                            AND     S3.VSL_CD       = BV.VSL_CD
                            AND     S3.SKD_VOY_NO   = BV.SKD_VOY_NO
                            AND     S3.SKD_DIR_CD   = BV.SKD_DIR_CD
                            AND     S3.VPS_PORT_CD  = DECODE(SR.CNL_TZ_CD, 'P', 'PAPAC', 'S', 'EGSUC')
                            AND     S3.CLPT_SEQ     BETWEEN S1.CLPT_SEQ AND S2.CLPT_SEQ
                            AND     @[ca_flg] = 'N'

                            UNION ALL

                            SELECT  'X'
                            FROM    BKG_VVD_HIS       BV  ,
                                    VSK_VSL_PORT_SKD  S1  ,
                                    VSK_VSL_PORT_SKD  S2  ,
                                    VSK_VSL_PORT_SKD  S3
                            WHERE   BV.BKG_NO       = BQ.BKG_NO
                            AND     BV.CORR_NO      = BQ.CORR_NO
                            AND     S1.VSL_CD       = BV.VSL_CD
                            AND     S1.SKD_VOY_NO   = BV.SKD_VOY_NO
                            AND     S1.SKD_DIR_CD   = BV.SKD_DIR_CD
                            AND     S1.VPS_PORT_CD  = BV.POL_CD
                            AND     S1.CLPT_IND_SEQ = BV.POL_CLPT_IND_SEQ
                            AND     S2.VSL_CD       = BV.VSL_CD
                            AND     S2.SKD_VOY_NO   = BV.SKD_VOY_NO
                            AND     S2.SKD_DIR_CD   = BV.SKD_DIR_CD
                            AND     S2.VPS_PORT_CD  = BV.POD_CD
                            AND     S2.CLPT_IND_SEQ = BV.POD_CLPT_IND_SEQ
                            AND     S3.VSL_CD       = BV.VSL_CD
                            AND     S3.SKD_VOY_NO   = BV.SKD_VOY_NO
                            AND     S3.SKD_DIR_CD   = BV.SKD_DIR_CD
                            AND     S3.VPS_PORT_CD  = DECODE(SR.CNL_TZ_CD, 'P', 'PAPAC', 'S', 'EGSUC')
                            AND     S3.CLPT_SEQ     BETWEEN S1.CLPT_SEQ AND S2.CLPT_SEQ
                            AND     @[ca_flg] = 'Y'
                            )
                )

        /* CARGO TYPE */
        AND     (
                    SR.PRC_CGO_TP_CD  IS NULL
                OR  SR.PRC_CGO_TP_CD  IN ( BQ.DR_TP, BQ.DG_TP, BQ.RF_TP, BQ.AK_TP, BQ.BB_TP )
                )

        /* IMDG CLASS */
        AND     (
                    SP.IMDG_CLSS_USE_FLG  = 'N'
                OR  SR.SCG_IMDG_CLSS_CD   IS NULL
                OR  BQ.IMDG_CLSS_CD       LIKE SR.SCG_IMDG_CLSS_CD||'%'
                )

        /* RATING UNIT */
        AND     (
                    SR.RAT_UT_CD IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )
                OR  SR.RAT_UT_CD  = C_TYP.CONV_RAT_UT_CD
                OR  (
                        SR.RAT_UT_CD IN ( '20', '40', 'HC', '45', '53' )
                    AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = SR.RAT_UT_CD ) = C_TYP.CONV_RAT_UT_SZ_CD
                    )
                )


/*******************************************************************************************
< RT_APPL_TP_CD = 'N' (Not Applicable) >
*******************************************************************************************/
        AND     NOT EXISTS  (
                            SELECT  'X'
                            FROM    C1
                            WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ
                            AND     C1.BQ_SEQ         = BQ.BQ_SEQ
                            AND     C1.CHG_CD         = SP.CHG_CD
                            AND     C1.RT_APPL_TP_CD  = 'N'
                            )

/*******************************************************************************************
< GOH >
*******************************************************************************************/
        AND     NOT EXISTS  (
                            SELECT  'X'
                            FROM    G2
                            WHERE   G2.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ
                            AND     G2.BQ_SEQ         = BQ.BQ_SEQ
                            AND     G2.CHG_CD         = SP.CHG_CD
                            )

        )
WHERE   ROW_NUMBER  = 1
) ,
SG AS (
SELECT  OFT_CMB_SEQ         ,
        BQ_SEQ              ,
        BKG_BQ_SEQ          ,
        SEL_TP_CD           ,
        SEL_TP_PRIO         ,
        CHG_CD              ,
        FLT_PCT_TP_CD       ,
        PCT_BSE_CD          ,
        SOC_USE_FLG         ,
        HNGR_BAR_USE_FLG    ,
        IO_GA_USE_FLG       ,
        CGO_WGT_USE_FLG     ,
        PRC_HNGR_BAR_TP_CD  ,
        IO_GA_CD            ,
        MIN_CGO_WGT         ,
        MAX_CGO_WGT         ,
        RT_APPL_TP_CD       ,
        RT_OP_CD            ,
        CURR_CD             ,

/*******************************************************************************************
FIXED 일 경우는 RND_FRT_RT_AMT 를 사용한다.
*******************************************************************************************/

        RND_FRT_RT_AMT  FRT_RT_AMT  ,

        TYP_BKG_CONV_TP_CD  ,
        RAT_UT_CD           ,
        PRC_CGO_TP_CD       ,
        IMDG_CLSS_CD        ,
        NVL(PAY_TERM_CD, NVL(( SELECT SUBSTR(MIN(DECODE(PAY_TERM_CD, 'P', 1, 'C', 2, 'O', 3, 4)||PAY_TERM_CD), 2) FROM S3 WHERE S3.CHG_CD = C1.CHG_CD ), ( SELECT A.CHG_APLY_AREA_CD FROM MDM_CHARGE A WHERE A.CHG_CD = C1.CHG_CD ))) PAY_TERM_CD ,
        RT_INCL_FLG         ,
        BKG_MST_HBL_TP_CD
FROM    C1
WHERE   RT_APPL_TP_CD   = 'F'

/*******************************************************************************************
TARIFF SURCHARGE 에 0 으로 등록된 것이 있으면 NOTE CONVERSION 에 입력된 것을 받지 않는다.
*******************************************************************************************/
AND     CHG_CD          NOT IN ( SELECT CHG_CD FROM S3 WHERE S3.OFT_CMB_SEQ = C1.OFT_CMB_SEQ AND S3.BQ_SEQ = C1.BQ_SEQ AND S3.FRT_RT_AMT = 0 )


/*******************************************************************************************
TARIFF SURCHARGE 에는 CHARGE CODE 가 있으나 S3 에서 선택되지 못한 CHARGE 코드는
NOTE CONVERSION 에 입력된 FIXED 를 받지 않는다.
*******************************************************************************************/

AND     NOT
        (
            CHG_CD  NOT IN ( SELECT CHG_CD FROM S3 WHERE S3.OFT_CMB_SEQ = C1.OFT_CMB_SEQ AND S3.BQ_SEQ = C1.BQ_SEQ )
        AND EXISTS  (
                    SELECT  'X'
                    FROM    BK  ,
                            PRI_SCG_PRF SP
                    WHERE   SP.SVC_SCP_CD = BK.BKG_SVC_SCP_CD   /* BKG_SVC_SCP_CD 를 사용한다. */
                    AND     SP.CHG_CD     = C1.CHG_CD
                    )
        )


UNION ALL

SELECT  OFT_CMB_SEQ         ,
        BQ_SEQ              ,
        BKG_BQ_SEQ          ,
        SEL_TP_CD           ,
        SEL_TP_PRIO         ,
        CHG_CD              ,
        FLT_PCT_TP_CD       ,
        PCT_BSE_CD          ,
        SOC_USE_FLG         ,
        HNGR_BAR_USE_FLG    ,
        IO_GA_USE_FLG       ,
        CGO_WGT_USE_FLG     ,
        PRC_HNGR_BAR_TP_CD  ,
        IO_GA_CD            ,
        MIN_CGO_WGT         ,
        MAX_CGO_WGT         ,
        RT_APPL_TP_CD       ,
        RT_OP_CD            ,
        CURR_CD             ,

/*******************************************************************************************
ROUND 를 적용한다.
*******************************************************************************************/

        CASE
        WHEN  FRT_RT_AMT <> CALC_FRT_RT_AMT
          THEN  CASE
                WHEN SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' ) AND CHG_CD IN ( 'BUC', 'FRC' )
                  THEN ROUND(CALC_FRT_RT_AMT)
                WHEN SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' )
                  THEN TRUNC(CALC_FRT_RT_AMT, -1) + CASE WHEN MOD(CALC_FRT_RT_AMT, 10) < 2.5 THEN 0 WHEN MOD(CALC_FRT_RT_AMT, 10) < 7.5 THEN 5 ELSE 10 END
                ELSE ROUND(CALC_FRT_RT_AMT, 2)
                END
        ELSE  FRT_RT_AMT
        END FRT_RT_AMT      ,

        TYP_BKG_CONV_TP_CD  ,
        RAT_UT_CD           ,
        PRC_CGO_TP_CD       ,
        IMDG_CLSS_CD        ,
        PAY_TERM_CD         ,
        RT_INCL_FLG         ,
        BKG_MST_HBL_TP_CD
FROM    (
        SELECT  SG.*  ,

        /*******************************************************************************************
        TYP CONVERSION 을 적용하여 금액을 계산한다.
        *******************************************************************************************/

                CASE
                WHEN  TYP_BKG_CONV_TP_CD = 'C' AND TYP_RT_OP_CD = '+'
                  THEN  ADJ_FRT_RT_AMT + TYP_FRT_RT_AMT
                WHEN  TYP_BKG_CONV_TP_CD = 'C' AND TYP_RT_OP_CD = '-'
                  THEN  ADJ_FRT_RT_AMT - TYP_FRT_RT_AMT
                WHEN  TYP_BKG_CONV_TP_CD = 'C' AND TYP_RT_OP_CD = '*'
                  THEN  ADJ_FRT_RT_AMT * TYP_FRT_RT_AMT
                WHEN  TYP_BKG_CONV_TP_CD = 'C' AND TYP_RT_OP_CD = '/'
                  THEN  ADJ_FRT_RT_AMT / TYP_FRT_RT_AMT
                ELSE  ADJ_FRT_RT_AMT
                END CALC_FRT_RT_AMT
        FROM    (
                SELECT  SG.OFT_CMB_SEQ        ,
                        SG.BQ_SEQ             ,
                        SG.BKG_BQ_SEQ         ,
                        SG.SEL_TP_CD          ,
                        SG.SEL_TP_PRIO        ,
                        SG.CHG_CD             ,
                        SG.FLT_PCT_TP_CD      ,
                        SG.PCT_BSE_CD         ,
                        SG.SOC_USE_FLG        ,
                        SG.HNGR_BAR_USE_FLG   ,
                        SG.IO_GA_USE_FLG      ,
                        SG.CGO_WGT_USE_FLG    ,
                        SG.PRC_HNGR_BAR_TP_CD ,
                        SG.IO_GA_CD           ,
                        SG.MIN_CGO_WGT        ,
                        SG.MAX_CGO_WGT        ,
                        C1.RT_APPL_TP_CD      ,
                        NULL  RT_OP_CD        ,
                        SG.CURR_CD            ,

                /*******************************************************************************************
                ADJUST 를 먼저 적용하고, 그 다음에 TYP CONVERSION 을 적용하여 금액을 계산한다.
                *******************************************************************************************/

                        CASE
                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '>'
                          THEN GREATEST(SG.FRT_RT_AMT, C1.FRT_RT_AMT)
                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '<'
                          THEN LEAST(SG.FRT_RT_AMT, C1.FRT_RT_AMT)
                        ELSE  SG.FRT_RT_AMT
                        END FRT_RT_AMT        ,

                        CASE
                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '+'
                          THEN  SG.FRT_RT_AMT + C1.FRT_RT_AMT
                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '-'
                          THEN  SG.FRT_RT_AMT - C1.FRT_RT_AMT
                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '*'
                          THEN  SG.FRT_RT_AMT * C1.FRT_RT_AMT
                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '/'
                          THEN  SG.FRT_RT_AMT / C1.FRT_RT_AMT
                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '>'
                          THEN GREATEST(SG.FRT_RT_AMT, C1.FRT_RT_AMT)
                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '<'
                          THEN LEAST(SG.FRT_RT_AMT, C1.FRT_RT_AMT)
                        ELSE  SG.FRT_RT_AMT
                        END ADJ_FRT_RT_AMT    ,

                        BQ.SVC_SCP_CD         ,
                        SG.TYP_BKG_CONV_TP_CD ,
                        SG.TYP_RT_OP_CD       ,
                        SG.TYP_FRT_RT_AMT     ,
                        SG.RAT_UT_CD          ,
                        SG.PRC_CGO_TP_CD      ,
                        SG.IMDG_CLSS_CD       ,

                        NVL(C1.PAY_TERM_CD, SG.PAY_TERM_CD) PAY_TERM_CD ,
                        NVL(C1.RT_INCL_FLG, SG.RT_INCL_FLG) RT_INCL_FLG ,
                        SG.NOT_RULE_FLG       ,
                        NVL(C1.BKG_MST_HBL_TP_CD, SG.BKG_MST_HBL_TP_CD) BKG_MST_HBL_TP_CD
                FROM    BQ  ,
                        (
                        SELECT * FROM G2
                        UNION ALL
                        SELECT * FROM S3
                        ) SG  ,
                        ( SELECT * FROM C1 WHERE RT_APPL_TP_CD IN ( 'S', 'I', 'A' ) ) C1
                WHERE   SG.OFT_CMB_SEQ      = BQ.OFT_CMB_SEQ
                AND     SG.BQ_SEQ           = BQ.BQ_SEQ
                AND     C1.OFT_CMB_SEQ(+)   = SG.OFT_CMB_SEQ
                AND     C1.BQ_SEQ(+)        = SG.BQ_SEQ
                AND     C1.CHG_CD(+)        = SG.CHG_CD
                AND     C1.RT_APPL_TP_CD(+) = SG.NOTE_RT_APPL_TP_CD
                ) SG
        ) SG
--WHERE   NOT EXISTS  (
--                    SELECT  'X'
--                    FROM    C1
--                    WHERE   C1.OFT_CMB_SEQ    = SG.OFT_CMB_SEQ
--                    AND     C1.BQ_SEQ         = SG.BQ_SEQ
--                    AND     C1.CHG_CD         = SG.CHG_CD
--                    AND     C1.RT_APPL_TP_CD  = 'F'
--                    )

/*******************************************************************************************
NOT RULE 적용
*******************************************************************************************/

WHERE     NOT (
                SG.SEL_TP_CD      = 'S'
            AND SG.RT_APPL_TP_CD  IS NULL
            AND SG.NOT_RULE_FLG   = 'Y'
            AND SG.RT_INCL_FLG    = 'N'
            AND SG.CHG_CD NOT IN ( 'WHF', 'AST', 'GST', 'VDT', 'VTT', 'GRI', 'OAR', 'DAR', 'OIH', 'DIH' )
            )
) ,
GS AS
(

/*******************************************************************************************
E-SVC COMPENSATION ( DHF, NMS, CMS, ODF ) 적용
대상 CHARGE CODE 는 RATING UNIT 이 'BL' 로 가정함.
*******************************************************************************************/

SELECT  GS.BKG_NO               ,
        GS.OFT_CMB_SEQ          ,
        GS.POR_CNT_CD           ,
        GS.DEL_CNT_CD           ,
        GS.SVC_SCP_CD           ,
        GS.CHG_CD               ,
        GS.FLT_PCT_TP_CD        ,
        GS.PCT_BSE_CD           ,
        GS.CURR_CD              ,

        CASE
        WHEN GS.RAT_UT_CD = 'PC' THEN 0 -- 로직 마지막에서 구한다.
        ELSE
          CASE
          WHEN CE.FLT_PCT_TP_CD = 'F' THEN GS.CHG_UT_AMT - CE.DC_AMT
          WHEN CE.FLT_PCT_TP_CD = 'P'
            THEN  CASE
                  WHEN GS.SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' ) AND GS.CHG_CD IN ( 'BUC', 'FRC' )
                    THEN ROUND(GS.CHG_UT_AMT * ( 100 - CE.DC_AMT ) / 100)
                  WHEN GS.SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' )
                    THEN TRUNC(GS.CHG_UT_AMT * ( 100 - CE.DC_AMT ) / 100, -1) + CASE WHEN MOD(GS.CHG_UT_AMT * ( 100 - CE.DC_AMT ) / 100, 10) < 2.5 THEN 0 WHEN MOD(GS.CHG_UT_AMT * ( 100 - CE.DC_AMT ) / 100, 10) < 7.5 THEN 5 ELSE 10 END
                  ELSE ROUND(GS.CHG_UT_AMT * ( 100 - CE.DC_AMT ) / 100, 2)
                  END
          ELSE GS.CHG_UT_AMT
          END
        END CHG_UT_AMT          ,

        CASE
        WHEN GS.RAT_UT_CD = 'BL' THEN 1
        WHEN GS.RAT_UT_CD = 'PC' THEN GS.CHG_UT_AMT
        WHEN GS.RAT_UT_CD = 'MT' THEN GS.ACT_WGT / 1000
        WHEN GS.RAT_UT_CD = 'CM' THEN GS.MEAS_QTY
        WHEN GS.RAT_UT_CD = 'RM' THEN GS.CNTR_QTY  * GS.PRD_RD_CNT
        ELSE GS.RAT_AS_QTY
        END RAT_AS_QTY          ,

        GS.RAT_UT_CD            ,
        0 CHG_AMT               ,
        GS.FRT_INCL_XCLD_DIV_CD ,
        GS.FRT_TERM_CD          ,
        GS.BKG_MST_HBL_TP_CD    ,
        GS.CGO_TP_CD            ,
        GS.RCV_TERM_CD          ,
        GS.DE_TERM_CD           ,
        GS.IMDG_CLSS_CD         ,
        GS.SOC_FLG              ,
        GS.PRC_HNGR_BAR_TP_CD   ,
        GS.IN_GA_FLG            ,
        GS.CNTR_WGT             ,
        GS.OFT_CHG_AMT          ,
        GS.OAR_CHG_AMT          ,
        GS.DAR_CHG_AMT
FROM    (
        SELECT  BQ_BKG_NO         BKG_NO        ,
                BQ_OFT_CMB_SEQ		OFT_CMB_SEQ		,
                BQ_ACT_WGT        ACT_WGT       ,
                BQ_MEAS_QTY       MEAS_QTY      ,
                BQ_CNTR_QTY       CNTR_QTY      ,
                BQ_PRD_RD_CNT     PRD_RD_CNT    ,
                BQ_POR_CNT_CD     POR_CNT_CD    ,
                BQ_DEL_CNT_CD     DEL_CNT_CD    ,
                BQ_SVC_SCP_CD     SVC_SCP_CD    ,
                SG_CHG_CD         CHG_CD        ,
                SG_FLT_PCT_TP_CD  FLT_PCT_TP_CD ,
                SG_PCT_BSE_CD     PCT_BSE_CD    ,
                SG_CURR_CD        CURR_CD       ,
                CASE
                WHEN CT_CNTR_WGT = 0 AND ( NVL(SG_MIN_CGO_WGT, 0) <> 0 OR NVL(SG_MAX_CGO_WGT, 0) <> 0 ) THEN 0
                ELSE SG_FRT_RT_AMT
                END CHG_UT_AMT          ,
                SUM(CT_CNTR_QTY)        RAT_AS_QTY    ,
                CASE
                WHEN SG_TYP_BKG_CONV_TP_CD = 'C'  THEN BQ_CTRT_CNTR_TPSZ_CD
                ELSE SG_RAT_UT_CD
                END RAT_UT_CD           ,
                DECODE(SG_RT_INCL_FLG, 'Y', 'I', 'N')       FRT_INCL_XCLD_DIV_CD  ,
                DECODE(SG_PAY_TERM_CD, 'O', BQ_FRT_TERM_CD, SG_PAY_TERM_CD) FRT_TERM_CD     ,
                SG_BKG_MST_HBL_TP_CD	BKG_MST_HBL_TP_CD		,

                TRIM(SUBSTR(MIN(LPAD(BQ_PRC_CGO_TP_CD, 2, ' ')||LPAD(BQ_RCV_TERM_CD, 1, ' ')||LPAD(BQ_DE_TERM_CD, 1, ' ')||BQ_IMDG_CLSS_CD), 1, 2 ))  CGO_TP_CD     ,
                TRIM(SUBSTR(MIN(LPAD(BQ_PRC_CGO_TP_CD, 2, ' ')||LPAD(BQ_RCV_TERM_CD, 1, ' ')||LPAD(BQ_DE_TERM_CD, 1, ' ')||BQ_IMDG_CLSS_CD), 3, 1 ))  RCV_TERM_CD   ,
                TRIM(SUBSTR(MIN(LPAD(BQ_PRC_CGO_TP_CD, 2, ' ')||LPAD(BQ_RCV_TERM_CD, 1, ' ')||LPAD(BQ_DE_TERM_CD, 1, ' ')||BQ_IMDG_CLSS_CD), 4, 1 ))  DE_TERM_CD    ,
                TRIM(SUBSTR(MIN(LPAD(BQ_PRC_CGO_TP_CD, 2, ' ')||LPAD(BQ_RCV_TERM_CD, 1, ' ')||LPAD(BQ_DE_TERM_CD, 1, ' ')||BQ_IMDG_CLSS_CD), 5    ))  IMDG_CLSS_CD  ,

                DECODE(SG_SOC_USE_FLG     , 'Y', BQ_SOC_FLG           ) SOC_FLG             ,
                DECODE(SG_HNGR_BAR_USE_FLG, 'Y', CT_PRC_HNGR_BAR_TP_CD) PRC_HNGR_BAR_TP_CD  ,
                DECODE(SG_IO_GA_USE_FLG   , 'Y', CT_IN_GA_FLG         ) IN_GA_FLG           ,
                DECODE(SG_CGO_WGT_USE_FLG , 'Y', CT_CNTR_WGT          ) CNTR_WGT            ,

                SUM(BQ_OFT_CHG_UT_AMT * CT_CNTR_QTY) OFT_CHG_AMT ,
                SUM(BQ_OAR_CHG_UT_AMT * CT_CNTR_QTY) OAR_CHG_AMT ,
                SUM(BQ_DAR_CHG_UT_AMT * CT_CNTR_QTY) DAR_CHG_AMT
        FROM		(
        				SELECT	BQ.BKG_NO               BQ_BKG_NO               ,
                				BQ.OFT_CMB_SEQ          BQ_OFT_CMB_SEQ          ,
                				BQ.ACT_WGT              BQ_ACT_WGT              ,
                				BQ.MEAS_QTY             BQ_MEAS_QTY             ,
                				BQ.CNTR_QTY             BQ_CNTR_QTY             ,
                				BQ.PRD_RD_CNT           BQ_PRD_RD_CNT           ,
                				BQ.POR_CNT_CD           BQ_POR_CNT_CD           ,
                				BQ.DEL_CNT_CD           BQ_DEL_CNT_CD           ,
                				BQ.SVC_SCP_CD           BQ_SVC_SCP_CD           ,
                				BQ.CTRT_CNTR_TPSZ_CD		BQ_CTRT_CNTR_TPSZ_CD	  ,
                				BQ.FRT_TERM_CD					BQ_FRT_TERM_CD				  ,
                				BQ.PRC_CGO_TP_CD				BQ_PRC_CGO_TP_CD			  ,
                				BQ.RCV_TERM_CD					BQ_RCV_TERM_CD				  ,
                				BQ.DE_TERM_CD						BQ_DE_TERM_CD						,
                				BQ.IMDG_CLSS_CD					BQ_IMDG_CLSS_CD					,
												BQ.SOC_FLG							BQ_SOC_FLG						  ,
												BQ.OFT_CHG_UT_AMT				BQ_OFT_CHG_UT_AMT				,
												BQ.OAR_CHG_UT_AMT				BQ_OAR_CHG_UT_AMT				,
												BQ.DAR_CHG_UT_AMT				BQ_DAR_CHG_UT_AMT				,
				                SG.CHG_CD               SG_CHG_CD               ,
				                SG.SEL_TP_PRIO					SG_SEL_TP_PRIO					,
				                SG.FLT_PCT_TP_CD        SG_FLT_PCT_TP_CD        ,
				                SG.PCT_BSE_CD           SG_PCT_BSE_CD           ,
				                SG.CURR_CD              SG_CURR_CD              ,
												SG.MIN_CGO_WGT					SG_MIN_CGO_WGT				  ,
												SG.MAX_CGO_WGT					SG_MAX_CGO_WGT				  ,
												SG.FRT_RT_AMT						SG_FRT_RT_AMT						,
												SG.TYP_BKG_CONV_TP_CD		SG_TYP_BKG_CONV_TP_CD		,
												SG.RAT_UT_CD						SG_RAT_UT_CD					  ,
												SG.RT_INCL_FLG					SG_RT_INCL_FLG				  ,
												SG.PAY_TERM_CD					SG_PAY_TERM_CD				  ,
												SG.BKG_MST_HBL_TP_CD		SG_BKG_MST_HBL_TP_CD	  ,
												SG.SOC_USE_FLG					SG_SOC_USE_FLG				  ,
												SG.HNGR_BAR_USE_FLG			SG_HNGR_BAR_USE_FLG			,
												SG.IO_GA_USE_FLG				SG_IO_GA_USE_FLG			  ,
												SG.CGO_WGT_USE_FLG			SG_CGO_WGT_USE_FLG		  ,
        								CT.CNTR_WGT							CT_CNTR_WGT							,
        								CT.CNTR_QTY							CT_CNTR_QTY							,
        								CT.PRC_HNGR_BAR_TP_CD		CT_PRC_HNGR_BAR_TP_CD		,
        								CT.IN_GA_FLG						CT_IN_GA_FLG					  ,
        								ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, SG.CHG_CD ORDER BY SG.SEL_TP_PRIO )	ROW_NUMBER
				        FROM    BQ  ,
				                SG  ,
				                CT
				        WHERE   SG.OFT_CMB_SEQ            = BQ.OFT_CMB_SEQ
				        AND     SG.BQ_SEQ                 = BQ.BQ_SEQ
				        AND     CT.CNTR_TPSZ_CD           = BQ.CNTR_TPSZ_CD
				        AND     CT.CTRT_CNTR_TPSZ_CD      = BQ.CTRT_CNTR_TPSZ_CD
				        AND     CT.RCV_TERM_CD            = BQ.RCV_TERM_CD
				        AND     CT.DE_TERM_CD             = BQ.DE_TERM_CD
				        AND     CT.DRY_CGO_FLG            = BQ.DRY_CGO_FLG
				        AND     CT.AWK_CGO_FLG            = BQ.AWK_CGO_FLG
				        AND     CT.DCGO_FLG               = BQ.DCGO_FLG
				        AND     CT.RC_FLG                 = BQ.RC_FLG
				        AND     CT.BB_CGO_FLG             = BQ.BB_CGO_FLG
				        AND     CT.SOC_FLG                = BQ.SOC_FLG
				        AND     NVL(CT.IMDG_CLSS_CD, '*') = NVL(BQ.IMDG_CLSS_CD, '*')
				
				        /* HANGER TYPE */
				        AND     (
				                    SG.PRC_HNGR_BAR_TP_CD IS NULL
				                OR  CT.PRC_HNGR_BAR_TP_CD = SG.PRC_HNGR_BAR_TP_CD
				                )
				
				        /* IN/OUT GAGE */
				        AND     (
				                    SG.IO_GA_CD   IS NULL
				                OR  CT.IN_GA_FLG  = SG.IO_GA_CD
				                )
				
				        /* CARGO WEIGHT */
				        AND     (
				                    SG.CGO_WGT_USE_FLG  = 'N'
				                OR  CT.CNTR_WGT   = 0
				                OR  (
				                        CT.CNTR_WGT   >=  NVL(SG.MIN_CGO_WGT, 0) * 1000     /* WEIGHT 의 MIN 을 0 으로 임의로 설정 */
				                    AND CT.CNTR_WGT   <   DECODE(NVL(SG.MAX_CGO_WGT, 0), 0, 9999999999, SG.MAX_CGO_WGT) * 1000      /* WEIGHT 의 MAX 를 9999999999 으로 임의로 설정 */
				                    )
				                )
				        )
				WHERE		ROW_NUMBER	= 1
        GROUP BY
                BQ_BKG_NO             ,
                BQ_OFT_CMB_SEQ        ,
                BQ_ACT_WGT            ,
                BQ_MEAS_QTY           ,
                BQ_CNTR_QTY           ,
                BQ_PRD_RD_CNT         ,
                BQ_POR_CNT_CD         ,
                BQ_DEL_CNT_CD         ,
                BQ_SVC_SCP_CD         ,
                SG_CHG_CD             ,
                SG_FLT_PCT_TP_CD      ,
                SG_PCT_BSE_CD         ,
                SG_CURR_CD            ,
                CASE
                WHEN CT_CNTR_WGT = 0 AND ( NVL(SG_MIN_CGO_WGT, 0) <> 0 OR NVL(SG_MAX_CGO_WGT, 0) <> 0 ) THEN 0
                ELSE SG_FRT_RT_AMT
                END                   ,
                CASE
                WHEN SG_TYP_BKG_CONV_TP_CD = 'C'  THEN BQ_CTRT_CNTR_TPSZ_CD
                ELSE SG_RAT_UT_CD
                END                   ,
                DECODE(SG_RT_INCL_FLG, 'Y', 'I', 'N')       ,
                DECODE(SG_PAY_TERM_CD, 'O', BQ_FRT_TERM_CD, SG_PAY_TERM_CD) ,
                SG_BKG_MST_HBL_TP_CD  ,
                CASE
                WHEN  SG_RAT_UT_CD IN ( 'RM', 'CM', 'MT', 'BL', 'PC' ) AND SG_CHG_CD <> 'CAF' THEN NULL
                ELSE  BQ_PRC_CGO_TP_CD
                END                   ,
                CASE
                WHEN  SG_RAT_UT_CD IN ( 'RM', 'CM', 'MT', 'BL', 'PC' ) AND SG_CHG_CD <> 'CAF' THEN NULL
                ELSE  BQ_RCV_TERM_CD
                END                   ,
                CASE
                WHEN  SG_RAT_UT_CD IN ( 'RM', 'CM', 'MT', 'BL', 'PC' ) AND SG_CHG_CD <> 'CAF' THEN NULL
                ELSE  BQ_DE_TERM_CD
                END                   ,
                CASE
                WHEN  SG_RAT_UT_CD IN ( 'RM', 'CM', 'MT', 'BL', 'PC' ) AND SG_CHG_CD <> 'CAF' THEN NULL
                ELSE  BQ_IMDG_CLSS_CD
                END                   ,
                DECODE(SG_SOC_USE_FLG     , 'Y', BQ_SOC_FLG           ) ,
                DECODE(SG_HNGR_BAR_USE_FLG, 'Y', CT_PRC_HNGR_BAR_TP_CD) ,
                DECODE(SG_IO_GA_USE_FLG   , 'Y', CT_IN_GA_FLG         ) ,
                DECODE(SG_CGO_WGT_USE_FLG , 'Y', CT_CNTR_WGT          )
        ) GS  ,
        (
        SELECT  CE.CHG_CD         ,
                CE.CURR_CD        ,
                CE.FLT_PCT_TP_CD  ,
                CE.DC_AMT         ,
                ROW_NUMBER() OVER ( PARTITION BY CE.CHG_CD ORDER BY CE.DC_AMT DESC ) ROW_NUMBER
        FROM    BK                    ,
                PRI_CMPN_ESVC     CE  ,
                PRI_CMPN_ESVC_TP  CT
        WHERE   CT.SVC_SCP_CD     = CE.SVC_SCP_CD
        AND     CT.CMPN_SEQ       = CE.CMPN_SEQ
        AND     CE.SVC_SCP_CD     = BK.BKG_SVC_SCP_CD   /* BKG_SVC_SCP_CD 를 사용한다. */
        AND     CE.PRC_CTRT_TP_CD = BK.CTRT_TP_CD
        AND     CE.SC_NO          = BK.SC_NO
        AND     NVL(CE.ORG_RGN_CD , BK.POR_RGN_CD)  = BK.POR_RGN_CD
        AND     NVL(CE.DEST_RGN_CD, BK.DEL_RGN_CD)  = BK.DEL_RGN_CD
        AND     BK.RT_APLY_DT     BETWEEN CE.EFF_DT AND NVL(CE.EXP_DT, TO_DATE('29991231', 'YYYYMMDD')) + 0.99999   /* 29991231 은 임의의 MAX 값이며, 0.99999 는 23시 59분 59초를 의미 */
        AND     CT.PRC_ESVC_TP_CD = BK.ESVC_TP_CD
        ) CE
WHERE   CE.CHG_CD(+)      = GS.CHG_CD
AND     CE.ROW_NUMBER(+)  = 1
) ,
FN AS
(

/*******************************************************************************************
GENERAL SURCHARGE
*******************************************************************************************/

SELECT  BKG_NO              ,
        OFT_CMB_SEQ         ,
        POR_CNT_CD          ,
        DEL_CNT_CD          ,
        SVC_SCP_CD          ,
        CHG_CD              ,
        FLT_PCT_TP_CD       ,
        PCT_BSE_CD          ,
        CURR_CD             ,
        CHG_UT_AMT          ,
        RAT_AS_QTY          ,
        RAT_UT_CD           ,
        CHG_UT_AMT * RAT_AS_QTY CHG_AMT ,
        FRT_INCL_XCLD_DIV_CD,
        FRT_TERM_CD         ,
        CGO_TP_CD           ,
        RCV_TERM_CD         ,
        DE_TERM_CD          ,
        IMDG_CLSS_CD        ,
        SOC_FLG             ,
        PRC_HNGR_BAR_TP_CD  ,
        IN_GA_FLG           ,
        CNTR_WGT            ,
        OFT_CHG_AMT         ,
        OAR_CHG_AMT         ,
        DAR_CHG_AMT
FROM    GS
WHERE   CHG_CD    NOT IN  (
                          'ACT',
                          'WHF',
                          'CFR', 'CFD',
                          'CMS', 'NMS', 'SMC'
                          )

UNION ALL

/*******************************************************************************************
ACT
*******************************************************************************************/

SELECT  /*+ RULE */
        GS.BKG_NO               ,
        GS.OFT_CMB_SEQ          ,
        GS.POR_CNT_CD           ,
        GS.DEL_CNT_CD           ,
        GS.SVC_SCP_CD           ,
        GS.CHG_CD               ,
        GS.FLT_PCT_TP_CD        ,
        GS.PCT_BSE_CD           ,
        GS.CURR_CD              ,
        GS.CHG_UT_AMT           ,
        GS.RAT_AS_QTY           ,
        GS.RAT_UT_CD            ,
        GS.CHG_UT_AMT * GS.RAT_AS_QTY CHG_AMT ,
        GS.FRT_INCL_XCLD_DIV_CD ,
        GS.FRT_TERM_CD          ,
        GS.CGO_TP_CD            ,
        GS.RCV_TERM_CD          ,
        GS.DE_TERM_CD           ,
        GS.IMDG_CLSS_CD         ,
        GS.SOC_FLG              ,
        GS.PRC_HNGR_BAR_TP_CD   ,
        GS.IN_GA_FLG            ,
        GS.CNTR_WGT             ,
        GS.OFT_CHG_AMT          ,
        GS.OAR_CHG_AMT          ,
        GS.DAR_CHG_AMT
FROM    BK  ,
        GS
WHERE   GS.CHG_CD = 'ACT'
AND     (
                (
                    BK.BKG_SVC_SCP_CD   = 'TPE'       /* BKG_SVC_SCP_CD 를 사용한다. */
                AND BK.POD_CD           IN ( 'USLGB', 'USLAX' )
                AND BK.POD_CD           <> BK.DEL_CD
                AND BK.DEST_TRNS_MOD_CD IN ( 'R', 'A' )
                )
        OR      (
                    BK.BKG_SVC_SCP_CD   = 'TPW'       /* BKG_SVC_SCP_CD 를 사용한다. */
                AND BK.POL_CD           IN ( 'USLGB', 'USLAX' )
                AND BK.POL_CD           <> BK.POR_CD
                AND BK.ORG_TRNS_MOD_CD  IN ( 'R', 'A' )
                )
        OR      (
                    BK.BKG_SVC_SCP_CD   <> 'TPE'        /* BKG_SVC_SCP_CD 를 사용한다. */
                AND BK.DEL_CNT_CD       = 'US'
                AND BK.POD_CD           IN ( 'USNYC', 'USSAV', 'USCHS', 'USORF', 'USBOS' )
                AND EXISTS  (
                            SELECT  'X'
                            FROM    PRD_INLND_ROUT_MST  IR
                            WHERE   IR.ROUT_ORG_NOD_CD    LIKE BK.POD_CD||'%'
                            AND     IR.ROUT_DEST_NOD_CD   LIKE BK.DEL_CD||'%'
                            AND     IR.PCTL_IO_BND_CD     = 'I'
                            AND     IR.HUB_NOD_CD         LIKE 'USLGB'||'%'
                            AND     IR.INLND_ROUT_BKG_FLG = 'Y'
                            AND     NVL(IR.DELT_FLG, 'N') = 'N'
                            )
                AND BK.DEST_TRNS_MOD_CD IN ( 'R', 'A' )
                )
        OR      (
                    BK.BKG_SVC_SCP_CD   <> 'TPW'        /* BKG_SVC_SCP_CD 를 사용한다. */
                AND BK.POR_CNT_CD       = 'US'
                AND BK.POL_CD           IN ( 'USNYC', 'USSAV', 'USCHS', 'USORF', 'USBOS' )
                AND EXISTS  (
                            SELECT  'X'
                            FROM    PRD_INLND_ROUT_MST  IR
                            WHERE   IR.ROUT_ORG_NOD_CD    LIKE BK.POR_CD||'%'
                            AND     IR.ROUT_DEST_NOD_CD   LIKE BK.POL_CD||'%'
                            AND     IR.PCTL_IO_BND_CD     = 'O'
                            AND     IR.HUB_NOD_CD         LIKE 'USLGB'||'%'
                            AND     IR.INLND_ROUT_BKG_FLG = 'Y'
                            AND     NVL(IR.DELT_FLG, 'N') = 'N'
                            )
                AND BK.ORG_TRNS_MOD_CD  IN ( 'R', 'A' )
                )
        )

UNION ALL

/*******************************************************************************************
WHF
*******************************************************************************************/

SELECT  GS.BKG_NO             ,
        GS.OFT_CMB_SEQ        ,
        GS.POR_CNT_CD         ,
        GS.DEL_CNT_CD         ,
        GS.SVC_SCP_CD         ,
        GS.CHG_CD             ,
        GS.FLT_PCT_TP_CD      ,
        GS.PCT_BSE_CD         ,
        GS.CURR_CD            ,
        GS.CHG_UT_AMT         ,
        CASE
        WHEN BK.BKG_RT_WHF_EXPT_CD = 'X' THEN
              GS.RAT_AS_QTY
              - (
                SELECT  COUNT(1)
                FROM    BKG_CONTAINER BC
                WHERE   BC.BKG_NO             = BK.BKG_NO
                AND     BC.CNTR_WFG_EXPT_FLG  = 'Y'
                AND     (
                            GS.RAT_UT_CD = 'BX'
                        OR  NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD) = GS.RAT_UT_CD
                        OR  (
                                GS.RAT_UT_CD  IN ( '20', '40', 'HC', '45', '53' )
                            AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = GS.RAT_UT_CD )
                                = ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD) )
                            )
                        )
                )
        ELSE GS.RAT_AS_QTY
        END RAT_AS_QTY        ,
        GS.RAT_UT_CD          ,
        GS.CHG_UT_AMT * GS.RAT_AS_QTY CHG_AMT ,
        GS.FRT_INCL_XCLD_DIV_CD ,
        GS.FRT_TERM_CD        ,
        GS.CGO_TP_CD          ,
        GS.RCV_TERM_CD        ,
        GS.DE_TERM_CD         ,
        GS.IMDG_CLSS_CD       ,
        GS.SOC_FLG            ,
        GS.PRC_HNGR_BAR_TP_CD ,
        GS.IN_GA_FLG          ,
        GS.CNTR_WGT           ,
        GS.OFT_CHG_AMT        ,
        GS.OAR_CHG_AMT        ,
        GS.DAR_CHG_AMT
FROM    BK  ,
        GS
WHERE   GS.CHG_CD             = 'WHF'
/* BKG_RT_WHF_EXPT_CD 가 NULL 이거나, T/S 인 경우에만 DATA 가 SELECT 된다 */
AND     NVL(BK.BKG_RT_WHF_EXPT_CD, '*') IN ( '*', 'X' )

UNION ALL

/*******************************************************************************************
CFR/CFD

일반 RAT_UT_CD 를 우선으로 하고,
MT, CM 을 경우는 금액이 큰 것 1개를 가져온다.
*******************************************************************************************/

SELECT  BKG_NO              ,
        OFT_CMB_SEQ         ,
        POR_CNT_CD          ,
        DEL_CNT_CD          ,
        SVC_SCP_CD          ,
        CHG_CD              ,
        FLT_PCT_TP_CD       ,
        PCT_BSE_CD          ,
        CURR_CD             ,
        CHG_UT_AMT          ,
        RAT_AS_QTY          ,
        RAT_UT_CD           ,
        CHG_UT_AMT * RAT_AS_QTY CHG_AMT ,
        FRT_INCL_XCLD_DIV_CD,
        FRT_TERM_CD         ,
        CGO_TP_CD           ,
        RCV_TERM_CD         ,
        DE_TERM_CD          ,
        IMDG_CLSS_CD        ,
        SOC_FLG             ,
        PRC_HNGR_BAR_TP_CD  ,
        IN_GA_FLG           ,
        CNTR_WGT            ,
        OFT_CHG_AMT         ,
        OAR_CHG_AMT         ,
        DAR_CHG_AMT
FROM    (
        SELECT  GS.*  ,
                RANK() OVER ( PARTITION BY GS.CHG_CD ORDER BY DECODE(GS.RAT_UT_CD, 'MT', 2, 'CM', 2, 1), DECODE(GS.RAT_UT_CD, 'MT', GS.RAT_AS_QTY, 'CM', GS.RAT_AS_QTY) DESC, DECODE(GS.RAT_UT_CD, 'MT', 'MT', 'CM', 'CM') ) RAT_UT_PRIO
        FROM    GS
        WHERE   GS.CHG_CD     IN ( 'CFR', 'CFD' )
        )
WHERE   RAT_UT_PRIO = 1

UNION ALL

/*******************************************************************************************
CMS, NMS, SMC

RAT_UT_CD 는 항상 BL 임

FILER CODE ( NULL, 1, 2, 3 )
  1 Carrier Filing NVOCC
  2 Self Filing NVO
  3 Not Applicable


NOTE_CONV 의 BKG_MST_HBL_TP_CD 는 CMS 에는 적용하며, S/C 에만 있고 RFA, TAA 에는 없다.
PRI_SCG_RT 에는 BKG_MST_HBL_TP_CD 칼럼이 없다.
*******************************************************************************************/

SELECT  BKG_NO                ,
        OFT_CMB_SEQ           ,
        POR_CNT_CD            ,
        DEL_CNT_CD            ,
        SVC_SCP_CD            ,
        CHG_CD                ,
        FLT_PCT_TP_CD         ,
        PCT_BSE_CD            ,
        CURR_CD               ,
        CHG_UT_AMT            ,
        RAT_AS_QTY            ,
        RAT_UT_CD             ,
        CHG_UT_AMT * RAT_AS_QTY CHG_AMT ,
        FRT_INCL_XCLD_DIV_CD  ,
        FRT_TERM_CD           ,
        CGO_TP_CD             ,
        RCV_TERM_CD           ,
        DE_TERM_CD            ,
        IMDG_CLSS_CD          ,
        SOC_FLG               ,
        PRC_HNGR_BAR_TP_CD    ,
        IN_GA_FLG             ,
        CNTR_WGT              ,
        OFT_CHG_AMT           ,
        OAR_CHG_AMT           ,
        DAR_CHG_AMT
FROM    (
        SELECT  GS.BKG_NO               ,
                GS.OFT_CMB_SEQ          ,
                GS.POR_CNT_CD           ,
                GS.DEL_CNT_CD           ,
                GS.SVC_SCP_CD           ,
                GS.CHG_CD               ,
                GS.FLT_PCT_TP_CD        ,
                GS.PCT_BSE_CD           ,
                GS.CURR_CD              ,
                GS.CHG_UT_AMT           ,

                CASE
                WHEN  GS.CHG_CD = 'CMS'
                  THEN  GREATEST(
                        CASE
                        WHEN  BK.USA_CSTMS_FILE_CD = '1'  THEN  DECODE(GS.BKG_MST_HBL_TP_CD, 'H', 0, 1) + DECODE(GS.BKG_MST_HBL_TP_CD, 'M', 0, BK.BKG_HBL_CNT)
                        WHEN  BK.USA_CSTMS_FILE_CD = '2'  THEN  0
                        WHEN  BK.USA_CSTMS_FILE_CD = '3'  THEN  1
                        ELSE  0
                        END
                        ,
                        CASE
                        WHEN  BK.CND_CSTMS_FILE_CD = '1'  THEN  DECODE(GS.BKG_MST_HBL_TP_CD, 'H', 0, 1) + DECODE(GS.BKG_MST_HBL_TP_CD, 'M', 0, BK.BKG_HBL_CNT)
                        WHEN  BK.CND_CSTMS_FILE_CD = '2'  THEN  0
                        WHEN  BK.CND_CSTMS_FILE_CD = '3'  THEN  1
                        ELSE  0
                        END
                        )

                WHEN  GS.CHG_CD = 'NMS'
                  THEN  GREATEST(
                        CASE
                        WHEN  BK.USA_CSTMS_FILE_CD = '1'  THEN  MF_SELF_CNT
                        WHEN  BK.USA_CSTMS_FILE_CD = '2'  THEN  1
                        WHEN  BK.USA_CSTMS_FILE_CD = '3'  THEN  0
                        ELSE  0
                        END
                        ,
                        CASE
                        WHEN  BK.CND_CSTMS_FILE_CD = '1'  THEN  MF_SELF_CNT
                        WHEN  BK.CND_CSTMS_FILE_CD = '2'  THEN  1
                        WHEN  BK.CND_CSTMS_FILE_CD = '3'  THEN  0
                        ELSE  0
                        END
                        )

                WHEN  GS.CHG_CD = 'SMC' AND BK.SVC_SCP_CD IN ( 'TAW', 'SAW' )
                  THEN  CASE
                        WHEN  BK.USA_CSTMS_FILE_CD  = '1' THEN  BK.BKG_HBL_CNT
                        WHEN  BK.USA_CSTMS_FILE_CD  = '2' THEN  0
                        WHEN  BK.USA_CSTMS_FILE_CD  = '3' THEN  1
                        ELSE  0
                        END

                WHEN  GS.CHG_CD = 'SMC'
                  THEN  1 + BK.BKG_HBL_CNT

                ELSE  0
                END RAT_AS_QTY          ,

                GS.RAT_UT_CD            ,
                GS.FRT_INCL_XCLD_DIV_CD ,
                GS.FRT_TERM_CD          ,
                GS.CGO_TP_CD            ,
                GS.RCV_TERM_CD          ,
                GS.DE_TERM_CD           ,
                GS.IMDG_CLSS_CD         ,
                GS.SOC_FLG              ,
                GS.PRC_HNGR_BAR_TP_CD   ,
                GS.IN_GA_FLG            ,
                GS.CNTR_WGT             ,
                GS.OFT_CHG_AMT          ,
                GS.OAR_CHG_AMT          ,
                GS.DAR_CHG_AMT
        FROM    BK  ,
                GS
        WHERE   GS.CHG_CD IN ( 'CMS', 'NMS', 'SMC' )
        )
WHERE   RAT_AS_QTY  > 0
)

SELECT  BKG_NO                ,
        OFT_CMB_SEQ           ,
        CHG_CD                ,
        FLT_PCT_TP_CD         ,
        PCT_BSE_CD            ,
        CURR_CD               ,
        CHG_UT_AMT            ,
        RAT_AS_QTY            ,
        RAT_UT_CD             ,
        CHG_AMT               ,
        FRT_INCL_XCLD_DIV_CD  ,
        FRT_TERM_CD           ,
        CGO_TP_CD             ,
        RCV_TERM_CD           ,
        DE_TERM_CD            ,
        IMDG_CLSS_CD          ,
        SOC_FLG               ,
        PRC_HNGR_BAR_TP_CD    ,
        IN_GA_FLG             ,
        CNTR_WGT
FROM    (
        SELECT  FN.BKG_NO               ,
                FN.OFT_CMB_SEQ          ,
                FN.CHG_CD               ,
                FN.FLT_PCT_TP_CD        ,
                FN.PCT_BSE_CD           ,
                FN.CURR_CD              ,

                CASE
                WHEN    FN.RAT_UT_CD  = 'PC' AND FN.CHG_CD = 'CAF'
                  THEN  CASE WHEN 'OFT' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.OFT_CHG_AMT ELSE 0 END
                        + CASE WHEN 'OAR' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.OAR_CHG_AMT ELSE 0 END
                        + CASE WHEN 'DAR' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.DAR_CHG_AMT ELSE 0 END
                WHEN  FN.RAT_UT_CD  = 'PC'
                  THEN NVL(F1.CHG_AMT, 0)
                ELSE  FN.CHG_UT_AMT
                END CHG_UT_AMT          ,

                RAT_AS_QTY              ,
                RAT_UT_CD               ,

                CASE
                WHEN  FN.RAT_UT_CD  = 'PC' AND FN.CHG_CD = 'VDT'
                  THEN ROUND(NVL(F1.CHG_AMT, 0) / ( 100 - RAT_AS_QTY ) * RAT_AS_QTY)
                WHEN  FN.RAT_UT_CD  = 'PC' AND FN.CHG_CD = 'VTT'
                  THEN ROUND(NVL(F1.CHG_AMT, 0) / ( 100 - RAT_AS_QTY ) * RAT_AS_QTY, 2)
                WHEN  FN.RAT_UT_CD  = 'PC' AND FN.CHG_CD = 'CAF'
                  THEN ROUND(
                        (
                        CASE WHEN 'OFT' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.OFT_CHG_AMT ELSE 0 END
                        + CASE WHEN 'OAR' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.OAR_CHG_AMT ELSE 0 END
                        + CASE WHEN 'DAR' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.DAR_CHG_AMT ELSE 0 END
                        ) * RAT_AS_QTY / 100, 2)
                WHEN  FN.RAT_UT_CD  = 'PC'
                  THEN ROUND(NVL(F1.CHG_AMT, 0) * RAT_AS_QTY / 100, 2)
                ELSE  FN.CHG_AMT
                END CHG_AMT             ,

                FN.FRT_INCL_XCLD_DIV_CD ,
                DECODE(FN.FRT_TERM_CD, 'C', 'C', 'P') FRT_TERM_CD ,
                FN.CGO_TP_CD            ,
                FN.RCV_TERM_CD          ,
                FN.DE_TERM_CD           ,
                FN.IMDG_CLSS_CD         ,
                FN.SOC_FLG              ,
                FN.PRC_HNGR_BAR_TP_CD   ,
                FN.IN_GA_FLG            ,
                FN.CNTR_WGT
        FROM    FN  ,
                (
                SELECT  OFT_CMB_SEQ   ,
                        CHG_CD        ,
                        SUM(CHG_AMT)  CHG_AMT
                FROM    (
                        SELECT  F1.OFT_CMB_SEQ  ,
                                F1.CHG_CD       ,
                                F2.CHG_AMT  CHG_AMT
                        FROM    FN  F1  ,
                                FN  F2
                        WHERE   F2.OFT_CMB_SEQ  = F1.OFT_CMB_SEQ
                        AND     F2.CHG_CD       IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = F1.PCT_BSE_CD )
                        AND     F2.CURR_CD      = F1.CURR_CD
                        AND     F2.FRT_TERM_CD  = F1.FRT_TERM_CD
                        AND     (
                                    F1.CHG_CD   <> 'VTT'
                                OR  F2.CHG_CD   NOT IN ( DECODE(F1.POR_CNT_CD, 'VN', 'DTH', 'XXX'), DECODE(F1.POR_CNT_CD, 'VN', 'DDC', 'XXX'), DECODE(F1.DEL_CNT_CD, 'VN', 'OTH', 'XXX'), DECODE(F1.DEL_CNT_CD, 'VN', 'ORC', 'XXX') )
                                )
                        AND     F2.RAT_UT_CD    <> 'PC'
                        AND     F2.FRT_INCL_XCLD_DIV_CD <> 'I'
                        AND     F1.RAT_UT_CD    = 'PC'

                        UNION ALL

                        SELECT  F1.OFT_CMB_SEQ  ,
                                F1.CHG_CD       ,
                                F2.CHG_AMT  CHG_AMT
                        FROM    FN  F1  ,
                                BKG_AUTO_RT_OCN_FRT_TMP F2
                        WHERE   F2.OFT_CMB_SEQ  = F1.OFT_CMB_SEQ
                        AND     F2.CHG_CD       IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = F1.PCT_BSE_CD )
                        AND     F2.CURR_CD      = F1.CURR_CD
                        AND     ( SELECT FRT_TERM_CD FROM BK )  = F1.FRT_TERM_CD
                        AND     F2.CTRT_CNTR_TPSZ_CD  <> 'PC'
                        AND     F1.RAT_UT_CD          = 'PC'
                        )
                GROUP BY
                        OFT_CMB_SEQ   ,
                        CHG_CD
                ) F1
        WHERE   F1.OFT_CMB_SEQ(+) = FN.OFT_CMB_SEQ
        AND     F1.CHG_CD(+)      = FN.CHG_CD
        AND     DECODE(@[rt_aud_tp_cd], 'A', FN.FRT_INCL_XCLD_DIV_CD, 'N')  = 'N'
        )
WHERE   CHG_UT_AMT  <>  0
--OR      RAT_UT_CD   = 'PC'
ORDER BY
        BKG_NO              ,
        OFT_CMB_SEQ         ,
        CHG_CD              ,
        RAT_UT_CD           ,
        FRT_INCL_XCLD_DIV_CD,
        FRT_TERM_CD         ,
        CGO_TP_CD           ,
        RCV_TERM_CD         ,
        DE_TERM_CD          ,
        IMDG_CLSS_CD        ,
        SOC_FLG             ,
        PRC_HNGR_BAR_TP_CD  ,
        IN_GA_FLG           ,
        CNTR_WGT
/*AUTORATING_20100329-001*/			]]></sql>
			<params>
				<param name="cmdt_cd" type="12" value="000004" out="N"/>
				<param name="rt_aply_dt" type="12" value="" out="N"/>
				<param name="svc_scp_cd" type="12" value="" out="N"/>
				<param name="ctrt_no" type="12" value="" out="N"/>
				<param name="frt_term_cd" type="12" value="" out="N"/>
				<param name="bkg_no" type="12" value="KORY9175510" out="N"/>
				<param name="ctrt_tp_cd" type="12" value="" out="N"/>
				<param name="ca_flg" type="12" value="" out="N"/>
				<param name="rt_aud_tp_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
