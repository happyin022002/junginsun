<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="MonthlyQuotaInquiryDBDAOSearchMonthlyQuotaInquiry0139Tab01RSQL">
			<desc><![CDATA[Search MonthlyQuotaInquiry139 List01]]></desc>
			<sql><![CDATA[
WITH TMP_INPUT_PARAMS AS  
    (SELECT DISTINCT  
        @[year] AS BSE_YR,
        @[quarter] AS BSE_QTR_CD,
		@[year]||

    #if (${month} < 10) 
		'0'||@[month]
    #else 
		@[month]
    #end

		AS YRMON_1,

        TO_CHAR(ADD_MONTHS(TO_DATE(@[year]||

    #if (${month} < 10) 
		'0'||@[month]
    #else 
		@[month]
    #end
	, 'YYYYMM'), 1), 'YYYYMM') AS YRMON_2, 

        TO_CHAR(ADD_MONTHS(TO_DATE(@[year]||

    #if (${month} < 10) 
		'0'||@[month]
    #else 
		@[month]
    #end
	, 'YYYYMM'), 2), 'YYYYMM') AS YRMON_3,           

        @[dirCd] AS DIR_CD,  
        SAQ_TGT_GRP_CD,  
        TRD_CD,  
        @[version] AS RLSE_VER_NO
     FROM   SAQ_TGT_GRP_TRD  
     WHERE  SAQ_TGT_GRP_CD LIKE '${targetGrp}%'  
     AND    TRD_CD LIKE '${trade}%') 
    ,TEMP_SMR AS
    (SELECT 
         DISTINCT  
         SMR.TRD_CD,  
         SMR.DIR_CD, 
         VVD.SUB_TRD_CD,
         SMR.RLANE_CD,  
         SMR.BSE_MON
    FROM SAQ_MON_CFM_QTA SMR 
         JOIN  
         TMP_INPUT_PARAMS INP  
         ON  
         (  
            SMR.BSE_YR = INP.BSE_YR AND   
            SMR.BSE_QTR_CD = INP.BSE_QTR_CD AND 
            SMR.MQTA_RLSE_VER_NO = INP.RLSE_VER_NO AND 
            SMR.TRD_CD = INP.TRD_CD AND  
            SMR.CONV_DIR_CD LIKE INP.DIR_CD||'%' AND                
            SMR.QTA_TGT_CD = @[selType]   		
         )										 
         JOIN										 
       	   SAQ_MON_CFM_TGT_VVD VVD								 
         ON										 
         (										 
            VVD.MQTA_RLSE_VER_NO = SMR.MQTA_RLSE_VER_NO AND				 
            VVD.BSE_YR = SMR.BSE_YR AND							 
            VVD.BSE_QTR_CD = SMR.BSE_QTR_CD AND						 
            VVD.BSE_MON = SMR.BSE_MON AND						 
            VVD.TRD_CD = SMR.TRD_CD AND							 
            VVD.RLANE_CD = SMR.RLANE_CD AND						 
            VVD.DIR_CD = SMR.DIR_CD AND							 
            VVD.VSL_CD = SMR.VSL_CD AND							 
            VVD.SKD_VOY_NO = SMR.SKD_VOY_NO AND						 
            VVD.SKD_DIR_CD = SMR.SKD_DIR_CD						 
         										 
         )										 		
         )      
    ,VVD AS     
    (SELECT 
            MIN((SELECT
                       DISTINCT 
                       SAQ_TGT_GRP_CD
                 FROM  TMP_INPUT_PARAMS
                 WHERE TRD_CD = SMR.TRD_CD)) AS TGT_GRP_CD,
            VVD.TRD_CD,  
            VVD.CONV_DIR_CD,  
            VVD.SUB_TRD_CD, 
            VVD.BSE_YR||VVD.BSE_MON AS YRMON, 
            SUM(VVD.FNL_BSA_CAPA) AS BSA,     
            COUNT(*) AS VOYAGE     
     FROM   SAQ_MON_CFM_TGT_VVD VVD  
            JOIN 
            TMP_INPUT_PARAMS INP 
            ON 
            ( 
                VVD.BSE_YR = INP.BSE_YR AND 
                VVD.BSE_QTR_CD = INP.BSE_QTR_CD AND 
                VVD.MQTA_RLSE_VER_NO = INP.RLSE_VER_NO AND 
                VVD.TRD_CD = INP.TRD_CD AND  
                VVD.CONV_DIR_CD LIKE INP.DIR_CD||'%'             
            )   
            JOIN
            TEMP_SMR SMR
            ON
            (
               SMR.TRD_CD = VVD.TRD_CD AND
               SMR.DIR_CD = VVD.DIR_CD AND
               SMR.SUB_TRD_CD = VVD.SUB_TRD_CD AND
               SMR.RLANE_CD = VVD.RLANE_CD AND
               SMR.BSE_MON = VVD.BSE_MON            
            )                
     GROUP BY VVD.TRD_CD, VVD.CONV_DIR_CD, VVD.SUB_TRD_CD, VVD.BSE_YR||VVD.BSE_MON) 
SELECT  
    KEY,  
    SLEVEL,  
    TGT_GRP_CD,
    TRD_CD,  
    DIR_CD,  
    SUB_TRD_CD,
    ROW_SEQ,  
    REPLACE(TEXT, '(P)', '') AS ITEM_TEXT, 
    REPLACE(ITEM, '(P)', '') AS ITEM,
    VAL_00,
    VAL_01,
    VAL_02,
    VAL_03
FROM  (  
    SELECT  
          MIN(KEY) AS KEY,  
          SLEVEL,
          CASE SLEVEL
             WHEN 1 THEN 'TOTAL'
             ELSE SMR.TGT_GRP_CD
          END TGT_GRP_CD,                 
          CASE SLEVEL
             WHEN 1 THEN ''
             WHEN 2 THEN 'TOTAL'
             ELSE SMR.TRD_CD
          END TRD_CD,            
          CASE SLEVEL
             WHEN 1 THEN ''
             WHEN 2 THEN ''
             WHEN 3 THEN 'TOTAL'
             ELSE SMR.DIR_CD
          END DIR_CD,             
          CASE SLEVEL
             WHEN 1 THEN ''
             WHEN 2 THEN ''
             WHEN 3 THEN ''
             WHEN 4 THEN 'TOTAL'
             ELSE SMR.SUB_TRD_CD
          END SUB_TRD_CD, 
          ITM.ROW_SEQ,  
          ITM.TEXT,  
          CASE  
             WHEN ITM.CODE IN('05', '07', '08', '11', '12') THEN ITM.TEXT || '*'  
             ELSE ITM.TEXT  
          END ITEM,     


	    NVL(DECODE( ITM.CODE,  '01', SUM(BSA),                     			
	                 '02', SUM(VOYAGE),                           			
	                 '03', SUM(SMR.LOD),                                 		
	                 '04', DECODE(SUM(BSA), 0, 0, SUM(SMR.LOD)/SUM(BSA)*100), 	
	                 '05', SUM(SMR.REV),                                 		
	                 '06', DECODE(SUM(LOD), 0, 0, SUM(REV)/SUM(LOD)*1000),       
	                 '07', SUM(SMR.CM),                                  		
	                 '08', SUM(SMR.RA_CM),                               		
	                 '09', DECODE(SUM(LOD), 0, 0, SUM(CM)*1000/SUM(LOD)),        
	                 '10', DECODE(SUM(LOD), 0, 0, SUM(RA_CM)*1000/SUM(LOD)),     
	                 '11', SUM(SMR.OP),                                  		
	                 '12', SUM(SMR.RA_OP),                               		
	                 '13', DECODE(SUM(LOD), 0, 0, SUM(OP)*1000/SUM(LOD)),        
	                 '14', DECODE(SUM(LOD), 0, 0, SUM(RA_OP)*1000/SUM(LOD)) ), 0) AS VAL_00,


	    NVL(SUM(DECODE(SMR.YRMON, INP.YRMON_1,	
	        DECODE( ITM.CODE,  '01', (BSA),                     			
	                 '02', (VOYAGE),                           			
	                 '03', (SMR.LOD),                                 		
	                 '04', DECODE(BSA, 0, 0, (SMR.LOD)/(BSA)*100),  			
	                 '05', (SMR.REV),                                 		
	                 '06', DECODE(LOD, 0, 0, (REV)/(LOD)*1000),              
	                 '07', (SMR.CM),                                  		
	                 '08', (SMR.RA_CM),                               		
	                 '09', DECODE(LOD, 0, 0, (CM)*1000/(LOD)),               
	                 '10', DECODE(LOD, 0, 0, (RA_CM)*1000/(LOD)),            
	                 '11', (SMR.OP),                                  		
	                 '12', (SMR.RA_OP),                               		
	                 '13', DECODE(LOD, 0, 0, (OP)*1000/(LOD)),               
	                 '14', DECODE(LOD, 0, 0, (RA_OP)*1000/(LOD)) ))), 0) AS VAL_01,


	    NVL(SUM(DECODE(SMR.YRMON, INP.YRMON_2,                     		
	        DECODE( ITM.CODE,  '01', (BSA),                     			
	                 '02', (VOYAGE),                           			
	                 '03', (SMR.LOD),                                 		
	                 '04', DECODE(BSA, 0, 0, (SMR.LOD)/(BSA)*100),  			
	                 '05', (SMR.REV),                                 		
	                 '06', DECODE(LOD, 0, 0, (REV)/(LOD)*1000),              
	                 '07', (SMR.CM),                                  		
	                 '08', (SMR.RA_CM),                               		
	                 '09', DECODE(LOD, 0, 0, (CM)*1000/(LOD)),               
	                 '10', DECODE(LOD, 0, 0, (RA_CM)*1000/(LOD)),            
	                 '11', (SMR.OP),                                  		
	                 '12', (SMR.RA_OP),                               		
	                 '13', DECODE(LOD, 0, 0, (OP)*1000/(LOD)),               
	                 '14', DECODE(LOD, 0, 0, (RA_OP)*1000/(LOD)) ))), 0) AS VAL_02,
				

	    NVL(SUM(DECODE(SMR.YRMON, INP.YRMON_3,                     		
	        DECODE( ITM.CODE,  '01', (BSA),                     			
	                 '02', (VOYAGE),                           			
	                 '03', (SMR.LOD),                                 		
	                 '04', DECODE(BSA, 0, 0, (SMR.LOD)/(BSA)*100),  			
	                 '05', (SMR.REV),                                 		
	                 '06', DECODE(LOD, 0, 0, (REV)/(LOD)*1000),              
	                 '07', (SMR.CM),                                  		
	                 '08', (SMR.RA_CM),                               		
	                 '09', DECODE(LOD, 0, 0, (CM)*1000/(LOD)),               
	                 '10', DECODE(LOD, 0, 0, (RA_CM)*1000/(LOD)),            
	                 '11', (SMR.OP),                                  		
	                 '12', (SMR.RA_OP),                               		
	                 '13', DECODE(LOD, 0, 0, (OP)*1000/(LOD)),               
	                 '14', DECODE(LOD, 0, 0, (RA_OP)*1000/(LOD)) ))), 0) AS VAL_03

    FROM  (  
            SELECT
                  SMR.KEY,
                  CASE SMR.G_FLAG
                     WHEN '1111' THEN 1
                     WHEN '0111' THEN 2
                     WHEN '0011' THEN 3
                     WHEN '0001' THEN 4
                     WHEN '0000' THEN 5
                  END SLEVEL,
                  SMR.TGT_GRP_CD,                  
                  SMR.TRD_CD,
                  SMR.DIR_CD,
                  SMR.SUB_TRD_CD,
                  SMR.YRMON,
                  CASE G_FLAG
                     WHEN '1111' THEN SMR.BSA_LVL_1
                     WHEN '0111' THEN SMR.BSA_LVL_2
                     WHEN '0011' THEN SMR.BSA_LVL_3
                     WHEN '0001' THEN SMR.BSA_LVL_4
                     WHEN '0000' THEN SMR.BSA_LVL_5
                  END BSA, 
                  CASE G_FLAG
                     WHEN '1111' THEN SMR.VOYAGE_LVL_1
                     WHEN '0111' THEN SMR.VOYAGE_LVL_2
                     WHEN '0011' THEN SMR.VOYAGE_LVL_3
                     WHEN '0001' THEN SMR.VOYAGE_LVL_4
                     WHEN '0000' THEN SMR.VOYAGE_LVL_5
                  END VOYAGE, 
                  SMR.LOD,
                  SMR.REV,
                  SMR.CM,
                  SMR.RA_CM,
                  SMR.OP,
                  SMR.RA_OP                                   
            FROM  (
                    SELECT
                          SMR.G_FLAG,
                          SMR.KEY,
                          SMR.TGT_GRP_CD,
                          SMR.TRD_CD,
                          SMR.CONV_DIR_CD DIR_CD,
                          SMR.SUB_TRD_CD,
                          SMR.YRMON,
                          (SELECT SUM(BSA) 
                           FROM  VVD 
                           WHERE YRMON = SMR.YRMON) AS BSA_LVL_1,
                          (SELECT SUM(BSA) 
                           FROM  VVD 
                           WHERE YRMON = SMR.YRMON
                           AND   TGT_GRP_CD = SMR.TGT_GRP_CD) AS BSA_LVL_2, 
                          (SELECT SUM(BSA) 
                           FROM  VVD 
                           WHERE YRMON = SMR.YRMON
                           AND   TRD_CD = SMR.TRD_CD) AS BSA_LVL_3,
                          (SELECT SUM(BSA) 
                           FROM  VVD 
                           WHERE YRMON = SMR.YRMON
                           AND   TRD_CD = SMR.TRD_CD
                           AND   CONV_DIR_CD = SMR.CONV_DIR_CD) AS BSA_LVL_4,
                          (SELECT SUM(BSA) 
                           FROM  VVD 
                           WHERE YRMON = SMR.YRMON
                           AND   TRD_CD = SMR.TRD_CD
                           AND   CONV_DIR_CD = SMR.CONV_DIR_CD
                           AND   SUB_TRD_CD = SMR.SUB_TRD_CD) AS BSA_LVL_5,  
                          (SELECT SUM(VOYAGE) 
                           FROM  VVD 
                           WHERE YRMON = SMR.YRMON) AS VOYAGE_LVL_1, 
                          (SELECT SUM(VOYAGE) 
                           FROM  VVD 
                           WHERE YRMON = SMR.YRMON
                           AND   TGT_GRP_CD = SMR.TGT_GRP_CD) AS VOYAGE_LVL_2,   
                          (SELECT SUM(VOYAGE) 
                           FROM  VVD 
                           WHERE YRMON = SMR.YRMON
                           AND   TRD_CD = SMR.TRD_CD) AS VOYAGE_LVL_3,
                          (SELECT SUM(VOYAGE) 
                           FROM  VVD 
                           WHERE YRMON = SMR.YRMON
                           AND   TRD_CD = SMR.TRD_CD
                           AND   CONV_DIR_CD = SMR.CONV_DIR_CD) AS VOYAGE_LVL_4,
                          (SELECT SUM(VOYAGE) 
                           FROM  VVD 
                           WHERE YRMON = SMR.YRMON
                           AND   TRD_CD = SMR.TRD_CD
                           AND   CONV_DIR_CD = SMR.CONV_DIR_CD
                           AND   SUB_TRD_CD = SMR.SUB_TRD_CD) AS VOYAGE_LVL_5,  
                          LOD,
                          REV,
                          CM,
                          RA_CM,
                          OP,
                          RA_OP
                    FROM  (
                            SELECT 
                                 GROUPING(TGT_GRP_CD)||GROUPING(TRD_CD)||GROUPING(CONV_DIR_CD)||GROUPING(SUB_TRD_CD)AS G_FLAG,
                                 MIN(SMR.TGT_GRP_CD||SMR.TRD_CD||SMR.CONV_DIR_CD||SMR.SUB_TRD_CD) AS KEY,
                                 SMR.TGT_GRP_CD,
                                 SMR.TRD_CD,  
                                 SMR.CONV_DIR_CD,  
                                 SMR.SUB_TRD_CD,  
                                 SMR.YRMON,    
                                 SUM(LOD) AS LOD,
                                 SUM(REV) AS REV,
                                 SUM(CM) AS CM,
                                 SUM(RA_CM) AS RA_CM,
                                 SUM(OP) AS OP,
                                 SUM(RA_OP) AS RA_OP
                            FROM (
                                   SELECT
                                         MIN((SELECT
                                                    DISTINCT 
                                                    SAQ_TGT_GRP_CD
                                              FROM  TMP_INPUT_PARAMS
                                              WHERE TRD_CD = SMR.TRD_CD)) AS TGT_GRP_CD,
                                         SMR.TRD_CD,
                                         SMR.DIR_CD,
                                         SMR.CONV_DIR_CD,
                                         VVD.SUB_TRD_CD,
                                         SMR.BSE_YR||SMR.BSE_MON AS YRMON, 


                         SUM(SMR.LOD_QTY) AS LOD, 
                         SUM(SMR.GRS_RPB_REV*SMR.LOD_QTY)/1000 AS REV,  
                         SUM((SMR.GRS_RPB_REV-SMR.CM_UC_AMT)*SMR.LOD_QTY)/1000 AS CM, 
                         SUM((SMR.GRS_RPB_REV-SMR.RA_CM_UC_AMT)*SMR.LOD_QTY)/1000 AS RA_CM,  
                         SUM((SMR.GRS_RPB_REV-SMR.OPFIT_UC_AMT)*SMR.LOD_QTY)/1000 AS OP, 
                         SUM((SMR.GRS_RPB_REV-SMR.RA_OPFIT_UC_AMT)*SMR.LOD_QTY )/1000 AS RA_OP 		


                                   FROM  SAQ_MON_CFM_QTA SMR
                                         JOIN
                                         TMP_INPUT_PARAMS INP  
                                         ON  
                                         (  
                                            SMR.BSE_YR = INP.BSE_YR AND   
                                            SMR.BSE_QTR_CD = INP.BSE_QTR_CD AND 
                                            SMR.MQTA_RLSE_VER_NO = INP.RLSE_VER_NO AND 
                                            SMR.TRD_CD = INP.TRD_CD AND  
                                            SMR.CONV_DIR_CD LIKE INP.DIR_CD||'%' AND 
            								   SMR.QTA_TGT_CD = @[selType]   		
                                         )
         								JOIN										 
       										  SAQ_MON_CFM_TGT_VVD VVD								 
       									  ON										 
      								   (										 
       								     VVD.MQTA_RLSE_VER_NO = SMR.MQTA_RLSE_VER_NO AND				 
       								     VVD.BSE_YR = SMR.BSE_YR AND							 
           								 VVD.BSE_QTR_CD = SMR.BSE_QTR_CD AND						 
      								     VVD.BSE_MON = SMR.BSE_MON AND						 
            								 VVD.TRD_CD = SMR.TRD_CD AND							 
           								 VVD.RLANE_CD = SMR.RLANE_CD AND						 
           								 VVD.DIR_CD = SMR.DIR_CD AND							 
           								 VVD.VSL_CD = SMR.VSL_CD AND							 
           								 VVD.SKD_VOY_NO = SMR.SKD_VOY_NO AND						 
           								 VVD.SKD_DIR_CD = SMR.SKD_DIR_CD						 
      									 )										 		
                                   GROUP BY SMR.TRD_CD, SMR.DIR_CD, SMR.CONV_DIR_CD, VVD.SUB_TRD_CD, SMR.BSE_YR||SMR.BSE_MON  
                                 ) SMR
                            GROUP BY GROUPING SETS((SMR.YRMON),
                                                    (SMR.TGT_GRP_CD, SMR.YRMON),
                                                    (SMR.TGT_GRP_CD, SMR.TRD_CD, SMR.YRMON),  
                                                    (SMR.TGT_GRP_CD, SMR.TRD_CD, SMR.CONV_DIR_CD, SMR.YRMON),  
                                                    (SMR.TGT_GRP_CD, SMR.TRD_CD, SMR.CONV_DIR_CD, SMR.SUB_TRD_CD, SMR.YRMON))
                          ) SMR   
                  ) SMR 
          ) SMR  
          JOIN  
          (  
            SELECT  INTG_CD_VAL_CTNT AS CODE,  
                    INTG_CD_VAL_DP_DESC AS TEXT,  
                    INTG_CD_VAL_DP_SEQ AS ROW_SEQ  
            FROM  COM_INTG_CD_DTL  
            WHERE INTG_CD_ID = 'CD01389'  
			#if($ilist.size() > 0)
            AND   ('ALL' = @[items0] OR (INTG_CD_VAL_DP_DESC IN (
                #foreach ($key in ${ilist})
                    #if($velocityCount < $ilist.size())
                    '$key',
                    #else
                    '$key'
                    #end
                #end
                   )) )  
			#end
         ) ITM  
          ON 0 = 0 
          JOIN  
          (  
            SELECT  
                  *  
            FROM  TMP_INPUT_PARAMS INP  
            WHERE ROWNUM = 1  
          ) INP  
          ON 1 = 1            
      GROUP BY SMR.SLEVEL, SMR.TGT_GRP_CD, SMR.TRD_CD, SMR.DIR_CD, SMR.SUB_TRD_CD, ITM.ROW_SEQ, ITM.TEXT, ITM.CODE  
      ) SMR  
ORDER BY KEY, SLEVEL, ROW_SEQ			]]></sql>
			<params>
				<param name="year" type="12" value="" out="N"/>
				<param name="quarter" type="12" value="" out="N"/>
				<param name="month" type="12" value="" out="N"/>
				<param name="dirCd" type="12" value="" out="N"/>
				<param name="version" type="12" value="" out="N"/>
				<param name="selType" type="12" value="" out="N"/>
				<param name="items0" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
