/*=========================================================
*Copyright(c) 2016 CyberLogitec
*@FileName : SpaceAllocationManageDBDAOSearchSpaceAllocationManage045QtyListVORSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2016.10.27
*@LastModifier : 
*@LastVersion : 1.0
* 2016.10.27 
* 1.0 Creation
=========================================================*/
package com.clt.apps.opus.esm.spc.spaceallocationmanage.spaceallocationmanage.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.clt.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class SpaceAllocationManageDBDAOSearchSpaceAllocationManage045QtyListVORSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * 2014.05.13 BSA PORT STEP UP DOWN에서 Weight 가져오는 부분 수정
	  * 
	  * 2015.07.22. SKY[CLT-000042051-10] Virtual add call - VT_ADD_CALL_FLG IS  NULL  로직 추가
	  * 2016.04.11  SQL 튜닝
	  * 2016.04.25 BKG POL/POD IND SEQ NVL 추가
	  * 2016.05.12 SPC_GET_HC_RT_BSA_FNC : SKD_VOY_NO parm 추가
	  * 2016.10.27 PORT_SEQ  with 문 로직 수정 
	  * </pre>
	  */
	public SpaceAllocationManageDBDAOSearchSpaceAllocationManage045QtyListVORSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("skd_dir_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("skd_voy_no",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("lane",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vsl_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("qty_tp",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.clt.apps.opus.esm.spc.spaceallocationmanage.spaceallocationmanage.integration").append("\n"); 
		query.append("FileName : SpaceAllocationManageDBDAOSearchSpaceAllocationManage045QtyListVORSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("WITH PARAMS AS (" ).append("\n"); 
		query.append("    SELECT @[lane]       AS RLANE_CD  ," ).append("\n"); 
		query.append("           @[vsl_cd]     AS VSL_CD    ," ).append("\n"); 
		query.append("           @[skd_voy_no] AS SKD_VOY_NO," ).append("\n"); 
		query.append("           @[skd_dir_cd] AS SKD_DIR_CD," ).append("\n"); 
		query.append("           '1'           AS STS       ," ).append("\n"); 
		query.append("           @[qty_tp]     AS QTY_TP" ).append("\n"); 
		query.append("      FROM DUAL" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("    , CUR_PORTS AS (" ).append("\n"); 
		query.append("    SELECT " ).append("\n"); 
		query.append("      RLANE_CD ," ).append("\n"); 
		query.append("      VSL_CD ," ).append("\n"); 
		query.append("      SKD_VOY_NO ," ).append("\n"); 
		query.append("      SKD_DIR_CD ," ).append("\n"); 
		query.append("      PORT_CD ," ).append("\n"); 
		query.append("      YD_CD ," ).append("\n"); 
		query.append("      CLPT_SEQ ," ).append("\n"); 
		query.append("      CLPT_IND_SEQ ," ).append("\n"); 
		query.append("      TURN_SKD_VOY_NO," ).append("\n"); 
		query.append("      TURN_SKD_DIR_CD," ).append("\n"); 
		query.append("      TURN_CLPT_IND_SEQ ," ).append("\n"); 
		query.append("      FLG ," ).append("\n"); 
		query.append("      PAST," ).append("\n"); 
		query.append("      BSA ," ).append("\n"); 
		query.append("      STS" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("        SELECT P.RLANE_CD ," ).append("\n"); 
		query.append("          S1.VSL_CD ," ).append("\n"); 
		query.append("          S1.SKD_VOY_NO," ).append("\n"); 
		query.append("          S1.SKD_DIR_CD," ).append("\n"); 
		query.append("          S1.VPS_PORT_CD AS PORT_CD," ).append("\n"); 
		query.append("          S1.YD_CD ," ).append("\n"); 
		query.append("          S1.CLPT_SEQ AS CLPT_SEQ," ).append("\n"); 
		query.append("          S1.CLPT_IND_SEQ AS CLPT_IND_SEQ," ).append("\n"); 
		query.append("          S1.TURN_SKD_VOY_NO," ).append("\n"); 
		query.append("          S1.TURN_SKD_DIR_CD," ).append("\n"); 
		query.append("          S1.TURN_CLPT_IND_SEQ AS TURN_CLPT_IND_SEQ," ).append("\n"); 
		query.append("         (" ).append("\n"); 
		query.append("              CASE" ).append("\n"); 
		query.append("                WHEN TRIM(S1.TURN_SKD_VOY_NO) IS NULL THEN 2" ).append("\n"); 
		query.append("                WHEN S1.TURN_PORT_IND_CD IN ('Y'," ).append("\n"); 
		query.append("                                             'N') THEN 1" ).append("\n"); 
		query.append("                 ELSE 3" ).append("\n"); 
		query.append("              END ) AS FLG," ).append("\n"); 
		query.append("          (" ).append("\n"); 
		query.append("               DECODE(P.STS, '1', CASE WHEN S1.VPS_ETD_DT < GLOBALDATE_PKG.TIME_CONV_FNC('GMT', SYS_EXTRACT_UTC(SYSTIMESTAMP), S1.VPS_PORT_CD ) THEN 'Y'" ).append("\n"); 
		query.append("                                       ELSE 'N'" ).append("\n"); 
		query.append("                                  END, '2', 'N', '3', 'Y')" ).append("\n"); 
		query.append("                      ) AS PAST,  " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("          (" ).append("\n"); 
		query.append("            SELECT (" ).append("\n"); 
		query.append("                SELECT NVL(MAX(DECODE(B.STUP_FLG, 'Y', DECODE(A.PORT_BSA_CAPA, 0, NULL, A.PORT_BSA_CAPA))), C.CRR_BSA_CAPA) BSA" ).append("\n"); 
		query.append("                FROM BSA_VVD_PORT_DWN A," ).append("\n"); 
		query.append("                  COA_LANE_RGST B" ).append("\n"); 
		query.append("                WHERE B.RLANE_CD = C.RLANE_CD" ).append("\n"); 
		query.append("                  AND B.TRD_CD = C.TRD_CD" ).append("\n"); 
		query.append("                  AND B.DIR_CD = C.SKD_DIR_CD" ).append("\n"); 
		query.append("                  AND A.TRD_CD (+) = C.TRD_CD" ).append("\n"); 
		query.append("                  AND A.RLANE_CD (+) = C.RLANE_CD" ).append("\n"); 
		query.append("                  AND A.VSL_CD (+) = C.VSL_CD" ).append("\n"); 
		query.append("                  AND A.SKD_VOY_NO (+) = C.SKD_VOY_NO" ).append("\n"); 
		query.append("                  AND A.SKD_DIR_CD (+) = C.SKD_DIR_CD" ).append("\n"); 
		query.append("                  AND A.BSA_OP_JB_CD(+) = DECODE(P.QTY_TP, '1', '007', '016') -- Port별 Weight 정보" ).append("\n"); 
		query.append("                  AND A.CRR_CD (+) = C.CRR_CD" ).append("\n"); 
		query.append("                  AND A.PORT_CD (+) = NVL(SUBSTR(S1.YD_CD, 1, 5), S1.VPS_PORT_CD) ) AS BSA" ).append("\n"); 
		query.append("            FROM BSA_VVD_OTR_CRR C" ).append("\n"); 
		query.append("            WHERE C.RLANE_CD = P.RLANE_CD" ).append("\n"); 
		query.append("              AND C.VSL_CD = P.VSL_CD" ).append("\n"); 
		query.append("              AND C.SKD_VOY_NO = P.SKD_VOY_NO" ).append("\n"); 
		query.append("              AND C.SKD_DIR_CD = P.SKD_DIR_CD" ).append("\n"); 
		query.append("              AND C.BSA_OP_JB_CD = DECODE(P.QTY_TP, '1', '007', '009')" ).append("\n"); 
		query.append("              AND C.CRR_CD   IN  (COM_ConstantMgr_PKG.COM_getCompanyCode_FNC)" ).append("\n"); 
		query.append("              ) AS BSA," ).append("\n"); 
		query.append("          P.STS" ).append("\n"); 
		query.append("        FROM VSK_VSL_PORT_SKD S1," ).append("\n"); 
		query.append("          PARAMS P" ).append("\n"); 
		query.append("        WHERE (S1.SKD_CNG_STS_CD IS NULL" ).append("\n"); 
		query.append("              OR S1.SKD_CNG_STS_CD <> 'S')" ).append("\n"); 
		query.append("          AND S1.VSL_CD = P.VSL_CD" ).append("\n"); 
		query.append("          AND S1.SKD_VOY_NO = P.SKD_VOY_NO" ).append("\n"); 
		query.append("          AND S1.SKD_DIR_CD = P.SKD_DIR_CD" ).append("\n"); 
		query.append("          AND S1.VPS_PORT_CD NOT IN ('EGSCA')" ).append("\n"); 
		query.append("          AND S1.VT_ADD_CALL_FLG IS NULL" ).append("\n"); 
		query.append("--      WHERE RANK = 1" ).append("\n"); 
		query.append("      " ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("      " ).append("\n"); 
		query.append("      ) " ).append("\n"); 
		query.append(" , VVD_BASE AS (" ).append("\n"); 
		query.append("    SELECT RLANE_CD ," ).append("\n"); 
		query.append("      VSL_CD ," ).append("\n"); 
		query.append("      SKD_VOY_NO," ).append("\n"); 
		query.append("      SKD_DIR_CD," ).append("\n"); 
		query.append("      MAX(STS) AS STS," ).append("\n"); 
		query.append("      MIN(DECODE(FLG, '1', TURN_SKD_VOY_NO)) AS PRE_SKD_VOY_NO," ).append("\n"); 
		query.append("      MIN(DECODE(FLG, '1', TURN_SKD_DIR_CD)) AS PRE_SKD_DIR_CD," ).append("\n"); 
		query.append("      MIN(DECODE(FLG, '3', TURN_SKD_VOY_NO)) AS PST_SKD_VOY_NO," ).append("\n"); 
		query.append("      MIN(DECODE(FLG, '3', TURN_SKD_DIR_CD)) AS PST_SKD_DIR_CD" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("        SELECT S1.RLANE_CD ," ).append("\n"); 
		query.append("          S1.VSL_CD ," ).append("\n"); 
		query.append("          S1.SKD_VOY_NO ," ).append("\n"); 
		query.append("          S1.SKD_DIR_CD ," ).append("\n"); 
		query.append("          S1.TURN_SKD_VOY_NO," ).append("\n"); 
		query.append("          S1.TURN_SKD_DIR_CD," ).append("\n"); 
		query.append("          DECODE(S2.SKD_VOY_NO, NULL, '', S1.FLG) AS FLG," ).append("\n"); 
		query.append("          S1.STS" ).append("\n"); 
		query.append("        FROM CUR_PORTS S1," ).append("\n"); 
		query.append("          VSK_VSL_PORT_SKD S2" ).append("\n"); 
		query.append("        WHERE S1.VSL_CD = S2.VSL_CD (+)" ).append("\n"); 
		query.append("          AND S1.TURN_SKD_VOY_NO = S2.SKD_VOY_NO(+)" ).append("\n"); 
		query.append("          AND S1.TURN_SKD_DIR_CD = S2.SKD_DIR_CD(+)" ).append("\n"); 
		query.append("          AND S1.YD_CD = S2.YD_CD (+) )" ).append("\n"); 
		query.append("    GROUP BY RLANE_CD , VSL_CD , SKD_VOY_NO, SKD_DIR_CD " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append(" ) " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("  ,PORT_SKD AS (" ).append("\n"); 
		query.append("    SELECT B.RLANE_CD," ).append("\n"); 
		query.append("      B.VSL_CD||B.SKD_VOY_NO||B.SKD_DIR_CD AS BASE_VVD," ).append("\n"); 
		query.append("      ( DECODE(S1.SKD_VOY_NO||S1.SKD_DIR_CD, B.PRE_SKD_VOY_NO||B.PRE_SKD_DIR_CD, '1', B.SKD_VOY_NO||B.SKD_DIR_CD , '2', B.PST_SKD_VOY_NO||B.PST_SKD_DIR_CD, '3' ) ) AS TP," ).append("\n"); 
		query.append("      S1.VSL_CD||S1.SKD_VOY_NO||S1.SKD_DIR_CD AS VVD," ).append("\n"); 
		query.append("      S1.VSL_CD ," ).append("\n"); 
		query.append("      S1.SKD_VOY_NO ," ).append("\n"); 
		query.append("      S1.SKD_DIR_CD ," ).append("\n"); 
		query.append("      S1.VPS_PORT_CD," ).append("\n"); 
		query.append("      S1.YD_CD ," ).append("\n"); 
		query.append("      S1.CLPT_SEQ ," ).append("\n"); 
		query.append("      S1.CLPT_IND_SEQ," ).append("\n"); 
		query.append("      S1.TURN_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      SPC_CONTI_CONV_FNC(LOC.CONTI_CD, B.RLANE_CD) AS PORT_CONTI," ).append("\n"); 
		query.append("      S1.TURN_PORT_IND_CD," ).append("\n"); 
		query.append("      NVL(S1.SKD_CNG_STS_CD, ' ') AS CNG_STS_CD," ).append("\n"); 
		query.append("      S1.TURN_SKD_VOY_NO," ).append("\n"); 
		query.append("      S1.TURN_SKD_DIR_CD," ).append("\n"); 
		query.append("      S1.VSL_CD||S1.TURN_SKD_VOY_NO||S1.TURN_SKD_DIR_CD AS TURN_VVD," ).append("\n"); 
		query.append("      B.PRE_SKD_VOY_NO," ).append("\n"); 
		query.append("      B.PRE_SKD_DIR_CD," ).append("\n"); 
		query.append("      B.PST_SKD_VOY_NO," ).append("\n"); 
		query.append("      B.PST_SKD_DIR_CD," ).append("\n"); 
		query.append("      (" ).append("\n"); 
		query.append("        SELECT PRD.COST_YR||LPAD(CEIL((TO_CHAR(S1.VPS_ETD_DT, 'DDD') + 7 - TO_CHAR(TO_DATE(PRD.SLS_TO_DT, 'YYYYMMDD'), 'DDD')) / 7), 2, '0')" ).append("\n"); 
		query.append("        FROM COA_WK_PRD PRD" ).append("\n"); 
		query.append("        WHERE PRD.COST_YR = TO_CHAR(S1.VPS_ETD_DT, 'YYYY')" ).append("\n"); 
		query.append("          AND PRD.COST_WK = '01' ) AS COST_YRWK," ).append("\n"); 
		query.append("      MAX(S1.CLPT_SEQ) OVER (PARTITION BY S1.VSL_CD||S1.SKD_VOY_NO||S1.SKD_DIR_CD||S1.YD_CD) AS MAX_SEQ," ).append("\n"); 
		query.append("      B.STS" ).append("\n"); 
		query.append("    FROM MDM_LOCATION LOC," ).append("\n"); 
		query.append("      VSK_VSL_PORT_SKD S1 ," ).append("\n"); 
		query.append("      VVD_BASE B" ).append("\n"); 
		query.append("    WHERE LOC.LOC_CD = S1.VPS_PORT_CD" ).append("\n"); 
		query.append("      AND S1.VSL_CD = B.VSL_CD" ).append("\n"); 
		query.append("      AND (S1.SKD_CNG_STS_CD IS NULL" ).append("\n"); 
		query.append("              OR S1.SKD_CNG_STS_CD <> 'S')" ).append("\n"); 
		query.append("      AND S1.VT_ADD_CALL_FLG IS NULL" ).append("\n"); 
		query.append("      AND ((S1.SKD_VOY_NO," ).append("\n"); 
		query.append("              S1.SKD_DIR_CD) IN ((B.SKD_VOY_NO," ).append("\n"); 
		query.append("                  B.SKD_DIR_CD)," ).append("\n"); 
		query.append("              (B.PRE_SKD_VOY_NO," ).append("\n"); 
		query.append("                  B.PRE_SKD_DIR_CD)," ).append("\n"); 
		query.append("              (B.PST_SKD_VOY_NO," ).append("\n"); 
		query.append("                  B.PST_SKD_DIR_CD))) " ).append("\n"); 
		query.append(" ) " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("  ,PORT_SEQ AS (" ).append("\n"); 
		query.append("    SELECT TP ," ).append("\n"); 
		query.append("      VVD ," ).append("\n"); 
		query.append("      VSL_CD ," ).append("\n"); 
		query.append("      SKD_VOY_NO," ).append("\n"); 
		query.append("      SKD_DIR_CD," ).append("\n"); 
		query.append("      POL_CD," ).append("\n"); 
		query.append("      POD_CD," ).append("\n"); 
		query.append("      POL_SEQ ," ).append("\n"); 
		query.append("      POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      POD_SEQ ," ).append("\n"); 
		query.append("      POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      POL_CONTI," ).append("\n"); 
		query.append("      POD_CONTI," ).append("\n"); 
		query.append("      POL_YRWK ," ).append("\n"); 
		query.append("      POD_YRWK ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- [CHM-201114098] POL 기준으로 PAST 여부 판단" ).append("\n"); 
		query.append("      (" ).append("\n"); 
		query.append("        SELECT ( DECODE(S1.STS, '1'," ).append("\n"); 
		query.append("                                  CASE" ).append("\n"); 
		query.append("                                    WHEN VPS_ETD_DT < GLOBALDATE_PKG.TIME_CONV_FNC('GMT', SYS_EXTRACT_UTC(SYSTIMESTAMP), VPS_PORT_CD ) THEN 'Y'" ).append("\n"); 
		query.append("                                    ELSE 'N'" ).append("\n"); 
		query.append("                                  END, '2', 'N', '3', 'Y') )" ).append("\n"); 
		query.append("        FROM VSK_VSL_PORT_SKD" ).append("\n"); 
		query.append("        WHERE VSL_CD = S1.VSL_CD" ).append("\n"); 
		query.append("          AND SKD_VOY_NO = S1.SKD_VOY_NO" ).append("\n"); 
		query.append("          AND SKD_DIR_CD = S1.SKD_DIR_CD" ).append("\n"); 
		query.append("          AND CLPT_SEQ = S1.CLPT_SEQ ) AS PAST" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("        SELECT S1.TP ," ).append("\n"); 
		query.append("          S1.VVD ," ).append("\n"); 
		query.append("          S1.VSL_CD ," ).append("\n"); 
		query.append("          S1.SKD_VOY_NO," ).append("\n"); 
		query.append("          S1.SKD_DIR_CD," ).append("\n"); 
		query.append("          S1.CLPT_SEQ ," ).append("\n"); 
		query.append("          S1.STS ," ).append("\n"); 
		query.append("          NVL(S1.YD_CD, S1.VPS_PORT_CD) AS POL_CD," ).append("\n"); 
		query.append("          NVL(S2.YD_CD, S2.VPS_PORT_CD) AS POD_CD," ).append("\n"); 
		query.append("          S1.CLPT_SEQ AS POL_SEQ ," ).append("\n"); 
		query.append("          S1.TURN_PORT_IND_CD," ).append("\n"); 
		query.append("          S1.CLPT_IND_SEQ AS POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          DECODE(S1.BASE_VVD, S1.TURN_VVD, S1.TURN_CLPT_IND_SEQ, S1.CLPT_IND_SEQ) AS POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("          S2.CLPT_SEQ AS POD_SEQ ," ).append("\n"); 
		query.append("          S2.TURN_PORT_IND_CD," ).append("\n"); 
		query.append("          S2.CLPT_IND_SEQ AS POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          DECODE(S2.BASE_VVD, S2.TURN_VVD, S2.TURN_CLPT_IND_SEQ, S2.CLPT_IND_SEQ) AS POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("          S1.PORT_CONTI AS POL_CONTI," ).append("\n"); 
		query.append("          S2.PORT_CONTI AS POD_CONTI," ).append("\n"); 
		query.append("          S1.COST_YRWK AS POL_YRWK ," ).append("\n"); 
		query.append("          S2.COST_YRWK AS POD_YRWK" ).append("\n"); 
		query.append("        FROM PORT_SKD S1," ).append("\n"); 
		query.append("          PORT_SKD S2" ).append("\n"); 
		query.append("        WHERE S1.VSL_CD = S2.VSL_CD" ).append("\n"); 
		query.append("          AND S1.SKD_VOY_NO = S2.SKD_VOY_NO" ).append("\n"); 
		query.append("          AND S1.SKD_DIR_CD = S2.SKD_DIR_CD" ).append("\n"); 
		query.append("          AND S1.CLPT_SEQ < S2.CLPT_SEQ" ).append("\n"); 
		query.append("          AND S1.TURN_PORT_IND_CD IN ('Y','N')" ).append("\n"); 
		query.append("          AND S1.CNG_STS_CD <> 'S'" ).append("\n"); 
		query.append("          AND ( S1.CLPT_SEQ = S1.MAX_SEQ" ).append("\n"); 
		query.append("              OR S2.CLPT_SEQ < S1.MAX_SEQ )" ).append("\n"); 
		query.append("          AND DECODE(S1.TP, 1, S2.TURN_VVD, 2, S1.VVD, 3, S1.TURN_VVD) = S1.BASE_VVD" ).append("\n"); 
		query.append("          ) S1" ).append("\n"); 
		query.append("    ORDER BY TP , POL_SEQ, POD_SEQ " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append(") " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(",PORT_SEQ_MT AS (" ).append("\n"); 
		query.append("    SELECT TP ," ).append("\n"); 
		query.append("      VVD ," ).append("\n"); 
		query.append("      VSL_CD ," ).append("\n"); 
		query.append("      SKD_VOY_NO," ).append("\n"); 
		query.append("      SKD_DIR_CD," ).append("\n"); 
		query.append("      POL_CD," ).append("\n"); 
		query.append("      POD_CD," ).append("\n"); 
		query.append("      POL_SEQ ," ).append("\n"); 
		query.append("      POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      POD_SEQ ," ).append("\n"); 
		query.append("      POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      POL_CONTI," ).append("\n"); 
		query.append("      POD_CONTI," ).append("\n"); 
		query.append("      POL_YRWK ," ).append("\n"); 
		query.append("      POD_YRWK ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- [CHM-201114098] POL 기준으로 PAST 여부 판단" ).append("\n"); 
		query.append("      (" ).append("\n"); 
		query.append("        SELECT ( DECODE(S1.STS, '1'," ).append("\n"); 
		query.append("                                  CASE" ).append("\n"); 
		query.append("                                    WHEN VPS_ETD_DT < GLOBALDATE_PKG.TIME_CONV_FNC('GMT', SYS_EXTRACT_UTC(SYSTIMESTAMP), VPS_PORT_CD ) THEN 'Y'" ).append("\n"); 
		query.append("                                    ELSE 'N'" ).append("\n"); 
		query.append("                                  END, '2', 'N', '3', 'Y') )" ).append("\n"); 
		query.append("        FROM VSK_VSL_PORT_SKD" ).append("\n"); 
		query.append("        WHERE VSL_CD = S1.VSL_CD" ).append("\n"); 
		query.append("          AND SKD_VOY_NO = S1.SKD_VOY_NO" ).append("\n"); 
		query.append("          AND SKD_DIR_CD = S1.SKD_DIR_CD" ).append("\n"); 
		query.append("          AND CLPT_SEQ = S1.CLPT_SEQ ) AS PAST" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("        SELECT S1.TP ," ).append("\n"); 
		query.append("          S1.VVD ," ).append("\n"); 
		query.append("          S1.VSL_CD ," ).append("\n"); 
		query.append("          S1.SKD_VOY_NO," ).append("\n"); 
		query.append("          S1.SKD_DIR_CD," ).append("\n"); 
		query.append("          S1.CLPT_SEQ ," ).append("\n"); 
		query.append("          S1.STS ," ).append("\n"); 
		query.append("          NVL(S1.YD_CD, S1.VPS_PORT_CD) AS POL_CD," ).append("\n"); 
		query.append("          NVL(S2.YD_CD, S2.VPS_PORT_CD) AS POD_CD," ).append("\n"); 
		query.append("          S1.CLPT_SEQ AS POL_SEQ ," ).append("\n"); 
		query.append("          S1.TURN_PORT_IND_CD," ).append("\n"); 
		query.append("          S1.CLPT_IND_SEQ AS POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          DECODE(S1.BASE_VVD, S1.TURN_VVD, S1.TURN_CLPT_IND_SEQ, S1.CLPT_IND_SEQ) AS POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("          S2.CLPT_SEQ AS POD_SEQ ," ).append("\n"); 
		query.append("          S2.TURN_PORT_IND_CD," ).append("\n"); 
		query.append("          S2.CLPT_IND_SEQ AS POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          DECODE(S2.BASE_VVD, S2.TURN_VVD, S2.TURN_CLPT_IND_SEQ, S2.CLPT_IND_SEQ) AS POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("          S1.PORT_CONTI AS POL_CONTI," ).append("\n"); 
		query.append("          S2.PORT_CONTI AS POD_CONTI," ).append("\n"); 
		query.append("          S1.COST_YRWK AS POL_YRWK ," ).append("\n"); 
		query.append("          S2.COST_YRWK AS POD_YRWK" ).append("\n"); 
		query.append("        FROM PORT_SKD S1," ).append("\n"); 
		query.append("          PORT_SKD S2" ).append("\n"); 
		query.append("        WHERE S1.VSL_CD = S2.VSL_CD" ).append("\n"); 
		query.append("          AND S1.SKD_VOY_NO = S2.SKD_VOY_NO" ).append("\n"); 
		query.append("          AND S1.SKD_DIR_CD = S2.SKD_DIR_CD" ).append("\n"); 
		query.append("          AND S1.CLPT_SEQ < S2.CLPT_SEQ" ).append("\n"); 
		query.append("          AND S1.TURN_PORT_IND_CD IN ('Y','N')" ).append("\n"); 
		query.append("          AND S1.CNG_STS_CD <> 'S'" ).append("\n"); 
		query.append("          AND DECODE(S1.TP, 1, S2.TURN_VVD, 2, S1.VVD, 3, S1.TURN_VVD) = S1.BASE_VVD ) S1" ).append("\n"); 
		query.append("    ORDER BY TP , POL_SEQ, POD_SEQ " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("   ) " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("  ,VVD_LD_PORT AS (" ).append("\n"); 
		query.append("    SELECT S1.VSL_CD ," ).append("\n"); 
		query.append("      S1.SKD_VOY_NO," ).append("\n"); 
		query.append("      S1.SKD_DIR_CD," ).append("\n"); 
		query.append("      SUBSTR(MAX(LTRIM(TO_CHAR(S1.POD_SEQ, 'FM000'))|| S1.POD_CD), 4) AS LD_PORT" ).append("\n"); 
		query.append("    FROM PORT_SEQ S1" ).append("\n"); 
		query.append("    GROUP BY S1.VSL_CD , S1.SKD_VOY_NO, S1.SKD_DIR_CD " ).append("\n"); 
		query.append("  ) " ).append("\n"); 
		query.append("  " ).append("\n"); 
		query.append("  ,VVD_LD_PORT_MT AS (" ).append("\n"); 
		query.append("    SELECT S1.VSL_CD ," ).append("\n"); 
		query.append("      S1.SKD_VOY_NO," ).append("\n"); 
		query.append("      S1.SKD_DIR_CD," ).append("\n"); 
		query.append("      SUBSTR(MAX(LTRIM(TO_CHAR(S1.POD_SEQ, 'FM000'))|| S1.POD_CD), 4) AS LD_PORT" ).append("\n"); 
		query.append("    FROM PORT_SEQ_MT S1" ).append("\n"); 
		query.append("    GROUP BY S1.VSL_CD , S1.SKD_VOY_NO, S1.SKD_DIR_CD " ).append("\n"); 
		query.append("  ) " ).append("\n"); 
		query.append(" , COPY AS (" ).append("\n"); 
		query.append("    SELECT LEVEL SEQ" ).append("\n"); 
		query.append("    FROM DUAL CONNECT BY LEVEL <= 5 " ).append("\n"); 
		query.append(") " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("  , BKG_DATA AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        SELECT " ).append("\n"); 
		query.append("          2 AS SRC ," ).append("\n"); 
		query.append("          Z.TP ," ).append("\n"); 
		query.append("          Z.POL_CD ," ).append("\n"); 
		query.append("          Z.POL_SEQ ," ).append("\n"); 
		query.append("          Z.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          Z.POD_CD ," ).append("\n"); 
		query.append("          Z.POD_SEQ ," ).append("\n"); 
		query.append("          Z.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          Z.IOC_CD ," ).append("\n"); 
		query.append("          Z.BKG_CGO_TP_CD," ).append("\n"); 
		query.append("         SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', SUBSTR(Z.VAL, 1, 14), SUBSTR(Z.VAL, 15)), 0))) AS QTY_TTL" ).append("\n"); 
		query.append("        FROM (" ).append("\n"); 
		query.append("              SELECT /*+ ORDERED USE_NL(P B LD BV BK D) */" ).append("\n"); 
		query.append("                     B.TP    ," ).append("\n"); 
		query.append("                     B.POL_CD," ).append("\n"); 
		query.append("                     B.POD_CD," ).append("\n"); 
		query.append("                     B.POL_SEQ," ).append("\n"); 
		query.append("                     B.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     B.POD_SEQ," ).append("\n"); 
		query.append("                     B.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     DECODE(BK.BKG_CGO_TP_CD, 'P', 'M', 'F') AS BKG_CGO_TP_CD," ).append("\n"); 
		query.append("                     DECODE(BV.VSL_PRE_PST_CD, 'T', DECODE(B.POL_CONTI, B.POD_CONTI, 2, 1), 3) AS IOC_CD," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                       SELECT   /*+ ORDERED USE_NL(Q M) */ " ).append("\n"); 
		query.append("                              TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', 1, '5', SPC_GET_HC_RT_BSA_FNC(M.TRD_CD, P.RLANE_CD ,P.SKD_DIR_CD ,P.VSL_CD , P.SKD_VOY_NO, 'D5'), '7', SPC_GET_HC_RT_BSA_FNC(M.TRD_CD, P.RLANE_CD ,P.SKD_DIR_CD ,P.VSL_CD , P.SKD_VOY_NO,'D7'), 2) * Q.OP_CNTR_QTY), 'FM0000000000.000')" ).append("\n"); 
		query.append("                              || TO_CHAR((MAX(D.ACT_WGT) * DECODE(MAX(D.WGT_UT_CD), 'LBS', 0.00045, 0.001)) + SUM(Q.OP_CNTR_QTY * ( SELECT TS.CNTR_TPSZ_TARE_WGT" ).append("\n"); 
		query.append("                                                                                                                                      FROM MDM_CNTR_TP_SZ TS" ).append("\n"); 
		query.append("                                                                                                                                     WHERE TS.CNTR_TPSZ_CD = Q.CNTR_TPSZ_CD)) * 0.001, 'FM0000000000.000')" ).append("\n"); 
		query.append("                         FROM BKG_QUANTITY Q," ).append("\n"); 
		query.append("                              MDM_DTL_REV_LANE M" ).append("\n"); 
		query.append("                        WHERE BK.BKG_NO     = Q.BKG_NO" ).append("\n"); 
		query.append("                          AND Q.OP_CNTR_QTY > 0" ).append("\n"); 
		query.append("                          AND BK.SLAN_CD = SUBSTR(M.RLANE_CD, 1, 3)" ).append("\n"); 
		query.append("                          AND BK.SKD_DIR_CD = M.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("                          AND M.FM_CONTI_CD = (" ).append("\n"); 
		query.append("                                               SELECT MLOC.CONTI_CD" ).append("\n"); 
		query.append("                                                 FROM MDM_LOCATION MLOC" ).append("\n"); 
		query.append("                                                WHERE MLOC.LOC_CD = BV.POL_CD )" ).append("\n"); 
		query.append("                          AND M.TO_CONTI_CD = (" ).append("\n"); 
		query.append("                                               SELECT MLOC.CONTI_CD" ).append("\n"); 
		query.append("                                                 FROM MDM_LOCATION MLOC" ).append("\n"); 
		query.append("                                                WHERE MLOC.LOC_CD = BV.POD_CD )" ).append("\n"); 
		query.append("                          AND M.DELT_FLG = 'N'" ).append("\n"); 
		query.append("                    ) AS VAL," ).append("\n"); 
		query.append("                    P.QTY_TP" ).append("\n"); 
		query.append("               FROM PARAMS      P ," ).append("\n"); 
		query.append("                    PORT_SEQ    B ," ).append("\n"); 
		query.append("                    VVD_LD_PORT LD," ).append("\n"); 
		query.append("                    BKG_VVD     BV," ).append("\n"); 
		query.append("                    BKG_BOOKING BK," ).append("\n"); 
		query.append("                    BKG_BL_DOC  D" ).append("\n"); 
		query.append("              WHERE BV.VSL_CD      = B.VSL_CD" ).append("\n"); 
		query.append("                AND BV.SKD_VOY_NO  = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                AND BV.SKD_DIR_CD  = B.SKD_DIR_CD" ).append("\n"); 
		query.append("                AND BV.VSL_CD      = LD.VSL_CD" ).append("\n"); 
		query.append("                AND BV.SKD_VOY_NO  = LD.SKD_VOY_NO" ).append("\n"); 
		query.append("                AND BV.SKD_DIR_CD  = LD.SKD_DIR_CD" ).append("\n"); 
		query.append("                AND BV.POL_YD_CD   = B.POL_CD" ).append("\n"); 
		query.append("                AND NVL(BV.POL_CLPT_IND_SEQ,1) = NVL(B.POL_CLPT_IND_SEQ,1)" ).append("\n"); 
		query.append("                AND NVL(BV.POD_CLPT_IND_SEQ,1) = NVL(B.POD_CLPT_IND_SEQ,1)" ).append("\n"); 
		query.append("                AND DECODE(BV.POD_CD, 'XXXXX', LD.LD_PORT, BV.POD_YD_CD) = B.POD_CD" ).append("\n"); 
		query.append("                AND BK.BKG_NO      = BV.BKG_NO" ).append("\n"); 
		query.append("                AND BK.BKG_STS_CD IN ('F', 'W')" ).append("\n"); 
		query.append("                AND BK.BKG_NO      = D.BKG_NO" ).append("\n"); 
		query.append("           ) Z" ).append("\n"); 
		query.append("        GROUP BY Z.TP , Z.POL_CD , Z.POL_SEQ , Z.POL_CLPT_IND_SEQ, Z.POD_CD , Z.POD_SEQ , Z.POD_CLPT_IND_SEQ, Z.IOC_CD, Z.BKG_CGO_TP_CD " ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("  )" ).append("\n"); 
		query.append(" -- 2016.03.11 add MT booking 분리" ).append("\n"); 
		query.append(" ,BKG_DATA_MT AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        SELECT " ).append("\n"); 
		query.append("          2 AS SRC ," ).append("\n"); 
		query.append("          Z.TP ," ).append("\n"); 
		query.append("          Z.POL_CD ," ).append("\n"); 
		query.append("          Z.POL_SEQ ," ).append("\n"); 
		query.append("          Z.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          Z.POD_CD ," ).append("\n"); 
		query.append("          Z.POD_SEQ ," ).append("\n"); 
		query.append("          Z.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          Z.IOC_CD ," ).append("\n"); 
		query.append("          Z.BKG_CGO_TP_CD," ).append("\n"); 
		query.append("         SUM(TO_NUMBER(NVL(DECODE(Z.QTY_TP, '1', SUBSTR(Z.VAL, 1, 14), SUBSTR(Z.VAL, 15)), 0))) AS QTY_TTL" ).append("\n"); 
		query.append("        FROM (" ).append("\n"); 
		query.append("              SELECT /*+ ORDERED USE_NL(P B LD BV BK D) */" ).append("\n"); 
		query.append("                     B.TP    ," ).append("\n"); 
		query.append("                     B.POL_CD," ).append("\n"); 
		query.append("                     B.POD_CD," ).append("\n"); 
		query.append("                     B.POL_SEQ," ).append("\n"); 
		query.append("                     B.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     B.POD_SEQ," ).append("\n"); 
		query.append("                     B.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("                     DECODE(BK.BKG_CGO_TP_CD, 'P', 'M', 'F') AS BKG_CGO_TP_CD," ).append("\n"); 
		query.append("                     DECODE(BV.VSL_PRE_PST_CD, 'T', DECODE(B.POL_CONTI, B.POD_CONTI, 2, 1), 3) AS IOC_CD," ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                       SELECT /*+ ORDERED USE_NL(Q M) */ " ).append("\n"); 
		query.append("                              TO_CHAR(SUM(DECODE(SAQ_GET_CNTR_SZ_FNC(Q.CNTR_TPSZ_CD), '2', 1, '5', SPC_GET_HC_RT_BSA_FNC(M.TRD_CD, P.RLANE_CD ,P.SKD_DIR_CD ,P.VSL_CD , P.SKD_VOY_NO, 'D5'), '7', SPC_GET_HC_RT_BSA_FNC(M.TRD_CD, P.RLANE_CD ,P.SKD_DIR_CD ,P.VSL_CD , P.SKD_VOY_NO, 'D7'), 2) * Q.OP_CNTR_QTY), 'FM0000000000.000')" ).append("\n"); 
		query.append("                              || TO_CHAR((MAX(D.ACT_WGT) * DECODE(MAX(D.WGT_UT_CD), 'LBS', 0.00045, 0.001)) + SUM(Q.OP_CNTR_QTY * ( SELECT TS.CNTR_TPSZ_TARE_WGT" ).append("\n"); 
		query.append("                                                                                                                                      FROM MDM_CNTR_TP_SZ TS" ).append("\n"); 
		query.append("                                                                                                                                     WHERE TS.CNTR_TPSZ_CD = Q.CNTR_TPSZ_CD)) * 0.001, 'FM0000000000.000')" ).append("\n"); 
		query.append("                         FROM BKG_QUANTITY Q," ).append("\n"); 
		query.append("                              MDM_DTL_REV_LANE M" ).append("\n"); 
		query.append("                        WHERE BK.BKG_NO     = Q.BKG_NO" ).append("\n"); 
		query.append("                          AND Q.OP_CNTR_QTY > 0" ).append("\n"); 
		query.append("                          AND BK.SLAN_CD = SUBSTR(M.RLANE_CD, 1, 3)" ).append("\n"); 
		query.append("                          AND BK.SKD_DIR_CD = M.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("                          AND M.FM_CONTI_CD = (" ).append("\n"); 
		query.append("                                               SELECT MLOC.CONTI_CD" ).append("\n"); 
		query.append("                                                 FROM MDM_LOCATION MLOC" ).append("\n"); 
		query.append("                                                WHERE MLOC.LOC_CD = BV.POL_CD )" ).append("\n"); 
		query.append("                          AND M.TO_CONTI_CD = (" ).append("\n"); 
		query.append("                                               SELECT MLOC.CONTI_CD" ).append("\n"); 
		query.append("                                                 FROM MDM_LOCATION MLOC" ).append("\n"); 
		query.append("                                                WHERE MLOC.LOC_CD = BV.POD_CD )" ).append("\n"); 
		query.append("                          AND M.DELT_FLG = 'N'" ).append("\n"); 
		query.append("                    ) AS VAL," ).append("\n"); 
		query.append("                    P.QTY_TP" ).append("\n"); 
		query.append("               FROM PARAMS      P ," ).append("\n"); 
		query.append("                    PORT_SEQ_MT B ," ).append("\n"); 
		query.append("                    VVD_LD_PORT_MT LD," ).append("\n"); 
		query.append("                    BKG_VVD     BV," ).append("\n"); 
		query.append("                    BKG_BOOKING BK," ).append("\n"); 
		query.append("                    BKG_BL_DOC  D" ).append("\n"); 
		query.append("              WHERE BV.VSL_CD      = B.VSL_CD" ).append("\n"); 
		query.append("                AND BV.SKD_VOY_NO  = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                AND BV.SKD_DIR_CD  = B.SKD_DIR_CD" ).append("\n"); 
		query.append("                AND BV.VSL_CD      = LD.VSL_CD" ).append("\n"); 
		query.append("                AND BV.SKD_VOY_NO  = LD.SKD_VOY_NO" ).append("\n"); 
		query.append("                AND BV.SKD_DIR_CD  = LD.SKD_DIR_CD" ).append("\n"); 
		query.append("                AND BV.POL_YD_CD   = B.POL_CD" ).append("\n"); 
		query.append("                AND NVL(BV.POL_CLPT_IND_SEQ,1) = NVL(B.POL_CLPT_IND_SEQ,1)" ).append("\n"); 
		query.append("                AND NVL(BV.POD_CLPT_IND_SEQ,1) = NVL(B.POD_CLPT_IND_SEQ,1)" ).append("\n"); 
		query.append("                AND DECODE(BV.POD_CD, 'XXXXX', LD.LD_PORT, BV.POD_YD_CD) = B.POD_CD" ).append("\n"); 
		query.append("                AND BK.BKG_NO      = BV.BKG_NO" ).append("\n"); 
		query.append("                AND BK.BKG_STS_CD IN ('F', 'W')" ).append("\n"); 
		query.append("                AND BK.BKG_NO      = D.BKG_NO" ).append("\n"); 
		query.append("                AND BK.BKG_CGO_TP_CD ='P'" ).append("\n"); 
		query.append("           ) Z" ).append("\n"); 
		query.append("        GROUP BY Z.TP , Z.POL_CD , Z.POL_SEQ , Z.POL_CLPT_IND_SEQ, Z.POD_CD , Z.POD_SEQ , Z.POD_CLPT_IND_SEQ, Z.IOC_CD, Z.BKG_CGO_TP_CD " ).append("\n"); 
		query.append("        " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("  ) " ).append("\n"); 
		query.append("  " ).append("\n"); 
		query.append(" , ALC_DATA AS (" ).append("\n"); 
		query.append("    SELECT /*+ ORDERED USE_NL(P B M) */" ).append("\n"); 
		query.append("      1 AS SRC," ).append("\n"); 
		query.append("      B.TP ," ).append("\n"); 
		query.append("      B.POL_CD," ).append("\n"); 
		query.append("      B.POL_SEQ," ).append("\n"); 
		query.append("      B.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      B.POD_CD," ).append("\n"); 
		query.append("      B.POD_SEQ," ).append("\n"); 
		query.append("      B.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      DECODE(M.TS_FLG, 'Y', 3, DECODE(M.IOC_CD, 'I', 2, 'O', 1, 5)) AS IOC_CD ," ).append("\n"); 
		query.append("      SUM(DECODE(P.QTY_TP, '1', M.ASGN_TTL_QTY, M.ASGN_TTL_WGT)) AS QTY_TTL" ).append("\n"); 
		query.append("    FROM PARAMS P," ).append("\n"); 
		query.append("         PORT_SEQ B," ).append("\n"); 
		query.append("         SPC_ALOC_POL_POD M" ).append("\n"); 
		query.append("    WHERE M.VSL_CD = B.VSL_CD" ).append("\n"); 
		query.append("      AND M.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("      AND M.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("      AND SUBSTR(M.POL_YD_CD, 1, LENGTH(B.POL_CD)) = B.POL_CD" ).append("\n"); 
		query.append("      AND NVL(M.POL_IND_SEQ, 1) = DECODE(M.POL_IND_SEQ, NULL, 1, B.POL_CLPT_IND_SEQ)" ).append("\n"); 
		query.append("      AND SUBSTR(M.POD_YD_CD, 1, LENGTH(B.POD_CD)) = B.POD_CD" ).append("\n"); 
		query.append("      AND NVL(M.POD_IND_SEQ, 1) = DECODE(M.POD_IND_SEQ, NULL, 1, B.POD_CLPT_IND_SEQ)" ).append("\n"); 
		query.append("    GROUP BY B.TP , B.POL_CD, B.POL_SEQ, B.POL_CLPT_IND_SEQ, B.POD_CD, B.POD_SEQ, B.POD_CLPT_IND_SEQ, DECODE(M.TS_FLG, 'Y', 3, DECODE(M.IOC_CD, 'I', 2, 'O', 1, 5)) " ).append("\n"); 
		query.append("    ) " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("    ,FCT_DATA AS (" ).append("\n"); 
		query.append("    SELECT /*+ ORDERED USE_NL(P B F) */" ).append("\n"); 
		query.append("      3 AS SRC," ).append("\n"); 
		query.append("      B.TP ," ).append("\n"); 
		query.append("      B.POL_CD," ).append("\n"); 
		query.append("      B.POL_SEQ," ).append("\n"); 
		query.append("      B.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      B.POD_CD," ).append("\n"); 
		query.append("      B.POD_SEQ," ).append("\n"); 
		query.append("      B.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      DECODE(F.IOC_TS_CD, 'O', 1, 'I', 2, 'T', 3, 5) AS IOC_CD," ).append("\n"); 
		query.append("      DECODE(P.QTY_TP, '1', (NVL(F.CFM_TTL_QTY, 0) + NVL(F.CFM_40FT_HC_QTY, 0) * SPC_GET_HC_RT_BSA_FNC(F.TRD_CD, P.RLANE_CD ,P.SKD_DIR_CD ,P.VSL_CD , P.SKD_VOY_NO, 'D5') + NVL(F.CFM_45FT_HC_QTY, 0) * SPC_GET_HC_RT_BSA_FNC(F.TRD_CD, P.RLANE_CD ,P.SKD_DIR_CD ,P.VSL_CD , P.SKD_VOY_NO, 'D7') + NVL(F.CFM_53FT_QTY, 0) * 2), F.CFM_TTL_WGT) AS QTY_TTL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("    FROM PARAMS P, " ).append("\n"); 
		query.append("         PORT_SEQ B," ).append("\n"); 
		query.append("         SPC_DLY_FCAST_CUST F" ).append("\n"); 
		query.append("    WHERE F.VSL_CD = B.VSL_CD" ).append("\n"); 
		query.append("      AND F.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("      AND F.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("      AND SUBSTR(F.POL_YD_CD, 1, LENGTH(B.POL_CD)) = B.POL_CD" ).append("\n"); 
		query.append("      AND NVL(F.POL_IND_SEQ, 1) = DECODE(F.POL_IND_SEQ, NULL, 1, B.POL_CLPT_IND_SEQ)" ).append("\n"); 
		query.append("      AND SUBSTR(F.POD_YD_CD, 1, LENGTH(B.POD_CD)) = B.POD_CD" ).append("\n"); 
		query.append("      AND NVL(F.POD_IND_SEQ, 1) = DECODE(F.POD_IND_SEQ, NULL, 1, B.POD_CLPT_IND_SEQ)" ).append("\n"); 
		query.append("      ) " ).append("\n"); 
		query.append("  ,MT_DATA AS (" ).append("\n"); 
		query.append("    SELECT " ).append("\n"); 
		query.append("      T.SEQ SRC," ).append("\n"); 
		query.append("      Z.TP ," ).append("\n"); 
		query.append("      Z.POL_CD," ).append("\n"); 
		query.append("      Z.POL_SEQ," ).append("\n"); 
		query.append("      Z.POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      Z.POD_CD," ).append("\n"); 
		query.append("      Z.POD_SEQ," ).append("\n"); 
		query.append("      Z.POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("      Z.IOC_CD,   " ).append("\n"); 
		query.append("      SUM(Z.QTY_TTL) AS QTY_TTL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("        SELECT TP ," ).append("\n"); 
		query.append("          POL_CD ," ).append("\n"); 
		query.append("          POL_SEQ ," ).append("\n"); 
		query.append("          POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          POD_CD ," ).append("\n"); 
		query.append("          POD_SEQ ," ).append("\n"); 
		query.append("          POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          4 AS IOC_CD," ).append("\n"); 
		query.append("          QTY_TTL" ).append("\n"); 
		query.append("        FROM BKG_DATA_MT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("          ) Z," ).append("\n"); 
		query.append("      COPY T" ).append("\n"); 
		query.append("    WHERE T.SEQ <= 4" ).append("\n"); 
		query.append("    GROUP BY T.SEQ , Z.TP , Z.POL_CD, Z.POL_SEQ, Z.POL_CLPT_IND_SEQ, Z.POD_CD, Z.POD_SEQ, Z.POD_CLPT_IND_SEQ, Z.IOC_CD " ).append("\n"); 
		query.append("    ) " ).append("\n"); 
		query.append("   , ALL_DATA AS (" ).append("\n"); 
		query.append("    SELECT 1 AS SRC," ).append("\n"); 
		query.append("      Z.TP ," ).append("\n"); 
		query.append("      Z.POL_CD," ).append("\n"); 
		query.append("      Z.POL_SEQ," ).append("\n"); 
		query.append("      P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      Z.POD_CD," ).append("\n"); 
		query.append("      Z.POD_SEQ," ).append("\n"); 
		query.append("      P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      Z.IOC_CD," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- 이미 지난경우는 BKG물량 사용, 나머지의 경우 OCEAN이고 이전항차와 겹치면 BKG물량, 나머지의 경우 ALLOCATION 물량" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("      (" ).append("\n"); 
		query.append("                  CASE" ).append("\n"); 
		query.append("                    WHEN Z.TP = '1' -- POL인경우 DISCHARGING 물량" ).append("\n"); 
		query.append("                    THEN SUM(DECODE(P.PAST , 'Y', DECODE(Z.SRC, 2, Z.QTY_TTL, 0), DECODE(Z.IOC_CD || '' || P.TP, '11', DECODE(Z.SRC, 2, Z.QTY_TTL, 0), DECODE(Z.SRC, 1, Z.QTY_TTL, 0))))" ).append("\n"); 
		query.append("                    ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_TTL), DECODE(Z.SRC, 1, Z.QTY_TTL)))" ).append("\n"); 
		query.append("                  END ) AS QTY_TTL," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("      MAX(P.PAST) AS PAST" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("        SELECT SRC ," ).append("\n"); 
		query.append("          TP ," ).append("\n"); 
		query.append("          POL_CD," ).append("\n"); 
		query.append("          POL_SEQ," ).append("\n"); 
		query.append("          POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          POD_CD ," ).append("\n"); 
		query.append("          POD_SEQ," ).append("\n"); 
		query.append("          POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          IOC_CD," ).append("\n"); 
		query.append("          QTY_TTL" ).append("\n"); 
		query.append("        FROM ALC_DATA" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("        SELECT SRC ," ).append("\n"); 
		query.append("          TP ," ).append("\n"); 
		query.append("          POL_CD," ).append("\n"); 
		query.append("          POL_SEQ," ).append("\n"); 
		query.append("          POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          POD_CD ," ).append("\n"); 
		query.append("          POD_SEQ," ).append("\n"); 
		query.append("          POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          IOC_CD," ).append("\n"); 
		query.append("          QTY_TTL" ).append("\n"); 
		query.append("        FROM BKG_DATA" ).append("\n"); 
		query.append("        WHERE BKG_CGO_TP_CD = 'F' ) Z," ).append("\n"); 
		query.append("      PORT_SEQ P" ).append("\n"); 
		query.append("    WHERE P.TP = Z.TP" ).append("\n"); 
		query.append("      AND P.POL_CD = Z.POL_CD" ).append("\n"); 
		query.append("      AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("      AND P.POD_CD = Z.POD_CD" ).append("\n"); 
		query.append("      AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("    GROUP BY Z.TP , Z.POL_CD, Z.POL_SEQ, P.POL_CLPT_IND_SEQ1, Z.POD_CD, Z.POD_SEQ, P.POD_CLPT_IND_SEQ1, Z.IOC_CD" ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    SELECT Z.SRC ," ).append("\n"); 
		query.append("      Z.TP ," ).append("\n"); 
		query.append("      Z.POL_CD," ).append("\n"); 
		query.append("      Z.POL_SEQ," ).append("\n"); 
		query.append("      P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      Z.POD_CD," ).append("\n"); 
		query.append("      Z.POD_SEQ," ).append("\n"); 
		query.append("      P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      Z.IOC_CD," ).append("\n"); 
		query.append("      SUM(Z.QTY_TTL) AS QTY_TTL," ).append("\n"); 
		query.append("      MAX(P.PAST) AS PAST" ).append("\n"); 
		query.append("    FROM BKG_DATA Z," ).append("\n"); 
		query.append("      PORT_SEQ P" ).append("\n"); 
		query.append("    WHERE Z.BKG_CGO_TP_CD = 'F'" ).append("\n"); 
		query.append("      AND P.TP = Z.TP" ).append("\n"); 
		query.append("      AND P.POL_CD = Z.POL_CD" ).append("\n"); 
		query.append("      AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("      AND P.POD_CD = Z.POD_CD" ).append("\n"); 
		query.append("      AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("    GROUP BY Z.SRC , Z.TP , Z.POL_CD, Z.POL_SEQ, P.POL_CLPT_IND_SEQ1, Z.POD_CD, Z.POD_SEQ, P.POD_CLPT_IND_SEQ1, Z.IOC_CD" ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    SELECT 3 AS SRC," ).append("\n"); 
		query.append("      Z.TP ," ).append("\n"); 
		query.append("      Z.POL_CD," ).append("\n"); 
		query.append("      Z.POL_SEQ," ).append("\n"); 
		query.append("      P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      Z.POD_CD," ).append("\n"); 
		query.append("      Z.POD_SEQ," ).append("\n"); 
		query.append("      P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      Z.IOC_CD," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("-- 이미 지난경우는 BKG물량 사용, 나머지의 경우 OCEAN이고 이전항차와 겹치면 BKG물량, 나머지의 경우 FORECAST 물량" ).append("\n"); 
		query.append("      (" ).append("\n"); 
		query.append("                  CASE" ).append("\n"); 
		query.append("                    WHEN Z.TP = '1' -- POL인경우 DISCHARGING 룰량" ).append("\n"); 
		query.append("                    THEN SUM(DECODE(P.PAST , 'Y', DECODE(Z.SRC, 2, Z.QTY_TTL, 0) , DECODE(Z.IOC_CD || '' || P.TP , '11', DECODE(Z.SRC, 2, Z.QTY_TTL, 0) , DECODE(Z.SRC, 3, Z.QTY_TTL, 0))))" ).append("\n"); 
		query.append("                    ELSE SUM(DECODE(P.PAST, 'Y', DECODE(Z.SRC, 2, Z.QTY_TTL), DECODE(Z.SRC, 3, Z.QTY_TTL)))" ).append("\n"); 
		query.append("                  END ) AS QTY_TTL," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("      MAX(P.PAST) AS PAST" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("        SELECT SRC ," ).append("\n"); 
		query.append("          TP ," ).append("\n"); 
		query.append("          POL_CD ," ).append("\n"); 
		query.append("          POL_SEQ," ).append("\n"); 
		query.append("          POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          POD_CD ," ).append("\n"); 
		query.append("          POD_SEQ," ).append("\n"); 
		query.append("          POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          IOC_CD ," ).append("\n"); 
		query.append("          QTY_TTL" ).append("\n"); 
		query.append("        FROM FCT_DATA" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("        SELECT SRC ," ).append("\n"); 
		query.append("          TP ," ).append("\n"); 
		query.append("          POL_CD ," ).append("\n"); 
		query.append("          POL_SEQ," ).append("\n"); 
		query.append("          POL_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          POD_CD ," ).append("\n"); 
		query.append("          POD_SEQ," ).append("\n"); 
		query.append("          POD_CLPT_IND_SEQ," ).append("\n"); 
		query.append("          IOC_CD ," ).append("\n"); 
		query.append("          QTY_TTL" ).append("\n"); 
		query.append("        FROM BKG_DATA" ).append("\n"); 
		query.append("        WHERE BKG_CGO_TP_CD = 'F' ) Z," ).append("\n"); 
		query.append("      PORT_SEQ P" ).append("\n"); 
		query.append("    WHERE P.TP = Z.TP" ).append("\n"); 
		query.append("      AND P.POL_CD = Z.POL_CD" ).append("\n"); 
		query.append("      AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("      AND P.POD_CD = Z.POD_CD" ).append("\n"); 
		query.append("      AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("    GROUP BY Z.TP , Z.POL_CD, Z.POL_SEQ, P.POL_CLPT_IND_SEQ1, Z.POD_CD, Z.POD_SEQ, P.POD_CLPT_IND_SEQ1, Z.IOC_CD" ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    SELECT 4 AS SRC," ).append("\n"); 
		query.append("      Z.TP ," ).append("\n"); 
		query.append("      Z.POL_CD," ).append("\n"); 
		query.append("      Z.POL_SEQ," ).append("\n"); 
		query.append("      P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      Z.POD_CD," ).append("\n"); 
		query.append("      Z.POD_SEQ," ).append("\n"); 
		query.append("      P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      Z.IOC_CD ," ).append("\n"); 
		query.append("      SUM(Z.QTY_TTL) AS QTY_TTL," ).append("\n"); 
		query.append("      MAX(P.PAST) AS PAST" ).append("\n"); 
		query.append("    FROM ALC_DATA Z," ).append("\n"); 
		query.append("      PORT_SEQ P" ).append("\n"); 
		query.append("    WHERE P.TP = Z.TP" ).append("\n"); 
		query.append("      AND P.POL_CD = Z.POL_CD" ).append("\n"); 
		query.append("      AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("      AND P.POD_CD = Z.POD_CD" ).append("\n"); 
		query.append("      AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("    GROUP BY Z.TP , Z.POL_CD, Z.POL_SEQ, P.POL_CLPT_IND_SEQ1, Z.POD_CD, Z.POD_SEQ, P.POD_CLPT_IND_SEQ1, Z.IOC_CD" ).append("\n"); 
		query.append("    UNION ALL" ).append("\n"); 
		query.append("    SELECT Z.SRC ," ).append("\n"); 
		query.append("      Z.TP ," ).append("\n"); 
		query.append("      Z.POL_CD," ).append("\n"); 
		query.append("      Z.POL_SEQ," ).append("\n"); 
		query.append("      P.POL_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      Z.POD_CD," ).append("\n"); 
		query.append("      Z.POD_SEQ," ).append("\n"); 
		query.append("      P.POD_CLPT_IND_SEQ1," ).append("\n"); 
		query.append("      Z.IOC_CD," ).append("\n"); 
		query.append("      SUM(Z.QTY_TTL) AS QTY_TTL," ).append("\n"); 
		query.append("      MAX(P.PAST) AS PAST" ).append("\n"); 
		query.append("    FROM MT_DATA Z,PORT_SEQ_MT P" ).append("\n"); 
		query.append("    WHERE 1=1" ).append("\n"); 
		query.append("--      AND Z.BKG_CGO_TP_CD = 'M'" ).append("\n"); 
		query.append("      AND P.TP = Z.TP" ).append("\n"); 
		query.append("      AND P.POL_CD = Z.POL_CD" ).append("\n"); 
		query.append("      AND P.POL_CLPT_IND_SEQ = Z.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("      AND P.POD_CD = Z.POD_CD" ).append("\n"); 
		query.append("      AND P.POD_CLPT_IND_SEQ = Z.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("    GROUP BY Z.SRC , Z.TP , Z.POL_CD, Z.POL_SEQ, P.POL_CLPT_IND_SEQ1, Z.POD_CD, Z.POD_SEQ, P.POD_CLPT_IND_SEQ1, Z.IOC_CD " ).append("\n"); 
		query.append("    " ).append("\n"); 
		query.append("    )" ).append("\n"); 
		query.append(" , PORT_MAP AS (" ).append("\n"); 
		query.append("    SELECT C1.SEQ AS SRC ," ).append("\n"); 
		query.append("      C2.SEQ AS IOC_CD," ).append("\n"); 
		query.append("      P.PORT_CD ," ).append("\n"); 
		query.append("      P.YD_CD ," ).append("\n"); 
		query.append("      P.CLPT_SEQ," ).append("\n"); 
		query.append("      P.CLPT_IND_SEQ," ).append("\n"); 
		query.append("      P.FLG ," ).append("\n"); 
		query.append("      P.PAST," ).append("\n"); 
		query.append("      P.BSA" ).append("\n"); 
		query.append("    FROM CUR_PORTS P ," ).append("\n"); 
		query.append("      COPY C1," ).append("\n"); 
		query.append("      COPY C2" ).append("\n"); 
		query.append("    WHERE C1.SEQ <= 4" ).append("\n"); 
		query.append("      AND C2.SEQ <= 5 ) " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT " ).append("\n"); 
		query.append("  DECODE(SRC, 1, 'A', 2, 'B', 3, 'F', 4, 'M') AS SRC," ).append("\n"); 
		query.append("  DECODE(IOC_CD, 1, 'OCN', 2, 'IPC', 3, 'T/S', 4, 'MT', 5, 'TOTAL') AS IOC_CD," ).append("\n"); 
		query.append("  PORT_CD ," ).append("\n"); 
		query.append("  PORT_SEQ," ).append("\n"); 
		query.append("  FLG ," ).append("\n"); 
		query.append("   NVL(LOD_TTL, 0) LOD_TTL," ).append("\n"); 
		query.append("   NVL(DIS_TTL, 0) DIS_TTL," ).append("\n"); 
		query.append("   NVL(ON_TTL, 0) ON_TTL," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("  PAST ," ).append("\n"); 
		query.append("  BSA" ).append("\n"); 
		query.append(" FROM (" ).append("\n"); 
		query.append("    SELECT Z.SRC ," ).append("\n"); 
		query.append("      Z.IOC_CD ," ).append("\n"); 
		query.append("      Z.PORT_CD ," ).append("\n"); 
		query.append("      Z.PORT_SEQ," ).append("\n"); 
		query.append("      Z.FLG ," ).append("\n"); 
		query.append("      Z.LOD_TTL ," ).append("\n"); 
		query.append("      (Z.DIS_TTL + Z.PRE_TTL) AS DIS_TTL," ).append("\n"); 
		query.append("      SUM(Z.ON_TTL + Z.LOD_TTL - Z.DIS_TTL - Z.PRE_TTL) OVER (PARTITION BY Z.SRC, Z.IOC_CD  ORDER BY PORT_SEQ) AS ON_TTL," ).append("\n"); 
		query.append("      Z.PAST," ).append("\n"); 
		query.append("      Z.BSA ," ).append("\n"); 
		query.append("      '' AS T" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("        SELECT M.SRC ," ).append("\n"); 
		query.append("          M.IOC_CD," ).append("\n"); 
		query.append("          NVL(NVL(M.YD_CD, M.PORT_CD), 'TOTAL') AS PORT_CD," ).append("\n"); 
		query.append("          NVL(M.CLPT_SEQ, 0) AS PORT_SEQ," ).append("\n"); 
		query.append("          M.FLG ," ).append("\n"); 
		query.append("          M.PAST," ).append("\n"); 
		query.append("          M.BSA ," ).append("\n"); 
		query.append("          DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.LOD_TTL)) AS LOD_TTL," ).append("\n"); 
		query.append("          DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.DIS_TTL)) AS DIS_TTL," ).append("\n"); 
		query.append("          DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, 0, SUM(Z.PRE_TTL)) AS PRE_TTL," ).append("\n"); 
		query.append("          DECODE(NVL(M.YD_CD, M.PORT_CD), NULL, SUM(Z.PRE_TTL), 0) AS ON_TTL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        FROM (" ).append("\n"); 
		query.append("            SELECT A.SRC," ).append("\n"); 
		query.append("              MIN(A.PAST) OVER (PARTITION BY A.SRC, A.IOC_CD, A.PORT_CD) AS PAST," ).append("\n"); 
		query.append("              A.IOC_CD," ).append("\n"); 
		query.append("              A.SEQ," ).append("\n"); 
		query.append("              A.PORT_CD," ).append("\n"); 
		query.append("              A.PORT_SEQ," ).append("\n"); 
		query.append("              A.CLPT_IND_SEQ," ).append("\n"); 
		query.append("              A.LOD_TTL," ).append("\n"); 
		query.append("              A.DIS_TTL," ).append("\n"); 
		query.append("              A.PRE_TTL," ).append("\n"); 
		query.append("              A.TP" ).append("\n"); 
		query.append("            FROM (" ).append("\n"); 
		query.append("                SELECT A.SRC," ).append("\n"); 
		query.append("                  A.PAST," ).append("\n"); 
		query.append("                  Q.SEQ," ).append("\n"); 
		query.append("                  DECODE(T.SEQ, 2, 5, A.IOC_CD) AS IOC_CD ," ).append("\n"); 
		query.append("                  DECODE(Q.SEQ, 1, A.POL_CD, A.POD_CD) AS PORT_CD," ).append("\n"); 
		query.append("                  DECODE(Q.SEQ, 1, A.POL_SEQ, A.POD_SEQ) AS PORT_SEQ," ).append("\n"); 
		query.append("                  DECODE(Q.SEQ, 1, A.POL_CLPT_IND_SEQ1, A.POD_CLPT_IND_SEQ1) AS CLPT_IND_SEQ," ).append("\n"); 
		query.append("                  DECODE(Q.SEQ, 1, A.QTY_TTL, 0) AS LOD_TTL," ).append("\n"); 
		query.append("                  DECODE(Q.SEQ, 2, DECODE(A.TP, '1', 0, A.QTY_TTL), 0) AS DIS_TTL," ).append("\n"); 
		query.append("                  DECODE(A.TP, '1', A.QTY_TTL, 0) AS PRE_TTL," ).append("\n"); 
		query.append("                  A.TP," ).append("\n"); 
		query.append("                  '' AS T" ).append("\n"); 
		query.append("                FROM ALL_DATA A," ).append("\n"); 
		query.append("                  COPY Q," ).append("\n"); 
		query.append("                  COPY T" ).append("\n"); 
		query.append("                WHERE Q.SEQ IN (DECODE(A.TP, 1, '2', 2, '1'), DECODE(A.TP, 3, '1', 2, '2'))" ).append("\n"); 
		query.append("                  AND T.SEQ <= 2" ).append("\n"); 
		query.append("                  AND DECODE(A.SRC, 4, A.IOC_CD, 1) <> DECODE(A.SRC, 4, 4, 0) ) A ) Z," ).append("\n"); 
		query.append("          PORT_MAP M" ).append("\n"); 
		query.append("        WHERE Z.SRC (+) = M.SRC" ).append("\n"); 
		query.append("--                         AND Z.TP     (+) = M.FLG" ).append("\n"); 
		query.append("          AND Z.IOC_CD (+) = M.IOC_CD" ).append("\n"); 
		query.append("          AND Z.PORT_CD(+) = NVL(M.YD_CD, M.PORT_CD)" ).append("\n"); 
		query.append("          AND Z.CLPT_IND_SEQ(+) = M.CLPT_IND_SEQ" ).append("\n"); 
		query.append("        GROUP BY GROUPING SETS ( (M.SRC," ).append("\n"); 
		query.append("                  M.IOC_CD," ).append("\n"); 
		query.append("                  M.CLPT_SEQ," ).append("\n"); 
		query.append("                  NVL(M.YD_CD, M.PORT_CD)," ).append("\n"); 
		query.append("                  M.FLG," ).append("\n"); 
		query.append("                  M.PAST," ).append("\n"); 
		query.append("                  M.BSA), (M.SRC," ).append("\n"); 
		query.append("                  M.IOC_CD) )" ).append("\n"); 
		query.append("        ORDER BY M.SRC , M.IOC_CD, NVL(M.CLPT_SEQ, 0) ) Z " ).append("\n"); 
		query.append("        ) Z," ).append("\n"); 
		query.append("  PARAMS PS" ).append("\n"); 
		query.append("WHERE PORT_SEQ > 0" ).append("\n"); 
		query.append("  AND DECODE(SRC, 4, IOC_CD, 1) <> DECODE(SRC, 4, 4, 0)" ).append("\n"); 
		query.append("ORDER BY Z.SRC , Z.PORT_SEQ, Z.IOC_CD" ).append("\n"); 

	}
}