/*=========================================================
*Copyright(c) 2011 CyberLogitec
*@FileName : SurchargeAutoRatingDBDAOSearchSurchargeAutoratingListRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2011.03.18
*@LastModifier : 
*@LastVersion : 1.0
* 2011.03.18 
* 1.0 Creation
=========================================================*/
package com.clt.apps.opus.esm.bkg.outbounddocumentation.blrating.blrating.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.clt.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class SurchargeAutoRatingDBDAOSearchSurchargeAutoratingListRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * SearchSurchargeAutoratingList
	  * </pre>
	  */
	public SurchargeAutoRatingDBDAOSearchSurchargeAutoratingListRSQL(){
		setQuery();
		setQuery2();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("rt_aply_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("ctrt_tp_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("ca_flg",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("rt_aud_tp_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("frt_term_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("bkg_no",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("cmdt_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("svc_scp_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("ctrt_no",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.clt.apps.opus.esm.bkg.outbounddocumentation.blrating.blrating.integration").append("\n"); 
		query.append("FileName : SurchargeAutoRatingDBDAOSearchSurchargeAutoratingListRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("/*AUTORATING_20100329-001*/" ).append("\n"); 
		query.append("WITH" ).append("\n"); 
		query.append("BK AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("BOOKING 의 기본 정보를 SELECT 한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BK.BKG_NO         ," ).append("\n"); 
		query.append("        NULL CORR_NO      ," ).append("\n"); 
		query.append("        NVL(@[cmdt_cd], BK.CMDT_CD) CMDT_CD ," ).append("\n"); 
		query.append("        ( SELECT REP_CMDT_CD FROM MDM_COMMODITY WHERE CMDT_CD = NVL(@[cmdt_cd], BK.CMDT_CD) ) REP_CMDT_CD ," ).append("\n"); 
		query.append("        DECODE(BK.PRE_RLY_PORT_CD||BK.PST_RLY_PORT_CD,NULL,'Y','N') DIR_CALL_FLG  ," ).append("\n"); 
		query.append("        NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), TO_DATE(BR.RT_APLY_DT))   RT_APLY_DT    ," ).append("\n"); 
		query.append("        NVL(@[svc_scp_cd], BK.SVC_SCP_CD)   BKG_SVC_SCP_CD  ," ).append("\n"); 
		query.append("        CT.SVC_SCP_CD     ," ).append("\n"); 
		query.append("        CT.CTRT_TP_CD     ," ).append("\n"); 
		query.append("        DECODE(CT.CTRT_TP_CD, 'S', NVL(@[ctrt_no], BK.SC_NO))   SC_NO   ," ).append("\n"); 
		query.append("        DECODE(CT.CTRT_TP_CD, 'R', NVL(@[ctrt_no], BK.RFA_NO))  RFA_NO  ," ).append("\n"); 
		query.append("        DECODE(CT.CTRT_TP_CD, 'T', NVL(@[ctrt_no], BK.TAA_NO))  TAA_NO  ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN BK.XTER_BKG_RQST_CD = 'EDI' THEN 'E'" ).append("\n"); 
		query.append("        WHEN BK.XTER_BKG_RQST_CD = 'WEB' THEN 'W'" ).append("\n"); 
		query.append("        WHEN BK.XTER_BKG_RQST_CD = 'DSK' THEN 'D'" ).append("\n"); 
		query.append("        ELSE 'E'" ).append("\n"); 
		query.append("        END ESVC_TP_CD    ," ).append("\n"); 
		query.append("        CT.PROP_NO        ," ).append("\n"); 
		query.append("        CT.AMDT_SEQ       ," ).append("\n"); 
		query.append("        CT.NOTE_HDR_SEQ   ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN L4.CML_ZN_FLG = 'Y' AND L3.RGN_CD IN ( 'UAG', 'UAN', 'UAS' ) THEN 'CZ'" ).append("\n"); 
		query.append("        ELSE 'NN'" ).append("\n"); 
		query.append("        END CML_ZN_CD     ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN  L3.CNT_CD IN ( 'US', 'CA' ) AND BK.POD_CD = BK.DEL_CD AND BK.DE_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'" ).append("\n"); 
		query.append("        WHEN  L3.CNT_CD IN ( 'US', 'CA' ) THEN ( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L3.RGN_CD AND A.DEST_RGN_CD = L4.RGN_CD )" ).append("\n"); 
		query.append("        WHEN  L2.CNT_CD IN ( 'US', 'CA' ) AND BK.POL_CD = BK.POR_CD AND BK.RCV_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'" ).append("\n"); 
		query.append("        WHEN  L2.CNT_CD IN ( 'US', 'CA' ) THEN ( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L2.RGN_CD AND A.DEST_RGN_CD = L1.RGN_CD )" ).append("\n"); 
		query.append("        END   USA_SVC_MOD_CD  , -- PO, LO, IP, ML" ).append("\n"); 
		query.append("        BK.POR_CD                           ," ).append("\n"); 
		query.append("        L1.CNT_CD||L1.STE_CD  POR_STE_CD    ," ).append("\n"); 
		query.append("        L1.RGN_CD             POR_RGN_CD    ," ).append("\n"); 
		query.append("        L1.CNT_CD             POR_CNT_CD    ," ).append("\n"); 
		query.append("        L1.CONTI_CD           POR_CONTI_CD  ," ).append("\n"); 
		query.append("        BK.POL_CD                           ," ).append("\n"); 
		query.append("        L2.CNT_CD||L2.STE_CD  POL_STE_CD    ," ).append("\n"); 
		query.append("        L2.RGN_CD             POL_RGN_CD    ," ).append("\n"); 
		query.append("        L2.CNT_CD             POL_CNT_CD    ," ).append("\n"); 
		query.append("        L2.CONTI_CD           POL_CONTI_CD  ," ).append("\n"); 
		query.append("        BK.POD_CD                           ," ).append("\n"); 
		query.append("        L3.CNT_CD||L3.STE_CD  POD_STE_CD    ," ).append("\n"); 
		query.append("        L3.RGN_CD             POD_RGN_CD    ," ).append("\n"); 
		query.append("        L3.CNT_CD             POD_CNT_CD    ," ).append("\n"); 
		query.append("        L3.CONTI_CD           POD_CONTI_CD  ," ).append("\n"); 
		query.append("        BK.DEL_CD                           ," ).append("\n"); 
		query.append("        L4.CNT_CD||L4.STE_CD  DEL_STE_CD    ," ).append("\n"); 
		query.append("        L4.RGN_CD             DEL_RGN_CD    ," ).append("\n"); 
		query.append("        L4.CNT_CD             DEL_CNT_CD    ," ).append("\n"); 
		query.append("        L4.CONTI_CD           DEL_CONTI_CD  ," ).append("\n"); 
		query.append("        BK.PRE_RLY_PORT_CD                  ," ).append("\n"); 
		query.append("        BK.PST_RLY_PORT_CD                  ," ).append("\n"); 
		query.append("        BK.POL_NOD_CD                       ," ).append("\n"); 
		query.append("        BK.POD_NOD_CD                       ," ).append("\n"); 
		query.append("        BK.ORG_TRNS_MOD_CD                  ," ).append("\n"); 
		query.append("        BK.DEST_TRNS_MOD_CD                 ," ).append("\n"); 
		query.append("        BK.AGMT_ACT_CNT_CD                  ," ).append("\n"); 
		query.append("        BK.AGMT_ACT_CUST_SEQ                ," ).append("\n"); 
		query.append("        BK.USA_CSTMS_FILE_CD                ," ).append("\n"); 
		query.append("        BK.CND_CSTMS_FILE_CD                ," ).append("\n"); 
		query.append("        ( SELECT SUM(A.OP_CNTR_QTY) FROM BKG_QTY_DTL A WHERE A.BKG_NO = BK.BKG_NO )       CNTR_QTY      ," ).append("\n"); 
		query.append("        ( SELECT SUM(CEIL(A.OP_CNTR_QTY)) FROM BKG_QTY_DTL A WHERE A.BKG_NO = BK.BKG_NO ) CNTR_CEIL_QTY ," ).append("\n"); 
		query.append("        DECODE(BB.MEAS_UT_CD, 'CBF', BB.MEAS_QTY  * 0.0283  , BB.MEAS_QTY )         MEAS_QTY  ," ).append("\n"); 
		query.append("        DECODE(BB.WGT_UT_CD , 'LBS', BB.ACT_WGT   * 0.45359 , BB.ACT_WGT  )         ACT_WGT   ," ).append("\n"); 
		query.append("        BR.BKG_RT_WHF_EXPT_CD               ," ).append("\n"); 
		query.append("        NVL(NVL(@[frt_term_cd], BR.FRT_TERM_CD), 'P') FRT_TERM_CD ," ).append("\n"); 
		query.append("        ( SELECT COUNT(1) FROM PRD_PROD_CTL_ROUT_DTL A WHERE A.PCTL_NO = BK.PCTL_NO AND A.TRSP_MOD_CD = 'RD' ) PRD_RD_CNT ," ).append("\n"); 
		query.append("        ( SELECT COUNT(1) FROM BKG_HBL A WHERE A.BKG_NO = BK.BKG_NO ) BKG_HBL_CNT ," ).append("\n"); 
		query.append("        DECODE(( SELECT 'X' FROM BKG_CNTR_MF_DESC A WHERE A.BKG_NO = BK.BKG_NO AND A.CNTR_MF_NO = 'SELF' AND ROWNUM = 1 ), NULL, 0, 1)  MF_SELF_CNT" ).append("\n"); 
		query.append("FROM    BKG_BOOKING   BK  ," ).append("\n"); 
		query.append("        BKG_BL_DOC    BB  ," ).append("\n"); 
		query.append("        BKG_RATE      BR  ," ).append("\n"); 
		query.append("        MDM_LOCATION  L1  ," ).append("\n"); 
		query.append("        MDM_LOCATION  L2  ," ).append("\n"); 
		query.append("        MDM_LOCATION  L3  ," ).append("\n"); 
		query.append("        MDM_LOCATION  L4  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  CTRT_TP_CD    ," ).append("\n"); 
		query.append("                PROP_NO       ," ).append("\n"); 
		query.append("                AMDT_SEQ      ," ).append("\n"); 
		query.append("                SVC_SCP_CD    ," ).append("\n"); 
		query.append("                NOTE_HDR_SEQ  ," ).append("\n"); 
		query.append("                EFF_DT        ," ).append("\n"); 
		query.append("                EXP_DT" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  'S' CTRT_TP_CD    ," ).append("\n"); 
		query.append("                        SS.PROP_NO        ," ).append("\n"); 
		query.append("                        SS.AMDT_SEQ       ," ).append("\n"); 
		query.append("                        SS.SVC_SCP_CD     ," ).append("\n"); 
		query.append("                        SS.NOTE_HDR_SEQ   ," ).append("\n"); 
		query.append("                        SS.EFF_DT         ," ).append("\n"); 
		query.append("                        SS.EXP_DT         ," ).append("\n"); 
		query.append("                        RANK() OVER ( ORDER BY DECODE(NVL(@[svc_scp_cd], BK.SVC_SCP_CD), SS.SVC_SCP_CD, 1, 2) )   SVC_MTCH_PRIO" ).append("\n"); 
		query.append("                FROM    BKG_BOOKING   BK  ," ).append("\n"); 
		query.append("                        PRI_SP_HDR    SH  ," ).append("\n"); 
		query.append("                        PRI_SP_MN     SM  ," ).append("\n"); 
		query.append("                        PRI_SP_SCP_MN SS" ).append("\n"); 
		query.append("                WHERE   SH.SC_NO        = NVL(@[ctrt_no], BK.SC_NO)" ).append("\n"); 
		query.append("                AND     SM.PROP_NO      = SH.PROP_NO" ).append("\n"); 
		query.append("                AND     SM.PROP_STS_CD  = 'F'       -- FILING S/C" ).append("\n"); 
		query.append("                AND     SS.PROP_NO      = SM.PROP_NO" ).append("\n"); 
		query.append("                AND     SS.AMDT_SEQ     = SM.AMDT_SEQ" ).append("\n"); 
		query.append("                AND     SS.SVC_SCP_CD   IN ( NVL(@[svc_scp_cd], BK.SVC_SCP_CD), DECODE(NVL(@[svc_scp_cd], BK.SVC_SCP_CD), 'ACE', 'TPE', 'MXE', 'TPE') )" ).append("\n"); 
		query.append("                AND     BK.BKG_NO       = @[bkg_no]" ).append("\n"); 
		query.append("                AND     @[ctrt_tp_cd]   = 'S'" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        WHERE   SVC_MTCH_PRIO = 1" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        SELECT  'R' CTRT_TP_CD      ," ).append("\n"); 
		query.append("                RS.PROP_NO          ," ).append("\n"); 
		query.append("                RS.AMDT_SEQ         ," ).append("\n"); 
		query.append("                RS.SVC_SCP_CD       ," ).append("\n"); 
		query.append("                NULL  NOTE_HDR_SEQ  ," ).append("\n"); 
		query.append("                RS.EFF_DT           ," ).append("\n"); 
		query.append("                RS.EXP_DT" ).append("\n"); 
		query.append("        FROM    BKG_BOOKING   BK  ," ).append("\n"); 
		query.append("                PRI_RP_HDR    RH  ," ).append("\n"); 
		query.append("                PRI_RP_MN     RM  ," ).append("\n"); 
		query.append("                PRI_RP_SCP_MN RS" ).append("\n"); 
		query.append("        WHERE   RH.RFA_NO       = NVL(@[ctrt_no], BK.RFA_NO)" ).append("\n"); 
		query.append("        AND     RM.PROP_NO      = RH.PROP_NO" ).append("\n"); 
		query.append("        AND     RM.PROP_STS_CD  = 'A'" ).append("\n"); 
		query.append("        AND     RS.PROP_NO      = RM.PROP_NO" ).append("\n"); 
		query.append("        AND     RS.AMDT_SEQ     = RM.AMDT_SEQ" ).append("\n"); 
		query.append("        AND     RS.SVC_SCP_CD   = NVL(@[svc_scp_cd], BK.SVC_SCP_CD)" ).append("\n"); 
		query.append("        AND     BK.BKG_NO       = @[bkg_no]" ).append("\n"); 
		query.append("        AND     @[ctrt_tp_cd]   = 'R'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        SELECT  'T' CTRT_TP_CD            ," ).append("\n"); 
		query.append("                TM.TAA_PROP_NO  PROP_NO   ," ).append("\n"); 
		query.append("                TM.AMDT_SEQ               ," ).append("\n"); 
		query.append("                TM.SVC_SCP_CD             ," ).append("\n"); 
		query.append("                NULL  NOTE_HDR_SEQ        ," ).append("\n"); 
		query.append("                TM.EFF_DT                 ," ).append("\n"); 
		query.append("                TM.EXP_DT" ).append("\n"); 
		query.append("        FROM    BKG_BOOKING   BK  ," ).append("\n"); 
		query.append("                PRI_TAA_HDR   TH  ," ).append("\n"); 
		query.append("                PRI_TAA_MN    TM" ).append("\n"); 
		query.append("        WHERE   TH.TAA_NO       = NVL(@[ctrt_no], BK.TAA_NO)" ).append("\n"); 
		query.append("        AND     TM.TAA_PROP_NO  = TH.TAA_PROP_NO" ).append("\n"); 
		query.append("        AND     TM.SVC_SCP_CD   = NVL(@[svc_scp_cd], BK.SVC_SCP_CD)" ).append("\n"); 
		query.append("        AND     TM.CFM_FLG      = 'Y'       -- CONFIRMED TAA" ).append("\n"); 
		query.append("        AND     BK.BKG_NO       = @[bkg_no]" ).append("\n"); 
		query.append("        AND     @[ctrt_tp_cd]   = 'T'" ).append("\n"); 
		query.append("        ) CT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("WHERE   BB.BKG_NO       = BK.BKG_NO" ).append("\n"); 
		query.append("AND     BR.BKG_NO(+)    = BK.BKG_NO" ).append("\n"); 
		query.append("AND     L1.LOC_CD       = BK.POR_CD" ).append("\n"); 
		query.append("AND     L2.LOC_CD       = BK.POL_CD" ).append("\n"); 
		query.append("AND     L3.LOC_CD       = BK.POD_CD" ).append("\n"); 
		query.append("AND     L4.LOC_CD       = BK.DEL_CD" ).append("\n"); 
		query.append("AND     NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), ( SELECT TO_DATE(RT_APLY_DT) FROM BKG_RATE A WHERE A.BKG_NO = BK.BKG_NO ))    BETWEEN CT.EFF_DT AND CT.EXP_DT" ).append("\n"); 
		query.append("AND     BK.BKG_NO       = @[bkg_no] -- BKG No" ).append("\n"); 
		query.append("AND     @[ca_flg]       = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BK.BKG_NO         ," ).append("\n"); 
		query.append("        BK.CORR_NO        ," ).append("\n"); 
		query.append("        NVL(@[cmdt_cd], BK.CMDT_CD) CMDT_CD ," ).append("\n"); 
		query.append("        ( SELECT REP_CMDT_CD FROM MDM_COMMODITY WHERE CMDT_CD = NVL(@[cmdt_cd], BK.CMDT_CD) ) REP_CMDT_CD ," ).append("\n"); 
		query.append("        DECODE(BK.PRE_RLY_PORT_CD||BK.PST_RLY_PORT_CD,NULL,'Y','N') DIR_CALL_FLG  ," ).append("\n"); 
		query.append("        NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), TO_DATE(BR.RT_APLY_DT))   RT_APLY_DT    ," ).append("\n"); 
		query.append("        NVL(@[svc_scp_cd], BK.SVC_SCP_CD)   BKG_SVC_SCP_CD  ," ).append("\n"); 
		query.append("        CT.SVC_SCP_CD     ," ).append("\n"); 
		query.append("        CT.CTRT_TP_CD     ," ).append("\n"); 
		query.append("        DECODE(CT.CTRT_TP_CD, 'S', NVL(@[ctrt_no], BK.SC_NO))   SC_NO   ," ).append("\n"); 
		query.append("        DECODE(CT.CTRT_TP_CD, 'R', NVL(@[ctrt_no], BK.RFA_NO))  RFA_NO  ," ).append("\n"); 
		query.append("        DECODE(CT.CTRT_TP_CD, 'T', NVL(@[ctrt_no], BK.TAA_NO))  TAA_NO  ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN BK.XTER_BKG_RQST_CD = 'EDI' THEN 'E'" ).append("\n"); 
		query.append("        WHEN BK.XTER_BKG_RQST_CD = 'WEB' THEN 'W'" ).append("\n"); 
		query.append("        WHEN BK.XTER_BKG_RQST_CD = 'DSK' THEN 'D'" ).append("\n"); 
		query.append("        ELSE 'E'" ).append("\n"); 
		query.append("        END ESVC_TP_CD    ," ).append("\n"); 
		query.append("        CT.PROP_NO        ," ).append("\n"); 
		query.append("        CT.AMDT_SEQ       ," ).append("\n"); 
		query.append("        CT.NOTE_HDR_SEQ   ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN L4.CML_ZN_FLG = 'Y' AND L3.RGN_CD IN ( 'UAG', 'UAN', 'UAS' ) THEN 'CZ'" ).append("\n"); 
		query.append("        ELSE 'NN'" ).append("\n"); 
		query.append("        END CML_ZN_CD     ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN  L3.CNT_CD IN ( 'US', 'CA' ) AND BK.POD_CD = BK.DEL_CD AND BK.DE_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'" ).append("\n"); 
		query.append("        WHEN  L3.CNT_CD IN ( 'US', 'CA' ) THEN ( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L3.RGN_CD AND A.DEST_RGN_CD = L4.RGN_CD )" ).append("\n"); 
		query.append("        WHEN  L2.CNT_CD IN ( 'US', 'CA' ) AND BK.POL_CD = BK.POR_CD AND BK.RCV_TERM_CD NOT IN ( 'D', 'H' ) THEN 'PO'" ).append("\n"); 
		query.append("        WHEN  L2.CNT_CD IN ( 'US', 'CA' ) THEN ( SELECT SUBSTR(SVC_MOD_CD, 1, 2) FROM COA_USA_SVC_MOD A WHERE A.ORG_RGN_CD = L2.RGN_CD AND A.DEST_RGN_CD = L1.RGN_CD )" ).append("\n"); 
		query.append("        END   USA_SVC_MOD_CD  , -- PO, LO,9 IP, ML" ).append("\n"); 
		query.append("        BK.POR_CD                           ," ).append("\n"); 
		query.append("        L1.CNT_CD||L1.STE_CD  POR_STE_CD    ," ).append("\n"); 
		query.append("        L1.RGN_CD             POR_RGN_CD    ," ).append("\n"); 
		query.append("        L1.CNT_CD             POR_CNT_CD    ," ).append("\n"); 
		query.append("        L1.CONTI_CD           POR_CONTI_CD  ," ).append("\n"); 
		query.append("        BK.POL_CD                           ," ).append("\n"); 
		query.append("        L2.CNT_CD||L2.STE_CD  POL_STE_CD    ," ).append("\n"); 
		query.append("        L2.RGN_CD             POL_RGN_CD    ," ).append("\n"); 
		query.append("        L2.CNT_CD             POL_CNT_CD    ," ).append("\n"); 
		query.append("        L2.CONTI_CD           POL_CONTI_CD  ," ).append("\n"); 
		query.append("        BK.POD_CD                           ," ).append("\n"); 
		query.append("        L3.CNT_CD||L3.STE_CD  POD_STE_CD    ," ).append("\n"); 
		query.append("        L3.RGN_CD             POD_RGN_CD    ," ).append("\n"); 
		query.append("        L3.CNT_CD             POD_CNT_CD    ," ).append("\n"); 
		query.append("        L3.CONTI_CD           POD_CONTI_CD  ," ).append("\n"); 
		query.append("        BK.DEL_CD                           ," ).append("\n"); 
		query.append("        L4.CNT_CD||L4.STE_CD  DEL_STE_CD    ," ).append("\n"); 
		query.append("        L4.RGN_CD             DEL_RGN_CD    ," ).append("\n"); 
		query.append("        L4.CNT_CD             DEL_CNT_CD    ," ).append("\n"); 
		query.append("        L4.CONTI_CD           DEL_CONTI_CD  ," ).append("\n"); 
		query.append("        BK.PRE_RLY_PORT_CD                  ," ).append("\n"); 
		query.append("        BK.PST_RLY_PORT_CD                  ," ).append("\n"); 
		query.append("        BK.POL_NOD_CD                       ," ).append("\n"); 
		query.append("        BK.POD_NOD_CD                       ," ).append("\n"); 
		query.append("        BK.ORG_TRNS_MOD_CD                  ," ).append("\n"); 
		query.append("        BK.DEST_TRNS_MOD_CD                 ," ).append("\n"); 
		query.append("        BK.AGMT_ACT_CNT_CD                  ," ).append("\n"); 
		query.append("        BK.AGMT_ACT_CUST_SEQ                ," ).append("\n"); 
		query.append("        BK.USA_CSTMS_FILE_CD                ," ).append("\n"); 
		query.append("        BK.CND_CSTMS_FILE_CD                ," ).append("\n"); 
		query.append("        ( SELECT SUM(A.OP_CNTR_QTY) FROM BKG_QTY_DTL_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO )        CNTR_QTY      ," ).append("\n"); 
		query.append("        ( SELECT SUM(CEIL(A.OP_CNTR_QTY)) FROM BKG_QTY_DTL_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO )  CNTR_CEIL_QTY ," ).append("\n"); 
		query.append("        DECODE(BB.MEAS_UT_CD, 'CBF', BB.MEAS_QTY  * 0.0283  , BB.MEAS_QTY )   MEAS_QTY  ," ).append("\n"); 
		query.append("        DECODE(BB.WGT_UT_CD , 'LBS', BB.ACT_WGT   * 0.45359 , BB.ACT_WGT  )   ACT_WGT   ," ).append("\n"); 
		query.append("        BR.BKG_RT_WHF_EXPT_CD               ," ).append("\n"); 
		query.append("        NVL(NVL(@[frt_term_cd], BR.FRT_TERM_CD), 'P') FRT_TERM_CD ," ).append("\n"); 
		query.append("        ( SELECT COUNT(1) FROM PRD_PROD_CTL_ROUT_DTL A WHERE A.PCTL_NO = BK.PCTL_NO AND TRSP_MOD_CD = 'RD' ) PRD_RD_CNT ," ).append("\n"); 
		query.append("        ( SELECT COUNT(1) FROM BKG_HBL_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO )  BKG_HBL_CNT ," ).append("\n"); 
		query.append("        DECODE(( SELECT 'X' FROM BKG_CNTR_MF_DESC_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO AND A.CNTR_MF_NO = 'SELF' AND ROWNUM = 1 ), NULL, 0, 1) MF_SELF_CNT" ).append("\n"); 
		query.append("FROM    BKG_BKG_HIS       BK  ," ).append("\n"); 
		query.append("        BKG_BL_DOC_HIS    BB  ," ).append("\n"); 
		query.append("        BKG_RT_HIS        BR  ," ).append("\n"); 
		query.append("        MDM_LOCATION      L1  ," ).append("\n"); 
		query.append("        MDM_LOCATION      L2  ," ).append("\n"); 
		query.append("        MDM_LOCATION      L3  ," ).append("\n"); 
		query.append("        MDM_LOCATION      L4  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  CTRT_TP_CD    ," ).append("\n"); 
		query.append("                PROP_NO       ," ).append("\n"); 
		query.append("                AMDT_SEQ      ," ).append("\n"); 
		query.append("                SVC_SCP_CD    ," ).append("\n"); 
		query.append("                NOTE_HDR_SEQ  ," ).append("\n"); 
		query.append("                EFF_DT        ," ).append("\n"); 
		query.append("                EXP_DT" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  'S' CTRT_TP_CD    ," ).append("\n"); 
		query.append("                        SS.PROP_NO        ," ).append("\n"); 
		query.append("                        SS.AMDT_SEQ       ," ).append("\n"); 
		query.append("                        SS.SVC_SCP_CD     ," ).append("\n"); 
		query.append("                        SS.NOTE_HDR_SEQ   ," ).append("\n"); 
		query.append("                        SS.EFF_DT         ," ).append("\n"); 
		query.append("                        SS.EXP_DT         ," ).append("\n"); 
		query.append("                        RANK() OVER ( ORDER BY DECODE(NVL(@[svc_scp_cd], BK.SVC_SCP_CD), SS.SVC_SCP_CD, 1, 2) )   SVC_MTCH_PRIO" ).append("\n"); 
		query.append("                FROM    BKG_BKG_HIS   BK  ," ).append("\n"); 
		query.append("                        PRI_SP_HDR    SH  ," ).append("\n"); 
		query.append("                        PRI_SP_MN     SM  ," ).append("\n"); 
		query.append("                        PRI_SP_SCP_MN SS" ).append("\n"); 
		query.append("                WHERE   SH.SC_NO        = NVL(@[ctrt_no], BK.SC_NO)" ).append("\n"); 
		query.append("                AND     SM.PROP_NO      = SH.PROP_NO" ).append("\n"); 
		query.append("                AND     SM.PROP_STS_CD  = 'F'       -- FILING S/C" ).append("\n"); 
		query.append("                AND     SS.PROP_NO      = SM.PROP_NO" ).append("\n"); 
		query.append("                AND     SS.AMDT_SEQ     = SM.AMDT_SEQ" ).append("\n"); 
		query.append("                AND     SS.SVC_SCP_CD   IN ( NVL(@[svc_scp_cd], BK.SVC_SCP_CD), DECODE(NVL(@[svc_scp_cd], BK.SVC_SCP_CD), 'ACE', 'TPE', 'MXE', 'TPE') )" ).append("\n"); 
		query.append("                AND     BK.BKG_NO       = @[bkg_no]" ).append("\n"); 
		query.append("                AND     BK.CORR_NO      = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값" ).append("\n"); 
		query.append("                AND     @[ctrt_tp_cd]   = 'S'" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        WHERE   SVC_MTCH_PRIO = 1" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        SELECT  'R' CTRT_TP_CD      ," ).append("\n"); 
		query.append("                RS.PROP_NO          ," ).append("\n"); 
		query.append("                RS.AMDT_SEQ         ," ).append("\n"); 
		query.append("                RS.SVC_SCP_CD       ," ).append("\n"); 
		query.append("                NULL  NOTE_HDR_SEQ  ," ).append("\n"); 
		query.append("                RS.EFF_DT           ," ).append("\n"); 
		query.append("                RS.EXP_DT" ).append("\n"); 
		query.append("        FROM    BKG_BKG_HIS   BK  ," ).append("\n"); 
		query.append("                PRI_RP_HDR    RH  ," ).append("\n"); 
		query.append("                PRI_RP_MN     RM  ," ).append("\n"); 
		query.append("                PRI_RP_SCP_MN RS" ).append("\n"); 
		query.append("        WHERE   RH.RFA_NO       = NVL(@[ctrt_no], BK.RFA_NO)" ).append("\n"); 
		query.append("        AND     RM.PROP_NO      = RH.PROP_NO" ).append("\n"); 
		query.append("        AND     RM.PROP_STS_CD  = 'A'" ).append("\n"); 
		query.append("        AND     RS.PROP_NO      = RM.PROP_NO" ).append("\n"); 
		query.append("        AND     RS.AMDT_SEQ     = RM.AMDT_SEQ" ).append("\n"); 
		query.append("        AND     RS.SVC_SCP_CD   = NVL(@[svc_scp_cd], BK.SVC_SCP_CD)" ).append("\n"); 
		query.append("        AND     BK.BKG_NO       = @[bkg_no]" ).append("\n"); 
		query.append("        AND     BK.CORR_NO      = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값" ).append("\n"); 
		query.append("        AND     @[ctrt_tp_cd]   = 'R'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        SELECT  'T' CTRT_TP_CD            ," ).append("\n"); 
		query.append("                TM.TAA_PROP_NO  PROP_NO   ," ).append("\n"); 
		query.append("                TM.AMDT_SEQ               ," ).append("\n"); 
		query.append("                TM.SVC_SCP_CD             ," ).append("\n"); 
		query.append("                NULL  NOTE_HDR_SEQ        ," ).append("\n"); 
		query.append("                TM.EFF_DT                 ," ).append("\n"); 
		query.append("                TM.EXP_DT" ).append("\n"); 
		query.append("        FROM    BKG_BKG_HIS   BK  ," ).append("\n"); 
		query.append("                PRI_TAA_HDR   TH  ," ).append("\n"); 
		query.append("                PRI_TAA_MN    TM" ).append("\n"); 
		query.append("        WHERE   TH.TAA_NO       = NVL(@[ctrt_no], BK.TAA_NO)" ).append("\n"); 
		query.append("        AND     TM.TAA_PROP_NO  = TH.TAA_PROP_NO" ).append("\n"); 
		query.append("        AND     TM.SVC_SCP_CD   = NVL(@[svc_scp_cd], BK.SVC_SCP_CD)" ).append("\n"); 
		query.append("        AND     TM.CFM_FLG      = 'Y'       -- CONFIRMED TAA" ).append("\n"); 
		query.append("        AND     BK.BKG_NO       = @[bkg_no]" ).append("\n"); 
		query.append("        AND     BK.CORR_NO      = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값" ).append("\n"); 
		query.append("        AND     @[ctrt_tp_cd]   = 'T'" ).append("\n"); 
		query.append("        ) CT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("WHERE   BB.BKG_NO       = BK.BKG_NO" ).append("\n"); 
		query.append("AND     BB.CORR_NO      = BK.CORR_NO" ).append("\n"); 
		query.append("AND     BR.BKG_NO(+)    = BK.BKG_NO" ).append("\n"); 
		query.append("AND     BR.CORR_NO(+)   = BK.CORR_NO" ).append("\n"); 
		query.append("AND     L1.LOC_CD       = BK.POR_CD" ).append("\n"); 
		query.append("AND     L2.LOC_CD       = BK.POL_CD" ).append("\n"); 
		query.append("AND     L3.LOC_CD       = BK.POD_CD" ).append("\n"); 
		query.append("AND     L4.LOC_CD       = BK.DEL_CD" ).append("\n"); 
		query.append("AND     NVL(TO_DATE(@[rt_aply_dt], 'YYYYMMDD'), ( SELECT TO_DATE(RT_APLY_DT) FROM BKG_RT_HIS A WHERE A.BKG_NO = BK.BKG_NO AND A.CORR_NO = BK.CORR_NO ))   BETWEEN CT.EFF_DT AND CT.EXP_DT" ).append("\n"); 
		query.append("AND     BK.BKG_NO       = @[bkg_no] -- BKG No" ).append("\n"); 
		query.append("AND     BK.CORR_NO      = 'TMP0000001'  -- CORRECTION 중인 DATA 를 나타내는 고정된 상수값" ).append("\n"); 
		query.append("AND     @[ca_flg]       = 'Y'" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("OT AS (" ).append("\n"); 
		query.append("SELECT  OFT_CMB_SEQ           ," ).append("\n"); 
		query.append("        CNTR_TPSZ_CD          ," ).append("\n"); 
		query.append("        CTRT_CNTR_TPSZ_CD     ," ).append("\n"); 
		query.append("        RCV_TERM_CD           ," ).append("\n"); 
		query.append("        DE_TERM_CD            ," ).append("\n"); 
		query.append("        DRY_CGO_FLG           ," ).append("\n"); 
		query.append("        AWK_CGO_FLG           ," ).append("\n"); 
		query.append("        DCGO_FLG              ," ).append("\n"); 
		query.append("        RC_FLG                ," ).append("\n"); 
		query.append("        BB_CGO_FLG            ," ).append("\n"); 
		query.append("        SOC_FLG               ," ).append("\n"); 
		query.append("        IMDG_CLSS_CD          ," ).append("\n"); 
		query.append("        GEN_SPCL_RT_TP_CD     ," ).append("\n"); 
		query.append("        CMDT_HDR_SEQ          ," ).append("\n"); 
		query.append("        ROUT_SEQ              ," ).append("\n"); 
		query.append("        RT_SEQ                ," ).append("\n"); 
		query.append("        OP_CNTR_QTY           ," ).append("\n"); 
		query.append("        TRI_PROP_NO           ," ).append("\n"); 
		query.append("        OFT_CHG_UT_AMT        ," ).append("\n"); 
		query.append("        OAR_CHG_UT_AMT        ," ).append("\n"); 
		query.append("        DAR_CHG_UT_AMT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  OFT_CMB_SEQ           ," ).append("\n"); 
		query.append("                CNTR_TPSZ_CD          ," ).append("\n"); 
		query.append("                CTRT_CNTR_TPSZ_CD     ," ).append("\n"); 
		query.append("                RCV_TERM_CD           ," ).append("\n"); 
		query.append("                DE_TERM_CD            ," ).append("\n"); 
		query.append("                DRY_CGO_FLG           ," ).append("\n"); 
		query.append("                AWK_CGO_FLG           ," ).append("\n"); 
		query.append("                DCGO_FLG              ," ).append("\n"); 
		query.append("                RC_FLG                ," ).append("\n"); 
		query.append("                BB_CGO_FLG            ," ).append("\n"); 
		query.append("                SOC_FLG               ," ).append("\n"); 
		query.append("                IMDG_CLSS_CD          ," ).append("\n"); 
		query.append("                PRC_GEN_SPCL_RT_TP_CD GEN_SPCL_RT_TP_CD ," ).append("\n"); 
		query.append("                PRC_CMDT_HDR_SEQ      CMDT_HDR_SEQ      ," ).append("\n"); 
		query.append("                PRC_ROUT_SEQ          ROUT_SEQ          ," ).append("\n"); 
		query.append("                PRC_RT_SEQ            RT_SEQ            ," ).append("\n"); 
		query.append("                OP_CNTR_QTY           ," ).append("\n"); 
		query.append("                TRI_PROP_NO           ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  NVL(SUM(CHG_UT_AMT), 0)" ).append("\n"); 
		query.append("                FROM    BKG_AUTO_RT_OCN_FRT_TMP B" ).append("\n"); 
		query.append("                WHERE   B.OFT_CMB_SEQ       = A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                AND     B.CNTR_TPSZ_CD      = A.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                AND     B.CTRT_CNTR_TPSZ_CD = A.CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                AND     B.RCV_TERM_CD       = A.RCV_TERM_CD" ).append("\n"); 
		query.append("                AND     B.DE_TERM_CD        = A.DE_TERM_CD" ).append("\n"); 
		query.append("                AND     B.DRY_CGO_FLG       = A.DRY_CGO_FLG" ).append("\n"); 
		query.append("                AND     B.AWK_CGO_FLG       = A.AWK_CGO_FLG" ).append("\n"); 
		query.append("                AND     B.DCGO_FLG          = A.DCGO_FLG" ).append("\n"); 
		query.append("                AND     B.RC_FLG            = A.RC_FLG" ).append("\n"); 
		query.append("                AND     B.BB_CGO_FLG        = A.BB_CGO_FLG" ).append("\n"); 
		query.append("                AND     B.SOC_FLG           = A.SOC_FLG" ).append("\n"); 
		query.append("                AND     NVL(B.IMDG_CLSS_CD, '*')  = NVL(A.IMDG_CLSS_CD, '*')" ).append("\n"); 
		query.append("                AND     B.CHG_CD            = 'OFT'" ).append("\n"); 
		query.append("                ) OFT_CHG_UT_AMT         ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  NVL(SUM(CHG_UT_AMT), 0)" ).append("\n"); 
		query.append("                FROM    BKG_AUTO_RT_OCN_FRT_TMP B" ).append("\n"); 
		query.append("                WHERE   B.OFT_CMB_SEQ       = A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                AND     B.CNTR_TPSZ_CD      = A.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                AND     B.CTRT_CNTR_TPSZ_CD = A.CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                AND     B.RCV_TERM_CD       = A.RCV_TERM_CD" ).append("\n"); 
		query.append("                AND     B.DE_TERM_CD        = A.DE_TERM_CD" ).append("\n"); 
		query.append("                AND     B.DRY_CGO_FLG       = A.DRY_CGO_FLG" ).append("\n"); 
		query.append("                AND     B.AWK_CGO_FLG       = A.AWK_CGO_FLG" ).append("\n"); 
		query.append("                AND     B.DCGO_FLG          = A.DCGO_FLG" ).append("\n"); 
		query.append("                AND     B.RC_FLG            = A.RC_FLG" ).append("\n"); 
		query.append("                AND     B.BB_CGO_FLG        = A.BB_CGO_FLG" ).append("\n"); 
		query.append("                AND     B.SOC_FLG           = A.SOC_FLG" ).append("\n"); 
		query.append("                AND     NVL(B.IMDG_CLSS_CD, '*')  = NVL(A.IMDG_CLSS_CD, '*')" ).append("\n"); 
		query.append("                AND     B.CHG_CD            = 'OAR'" ).append("\n"); 
		query.append("                ) OAR_CHG_UT_AMT         ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  NVL(SUM(CHG_UT_AMT), 0)" ).append("\n"); 
		query.append("                FROM    BKG_AUTO_RT_OCN_FRT_TMP B" ).append("\n"); 
		query.append("                WHERE   B.OFT_CMB_SEQ       = A.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                AND     B.CNTR_TPSZ_CD      = A.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                AND     B.CTRT_CNTR_TPSZ_CD = A.CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                AND     B.RCV_TERM_CD       = A.RCV_TERM_CD" ).append("\n"); 
		query.append("                AND     B.DE_TERM_CD        = A.DE_TERM_CD" ).append("\n"); 
		query.append("                AND     B.DRY_CGO_FLG       = A.DRY_CGO_FLG" ).append("\n"); 
		query.append("                AND     B.AWK_CGO_FLG       = A.AWK_CGO_FLG" ).append("\n"); 
		query.append("                AND     B.DCGO_FLG          = A.DCGO_FLG" ).append("\n"); 
		query.append("                AND     B.RC_FLG            = A.RC_FLG" ).append("\n"); 
		query.append("                AND     B.BB_CGO_FLG        = A.BB_CGO_FLG" ).append("\n"); 
		query.append("                AND     B.SOC_FLG           = A.SOC_FLG" ).append("\n"); 
		query.append("                AND     NVL(B.IMDG_CLSS_CD, '*')  = NVL(A.IMDG_CLSS_CD, '*')" ).append("\n"); 
		query.append("                AND     B.CHG_CD            = 'DAR'" ).append("\n"); 
		query.append("                ) DAR_CHG_UT_AMT         ," ).append("\n"); 
		query.append("                ROW_NUMBER() OVER ( PARTITION BY OFT_CMB_SEQ, CNTR_TPSZ_CD, CTRT_CNTR_TPSZ_CD, RCV_TERM_CD, DE_TERM_CD, DRY_CGO_FLG, AWK_CGO_FLG, DCGO_FLG, RC_FLG, BB_CGO_FLG, SOC_FLG, IMDG_CLSS_CD ORDER BY PRC_GEN_SPCL_RT_TP_CD DESC ) ROW_NUMBER" ).append("\n"); 
		query.append("        FROM    BKG_AUTO_RT_OCN_FRT_TMP A" ).append("\n"); 
		query.append("        WHERE   CHG_CD  = 'OFT'" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("WHERE   ROW_NUMBER  = 1" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("BQ AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("AUTORATING 을 실행할 단위(ROW) 를 SELECT 한다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("OFT AUTORATING 과 동일한 레벨로 SELECT 하고, OFT 에서 선택된 GEN_SPCL_RT_TP_CD, CMDT_HDR_SEQ, RT_SEQ 를 추가로 SELECT 한다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("D7/AK 를 D7/DR 운임 적용을 위한 예외 로직도 여기서 적용한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BK.BKG_NO                 ," ).append("\n"); 
		query.append("        BK.CORR_NO                ," ).append("\n"); 
		query.append("        BQ.OFT_CMB_SEQ            ," ).append("\n"); 
		query.append("        ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ ORDER BY BQ.BKG_BQ_SEQ ) BQ_SEQ ," ).append("\n"); 
		query.append("        BK.CMDT_CD                ," ).append("\n"); 
		query.append("        BK.REP_CMDT_CD            ," ).append("\n"); 
		query.append("        BK.DIR_CALL_FLG           ," ).append("\n"); 
		query.append("        BK.RT_APLY_DT             ," ).append("\n"); 
		query.append("        BK.BKG_SVC_SCP_CD         ," ).append("\n"); 
		query.append("        BK.SVC_SCP_CD             ," ).append("\n"); 
		query.append("        BK.CTRT_TP_CD             ," ).append("\n"); 
		query.append("        BK.SC_NO                  ," ).append("\n"); 
		query.append("        BK.RFA_NO                 ," ).append("\n"); 
		query.append("        BK.TAA_NO                 ," ).append("\n"); 
		query.append("        BK.ESVC_TP_CD             ," ).append("\n"); 
		query.append("        BK.PROP_NO                ," ).append("\n"); 
		query.append("        BK.AMDT_SEQ               ," ).append("\n"); 
		query.append("        BK.NOTE_HDR_SEQ           ," ).append("\n"); 
		query.append("        BK.CML_ZN_CD              ," ).append("\n"); 
		query.append("        BK.USA_SVC_MOD_CD         ," ).append("\n"); 
		query.append("        BK.POR_CD                 ," ).append("\n"); 
		query.append("        BK.POR_STE_CD             ," ).append("\n"); 
		query.append("        BK.POR_RGN_CD             ," ).append("\n"); 
		query.append("        BK.POR_CNT_CD             ," ).append("\n"); 
		query.append("        BK.POR_CONTI_CD           ," ).append("\n"); 
		query.append("        BK.POL_CD                 ," ).append("\n"); 
		query.append("        BK.POL_STE_CD             ," ).append("\n"); 
		query.append("        BK.POL_RGN_CD             ," ).append("\n"); 
		query.append("        BK.POL_CNT_CD             ," ).append("\n"); 
		query.append("        BK.POL_CONTI_CD           ," ).append("\n"); 
		query.append("        BK.POD_CD                 ," ).append("\n"); 
		query.append("        BK.POD_STE_CD             ," ).append("\n"); 
		query.append("        BK.POD_RGN_CD             ," ).append("\n"); 
		query.append("        BK.POD_CNT_CD             ," ).append("\n"); 
		query.append("        BK.POD_CONTI_CD           ," ).append("\n"); 
		query.append("        BK.DEL_CD                 ," ).append("\n"); 
		query.append("        BK.DEL_STE_CD             ," ).append("\n"); 
		query.append("        BK.DEL_RGN_CD             ," ).append("\n"); 
		query.append("        BK.DEL_CNT_CD             ," ).append("\n"); 
		query.append("        BK.DEL_CONTI_CD           ," ).append("\n"); 
		query.append("        BK.PRE_RLY_PORT_CD        ," ).append("\n"); 
		query.append("        BK.PST_RLY_PORT_CD        ," ).append("\n"); 
		query.append("        BK.POL_NOD_CD             ," ).append("\n"); 
		query.append("        BK.POD_NOD_CD             ," ).append("\n"); 
		query.append("        BK.ORG_TRNS_MOD_CD        ," ).append("\n"); 
		query.append("        BK.DEST_TRNS_MOD_CD       ," ).append("\n"); 
		query.append("        BK.AGMT_ACT_CNT_CD        ," ).append("\n"); 
		query.append("        BK.AGMT_ACT_CUST_SEQ      ," ).append("\n"); 
		query.append("        BK.USA_CSTMS_FILE_CD      ," ).append("\n"); 
		query.append("        BK.CND_CSTMS_FILE_CD      ," ).append("\n"); 
		query.append("        BK.CNTR_QTY               ," ).append("\n"); 
		query.append("        BK.MEAS_QTY               ," ).append("\n"); 
		query.append("        BK.ACT_WGT                ," ).append("\n"); 
		query.append("        BK.PRD_RD_CNT             ," ).append("\n"); 
		query.append("        BK.BKG_HBL_CNT            ," ).append("\n"); 
		query.append("        BK.MF_SELF_CNT            ," ).append("\n"); 
		query.append("        BK.FRT_TERM_CD            ," ).append("\n"); 
		query.append("        BQ.BKG_BQ_SEQ             ," ).append("\n"); 
		query.append("        BQ.CNTR_TPSZ_CD           ," ).append("\n"); 
		query.append("        BQ.CTRT_CNTR_TPSZ_CD      ," ).append("\n"); 
		query.append("        ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = BQ.CTRT_CNTR_TPSZ_CD ) CTRT_CNTR_SZ_CD  ," ).append("\n"); 
		query.append("        BQ.RCV_TERM_CD            ," ).append("\n"); 
		query.append("        BQ.DE_TERM_CD             ," ).append("\n"); 
		query.append("        CASE          /* D7/AK 를 D7/DR 운임 적용을 위한 예외 로직 */" ).append("\n"); 
		query.append("        WHEN BQ.CTRT_CNTR_TPSZ_CD = 'D7' AND BQ.AWK_CGO_FLG = 'Y' THEN 'DR'" ).append("\n"); 
		query.append("        WHEN BQ.DRY_CGO_FLG = 'Y' THEN 'DR'" ).append("\n"); 
		query.append("        END                                 DR_TP   ," ).append("\n"); 
		query.append("        DECODE(BQ.DCGO_FLG    , 'Y', 'DG')  DG_TP   ," ).append("\n"); 
		query.append("        DECODE(BQ.RC_FLG      , 'Y', 'RF')  RF_TP   ," ).append("\n"); 
		query.append("        DECODE(BQ.AWK_CGO_FLG , 'Y', 'AK')  AK_TP   ," ).append("\n"); 
		query.append("        DECODE(BQ.BB_CGO_FLG  , 'Y', 'BB')  BB_TP   ," ).append("\n"); 
		query.append("        BQ.DCGO_FLG               ," ).append("\n"); 
		query.append("        BQ.RC_FLG                 ," ).append("\n"); 
		query.append("        BQ.DRY_CGO_FLG            ," ).append("\n"); 
		query.append("        BQ.AWK_CGO_FLG            ," ).append("\n"); 
		query.append("        BQ.BB_CGO_FLG             ," ).append("\n"); 
		query.append("        BQ.SOC_FLG                ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN BQ.DCGO_FLG    = 'Y' THEN 'DG'" ).append("\n"); 
		query.append("        WHEN BQ.AWK_CGO_FLG = 'Y' THEN 'AK'" ).append("\n"); 
		query.append("        WHEN BQ.RC_FLG      = 'Y' THEN 'RF'" ).append("\n"); 
		query.append("        WHEN BQ.BB_CGO_FLG  = 'Y' THEN 'BB'" ).append("\n"); 
		query.append("        ELSE 'DR'" ).append("\n"); 
		query.append("        END PRC_CGO_TP_CD         ," ).append("\n"); 
		query.append("        BQ.IMDG_CLSS_CD           ," ).append("\n"); 
		query.append("        BQ.CTRT_CNTR_QTY          ," ).append("\n"); 
		query.append("        OT.GEN_SPCL_RT_TP_CD      ," ).append("\n"); 
		query.append("        OT.CMDT_HDR_SEQ           ," ).append("\n"); 
		query.append("        OT.ROUT_SEQ               ," ).append("\n"); 
		query.append("        OT.RT_SEQ                 ," ).append("\n"); 
		query.append("        OT.OP_CNTR_QTY            ," ).append("\n"); 
		query.append("        OT.TRI_PROP_NO            ," ).append("\n"); 
		query.append("        NVL(OT.OFT_CHG_UT_AMT, 0)  OFT_CHG_UT_AMT ," ).append("\n"); 
		query.append("        NVL(OT.OAR_CHG_UT_AMT, 0)  OAR_CHG_UT_AMT ," ).append("\n"); 
		query.append("        NVL(OT.DAR_CHG_UT_AMT, 0)  DAR_CHG_UT_AMT" ).append("\n"); 
		query.append("FROM    BK  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  CM.OFT_CMB_SEQ            ," ).append("\n"); 
		query.append("                ROW_NUMBER() OVER ( ORDER BY CM.OFT_CMB_SEQ, QD.CNTR_TPSZ_CD, QD.CTRT_CNTR_TPSZ_CD, QD.RCV_TERM_CD, QD.DE_TERM_CD, QD.DRY_CGO_FLG, QD.AWK_CGO_FLG, QD.DCGO_FLG, QD.RC_FLG, QD.BB_CGO_FLG, QD.SOC_FLG, QD.IMDG_CLSS_CD ) BKG_BQ_SEQ  ," ).append("\n"); 
		query.append("                QD.CNTR_TPSZ_CD           ," ).append("\n"); 
		query.append("                QD.CTRT_CNTR_TPSZ_CD      ," ).append("\n"); 
		query.append("                QD.RCV_TERM_CD            ," ).append("\n"); 
		query.append("                QD.DE_TERM_CD             ," ).append("\n"); 
		query.append("                QD.DRY_CGO_FLG            ," ).append("\n"); 
		query.append("                QD.AWK_CGO_FLG            ," ).append("\n"); 
		query.append("                QD.DCGO_FLG               ," ).append("\n"); 
		query.append("                QD.RC_FLG                 ," ).append("\n"); 
		query.append("                QD.BB_CGO_FLG             ," ).append("\n"); 
		query.append("                QD.SOC_FLG                ," ).append("\n"); 
		query.append("                QD.IMDG_CLSS_CD           ," ).append("\n"); 
		query.append("                QD.CTRT_CNTR_QTY" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SELECT  QD.CNTR_TPSZ_CD           ," ).append("\n"); 
		query.append("                        QD.CTRT_CNTR_TPSZ_CD      ," ).append("\n"); 
		query.append("                        QD.RCV_TERM_CD            ," ).append("\n"); 
		query.append("                        QD.DE_TERM_CD             ," ).append("\n"); 
		query.append("                        QD.DRY_CGO_FLG            ," ).append("\n"); 
		query.append("                        QD.AWK_CGO_FLG            ," ).append("\n"); 
		query.append("                        QD.DCGO_FLG               ," ).append("\n"); 
		query.append("                        QD.RC_FLG                 ," ).append("\n"); 
		query.append("                        QD.BB_CGO_FLG             ," ).append("\n"); 
		query.append("                        QD.SOC_FLG                ," ).append("\n"); 
		query.append("                        DECODE(QD.DCGO_FLG, 'Y', ( SELECT MIN(IMDG_CLSS_CD) FROM BKG_DG_CGO A WHERE A.BKG_NO = QD.BKG_NO AND A.CNTR_TPSZ_CD = QD.CNTR_TPSZ_CD ))  IMDG_CLSS_CD  ," ).append("\n"); 
		query.append("                        QD.CTRT_CNTR_QTY" ).append("\n"); 
		query.append("                FROM    (" ).append("\n"); 
		query.append("                        SELECT  QD.BKG_NO                   ," ).append("\n"); 
		query.append("                                QD.CNTR_TPSZ_CD             ," ).append("\n"); 
		query.append("                                NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  CTRT_CNTR_TPSZ_CD ," ).append("\n"); 
		query.append("                                QD.RCV_TERM_CD              ," ).append("\n"); 
		query.append("                                QD.DE_TERM_CD               ," ).append("\n"); 
		query.append("                                QD.DRY_CGO_FLG              ," ).append("\n"); 
		query.append("                                QD.AWK_CGO_FLG              ," ).append("\n"); 
		query.append("                                QD.DCGO_FLG                 ," ).append("\n"); 
		query.append("                                QD.RC_FLG                   ," ).append("\n"); 
		query.append("                                QD.BB_CGO_FLG               ," ).append("\n"); 
		query.append("                                QD.SOC_FLG                  ," ).append("\n"); 
		query.append("                                SUM(QD.OP_CNTR_QTY) CTRT_CNTR_QTY" ).append("\n"); 
		query.append("                        FROM    BK  ," ).append("\n"); 
		query.append("                                BKG_QTY_DTL QD" ).append("\n"); 
		query.append("                        WHERE   QD.BKG_NO   = BK.BKG_NO" ).append("\n"); 
		query.append("                        GROUP BY" ).append("\n"); 
		query.append("                                QD.BKG_NO                 ," ).append("\n"); 
		query.append("                                QD.CNTR_TPSZ_CD           ," ).append("\n"); 
		query.append("                                NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  ," ).append("\n"); 
		query.append("                                QD.RCV_TERM_CD            ," ).append("\n"); 
		query.append("                                QD.DE_TERM_CD             ," ).append("\n"); 
		query.append("                                QD.DRY_CGO_FLG            ," ).append("\n"); 
		query.append("                                QD.AWK_CGO_FLG            ," ).append("\n"); 
		query.append("                                QD.DCGO_FLG               ," ).append("\n"); 
		query.append("                                QD.RC_FLG                 ," ).append("\n"); 
		query.append("                                QD.BB_CGO_FLG             ," ).append("\n"); 
		query.append("                                QD.SOC_FLG" ).append("\n"); 
		query.append("                        ) QD" ).append("\n"); 
		query.append("                WHERE   @[ca_flg]   = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SELECT  QD.CNTR_TPSZ_CD           ," ).append("\n"); 
		query.append("                        QD.CTRT_CNTR_TPSZ_CD      ," ).append("\n"); 
		query.append("                        QD.RCV_TERM_CD            ," ).append("\n"); 
		query.append("                        QD.DE_TERM_CD             ," ).append("\n"); 
		query.append("                        QD.DRY_CGO_FLG            ," ).append("\n"); 
		query.append("                        QD.AWK_CGO_FLG            ," ).append("\n"); 
		query.append("                        QD.DCGO_FLG               ," ).append("\n"); 
		query.append("                        QD.RC_FLG                 ," ).append("\n"); 
		query.append("                        QD.BB_CGO_FLG             ," ).append("\n"); 
		query.append("                        QD.SOC_FLG                ," ).append("\n"); 
		query.append("                        DECODE(QD.DCGO_FLG, 'Y', ( SELECT MIN(IMDG_CLSS_CD) FROM BKG_DG_CGO_HIS A WHERE A.BKG_NO = QD.BKG_NO AND A.CORR_NO = QD.CORR_NO AND A.CNTR_TPSZ_CD = QD.CNTR_TPSZ_CD )) IMDG_CLSS_CD  ," ).append("\n"); 
		query.append("                        QD.CTRT_CNTR_QTY" ).append("\n"); 
		query.append("                FROM    (" ).append("\n"); 
		query.append("                        SELECT  QD.BKG_NO                   ," ).append("\n"); 
		query.append("                                QD.CORR_NO                  ," ).append("\n"); 
		query.append("                                QD.CNTR_TPSZ_CD             ," ).append("\n"); 
		query.append("                                NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  CTRT_CNTR_TPSZ_CD ," ).append("\n"); 
		query.append("                                QD.RCV_TERM_CD              ," ).append("\n"); 
		query.append("                                QD.DE_TERM_CD               ," ).append("\n"); 
		query.append("                                QD.DRY_CGO_FLG              ," ).append("\n"); 
		query.append("                                QD.AWK_CGO_FLG              ," ).append("\n"); 
		query.append("                                QD.DCGO_FLG                 ," ).append("\n"); 
		query.append("                                QD.RC_FLG                   ," ).append("\n"); 
		query.append("                                QD.BB_CGO_FLG               ," ).append("\n"); 
		query.append("                                QD.SOC_FLG                  ," ).append("\n"); 
		query.append("                                SUM(QD.OP_CNTR_QTY) CTRT_CNTR_QTY" ).append("\n"); 
		query.append("                        FROM    BK  ," ).append("\n"); 
		query.append("                                BKG_QTY_DTL_HIS QD" ).append("\n"); 
		query.append("                        WHERE   QD.BKG_NO   = BK.BKG_NO" ).append("\n"); 
		query.append("                        AND     QD.CORR_NO  = BK.CORR_NO" ).append("\n"); 
		query.append("                        GROUP BY" ).append("\n"); 
		query.append("                                QD.BKG_NO                 ," ).append("\n"); 
		query.append("                                QD.CORR_NO                ," ).append("\n"); 
		query.append("                                QD.CNTR_TPSZ_CD           ," ).append("\n"); 
		query.append("                                NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  ," ).append("\n"); 
		query.append("                                QD.RCV_TERM_CD            ," ).append("\n"); 
		query.append("                                QD.DE_TERM_CD             ," ).append("\n"); 
		query.append("                                QD.DRY_CGO_FLG            ," ).append("\n"); 
		query.append("                                QD.AWK_CGO_FLG            ," ).append("\n"); 
		query.append("                                QD.DCGO_FLG               ," ).append("\n"); 
		query.append("                                QD.RC_FLG                 ," ).append("\n"); 
		query.append("                                QD.BB_CGO_FLG             ," ).append("\n"); 
		query.append("                                QD.SOC_FLG" ).append("\n"); 
		query.append("                        ) QD" ).append("\n"); 
		query.append("                WHERE   @[ca_flg]   = 'Y'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                ) QD  ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  OFT_CMB_SEQ" ).append("\n"); 
		query.append("                FROM    BKG_AUTO_RT_OCN_FRT_TMP" ).append("\n"); 
		query.append("                UNION" ).append("\n"); 
		query.append("                SELECT  1" ).append("\n"); 
		query.append("                FROM    DUAL" ).append("\n"); 
		query.append("                ) CM" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        ) BQ  ," ).append("\n"); 
		query.append("        OT" ).append("\n"); 
		query.append("WHERE   OT.OFT_CMB_SEQ(+)             = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("AND     OT.CNTR_TPSZ_CD(+)            = BQ.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("AND     OT.CTRT_CNTR_TPSZ_CD(+)       = BQ.CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("AND     OT.RCV_TERM_CD(+)             = BQ.RCV_TERM_CD" ).append("\n"); 
		query.append("AND     OT.DE_TERM_CD(+)              = BQ.DE_TERM_CD" ).append("\n"); 
		query.append("AND     OT.DRY_CGO_FLG(+)             = BQ.DRY_CGO_FLG" ).append("\n"); 
		query.append("AND     OT.AWK_CGO_FLG(+)             = BQ.AWK_CGO_FLG" ).append("\n"); 
		query.append("AND     OT.DCGO_FLG(+)                = BQ.DCGO_FLG" ).append("\n"); 
		query.append("AND     OT.RC_FLG(+)                  = BQ.RC_FLG" ).append("\n"); 
		query.append("AND     OT.BB_CGO_FLG(+)              = BQ.BB_CGO_FLG" ).append("\n"); 
		query.append("AND     OT.SOC_FLG(+)                 = BQ.SOC_FLG" ).append("\n"); 
		query.append("AND     NVL(OT.IMDG_CLSS_CD(+), '*')  = NVL(BQ.IMDG_CLSS_CD, '*')" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("CT AS (" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("# BKG_CONTAINER 연결 조건" ).append("\n"); 
		query.append("1. QTY 의 숫자와 동일한 CNTR 이 물려야 한다." ).append("\n"); 
		query.append("2. 모든 CNTR 의 WIEGHT 가 값이 존재해야한다." ).append("\n"); 
		query.append("3. 연결 기준은" ).append("\n"); 
		query.append("    - CNTR_TPSZ_CD" ).append("\n"); 
		query.append("    - CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("    - AWK_CGO_FLG" ).append("\n"); 
		query.append("    - DCGO_FLG" ).append("\n"); 
		query.append("    - RC_FLG" ).append("\n"); 
		query.append("    - BB_CGO_FLG" ).append("\n"); 
		query.append("4.  Hanger는 Carrier’s Hanger인 경우만(M’HGR인 경우 Rating 하지 않음) 고려한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  QD.CNTR_TPSZ_CD             ," ).append("\n"); 
		query.append("        QD.CTRT_CNTR_TPSZ_CD        ," ).append("\n"); 
		query.append("        QD.RCV_TERM_CD              ," ).append("\n"); 
		query.append("        QD.DE_TERM_CD               ," ).append("\n"); 
		query.append("        QD.DRY_CGO_FLG              ," ).append("\n"); 
		query.append("        QD.AWK_CGO_FLG              ," ).append("\n"); 
		query.append("        QD.DCGO_FLG                 ," ).append("\n"); 
		query.append("        QD.RC_FLG                   ," ).append("\n"); 
		query.append("        QD.BB_CGO_FLG               ," ).append("\n"); 
		query.append("        QD.SOC_FLG                  ," ).append("\n"); 
		query.append("        DECODE(QD.DCGO_FLG, 'Y', ( SELECT MIN(IMDG_CLSS_CD) FROM BKG_DG_CGO A WHERE A.BKG_NO = QD.BKG_NO AND A.CNTR_TPSZ_CD = QD.CNTR_TPSZ_CD ))  IMDG_CLSS_CD  ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_TPL_BAR_USE_FLG = 'Y' THEN 'T'" ).append("\n"); 
		query.append("        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_DBL_BAR_USE_FLG = 'Y' THEN 'D'" ).append("\n"); 
		query.append("        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_SGL_BAR_USE_FLG = 'Y' THEN 'S'" ).append("\n"); 
		query.append("        END PRC_HNGR_BAR_TP_CD      ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN (SELECT CNTR_QTY FROM BK) = 1 AND BC.CNTR_WGT = 0 THEN (SELECT ACT_WGT FROM BK)" ).append("\n"); 
		query.append("        ELSE MIN(NVL(BC.CNTR_WGT, 0)) OVER ( PARTITION BY BC.CNTR_TPSZ_CD, BC.CTRT_CNTR_TPSZ_CD, BC.AWK_CGO_FLG, BC.DCGO_FLG, BC.RC_FLG, BC.BB_CGO_FLG )" ).append("\n"); 
		query.append("        END CNTR_WGT  ," ).append("\n"); 
		query.append("        NVL(AK.IN_GA_FLG, 'N')  IN_GA_FLG ," ).append("\n"); 
		query.append("        QD.CNTR_QTY" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  ROW_NUMBER() OVER ( PARTITION BY QD.CNTR_TPSZ_CD, QD.CTRT_CNTR_TPSZ_CD, QD.RCV_TERM_CD, QD.DE_TERM_CD, QD.AWK_CGO_FLG, QD.DCGO_FLG, QD.RC_FLG, QD.BB_CGO_FLG, QD.SOC_FLG ORDER BY 1 ) CNTR_ROW_NUMBER ," ).append("\n"); 
		query.append("                ROW_NUMBER() OVER ( PARTITION BY QD.CNTR_TPSZ_CD  ORDER BY 1 )  AK_ROW_NUMBER ," ).append("\n"); 
		query.append("                QD.BKG_NO                   ," ).append("\n"); 
		query.append("                QD.CNTR_TPSZ_CD             ," ).append("\n"); 
		query.append("                QD.CTRT_CNTR_TPSZ_CD        ," ).append("\n"); 
		query.append("                QD.RCV_TERM_CD              ," ).append("\n"); 
		query.append("                QD.DE_TERM_CD               ," ).append("\n"); 
		query.append("                QD.DRY_CGO_FLG              ," ).append("\n"); 
		query.append("                QD.AWK_CGO_FLG              ," ).append("\n"); 
		query.append("                QD.DCGO_FLG                 ," ).append("\n"); 
		query.append("                QD.RC_FLG                   ," ).append("\n"); 
		query.append("                QD.BB_CGO_FLG               ," ).append("\n"); 
		query.append("                QD.SOC_FLG                  ," ).append("\n"); 
		query.append("                QD.CRR_HNGR_SGL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                QD.CRR_HNGR_DBL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                QD.CRR_HNGR_TPL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                QD.CRR_HNGR_FLG             ," ).append("\n"); 
		query.append("                QD.MER_HNGR_FLG             ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN QD.OP_CNTR_QTY < NB.ROW_NUMBER THEN QD.OP_CNTR_QTY - TRUNC(QD.OP_CNTR_QTY)" ).append("\n"); 
		query.append("                ELSE 1" ).append("\n"); 
		query.append("                END CNTR_QTY" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  QD.BKG_NO                   ," ).append("\n"); 
		query.append("                        QD.CNTR_TPSZ_CD             ," ).append("\n"); 
		query.append("                        NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  CTRT_CNTR_TPSZ_CD ," ).append("\n"); 
		query.append("                        QD.RCV_TERM_CD              ," ).append("\n"); 
		query.append("                        QD.DE_TERM_CD               ," ).append("\n"); 
		query.append("                        QD.DRY_CGO_FLG              ," ).append("\n"); 
		query.append("                        QD.AWK_CGO_FLG              ," ).append("\n"); 
		query.append("                        QD.DCGO_FLG                 ," ).append("\n"); 
		query.append("                        QD.RC_FLG                   ," ).append("\n"); 
		query.append("                        QD.BB_CGO_FLG               ," ).append("\n"); 
		query.append("                        QD.SOC_FLG                  ," ).append("\n"); 
		query.append("                        QD.CRR_HNGR_SGL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                        QD.CRR_HNGR_DBL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                        QD.CRR_HNGR_TPL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                        QD.CRR_HNGR_FLG             ," ).append("\n"); 
		query.append("                        QD.MER_HNGR_FLG             ," ).append("\n"); 
		query.append("                        QD.OP_CNTR_QTY" ).append("\n"); 
		query.append("                FROM    BK  ," ).append("\n"); 
		query.append("                        BKG_QTY_DTL QD" ).append("\n"); 
		query.append("                WHERE   QD.BKG_NO   = BK.BKG_NO" ).append("\n"); 
		query.append("                ) QD  ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  ROWNUM ROW_NUMBER" ).append("\n"); 
		query.append("                FROM    DUAL" ).append("\n"); 
		query.append("                CONNECT BY LEVEL <= ( SELECT CNTR_CEIL_QTY FROM BK )" ).append("\n"); 
		query.append("                ) NB" ).append("\n"); 
		query.append("        WHERE CEIL(QD.OP_CNTR_QTY) >= NB.ROW_NUMBER" ).append("\n"); 
		query.append("        ) QD  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("CONTAINER 정보가 모두 INPUT 되고, PARTIAL VOLUME 이 없는 경우에만 WEIGHT 별 SURCHARGE 를 구함" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        SELECT  ROW_NUMBER() OVER ( PARTITION BY BC.CNTR_TPSZ_CD, NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD), BC.AWK_CGO_FLG, BC.DCGO_FLG, BC.RC_FLG, BC.BB_CGO_FLG ORDER BY BC.CNTR_NO )  CNTR_ROW_NUMBER ," ).append("\n"); 
		query.append("                BC.CNTR_TPSZ_CD ," ).append("\n"); 
		query.append("                NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD) CTRT_CNTR_TPSZ_CD ," ).append("\n"); 
		query.append("                BC.AWK_CGO_FLG  ," ).append("\n"); 
		query.append("                BC.DCGO_FLG     ," ).append("\n"); 
		query.append("                BC.RC_FLG       ," ).append("\n"); 
		query.append("                BC.BB_CGO_FLG   ," ).append("\n"); 
		query.append("                DECODE(BC.WGT_UT_CD , 'LBS', BC.CNTR_WGT    * 0.45359 , BC.CNTR_WGT ) CNTR_WGT" ).append("\n"); 
		query.append("        FROM    BK  ," ).append("\n"); 
		query.append("                BKG_CONTAINER BC" ).append("\n"); 
		query.append("        WHERE   BC.BKG_NO   = BK.BKG_NO" ).append("\n"); 
		query.append("        AND     BK.CNTR_QTY" ).append("\n"); 
		query.append("                = (" ).append("\n"); 
		query.append("                  SELECT  NVL(SUM(BC.CNTR_VOL_QTY), 0)" ).append("\n"); 
		query.append("                  FROM    BK  ," ).append("\n"); 
		query.append("                          BKG_CONTAINER BC" ).append("\n"); 
		query.append("                  WHERE   BC.BKG_NO       = BK.BKG_NO" ).append("\n"); 
		query.append("                  AND     BC.CNTR_VOL_QTY = 1" ).append("\n"); 
		query.append("                  )" ).append("\n"); 
		query.append("        ) BC  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  ROW_NUMBER() OVER ( PARTITION BY AK.CNTR_TPSZ_CD  ORDER BY 1 ) AK_ROW_NUMBER  ," ).append("\n"); 
		query.append("                AK.CNTR_TPSZ_CD ," ).append("\n"); 
		query.append("                AK.IN_GA_FLG" ).append("\n"); 
		query.append("        FROM    BK  ," ).append("\n"); 
		query.append("                BKG_AWK_CGO AK" ).append("\n"); 
		query.append("        WHERE   AK.BKG_NO     = BK.BKG_NO" ).append("\n"); 
		query.append("        AND     AK.IN_GA_FLG  = 'Y'" ).append("\n"); 
		query.append("        ) AK" ).append("\n"); 
		query.append("WHERE   BC.CNTR_TPSZ_CD(+)      = QD.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("AND     BC.CTRT_CNTR_TPSZ_CD(+) = QD.CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("AND     BC.AWK_CGO_FLG(+)       = QD.AWK_CGO_FLG" ).append("\n"); 
		query.append("AND     BC.DCGO_FLG(+)          = QD.DCGO_FLG" ).append("\n"); 
		query.append("AND     BC.RC_FLG(+)            = QD.RC_FLG" ).append("\n"); 
		query.append("AND     BC.BB_CGO_FLG(+)        = QD.BB_CGO_FLG" ).append("\n"); 
		query.append("AND     BC.CNTR_ROW_NUMBER(+)   = QD.CNTR_ROW_NUMBER" ).append("\n"); 
		query.append("AND     AK.CNTR_TPSZ_CD(+)      = QD.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("AND     AK.AK_ROW_NUMBER(+)     = QD.AK_ROW_NUMBER" ).append("\n"); 
		query.append("AND     @[ca_flg]               = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  QD.CNTR_TPSZ_CD             ," ).append("\n"); 
		query.append("        QD.CTRT_CNTR_TPSZ_CD        ," ).append("\n"); 
		query.append("        QD.RCV_TERM_CD              ," ).append("\n"); 
		query.append("        QD.DE_TERM_CD               ," ).append("\n"); 
		query.append("        QD.DRY_CGO_FLG              ," ).append("\n"); 
		query.append("        QD.AWK_CGO_FLG              ," ).append("\n"); 
		query.append("        QD.DCGO_FLG                 ," ).append("\n"); 
		query.append("        QD.RC_FLG                   ," ).append("\n"); 
		query.append("        QD.BB_CGO_FLG               ," ).append("\n"); 
		query.append("        QD.SOC_FLG                  ," ).append("\n"); 
		query.append("        DECODE(QD.DCGO_FLG, 'Y', ( SELECT MIN(IMDG_CLSS_CD) FROM BKG_DG_CGO_HIS A WHERE A.BKG_NO = QD.BKG_NO AND A.CORR_NO = QD.CORR_NO AND A.CNTR_TPSZ_CD = QD.CNTR_TPSZ_CD )) IMDG_CLSS_CD  ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_TPL_BAR_USE_FLG = 'Y' THEN 'T'" ).append("\n"); 
		query.append("        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_DBL_BAR_USE_FLG = 'Y' THEN 'D'" ).append("\n"); 
		query.append("        WHEN  QD.CRR_HNGR_FLG = 'Y' AND QD.CRR_HNGR_SGL_BAR_USE_FLG = 'Y' THEN 'S'" ).append("\n"); 
		query.append("        END PRC_HNGR_BAR_TP_CD      ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN (SELECT CNTR_QTY FROM BK) = 1 AND BC.CNTR_WGT = 0 THEN (SELECT ACT_WGT FROM BK)" ).append("\n"); 
		query.append("        ELSE LEAST(NVL(BC.CNTR_WGT, 0), MIN(NVL(BC.CNTR_WGT, 0)) OVER ())" ).append("\n"); 
		query.append("        END CNTR_WGT  ," ).append("\n"); 
		query.append("        NVL(AK.IN_GA_FLG, 'N')  IN_GA_FLG ," ).append("\n"); 
		query.append("        QD.CNTR_QTY" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  ROW_NUMBER() OVER ( PARTITION BY QD.CNTR_TPSZ_CD, QD.CTRT_CNTR_TPSZ_CD, QD.RCV_TERM_CD, QD.DE_TERM_CD, QD.AWK_CGO_FLG, QD.DCGO_FLG, QD.RC_FLG, QD.BB_CGO_FLG, QD.SOC_FLG ORDER BY 1 ) CNTR_ROW_NUMBER ," ).append("\n"); 
		query.append("                ROW_NUMBER() OVER ( PARTITION BY QD.CNTR_TPSZ_CD  ORDER BY 1 )  AK_ROW_NUMBER ," ).append("\n"); 
		query.append("                QD.BKG_NO                   ," ).append("\n"); 
		query.append("                QD.CORR_NO                  ," ).append("\n"); 
		query.append("                QD.CNTR_TPSZ_CD             ," ).append("\n"); 
		query.append("                QD.CTRT_CNTR_TPSZ_CD        ," ).append("\n"); 
		query.append("                QD.RCV_TERM_CD              ," ).append("\n"); 
		query.append("                QD.DE_TERM_CD               ," ).append("\n"); 
		query.append("                QD.DRY_CGO_FLG              ," ).append("\n"); 
		query.append("                QD.AWK_CGO_FLG              ," ).append("\n"); 
		query.append("                QD.DCGO_FLG                 ," ).append("\n"); 
		query.append("                QD.RC_FLG                   ," ).append("\n"); 
		query.append("                QD.BB_CGO_FLG               ," ).append("\n"); 
		query.append("                QD.SOC_FLG                  ," ).append("\n"); 
		query.append("                QD.CRR_HNGR_SGL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                QD.CRR_HNGR_DBL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                QD.CRR_HNGR_TPL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                QD.CRR_HNGR_FLG             ," ).append("\n"); 
		query.append("                QD.MER_HNGR_FLG             ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN QD.OP_CNTR_QTY < NB.ROW_NUMBER THEN QD.OP_CNTR_QTY - TRUNC(QD.OP_CNTR_QTY)" ).append("\n"); 
		query.append("                ELSE 1" ).append("\n"); 
		query.append("                END CNTR_QTY" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  QD.BKG_NO                   ," ).append("\n"); 
		query.append("                        QD.CORR_NO                  ," ).append("\n"); 
		query.append("                        QD.CNTR_TPSZ_CD             ," ).append("\n"); 
		query.append("                        NVL(QD.EQ_SUBST_CNTR_TPSZ_CD, QD.CNTR_TPSZ_CD)  CTRT_CNTR_TPSZ_CD ," ).append("\n"); 
		query.append("                        QD.RCV_TERM_CD              ," ).append("\n"); 
		query.append("                        QD.DE_TERM_CD               ," ).append("\n"); 
		query.append("                        QD.DRY_CGO_FLG              ," ).append("\n"); 
		query.append("                        QD.AWK_CGO_FLG              ," ).append("\n"); 
		query.append("                        QD.DCGO_FLG                 ," ).append("\n"); 
		query.append("                        QD.RC_FLG                   ," ).append("\n"); 
		query.append("                        QD.BB_CGO_FLG               ," ).append("\n"); 
		query.append("                        QD.SOC_FLG                  ," ).append("\n"); 
		query.append("                        QD.CRR_HNGR_SGL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                        QD.CRR_HNGR_DBL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                        QD.CRR_HNGR_TPL_BAR_USE_FLG ," ).append("\n"); 
		query.append("                        QD.CRR_HNGR_FLG             ," ).append("\n"); 
		query.append("                        QD.MER_HNGR_FLG             ," ).append("\n"); 
		query.append("                        QD.OP_CNTR_QTY" ).append("\n"); 
		query.append("                FROM    BK  ," ).append("\n"); 
		query.append("                        BKG_QTY_DTL_HIS QD" ).append("\n"); 
		query.append("                WHERE   QD.BKG_NO   = BK.BKG_NO" ).append("\n"); 
		query.append("                AND     QD.CORR_NO  = BK.CORR_NO" ).append("\n"); 
		query.append("                ) QD  ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  ROWNUM ROW_NUMBER" ).append("\n"); 
		query.append("                FROM    DUAL" ).append("\n"); 
		query.append("                CONNECT BY LEVEL <= ( SELECT CNTR_CEIL_QTY FROM BK )" ).append("\n"); 
		query.append("                ) NB" ).append("\n"); 
		query.append("        WHERE CEIL(QD.OP_CNTR_QTY) >= NB.ROW_NUMBER" ).append("\n"); 
		query.append("        ) QD  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("CONTAINER 정보가 모두 INPUT 되고, PARTIAL VOLUME 이 없는 경우에만 WEIGHT 별 SURCHARGE 를 구함" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        SELECT  ROW_NUMBER() OVER ( PARTITION BY BC.CNTR_TPSZ_CD, NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD), BC.AWK_CGO_FLG, BC.DCGO_FLG, BC.RC_FLG, BC.BB_CGO_FLG ORDER BY BC.CNTR_NO )  CNTR_ROW_NUMBER ," ).append("\n"); 
		query.append("                BC.CNTR_TPSZ_CD ," ).append("\n"); 
		query.append("                NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD) CTRT_CNTR_TPSZ_CD ," ).append("\n"); 
		query.append("                BC.AWK_CGO_FLG  ," ).append("\n"); 
		query.append("                BC.DCGO_FLG     ," ).append("\n"); 
		query.append("                BC.RC_FLG       ," ).append("\n"); 
		query.append("                BC.BB_CGO_FLG   ," ).append("\n"); 
		query.append("                DECODE(BC.WGT_UT_CD , 'LBS', BC.CNTR_WGT    * 0.45359 , BC.CNTR_WGT ) CNTR_WGT" ).append("\n"); 
		query.append("        FROM    BK  ," ).append("\n"); 
		query.append("                BKG_CNTR_HIS  BC" ).append("\n"); 
		query.append("        WHERE   BC.BKG_NO   = BK.BKG_NO" ).append("\n"); 
		query.append("        AND     BC.CORR_NO  = BK.CORR_NO" ).append("\n"); 
		query.append("        AND     BK.CNTR_QTY" ).append("\n"); 
		query.append("                = (" ).append("\n"); 
		query.append("                  SELECT  NVL(SUM(BC.CNTR_VOL_QTY), 0)" ).append("\n"); 
		query.append("                  FROM    BK  ," ).append("\n"); 
		query.append("                          BKG_CNTR_HIS  BC" ).append("\n"); 
		query.append("                  WHERE   BC.BKG_NO       = BK.BKG_NO" ).append("\n"); 
		query.append("                  AND     BC.CORR_NO      = BK.CORR_NO" ).append("\n"); 
		query.append("                  AND     BC.CNTR_VOL_QTY = 1" ).append("\n"); 
		query.append("                  )" ).append("\n"); 
		query.append("        ) BC  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  ROW_NUMBER() OVER ( PARTITION BY AK.CNTR_TPSZ_CD  ORDER BY 1 ) AK_ROW_NUMBER  ," ).append("\n"); 
		query.append("                AK.CNTR_TPSZ_CD ," ).append("\n"); 
		query.append("                AK.IN_GA_FLG" ).append("\n"); 
		query.append("        FROM    BK  ," ).append("\n"); 
		query.append("                BKG_AWK_CGO_HIS AK" ).append("\n"); 
		query.append("        WHERE   AK.BKG_NO     = BK.BKG_NO" ).append("\n"); 
		query.append("        AND     AK.CORR_NO    = BK.CORR_NO" ).append("\n"); 
		query.append("        AND     AK.IN_GA_FLG  = 'Y'" ).append("\n"); 
		query.append("        ) AK" ).append("\n"); 
		query.append("WHERE   BC.CNTR_TPSZ_CD(+)      = QD.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("AND     BC.CTRT_CNTR_TPSZ_CD(+) = QD.CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("AND     BC.AWK_CGO_FLG(+)       = QD.AWK_CGO_FLG" ).append("\n"); 
		query.append("AND     BC.DCGO_FLG(+)          = QD.DCGO_FLG" ).append("\n"); 
		query.append("AND     BC.RC_FLG(+)            = QD.RC_FLG" ).append("\n"); 
		query.append("AND     BC.BB_CGO_FLG(+)        = QD.BB_CGO_FLG" ).append("\n"); 
		query.append("AND     BC.CNTR_ROW_NUMBER(+)   = QD.CNTR_ROW_NUMBER" ).append("\n"); 
		query.append("AND     AK.CNTR_TPSZ_CD(+)      = QD.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("AND     AK.AK_ROW_NUMBER(+)     = QD.AK_ROW_NUMBER" ).append("\n"); 
		query.append("AND     @[ca_flg]               = 'Y'" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("GL AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("GROUP LOCATION 을 SELECT 한다." ).append("\n"); 
		query.append("S/C 의 경우는 NOTE CONVERSION 에서 사용하는 GROUP LOCATION ( 'EAST', 'WEST' ) 도 포함시킨다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  G.PRC_GRP_LOC_CD  ," ).append("\n"); 
		query.append("        D.LOC_CD" ).append("\n"); 
		query.append("FROM    BK  ," ).append("\n"); 
		query.append("        PRI_SP_SCP_GRP_LOC      G ," ).append("\n"); 
		query.append("        PRI_SP_SCP_GRP_LOC_DTL  D" ).append("\n"); 
		query.append("WHERE   D.PROP_NO         = G.PROP_NO" ).append("\n"); 
		query.append("AND     D.AMDT_SEQ        = G.AMDT_SEQ" ).append("\n"); 
		query.append("AND     D.SVC_SCP_CD      = G.SVC_SCP_CD" ).append("\n"); 
		query.append("AND     D.GRP_LOC_SEQ     = G.GRP_LOC_SEQ" ).append("\n"); 
		query.append("AND     D.SRC_INFO_CD     <> 'AD'" ).append("\n"); 
		query.append("AND     G.PROP_NO         = BK.PROP_NO" ).append("\n"); 
		query.append("AND     G.AMDT_SEQ        = BK.AMDT_SEQ" ).append("\n"); 
		query.append("AND     G.SVC_SCP_CD      = BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND     @[ctrt_tp_cd]     = 'S'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/* 이 부부은 OFT 에는 적용하지 않고, SURCHARGE 에만 적용한다. ( 2009/11 월 현재 S/C 만 DATA 있음 ) */" ).append("\n"); 
		query.append("SELECT  G.NOTE_CONV_GRP_LOC_CD  PRC_GRP_LOC_CD  ," ).append("\n"); 
		query.append("        D.LOC_CD" ).append("\n"); 
		query.append("FROM    PRI_NOTE_CONV_GRP_LOC     G ," ).append("\n"); 
		query.append("        PRI_NOTE_CONV_GRP_LOC_DTL D" ).append("\n"); 
		query.append("WHERE   D.PRC_CTRT_TP_CD        = G.PRC_CTRT_TP_CD" ).append("\n"); 
		query.append("AND     D.NOTE_CONV_GRP_LOC_CD  = G.NOTE_CONV_GRP_LOC_CD" ).append("\n"); 
		query.append("AND     G.PRC_CTRT_TP_CD        = @[ctrt_tp_cd]" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  G.PRC_GRP_LOC_CD  ," ).append("\n"); 
		query.append("        D.LOC_CD" ).append("\n"); 
		query.append("FROM    BK  ," ).append("\n"); 
		query.append("        PRI_RP_SCP_GRP_LOC      G ," ).append("\n"); 
		query.append("        PRI_RP_SCP_GRP_LOC_DTL  D" ).append("\n"); 
		query.append("WHERE   D.PROP_NO         = G.PROP_NO" ).append("\n"); 
		query.append("AND     D.AMDT_SEQ        = G.AMDT_SEQ" ).append("\n"); 
		query.append("AND     D.SVC_SCP_CD      = G.SVC_SCP_CD" ).append("\n"); 
		query.append("AND     D.GRP_LOC_SEQ     = G.GRP_LOC_SEQ" ).append("\n"); 
		query.append("AND     G.PROP_NO         = BK.PROP_NO" ).append("\n"); 
		query.append("AND     G.AMDT_SEQ        = BK.AMDT_SEQ" ).append("\n"); 
		query.append("AND     G.SVC_SCP_CD      = BK.SVC_SCP_CD" ).append("\n"); 
		query.append("AND     @[ctrt_tp_cd]     = 'R'" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("NC AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("BOOKING 에 해당하는 NOTE CONVERSION 을 SELECT 한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BQ.OFT_CMB_SEQ        ," ).append("\n"); 
		query.append("        BQ.BQ_SEQ             ," ).append("\n"); 
		query.append("        BQ.BKG_BQ_SEQ         ," ).append("\n"); 
		query.append("        NC.NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("        NC.NOTE_CONV_SEQ      ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) CONV_TP_PRIO  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        NC.NOTE_CONV_TP_CD          ," ).append("\n"); 
		query.append("        NC.CHG_RULE_TP_CD           ," ).append("\n"); 
		query.append("        NC.NOTE_CONV_CHG_CD         ," ).append("\n"); 
		query.append("        NC.NOTE_CONV_RULE_CD        ," ).append("\n"); 
		query.append("        NC.RT_APPL_TP_CD            ," ).append("\n"); 
		query.append("        NC.RT_OP_CD                 ," ).append("\n"); 
		query.append("        NC.CURR_CD                  ," ).append("\n"); 
		query.append("        NC.FRT_RT_AMT               ," ).append("\n"); 
		query.append("        NC.PAY_TERM_CD              ," ).append("\n"); 
		query.append("        NC.BKG_RAT_UT_CD            ," ).append("\n"); 
		query.append("        NC.BKG_PRC_CGO_TP_CD        ," ).append("\n"); 
		query.append("        NC.BKG_IMDG_CLSS_CD         ," ).append("\n"); 
		query.append("        DECODE(NC.BKG_SOC_FLG, NULL, 'N', 'Y')        SOC_USE_FLG ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#if (${ctrt_tp_cd} == 'S')" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("        ELSE 0" ).append("\n"); 
		query.append("        END CMDT_HDR_SEQ            ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.ROUT_SEQ" ).append("\n"); 
		query.append("        ELSE 0" ).append("\n"); 
		query.append("        END ROUT_SEQ                ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("        ELSE NC.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("        END GEN_SPCL_RT_TP_CD       ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        NULL                  MIN_CGO_WGT         ," ).append("\n"); 
		query.append("        NULL                  MAX_CGO_WGT         ," ).append("\n"); 
		query.append("        'N'                   HNGR_BAR_USE_FLG    ," ).append("\n"); 
		query.append("        NULL                  PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD, NC.NOTE_CONV_RULE_CD, DECODE(NC.CHG_RULE_TP_CD, 'C', NC.BKG_RAT_UT_CD)" ).append("\n"); 
		query.append("                            ORDER BY" ).append("\n"); 
		query.append("                              ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ," ).append("\n"); 
		query.append("                              GREATEST(DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0), DECODE(BKG_SCG_GRP_CMDT_CD, NULL, 0, 500))" ).append("\n"); 
		query.append("                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)" ).append("\n"); 
		query.append("                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_USA_SVC_MOD_CD   , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_ORG_TRSP_MOD_CD  , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DEST_TRSP_MOD_CD , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_SLAN_CD          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_VSL_CD           , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_ACT_CUST_CNT_CD  , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) DESC  ," ).append("\n"); 
		query.append("                              NC.FRT_RT_AMT         ," ).append("\n"); 
		query.append("                              NC.NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("                              NC.NOTE_CONV_SEQ" ).append("\n"); 
		query.append("                            ) ROW_NUMBER  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        GREATEST(DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0), DECODE(BKG_SCG_GRP_CMDT_CD, NULL, 0, 500))" ).append("\n"); 
		query.append("                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)" ).append("\n"); 
		query.append("                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_USA_SVC_MOD_CD   , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_ORG_TRSP_MOD_CD  , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DEST_TRSP_MOD_CD , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_SLAN_CD          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_VSL_CD           , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_ACT_CUST_CNT_CD  , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) MTCH_PRIO ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        NVL(NC.CONV_RAT_UT_CD, BQ.CTRT_CNTR_TPSZ_CD)  CONV_RAT_UT_CD            ," ).append("\n"); 
		query.append("        DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.DR_TP), 'DR', 'DR')  CONV_DR_TP    ," ).append("\n"); 
		query.append("        DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.DG_TP), 'DG', 'DG')  CONV_DG_TP    ," ).append("\n"); 
		query.append("        DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.RF_TP), 'RF', 'RF')  CONV_RF_TP    ," ).append("\n"); 
		query.append("        DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.AK_TP), 'AK', 'AK')  CONV_AK_TP    ," ).append("\n"); 
		query.append("        DECODE(NVL(NC.CONV_PRC_CGO_TP_CD, BQ.BB_TP), 'BB', 'BB')  CONV_BB_TP    ," ).append("\n"); 
		query.append("        NC.CONV_CMDT_TP_CD          ," ).append("\n"); 
		query.append("        NC.CONV_CMDT_DEF_CD         ," ).append("\n"); 
		query.append("        NVL(NC.CONV_ORG_LOC_TP_CD, 'L')               CONV_ORG_LOC_TP_CD        ," ).append("\n"); 
		query.append("        NVL(NC.CONV_ORG_LOC_DEF_CD, BQ.POR_CD)        CONV_ORG_LOC_DEF_CD       ," ).append("\n"); 
		query.append("        NVL(NC.CONV_ORG_VIA_LOC_TP_CD, 'L')           CONV_ORG_VIA_LOC_TP_CD    ," ).append("\n"); 
		query.append("        NVL(NC.CONV_ORG_VIA_LOC_DEF_CD, BQ.POL_CD)    CONV_ORG_VIA_LOC_DEF_CD   ," ).append("\n"); 
		query.append("        NVL(NC.CONV_DEST_VIA_LOC_TP_CD, 'L')          CONV_DEST_VIA_LOC_TP_CD   ," ).append("\n"); 
		query.append("        NVL(NC.CONV_DEST_VIA_LOC_DEF_CD, BQ.POD_CD)   CONV_DEST_VIA_LOC_DEF_CD  ," ).append("\n"); 
		query.append("        NVL(NC.CONV_DEST_LOC_TP_CD, 'L')              CONV_DEST_LOC_TP_CD       ," ).append("\n"); 
		query.append("        NVL(NC.CONV_DEST_LOC_DEF_CD, BQ.DEL_CD)       CONV_DEST_LOC_DEF_CD      ," ).append("\n"); 
		query.append("        NVL(NC.CONV_PRC_RCV_TERM_CD, BQ.RCV_TERM_CD)  CONV_PRC_RCV_TERM_CD      ," ).append("\n"); 
		query.append("        NVL(NC.CONV_PRC_DE_TERM_CD, BQ.DE_TERM_CD)    CONV_PRC_DE_TERM_CD       ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        NC.BKG_MST_HBL_TP_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("FROM    BQ  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  NC.*" ).append("\n"); 
		query.append("        FROM    BK                    ," ).append("\n"); 
		query.append("                PRI_SC_NOTE_CONV  NC" ).append("\n"); 
		query.append("        WHERE   NC.PROP_NO    = BK.PROP_NO" ).append("\n"); 
		query.append("        AND     NC.AMDT_SEQ   = BK.AMDT_SEQ" ).append("\n"); 
		query.append("        AND     NC.SVC_SCP_CD = BK.SVC_SCP_CD" ).append("\n"); 
		query.append("        AND     BK.RT_APLY_DT BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("        SELECT  NC.*" ).append("\n"); 
		query.append("        FROM    BK                    ," ).append("\n"); 
		query.append("                PRI_SC_NOTE_CONV  NC" ).append("\n"); 
		query.append("        WHERE   NC.SVC_SCP_CD   = BK.SVC_SCP_CD" ).append("\n"); 
		query.append("        AND     NC.NOTE_HDR_SEQ = BK.NOTE_HDR_SEQ" ).append("\n"); 
		query.append("        AND     BK.RT_APLY_DT BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("        ) NC                          ," ).append("\n"); 
		query.append("        PRI_SP_SCP_RT_CNOTE       CN  ," ).append("\n"); 
		query.append("        PRI_SP_SCP_RT_CMDT_RNOTE  RN  ," ).append("\n"); 
		query.append("        MDM_CHARGE                MC" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("WHERE   CN.NOTE_CONV_MAPG_ID(+) = NC.NOTE_CONV_MAPG_ID" ).append("\n"); 
		query.append("AND     CN.SRC_INFO_CD(+)       <> 'AD'" ).append("\n"); 
		query.append("AND     RN.NOTE_CONV_MAPG_ID(+) = NC.NOTE_CONV_MAPG_ID" ).append("\n"); 
		query.append("AND     RN.SRC_INFO_CD(+)       <> 'AD'" ).append("\n"); 
		query.append("AND     MC.CHG_CD(+)            = NC.NOTE_CONV_CHG_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     NVL(" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("        ELSE NC.GEN_SPCL_RT_TP_CD" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("        , NVL(BQ.GEN_SPCL_RT_TP_CD, '*'))   = NVL(BQ.GEN_SPCL_RT_TP_CD, '*')" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("        ELSE 0" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("        ) IN ( 0, BQ.CMDT_HDR_SEQ )" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.ROUT_SEQ" ).append("\n"); 
		query.append("        ELSE 0" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("        ) IN ( 0, BQ.ROUT_SEQ )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< OFT 해당 여부 확인 >" ).append("\n"); 
		query.append("선택된 OFT 와 일치하는 것만 대상으로 함." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.RULE_APPL_CHG_TP_CD  IS NULL" ).append("\n"); 
		query.append("        OR  NC.RULE_APPL_CHG_TP_CD  = 'S'           /* SURCHARGE 를 대상으로 함 */" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< SURCARGE GROUP COMMODITY >" ).append("\n"); 
		query.append("업무적으로는 SURCHARGE 에서만 사용함." ).append("\n"); 
		query.append("PRI_SCG_GRP_CMDT_DTL 의 EFFECTIVE DATE 는 BKG 의 APPLICATION DATE 를 기준으로 함." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_SCG_GRP_CMDT_CD IS NULL" ).append("\n"); 
		query.append("        OR  EXISTS  (" ).append("\n"); 
		query.append("                    SELECT  'X'" ).append("\n"); 
		query.append("                    FROM    PRI_SCG_GRP_CMDT      G ," ).append("\n"); 
		query.append("                            PRI_SCG_GRP_CMDT_DTL  D" ).append("\n"); 
		query.append("                    WHERE   D.SVC_SCP_CD          = G.SVC_SCP_CD" ).append("\n"); 
		query.append("                    AND     D.CHG_CD              = G.CHG_CD" ).append("\n"); 
		query.append("                    AND     D.SCG_GRP_CMDT_SEQ    = G.SCG_GRP_CMDT_SEQ" ).append("\n"); 
		query.append("                    AND     D.CMDT_CD             = BQ.CMDT_CD" ).append("\n"); 
		query.append("                    AND     BQ.RT_APLY_DT         BETWEEN D.EFF_DT AND D.EXP_DT" ).append("\n"); 
		query.append("                    AND     G.SVC_SCP_CD          = BQ.SVC_SCP_CD" ).append("\n"); 
		query.append("                    AND     G.CHG_CD              = 'GRI'" ).append("\n"); 
		query.append("                    AND     G.SCG_GRP_CMDT_CD     = NC.BKG_SCG_GRP_CMDT_CD" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("<  USA SVC MOD >" ).append("\n"); 
		query.append("NOTE CONV 에서는 USA SVC MOD CD 에, COMMERCIAL ZONE 도 같이 합쳐서 사용한다." ).append("\n"); 
		query.append("따라서 NOTE CONV 의 USA SVC MOD CD 가 'CZ' 이면 BKG 의 COMMERCIAL ZONE CD 와 비교한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_USA_SVC_MOD_CD IS NULL" ).append("\n"); 
		query.append("        OR  NC.BKG_USA_SVC_MOD_CD = DECODE(NC.BKG_USA_SVC_MOD_CD, 'CZ', BQ.CML_ZN_CD, BQ.USA_SVC_MOD_CD )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("ORG DEST TRANS MOD" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_ORG_TRSP_MOD_CD  IS NULL" ).append("\n"); 
		query.append("        OR  NVL(NC.BKG_ORG_TRSP_MOD_CD, '*')  = NVL(BQ.ORG_TRNS_MOD_CD, '*')" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_DEST_TRSP_MOD_CD IS NULL" ).append("\n"); 
		query.append("        OR  NVL(NC.BKG_DEST_TRSP_MOD_CD, '*') = NVL(BQ.DEST_TRNS_MOD_CD, '*')" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_RCV_TERM_CD  = BQ.RCV_TERM_CD" ).append("\n"); 
		query.append("        OR  (" ).append("\n"); 
		query.append("                NC.BKG_RCV_TERM_CD IS NULL" ).append("\n"); 
		query.append("            AND (" ).append("\n"); 
		query.append("                    MC.CHG_APLY_AREA_CD = 'C'" ).append("\n"); 
		query.append("                OR  BQ.RCV_TERM_CD  IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.RCV_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_DE_TERM_CD   = BQ.DE_TERM_CD" ).append("\n"); 
		query.append("        OR  (" ).append("\n"); 
		query.append("                NC.BKG_DE_TERM_CD IS NULL" ).append("\n"); 
		query.append("            AND (" ).append("\n"); 
		query.append("                    MC.CHG_APLY_AREA_CD = 'P'" ).append("\n"); 
		query.append("                OR  BQ.DE_TERM_CD   IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.DE_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("ACTUAL CUSTOMER" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            (" ).append("\n"); 
		query.append("                NC.BKG_ACT_CUST_CNT_CD  IS NULL" ).append("\n"); 
		query.append("            AND NC.BKG_ACT_CUST_SEQ     IS NULL" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("            OR" ).append("\n"); 
		query.append("            (" ).append("\n"); 
		query.append("                NC.BKG_ACT_CUST_CNT_CD  = BQ.AGMT_ACT_CNT_CD" ).append("\n"); 
		query.append("            AND NC.BKG_ACT_CUST_SEQ     = BQ.AGMT_ACT_CUST_SEQ" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< LANE & VVD >" ).append("\n"); 
		query.append("TRUNK, T/S 구분없이 LANE 이나 VVD 가 존재하는지 여부로 판단한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     EXISTS  (" ).append("\n"); 
		query.append("                SELECT  'X'" ).append("\n"); 
		query.append("                FROM    BKG_VVD BV" ).append("\n"); 
		query.append("                WHERE   BV.BKG_NO     = BQ.BKG_NO" ).append("\n"); 
		query.append("                AND     BV.SLAN_CD    = NVL(NC.BKG_SLAN_CD, BV.SLAN_CD)" ).append("\n"); 
		query.append("                AND     BV.VSL_CD     = NVL(NC.BKG_VSL_CD, BV.VSL_CD)" ).append("\n"); 
		query.append("                AND     BV.SKD_VOY_NO = NVL(NC.BKG_SKD_VOY_NO, BV.SKD_VOY_NO)" ).append("\n"); 
		query.append("                AND     BV.SKD_DIR_CD = NVL(NC.BKG_SKD_DIR_CD, BV.SKD_DIR_CD)" ).append("\n"); 
		query.append("                AND     @[ca_flg]     = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SELECT  'X'" ).append("\n"); 
		query.append("                FROM    BKG_VVD_HIS BV" ).append("\n"); 
		query.append("                WHERE   BV.BKG_NO     = BQ.BKG_NO" ).append("\n"); 
		query.append("                AND     BV.CORR_NO    = BQ.CORR_NO" ).append("\n"); 
		query.append("                AND     BV.SLAN_CD    = NVL(NC.BKG_SLAN_CD, BV.SLAN_CD)" ).append("\n"); 
		query.append("                AND     BV.VSL_CD     = NVL(NC.BKG_VSL_CD, BV.VSL_CD)" ).append("\n"); 
		query.append("                AND     BV.SKD_VOY_NO = NVL(NC.BKG_SKD_VOY_NO, BV.SKD_VOY_NO)" ).append("\n"); 
		query.append("                AND     BV.SKD_DIR_CD = NVL(NC.BKG_SKD_DIR_CD, BV.SKD_DIR_CD)" ).append("\n"); 
		query.append("                AND     @[ca_flg]     = 'Y'" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#elseif (${ctrt_tp_cd} == 'R')" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("        ELSE 0" ).append("\n"); 
		query.append("        END CMDT_HDR_SEQ            ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.ROUT_SEQ" ).append("\n"); 
		query.append("        ELSE 0" ).append("\n"); 
		query.append("        END ROUT_SEQ                ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        'S' GEN_SPCL_RT_TP_CD       ," ).append("\n"); 
		query.append("        NC.BKG_MIN_CGO_WGT    MIN_CGO_WGT         ," ).append("\n"); 
		query.append("        NC.BKG_MAX_CGO_WGT    MAX_CGO_WGT         ," ).append("\n"); 
		query.append("        'Y'                   HNGR_BAR_USE_FLG    ," ).append("\n"); 
		query.append("        NC.BKG_HNGR_BAR_TP_CD PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD, NC.NOTE_CONV_RULE_CD, DECODE(NC.CHG_RULE_TP_CD, 'C', NC.BKG_RAT_UT_CD), NVL(NC.BKG_MIN_CGO_WGT, 0), NVL(NC.BKG_MAX_CGO_WGT, 0), NC.BKG_HNGR_BAR_TP_CD" ).append("\n"); 
		query.append("                            ORDER BY" ).append("\n"); 
		query.append("                              ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ," ).append("\n"); 
		query.append("                                DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)" ).append("\n"); 
		query.append("                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_SLAN_CD          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_VSL_CD           , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) DESC  ," ).append("\n"); 
		query.append("                              NC.FRT_RT_AMT         ," ).append("\n"); 
		query.append("                              NC.NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("                              NC.NOTE_CONV_SEQ" ).append("\n"); 
		query.append("                            ) ROW_NUMBER  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)" ).append("\n"); 
		query.append("                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_SLAN_CD          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_VSL_CD           , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) MTCH_PRIO ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        NULL  CONV_RAT_UT_CD            ," ).append("\n"); 
		query.append("        NULL  CONV_DR_TP                ," ).append("\n"); 
		query.append("        NULL  CONV_DG_TP                ," ).append("\n"); 
		query.append("        NULL  CONV_RF_TP                ," ).append("\n"); 
		query.append("        NULL  CONV_AK_TP                ," ).append("\n"); 
		query.append("        NULL  CONV_BB_TP                ," ).append("\n"); 
		query.append("        NULL  CONV_CMDT_TP_CD           ," ).append("\n"); 
		query.append("        NULL  CONV_CMDT_DEF_CD          ," ).append("\n"); 
		query.append("        NULL  CONV_ORG_LOC_TP_CD        ," ).append("\n"); 
		query.append("        NULL  CONV_ORG_LOC_DEF_CD       ," ).append("\n"); 
		query.append("        NULL  CONV_ORG_VIA_LOC_TP_CD    ," ).append("\n"); 
		query.append("        NULL  CONV_ORG_VIA_LOC_DEF_CD   ," ).append("\n"); 
		query.append("        NULL  CONV_DEST_VIA_LOC_TP_CD   ," ).append("\n"); 
		query.append("        NULL  CONV_DEST_VIA_LOC_DEF_CD  ," ).append("\n"); 
		query.append("        NULL  CONV_DEST_LOC_TP_CD       ," ).append("\n"); 
		query.append("        NULL  CONV_DEST_LOC_DEF_CD      ," ).append("\n"); 
		query.append("        NULL  CONV_PRC_RCV_TERM_CD      ," ).append("\n"); 
		query.append("        NULL  CONV_PRC_DE_TERM_CD       ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        NULL  BKG_MST_HBL_TP_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("FROM    BQ  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  NC.*" ).append("\n"); 
		query.append("        FROM    BK                    ," ).append("\n"); 
		query.append("                PRI_RFA_NOTE_CONV NC" ).append("\n"); 
		query.append("        WHERE   NC.PROP_NO    = BK.PROP_NO" ).append("\n"); 
		query.append("        AND     NC.AMDT_SEQ   = BK.AMDT_SEQ" ).append("\n"); 
		query.append("        AND     NC.SVC_SCP_CD = BK.SVC_SCP_CD" ).append("\n"); 
		query.append("        AND     BK.RT_APLY_DT BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("        ) NC                          ," ).append("\n"); 
		query.append("        PRI_RP_SCP_RT_CNOTE       CN  ," ).append("\n"); 
		query.append("        PRI_RP_SCP_RT_CMDT_RNOTE  RN  ," ).append("\n"); 
		query.append("        MDM_CHARGE                MC" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("WHERE   CN.NOTE_CONV_MAPG_ID(+) = NC.NOTE_CONV_MAPG_ID" ).append("\n"); 
		query.append("AND     CN.SRC_INFO_CD(+)       <> 'AD'" ).append("\n"); 
		query.append("AND     RN.NOTE_CONV_MAPG_ID(+) = NC.NOTE_CONV_MAPG_ID" ).append("\n"); 
		query.append("AND     RN.SRC_INFO_CD(+)       <> 'AD'" ).append("\n"); 
		query.append("AND     MC.CHG_CD(+)            = NC.NOTE_CONV_CHG_CD" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'C' THEN CN.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.CMDT_HDR_SEQ" ).append("\n"); 
		query.append("        ELSE 0" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("        ) IN ( 0, BQ.CMDT_HDR_SEQ )" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN NC.NOTE_CONV_TP_CD = 'R' THEN RN.ROUT_SEQ" ).append("\n"); 
		query.append("        ELSE 0" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("        ) IN ( 0, BQ.ROUT_SEQ )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            MC.CHG_APLY_AREA_CD = 'C'" ).append("\n"); 
		query.append("        OR  BQ.RCV_TERM_CD  IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.RCV_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            MC.CHG_APLY_AREA_CD = 'P'" ).append("\n"); 
		query.append("        OR  BQ.DE_TERM_CD   IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.DE_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< LANE & VVD >" ).append("\n"); 
		query.append("TRUNK, T/S 구분없이 LANE 이나 VVD 가 존재하는지 여부로 판단한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     EXISTS  (" ).append("\n"); 
		query.append("                SELECT  'X'" ).append("\n"); 
		query.append("                FROM    BKG_VVD BV" ).append("\n"); 
		query.append("                WHERE   BV.BKG_NO     = BQ.BKG_NO" ).append("\n"); 
		query.append("                AND     BV.SLAN_CD    = NVL(NC.BKG_SLAN_CD, BV.SLAN_CD)" ).append("\n"); 
		query.append("                AND     BV.VSL_CD     = NVL(NC.BKG_VSL_CD, BV.VSL_CD)" ).append("\n"); 
		query.append("                AND     BV.SKD_VOY_NO = NVL(NC.BKG_SKD_VOY_NO, BV.SKD_VOY_NO)" ).append("\n"); 
		query.append("                AND     BV.SKD_DIR_CD = NVL(NC.BKG_SKD_DIR_CD, BV.SKD_DIR_CD)" ).append("\n"); 
		query.append("                AND     @[ca_flg]     = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SELECT  'X'" ).append("\n"); 
		query.append("                FROM    BKG_VVD_HIS BV" ).append("\n"); 
		query.append("                WHERE   BV.BKG_NO     = BQ.BKG_NO" ).append("\n"); 
		query.append("                AND     BV.CORR_NO    = BQ.CORR_NO" ).append("\n"); 
		query.append("                AND     BV.SLAN_CD    = NVL(NC.BKG_SLAN_CD, BV.SLAN_CD)" ).append("\n"); 
		query.append("                AND     BV.VSL_CD     = NVL(NC.BKG_VSL_CD, BV.VSL_CD)" ).append("\n"); 
		query.append("                AND     BV.SKD_VOY_NO = NVL(NC.BKG_SKD_VOY_NO, BV.SKD_VOY_NO)" ).append("\n"); 
		query.append("                AND     BV.SKD_DIR_CD = NVL(NC.BKG_SKD_DIR_CD, BV.SKD_DIR_CD)" ).append("\n"); 
		query.append("                AND     @[ca_flg]     = 'Y'" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        0 CMDT_HDR_SEQ              ," ).append("\n"); 
		query.append("        0 ROUT_SEQ                  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        'S' GEN_SPCL_RT_TP_CD       ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        NC.BKG_MIN_CGO_WGT    MIN_CGO_WGT         ," ).append("\n"); 
		query.append("        NC.BKG_MAX_CGO_WGT    MAX_CGO_WGT         ," ).append("\n"); 
		query.append("        'Y'                   HNGR_BAR_USE_FLG    ," ).append("\n"); 
		query.append("        NC.BKG_HNGR_BAR_TP_CD PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, NC.CHG_RULE_TP_CD, NC.NOTE_CONV_CHG_CD, NC.NOTE_CONV_RULE_CD, DECODE(NC.CHG_RULE_TP_CD, 'C', NC.BKG_RAT_UT_CD), NVL(NC.BKG_MIN_CGO_WGT,0), NVL(NC.BKG_MAX_CGO_WGT,0), NC.BKG_HNGR_BAR_TP_CD" ).append("\n"); 
		query.append("                            ORDER BY" ).append("\n"); 
		query.append("                              ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = NC.NOTE_CONV_TP_CD ) ," ).append("\n"); 
		query.append("                                DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)" ).append("\n"); 
		query.append("                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_USA_SVC_MOD_CD   , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) DESC  ," ).append("\n"); 
		query.append("                              NC.FRT_RT_AMT         ," ).append("\n"); 
		query.append("                              NC.NOTE_CONV_MAPG_ID  ," ).append("\n"); 
		query.append("                              NC.NOTE_CONV_SEQ" ).append("\n"); 
		query.append("                            ) ROW_NUMBER  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        DECODE(BKG_CMDT_TP_CD, 'C', 600, 'G', 400, 'R', 300, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                + DECODE(BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, NULL, 4, 6)" ).append("\n"); 
		query.append("                                + DECODE(BKG_PRC_CGO_TP_CD    , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_IMDG_CLSS_CD     , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_USA_SVC_MOD_CD   , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_RCV_TERM_CD      , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DE_TERM_CD       , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_SOC_FLG          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_TS_PORT_DEF_CD   , NULL, 0, 1)" ).append("\n"); 
		query.append("                                + DECODE(BKG_DIR_CALL_FLG     , NULL, 0, 1) MTCH_PRIO ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        NVL(NC.CONV_RAT_UT_CD, BQ.CTRT_CNTR_TPSZ_CD)  CONV_RAT_UT_CD            ," ).append("\n"); 
		query.append("        NULL  CONV_DR_TP                ," ).append("\n"); 
		query.append("        NULL  CONV_DG_TP                ," ).append("\n"); 
		query.append("        NULL  CONV_RF_TP                ," ).append("\n"); 
		query.append("        NULL  CONV_AK_TP                ," ).append("\n"); 
		query.append("        NULL  CONV_BB_TP                ," ).append("\n"); 
		query.append("        NULL  CONV_CMDT_TP_CD           ," ).append("\n"); 
		query.append("        NULL  CONV_CMDT_DEF_CD          ," ).append("\n"); 
		query.append("        NULL  CONV_ORG_LOC_TP_CD        ," ).append("\n"); 
		query.append("        NULL  CONV_ORG_LOC_DEF_CD       ," ).append("\n"); 
		query.append("        NULL  CONV_ORG_VIA_LOC_TP_CD    ," ).append("\n"); 
		query.append("        NULL  CONV_ORG_VIA_LOC_DEF_CD   ," ).append("\n"); 
		query.append("        NULL  CONV_DEST_VIA_LOC_TP_CD   ," ).append("\n"); 
		query.append("        NULL  CONV_DEST_VIA_LOC_DEF_CD  ," ).append("\n"); 
		query.append("        NULL  CONV_DEST_LOC_TP_CD       ," ).append("\n"); 
		query.append("        NULL  CONV_DEST_LOC_DEF_CD      ," ).append("\n"); 
		query.append("        NULL  CONV_PRC_RCV_TERM_CD      ," ).append("\n"); 
		query.append("        NULL  CONV_PRC_DE_TERM_CD       ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        NULL  BKG_MST_HBL_TP_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("FROM    BQ  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  NC.*" ).append("\n"); 
		query.append("        FROM    BK                      ," ).append("\n"); 
		query.append("                PRI_TAA_TRI_LIST    TL  ," ).append("\n"); 
		query.append("                PRI_TRI_RT          RT  ," ).append("\n"); 
		query.append("                PRI_TRI_NOTE_CONV   NC" ).append("\n"); 
		query.append("        WHERE   TL.TAA_PROP_NO  = BK.PROP_NO" ).append("\n"); 
		query.append("        AND     TL.AMDT_SEQ     = BK.AMDT_SEQ" ).append("\n"); 
		query.append("        AND     RT.TRI_PROP_NO  = TL.TRI_PROP_NO" ).append("\n"); 
		query.append("        AND     BK.RT_APLY_DT   BETWEEN RT.EFF_DT AND RT.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("        AND     RT.PROP_STS_CD  = 'F'" ).append("\n"); 
		query.append("        AND     NC.TRI_PROP_NO  = RT.TRI_PROP_NO" ).append("\n"); 
		query.append("        AND     NC.AMDT_SEQ     = RT.AMDT_SEQ" ).append("\n"); 
		query.append("        AND     BK.RT_APLY_DT   BETWEEN NC.EFF_DT AND NC.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("        UNION ALL" ).append("\n"); 
		query.append("        SELECT  NC.*" ).append("\n"); 
		query.append("        FROM    BK                      ," ).append("\n"); 
		query.append("                PRI_SVC_SCP_TRF     ST  ," ).append("\n"); 
		query.append("                PRI_TRI_NOTE        TN  ," ).append("\n"); 
		query.append("                PRI_TRI_NOTE_CONV   NC" ).append("\n"); 
		query.append("        WHERE   ST.SVC_SCP_CD = BK.SVC_SCP_CD" ).append("\n"); 
		query.append("        AND     TN.TRF_PFX_CD = ST.TRF_PFX_CD" ).append("\n"); 
		query.append("        AND     TN.TRF_NO     = ST.TRF_NO" ).append("\n"); 
		query.append("        AND     BK.RT_APLY_DT   BETWEEN TN.EFF_DT AND TN.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("        AND     TN.CFM_FLG    = 'Y'" ).append("\n"); 
		query.append("        AND     NC.NOTE_CONV_MAPG_ID  = TN.NOTE_CONV_MAPG_ID" ).append("\n"); 
		query.append("        ) NC                          ," ).append("\n"); 
		query.append("        MDM_CHARGE                MC" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("WHERE   MC.CHG_CD(+)            = NC.NOTE_CONV_CHG_CD" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.TRI_PROP_NO  IS NULL" ).append("\n"); 
		query.append("        OR  NC.TRI_PROP_NO  = BQ.TRI_PROP_NO" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("<  USA SVC MOD >" ).append("\n"); 
		query.append("NOTE CONV 에서는 USA SVC MOD CD 에, COMMERCIAL ZONE 도 같이 합쳐서 사용한다." ).append("\n"); 
		query.append("따라서 NOTE CONV 의 USA SVC MOD CD 가 'CZ' 이면 BKG 의 COMMERCIAL ZONE CD 와 비교한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_USA_SVC_MOD_CD IS NULL" ).append("\n"); 
		query.append("        OR  NC.BKG_USA_SVC_MOD_CD = DECODE(NC.BKG_USA_SVC_MOD_CD, 'CZ', BQ.CML_ZN_CD, BQ.USA_SVC_MOD_CD )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_RCV_TERM_CD  = BQ.RCV_TERM_CD" ).append("\n"); 
		query.append("        OR  (" ).append("\n"); 
		query.append("                NC.BKG_RCV_TERM_CD IS NULL" ).append("\n"); 
		query.append("            AND (" ).append("\n"); 
		query.append("                    MC.CHG_APLY_AREA_CD = 'C'" ).append("\n"); 
		query.append("                OR  BQ.RCV_TERM_CD  IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.RCV_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_DE_TERM_CD   = BQ.DE_TERM_CD" ).append("\n"); 
		query.append("        OR  (" ).append("\n"); 
		query.append("                NC.BKG_DE_TERM_CD IS NULL" ).append("\n"); 
		query.append("            AND (" ).append("\n"); 
		query.append("                    MC.CHG_APLY_AREA_CD = 'P'" ).append("\n"); 
		query.append("                OR  BQ.DE_TERM_CD   IN ( DECODE(NC.CHG_RULE_TP_CD, 'R', BQ.DE_TERM_CD), DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("NOT RULE CODE 는 SURCHARGE 에서만 사용되며," ).append("\n"); 
		query.append("TYP RULE CODE 는 OFT 에 사용되는 것이 기본이지만, SURCHARGE 에서도 사용된다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.CHG_RULE_TP_CD     = 'C'" ).append("\n"); 
		query.append("        OR" ).append("\n"); 
		query.append("            (" ).append("\n"); 
		query.append("                NC.CHG_RULE_TP_CD     = 'R'" ).append("\n"); 
		query.append("            AND NC.NOTE_CONV_RULE_CD  IN ( 'NOT', 'TYP' )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< RATING UNIT >" ).append("\n"); 
		query.append("CHARGE CODE 의 경우 아래 C1 에서 처리함." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.CHG_RULE_TP_CD     = 'C'" ).append("\n"); 
		query.append("        OR  (" ).append("\n"); 
		query.append("                    NC.BKG_RAT_UT_CD  IS NULL" ).append("\n"); 
		query.append("                OR  NC.BKG_RAT_UT_CD  = BQ.CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                OR  NC.BKG_RAT_UT_CD  IN ( 'BX', 'BL' )" ).append("\n"); 
		query.append("                OR" ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                    NC.BKG_RAT_UT_CD  IN ( '20', '40', 'HC', '45', '53' )" ).append("\n"); 
		query.append("                AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = NC.BKG_RAT_UT_CD )  = BQ.CTRT_CNTR_SZ_CD" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< CARGO TYPE >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_PRC_CGO_TP_CD  IS NULL" ).append("\n"); 
		query.append("        OR  NC.BKG_PRC_CGO_TP_CD  IN ( BQ.DR_TP, BQ.DG_TP, BQ.RF_TP, BQ.AK_TP, BQ.BB_TP )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< IMDG CLASS >" ).append("\n"); 
		query.append("NOTE CONV 의 IMDG CLSS CD 가 BKG 의 IMDG_CLSS_CD 의 일부부이라도 적용가능하다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_IMDG_CLSS_CD IS NULL" ).append("\n"); 
		query.append("        OR  BQ.IMDG_CLSS_CD     LIKE NC.BKG_IMDG_CLSS_CD||'%'" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< COMMODITY >" ).append("\n"); 
		query.append("GROUP 은 사용하지 않는다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_CMDT_DEF_CD IS NULL" ).append("\n"); 
		query.append("        OR  NC.BKG_CMDT_DEF_CD = DECODE(NC.BKG_CMDT_TP_CD, 'C', BQ.CMDT_CD, 'R', BQ.REP_CMDT_CD)" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< ROUTE >" ).append("\n"); 
		query.append("STANDARD NOTE 의 경우는 GROUP 을 사용하지 않으므로," ).append("\n"); 
		query.append("STANDARD NOTE 를 위한 특별한 고려가 필요하지 않음." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("/* POR */" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_POR_DEF_CD IS NULL" ).append("\n"); 
		query.append("        OR  NC.BKG_POR_DEF_CD = DECODE(NC.BKG_POR_TP_CD, 'L', BQ.POR_CD, 'T', BQ.POR_STE_CD, 'R', BQ.POR_RGN_CD, 'C', BQ.POR_CNT_CD)" ).append("\n"); 
		query.append("        OR  (" ).append("\n"); 
		query.append("                NC.BKG_POR_TP_CD  = 'G'" ).append("\n"); 
		query.append("            AND EXISTS  (" ).append("\n"); 
		query.append("                        SELECT  'X'" ).append("\n"); 
		query.append("                        FROM    GL" ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POR_DEF_CD" ).append("\n"); 
		query.append("                        AND     GL.LOC_CD         = BQ.POR_CD" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("/* POL */" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_POL_DEF_CD IS NULL" ).append("\n"); 
		query.append("        OR  NC.BKG_POL_DEF_CD = DECODE(NC.BKG_POL_TP_CD, 'L', BQ.POL_CD, 'T', BQ.POL_STE_CD, 'R', BQ.POL_RGN_CD, 'C', BQ.POL_CNT_CD)" ).append("\n"); 
		query.append("        OR  (" ).append("\n"); 
		query.append("                NC.BKG_POL_TP_CD  = 'G'" ).append("\n"); 
		query.append("            AND EXISTS  (" ).append("\n"); 
		query.append("                        SELECT  'X'" ).append("\n"); 
		query.append("                        FROM    GL" ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POL_DEF_CD" ).append("\n"); 
		query.append("                        AND     GL.LOC_CD         = BQ.POL_CD" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("/* POD */" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_POD_DEF_CD IS NULL" ).append("\n"); 
		query.append("        OR  NC.BKG_POD_DEF_CD = DECODE(NC.BKG_POD_TP_CD, 'L', BQ.POD_CD, 'T', BQ.POD_STE_CD, 'R', BQ.POD_RGN_CD, 'C', BQ.POD_CNT_CD)" ).append("\n"); 
		query.append("        OR  (" ).append("\n"); 
		query.append("                NC.BKG_POD_TP_CD  = 'G'" ).append("\n"); 
		query.append("            AND EXISTS  (" ).append("\n"); 
		query.append("                        SELECT  'X'" ).append("\n"); 
		query.append("                        FROM    GL" ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_POD_DEF_CD" ).append("\n"); 
		query.append("                        AND     GL.LOC_CD         = BQ.POD_CD" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("/* DEL */" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_DEL_DEF_CD IS NULL" ).append("\n"); 
		query.append("        OR  NC.BKG_DEL_DEF_CD = DECODE(NC.BKG_DEL_TP_CD, 'L', BQ.DEL_CD, 'T', BQ.DEL_STE_CD, 'R', BQ.DEL_RGN_CD, 'C', BQ.DEL_CNT_CD)" ).append("\n"); 
		query.append("        OR  (" ).append("\n"); 
		query.append("                NC.BKG_DEL_TP_CD  = 'G'" ).append("\n"); 
		query.append("            AND EXISTS  (" ).append("\n"); 
		query.append("                        SELECT  'X'" ).append("\n"); 
		query.append("                        FROM    GL" ).append("\n"); 
		query.append("                        WHERE   GL.PRC_GRP_LOC_CD = NC.BKG_DEL_DEF_CD" ).append("\n"); 
		query.append("                        AND     GL.LOC_CD         = BQ.DEL_CD" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("SOC" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_SOC_FLG  IS NULL" ).append("\n"); 
		query.append("        OR  NC.BKG_SOC_FLG  = BQ.SOC_FLG" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< T/S PORT >" ).append("\n"); 
		query.append("T/S 가 발생하는 PORT 를 대상으로 한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_TS_PORT_DEF_CD IS NULL" ).append("\n"); 
		query.append("        OR  EXISTS  (" ).append("\n"); 
		query.append("                    SELECT  'X'" ).append("\n"); 
		query.append("                    FROM    BKG_VVD       V1  ," ).append("\n"); 
		query.append("                            BKG_VVD       V2  ," ).append("\n"); 
		query.append("                            MDM_LOCATION  LO" ).append("\n"); 
		query.append("                    WHERE   V2.BKG_NO     = V1.BKG_NO" ).append("\n"); 
		query.append("                    AND     V2.POL_CD     = V1.POD_CD" ).append("\n"); 
		query.append("                    AND     LO.LOC_CD     = V1.POD_CD" ).append("\n"); 
		query.append("                    AND     V1.BKG_NO     = BQ.BKG_NO" ).append("\n"); 
		query.append("                    AND     DECODE(NC.BKG_TS_PORT_TP_CD, 'L', LO.LOC_CD, 'T', LO.CNT_CD||LO.STE_CD, 'R', LO.RGN_CD, 'C', LO.CNT_CD) = NC.BKG_TS_PORT_DEF_CD" ).append("\n"); 
		query.append("                    AND     @[ca_flg]     = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                    UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                    SELECT  'X'" ).append("\n"); 
		query.append("                    FROM    BKG_VVD_HIS   V1  ," ).append("\n"); 
		query.append("                            BKG_VVD_HIS   V2  ," ).append("\n"); 
		query.append("                            MDM_LOCATION  LO" ).append("\n"); 
		query.append("                    WHERE   V2.BKG_NO     = V1.BKG_NO" ).append("\n"); 
		query.append("                    AND     V2.CORR_NO    = V1.CORR_NO" ).append("\n"); 
		query.append("                    AND     V2.POL_CD     = V1.POD_CD" ).append("\n"); 
		query.append("                    AND     LO.LOC_CD     = V1.POD_CD" ).append("\n"); 
		query.append("                    AND     V1.BKG_NO     = BQ.BKG_NO" ).append("\n"); 
		query.append("                    AND     V1.CORR_NO    = BQ.CORR_NO" ).append("\n"); 
		query.append("                    AND     DECODE(NC.BKG_TS_PORT_TP_CD, 'L', LO.LOC_CD, 'T', LO.CNT_CD||LO.STE_CD, 'R', LO.RGN_CD, 'C', LO.CNT_CD) = NC.BKG_TS_PORT_DEF_CD" ).append("\n"); 
		query.append("                    AND     @[ca_flg]     = 'Y'" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("/* DIR CALL */" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("            NC.BKG_DIR_CALL_FLG IS NULL" ).append("\n"); 
		query.append("        OR  NC.BKG_DIR_CALL_FLG = BQ.DIR_CALL_FLG" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("NC_P AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("적용될 CONVERSION 이 같은 NOTE_CONV_TP_CD 에서 하나의 NOTE_CONV_RULE_CD 가 되도록 우선순위가 낮은 것을 제거한다." ).append("\n"); 
		query.append("우선순위가 똑같은 경우에는 NOTE_CONV_MAPG_ID||LPAD(NOTE_CONV_SEQ, 6, '0') 가 적은 것을 우선한다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("'TYP' 1개의 RULE CODE 를 가진 BKG DATA 를 UNION ALL 로 추가한다." ).append("\n"); 
		query.append("이 부분은 계약과 BKG 를 직접 비교하지 않고, NOTE CONV 와만 비교하도록 하기 위함이다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  NC.OFT_CMB_SEQ              ," ).append("\n"); 
		query.append("        NC.BQ_SEQ                   ," ).append("\n"); 
		query.append("        NC.BKG_BQ_SEQ               ," ).append("\n"); 
		query.append("        NC.NOTE_CONV_MAPG_ID        ," ).append("\n"); 
		query.append("        NC.NOTE_CONV_SEQ            ," ).append("\n"); 
		query.append("        'C' BKG_CONV_TP_CD          ," ).append("\n"); 
		query.append("        NC.GEN_SPCL_RT_TP_CD        ," ).append("\n"); 
		query.append("        NC.CMDT_HDR_SEQ             ," ).append("\n"); 
		query.append("        NC.ROUT_SEQ                 ," ).append("\n"); 
		query.append("        NC.CONV_TP_PRIO             ," ).append("\n"); 
		query.append("        NC.NOTE_CONV_TP_CD          ," ).append("\n"); 
		query.append("        NC.CHG_RULE_TP_CD           ," ).append("\n"); 
		query.append("        NC.NOTE_CONV_CHG_CD         ," ).append("\n"); 
		query.append("        NC.NOTE_CONV_RULE_CD        ," ).append("\n"); 
		query.append("        NC.CONV_RAT_UT_CD           ," ).append("\n"); 
		query.append("        ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = NC.CONV_RAT_UT_CD ) CONV_RAT_UT_SZ_CD   ," ).append("\n"); 
		query.append("        NC.CONV_DR_TP               ," ).append("\n"); 
		query.append("        NC.CONV_DG_TP               ," ).append("\n"); 
		query.append("        NC.CONV_RF_TP               ," ).append("\n"); 
		query.append("        NC.CONV_AK_TP               ," ).append("\n"); 
		query.append("        NC.CONV_BB_TP               ," ).append("\n"); 
		query.append("        NC.CONV_CMDT_TP_CD          ," ).append("\n"); 
		query.append("        NC.CONV_CMDT_DEF_CD         ," ).append("\n"); 
		query.append("        NC.CONV_ORG_LOC_TP_CD       ," ).append("\n"); 
		query.append("        NC.CONV_ORG_LOC_DEF_CD      ," ).append("\n"); 
		query.append("        NC.CONV_ORG_VIA_LOC_TP_CD   ," ).append("\n"); 
		query.append("        NC.CONV_ORG_VIA_LOC_DEF_CD  ," ).append("\n"); 
		query.append("        NC.CONV_DEST_VIA_LOC_TP_CD  ," ).append("\n"); 
		query.append("        NC.CONV_DEST_VIA_LOC_DEF_CD ," ).append("\n"); 
		query.append("        NC.CONV_DEST_LOC_TP_CD      ," ).append("\n"); 
		query.append("        NC.CONV_DEST_LOC_DEF_CD     ," ).append("\n"); 
		query.append("        NC.CONV_PRC_RCV_TERM_CD     ," ).append("\n"); 
		query.append("        NC.CONV_PRC_DE_TERM_CD      ," ).append("\n"); 
		query.append("        NC.BKG_MST_HBL_TP_CD        ," ).append("\n"); 
		query.append("        NC.MIN_CGO_WGT              ," ).append("\n"); 
		query.append("        NC.MAX_CGO_WGT              ," ).append("\n"); 
		query.append("        NC.HNGR_BAR_USE_FLG         ," ).append("\n"); 
		query.append("        NC.PRC_HNGR_BAR_TP_CD       ," ).append("\n"); 
		query.append("        NC.SOC_USE_FLG              ," ).append("\n"); 
		query.append("        NC.BKG_RAT_UT_CD            ," ).append("\n"); 
		query.append("        NC.BKG_PRC_CGO_TP_CD        ," ).append("\n"); 
		query.append("        NC.BKG_IMDG_CLSS_CD         ," ).append("\n"); 
		query.append("        NC.RT_APPL_TP_CD            ," ).append("\n"); 
		query.append("        NC.RT_OP_CD                 ," ).append("\n"); 
		query.append("        NC.CURR_CD                  ," ).append("\n"); 
		query.append("        NC.FRT_RT_AMT               ," ).append("\n"); 
		query.append("        NC.PAY_TERM_CD              ," ).append("\n"); 
		query.append("        NC.MTCH_PRIO" ).append("\n"); 
		query.append("FROM    NC" ).append("\n"); 
		query.append("WHERE   ROW_NUMBER  = 1" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("SELECT  BQ.OFT_CMB_SEQ                                  ," ).append("\n"); 
		query.append("        BQ.BQ_SEQ                                       ," ).append("\n"); 
		query.append("        BQ.BKG_BQ_SEQ                                   ," ).append("\n"); 
		query.append("        NULL                  NOTE_CONV_MAPG_ID         ," ).append("\n"); 
		query.append("        NULL                  NOTE_CONV_SEQ             ," ).append("\n"); 
		query.append("        'B'                   BKG_CONV_TP_CD            ," ).append("\n"); 
		query.append("        NULL                  GEN_SPCL_RT_TP_CD         ," ).append("\n"); 
		query.append("        0                     CMDT_HDR_SEQ              ," ).append("\n"); 
		query.append("        0                     ROUT_SEQ                  ," ).append("\n"); 
		query.append("        0                     CONV_TP_PRIO              , /* BKG 의 CONV_TP_PRIO 는 0 으로 어떤 CONV 보다 높은 우선 순위를 가지게 한다. */" ).append("\n"); 
		query.append("        NULL                  NOTE_CONV_TP_CD           ," ).append("\n"); 
		query.append("        'R'                   CHG_RULE_TP_CD            ," ).append("\n"); 
		query.append("        NULL                  NOTE_CONV_CHG_CD          ," ).append("\n"); 
		query.append("        RC.NOTE_CONV_RULE_CD  NOTE_CONV_RULE_CD         ," ).append("\n"); 
		query.append("        BQ.CTRT_CNTR_TPSZ_CD  CONV_RAT_UT_CD            ," ).append("\n"); 
		query.append("        ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = BQ.CTRT_CNTR_TPSZ_CD )  CONV_RAT_UT_SZ_CD   ," ).append("\n"); 
		query.append("        BQ.DR_TP              CONV_DR_TP                ," ).append("\n"); 
		query.append("        BQ.DG_TP              CONV_DG_TP                ," ).append("\n"); 
		query.append("        BQ.RF_TP              CONV_RF_TP                ," ).append("\n"); 
		query.append("        BQ.AK_TP              CONV_AK_TP                ," ).append("\n"); 
		query.append("        BQ.BB_TP              CONV_BB_TP                ," ).append("\n"); 
		query.append("        'C'                   CONV_CMDT_TP_CD           ," ).append("\n"); 
		query.append("        BQ.CMDT_CD            CONV_CMDT_DEF_CD          ," ).append("\n"); 
		query.append("        'L'                   CONV_ORG_LOC_TP_CD        ," ).append("\n"); 
		query.append("        BQ.POR_CD             CONV_ORG_LOC_DEF_CD       ," ).append("\n"); 
		query.append("        'L'                   CONV_ORG_VIA_LOC_TP_CD    ," ).append("\n"); 
		query.append("        BQ.POL_CD             CONV_ORG_VIA_LOC_DEF_CD   ," ).append("\n"); 
		query.append("        'L'                   CONV_DEST_VIA_LOC_TP_CD   ," ).append("\n"); 
		query.append("        BQ.POD_CD             CONV_DEST_VIA_LOC_DEF_CD  ," ).append("\n"); 
		query.append("        'L'                   CONV_DEST_LOC_TP_CD       ," ).append("\n"); 
		query.append("        BQ.DEL_CD             CONV_DEST_LOC_DEF_CD      ," ).append("\n"); 
		query.append("        BQ.RCV_TERM_CD        CONV_PRC_RCV_TERM_CD      ," ).append("\n"); 
		query.append("        BQ.DE_TERM_CD         CONV_PRC_DE_TERM_CD       ," ).append("\n"); 
		query.append("        NULL                  BKG_MST_HBL_TP_CD         ," ).append("\n"); 
		query.append("        NULL                  MIN_CGO_WGT               ," ).append("\n"); 
		query.append("        NULL                  MAX_CGO_WGT               ," ).append("\n"); 
		query.append("        NULL                  HNGR_BAR_USE_FLG          ," ).append("\n"); 
		query.append("        NULL                  PRC_HNGR_BAR_TP_CD        ," ).append("\n"); 
		query.append("        NULL                  SOC_USE_FLG               ," ).append("\n"); 
		query.append("        BQ.CTRT_CNTR_TPSZ_CD  BKG_RAT_UT_CD             ," ).append("\n"); 
		query.append("        BQ.PRC_CGO_TP_CD      BKG_PRC_CGO_TP_CD         ," ).append("\n"); 
		query.append("        BQ.IMDG_CLSS_CD       BKG_IMDG_CLSS_CD          ," ).append("\n"); 
		query.append("        NULL                  RT_APPL_TP_CD             ," ).append("\n"); 
		query.append("        NULL                  RT_OP_CD                  ," ).append("\n"); 
		query.append("        NULL                  CURR_CD                   ," ).append("\n"); 
		query.append("        NULL                  FRT_RT_AMT                ," ).append("\n"); 
		query.append("        NULL                  PAY_TERM_CD               ," ).append("\n"); 
		query.append("        NULL                  MTCH_PRIO" ).append("\n"); 
		query.append("FROM    BQ  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  'TYP' NOTE_CONV_RULE_CD FROM DUAL" ).append("\n"); 
		query.append("        ) RC" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("C1 AS (" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< CONVERSION SURCHARGE >" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("S Subject         : Tariff Surcharge 를 적용하겠다." ).append("\n"); 
		query.append("I Include         : Subjrect 와 동일 ( 단, 표시만 'I' )" ).append("\n"); 
		query.append("F Fix Amount      : 고정 값" ).append("\n"); 
		query.append("A Adjust Adjust   : Tariff Surcharge 에 계산 공식 적용 + - * /, Lower 는 더 낮은값, Higher 는 더 높은 값." ).append("\n"); 
		query.append("N Not Applicable  : Tariff Surcharge 도 적용하지 않겠다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("NOT RULE 의 RT_APPL_TP_CD 는 S 와 I 만 존재한다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("MTCH_PRIO 가 같은데.. CMDT 와 ROUT 만의 MTCH_PRIO 도 같으면 ERROR 로직 발생해야하는데.." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  C1.OFT_CMB_SEQ          ," ).append("\n"); 
		query.append("        C1.BQ_SEQ               ," ).append("\n"); 
		query.append("        C1.BKG_BQ_SEQ           ," ).append("\n"); 
		query.append("        C1.SEL_TP_CD            ," ).append("\n"); 
		query.append("        C1.SEL_TP_PRIO          ," ).append("\n"); 
		query.append("        C1.CHG_CD               ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN C1.RAT_UT_CD = 'PC' AND SP.FLT_PCT_TP_CD = 'P' THEN SP.FLT_PCT_TP_CD" ).append("\n"); 
		query.append("        ELSE 'F'" ).append("\n"); 
		query.append("        END FLT_PCT_TP_CD       ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN C1.RAT_UT_CD = 'PC' AND SP.FLT_PCT_TP_CD = 'P' THEN SP.PCT_BSE_CD" ).append("\n"); 
		query.append("        ELSE NULL" ).append("\n"); 
		query.append("        END PCT_BSE_CD          ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        C1.SOC_USE_FLG          ," ).append("\n"); 
		query.append("        C1.HNGR_BAR_USE_FLG     ," ).append("\n"); 
		query.append("        C1.IO_GA_USE_FLG        ," ).append("\n"); 
		query.append("        C1.CGO_WGT_USE_FLG      ," ).append("\n"); 
		query.append("        C1.PRC_HNGR_BAR_TP_CD   ," ).append("\n"); 
		query.append("        C1.IO_GA_CD             ," ).append("\n"); 
		query.append("        C1.MIN_CGO_WGT          ," ).append("\n"); 
		query.append("        C1.MAX_CGO_WGT          ," ).append("\n"); 
		query.append("        C1.RT_APPL_TP_CD        ," ).append("\n"); 
		query.append("        C1.RT_OP_CD             ," ).append("\n"); 
		query.append("        C1.CURR_CD              ," ).append("\n"); 
		query.append("        C1.FRT_RT_AMT           ," ).append("\n"); 
		query.append("        C1.CALC_FRT_RT_AMT      ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN  C1.FRT_RT_AMT <> C1.CALC_FRT_RT_AMT" ).append("\n"); 
		query.append("          THEN  CASE" ).append("\n"); 
		query.append("                WHEN C1.SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' ) AND C1.CHG_CD IN ( 'BUC', 'FRC' )" ).append("\n"); 
		query.append("                  THEN ROUND(C1.CALC_FRT_RT_AMT)" ).append("\n"); 
		query.append("                WHEN C1.SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' )" ).append("\n"); 
		query.append("                  THEN TRUNC(C1.CALC_FRT_RT_AMT, -1) + CASE WHEN MOD(C1.CALC_FRT_RT_AMT, 10) < 2.5 THEN 0 WHEN MOD(C1.CALC_FRT_RT_AMT, 10) < 7.5 THEN 5 ELSE 10 END" ).append("\n"); 
		query.append("                ELSE ROUND(C1.CALC_FRT_RT_AMT, 2)" ).append("\n"); 
		query.append("                END" ).append("\n"); 
		query.append("        ELSE  C1.FRT_RT_AMT" ).append("\n"); 
		query.append("        END RND_FRT_RT_AMT      ," ).append("\n"); 
		query.append("        C1.TYP_BKG_CONV_TP_CD   ," ).append("\n"); 
		query.append("        C1.RAT_UT_CD            ," ).append("\n"); 
		query.append("        C1.PRC_CGO_TP_CD        ," ).append("\n"); 
		query.append("        C1.IMDG_CLSS_CD         ," ).append("\n"); 
		query.append("        C1.PAY_TERM_CD          ," ).append("\n"); 
		query.append("        C1.RT_INCL_FLG          ," ).append("\n"); 
		query.append("        C1.BKG_MST_HBL_TP_CD" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  C.OFT_CMB_SEQ         ," ).append("\n"); 
		query.append("                C.BQ_SEQ              ," ).append("\n"); 
		query.append("                C.BKG_BQ_SEQ          ," ).append("\n"); 
		query.append("                'C'                 SEL_TP_CD           ," ).append("\n"); 
		query.append("                1                   SEL_TP_PRIO         ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                ROW_NUMBER() OVER ( PARTITION BY C.OFT_CMB_SEQ, C.BQ_SEQ, C.NOTE_CONV_CHG_CD, NVL(C.MIN_CGO_WGT,0), NVL(C.MAX_CGO_WGT,0), C.PRC_HNGR_BAR_TP_CD" ).append("\n"); 
		query.append("                                    ORDER BY" ).append("\n"); 
		query.append("                                      ( SELECT A.PRIO_SEQ FROM PRI_NOTE_CONV_TP A WHERE A.PRC_CTRT_TP_CD = BQ.CTRT_TP_CD AND A.NOTE_CONV_TP_CD = C.NOTE_CONV_TP_CD )  ," ).append("\n"); 
		query.append("                                      C.MTCH_PRIO DESC  ," ).append("\n"); 
		query.append("                                      DECODE(C_TYP.BKG_CONV_TP_CD, 'B', 10, 'C', 0)" ).append("\n"); 
		query.append("                                      + DECODE(C.BKG_RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, 'PC', 4, 'CM', 4, 'MT', 4, 'RM', 4, NULL, 4, 6) DESC" ).append("\n"); 
		query.append("                                  ) ROW_NUMBER          ," ).append("\n"); 
		query.append("                C.NOTE_CONV_CHG_CD  CHG_CD              ," ).append("\n"); 
		query.append("                C.SOC_USE_FLG                           ," ).append("\n"); 
		query.append("                C.HNGR_BAR_USE_FLG                      ," ).append("\n"); 
		query.append("                'N'                 IO_GA_USE_FLG       ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN NVL(TO_NUMBER(C.MIN_CGO_WGT), 0) <> 0 OR NVL(TO_NUMBER(C.MAX_CGO_WGT), 0) <> 0" ).append("\n"); 
		query.append("                  THEN  'Y'" ).append("\n"); 
		query.append("                ELSE    'N'" ).append("\n"); 
		query.append("                END                 CGO_WGT_USE_FLG     ," ).append("\n"); 
		query.append("                C.PRC_HNGR_BAR_TP_CD                    ," ).append("\n"); 
		query.append("                NULL                IO_GA_CD            ," ).append("\n"); 
		query.append("                TO_NUMBER(C.MIN_CGO_WGT)  MIN_CGO_WGT   ," ).append("\n"); 
		query.append("                TO_NUMBER(C.MAX_CGO_WGT)  MAX_CGO_WGT   ," ).append("\n"); 
		query.append("                C.RT_APPL_TP_CD                         ," ).append("\n"); 
		query.append("                C.RT_OP_CD                              ," ).append("\n"); 
		query.append("                C.CURR_CD                               ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                C.FRT_RT_AMT                            ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN C_TYP.BKG_CONV_TP_CD = 'C' AND C_TYP.RT_OP_CD = '+'" ).append("\n"); 
		query.append("                  THEN  C.FRT_RT_AMT + C_TYP.FRT_RT_AMT" ).append("\n"); 
		query.append("                WHEN C_TYP.BKG_CONV_TP_CD = 'C' AND C_TYP.RT_OP_CD = '-'" ).append("\n"); 
		query.append("                  THEN  C.FRT_RT_AMT - C_TYP.FRT_RT_AMT" ).append("\n"); 
		query.append("                WHEN C_TYP.BKG_CONV_TP_CD = 'C' AND C_TYP.RT_OP_CD = '*'" ).append("\n"); 
		query.append("                  THEN  C.FRT_RT_AMT * C_TYP.FRT_RT_AMT" ).append("\n"); 
		query.append("                WHEN C_TYP.BKG_CONV_TP_CD = 'C' AND C_TYP.RT_OP_CD = '/'" ).append("\n"); 
		query.append("                  THEN  C.FRT_RT_AMT / C_TYP.FRT_RT_AMT" ).append("\n"); 
		query.append("                ELSE  C.FRT_RT_AMT" ).append("\n"); 
		query.append("                END CALC_FRT_RT_AMT                     ," ).append("\n"); 
		query.append("                BQ.SVC_SCP_CD                           ," ).append("\n"); 
		query.append("                BQ.BKG_SVC_SCP_CD                       ," ).append("\n"); 
		query.append("                C_TYP.BKG_CONV_TP_CD  TYP_BKG_CONV_TP_CD," ).append("\n"); 
		query.append("                C.BKG_RAT_UT_CD       RAT_UT_CD         ," ).append("\n"); 
		query.append("                C.BKG_PRC_CGO_TP_CD   PRC_CGO_TP_CD     ," ).append("\n"); 
		query.append("                C.BKG_IMDG_CLSS_CD    IMDG_CLSS_CD      ," ).append("\n"); 
		query.append("                C.PAY_TERM_CD                           ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN  C_NOT.RT_APPL_TP_CD = 'I' AND C.NOTE_CONV_CHG_CD NOT IN ( 'WHF', 'AST', 'GST', 'VDT', 'VTT', 'GRI', 'OAR', 'DAR', 'OIH', 'DIH' )" ).append("\n"); 
		query.append("                  THEN  'Y'" ).append("\n"); 
		query.append("                ELSE  DECODE(C.RT_APPL_TP_CD, 'I', 'Y', 'N')" ).append("\n"); 
		query.append("                END RT_INCL_FLG                         ," ).append("\n"); 
		query.append("                DECODE(C_NOT.BKG_CONV_TP_CD, 'C', 'Y', 'N') NOT_RULE_FLG  ," ).append("\n"); 
		query.append("                C.BKG_MST_HBL_TP_CD" ).append("\n"); 
		query.append("        FROM    BQ          ," ).append("\n"); 
		query.append("                NC_P  C     ," ).append("\n"); 
		query.append("                NC_P  C_TYP ," ).append("\n"); 
		query.append("                NC_P  C_NOT" ).append("\n"); 
		query.append("        WHERE   C.OFT_CMB_SEQ               = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     C.BQ_SEQ                    = BQ.BQ_SEQ" ).append("\n"); 
		query.append("        AND     C.CHG_RULE_TP_CD            = 'C'" ).append("\n"); 
		query.append("        AND     C_TYP.OFT_CMB_SEQ           = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     C_TYP.BQ_SEQ                = BQ.BQ_SEQ" ).append("\n"); 
		query.append("        AND     C_TYP.NOTE_CONV_RULE_CD     = 'TYP'" ).append("\n"); 
		query.append("        AND     C_NOT.OFT_CMB_SEQ(+)        = C.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     C_NOT.BQ_SEQ(+)             = C.BQ_SEQ" ).append("\n"); 
		query.append("        AND     C_NOT.NOTE_CONV_RULE_CD(+)  = 'NOT'" ).append("\n"); 
		query.append("        AND     C_NOT.CONV_TP_PRIO(+)       < C.CONV_TP_PRIO" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        /* RATING UNIT */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                        C.BKG_RAT_UT_CD IS NULL" ).append("\n"); 
		query.append("                    OR  C.BKG_RAT_UT_CD = C_TYP.CONV_RAT_UT_CD" ).append("\n"); 
		query.append("                    OR  C.BKG_RAT_UT_CD IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )" ).append("\n"); 
		query.append("                    OR" ).append("\n"); 
		query.append("                    (" ).append("\n"); 
		query.append("                        C.BKG_RAT_UT_CD IN ( '20', '40', 'HC', '45', '53' )" ).append("\n"); 
		query.append("                    AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = C.BKG_RAT_UT_CD ) = C_TYP.CONV_RAT_UT_SZ_CD" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        ) C1  ," ).append("\n"); 
		query.append("        PRI_SCG_PRF SP" ).append("\n"); 
		query.append("WHERE   SP.SVC_SCP_CD(+)  = C1.BKG_SVC_SCP_CD   /* BKG_SVC_SCP_CD 를 사용한다. */" ).append("\n"); 
		query.append("AND     SP.CHG_CD(+)      = C1.CHG_CD" ).append("\n"); 
		query.append("AND     C1.ROW_NUMBER     = 1" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("NOT RULE 적용" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     NOT (" ).append("\n"); 
		query.append("                C1.NOT_RULE_FLG  = 'Y'" ).append("\n"); 
		query.append("            AND C1.RT_INCL_FLG   = 'N'" ).append("\n"); 
		query.append("            AND C1.CHG_CD        NOT IN ( 'WHF', 'AST', 'GST', 'VDT', 'VTT', 'GRI', 'OAR', 'DAR', 'OIH', 'DIH' )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("G2 AS (" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< GOH >" ).append("\n"); 
		query.append("BAR TYPE 별 ROW 구분 있음." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("TYPE RULE CODE 가 적용되기는 하지만, 운임 계산은 하지 않고, 계약서에 있는 운임을 그대로 사용한다." ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("- BKG Special Cargo 정보 중 Hanger 정보가 있고, S/C상에 해당하는 GOH 운임이 존재하는 경우 Rating" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  OFT_CMB_SEQ         ," ).append("\n"); 
		query.append("        BQ_SEQ              ," ).append("\n"); 
		query.append("        BKG_BQ_SEQ          ," ).append("\n"); 
		query.append("        SEL_TP_CD           ," ).append("\n"); 
		query.append("        SEL_TP_PRIO         ," ).append("\n"); 
		query.append("        CHG_CD              ," ).append("\n"); 
		query.append("        FLT_PCT_TP_CD       ," ).append("\n"); 
		query.append("        PCT_BSE_CD          ," ).append("\n"); 
		query.append("        SOC_USE_FLG         ," ).append("\n"); 
		query.append("        HNGR_BAR_USE_FLG    ," ).append("\n"); 
		query.append("        IO_GA_USE_FLG       ," ).append("\n"); 
		query.append("        CGO_WGT_USE_FLG     ," ).append("\n"); 
		query.append("        PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("        IO_GA_CD            ," ).append("\n"); 
		query.append("        MIN_CGO_WGT         ," ).append("\n"); 
		query.append("        MAX_CGO_WGT         ," ).append("\n"); 
		query.append("        RT_APPL_TP_CD       ," ).append("\n"); 
		query.append("        RT_OP_CD            ," ).append("\n"); 
		query.append("        CURR_CD             ," ).append("\n"); 
		query.append("        FRT_RT_AMT          ," ).append("\n"); 
		query.append("        TYP_BKG_CONV_TP_CD  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("TYP CONVERSION 이 적용된 경우라도, 금액 계산은 발생하지 않는다. ( 임으로 '+ 0' 으로 처리 )" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        '+' TYP_RT_OP_CD    ," ).append("\n"); 
		query.append("        0   TYP_FRT_RT_AMT  ," ).append("\n"); 
		query.append("        RAT_UT_CD           ," ).append("\n"); 
		query.append("        PRC_CGO_TP_CD       ," ).append("\n"); 
		query.append("        IMDG_CLSS_CD        ," ).append("\n"); 
		query.append("        PAY_TERM_CD         ," ).append("\n"); 
		query.append("        RT_INCL_FLG         ," ).append("\n"); 
		query.append("        NOT_RULE_FLG        ," ).append("\n"); 
		query.append("        NULL  BKG_MST_HBL_TP_CD ," ).append("\n"); 
		query.append("        NOTE_RT_APPL_TP_CD" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  BQ.OFT_CMB_SEQ            ," ).append("\n"); 
		query.append("                BQ.BQ_SEQ                 ," ).append("\n"); 
		query.append("                BQ.BKG_BQ_SEQ             ," ).append("\n"); 
		query.append("                'G'   SEL_TP_CD           ," ).append("\n"); 
		query.append("                2     SEL_TP_PRIO         ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, GH.PRC_HNGR_BAR_TP_CD" ).append("\n"); 
		query.append("                                    ORDER BY" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("ADJUST 인 경우 최우선으로 적용한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                      NVL(  (" ).append("\n"); 
		query.append("                                            SELECT  '1'" ).append("\n"); 
		query.append("                                            FROM    C1" ).append("\n"); 
		query.append("                                            WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                                            AND     C1.BQ_SEQ         = BQ.BQ_SEQ" ).append("\n"); 
		query.append("                                            AND     C1.CHG_CD         = 'GOH'" ).append("\n"); 
		query.append("                                            AND     C1.RT_APPL_TP_CD  = 'A'" ).append("\n"); 
		query.append("                                            AND     (" ).append("\n"); 
		query.append("                                                        NVL(C1.RAT_UT_CD, 'BX') IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )" ).append("\n"); 
		query.append("                                                    OR  GH.RAT_UT_CD            IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )" ).append("\n"); 
		query.append("                                                    OR  C1.RAT_UT_CD            = GH.RAT_UT_CD" ).append("\n"); 
		query.append("                                                    OR  ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = C1.RAT_UT_CD )  = ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = GH.RAT_UT_CD )" ).append("\n"); 
		query.append("                                                    )" ).append("\n"); 
		query.append("                                            AND     ROWNUM            = 1" ).append("\n"); 
		query.append("                                            ), '2') ," ).append("\n"); 
		query.append("                                      DECODE(C_TYP.BKG_CONV_TP_CD, 'B', 2000, 'C', 1000, 0)" ).append("\n"); 
		query.append("                                        + DECODE(GH.ROUT_PNT_LOC_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                        + DECODE(GH.RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BX', 4, 'BL', 3, NULL, 0, 6) DESC" ).append("\n"); 
		query.append("                                  ) ROW_NUMBER  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                'GOH' CHG_CD              ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                NULL  FLT_PCT_TP_CD       ," ).append("\n"); 
		query.append("                NULL  PCT_BSE_CD          ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                'N'   SOC_USE_FLG         ," ).append("\n"); 
		query.append("                'Y'   HNGR_BAR_USE_FLG    ," ).append("\n"); 
		query.append("                'N'   IO_GA_USE_FLG       ," ).append("\n"); 
		query.append("                'N'   CGO_WGT_USE_FLG     ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                GH.PRC_HNGR_BAR_TP_CD     ," ).append("\n"); 
		query.append("                NULL  IO_GA_CD            ," ).append("\n"); 
		query.append("                NULL  MIN_CGO_WGT         ," ).append("\n"); 
		query.append("                NULL  MAX_CGO_WGT         ," ).append("\n"); 
		query.append("                NULL  RT_APPL_TP_CD       ," ).append("\n"); 
		query.append("                NULL  RT_OP_CD            ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                GH.CURR_CD                ," ).append("\n"); 
		query.append("                GH.FNL_FRT_RT_AMT   FRT_RT_AMT  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                C_TYP.BKG_CONV_TP_CD  TYP_BKG_CONV_TP_CD  ," ).append("\n"); 
		query.append("                GH.RAT_UT_CD              ," ).append("\n"); 
		query.append("                NULL  PRC_CGO_TP_CD       ," ).append("\n"); 
		query.append("                NULL  IMDG_CLSS_CD        ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                ( SELECT A.CHG_APLY_AREA_CD FROM MDM_CHARGE A WHERE A.CHG_CD = 'GOH' ) PAY_TERM_CD  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                'N'   RT_INCL_FLG         ," ).append("\n"); 
		query.append("                'N'   NOT_RULE_FLG        ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  C1.RT_APPL_TP_CD" ).append("\n"); 
		query.append("                FROM    C1" ).append("\n"); 
		query.append("                WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                AND     C1.BQ_SEQ         = BQ.BQ_SEQ" ).append("\n"); 
		query.append("                AND     C1.CHG_CD         = 'GOH'" ).append("\n"); 
		query.append("                AND     (" ).append("\n"); 
		query.append("                            NVL(C1.RAT_UT_CD, 'BX') IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )" ).append("\n"); 
		query.append("                        OR  GH.RAT_UT_CD            IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )" ).append("\n"); 
		query.append("                        OR  C1.RAT_UT_CD            = GH.RAT_UT_CD" ).append("\n"); 
		query.append("                        OR  ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = C1.RAT_UT_CD )  = ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = GH.RAT_UT_CD )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                AND     ROWNUM            = 1" ).append("\n"); 
		query.append("                ) NOTE_RT_APPL_TP_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        FROM    BQ                        ," ).append("\n"); 
		query.append("                PRI_SP_SCP_GOH_CHG  GH    ," ).append("\n"); 
		query.append("                NC_P                C_TYP" ).append("\n"); 
		query.append("        WHERE   GH.PROP_NO              = BQ.PROP_NO" ).append("\n"); 
		query.append("        AND     GH.AMDT_SEQ             = BQ.AMDT_SEQ" ).append("\n"); 
		query.append("        AND     GH.SVC_SCP_CD           = BQ.SVC_SCP_CD" ).append("\n"); 
		query.append("        AND     C_TYP.OFT_CMB_SEQ       = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     C_TYP.BQ_SEQ            = BQ.BQ_SEQ" ).append("\n"); 
		query.append("        AND     C_TYP.NOTE_CONV_RULE_CD = 'TYP'" ).append("\n"); 
		query.append("        /* POR */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    GH.ROUT_PNT_LOC_DEF_CD = DECODE(GH.ROUT_PNT_LOC_TP_CD, 'L', BQ.POR_CD, 'T', BQ.POR_STE_CD, 'R', BQ.POR_RGN_CD, 'C', BQ.POR_CNT_CD)" ).append("\n"); 
		query.append("                OR  (" ).append("\n"); 
		query.append("                        GH.ROUT_PNT_LOC_TP_CD = 'G'" ).append("\n"); 
		query.append("                    AND EXISTS  (" ).append("\n"); 
		query.append("                                SELECT  'X'" ).append("\n"); 
		query.append("                                FROM    GL" ).append("\n"); 
		query.append("                                WHERE   GL.PRC_GRP_LOC_CD = GH.ROUT_PNT_LOC_DEF_CD" ).append("\n"); 
		query.append("                                AND     GL.LOC_CD         = BQ.POR_CD" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* RATING UNIT */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                        GH.RAT_UT_CD  = C_TYP.CONV_RAT_UT_CD" ).append("\n"); 
		query.append("                    OR  GH.RAT_UT_CD  IN ( 'BX', 'BL' )" ).append("\n"); 
		query.append("                    OR" ).append("\n"); 
		query.append("                    (" ).append("\n"); 
		query.append("                        GH.RAT_UT_CD  IN ( '20', '40', 'HC', '45', '53' )" ).append("\n"); 
		query.append("                    AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = GH.RAT_UT_CD )  = C_TYP.CONV_RAT_UT_SZ_CD" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< RT_APPL_TP_CD = 'N' (Not Applicable) >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("        AND     NOT EXISTS  (" ).append("\n"); 
		query.append("                            SELECT  'X'" ).append("\n"); 
		query.append("                            FROM    C1" ).append("\n"); 
		query.append("                            WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                            AND     C1.BQ_SEQ         = BQ.BQ_SEQ" ).append("\n"); 
		query.append("                            AND     C1.CHG_CD         = 'GOH'" ).append("\n"); 
		query.append("                            AND     C1.RT_APPL_TP_CD  = 'N'" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("WHERE   ROW_NUMBER    = 1" ).append("\n"); 
		query.append("AND     @[ctrt_tp_cd] = 'S'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("S3 AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< TARIFF SURCHARGE >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  OFT_CMB_SEQ         ," ).append("\n"); 
		query.append("        BQ_SEQ              ," ).append("\n"); 
		query.append("        BKG_BQ_SEQ          ," ).append("\n"); 
		query.append("        SEL_TP_CD           ," ).append("\n"); 
		query.append("        SEL_TP_PRIO         ," ).append("\n"); 
		query.append("        CHG_CD              ," ).append("\n"); 
		query.append("        FLT_PCT_TP_CD       ," ).append("\n"); 
		query.append("        PCT_BSE_CD          ," ).append("\n"); 
		query.append("        SOC_USE_FLG         ," ).append("\n"); 
		query.append("        HNGR_BAR_USE_FLG    ," ).append("\n"); 
		query.append("        IO_GA_USE_FLG       ," ).append("\n"); 
		query.append("        CGO_WGT_USE_FLG     ," ).append("\n"); 
		query.append("        PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("        IO_GA_CD            ," ).append("\n"); 
		query.append("        TO_NUMBER(MIN_CGO_WGT)  MIN_CGO_WGT ," ).append("\n"); 
		query.append("        TO_NUMBER(MAX_CGO_WGT)  MAX_CGO_WGT ," ).append("\n"); 
		query.append("        RT_APPL_TP_CD       ," ).append("\n"); 
		query.append("        RT_OP_CD            ," ).append("\n"); 
		query.append("        CURR_CD             ," ).append("\n"); 
		query.append("        FRT_RT_AMT          ," ).append("\n"); 
		query.append("        TYP_BKG_CONV_TP_CD  ," ).append("\n"); 
		query.append("        TYP_RT_OP_CD        ," ).append("\n"); 
		query.append("        TYP_FRT_RT_AMT      ," ).append("\n"); 
		query.append("        RAT_UT_CD           ," ).append("\n"); 
		query.append("        PRC_CGO_TP_CD       ," ).append("\n"); 
		query.append("        IMDG_CLSS_CD        ," ).append("\n"); 
		query.append("        PAY_TERM_CD         ," ).append("\n"); 
		query.append("        RT_INCL_FLG         ," ).append("\n"); 
		query.append("        NOT_RULE_FLG        ," ).append("\n"); 
		query.append("        NULL  BKG_MST_HBL_TP_CD ," ).append("\n"); 
		query.append("        NOTE_RT_APPL_TP_CD" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  BQ.OFT_CMB_SEQ            ," ).append("\n"); 
		query.append("                BQ.BQ_SEQ                 ," ).append("\n"); 
		query.append("                BQ.BKG_BQ_SEQ             ," ).append("\n"); 
		query.append("                'S'   SEL_TP_CD           ," ).append("\n"); 
		query.append("                3     SEL_TP_PRIO         ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, SP.CHG_CD," ).append("\n"); 
		query.append("                                      DECODE(SP.HNGR_BAR_USE_FLG, 'N', NULL, SR.PRC_HNGR_BAR_TP_CD) ," ).append("\n"); 
		query.append("                                      DECODE(SP.IO_GA_USE_FLG   , 'N', NULL, SR.IO_GA_CD          ) ," ).append("\n"); 
		query.append("                                      DECODE(SP.CGO_WGT_USE_FLG , 'N', NULL, SR.MIN_CGO_WGT       ) ," ).append("\n"); 
		query.append("                                      DECODE(SP.CGO_WGT_USE_FLG , 'N', NULL, SR.MAX_CGO_WGT       ) ," ).append("\n"); 
		query.append("                                      DECODE(SP.CHG_CD, 'CFR', SR.RAT_UT_CD, 'CFD', SR.RAT_UT_CD, NULL)" ).append("\n"); 
		query.append("                                    ORDER BY" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("ADJUST 인 경우 최우선으로 적용한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                      NVL(  (" ).append("\n"); 
		query.append("                                            SELECT  '1'" ).append("\n"); 
		query.append("                                            FROM    C1" ).append("\n"); 
		query.append("                                            WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                                            AND     C1.BQ_SEQ         = BQ.BQ_SEQ" ).append("\n"); 
		query.append("                                            AND     C1.CHG_CD         = SP.CHG_CD" ).append("\n"); 
		query.append("                                            AND     C1.RT_APPL_TP_CD  = 'A'" ).append("\n"); 
		query.append("                                            AND     (" ).append("\n"); 
		query.append("                                                        NVL(C1.RAT_UT_CD, 'BX') IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )" ).append("\n"); 
		query.append("                                                    OR  SR.RAT_UT_CD            IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )" ).append("\n"); 
		query.append("                                                    OR  C1.RAT_UT_CD            = SR.RAT_UT_CD" ).append("\n"); 
		query.append("                                                    OR  ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = C1.RAT_UT_CD )  = ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = SR.RAT_UT_CD )" ).append("\n"); 
		query.append("                                                    )" ).append("\n"); 
		query.append("                                            AND     ROWNUM            = 1" ).append("\n"); 
		query.append("                                            ), '2') ," ).append("\n"); 
		query.append("                                      GREATEST(DECODE(SR.CMDT_CD, NULL, 0, 600), DECODE(SR.SCG_GRP_CMDT_CD, NULL, 0, 500))" ).append("\n"); 
		query.append("                                        + DECODE(SR.POR_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                        + DECODE(SR.POL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                        + DECODE(SR.POD_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                        + DECODE(SR.DEL_TP_CD, 'L', 600, 'G', 500, 'T', 400, 'R', 300, 'C', 200, 0)" ).append("\n"); 
		query.append("                                        + DECODE(C_TYP.BKG_CONV_TP_CD, 'B', 10, 'C', 0)" ).append("\n"); 
		query.append("                                        + DECODE(SR.RAT_UT_CD, '20', 5, '40', 5, 'HC', 5, '45', 5, '53', 5, 'BL', 4, 'BX', 4, 'PC', 4, 'CM', 4, 'MT', 4, 'RM', 4, NULL, 4, 6)" ).append("\n"); 
		query.append("                                        + DECODE(SR.PRC_CGO_TP_CD       , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.SCG_IMDG_CLSS_CD    , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.USA_SVC_MOD_CD      , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.ORG_TRSP_MOD_CD     , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.DEST_TRSP_MOD_CD    , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.PRC_RCV_TERM_CD     , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.PRC_DE_TERM_CD      , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.VSL_SLAN_CD         , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.SOC_FLG             , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.TS_PORT_CD          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.DIR_CALL_FLG        , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.SUB_TRD_CD          , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.PRC_HNGR_BAR_TP_CD  , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.IO_GA_CD            , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.MIN_CGO_WGT         , NULL, 0, 1)" ).append("\n"); 
		query.append("                                        + DECODE(SR.MAX_CGO_WGT         , NULL, 0, 1) DESC  ," ).append("\n"); 
		query.append("                                      DECODE(SR.PAY_TERM_CD, BQ.FRT_TERM_CD, 1, 'O', 2, 3)" ).append("\n"); 
		query.append("                                  ) ROW_NUMBER  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SP.CHG_CD                 ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SP.FLT_PCT_TP_CD          ," ).append("\n"); 
		query.append("                SP.PCT_BSE_CD             ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SP.SOC_USE_FLG            ," ).append("\n"); 
		query.append("                SP.HNGR_BAR_USE_FLG       ," ).append("\n"); 
		query.append("                SP.IO_GA_USE_FLG          ," ).append("\n"); 
		query.append("                SP.CGO_WGT_USE_FLG        ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                DECODE(SP.HNGR_BAR_USE_FLG, 'N', NULL, SR.PRC_HNGR_BAR_TP_CD) PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("                DECODE(SP.IO_GA_USE_FLG   , 'N', NULL, SR.IO_GA_CD          ) IO_GA_CD            ," ).append("\n"); 
		query.append("                DECODE(SP.CGO_WGT_USE_FLG , 'N', NULL, SR.MIN_CGO_WGT       ) MIN_CGO_WGT         ," ).append("\n"); 
		query.append("                DECODE(SP.CGO_WGT_USE_FLG , 'N', NULL, SR.MAX_CGO_WGT       ) MAX_CGO_WGT         ," ).append("\n"); 
		query.append("                NULL  RT_APPL_TP_CD       ," ).append("\n"); 
		query.append("                NULL  RT_OP_CD            ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SR.CURR_CD                ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SR.SCG_AMT  FRT_RT_AMT    ," ).append("\n"); 
		query.append("                BQ.SVC_SCP_CD             ," ).append("\n"); 
		query.append("                C_TYP.BKG_CONV_TP_CD  TYP_BKG_CONV_TP_CD  ," ).append("\n"); 
		query.append("                C_TYP.RT_OP_CD        TYP_RT_OP_CD        ," ).append("\n"); 
		query.append("                C_TYP.FRT_RT_AMT      TYP_FRT_RT_AMT      ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SR.RAT_UT_CD              ," ).append("\n"); 
		query.append("                SR.PRC_CGO_TP_CD          ," ).append("\n"); 
		query.append("                DECODE(SP.IMDG_CLSS_USE_FLG , 'N', NULL, SR.SCG_IMDG_CLSS_CD) IMDG_CLSS_CD  ," ).append("\n"); 
		query.append("                NVL(SR.PAY_TERM_CD, MC.CHG_APLY_AREA_CD)  PAY_TERM_CD ,   -- 'P', 'C', 'O'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN  C_NOT.RT_APPL_TP_CD = 'I' AND SP.CHG_CD NOT IN ( 'WHF', 'AST', 'GST', 'VDT', 'VTT', 'GRI', 'OAR', 'DAR', 'OIH', 'DIH' )" ).append("\n"); 
		query.append("                  THEN  'Y'" ).append("\n"); 
		query.append("                ELSE  'N'" ).append("\n"); 
		query.append("                END RT_INCL_FLG       ," ).append("\n"); 
		query.append("                DECODE(C_NOT.BKG_CONV_TP_CD, 'C', 'Y', 'N') NOT_RULE_FLG  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  C1.RT_APPL_TP_CD" ).append("\n"); 
		query.append("                FROM    C1" ).append("\n"); 
		query.append("                WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                AND     C1.BQ_SEQ         = BQ.BQ_SEQ" ).append("\n"); 
		query.append("                AND     C1.CHG_CD         = SP.CHG_CD" ).append("\n"); 
		query.append("                AND     (" ).append("\n"); 
		query.append("                            NVL(C1.RAT_UT_CD, 'BX') IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )" ).append("\n"); 
		query.append("                        OR  SR.RAT_UT_CD            IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )" ).append("\n"); 
		query.append("                        OR  C1.RAT_UT_CD            = SR.RAT_UT_CD" ).append("\n"); 
		query.append("                        OR  ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = C1.RAT_UT_CD )  = ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = SR.RAT_UT_CD )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                AND     ROWNUM            = 1" ).append("\n"); 
		query.append("                ) NOTE_RT_APPL_TP_CD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        FROM    BQ                  ," ).append("\n"); 
		query.append("                PRI_SCG_PRF   SP    ," ).append("\n"); 
		query.append("                MDM_CHARGE    MC    ," ).append("\n"); 
		query.append("                PRI_SCG_RT    SR    ," ).append("\n"); 
		query.append("                NC_P          C_TYP ,         /* RATING UNIT CONVERSION */" ).append("\n"); 
		query.append("                NC_P          C_NOT" ).append("\n"); 
		query.append("        WHERE   SP.SVC_SCP_CD               = BQ.BKG_SVC_SCP_CD   /* BKG_SVC_SCP_CD 를 사용한다. */" ).append("\n"); 
		query.append("        AND     MC.CHG_CD                   = SP.CHG_CD" ).append("\n"); 
		query.append("        AND     MC.AUTO_RAT_FLG             = 'Y'" ).append("\n"); 
		query.append("        AND     SR.SVC_SCP_CD               = SP.SVC_SCP_CD" ).append("\n"); 
		query.append("        AND     SR.CHG_CD                   = SP.CHG_CD" ).append("\n"); 
		query.append("        AND     BQ.RT_APLY_DT               BETWEEN SR.EFF_DT AND SR.EXP_DT + 0.99999   /* 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("        AND     SR.WDR_FLG                  = 'N'" ).append("\n"); 
		query.append("        AND     SR.DELT_FLG                 = 'N'" ).append("\n"); 
		query.append("        AND     C_TYP.OFT_CMB_SEQ           = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     C_TYP.BQ_SEQ                = BQ.BQ_SEQ" ).append("\n"); 
		query.append("        AND     C_TYP.NOTE_CONV_RULE_CD     = 'TYP'" ).append("\n"); 
		query.append("        AND     C_NOT.OFT_CMB_SEQ(+)        = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     C_NOT.BQ_SEQ(+)             = BQ.BQ_SEQ" ).append("\n"); 
		query.append("        AND     C_NOT.NOTE_CONV_RULE_CD(+)  = 'NOT'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("R/D TERM CHECK ( MDM_CHARGE 의 R/D TERM CHECK 포함 )" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SR.PRC_RCV_TERM_CD  = BQ.RCV_TERM_CD" ).append("\n"); 
		query.append("                OR  (" ).append("\n"); 
		query.append("                        ( SP.RCV_DE_TERM_USE_FLG = 'N' OR SR.PRC_RCV_TERM_CD IS NULL )" ).append("\n"); 
		query.append("                    AND (" ).append("\n"); 
		query.append("                            MC.CHG_APLY_AREA_CD = 'C'" ).append("\n"); 
		query.append("                        OR  BQ.RCV_TERM_CD  IN ( DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.RCV_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SR.PRC_DE_TERM_CD   = BQ.DE_TERM_CD" ).append("\n"); 
		query.append("                OR  (" ).append("\n"); 
		query.append("                        ( SP.RCV_DE_TERM_USE_FLG = 'N' OR SR.PRC_DE_TERM_CD IS NULL )" ).append("\n"); 
		query.append("                    AND (" ).append("\n"); 
		query.append("                            MC.CHG_APLY_AREA_CD = 'P'" ).append("\n"); 
		query.append("                        OR  BQ.DE_TERM_CD   IN ( DECODE(MC.NA_RD_TERM_FLG, 'Y', BQ.DE_TERM_CD), DECODE(MC.CY_RD_TERM_FLG, 'Y', 'Y'), DECODE(MC.DOR_RD_TERM_FLG, 'Y', 'D'), DECODE(MC.CFS_RD_TERM_FLG, 'Y', 'S'), DECODE(MC.TKL_TML_FLG, 'Y', 'T') )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        /* POR */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.POR_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                OR  SR.POR_DEF_CD   IS NULL" ).append("\n"); 
		query.append("                OR  SR.POR_DEF_CD   = DECODE(SR.POR_TP_CD, 'L', BQ.POR_CD, 'T', BQ.POR_STE_CD, 'R', BQ.POR_RGN_CD, 'C', BQ.POR_CNT_CD)" ).append("\n"); 
		query.append("                OR  (" ).append("\n"); 
		query.append("                        SR.POR_TP_CD  = 'G'" ).append("\n"); 
		query.append("                    AND EXISTS  (" ).append("\n"); 
		query.append("                                SELECT  'X'" ).append("\n"); 
		query.append("                                FROM    PRI_SCG_GRP_LOC     GL  ," ).append("\n"); 
		query.append("                                        PRI_SCG_GRP_LOC_DTL GD" ).append("\n"); 
		query.append("                                WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD" ).append("\n"); 
		query.append("                                AND     GD.CHG_CD         = GL.CHG_CD" ).append("\n"); 
		query.append("                                AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ" ).append("\n"); 
		query.append("                                AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD" ).append("\n"); 
		query.append("                                AND     GL.CHG_CD         = SR.CHG_CD" ).append("\n"); 
		query.append("                                AND     GL.SCG_GRP_LOC_CD = SR.POR_DEF_CD" ).append("\n"); 
		query.append("                                AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', BQ.POR_CD, 'T', BQ.POR_STE_CD, 'R', BQ.POR_RGN_CD, 'C', BQ.POR_CNT_CD)" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* POL */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.POL_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                OR  SR.POL_DEF_CD   IS NULL" ).append("\n"); 
		query.append("                OR  SR.POL_DEF_CD   = DECODE(SR.POL_TP_CD, 'L', BQ.POL_CD, 'T', BQ.POL_STE_CD, 'R', BQ.POL_RGN_CD, 'C', BQ.POL_CNT_CD)" ).append("\n"); 
		query.append("                OR  (" ).append("\n"); 
		query.append("                        SR.POL_TP_CD  = 'G'" ).append("\n"); 
		query.append("                    AND EXISTS  (" ).append("\n"); 
		query.append("                                SELECT  'X'" ).append("\n"); 
		query.append("                                FROM    PRI_SCG_GRP_LOC     GL  ," ).append("\n"); 
		query.append("                                        PRI_SCG_GRP_LOC_DTL GD" ).append("\n"); 
		query.append("                                WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD" ).append("\n"); 
		query.append("                                AND     GD.CHG_CD         = GL.CHG_CD" ).append("\n"); 
		query.append("                                AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ" ).append("\n"); 
		query.append("                                AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD" ).append("\n"); 
		query.append("                                AND     GL.CHG_CD         = SR.CHG_CD" ).append("\n"); 
		query.append("                                AND     GL.SCG_GRP_LOC_CD = SR.POL_DEF_CD" ).append("\n"); 
		query.append("                                AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', BQ.POL_CD, 'T', BQ.POL_STE_CD, 'R', BQ.POL_RGN_CD, 'C', BQ.POL_CNT_CD)" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* POD */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.POD_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                OR  SR.POD_DEF_CD   IS NULL" ).append("\n"); 
		query.append("                OR  SR.POD_DEF_CD   = DECODE(SR.POD_TP_CD, 'L', BQ.POD_CD, 'T', BQ.POD_STE_CD, 'R', BQ.POD_RGN_CD, 'C', BQ.POD_CNT_CD)" ).append("\n"); 
		query.append("                OR  (" ).append("\n"); 
		query.append("                        SR.POD_TP_CD  = 'G'" ).append("\n"); 
		query.append("                    AND EXISTS  (" ).append("\n"); 
		query.append("                                SELECT  'X'" ).append("\n"); 
		query.append("                                FROM    PRI_SCG_GRP_LOC     GL  ," ).append("\n"); 
		query.append("                                        PRI_SCG_GRP_LOC_DTL GD" ).append("\n"); 
		query.append("                                WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD" ).append("\n"); 
		query.append("                                AND     GD.CHG_CD         = GL.CHG_CD" ).append("\n"); 
		query.append("                                AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ" ).append("\n"); 
		query.append("                                AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD" ).append("\n"); 
		query.append("                                AND     GL.CHG_CD         = SR.CHG_CD" ).append("\n"); 
		query.append("                                AND     GL.SCG_GRP_LOC_CD = SR.POD_DEF_CD" ).append("\n"); 
		query.append("                                AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', BQ.POD_CD, 'T', BQ.POD_STE_CD, 'R', BQ.POD_RGN_CD, 'C', BQ.POD_CNT_CD)" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* DEL */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.DEL_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                OR  SR.DEL_DEF_CD   IS NULL" ).append("\n"); 
		query.append("                OR  SR.DEL_DEF_CD   = DECODE(SR.DEL_TP_CD, 'L', BQ.DEL_CD, 'T', BQ.DEL_STE_CD, 'R', BQ.DEL_RGN_CD, 'C', BQ.DEL_CNT_CD)" ).append("\n"); 
		query.append("                OR  (" ).append("\n"); 
		query.append("                        SR.DEL_TP_CD  = 'G'" ).append("\n"); 
		query.append("                    AND EXISTS  (" ).append("\n"); 
		query.append("                                SELECT  'X'" ).append("\n"); 
		query.append("                                FROM    PRI_SCG_GRP_LOC     GL  ," ).append("\n"); 
		query.append("                                        PRI_SCG_GRP_LOC_DTL GD" ).append("\n"); 
		query.append("                                WHERE   GD.SVC_SCP_CD     = GL.SVC_SCP_CD" ).append("\n"); 
		query.append("                                AND     GD.CHG_CD         = GL.CHG_CD" ).append("\n"); 
		query.append("                                AND     GD.GRP_LOC_SEQ    = GL.GRP_LOC_SEQ" ).append("\n"); 
		query.append("                                AND     GL.SVC_SCP_CD     = SR.SVC_SCP_CD" ).append("\n"); 
		query.append("                                AND     GL.CHG_CD         = SR.CHG_CD" ).append("\n"); 
		query.append("                                AND     GL.SCG_GRP_LOC_CD = SR.DEL_DEF_CD" ).append("\n"); 
		query.append("                                AND     GD.DTL_LOC_DEF_CD = DECODE(GD.DTL_LOC_TP_CD, 'L', BQ.DEL_CD, 'T', BQ.DEL_STE_CD, 'R', BQ.DEL_RGN_CD, 'C', BQ.DEL_CNT_CD)" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* SUB TRADE */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.SUB_TRD_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                OR  SR.SUB_TRD_CD       IS NULL" ).append("\n"); 
		query.append("                OR  SR.SUB_TRD_CD       IN" ).append("\n"); 
		query.append("                    (" ).append("\n"); 
		query.append("                    SELECT  DL.SUB_TRD_CD" ).append("\n"); 
		query.append("                    FROM    (" ).append("\n"); 
		query.append("                            SELECT  SLAN_CD     ," ).append("\n"); 
		query.append("                                    SKD_DIR_CD  ," ).append("\n"); 
		query.append("                                    ( SELECT A.CONTI_CD FROM MDM_LOCATION A WHERE A.LOC_CD = BV.POL_CD )  POL_CONTI_CD  ," ).append("\n"); 
		query.append("                                    ( SELECT A.CONTI_CD FROM MDM_LOCATION A WHERE A.LOC_CD = BV.POD_CD )  POD_CONTI_CD" ).append("\n"); 
		query.append("                            FROM    BK  ," ).append("\n"); 
		query.append("                                    BKG_VVD BV" ).append("\n"); 
		query.append("                            WHERE   BV.BKG_NO   = BK.BKG_NO" ).append("\n"); 
		query.append("                            AND     @[ca_flg]   = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                            UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                            SELECT  SLAN_CD     ," ).append("\n"); 
		query.append("                                    SKD_DIR_CD  ," ).append("\n"); 
		query.append("                                    ( SELECT A.CONTI_CD FROM MDM_LOCATION A WHERE A.LOC_CD = BV.POL_CD )  POL_CONTI_CD  ," ).append("\n"); 
		query.append("                                    ( SELECT A.CONTI_CD FROM MDM_LOCATION A WHERE A.LOC_CD = BV.POD_CD )  POD_CONTI_CD" ).append("\n"); 
		query.append("                            FROM    BK  ," ).append("\n"); 
		query.append("                                    BKG_VVD_HIS BV" ).append("\n"); 
		query.append("                            WHERE   BV.BKG_NO   = BK.BKG_NO" ).append("\n"); 
		query.append("                            AND     BV.CORR_NO  = BK.CORR_NO" ).append("\n"); 
		query.append("                            AND     @[ca_flg]   = 'Y'" ).append("\n"); 
		query.append("                            ) BV  ," ).append("\n"); 
		query.append("                            MDM_REV_LANE        RL  ," ).append("\n"); 
		query.append("                            MDM_DTL_REV_LANE    DL" ).append("\n"); 
		query.append("                    WHERE   RL.VSL_SLAN_CD      = BV.SLAN_CD" ).append("\n"); 
		query.append("                    AND     RL.DELT_FLG         = 'N'" ).append("\n"); 
		query.append("                    AND     DL.RLANE_CD         = RL.RLANE_CD" ).append("\n"); 
		query.append("                    AND     DL.VSL_SLAN_DIR_CD  = BV.SKD_DIR_CD" ).append("\n"); 
		query.append("                    AND     DL.FM_CONTI_CD      = BV.POL_CONTI_CD" ).append("\n"); 
		query.append("                    AND     DL.TO_CONTI_CD      = BV.POD_CONTI_CD" ).append("\n"); 
		query.append("                    AND     DL.DELT_FLG         = 'N'" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        /* LANE */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.SLAN_USE_FLG = 'N'" ).append("\n"); 
		query.append("                OR  SR.VSL_SLAN_CD  IS NULL" ).append("\n"); 
		query.append("                OR  EXISTS  (" ).append("\n"); 
		query.append("                            SELECT  'X'" ).append("\n"); 
		query.append("                            FROM    BKG_VVD BV" ).append("\n"); 
		query.append("                            WHERE   BV.BKG_NO   = BQ.BKG_NO" ).append("\n"); 
		query.append("                            AND     BV.SLAN_CD  = SR.VSL_SLAN_CD" ).append("\n"); 
		query.append("                            AND     @[ca_flg]   = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                            UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                            SELECT  'X'" ).append("\n"); 
		query.append("                            FROM    BKG_VVD_HIS BV" ).append("\n"); 
		query.append("                            WHERE   BV.BKG_NO   = BQ.BKG_NO" ).append("\n"); 
		query.append("                            AND     BV.CORR_NO  = BQ.CORR_NO" ).append("\n"); 
		query.append("                            AND     BV.SLAN_CD  = SR.VSL_SLAN_CD" ).append("\n"); 
		query.append("                            AND     @[ca_flg]   = 'Y'" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* T/S PORT */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.TS_PORT_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                OR  SR.TS_PORT_CD       IS NULL" ).append("\n"); 
		query.append("                OR  (" ).append("\n"); 
		query.append("                        EXISTS  (" ).append("\n"); 
		query.append("                                SELECT  'X'" ).append("\n"); 
		query.append("                                FROM    BKG_VVD BV" ).append("\n"); 
		query.append("                                WHERE   BV.BKG_NO = BQ.BKG_NO" ).append("\n"); 
		query.append("                                AND     BV.POL_CD = SR.TS_PORT_CD" ).append("\n"); 
		query.append("                                AND     @[ca_flg] = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                SELECT  'X'" ).append("\n"); 
		query.append("                                FROM    BKG_VVD_HIS BV" ).append("\n"); 
		query.append("                                WHERE   BV.BKG_NO   = BQ.BKG_NO" ).append("\n"); 
		query.append("                                AND     BV.CORR_NO  = BQ.CORR_NO" ).append("\n"); 
		query.append("                                AND     BV.POL_CD   = SR.TS_PORT_CD" ).append("\n"); 
		query.append("                                AND     @[ca_flg] = 'Y'" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                    AND EXISTS  (" ).append("\n"); 
		query.append("                                SELECT  'X'" ).append("\n"); 
		query.append("                                FROM    BKG_VVD BV" ).append("\n"); 
		query.append("                                WHERE   BV.BKG_NO = BQ.BKG_NO" ).append("\n"); 
		query.append("                                AND     BV.POD_CD = SR.TS_PORT_CD" ).append("\n"); 
		query.append("                                AND     @[ca_flg] = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                SELECT  'X'" ).append("\n"); 
		query.append("                                FROM    BKG_VVD_HIS BV" ).append("\n"); 
		query.append("                                WHERE   BV.BKG_NO   = BQ.BKG_NO" ).append("\n"); 
		query.append("                                AND     BV.CORR_NO  = BQ.CORR_NO" ).append("\n"); 
		query.append("                                AND     BV.POD_CD   = SR.TS_PORT_CD" ).append("\n"); 
		query.append("                                AND     @[ca_flg] = 'Y'" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* TERMINAL */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.TML_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                OR  SR.TML_CD       IS NULL" ).append("\n"); 
		query.append("                OR  SR.TML_CD       = BQ.POL_NOD_CD" ).append("\n"); 
		query.append("                OR  SR.TML_CD       = BQ.POD_NOD_CD" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* ORG TRANS MODE */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.TRNS_MOD_USE_FLG = 'N'" ).append("\n"); 
		query.append("                OR  SR.ORG_TRSP_MOD_CD  IS NULL" ).append("\n"); 
		query.append("                OR  NVL(SR.ORG_TRSP_MOD_CD, '*')  = NVL(BQ.ORG_TRNS_MOD_CD, '*')" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* DEST TRANS MODE */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.TRNS_MOD_USE_FLG = 'N'" ).append("\n"); 
		query.append("                OR  SR.DEST_TRSP_MOD_CD IS NULL" ).append("\n"); 
		query.append("                OR  NVL(SR.DEST_TRSP_MOD_CD, '*') = NVL(BQ.DEST_TRNS_MOD_CD, '*')" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* USA SVC MODE */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.USA_SVC_MOD_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                OR  SR.USA_SVC_MOD_CD       IS NULL" ).append("\n"); 
		query.append("                OR  SR.USA_SVC_MOD_CD       = DECODE(SR.USA_SVC_MOD_CD, 'CZ', BQ.CML_ZN_CD, BQ.USA_SVC_MOD_CD )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        /* DIR CALL */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.DIR_CALL_USE_FLG = 'N'" ).append("\n"); 
		query.append("                OR  SR.DIR_CALL_FLG     IS NULL" ).append("\n"); 
		query.append("                OR  SR.DIR_CALL_FLG     = BQ.DIR_CALL_FLG" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        /* COMMODITY */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.CMDT_USE_FLG   = 'N'" ).append("\n"); 
		query.append("                OR  SR.CMDT_CD        IS NULL" ).append("\n"); 
		query.append("                OR  SR.CMDT_CD        = BQ.CMDT_CD" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* SURCARGE GROUP COMMODITY ( GRI ) */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.GRI_CMDT_USE_FLG = 'N'" ).append("\n"); 
		query.append("                OR  SR.SCG_GRP_CMDT_CD  IS NULL" ).append("\n"); 
		query.append("                OR  EXISTS  (" ).append("\n"); 
		query.append("                            SELECT  'X'" ).append("\n"); 
		query.append("                            FROM    PRI_SCG_GRP_CMDT      GC  ," ).append("\n"); 
		query.append("                                    PRI_SCG_GRP_CMDT_DTL  GD" ).append("\n"); 
		query.append("                            WHERE   GD.SVC_SCP_CD       = GC.SVC_SCP_CD" ).append("\n"); 
		query.append("                            AND     GD.CHG_CD           = GC.CHG_CD" ).append("\n"); 
		query.append("                            AND     GD.SCG_GRP_CMDT_SEQ = GC.SCG_GRP_CMDT_SEQ" ).append("\n"); 
		query.append("                            AND     GC.SVC_SCP_CD       = SR.SVC_SCP_CD" ).append("\n"); 
		query.append("                            AND     GC.CHG_CD           = SR.CHG_CD" ).append("\n"); 
		query.append("                            AND     GC.SCG_GRP_CMDT_CD  = SR.SCG_GRP_CMDT_CD" ).append("\n"); 
		query.append("                            AND     GD.CMDT_CD          = BQ.CMDT_CD" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        /* SOC */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.SOC_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                OR  SR.SOC_FLG      IS NULL" ).append("\n"); 
		query.append("                OR  SR.SOC_FLG      = BQ.SOC_FLG" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< CANAL >" ).append("\n"); 
		query.append("P : PAPAC" ).append("\n"); 
		query.append("S : EGSUC" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.CNL_TZ_FLG   = 'N'" ).append("\n"); 
		query.append("                OR  SR.CNL_TZ_CD    IS NULL" ).append("\n"); 
		query.append("                OR  EXISTS  (" ).append("\n"); 
		query.append("                            SELECT  'X'" ).append("\n"); 
		query.append("                            FROM    BKG_VVD           BV  ," ).append("\n"); 
		query.append("                                    VSK_VSL_PORT_SKD  S1  ," ).append("\n"); 
		query.append("                                    VSK_VSL_PORT_SKD  S2  ," ).append("\n"); 
		query.append("                                    VSK_VSL_PORT_SKD  S3" ).append("\n"); 
		query.append("                            WHERE   BV.BKG_NO       = BQ.BKG_NO" ).append("\n"); 
		query.append("                            AND     S1.VSL_CD       = BV.VSL_CD" ).append("\n"); 
		query.append("                            AND     S1.SKD_VOY_NO   = BV.SKD_VOY_NO" ).append("\n"); 
		query.append("                            AND     S1.SKD_DIR_CD   = BV.SKD_DIR_CD" ).append("\n"); 
		query.append("                            AND     S1.VPS_PORT_CD  = BV.POL_CD" ).append("\n"); 
		query.append("                            AND     S1.CLPT_IND_SEQ = BV.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                            AND     S2.VSL_CD       = BV.VSL_CD" ).append("\n"); 
		query.append("                            AND     S2.SKD_VOY_NO   = BV.SKD_VOY_NO" ).append("\n"); 
		query.append("                            AND     S2.SKD_DIR_CD   = BV.SKD_DIR_CD" ).append("\n"); 
		query.append("                            AND     S2.VPS_PORT_CD  = BV.POD_CD" ).append("\n"); 
		query.append("                            AND     S2.CLPT_IND_SEQ = BV.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                            AND     S3.VSL_CD       = BV.VSL_CD" ).append("\n"); 
		query.append("                            AND     S3.SKD_VOY_NO   = BV.SKD_VOY_NO" ).append("\n"); 
		query.append("                            AND     S3.SKD_DIR_CD   = BV.SKD_DIR_CD" ).append("\n"); 
		query.append("                            AND     S3.VPS_PORT_CD  = DECODE(SR.CNL_TZ_CD, 'P', 'PAPAC', 'S', 'EGSUC')" ).append("\n"); 
		query.append("                            AND     S3.CLPT_SEQ     BETWEEN S1.CLPT_SEQ AND S2.CLPT_SEQ" ).append("\n"); 
		query.append("                            AND     @[ca_flg] = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                            UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                            SELECT  'X'" ).append("\n"); 
		query.append("                            FROM    BKG_VVD_HIS       BV  ," ).append("\n"); 
		query.append("                                    VSK_VSL_PORT_SKD  S1  ," ).append("\n"); 
		query.append("                                    VSK_VSL_PORT_SKD  S2  ," ).append("\n"); 
		query.append("                                    VSK_VSL_PORT_SKD  S3" ).append("\n"); 
		query.append("                            WHERE   BV.BKG_NO       = BQ.BKG_NO" ).append("\n"); 
		query.append("                            AND     BV.CORR_NO      = BQ.CORR_NO" ).append("\n"); 
		query.append("                            AND     S1.VSL_CD       = BV.VSL_CD" ).append("\n"); 
		query.append("                            AND     S1.SKD_VOY_NO   = BV.SKD_VOY_NO" ).append("\n"); 
		query.append("                            AND     S1.SKD_DIR_CD   = BV.SKD_DIR_CD" ).append("\n"); 
		query.append("                            AND     S1.VPS_PORT_CD  = BV.POL_CD" ).append("\n"); 
		query.append("                            AND     S1.CLPT_IND_SEQ = BV.POL_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                            AND     S2.VSL_CD       = BV.VSL_CD" ).append("\n"); 
		query.append("                            AND     S2.SKD_VOY_NO   = BV.SKD_VOY_NO" ).append("\n"); 
		query.append("                            AND     S2.SKD_DIR_CD   = BV.SKD_DIR_CD" ).append("\n"); 
		query.append("                            AND     S2.VPS_PORT_CD  = BV.POD_CD" ).append("\n"); 
		query.append("                            AND     S2.CLPT_IND_SEQ = BV.POD_CLPT_IND_SEQ" ).append("\n"); 
		query.append("                            AND     S3.VSL_CD       = BV.VSL_CD" ).append("\n"); 
		query.append("                            AND     S3.SKD_VOY_NO   = BV.SKD_VOY_NO" ).append("\n"); 
		query.append("                            AND     S3.SKD_DIR_CD   = BV.SKD_DIR_CD" ).append("\n"); 
		query.append("                            AND     S3.VPS_PORT_CD  = DECODE(SR.CNL_TZ_CD, 'P', 'PAPAC', 'S', 'EGSUC')" ).append("\n"); 
		query.append("                            AND     S3.CLPT_SEQ     BETWEEN S1.CLPT_SEQ AND S2.CLPT_SEQ" ).append("\n"); 
		query.append("                            AND     @[ca_flg] = 'Y'" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        /* CARGO TYPE */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SR.PRC_CGO_TP_CD  IS NULL" ).append("\n"); 
		query.append("                OR  SR.PRC_CGO_TP_CD  IN ( BQ.DR_TP, BQ.DG_TP, BQ.RF_TP, BQ.AK_TP, BQ.BB_TP )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        /* IMDG CLASS */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SP.IMDG_CLSS_USE_FLG  = 'N'" ).append("\n"); 
		query.append("                OR  SR.SCG_IMDG_CLSS_CD   IS NULL" ).append("\n"); 
		query.append("                OR  BQ.IMDG_CLSS_CD       LIKE SR.SCG_IMDG_CLSS_CD||'%'" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        /* RATING UNIT */" ).append("\n"); 
		query.append("        AND     (" ).append("\n"); 
		query.append("                    SR.RAT_UT_CD IN ( 'BL', 'BX', 'PC', 'CM', 'MT', 'RM' )" ).append("\n"); 
		query.append("                OR  SR.RAT_UT_CD  = C_TYP.CONV_RAT_UT_CD" ).append("\n"); 
		query.append("                OR  (" ).append("\n"); 
		query.append("                        SR.RAT_UT_CD IN ( '20', '40', 'HC', '45', '53' )" ).append("\n"); 
		query.append("                    AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = SR.RAT_UT_CD ) = C_TYP.CONV_RAT_UT_SZ_CD" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< RT_APPL_TP_CD = 'N' (Not Applicable) >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("        AND     NOT EXISTS  (" ).append("\n"); 
		query.append("                            SELECT  'X'" ).append("\n"); 
		query.append("                            FROM    C1" ).append("\n"); 
		query.append("                            WHERE   C1.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                            AND     C1.BQ_SEQ         = BQ.BQ_SEQ" ).append("\n"); 
		query.append("                            AND     C1.CHG_CD         = SP.CHG_CD" ).append("\n"); 
		query.append("                            AND     C1.RT_APPL_TP_CD  = 'N'" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("< GOH >" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("        AND     NOT EXISTS  (" ).append("\n"); 
		query.append("                            SELECT  'X'" ).append("\n"); 
		query.append("                            FROM    G2" ).append("\n"); 
		query.append("                            WHERE   G2.OFT_CMB_SEQ    = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                            AND     G2.BQ_SEQ         = BQ.BQ_SEQ" ).append("\n"); 
		query.append("                            AND     G2.CHG_CD         = SP.CHG_CD" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("WHERE   ROW_NUMBER  = 1" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("SG AS (" ).append("\n"); 
		query.append("SELECT  OFT_CMB_SEQ         ," ).append("\n"); 
		query.append("        BQ_SEQ              ," ).append("\n"); 
		query.append("        BKG_BQ_SEQ          ," ).append("\n"); 
		query.append("        SEL_TP_CD           ," ).append("\n"); 
		query.append("        SEL_TP_PRIO         ," ).append("\n"); 
		query.append("        CHG_CD              ," ).append("\n"); 
		query.append("        FLT_PCT_TP_CD       ," ).append("\n"); 
		query.append("        PCT_BSE_CD          ," ).append("\n"); 
		query.append("        SOC_USE_FLG         ," ).append("\n"); 
		query.append("        HNGR_BAR_USE_FLG    ," ).append("\n"); 
		query.append("        IO_GA_USE_FLG       ," ).append("\n"); 
		query.append("        CGO_WGT_USE_FLG     ," ).append("\n"); 
		query.append("        PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("        IO_GA_CD            ," ).append("\n"); 
		query.append("        MIN_CGO_WGT         ," ).append("\n"); 
		query.append("        MAX_CGO_WGT         ," ).append("\n"); 
		query.append("        RT_APPL_TP_CD       ," ).append("\n"); 
		query.append("        RT_OP_CD            ," ).append("\n"); 
		query.append("        CURR_CD             ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("FIXED 일 경우는 RND_FRT_RT_AMT 를 사용한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        RND_FRT_RT_AMT  FRT_RT_AMT  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        TYP_BKG_CONV_TP_CD  ," ).append("\n"); 
		query.append("        RAT_UT_CD           ," ).append("\n"); 
		query.append("        PRC_CGO_TP_CD       ," ).append("\n"); 
		query.append("        IMDG_CLSS_CD        ," ).append("\n"); 
		query.append("        NVL(PAY_TERM_CD, NVL(( SELECT SUBSTR(MIN(DECODE(PAY_TERM_CD, 'P', 1, 'C', 2, 'O', 3, 4)||PAY_TERM_CD), 2) FROM S3 WHERE S3.CHG_CD = C1.CHG_CD ), ( SELECT A.CHG_APLY_AREA_CD FROM MDM_CHARGE A WHERE A.CHG_CD = C1.CHG_CD ))) PAY_TERM_CD ," ).append("\n"); 
		query.append("        RT_INCL_FLG         ," ).append("\n"); 
		query.append("        BKG_MST_HBL_TP_CD" ).append("\n"); 
		query.append("FROM    C1" ).append("\n"); 
		query.append("WHERE   RT_APPL_TP_CD   = 'F'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("TARIFF SURCHARGE 에 0 으로 등록된 것이 있으면 NOTE CONVERSION 에 입력된 것을 받지 않는다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("AND     CHG_CD          NOT IN ( SELECT CHG_CD FROM S3 WHERE S3.OFT_CMB_SEQ = C1.OFT_CMB_SEQ AND S3.BQ_SEQ = C1.BQ_SEQ AND S3.FRT_RT_AMT = 0 )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("TARIFF SURCHARGE 에는 CHARGE CODE 가 있으나 S3 에서 선택되지 못한 CHARGE 코드는" ).append("\n"); 
		query.append("NOTE CONVERSION 에 입력된 FIXED 를 받지 않는다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("AND     NOT" ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("            CHG_CD  NOT IN ( SELECT CHG_CD FROM S3 WHERE S3.OFT_CMB_SEQ = C1.OFT_CMB_SEQ AND S3.BQ_SEQ = C1.BQ_SEQ )" ).append("\n"); 
		query.append("        AND EXISTS  (" ).append("\n"); 
		query.append("                    SELECT  'X'" ).append("\n"); 
		query.append("                    FROM    BK  ," ).append("\n"); 
		query.append("                            PRI_SCG_PRF SP" ).append("\n"); 
		query.append("                    WHERE   SP.SVC_SCP_CD = BK.BKG_SVC_SCP_CD   /* BKG_SVC_SCP_CD 를 사용한다. */" ).append("\n"); 
		query.append("                    AND     SP.CHG_CD     = C1.CHG_CD" ).append("\n"); 
		query.append("                    )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  OFT_CMB_SEQ         ," ).append("\n"); 
		query.append("        BQ_SEQ              ," ).append("\n"); 
		query.append("        BKG_BQ_SEQ          ," ).append("\n"); 
		query.append("        SEL_TP_CD           ," ).append("\n"); 
		query.append("        SEL_TP_PRIO         ," ).append("\n"); 
		query.append("        CHG_CD              ," ).append("\n"); 
		query.append("        FLT_PCT_TP_CD       ," ).append("\n"); 
		query.append("        PCT_BSE_CD          ," ).append("\n"); 
		query.append("        SOC_USE_FLG         ," ).append("\n"); 
		query.append("        HNGR_BAR_USE_FLG    ," ).append("\n"); 
		query.append("        IO_GA_USE_FLG       ," ).append("\n"); 
		query.append("        CGO_WGT_USE_FLG     ," ).append("\n"); 
		query.append("        PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("        IO_GA_CD            ," ).append("\n"); 
		query.append("        MIN_CGO_WGT         ," ).append("\n"); 
		query.append("        MAX_CGO_WGT         ," ).append("\n"); 
		query.append("        RT_APPL_TP_CD       ," ).append("\n"); 
		query.append("        RT_OP_CD            ," ).append("\n"); 
		query.append("        CURR_CD             ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("ROUND 를 적용한다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN  FRT_RT_AMT <> CALC_FRT_RT_AMT" ).append("\n"); 
		query.append("          THEN  CASE" ).append("\n"); 
		query.append("                WHEN SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' ) AND CHG_CD IN ( 'BUC', 'FRC' )" ).append("\n"); 
		query.append("                  THEN ROUND(CALC_FRT_RT_AMT)" ).append("\n"); 
		query.append("                WHEN SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' )" ).append("\n"); 
		query.append("                  THEN TRUNC(CALC_FRT_RT_AMT, -1) + CASE WHEN MOD(CALC_FRT_RT_AMT, 10) < 2.5 THEN 0 WHEN MOD(CALC_FRT_RT_AMT, 10) < 7.5 THEN 5 ELSE 10 END" ).append("\n"); 
		query.append("                ELSE ROUND(CALC_FRT_RT_AMT, 2)" ).append("\n"); 
		query.append("                END" ).append("\n"); 
		query.append("        ELSE  FRT_RT_AMT" ).append("\n"); 
		query.append("        END FRT_RT_AMT      ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        TYP_BKG_CONV_TP_CD  ," ).append("\n"); 
		query.append("        RAT_UT_CD           ," ).append("\n"); 
		query.append("        PRC_CGO_TP_CD       ," ).append("\n"); 
		query.append("        IMDG_CLSS_CD        ," ).append("\n"); 
		query.append("        PAY_TERM_CD         ," ).append("\n"); 
		query.append("        RT_INCL_FLG         ," ).append("\n"); 
		query.append("        BKG_MST_HBL_TP_CD" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  SG.*  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        /*******************************************************************************************" ).append("\n"); 
		query.append("        TYP CONVERSION 을 적용하여 금액을 계산한다." ).append("\n"); 
		query.append("        *******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN  TYP_BKG_CONV_TP_CD = 'C' AND TYP_RT_OP_CD = '+'" ).append("\n"); 
		query.append("                  THEN  ADJ_FRT_RT_AMT + TYP_FRT_RT_AMT" ).append("\n"); 
		query.append("                WHEN  TYP_BKG_CONV_TP_CD = 'C' AND TYP_RT_OP_CD = '-'" ).append("\n"); 
		query.append("                  THEN  ADJ_FRT_RT_AMT - TYP_FRT_RT_AMT" ).append("\n"); 
		query.append("                WHEN  TYP_BKG_CONV_TP_CD = 'C' AND TYP_RT_OP_CD = '*'" ).append("\n"); 
		query.append("                  THEN  ADJ_FRT_RT_AMT * TYP_FRT_RT_AMT" ).append("\n"); 
		query.append("                WHEN  TYP_BKG_CONV_TP_CD = 'C' AND TYP_RT_OP_CD = '/'" ).append("\n"); 
		query.append("                  THEN  ADJ_FRT_RT_AMT / TYP_FRT_RT_AMT" ).append("\n"); 
		query.append("                ELSE  ADJ_FRT_RT_AMT" ).append("\n"); 
		query.append("                END CALC_FRT_RT_AMT" ).append("\n"); 
		query.append("        FROM    (" ).append("\n"); 
		query.append("                SELECT  SG.OFT_CMB_SEQ        ," ).append("\n"); 
		query.append("                        SG.BQ_SEQ             ," ).append("\n"); 
		query.append("                        SG.BKG_BQ_SEQ         ," ).append("\n"); 
		query.append("                        SG.SEL_TP_CD          ," ).append("\n"); 
		query.append("                        SG.SEL_TP_PRIO        ," ).append("\n"); 
		query.append("                        SG.CHG_CD             ," ).append("\n"); 
		query.append("                        SG.FLT_PCT_TP_CD      ," ).append("\n"); 
		query.append("                        SG.PCT_BSE_CD         ," ).append("\n"); 
		query.append("                        SG.SOC_USE_FLG        ," ).append("\n"); 
		query.append("                        SG.HNGR_BAR_USE_FLG   ," ).append("\n"); 
		query.append("                        SG.IO_GA_USE_FLG      ," ).append("\n"); 
		query.append("                        SG.CGO_WGT_USE_FLG    ," ).append("\n"); 
		query.append("                        SG.PRC_HNGR_BAR_TP_CD ," ).append("\n"); 
		query.append("                        SG.IO_GA_CD           ," ).append("\n"); 
		query.append("                        SG.MIN_CGO_WGT        ," ).append("\n"); 
		query.append("                        SG.MAX_CGO_WGT        ," ).append("\n"); 
		query.append("                        C1.RT_APPL_TP_CD      ," ).append("\n"); 
		query.append("                        NULL  RT_OP_CD        ," ).append("\n"); 
		query.append("                        SG.CURR_CD            ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                /*******************************************************************************************" ).append("\n"); 
		query.append("                ADJUST 를 먼저 적용하고, 그 다음에 TYP CONVERSION 을 적용하여 금액을 계산한다." ).append("\n"); 
		query.append("                *******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                        CASE" ).append("\n"); 
		query.append("                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '>'" ).append("\n"); 
		query.append("                          THEN GREATEST(SG.FRT_RT_AMT, C1.FRT_RT_AMT)" ).append("\n"); 
		query.append("                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '<'" ).append("\n"); 
		query.append("                          THEN LEAST(SG.FRT_RT_AMT, C1.FRT_RT_AMT)" ).append("\n"); 
		query.append("                        ELSE  SG.FRT_RT_AMT" ).append("\n"); 
		query.append("                        END FRT_RT_AMT        ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                        CASE" ).append("\n"); 
		query.append("                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '+'" ).append("\n"); 
		query.append("                          THEN  SG.FRT_RT_AMT + C1.FRT_RT_AMT" ).append("\n"); 
		query.append("                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '-'" ).append("\n"); 
		query.append("                          THEN  SG.FRT_RT_AMT - C1.FRT_RT_AMT" ).append("\n"); 
		query.append("                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '*'" ).append("\n"); 
		query.append("                          THEN  SG.FRT_RT_AMT * C1.FRT_RT_AMT" ).append("\n"); 
		query.append("                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '/'" ).append("\n"); 
		query.append("                          THEN  SG.FRT_RT_AMT / C1.FRT_RT_AMT" ).append("\n"); 
		query.append("                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '>'" ).append("\n"); 
		query.append("                          THEN GREATEST(SG.FRT_RT_AMT, C1.FRT_RT_AMT)" ).append("\n"); 
		query.append("                        WHEN  C1.RT_APPL_TP_CD = 'A' AND C1.RT_OP_CD = '<'" ).append("\n"); 
		query.append("                          THEN LEAST(SG.FRT_RT_AMT, C1.FRT_RT_AMT)" ).append("\n"); 
		query.append("                        ELSE  SG.FRT_RT_AMT" ).append("\n"); 
		query.append("                        END ADJ_FRT_RT_AMT    ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                        BQ.SVC_SCP_CD         ," ).append("\n"); 
		query.append("                        SG.TYP_BKG_CONV_TP_CD ," ).append("\n"); 
		query.append("                        SG.TYP_RT_OP_CD       ," ).append("\n"); 
		query.append("                        SG.TYP_FRT_RT_AMT     ," ).append("\n"); 
		query.append("                        SG.RAT_UT_CD          ," ).append("\n"); 
		query.append("                        SG.PRC_CGO_TP_CD      ," ).append("\n"); 
		query.append("                        SG.IMDG_CLSS_CD       ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                        NVL(C1.PAY_TERM_CD, SG.PAY_TERM_CD) PAY_TERM_CD ," ).append("\n"); 
		query.append("                        NVL(C1.RT_INCL_FLG, SG.RT_INCL_FLG) RT_INCL_FLG ," ).append("\n"); 
		query.append("                        SG.NOT_RULE_FLG       ," ).append("\n"); 
		query.append("                        NVL(C1.BKG_MST_HBL_TP_CD, SG.BKG_MST_HBL_TP_CD) BKG_MST_HBL_TP_CD" ).append("\n"); 
		query.append("                FROM    BQ  ," ).append("\n"); 
		query.append("                        (" ).append("\n"); 
		query.append("                        SELECT * FROM G2" ).append("\n"); 
		query.append("                        UNION ALL" ).append("\n"); 
		query.append("                        SELECT * FROM S3" ).append("\n"); 
		query.append("                        ) SG  ," ).append("\n"); 
		query.append("                        ( SELECT * FROM C1 WHERE RT_APPL_TP_CD IN ( 'S', 'I', 'A' ) ) C1" ).append("\n"); 
		query.append("                WHERE   SG.OFT_CMB_SEQ      = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                AND     SG.BQ_SEQ           = BQ.BQ_SEQ" ).append("\n"); 
		query.append("                AND     C1.OFT_CMB_SEQ(+)   = SG.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                AND     C1.BQ_SEQ(+)        = SG.BQ_SEQ" ).append("\n"); 
		query.append("                AND     C1.CHG_CD(+)        = SG.CHG_CD" ).append("\n"); 
		query.append("                AND     C1.RT_APPL_TP_CD(+) = SG.NOTE_RT_APPL_TP_CD" ).append("\n"); 
		query.append("                ) SG" ).append("\n"); 
		query.append("        ) SG" ).append("\n"); 
		query.append("--WHERE   NOT EXISTS  (" ).append("\n"); 
		query.append("--                    SELECT  'X'" ).append("\n"); 
		query.append("--                    FROM    C1" ).append("\n"); 
		query.append("--                    WHERE   C1.OFT_CMB_SEQ    = SG.OFT_CMB_SEQ" ).append("\n"); 
		query.append("--                    AND     C1.BQ_SEQ         = SG.BQ_SEQ" ).append("\n"); 
		query.append("--                    AND     C1.CHG_CD         = SG.CHG_CD" ).append("\n"); 
		query.append("--                    AND     C1.RT_APPL_TP_CD  = 'F'" ).append("\n"); 
		query.append("--                    )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("NOT RULE 적용" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("WHERE     NOT (" ).append("\n"); 
		query.append("                SG.SEL_TP_CD      = 'S'" ).append("\n"); 
		query.append("            AND SG.RT_APPL_TP_CD  IS NULL" ).append("\n"); 
		query.append("            AND SG.NOT_RULE_FLG   = 'Y'" ).append("\n"); 
		query.append("            AND SG.RT_INCL_FLG    = 'N'" ).append("\n"); 
		query.append("            AND SG.CHG_CD NOT IN ( 'WHF', 'AST', 'GST', 'VDT', 'VTT', 'GRI', 'OAR', 'DAR', 'OIH', 'DIH' )" ).append("\n"); 
		query.append("            )" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("GS AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("E-SVC COMPENSATION ( DHF, NMS, CMS, ODF ) 적용" ).append("\n"); 
		query.append("대상 CHARGE CODE 는 RATING UNIT 이 'BL' 로 가정함." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  GS.BKG_NO               ," ).append("\n"); 
		query.append("        GS.OFT_CMB_SEQ          ," ).append("\n"); 
		query.append("        GS.POR_CNT_CD           ," ).append("\n"); 
		query.append("        GS.DEL_CNT_CD           ," ).append("\n"); 
		query.append("        GS.SVC_SCP_CD           ," ).append("\n"); 
		query.append("        GS.CHG_CD               ," ).append("\n"); 
		query.append("        GS.FLT_PCT_TP_CD        ," ).append("\n"); 
		query.append("        GS.PCT_BSE_CD           ," ).append("\n"); 
		query.append("        GS.CURR_CD              ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN GS.RAT_UT_CD = 'PC' THEN 0 -- 로직 마지막에서 구한다." ).append("\n"); 
		query.append("        ELSE" ).append("\n"); 
		query.append("          CASE" ).append("\n"); 
		query.append("          WHEN CE.FLT_PCT_TP_CD = 'F' THEN GS.CHG_UT_AMT - CE.DC_AMT" ).append("\n"); 
		query.append("          WHEN CE.FLT_PCT_TP_CD = 'P'" ).append("\n"); 
		query.append("            THEN  CASE" ).append("\n"); 
		query.append("                  WHEN GS.SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' ) AND GS.CHG_CD IN ( 'BUC', 'FRC' )" ).append("\n"); 
		query.append("                    THEN ROUND(GS.CHG_UT_AMT * ( 100 - CE.DC_AMT ) / 100)" ).append("\n"); 
		query.append("                  WHEN GS.SVC_SCP_CD IN ( 'TPE', 'ACE', 'MXE' )" ).append("\n"); 
		query.append("                    THEN TRUNC(GS.CHG_UT_AMT * ( 100 - CE.DC_AMT ) / 100, -1) + CASE WHEN MOD(GS.CHG_UT_AMT * ( 100 - CE.DC_AMT ) / 100, 10) < 2.5 THEN 0 WHEN MOD(GS.CHG_UT_AMT * ( 100 - CE.DC_AMT ) / 100, 10) < 7.5 THEN 5 ELSE 10 END" ).append("\n"); 
		query.append("                  ELSE ROUND(GS.CHG_UT_AMT * ( 100 - CE.DC_AMT ) / 100, 2)" ).append("\n"); 
		query.append("                  END" ).append("\n"); 
		query.append("          ELSE GS.CHG_UT_AMT" ).append("\n"); 
		query.append("          END" ).append("\n"); 
		query.append("        END CHG_UT_AMT          ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN GS.RAT_UT_CD = 'BL' THEN 1" ).append("\n"); 
		query.append("        WHEN GS.RAT_UT_CD = 'PC' THEN GS.CHG_UT_AMT" ).append("\n"); 
		query.append("        WHEN GS.RAT_UT_CD = 'MT' THEN GS.ACT_WGT / 1000" ).append("\n"); 
		query.append("        WHEN GS.RAT_UT_CD = 'CM' THEN GS.MEAS_QTY" ).append("\n"); 
		query.append("        WHEN GS.RAT_UT_CD = 'RM' THEN GS.CNTR_QTY  * GS.PRD_RD_CNT" ).append("\n"); 
		query.append("        ELSE GS.RAT_AS_QTY" ).append("\n"); 
		query.append("        END RAT_AS_QTY          ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("        GS.RAT_UT_CD            ," ).append("\n"); 
		query.append("        0 CHG_AMT               ," ).append("\n"); 
		query.append("        GS.FRT_INCL_XCLD_DIV_CD ," ).append("\n"); 
		query.append("        GS.FRT_TERM_CD          ," ).append("\n"); 
		query.append("        GS.BKG_MST_HBL_TP_CD    ," ).append("\n"); 
		query.append("        GS.CGO_TP_CD            ," ).append("\n"); 
		query.append("        GS.RCV_TERM_CD          ," ).append("\n"); 
		query.append("        GS.DE_TERM_CD           ," ).append("\n"); 
		query.append("        GS.IMDG_CLSS_CD         ," ).append("\n"); 
		query.append("        GS.SOC_FLG              ," ).append("\n"); 
		query.append("        GS.PRC_HNGR_BAR_TP_CD   ," ).append("\n"); 
		query.append("        GS.IN_GA_FLG            ," ).append("\n"); 
		query.append("        GS.CNTR_WGT             ," ).append("\n"); 
		query.append("        GS.OFT_CHG_AMT          ," ).append("\n"); 
		query.append("        GS.OAR_CHG_AMT          ," ).append("\n"); 
		query.append("        GS.DAR_CHG_AMT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  BQ_BKG_NO         BKG_NO        ," ).append("\n"); 
		query.append("                BQ_OFT_CMB_SEQ		OFT_CMB_SEQ		," ).append("\n"); 
		query.append("                BQ_ACT_WGT        ACT_WGT       ," ).append("\n"); 
		query.append("                BQ_MEAS_QTY       MEAS_QTY      ," ).append("\n"); 
		query.append("                BQ_CNTR_QTY       CNTR_QTY      ," ).append("\n"); 
		query.append("                BQ_PRD_RD_CNT     PRD_RD_CNT    ," ).append("\n"); 
		query.append("                BQ_POR_CNT_CD     POR_CNT_CD    ," ).append("\n"); 
		query.append("                BQ_DEL_CNT_CD     DEL_CNT_CD    ," ).append("\n"); 
		query.append("                BQ_SVC_SCP_CD     SVC_SCP_CD    ," ).append("\n"); 
		query.append("                SG_CHG_CD         CHG_CD        ," ).append("\n"); 
		query.append("                SG_FLT_PCT_TP_CD  FLT_PCT_TP_CD ," ).append("\n"); 
		query.append("                SG_PCT_BSE_CD     PCT_BSE_CD    ," ).append("\n"); 
		query.append("                SG_CURR_CD        CURR_CD       ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN CT_CNTR_WGT = 0 AND ( NVL(SG_MIN_CGO_WGT, 0) <> 0 OR NVL(SG_MAX_CGO_WGT, 0) <> 0 ) THEN 0" ).append("\n"); 
		query.append("                ELSE SG_FRT_RT_AMT" ).append("\n"); 
		query.append("                END CHG_UT_AMT          ," ).append("\n"); 
		query.append("                SUM(CT_CNTR_QTY)        RAT_AS_QTY    ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN SG_TYP_BKG_CONV_TP_CD = 'C'  THEN BQ_CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                ELSE SG_RAT_UT_CD" ).append("\n"); 
		query.append("                END RAT_UT_CD           ," ).append("\n"); 
		query.append("                DECODE(SG_RT_INCL_FLG, 'Y', 'I', 'N')       FRT_INCL_XCLD_DIV_CD  ," ).append("\n"); 
		query.append("                DECODE(SG_PAY_TERM_CD, 'O', BQ_FRT_TERM_CD, SG_PAY_TERM_CD) FRT_TERM_CD     ," ).append("\n"); 
		query.append("                SG_BKG_MST_HBL_TP_CD	BKG_MST_HBL_TP_CD		," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                TRIM(SUBSTR(MIN(LPAD(BQ_PRC_CGO_TP_CD, 2, ' ')||LPAD(BQ_RCV_TERM_CD, 1, ' ')||LPAD(BQ_DE_TERM_CD, 1, ' ')||BQ_IMDG_CLSS_CD), 1, 2 ))  CGO_TP_CD     ," ).append("\n"); 
		query.append("                TRIM(SUBSTR(MIN(LPAD(BQ_PRC_CGO_TP_CD, 2, ' ')||LPAD(BQ_RCV_TERM_CD, 1, ' ')||LPAD(BQ_DE_TERM_CD, 1, ' ')||BQ_IMDG_CLSS_CD), 3, 1 ))  RCV_TERM_CD   ," ).append("\n"); 
		query.append("                TRIM(SUBSTR(MIN(LPAD(BQ_PRC_CGO_TP_CD, 2, ' ')||LPAD(BQ_RCV_TERM_CD, 1, ' ')||LPAD(BQ_DE_TERM_CD, 1, ' ')||BQ_IMDG_CLSS_CD), 4, 1 ))  DE_TERM_CD    ," ).append("\n"); 
		query.append("                TRIM(SUBSTR(MIN(LPAD(BQ_PRC_CGO_TP_CD, 2, ' ')||LPAD(BQ_RCV_TERM_CD, 1, ' ')||LPAD(BQ_DE_TERM_CD, 1, ' ')||BQ_IMDG_CLSS_CD), 5    ))  IMDG_CLSS_CD  ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                DECODE(SG_SOC_USE_FLG     , 'Y', BQ_SOC_FLG           ) SOC_FLG             ," ).append("\n"); 
		query.append("                DECODE(SG_HNGR_BAR_USE_FLG, 'Y', CT_PRC_HNGR_BAR_TP_CD) PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("                DECODE(SG_IO_GA_USE_FLG   , 'Y', CT_IN_GA_FLG         ) IN_GA_FLG           ," ).append("\n"); 
		query.append("                DECODE(SG_CGO_WGT_USE_FLG , 'Y', CT_CNTR_WGT          ) CNTR_WGT            ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                SUM(BQ_OFT_CHG_UT_AMT * CT_CNTR_QTY) OFT_CHG_AMT ," ).append("\n"); 
		query.append("                SUM(BQ_OAR_CHG_UT_AMT * CT_CNTR_QTY) OAR_CHG_AMT ," ).append("\n"); 
		query.append("                SUM(BQ_DAR_CHG_UT_AMT * CT_CNTR_QTY) DAR_CHG_AMT" ).append("\n"); 
		query.append("        FROM		(" ).append("\n"); 
		query.append("        				SELECT	BQ.BKG_NO               BQ_BKG_NO               ," ).append("\n"); 
		query.append("                				BQ.OFT_CMB_SEQ          BQ_OFT_CMB_SEQ          ," ).append("\n"); 
		query.append("                				BQ.ACT_WGT              BQ_ACT_WGT              ," ).append("\n"); 
		query.append("                				BQ.MEAS_QTY             BQ_MEAS_QTY             ," ).append("\n"); 
		query.append("                				BQ.CNTR_QTY             BQ_CNTR_QTY             ," ).append("\n"); 
		query.append("                				BQ.PRD_RD_CNT           BQ_PRD_RD_CNT           ," ).append("\n"); 
		query.append("                				BQ.POR_CNT_CD           BQ_POR_CNT_CD           ," ).append("\n"); 
		query.append("                				BQ.DEL_CNT_CD           BQ_DEL_CNT_CD           ," ).append("\n"); 
		query.append("                				BQ.SVC_SCP_CD           BQ_SVC_SCP_CD           ," ).append("\n"); 
		query.append("                				BQ.CTRT_CNTR_TPSZ_CD		BQ_CTRT_CNTR_TPSZ_CD	  ," ).append("\n"); 
		query.append("                				BQ.FRT_TERM_CD					BQ_FRT_TERM_CD				  ," ).append("\n"); 
		query.append("                				BQ.PRC_CGO_TP_CD				BQ_PRC_CGO_TP_CD			  ," ).append("\n"); 
		query.append("                				BQ.RCV_TERM_CD					BQ_RCV_TERM_CD				  ," ).append("\n"); 
		query.append("                				BQ.DE_TERM_CD						BQ_DE_TERM_CD						," ).append("\n"); 
		query.append("                				BQ.IMDG_CLSS_CD					BQ_IMDG_CLSS_CD					," ).append("\n"); 
		query.append("												BQ.SOC_FLG							BQ_SOC_FLG						  ," ).append("\n"); 
		query.append("												BQ.OFT_CHG_UT_AMT				BQ_OFT_CHG_UT_AMT				," ).append("\n"); 
		query.append("												BQ.OAR_CHG_UT_AMT				BQ_OAR_CHG_UT_AMT				," ).append("\n"); 
		query.append("												BQ.DAR_CHG_UT_AMT				BQ_DAR_CHG_UT_AMT				," ).append("\n"); 
		query.append("				                SG.CHG_CD               SG_CHG_CD               ," ).append("\n"); 
		query.append("				                SG.SEL_TP_PRIO					SG_SEL_TP_PRIO					," ).append("\n"); 
		query.append("				                SG.FLT_PCT_TP_CD        SG_FLT_PCT_TP_CD        ," ).append("\n"); 
		query.append("				                SG.PCT_BSE_CD           SG_PCT_BSE_CD           ," ).append("\n"); 
		query.append("				                SG.CURR_CD              SG_CURR_CD              ," ).append("\n"); 
		query.append("												SG.MIN_CGO_WGT					SG_MIN_CGO_WGT				  ," ).append("\n"); 
		query.append("												SG.MAX_CGO_WGT					SG_MAX_CGO_WGT				  ," ).append("\n"); 
		query.append("												SG.FRT_RT_AMT						SG_FRT_RT_AMT						," ).append("\n"); 
		query.append("												SG.TYP_BKG_CONV_TP_CD		SG_TYP_BKG_CONV_TP_CD		," ).append("\n"); 
		query.append("												SG.RAT_UT_CD						SG_RAT_UT_CD					  ," ).append("\n"); 
		query.append("												SG.RT_INCL_FLG					SG_RT_INCL_FLG				  ," ).append("\n"); 
		query.append("												SG.PAY_TERM_CD					SG_PAY_TERM_CD				  ," ).append("\n"); 
		query.append("												SG.BKG_MST_HBL_TP_CD		SG_BKG_MST_HBL_TP_CD	  ," ).append("\n"); 
		query.append("												SG.SOC_USE_FLG					SG_SOC_USE_FLG				  ," ).append("\n"); 
		query.append("												SG.HNGR_BAR_USE_FLG			SG_HNGR_BAR_USE_FLG			," ).append("\n"); 
		query.append("												SG.IO_GA_USE_FLG				SG_IO_GA_USE_FLG			  ," ).append("\n"); 
		query.append("												SG.CGO_WGT_USE_FLG			SG_CGO_WGT_USE_FLG		  ," ).append("\n"); 
		query.append("        								CT.CNTR_WGT							CT_CNTR_WGT							," ).append("\n"); 
		query.append("        								CT.CNTR_QTY							CT_CNTR_QTY							," ).append("\n"); 
		query.append("        								CT.PRC_HNGR_BAR_TP_CD		CT_PRC_HNGR_BAR_TP_CD		," ).append("\n"); 
		query.append("        								CT.IN_GA_FLG						CT_IN_GA_FLG					  ," ).append("\n"); 
		query.append("        								ROW_NUMBER() OVER ( PARTITION BY BQ.OFT_CMB_SEQ, BQ.BQ_SEQ, SG.CHG_CD ORDER BY SG.SEL_TP_PRIO )	ROW_NUMBER" ).append("\n"); 
		query.append("				        FROM    BQ  ," ).append("\n"); 
		query.append("				                SG  ," ).append("\n"); 
		query.append("				                CT" ).append("\n"); 
		query.append("				        WHERE   SG.OFT_CMB_SEQ            = BQ.OFT_CMB_SEQ" ).append("\n"); 
		query.append("				        AND     SG.BQ_SEQ                 = BQ.BQ_SEQ" ).append("\n"); 
		query.append("				        AND     CT.CNTR_TPSZ_CD           = BQ.CNTR_TPSZ_CD" ).append("\n"); 
		query.append("				        AND     CT.CTRT_CNTR_TPSZ_CD      = BQ.CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("				        AND     CT.RCV_TERM_CD            = BQ.RCV_TERM_CD" ).append("\n"); 
		query.append("				        AND     CT.DE_TERM_CD             = BQ.DE_TERM_CD" ).append("\n"); 
		query.append("				        AND     CT.DRY_CGO_FLG            = BQ.DRY_CGO_FLG" ).append("\n"); 
		query.append("				        AND     CT.AWK_CGO_FLG            = BQ.AWK_CGO_FLG" ).append("\n"); 
		query.append("				        AND     CT.DCGO_FLG               = BQ.DCGO_FLG" ).append("\n"); 
		query.append("				        AND     CT.RC_FLG                 = BQ.RC_FLG" ).append("\n"); 
		query.append("				        AND     CT.BB_CGO_FLG             = BQ.BB_CGO_FLG" ).append("\n"); 
		query.append("				        AND     CT.SOC_FLG                = BQ.SOC_FLG" ).append("\n"); 
		query.append("				        AND     NVL(CT.IMDG_CLSS_CD, '*') = NVL(BQ.IMDG_CLSS_CD, '*')" ).append("\n"); 
		query.append("				" ).append("\n"); 
		query.append("				        /* HANGER TYPE */" ).append("\n"); 
		query.append("				        AND     (" ).append("\n"); 
		query.append("				                    SG.PRC_HNGR_BAR_TP_CD IS NULL" ).append("\n"); 
		query.append("				                OR  CT.PRC_HNGR_BAR_TP_CD = SG.PRC_HNGR_BAR_TP_CD" ).append("\n"); 
		query.append("				                )" ).append("\n"); 
		query.append("				" ).append("\n"); 
		query.append("				        /* IN/OUT GAGE */" ).append("\n"); 
		query.append("				        AND     (" ).append("\n"); 
		query.append("				                    SG.IO_GA_CD   IS NULL" ).append("\n"); 
		query.append("				                OR  CT.IN_GA_FLG  = SG.IO_GA_CD" ).append("\n"); 
		query.append("				                )" ).append("\n"); 
		query.append("				" ).append("\n"); 
		query.append("				        /* CARGO WEIGHT */" ).append("\n"); 
		query.append("				        AND     (" ).append("\n"); 
		query.append("				                    SG.CGO_WGT_USE_FLG  = 'N'" ).append("\n"); 
		query.append("				                OR  CT.CNTR_WGT   = 0" ).append("\n"); 
		query.append("				                OR  (" ).append("\n"); 
		query.append("				                        CT.CNTR_WGT   >=  NVL(SG.MIN_CGO_WGT, 0) * 1000     /* WEIGHT 의 MIN 을 0 으로 임의로 설정 */" ).append("\n"); 
		query.append("				                    AND CT.CNTR_WGT   <   DECODE(NVL(SG.MAX_CGO_WGT, 0), 0, 9999999999, SG.MAX_CGO_WGT) * 1000      /* WEIGHT 의 MAX 를 9999999999 으로 임의로 설정 */" ).append("\n"); 
		query.append("				                    )" ).append("\n"); 
		query.append("				                )" ).append("\n"); 
		query.append("				        )" ).append("\n"); 
		query.append("				WHERE		ROW_NUMBER	= 1" ).append("\n"); 
		query.append("        GROUP BY" ).append("\n"); 
		query.append("                BQ_BKG_NO             ," ).append("\n"); 
		query.append("                BQ_OFT_CMB_SEQ        ," ).append("\n"); 
		query.append("                BQ_ACT_WGT            ," ).append("\n"); 
		query.append("                BQ_MEAS_QTY           ," ).append("\n"); 
		query.append("                BQ_CNTR_QTY           ," ).append("\n"); 
		query.append("                BQ_PRD_RD_CNT         ," ).append("\n"); 
		query.append("                BQ_POR_CNT_CD         ," ).append("\n"); 
		query.append("                BQ_DEL_CNT_CD         ," ).append("\n"); 
		query.append("                BQ_SVC_SCP_CD         ," ).append("\n"); 
		query.append("                SG_CHG_CD             ," ).append("\n"); 
		query.append("                SG_FLT_PCT_TP_CD      ," ).append("\n"); 
		query.append("                SG_PCT_BSE_CD         ," ).append("\n"); 
		query.append("                SG_CURR_CD            ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN CT_CNTR_WGT = 0 AND ( NVL(SG_MIN_CGO_WGT, 0) <> 0 OR NVL(SG_MAX_CGO_WGT, 0) <> 0 ) THEN 0" ).append("\n"); 
		query.append("                ELSE SG_FRT_RT_AMT" ).append("\n"); 
		query.append("                END                   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN SG_TYP_BKG_CONV_TP_CD = 'C'  THEN BQ_CTRT_CNTR_TPSZ_CD" ).append("\n"); 
		query.append("                ELSE SG_RAT_UT_CD" ).append("\n"); 
		query.append("                END                   ," ).append("\n"); 
		query.append("                DECODE(SG_RT_INCL_FLG, 'Y', 'I', 'N')       ," ).append("\n"); 
		query.append("                DECODE(SG_PAY_TERM_CD, 'O', BQ_FRT_TERM_CD, SG_PAY_TERM_CD) ," ).append("\n"); 
		query.append("                SG_BKG_MST_HBL_TP_CD  ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN  SG_RAT_UT_CD IN ( 'RM', 'CM', 'MT', 'BL', 'PC' ) AND SG_CHG_CD <> 'CAF' THEN NULL" ).append("\n"); 
		query.append("                ELSE  BQ_PRC_CGO_TP_CD" ).append("\n"); 
		query.append("                END                   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN  SG_RAT_UT_CD IN ( 'RM', 'CM', 'MT', 'BL', 'PC' ) AND SG_CHG_CD <> 'CAF' THEN NULL" ).append("\n"); 
		query.append("                ELSE  BQ_RCV_TERM_CD" ).append("\n"); 
		query.append("                END                   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN  SG_RAT_UT_CD IN ( 'RM', 'CM', 'MT', 'BL', 'PC' ) AND SG_CHG_CD <> 'CAF' THEN NULL" ).append("\n"); 
		query.append("                ELSE  BQ_DE_TERM_CD" ).append("\n"); 
		query.append("                END                   ," ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN  SG_RAT_UT_CD IN ( 'RM', 'CM', 'MT', 'BL', 'PC' ) AND SG_CHG_CD <> 'CAF' THEN NULL" ).append("\n"); 
		query.append("                ELSE  BQ_IMDG_CLSS_CD" ).append("\n"); 
		query.append("                END                   ," ).append("\n"); 
		query.append("                DECODE(SG_SOC_USE_FLG     , 'Y', BQ_SOC_FLG           ) ," ).append("\n"); 
		query.append("                DECODE(SG_HNGR_BAR_USE_FLG, 'Y', CT_PRC_HNGR_BAR_TP_CD) ," ).append("\n"); 
		query.append("                DECODE(SG_IO_GA_USE_FLG   , 'Y', CT_IN_GA_FLG         ) ," ).append("\n"); 
		query.append("                DECODE(SG_CGO_WGT_USE_FLG , 'Y', CT_CNTR_WGT          )" ).append("\n"); 
		query.append("        ) GS  ," ).append("\n"); 
		query.append("        (" ).append("\n"); 
		query.append("        SELECT  CE.CHG_CD         ," ).append("\n"); 
		query.append("                CE.CURR_CD        ," ).append("\n"); 
		query.append("                CE.FLT_PCT_TP_CD  ," ).append("\n"); 
		query.append("                CE.DC_AMT         ," ).append("\n"); 
		query.append("                ROW_NUMBER() OVER ( PARTITION BY CE.CHG_CD ORDER BY CE.DC_AMT DESC ) ROW_NUMBER" ).append("\n"); 
		query.append("        FROM    BK                    ," ).append("\n"); 
		query.append("                PRI_CMPN_ESVC     CE  ," ).append("\n"); 
		query.append("                PRI_CMPN_ESVC_TP  CT" ).append("\n"); 
		query.append("        WHERE   CT.SVC_SCP_CD     = CE.SVC_SCP_CD" ).append("\n"); 
		query.append("        AND     CT.CMPN_SEQ       = CE.CMPN_SEQ" ).append("\n"); 
		query.append("        AND     CE.SVC_SCP_CD     = BK.BKG_SVC_SCP_CD   /* BKG_SVC_SCP_CD 를 사용한다. */" ).append("\n"); 
		query.append("        AND     CE.PRC_CTRT_TP_CD = BK.CTRT_TP_CD" ).append("\n"); 
		query.append("        AND     CE.SC_NO          = BK.SC_NO" ).append("\n"); 
		query.append("        AND     NVL(CE.ORG_RGN_CD , BK.POR_RGN_CD)  = BK.POR_RGN_CD" ).append("\n"); 
		query.append("        AND     NVL(CE.DEST_RGN_CD, BK.DEL_RGN_CD)  = BK.DEL_RGN_CD" ).append("\n"); 
		query.append("        AND     BK.RT_APLY_DT     BETWEEN CE.EFF_DT AND NVL(CE.EXP_DT, TO_DATE('29991231', 'YYYYMMDD')) + 0.99999   /* 29991231 은 임의의 MAX 값이며, 0.99999 는 23시 59분 59초를 의미 */" ).append("\n"); 
		query.append("        AND     CT.PRC_ESVC_TP_CD = BK.ESVC_TP_CD" ).append("\n"); 
		query.append("        ) CE" ).append("\n"); 
		query.append("WHERE   CE.CHG_CD(+)      = GS.CHG_CD" ).append("\n"); 
		query.append("AND     CE.ROW_NUMBER(+)  = 1" ).append("\n"); 
		query.append(") ," ).append("\n"); 
		query.append("FN AS" ).append("\n"); 
		query.append("(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("GENERAL SURCHARGE" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BKG_NO              ," ).append("\n"); 
		query.append("        OFT_CMB_SEQ         ," ).append("\n"); 
		query.append("        POR_CNT_CD          ," ).append("\n"); 
		query.append("        DEL_CNT_CD          ," ).append("\n"); 
		query.append("        SVC_SCP_CD          ," ).append("\n"); 
		query.append("        CHG_CD              ," ).append("\n"); 
		query.append("        FLT_PCT_TP_CD       ," ).append("\n"); 
		query.append("        PCT_BSE_CD          ," ).append("\n"); 
		query.append("        CURR_CD             ," ).append("\n"); 
		query.append("        CHG_UT_AMT          ," ).append("\n"); 
		query.append("        RAT_AS_QTY          ," ).append("\n"); 
		query.append("        RAT_UT_CD           ," ).append("\n"); 
		query.append("        CHG_UT_AMT * RAT_AS_QTY CHG_AMT ," ).append("\n"); 
		query.append("        FRT_INCL_XCLD_DIV_CD," ).append("\n"); 
		query.append("        FRT_TERM_CD         ," ).append("\n"); 
		query.append("        CGO_TP_CD           ," ).append("\n"); 
		query.append("        RCV_TERM_CD         ," ).append("\n"); 
		query.append("        DE_TERM_CD          ," ).append("\n"); 
		query.append("        IMDG_CLSS_CD        ," ).append("\n"); 
		query.append("        SOC_FLG             ," ).append("\n"); 
		query.append("        PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("        IN_GA_FLG           ," ).append("\n"); 
		query.append("        CNTR_WGT            ," ).append("\n"); 
		query.append("        OFT_CHG_AMT         ," ).append("\n"); 
		query.append("        OAR_CHG_AMT         ," ).append("\n"); 
		query.append("        DAR_CHG_AMT" ).append("\n"); 
		query.append("FROM    GS" ).append("\n"); 
		query.append("WHERE   CHG_CD    NOT IN  (" ).append("\n"); 
		query.append("                          'ACT'," ).append("\n"); 
		query.append("                          'WHF'," ).append("\n"); 
		query.append("                          'CFR', 'CFD'," ).append("\n"); 
		query.append("                          'CMS', 'NMS', 'SMC'" ).append("\n"); 
		query.append("                          )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("ACT" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  /*+ RULE */" ).append("\n"); 
		query.append("        GS.BKG_NO               ," ).append("\n"); 
		query.append("        GS.OFT_CMB_SEQ          ," ).append("\n"); 
		query.append("        GS.POR_CNT_CD           ," ).append("\n"); 
		query.append("        GS.DEL_CNT_CD           ," ).append("\n"); 
		query.append("        GS.SVC_SCP_CD           ," ).append("\n"); 
		query.append("        GS.CHG_CD               ," ).append("\n"); 
		query.append("        GS.FLT_PCT_TP_CD        ," ).append("\n"); 
		query.append("        GS.PCT_BSE_CD           ," ).append("\n"); 
		query.append("        GS.CURR_CD              ," ).append("\n"); 
		query.append("        GS.CHG_UT_AMT           ," ).append("\n"); 
		query.append("        GS.RAT_AS_QTY           ," ).append("\n"); 
		query.append("        GS.RAT_UT_CD            ," ).append("\n"); 
		query.append("        GS.CHG_UT_AMT * GS.RAT_AS_QTY CHG_AMT ," ).append("\n"); 
		query.append("        GS.FRT_INCL_XCLD_DIV_CD ," ).append("\n"); 
		query.append("        GS.FRT_TERM_CD          ," ).append("\n"); 
		query.append("        GS.CGO_TP_CD            ," ).append("\n"); 
		query.append("        GS.RCV_TERM_CD          ," ).append("\n"); 
		query.append("        GS.DE_TERM_CD           ," ).append("\n"); 
		query.append("        GS.IMDG_CLSS_CD         ," ).append("\n"); 
		query.append("        GS.SOC_FLG              ," ).append("\n"); 
		query.append("        GS.PRC_HNGR_BAR_TP_CD   ," ).append("\n"); 
		query.append("        GS.IN_GA_FLG            ," ).append("\n"); 
		query.append("        GS.CNTR_WGT             ," ).append("\n"); 
		query.append("        GS.OFT_CHG_AMT          ," ).append("\n"); 
		query.append("        GS.OAR_CHG_AMT          ," ).append("\n"); 
		query.append("        GS.DAR_CHG_AMT" ).append("\n"); 
		query.append("FROM    BK  ," ).append("\n"); 
		query.append("        GS" ).append("\n"); 
		query.append("WHERE   GS.CHG_CD = 'ACT'" ).append("\n"); 
		query.append("AND     (" ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                    BK.BKG_SVC_SCP_CD   = 'TPE'       /* BKG_SVC_SCP_CD 를 사용한다. */" ).append("\n"); 
		query.append("                AND BK.POD_CD           IN ( 'USLGB', 'USLAX' )" ).append("\n"); 
		query.append("                AND BK.POD_CD           <> BK.DEL_CD" ).append("\n"); 
		query.append("                AND BK.DEST_TRNS_MOD_CD IN ( 'R', 'A' )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        OR      (" ).append("\n"); 
		query.append("                    BK.BKG_SVC_SCP_CD   = 'TPW'       /* BKG_SVC_SCP_CD 를 사용한다. */" ).append("\n"); 
		query.append("                AND BK.POL_CD           IN ( 'USLGB', 'USLAX' )" ).append("\n"); 
		query.append("                AND BK.POL_CD           <> BK.POR_CD" ).append("\n"); 
		query.append("                AND BK.ORG_TRNS_MOD_CD  IN ( 'R', 'A' )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        OR      (" ).append("\n"); 
		query.append("                    BK.BKG_SVC_SCP_CD   <> 'TPE'        /* BKG_SVC_SCP_CD 를 사용한다. */" ).append("\n"); 
		query.append("                AND BK.DEL_CNT_CD       = 'US'" ).append("\n"); 
		query.append("                AND BK.POD_CD           IN ( 'USNYC', 'USSAV', 'USCHS', 'USORF', 'USBOS' )" ).append("\n"); 
		query.append("                AND EXISTS  (" ).append("\n"); 
		query.append("                            SELECT  'X'" ).append("\n"); 
		query.append("                            FROM    PRD_INLND_ROUT_MST  IR" ).append("\n"); 
		query.append("                            WHERE   IR.ROUT_ORG_NOD_CD    LIKE BK.POD_CD||'%'" ).append("\n"); 
		query.append("                            AND     IR.ROUT_DEST_NOD_CD   LIKE BK.DEL_CD||'%'" ).append("\n"); 
		query.append("                            AND     IR.PCTL_IO_BND_CD     = 'I'" ).append("\n"); 
		query.append("                            AND     IR.HUB_NOD_CD         LIKE 'USLGB'||'%'" ).append("\n"); 
		query.append("                            AND     IR.INLND_ROUT_BKG_FLG = 'Y'" ).append("\n"); 
		query.append("                            AND     NVL(IR.DELT_FLG, 'N') = 'N'" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("                AND BK.DEST_TRNS_MOD_CD IN ( 'R', 'A' )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        OR      (" ).append("\n"); 
		query.append("                    BK.BKG_SVC_SCP_CD   <> 'TPW'        /* BKG_SVC_SCP_CD 를 사용한다. */" ).append("\n"); 
		query.append("                AND BK.POR_CNT_CD       = 'US'" ).append("\n"); 
		query.append("                AND BK.POL_CD           IN ( 'USNYC', 'USSAV', 'USCHS', 'USORF', 'USBOS' )" ).append("\n"); 
		query.append("                AND EXISTS  (" ).append("\n"); 
		query.append("                            SELECT  'X'" ).append("\n"); 
		query.append("                            FROM    PRD_INLND_ROUT_MST  IR" ).append("\n"); 
		query.append("                            WHERE   IR.ROUT_ORG_NOD_CD    LIKE BK.POR_CD||'%'" ).append("\n"); 
		query.append("                            AND     IR.ROUT_DEST_NOD_CD   LIKE BK.POL_CD||'%'" ).append("\n"); 
		query.append("                            AND     IR.PCTL_IO_BND_CD     = 'O'" ).append("\n"); 
		query.append("                            AND     IR.HUB_NOD_CD         LIKE 'USLGB'||'%'" ).append("\n"); 
		query.append("                            AND     IR.INLND_ROUT_BKG_FLG = 'Y'" ).append("\n"); 
		query.append("                            AND     NVL(IR.DELT_FLG, 'N') = 'N'" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("                AND BK.ORG_TRNS_MOD_CD  IN ( 'R', 'A' )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("WHF" ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  GS.BKG_NO             ," ).append("\n"); 
		query.append("        GS.OFT_CMB_SEQ        ," ).append("\n"); 
		query.append("        GS.POR_CNT_CD         ," ).append("\n"); 
		query.append("        GS.DEL_CNT_CD         ," ).append("\n"); 
		query.append("        GS.SVC_SCP_CD         ," ).append("\n"); 
		query.append("        GS.CHG_CD             ," ).append("\n"); 
		query.append("        GS.FLT_PCT_TP_CD      ," ).append("\n"); 
		query.append("        GS.PCT_BSE_CD         ," ).append("\n"); 
		query.append("        GS.CURR_CD            ," ).append("\n"); 
		query.append("        GS.CHG_UT_AMT         ," ).append("\n"); 
		query.append("        CASE" ).append("\n"); 
		query.append("        WHEN BK.BKG_RT_WHF_EXPT_CD = 'X' THEN" ).append("\n"); 
		query.append("              GS.RAT_AS_QTY" ).append("\n"); 
		query.append("              - (" ).append("\n"); 
		query.append("                SELECT  COUNT(1)" ).append("\n"); 
		query.append("                FROM    BKG_CONTAINER BC" ).append("\n"); 
		query.append("                WHERE   BC.BKG_NO             = BK.BKG_NO" ).append("\n"); 
		query.append("                AND     BC.CNTR_WFG_EXPT_FLG  = 'Y'" ).append("\n"); 
		query.append("                AND     (" ).append("\n"); 
		query.append("                            GS.RAT_UT_CD = 'BX'" ).append("\n"); 
		query.append("                        OR  NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD) = GS.RAT_UT_CD" ).append("\n"); 
		query.append("                        OR  (" ).append("\n"); 
		query.append("                                GS.RAT_UT_CD  IN ( '20', '40', 'HC', '45', '53' )" ).append("\n"); 
		query.append("                            AND ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = GS.RAT_UT_CD )" ).append("\n"); 
		query.append("                                = ( SELECT A.CNTR_SZ_CD FROM PRI_RAT_UT A WHERE A.RAT_UT_CD = NVL(BC.EQ_SUBST_TPSZ_CD, BC.CNTR_TPSZ_CD) )" ).append("\n"); 
		query.append("                            )" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                )" ).append("\n"); 
		query.append("        ELSE GS.RAT_AS_QTY" ).append("\n"); 
		query.append("        END RAT_AS_QTY        ," ).append("\n"); 
		query.append("        GS.RAT_UT_CD          ," ).append("\n"); 
		query.append("        GS.CHG_UT_AMT * GS.RAT_AS_QTY CHG_AMT ," ).append("\n"); 
		query.append("        GS.FRT_INCL_XCLD_DIV_CD ," ).append("\n"); 
		query.append("        GS.FRT_TERM_CD        ," ).append("\n"); 
		query.append("        GS.CGO_TP_CD          ," ).append("\n"); 
		query.append("        GS.RCV_TERM_CD        ," ).append("\n"); 
		query.append("        GS.DE_TERM_CD         ," ).append("\n"); 
		query.append("        GS.IMDG_CLSS_CD       ," ).append("\n"); 
		query.append("        GS.SOC_FLG            ," ).append("\n"); 
		query.append("        GS.PRC_HNGR_BAR_TP_CD ," ).append("\n"); 
		query.append("        GS.IN_GA_FLG          ," ).append("\n"); 
		query.append("        GS.CNTR_WGT           ," ).append("\n"); 
		query.append("        GS.OFT_CHG_AMT        ," ).append("\n"); 
		query.append("        GS.OAR_CHG_AMT        ," ).append("\n"); 
		query.append("        GS.DAR_CHG_AMT" ).append("\n"); 
		query.append("FROM    BK  ," ).append("\n"); 
		query.append("        GS" ).append("\n"); 
		query.append("WHERE   GS.CHG_CD             = 'WHF'" ).append("\n"); 
		query.append("/* BKG_RT_WHF_EXPT_CD 가 NULL 이거나, T/S 인 경우에만 DATA 가 SELECT 된다 */" ).append("\n"); 
		query.append("AND     NVL(BK.BKG_RT_WHF_EXPT_CD, '*') IN ( '*', 'X' )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("CFR/CFD" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("일반 RAT_UT_CD 를 우선으로 하고," ).append("\n"); 
		query.append("MT, CM 을 경우는 금액이 큰 것 1개를 가져온다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BKG_NO              ," ).append("\n"); 
		query.append("        OFT_CMB_SEQ         ," ).append("\n"); 
		query.append("        POR_CNT_CD          ," ).append("\n"); 
		query.append("        DEL_CNT_CD          ," ).append("\n"); 
		query.append("        SVC_SCP_CD          ," ).append("\n"); 
		query.append("        CHG_CD              ," ).append("\n"); 
		query.append("        FLT_PCT_TP_CD       ," ).append("\n"); 
		query.append("        PCT_BSE_CD          ," ).append("\n"); 
		query.append("        CURR_CD             ," ).append("\n"); 
		query.append("        CHG_UT_AMT          ," ).append("\n"); 
		query.append("        RAT_AS_QTY          ," ).append("\n"); 
		query.append("        RAT_UT_CD           ," ).append("\n"); 
		query.append("        CHG_UT_AMT * RAT_AS_QTY CHG_AMT ," ).append("\n"); 
		query.append("        FRT_INCL_XCLD_DIV_CD," ).append("\n"); 
		query.append("        FRT_TERM_CD         ," ).append("\n"); 
		query.append("        CGO_TP_CD           ," ).append("\n"); 
		query.append("        RCV_TERM_CD         ," ).append("\n"); 
		query.append("        DE_TERM_CD          ," ).append("\n"); 
		query.append("        IMDG_CLSS_CD        ," ).append("\n"); 
		query.append("        SOC_FLG             ," ).append("\n"); 
		query.append("        PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("        IN_GA_FLG           ," ).append("\n"); 
		query.append("        CNTR_WGT            ," ).append("\n"); 
		query.append("        OFT_CHG_AMT         ," ).append("\n"); 
		query.append("        OAR_CHG_AMT         ," ).append("\n"); 
		query.append("        DAR_CHG_AMT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  GS.*  ," ).append("\n"); 
		query.append("                RANK() OVER ( PARTITION BY GS.CHG_CD ORDER BY DECODE(GS.RAT_UT_CD, 'MT', 2, 'CM', 2, 1), DECODE(GS.RAT_UT_CD, 'MT', GS.RAT_AS_QTY, 'CM', GS.RAT_AS_QTY) DESC, DECODE(GS.RAT_UT_CD, 'MT', 'MT', 'CM', 'CM') ) RAT_UT_PRIO" ).append("\n"); 
		query.append("        FROM    GS" ).append("\n"); 
		query.append("        WHERE   GS.CHG_CD     IN ( 'CFR', 'CFD' )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("WHERE   RAT_UT_PRIO = 1" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/*******************************************************************************************" ).append("\n"); 
		query.append("CMS, NMS, SMC" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("RAT_UT_CD 는 항상 BL 임" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("FILER CODE ( NULL, 1, 2, 3 )" ).append("\n"); 
		query.append("  1 Carrier Filing NVOCC" ).append("\n"); 
		query.append("  2 Self Filing NVO" ).append("\n"); 
		query.append("  3 Not Applicable" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("NOTE_CONV 의 BKG_MST_HBL_TP_CD 는 CMS 에는 적용하며, S/C 에만 있고 RFA, TAA 에는 없다." ).append("\n"); 
		query.append("PRI_SCG_RT 에는 BKG_MST_HBL_TP_CD 칼럼이 없다." ).append("\n"); 
		query.append("*******************************************************************************************/" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BKG_NO                ," ).append("\n"); 
		query.append("        OFT_CMB_SEQ           ," ).append("\n"); 
		query.append("        POR_CNT_CD            ," ).append("\n"); 
		query.append("        DEL_CNT_CD            ," ).append("\n"); 
		query.append("        SVC_SCP_CD            ," ).append("\n"); 
		query.append("        CHG_CD                ," ).append("\n"); 
		query.append("        FLT_PCT_TP_CD         ," ).append("\n"); 
		query.append("        PCT_BSE_CD            ," ).append("\n"); 
		query.append("        CURR_CD               ," ).append("\n"); 
		query.append("        CHG_UT_AMT            ," ).append("\n"); 
		query.append("        RAT_AS_QTY            ," ).append("\n"); 
		query.append("        RAT_UT_CD             ," ).append("\n"); 
		query.append("        CHG_UT_AMT * RAT_AS_QTY CHG_AMT ," ).append("\n"); 
		query.append("        FRT_INCL_XCLD_DIV_CD  ," ).append("\n"); 
		query.append("        FRT_TERM_CD           ," ).append("\n"); 
		query.append("        CGO_TP_CD             ," ).append("\n"); 
		query.append("        RCV_TERM_CD           ," ).append("\n"); 
		query.append("        DE_TERM_CD            ," ).append("\n"); 
		query.append("        IMDG_CLSS_CD          ," ).append("\n"); 
		query.append("        SOC_FLG               ," ).append("\n"); 
		query.append("        PRC_HNGR_BAR_TP_CD    ," ).append("\n"); 
		query.append("        IN_GA_FLG             ," ).append("\n"); 
		query.append("        CNTR_WGT              ," ).append("\n"); 
		query.append("        OFT_CHG_AMT           ," ).append("\n"); 
		query.append("        OAR_CHG_AMT           ," ).append("\n"); 
		query.append("        DAR_CHG_AMT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  GS.BKG_NO               ," ).append("\n"); 
		query.append("                GS.OFT_CMB_SEQ          ," ).append("\n"); 
		query.append("                GS.POR_CNT_CD           ," ).append("\n"); 
		query.append("                GS.DEL_CNT_CD           ," ).append("\n"); 
		query.append("                GS.SVC_SCP_CD           ," ).append("\n"); 
		query.append("                GS.CHG_CD               ," ).append("\n"); 
		query.append("                GS.FLT_PCT_TP_CD        ," ).append("\n"); 
		query.append("                GS.PCT_BSE_CD           ," ).append("\n"); 
		query.append("                GS.CURR_CD              ," ).append("\n"); 
		query.append("                GS.CHG_UT_AMT           ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN  GS.CHG_CD = 'CMS'" ).append("\n"); 
		query.append("                  THEN  GREATEST(" ).append("\n"); 
		query.append("                        CASE" ).append("\n"); 
		query.append("                        WHEN  BK.USA_CSTMS_FILE_CD = '1'  THEN  DECODE(GS.BKG_MST_HBL_TP_CD, 'H', 0, 1) + DECODE(GS.BKG_MST_HBL_TP_CD, 'M', 0, BK.BKG_HBL_CNT)" ).append("\n"); 
		query.append("                        WHEN  BK.USA_CSTMS_FILE_CD = '2'  THEN  0" ).append("\n"); 
		query.append("                        WHEN  BK.USA_CSTMS_FILE_CD = '3'  THEN  1" ).append("\n"); 
		query.append("                        ELSE  0" ).append("\n"); 
		query.append("                        END" ).append("\n"); 
		query.append("                        ," ).append("\n"); 
		query.append("                        CASE" ).append("\n"); 
		query.append("                        WHEN  BK.CND_CSTMS_FILE_CD = '1'  THEN  DECODE(GS.BKG_MST_HBL_TP_CD, 'H', 0, 1) + DECODE(GS.BKG_MST_HBL_TP_CD, 'M', 0, BK.BKG_HBL_CNT)" ).append("\n"); 
		query.append("                        WHEN  BK.CND_CSTMS_FILE_CD = '2'  THEN  0" ).append("\n"); 
		query.append("                        WHEN  BK.CND_CSTMS_FILE_CD = '3'  THEN  1" ).append("\n"); 
		query.append("                        ELSE  0" ).append("\n"); 
		query.append("                        END" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                WHEN  GS.CHG_CD = 'NMS'" ).append("\n"); 
		query.append("                  THEN  GREATEST(" ).append("\n"); 
		query.append("                        CASE" ).append("\n"); 
		query.append("                        WHEN  BK.USA_CSTMS_FILE_CD = '1'  THEN  MF_SELF_CNT" ).append("\n"); 
		query.append("                        WHEN  BK.USA_CSTMS_FILE_CD = '2'  THEN  1" ).append("\n"); 
		query.append("                        WHEN  BK.USA_CSTMS_FILE_CD = '3'  THEN  0" ).append("\n"); 
		query.append("                        ELSE  0" ).append("\n"); 
		query.append("                        END" ).append("\n"); 
		query.append("                        ," ).append("\n"); 
		query.append("                        CASE" ).append("\n"); 
		query.append("                        WHEN  BK.CND_CSTMS_FILE_CD = '1'  THEN  MF_SELF_CNT" ).append("\n"); 
		query.append("                        WHEN  BK.CND_CSTMS_FILE_CD = '2'  THEN  1" ).append("\n"); 
		query.append("                        WHEN  BK.CND_CSTMS_FILE_CD = '3'  THEN  0" ).append("\n"); 
		query.append("                        ELSE  0" ).append("\n"); 
		query.append("                        END" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                WHEN  GS.CHG_CD = 'SMC' AND BK.SVC_SCP_CD IN ( 'TAW', 'SAW' )" ).append("\n"); 
		query.append("                  THEN  CASE" ).append("\n"); 
		query.append("                        WHEN  BK.USA_CSTMS_FILE_CD  = '1' THEN  BK.BKG_HBL_CNT" ).append("\n"); 
		query.append("                        WHEN  BK.USA_CSTMS_FILE_CD  = '2' THEN  0" ).append("\n"); 
		query.append("                        WHEN  BK.USA_CSTMS_FILE_CD  = '3' THEN  1" ).append("\n"); 
		query.append("                        ELSE  0" ).append("\n"); 
		query.append("                        END" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                WHEN  GS.CHG_CD = 'SMC'" ).append("\n"); 
		query.append("                  THEN  1 + BK.BKG_HBL_CNT" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                ELSE  0" ).append("\n"); 
		query.append("                END RAT_AS_QTY          ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                GS.RAT_UT_CD            ," ).append("\n"); 
		query.append("                GS.FRT_INCL_XCLD_DIV_CD ," ).append("\n"); 
		query.append("                GS.FRT_TERM_CD          ," ).append("\n"); 
		query.append("                GS.CGO_TP_CD            ," ).append("\n"); 
		query.append("                GS.RCV_TERM_CD          ," ).append("\n"); 
		query.append("                GS.DE_TERM_CD           ," ).append("\n"); 
		query.append("                GS.IMDG_CLSS_CD         ," ).append("\n"); 
		query.append("                GS.SOC_FLG              ," ).append("\n"); 
		query.append("                GS.PRC_HNGR_BAR_TP_CD   ," ).append("\n"); 
		query.append("                GS.IN_GA_FLG            ," ).append("\n"); 
		query.append("                GS.CNTR_WGT             ," ).append("\n"); 
		query.append("                GS.OFT_CHG_AMT          ," ).append("\n"); 
		query.append("                GS.OAR_CHG_AMT          ," ).append("\n"); 
		query.append("                GS.DAR_CHG_AMT" ).append("\n"); 
		query.append("        FROM    BK  ," ).append("\n"); 
		query.append("                GS" ).append("\n"); 
		query.append("        WHERE   GS.CHG_CD IN ( 'CMS', 'NMS', 'SMC' )" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("WHERE   RAT_AS_QTY  > 0" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("SELECT  BKG_NO                ," ).append("\n"); 
		query.append("        OFT_CMB_SEQ           ," ).append("\n"); 
		query.append("        CHG_CD                ," ).append("\n"); 
		query.append("        FLT_PCT_TP_CD         ," ).append("\n"); 
		query.append("        PCT_BSE_CD            ," ).append("\n"); 
		query.append("        CURR_CD               ," ).append("\n"); 
		query.append("        CHG_UT_AMT            ," ).append("\n"); 
		query.append("        RAT_AS_QTY            ," ).append("\n"); 
		query.append("        RAT_UT_CD             ," ).append("\n"); 
		query.append("        CHG_AMT               ," ).append("\n"); 
		query.append("        FRT_INCL_XCLD_DIV_CD  ," ).append("\n"); 
		query.append("        FRT_TERM_CD           ," ).append("\n"); 
		query.append("        CGO_TP_CD             ," ).append("\n"); 
		query.append("        RCV_TERM_CD           ," ).append("\n"); 
		query.append("        DE_TERM_CD            ," ).append("\n"); 

	}
	/**
	 * Query 생성
	 */
	public void setQuery2(){
		query.append("        IMDG_CLSS_CD          ," ).append("\n"); 
		query.append("        SOC_FLG               ," ).append("\n"); 
		query.append("        PRC_HNGR_BAR_TP_CD    ," ).append("\n"); 
		query.append("        IN_GA_FLG             ," ).append("\n"); 
		query.append("        CNTR_WGT" ).append("\n"); 
		query.append("FROM    (" ).append("\n"); 
		query.append("        SELECT  FN.BKG_NO               ," ).append("\n"); 
		query.append("                FN.OFT_CMB_SEQ          ," ).append("\n"); 
		query.append("                FN.CHG_CD               ," ).append("\n"); 
		query.append("                FN.FLT_PCT_TP_CD        ," ).append("\n"); 
		query.append("                FN.PCT_BSE_CD           ," ).append("\n"); 
		query.append("                FN.CURR_CD              ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN    FN.RAT_UT_CD  = 'PC' AND FN.CHG_CD = 'CAF'" ).append("\n"); 
		query.append("                  THEN  CASE WHEN 'OFT' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.OFT_CHG_AMT ELSE 0 END" ).append("\n"); 
		query.append("                        + CASE WHEN 'OAR' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.OAR_CHG_AMT ELSE 0 END" ).append("\n"); 
		query.append("                        + CASE WHEN 'DAR' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.DAR_CHG_AMT ELSE 0 END" ).append("\n"); 
		query.append("                WHEN  FN.RAT_UT_CD  = 'PC'" ).append("\n"); 
		query.append("                  THEN NVL(F1.CHG_AMT, 0)" ).append("\n"); 
		query.append("                ELSE  FN.CHG_UT_AMT" ).append("\n"); 
		query.append("                END CHG_UT_AMT          ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                RAT_AS_QTY              ," ).append("\n"); 
		query.append("                RAT_UT_CD               ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                WHEN  FN.RAT_UT_CD  = 'PC' AND FN.CHG_CD = 'VDT'" ).append("\n"); 
		query.append("                  THEN ROUND(NVL(F1.CHG_AMT, 0) / ( 100 - RAT_AS_QTY ) * RAT_AS_QTY)" ).append("\n"); 
		query.append("                WHEN  FN.RAT_UT_CD  = 'PC' AND FN.CHG_CD = 'VTT'" ).append("\n"); 
		query.append("                  THEN ROUND(NVL(F1.CHG_AMT, 0) / ( 100 - RAT_AS_QTY ) * RAT_AS_QTY, 2)" ).append("\n"); 
		query.append("                WHEN  FN.RAT_UT_CD  = 'PC' AND FN.CHG_CD = 'CAF'" ).append("\n"); 
		query.append("                  THEN ROUND(" ).append("\n"); 
		query.append("                        (" ).append("\n"); 
		query.append("                        CASE WHEN 'OFT' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.OFT_CHG_AMT ELSE 0 END" ).append("\n"); 
		query.append("                        + CASE WHEN 'OAR' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.OAR_CHG_AMT ELSE 0 END" ).append("\n"); 
		query.append("                        + CASE WHEN 'DAR' IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = FN.PCT_BSE_CD ) THEN FN.DAR_CHG_AMT ELSE 0 END" ).append("\n"); 
		query.append("                        ) * RAT_AS_QTY / 100, 2)" ).append("\n"); 
		query.append("                WHEN  FN.RAT_UT_CD  = 'PC'" ).append("\n"); 
		query.append("                  THEN ROUND(NVL(F1.CHG_AMT, 0) * RAT_AS_QTY / 100, 2)" ).append("\n"); 
		query.append("                ELSE  FN.CHG_AMT" ).append("\n"); 
		query.append("                END CHG_AMT             ," ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                FN.FRT_INCL_XCLD_DIV_CD ," ).append("\n"); 
		query.append("                DECODE(FN.FRT_TERM_CD, 'C', 'C', 'P') FRT_TERM_CD ," ).append("\n"); 
		query.append("                FN.CGO_TP_CD            ," ).append("\n"); 
		query.append("                FN.RCV_TERM_CD          ," ).append("\n"); 
		query.append("                FN.DE_TERM_CD           ," ).append("\n"); 
		query.append("                FN.IMDG_CLSS_CD         ," ).append("\n"); 
		query.append("                FN.SOC_FLG              ," ).append("\n"); 
		query.append("                FN.PRC_HNGR_BAR_TP_CD   ," ).append("\n"); 
		query.append("                FN.IN_GA_FLG            ," ).append("\n"); 
		query.append("                FN.CNTR_WGT" ).append("\n"); 
		query.append("        FROM    FN  ," ).append("\n"); 
		query.append("                (" ).append("\n"); 
		query.append("                SELECT  OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                        CHG_CD        ," ).append("\n"); 
		query.append("                        SUM(CHG_AMT)  CHG_AMT" ).append("\n"); 
		query.append("                FROM    (" ).append("\n"); 
		query.append("                        SELECT  F1.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                                F1.CHG_CD       ," ).append("\n"); 
		query.append("                                F2.CHG_AMT  CHG_AMT" ).append("\n"); 
		query.append("                        FROM    FN  F1  ," ).append("\n"); 
		query.append("                                FN  F2" ).append("\n"); 
		query.append("                        WHERE   F2.OFT_CMB_SEQ  = F1.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                        AND     F2.CHG_CD       IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = F1.PCT_BSE_CD )" ).append("\n"); 
		query.append("                        AND     F2.CURR_CD      = F1.CURR_CD" ).append("\n"); 
		query.append("                        AND     F2.FRT_TERM_CD  = F1.FRT_TERM_CD" ).append("\n"); 
		query.append("                        AND     (" ).append("\n"); 
		query.append("                                    F1.CHG_CD   <> 'VTT'" ).append("\n"); 
		query.append("                                OR  F2.CHG_CD   NOT IN ( DECODE(F1.POR_CNT_CD, 'VN', 'DTH', 'XXX'), DECODE(F1.POR_CNT_CD, 'VN', 'DDC', 'XXX'), DECODE(F1.DEL_CNT_CD, 'VN', 'OTH', 'XXX'), DECODE(F1.DEL_CNT_CD, 'VN', 'ORC', 'XXX') )" ).append("\n"); 
		query.append("                                )" ).append("\n"); 
		query.append("                        AND     F2.RAT_UT_CD    <> 'PC'" ).append("\n"); 
		query.append("                        AND     F2.FRT_INCL_XCLD_DIV_CD <> 'I'" ).append("\n"); 
		query.append("                        AND     F1.RAT_UT_CD    = 'PC'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                        UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                        SELECT  F1.OFT_CMB_SEQ  ," ).append("\n"); 
		query.append("                                F1.CHG_CD       ," ).append("\n"); 
		query.append("                                F2.CHG_AMT  CHG_AMT" ).append("\n"); 
		query.append("                        FROM    FN  F1  ," ).append("\n"); 
		query.append("                                BKG_AUTO_RT_OCN_FRT_TMP F2" ).append("\n"); 
		query.append("                        WHERE   F2.OFT_CMB_SEQ  = F1.OFT_CMB_SEQ" ).append("\n"); 
		query.append("                        AND     F2.CHG_CD       IN ( SELECT CHG_CD FROM PRI_SCG_PCT_BSE_CHG A WHERE A.PCT_BSE_CD = F1.PCT_BSE_CD )" ).append("\n"); 
		query.append("                        AND     F2.CURR_CD      = F1.CURR_CD" ).append("\n"); 
		query.append("                        AND     ( SELECT FRT_TERM_CD FROM BK )  = F1.FRT_TERM_CD" ).append("\n"); 
		query.append("                        AND     F2.CTRT_CNTR_TPSZ_CD  <> 'PC'" ).append("\n"); 
		query.append("                        AND     F1.RAT_UT_CD          = 'PC'" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                GROUP BY" ).append("\n"); 
		query.append("                        OFT_CMB_SEQ   ," ).append("\n"); 
		query.append("                        CHG_CD" ).append("\n"); 
		query.append("                ) F1" ).append("\n"); 
		query.append("        WHERE   F1.OFT_CMB_SEQ(+) = FN.OFT_CMB_SEQ" ).append("\n"); 
		query.append("        AND     F1.CHG_CD(+)      = FN.CHG_CD" ).append("\n"); 
		query.append("        AND     DECODE(@[rt_aud_tp_cd], 'A', FN.FRT_INCL_XCLD_DIV_CD, 'N')  = 'N'" ).append("\n"); 
		query.append("        )" ).append("\n"); 
		query.append("WHERE   CHG_UT_AMT  <>  0" ).append("\n"); 
		query.append("--OR      RAT_UT_CD   = 'PC'" ).append("\n"); 
		query.append("ORDER BY" ).append("\n"); 
		query.append("        BKG_NO              ," ).append("\n"); 
		query.append("        OFT_CMB_SEQ         ," ).append("\n"); 
		query.append("        CHG_CD              ," ).append("\n"); 
		query.append("        RAT_UT_CD           ," ).append("\n"); 
		query.append("        FRT_INCL_XCLD_DIV_CD," ).append("\n"); 
		query.append("        FRT_TERM_CD         ," ).append("\n"); 
		query.append("        CGO_TP_CD           ," ).append("\n"); 
		query.append("        RCV_TERM_CD         ," ).append("\n"); 
		query.append("        DE_TERM_CD          ," ).append("\n"); 
		query.append("        IMDG_CLSS_CD        ," ).append("\n"); 
		query.append("        SOC_FLG             ," ).append("\n"); 
		query.append("        PRC_HNGR_BAR_TP_CD  ," ).append("\n"); 
		query.append("        IN_GA_FLG           ," ).append("\n"); 
		query.append("        CNTR_WGT" ).append("\n"); 
		query.append("/*AUTORATING_20100329-001*/" ).append("\n"); 

	}
}