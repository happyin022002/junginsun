<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="PerformanceReportDBDAOVesselUtilizationStatusReportOutVORSQL">
			<desc><![CDATA[search]]></desc>
			<sql><![CDATA[
SELECT  
FIN.*
, MAX(COUNT_PORT_SEQ) OVER() AS MAX_PORT_SEQ
, UTIL_E||'%' AS UTIL_E_PCT
, UTIL_W||'%' AS UTIL_W_PCT
, PORT_LOD_PCT_INT||'%' AS PORT_LOD_PCT
, DECODE(CEIL(PORT_LOD_PCT_INT/80),2,'','1') AS UTIL_INDI
, DECODE(SKD_DIR_CD ,'W',' ','N',' ',CASE WHEN UTIL_E < 70 THEN 'RED'
                                   WHEN UTIL_E >= 70 AND UTIL_E < 90 THEN 'PURPLE'
                                   ELSE 'BLUE'END
         ) AS UTIL_E_COLOR
, DECODE(SKD_DIR_CD ,'E',' ','S',' ', CASE WHEN UTIL_W < 70 THEN 'RED'
                                    WHEN UTIL_W >= 70 AND UTIL_W < 90 THEN 'PURPLE'
                                    ELSE 'BLUE'
                                    END
         ) AS UTIL_W_COLOR  
FROM ( 
SELECT 
  SLAN_CD
, VSL_CD||SKD_VOY_NO||SKD_DIR_CD AS VVD
, VSL_CD
, SKD_VOY_NO
, SKD_DIR_CD
, POL_YD_CD
, FCMD as F_CMD
, VVD_SEQ
, PORT_SEQ
, COUNT(VVD_SEQ) OVER(PARTITION BY ORDERBY,VVD_SEQ) AS COUNT_PORT_SEQ
, BSA
, ROUND((TTL_E+TTL_S)/DECODE(NVL(BSA,1),0,1,NVL(BSA,1))*100) AS UTIL_E
, ROUND((TTL_W+TTL_N)/DECODE(NVL(BSA,1),0,1,NVL(BSA,1))*100) AS UTIL_W
, TRIM(TO_CHAR(TTL_E+TTL_S,'99,990.9')) AS TTL_E
, TRIM(TO_CHAR(TTL_W+TTL_N,'99,990.9')) AS TTL_W
 
, TRIM(TO_CHAR(SUB_TOT_LOD_LOCAL_E+SUB_TOT_LOD_LOCAL_S,'99,990.9')) AS SUB_TOT_LOD_LOCAL_E
, TRIM(TO_CHAR(SUB_TOT_LOD_TS_E+SUB_TOT_LOD_TS_S,'99,990.9')) AS SUB_TOT_LOD_TS_E
, TRIM(TO_CHAR(SUB_TOT_LOD_IPC_E+SUB_TOT_LOD_IPC_S,'99,990.9')) AS SUB_TOT_LOD_IPC_E
, TRIM(TO_CHAR(SUB_TOT_LOD_TPS_E+SUB_TOT_LOD_TPS_S,'99,990.9')) AS SUB_TOT_LOD_TPS_E
, TRIM(TO_CHAR(SUB_TOT_LOD_EUR_E+SUB_TOT_LOD_EUR_S,'99,990.9')) AS SUB_TOT_LOD_EUR_E
, TRIM(TO_CHAR(SUB_TOT_LOD_MTY_E+SUB_TOT_LOD_MTY_S,'99,990.9')) AS SUB_TOT_LOD_MTY_E

, TRIM(TO_CHAR(SUB_TOT_LOD_LOCAL_W+SUB_TOT_LOD_LOCAL_N,'99,990.9')) AS SUB_TOT_LOD_LOCAL_W
, TRIM(TO_CHAR(SUB_TOT_LOD_TS_W+SUB_TOT_LOD_TS_N,'99,990.9')) AS SUB_TOT_LOD_TS_W
, TRIM(TO_CHAR(SUB_TOT_LOD_IPC_W+SUB_TOT_LOD_IPC_N,'99,990.9')) AS SUB_TOT_LOD_IPC_W
, TRIM(TO_CHAR(SUB_TOT_LOD_TPS_W+SUB_TOT_LOD_TPS_N,'99,990.9')) AS SUB_TOT_LOD_TPS_W
, TRIM(TO_CHAR(SUB_TOT_LOD_EUR_W+SUB_TOT_LOD_EUR_N,'99,990.9')) AS SUB_TOT_LOD_EUR_W
, TRIM(TO_CHAR(SUB_TOT_LOD_MTY_W+SUB_TOT_LOD_MTY_N,'99,990.9')) AS SUB_TOT_LOD_MTY_W


,DECODE(VPS_PORT_CD,'OTHERS',VPS_PORT_CD||'('||DECODE(POD_OTH,NULL,'','DIS:'||POD_OTH||'  ')||DECODE(POL_OTH,NULL,'','LOD:'||POL_OTH)||')',VPS_PORT_CD) AS VPS_PORT_CD

, SUBSTR(VPS_ETA_DT,6) AS VPS_ETA_DT
, SUBSTR(VPS_ETD_DT,6) AS VPS_ETD_DT

/* LOD부분은 첫번째 포트에서 이전배에서 로딩된 수량을 표시한다.*/
, TRIM(TO_CHAR(LOD_LOCAL, '99,990.9'))||DECODE(PORT_SEQ,1,DECODE(PRE_LOD_LOCAL,0,'','('||TRIM(TO_CHAR(PRE_LOD_LOCAL,'99,990.9'))||')'),'') AS LOD_LOCAL
, TRIM(TO_CHAR(LOD_TS, '99,990.9'))||DECODE(PORT_SEQ,1,DECODE(PRE_LOD_TS,0,'','('||TRIM(TO_CHAR(PRE_LOD_TS,'99,990.9'))||')'),'') AS LOD_TS
, TRIM(TO_CHAR(LOD_IPC, '99,990.9'))||DECODE(PORT_SEQ,1,DECODE(PRE_LOD_IPC,0,'','('||TRIM(TO_CHAR(PRE_LOD_IPC,'99,990.9'))||')'),'') AS LOD_IPC
, TRIM(TO_CHAR(LOD_TPS, '99,990.9'))||DECODE(PORT_SEQ,1,DECODE(PRE_LOD_TPS,0,'','('||TRIM(TO_CHAR(PRE_LOD_TPS,'99,990.9'))||')'),'') AS LOD_TPS
, TRIM(TO_CHAR(LOD_EUR, '99,990.9'))||DECODE(PORT_SEQ,1,DECODE(PRE_LOD_EUR,0,'','('||TRIM(TO_CHAR(PRE_LOD_EUR,'99,990.9'))||')'),'') AS LOD_EUR
, TRIM(TO_CHAR(LOD_MTY, '99,990.9'))||DECODE(PORT_SEQ,1,DECODE(PRE_LOD_MTY,0,'','('||TRIM(TO_CHAR(PRE_LOD_MTY,'99,990.9'))||')'),'') AS LOD_MTY
, TRIM(TO_CHAR(LOD_TTL, '99,990.9'))||DECODE(PORT_SEQ,1,DECODE(PRE_LOD_LOCAL+PRE_LOD_TS+PRE_LOD_MTY,0,'','('||TRIM(TO_CHAR(PRE_LOD_LOCAL+PRE_LOD_TS+PRE_LOD_MTY,'99,990.9'))||')'),'') AS LOD_TTL

 /* RAW DATA SHEET의 이전배 물량 표시: 첫번째 포트에서 이후 내릴 전배의 물량을 모두 더해주고, 두번째 포트 부터는 그 포트에서 내릴 이전배 물량을 마이너스로 표시한다.*/
 /* 즉 첫번째 포트의 이전배 로딩 물량은 이후에 내릴 이전배 물량을 더한 합이 된다.*/
, DECODE(PORT_SEQ,1, DECODE(PRE_LOD_LOCAL+PRE_LOD_TS+PRE_LOD_MTY,0,'', TRIM(TO_CHAR(PRE_LOD_LOCAL+PRE_LOD_TS+PRE_LOD_MTY,'99,990.9'))), 
                     DECODE(PRE_DIS_LOCAL+PRE_DIS_TS+PRE_DIS_MTY,0,'', '-'||TRIM(TO_CHAR(PRE_DIS_LOCAL+PRE_DIS_TS+PRE_DIS_MTY,'99,990.9'))) ) AS LAST_PORT_LOADING


/* 이전배에서 내린 수량을 표시한다.*/
, TRIM(TO_CHAR(DIS_LOCAL, '99,990.9'))||DECODE(PRE_DIS_LOCAL,0,'','('||TRIM(TO_CHAR(PRE_DIS_LOCAL,'99,990.9'))||')') AS DIS_LOCAL 
, TRIM(TO_CHAR(DIS_TS, '99,990.9'))||DECODE(PRE_DIS_TS,0,'','('||TRIM(TO_CHAR(PRE_DIS_TS,'99,990.9'))||')') AS DIS_TS 
, TRIM(TO_CHAR(DIS_IPC, '99,990.9'))||DECODE(PRE_DIS_IPC,0,'','('||TRIM(TO_CHAR(PRE_DIS_IPC,'99,990.9'))||')') AS DIS_IPC 
, TRIM(TO_CHAR(DIS_TPS, '99,990.9'))||DECODE(PRE_DIS_TPS,0,'','('||TRIM(TO_CHAR(PRE_DIS_TPS,'99,990.9'))||')') AS DIS_TPS 
, TRIM(TO_CHAR(DIS_EUR, '99,990.9'))||DECODE(PRE_DIS_EUR,0,'','('||TRIM(TO_CHAR(PRE_DIS_EUR,'99,990.9'))||')') AS DIS_EUR 
, TRIM(TO_CHAR(DIS_MTY, '99,990.9'))||DECODE(PRE_DIS_MTY,0,'','('||TRIM(TO_CHAR(PRE_DIS_MTY,'99,990.9'))||')') AS DIS_MTY 
, TRIM(TO_CHAR(DIS_TTL, '99,990.9'))||DECODE(PRE_DIS_LOCAL+PRE_DIS_TS+PRE_DIS_MTY,0,'','('||TRIM(TO_CHAR(PRE_DIS_LOCAL+PRE_DIS_TS+PRE_DIS_MTY,'99,990.9'))||')')  AS DIS_TTL 


, TRIM(TO_CHAR(ROB_LOCAL,'99,990.9')) AS ROB_LOCAL
, TRIM(TO_CHAR(ROB_TS,'99,990.9')) AS ROB_TS
, TRIM(TO_CHAR(ROB_IPC,'99,990.9')) AS ROB_IPC
, TRIM(TO_CHAR(ROB_TPS,'99,990.9')) AS ROB_TPS
, TRIM(TO_CHAR(ROB_EUR,'99,990.9')) AS ROB_EUR
, TRIM(TO_CHAR(ROB_MTY,'99,990.9')) AS ROB_MTY
, TRIM(TO_CHAR(ROB_TOT,'99,990.9')) AS ROB_TOT

, ROUND((ROB_TOT)/DECODE(BSA,0,1,BSA)*100) AS PORT_LOD_PCT_INT


, TRIM(TO_CHAR(TOT_LOD_LOCAL_E+TOT_LOD_LOCAL_S,'99,990.9')) AS TOT_LOD_LOCAL_E
, TRIM(TO_CHAR(TOT_LOD_TS_E+TOT_LOD_TS_S,'99,990.9')) AS TOT_LOD_TS_E
, TRIM(TO_CHAR(TOT_LOD_IPC_E+TOT_LOD_IPC_S,'99,990.9')) AS TOT_LOD_IPC_E
, TRIM(TO_CHAR(TOT_LOD_TPS_E+TOT_LOD_TPS_S,'99,990.9')) AS TOT_LOD_TPS_E
, TRIM(TO_CHAR(TOT_LOD_EUR_E+TOT_LOD_EUR_S,'99,990.9')) AS TOT_LOD_EUR_E
, TRIM(TO_CHAR(TOT_LOD_MTY_E+TOT_LOD_MTY_S,'99,990.9')) AS TOT_LOD_MTY_E

, TRIM(TO_CHAR(TOT_LOD_LOCAL_W+TOT_LOD_LOCAL_N,'99,990.9')) AS TOT_LOD_LOCAL_W
, TRIM(TO_CHAR(TOT_LOD_TS_W+TOT_LOD_TS_N,'99,990.9')) AS TOT_LOD_TS_W
, TRIM(TO_CHAR(TOT_LOD_IPC_W+TOT_LOD_IPC_N,'99,990.9')) AS TOT_LOD_IPC_W
, TRIM(TO_CHAR(TOT_LOD_TPS_W+TOT_LOD_TPS_N,'99,990.9')) AS TOT_LOD_TPS_W
, TRIM(TO_CHAR(TOT_LOD_EUR_W+TOT_LOD_EUR_N,'99,990.9')) AS TOT_LOD_EUR_W
, TRIM(TO_CHAR(TOT_LOD_MTY_W+TOT_LOD_MTY_N,'99,990.9')) AS TOT_LOD_MTY_W

, TRIM(TO_CHAR(TOT_BSA_E+TOT_BSA_S,'99,990.9')) AS TOT_BSA_E
, TRIM(TO_CHAR(TOT_BSA_W+TOT_BSA_N,'99,990.9')) AS TOT_BSA_W  
, ROUND((TOT_LOD_E+TOT_LOD_S)/DECODE(TOT_BSA_E+TOT_BSA_S,0,1,TOT_BSA_E+TOT_BSA_S)*100)||'%' AS TOT_LIFT_E_PCT
, ROUND((TOT_LOD_W+TOT_LOD_N)/DECODE(TOT_BSA_W+TOT_BSA_N,0,1,TOT_BSA_W+TOT_BSA_N)*100)||'%' AS TOT_LIFT_W_PCT 
 
, TRIM(TO_CHAR(TOT_LOD_E+TOT_LOD_S,'99,990.9')) AS TOT_LOD_E
, TRIM(TO_CHAR(TOT_LOD_W+TOT_LOD_N,'99,990.9')) AS TOT_LOD_W

FROM (

    SELECT
        SUM(DECODE(SKD_DIR_CD, 'E', DECODE(PORT_SEQ, 1, SUB_TOT_LOD_LOCAL_E+SUB_TOT_LOD_TS_E+SUB_TOT_LOD_MTY_E, 0), 0)) OVER() AS TOT_LOD_E 
       ,SUM(DECODE(SKD_DIR_CD, 'W', DECODE(PORT_SEQ, 1, SUB_TOT_LOD_LOCAL_W+SUB_TOT_LOD_TS_W+SUB_TOT_LOD_MTY_W, 0), 0)) OVER() AS TOT_LOD_W 
       ,SUM(DECODE(SKD_DIR_CD, 'S', DECODE(PORT_SEQ, 1, SUB_TOT_LOD_LOCAL_S+SUB_TOT_LOD_TS_S+SUB_TOT_LOD_MTY_S, 0), 0)) OVER() AS TOT_LOD_S 
       ,SUM(DECODE(SKD_DIR_CD, 'N', DECODE(PORT_SEQ, 1, SUB_TOT_LOD_LOCAL_N+SUB_TOT_LOD_TS_N+SUB_TOT_LOD_MTY_N, 0), 0)) OVER() AS TOT_LOD_N 

       
       ,SUM(DECODE(SKD_DIR_CD,'E',DECODE(PORT_SEQ,1,SUB_TOT_LOD_LOCAL_E,0),0)) OVER() AS TOT_LOD_LOCAL_E
       ,SUM(DECODE(SKD_DIR_CD,'E',DECODE(PORT_SEQ,1,SUB_TOT_LOD_TS_E,0),0)) OVER() AS TOT_LOD_TS_E
       ,SUM(DECODE(SKD_DIR_CD,'E',DECODE(PORT_SEQ,1,SUB_TOT_LOD_IPC_E,0),0)) OVER() AS TOT_LOD_IPC_E
       ,SUM(DECODE(SKD_DIR_CD,'E',DECODE(PORT_SEQ,1,SUB_TOT_LOD_TPS_E,0),0)) OVER() AS TOT_LOD_TPS_E
       ,SUM(DECODE(SKD_DIR_CD,'E',DECODE(PORT_SEQ,1,SUB_TOT_LOD_EUR_E,0),0)) OVER() AS TOT_LOD_EUR_E
       ,SUM(DECODE(SKD_DIR_CD,'E',DECODE(PORT_SEQ,1,SUB_TOT_LOD_MTY_E,0),0)) OVER() AS TOT_LOD_MTY_E
       
       ,SUM(DECODE(SKD_DIR_CD,'W',DECODE(PORT_SEQ,1,SUB_TOT_LOD_LOCAL_W,0),0)) OVER() AS TOT_LOD_LOCAL_W
       ,SUM(DECODE(SKD_DIR_CD,'W',DECODE(PORT_SEQ,1,SUB_TOT_LOD_TS_W,0),0)) OVER() AS TOT_LOD_TS_W
       ,SUM(DECODE(SKD_DIR_CD,'W',DECODE(PORT_SEQ,1,SUB_TOT_LOD_IPC_W,0),0)) OVER() AS TOT_LOD_IPC_W
       ,SUM(DECODE(SKD_DIR_CD,'W',DECODE(PORT_SEQ,1,SUB_TOT_LOD_TPS_W,0),0)) OVER() AS TOT_LOD_TPS_W
       ,SUM(DECODE(SKD_DIR_CD,'W',DECODE(PORT_SEQ,1,SUB_TOT_LOD_EUR_W,0),0)) OVER() AS TOT_LOD_EUR_W      
       ,SUM(DECODE(SKD_DIR_CD,'W',DECODE(PORT_SEQ,1,SUB_TOT_LOD_MTY_W,0),0)) OVER() AS TOT_LOD_MTY_W
        
       ,SUM(DECODE(SKD_DIR_CD,'S',DECODE(PORT_SEQ,1,SUB_TOT_LOD_LOCAL_E,0),0)) OVER() AS TOT_LOD_LOCAL_S
       ,SUM(DECODE(SKD_DIR_CD,'S',DECODE(PORT_SEQ,1,SUB_TOT_LOD_TS_E,0),0)) OVER() AS TOT_LOD_TS_S
       ,SUM(DECODE(SKD_DIR_CD,'S',DECODE(PORT_SEQ,1,SUB_TOT_LOD_IPC_E,0),0)) OVER() AS TOT_LOD_IPC_S
       ,SUM(DECODE(SKD_DIR_CD,'S',DECODE(PORT_SEQ,1,SUB_TOT_LOD_TPS_E,0),0)) OVER() AS TOT_LOD_TPS_S
       ,SUM(DECODE(SKD_DIR_CD,'S',DECODE(PORT_SEQ,1,SUB_TOT_LOD_EUR_E,0),0)) OVER() AS TOT_LOD_EUR_S
       ,SUM(DECODE(SKD_DIR_CD,'S',DECODE(PORT_SEQ,1,SUB_TOT_LOD_MTY_E,0),0)) OVER() AS TOT_LOD_MTY_S
       
       ,SUM(DECODE(SKD_DIR_CD,'N',DECODE(PORT_SEQ,1,SUB_TOT_LOD_LOCAL_W,0),0)) OVER() AS TOT_LOD_LOCAL_N
       ,SUM(DECODE(SKD_DIR_CD,'N',DECODE(PORT_SEQ,1,SUB_TOT_LOD_TS_W,0),0)) OVER() AS TOT_LOD_TS_N
       ,SUM(DECODE(SKD_DIR_CD,'N',DECODE(PORT_SEQ,1,SUB_TOT_LOD_IPC_W,0),0)) OVER() AS TOT_LOD_IPC_N
       ,SUM(DECODE(SKD_DIR_CD,'N',DECODE(PORT_SEQ,1,SUB_TOT_LOD_TPS_W,0),0)) OVER() AS TOT_LOD_TPS_N
       ,SUM(DECODE(SKD_DIR_CD,'N',DECODE(PORT_SEQ,1,SUB_TOT_LOD_EUR_W,0),0)) OVER() AS TOT_LOD_EUR_N
       ,SUM(DECODE(SKD_DIR_CD,'N',DECODE(PORT_SEQ,1,SUB_TOT_LOD_MTY_W,0),0)) OVER() AS TOT_LOD_MTY_N
       
	   ,SUB_TOT_LOD_LOCAL_E +SUB_TOT_LOD_TS_E+SUB_TOT_LOD_MTY_E AS TTL_E 
       ,SUB_TOT_LOD_LOCAL_S +SUB_TOT_LOD_TS_S+SUB_TOT_LOD_MTY_S AS TTL_S 
       ,SUB_TOT_LOD_LOCAL_W +SUB_TOT_LOD_TS_W+SUB_TOT_LOD_MTY_W AS TTL_W 
       ,SUB_TOT_LOD_LOCAL_N +SUB_TOT_LOD_TS_N+SUB_TOT_LOD_MTY_N AS TTL_N 

      
      , SUM(DECODE(SKD_DIR_CD,'E',DECODE(PORT_SEQ,1,BSA,0),0)) OVER() AS TOT_BSA_E
      , SUM(DECODE(SKD_DIR_CD,'W',DECODE(PORT_SEQ,1,BSA,0),0)) OVER() AS TOT_BSA_W
      , SUM(DECODE(SKD_DIR_CD,'S',DECODE(PORT_SEQ,1,BSA,0),0)) OVER() AS TOT_BSA_S
      , SUM(DECODE(SKD_DIR_CD,'N',DECODE(PORT_SEQ,1,BSA,0),0)) OVER() AS TOT_BSA_N
           
      , LOD_LOCAL + LOD_TS + LOD_MTY AS LOD_TTL 
      , DIS_LOCAL + DIS_TS + DIS_MTY AS DIS_TTL 
      , ROB_LOCAL + ROB_TS + ROB_MTY AS ROB_TOT 
      , ZZ.*
    FROM (
    
        SELECT 
          
         SUM(NOW_LOCAL) OVER (PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) ROB_LOCAL
         ,SUM(NOW_TS) OVER (PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) ROB_TS
         ,SUM(NOW_IPC) OVER (PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) ROB_IPC
         ,SUM(NOW_TPS) OVER (PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) ROB_TPS
         ,SUM(NOW_EUR) OVER (PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) ROB_EUR
         ,SUM(NOW_MTY) OVER (PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) ROB_MTY
         
         ,SUM(DECODE(SKD_DIR_CD,'E',LOD_LOCAL,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_LOCAL_E
         ,SUM(DECODE(SKD_DIR_CD,'E',LOD_TS,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_TS_E
         ,SUM(DECODE(SKD_DIR_CD,'E',LOD_IPC,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_IPC_E
         ,SUM(DECODE(SKD_DIR_CD,'E',LOD_TPS,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_TPS_E
         ,SUM(DECODE(SKD_DIR_CD,'E',LOD_EUR,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_EUR_E
         ,SUM(DECODE(SKD_DIR_CD,'E',LOD_MTY,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_MTY_E
         
         ,SUM(DECODE(SKD_DIR_CD,'W',LOD_LOCAL,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_LOCAL_W
         ,SUM(DECODE(SKD_DIR_CD,'W',LOD_TS,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_TS_W
         ,SUM(DECODE(SKD_DIR_CD,'W',LOD_IPC,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_IPC_W
         ,SUM(DECODE(SKD_DIR_CD,'W',LOD_TPS,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_TPS_W
         ,SUM(DECODE(SKD_DIR_CD,'W',LOD_EUR,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_EUR_W
         ,SUM(DECODE(SKD_DIR_CD,'W',LOD_MTY,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_MTY_W
         
         ,SUM(DECODE(SKD_DIR_CD,'S',LOD_LOCAL,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_LOCAL_S
         ,SUM(DECODE(SKD_DIR_CD,'S',LOD_TS,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_TS_S
         ,SUM(DECODE(SKD_DIR_CD,'S',LOD_IPC,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_IPC_S
         ,SUM(DECODE(SKD_DIR_CD,'S',LOD_TPS,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_TPS_S
         ,SUM(DECODE(SKD_DIR_CD,'S',LOD_EUR,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_EUR_S
         ,SUM(DECODE(SKD_DIR_CD,'S',LOD_MTY,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_MTY_S
         
         ,SUM(DECODE(SKD_DIR_CD,'N',LOD_LOCAL,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_LOCAL_N
         ,SUM(DECODE(SKD_DIR_CD,'N',LOD_TS,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_TS_N
         ,SUM(DECODE(SKD_DIR_CD,'N',LOD_IPC,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_IPC_N
         ,SUM(DECODE(SKD_DIR_CD,'N',LOD_TPS,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_TPS_N
         ,SUM(DECODE(SKD_DIR_CD,'N',LOD_EUR,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_EUR_N
         ,SUM(DECODE(SKD_DIR_CD,'N',LOD_MTY,0)) OVER (PARTITION BY VVD_SEQ) SUB_TOT_LOD_MTY_N 
         
         ,YY.*
         FROM ( /*YY*/
    
                    SELECT 
                       /* 이전배의 Dis합이 첫번째 포트의 Lod에 더한다. 즉 이전배의 Lod부분은 첫번째 포트에서만 의미가 있다. */
                       LOD_LOCAL +DECODE(PORT_SEQ,1, PRE_LOD_LOCAL,0) - DIS_LOCAL - PRE_DIS_LOCAL  AS NOW_LOCAL
                      ,LOD_TS    +DECODE(PORT_SEQ,1, PRE_LOD_TS,0) - DIS_TS - PRE_DIS_TS  AS NOW_TS
                      ,LOD_IPC   +DECODE(PORT_SEQ,1, PRE_LOD_IPC,0) - DIS_IPC - PRE_DIS_IPC  AS NOW_IPC
                      ,LOD_TPS   +DECODE(PORT_SEQ,1, PRE_LOD_TPS,0) - DIS_TPS - PRE_DIS_TPS  AS NOW_TPS
                      ,LOD_EUR   +DECODE(PORT_SEQ,1, PRE_LOD_EUR,0) - DIS_EUR - PRE_DIS_EUR  AS NOW_EUR
                      ,LOD_MTY   +DECODE(PORT_SEQ,1, PRE_LOD_MTY,0) - DIS_MTY - PRE_DIS_MTY  AS NOW_MTY
                      , K.*
                    FROM ( /* K */
                    
                            SELECT 
                            /* VVD별 이전배 총 로딩 수에서 현재까지 내릴 수량을 빼서 LOD에 더한다.
                             * 예) 이전배 IPC총수량:100 포트 A  DIS = 0 >>  PRE_LOD_IPC = 100
                             *                       포트 B  DIS = 50 >>  PRE_LOD_IPC = 100 - (0+50) = 50
                             *                       포트 C  DIS = 50 >>  PRE_LOD_IPC = 100 - (0+50+50) = 0
                             * 현재 첫포트 이외에는 PRE_LOD..를 사용하지 않는다.
                             */
                            PRE_DIS_LOCAL_TOT - PRE_DIS_LOCAL_SUM AS PRE_LOD_LOCAL,
                            PRE_DIS_TS_TOT  - PRE_DIS_TS_SUM  AS PRE_LOD_TS,
                            PRE_DIS_IPC_TOT - PRE_DIS_IPC_SUM AS PRE_LOD_IPC,
                            PRE_DIS_TPS_TOT - PRE_DIS_TPS_SUM AS PRE_LOD_TPS,
                            PRE_DIS_EUR_TOT - PRE_DIS_EUR_SUM AS PRE_LOD_EUR,
                            PRE_DIS_MTY_TOT - PRE_DIS_MTY_SUM AS PRE_LOD_MTY,
                            
                            YYYY.*
                            FROM (

                                SELECT 
                                SUM(PRE_DIS_LOCAL) OVER(PARTITION BY VVD_SEQ ) PRE_DIS_LOCAL_TOT,
                                SUM(PRE_DIS_LOCAL) OVER(PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) AS PRE_DIS_LOCAL_SUM,
                                
                                SUM(PRE_DIS_TS) OVER(PARTITION BY VVD_SEQ ) PRE_DIS_TS_TOT,
                                SUM(PRE_DIS_TS) OVER(PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) AS PRE_DIS_TS_SUM,
                                
                                SUM(PRE_DIS_IPC) OVER(PARTITION BY VVD_SEQ ) PRE_DIS_IPC_TOT,
                                SUM(PRE_DIS_IPC) OVER(PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) AS PRE_DIS_IPC_SUM,
                                
                                SUM(PRE_DIS_TPS) OVER(PARTITION BY VVD_SEQ ) PRE_DIS_TPS_TOT,
                                SUM(PRE_DIS_TPS) OVER(PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) AS PRE_DIS_TPS_SUM,
                                
                                SUM(PRE_DIS_EUR) OVER(PARTITION BY VVD_SEQ ) PRE_DIS_EUR_TOT,
                                SUM(PRE_DIS_EUR) OVER(PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) AS PRE_DIS_EUR_SUM,
                                
                                SUM(PRE_DIS_MTY) OVER(PARTITION BY VVD_SEQ ) PRE_DIS_MTY_TOT,
                                SUM(PRE_DIS_MTY) OVER(PARTITION BY VVD_SEQ ORDER BY PORT_SEQ) AS PRE_DIS_MTY_SUM,
                                
                                YYY.*
                                FROM (
                                
                                            SELECT VVD_SEQ
                                                 ,PORT_SEQ
                                                 ,PRE_VVD
												 ,ORDERBY
                                                 ,VPS_PORT_CD,SLAN_CD,VSL_CD,SKD_VOY_NO,SKD_DIR_CD,POL_YD_CD,BSA,FCMD,VPS_ETA_DT,VPS_ETD_DT
                                                 ,LOD_LOCAL,LOD_TS,LOD_IPC,LOD_TPS,LOD_EUR,LOD_MTY
                                                 ,DIS_LOCAL,DIS_TS,DIS_IPC,DIS_TPS,DIS_EUR,DIS_MTY
                                                  ,TO_NUMBER(NVL(BKG_GET_TOKEN_FNC(PRE_DIS,1),0)) AS PRE_DIS_LOCAL
                                                  ,TO_NUMBER(NVL(BKG_GET_TOKEN_FNC(PRE_DIS,2),0)) AS PRE_DIS_TS
                                                 ,TO_NUMBER(NVL(BKG_GET_TOKEN_FNC(PRE_DIS,3),0)) AS PRE_DIS_IPC
                                                 ,TO_NUMBER(NVL(BKG_GET_TOKEN_FNC(PRE_DIS,4),0)) AS PRE_DIS_TPS
                                                 ,TO_NUMBER(NVL(BKG_GET_TOKEN_FNC(PRE_DIS,5),0)) AS PRE_DIS_EUR
                                                 ,TO_NUMBER(NVL(BKG_GET_TOKEN_FNC(PRE_DIS,6),0)) AS PRE_DIS_MTY
                                                ,POL_OTH,POD_OTH
                                                 FROM ( /*YY*/
                                                        SELECT 
                                                          XX.*
														 , MIN(VPS_ETA_DT) OVER(PARTITION BY VVD_SEQ) AS ORDERBY
                                                         , CASE WHEN PORT_SEQ > 1 AND VPS_ETA_DT <= PRE_MAX_ETD_DT THEN BKG_0746_PRE_PORT_DIS_FNC(PRE_VVD,VPS_PORT_CD) END AS PRE_DIS
                                                        FROM ( /*XX*/
                                                        
                                                                SELECT 
                                                                  TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,1)) AS VVD_SEQ
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,2)) AS PORT_SEQ
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,3) AS VPS_PORT_CD
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,4) AS SLAN_CD
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,5) AS VSL_CD
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,6) AS SKD_VOY_NO
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,7) AS SKD_DIR_CD
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,8) AS POL_YD_CD
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,9) AS PRE_VVD
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,10) AS PRE_MAX_ETD_DT
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,11)) AS BSA
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,12) AS FCMD
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,13) AS VPS_ETA_DT
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,14) AS VPS_ETD_DT
                                                                
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,15)) AS LOD_LOCAL
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,16)) AS LOD_TS
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,17)) AS LOD_IPC
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,18)) AS LOD_TPS
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,19)) AS LOD_EUR
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,20)) AS LOD_MTY
                                                                
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,21)) AS DIS_LOCAL
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,22)) AS DIS_TS
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,23)) AS DIS_IPC
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,24)) AS DIS_TPS
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,25)) AS DIS_EUR
                                                                , TO_NUMBER(BKG_GET_TOKEN_FNC(COLUMN_VALUE,26)) AS DIS_MTY
                                                                
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,25) AS POL_OTH
                                                                , BKG_GET_TOKEN_FNC(COLUMN_VALUE,26) AS POD_OTH

                                                                FROM TABLE(BKG_SPLIT_CLOB_FNC((
                                                                            SELECT BKG_JOIN_FULL_CLOB_FNC(CURSOR(
                                                                                    SELECT RESULT
                                                                                    FROM (
                                                                                        SELECT
                                                                                                BKG_0746_LIST2_ALL_FNC(VVD,V_SEQ,PRE_VVD||','||PRE_MAX_ETD_DT||','||BSA||','||F_CMD,'@') AS RESULT
                                                                                        FROM (
                                                                                                SELECT 
                                                                                                   ROWNUM||'' AS V_SEQ
                                                                                                   ,BKG_0746_PREVVD_FNC(VVD) AS PRE_VVD
                                                                                                   , BKG_0746_PRE_MAX_ETD_DT_FNC(VVD) AS PRE_MAX_ETD_DT
                                                                                                  , X.*
                                                                                                FROM (
                                                                                                       SELECT DISTINCT SKD.VSL_CD || SKD.SKD_VOY_NO || SKD.SKD_DIR_CD VVD ,
                                                                                                       (SELECT SUM(FNL_CO_BSA_CAPA) FNL_CO_BSA_CAPA
                                                                                                        FROM   BSA_VVD_MST
                                                                                                        WHERE  VSL_CD = SKD.VSL_CD
                                                                                                        AND    SKD_VOY_NO = SKD.SKD_VOY_NO
                                                                                                        AND    SKD_DIR_CD = SKD.SKD_DIR_CD
																										AND    SUBSTR(RLANE_CD ,1,3) = SKD.SLAN_CD
                                                                                                        GROUP BY VSL_CD, SKD_VOY_NO, SKD_DIR_CD) BSA ,
                                                                                                       @[f_cmd] F_CMD ,
                                                                                                       SKD.SLAN_CD
                                                                                                FROM   (SELECT DISTINCT SKD.VSL_CD ,
                                                                                                               SKD.SKD_VOY_NO ,
                                                                                                               SKD.SKD_DIR_CD ,
                                                                                                               SKD.SLAN_CD
                                                                                                        FROM   VSK_VSL_PORT_SKD SKD
                                                                                                        WHERE  1 = 1
                                                                                                        #if (${slan_cd} != '')
                                                                                                            AND SKD.SLAN_CD = @[slan_cd]
                                                                                                        #end 
                                                                                                        #if (${vvd} != '')
                                                                                                           AND SKD.VSL_CD = SUBSTR(@[vvd],0,4)
                                                                                                           AND SKD.SKD_VOY_NO = SUBSTR(@[vvd],5,4)
                                                                                                           AND SKD.SKD_DIR_CD = SUBSTR(@[vvd],9,1)
                                                                                                        #end                                                                          
                                                                                                        #if (${etd_from_dt} != '' &&  ${dt_tp} == '0')
                                                                                                            AND SKD.VPS_ETD_DT  BETWEEN TO_DATE(@[etd_from_dt] || '00:00:00','YYYY-MM-DD HH24:MI:SS') AND TO_DATE(@[etd_to_dt] || '23:59:59','YYYY-MM-DD HH24:MI:SS')
                                                                                                        #end
                                                                                                         ) SKD ,
                                                                                                       VSK_VSL_SKD VSL ,
                                                                                                       COA_MON_VVD COA
                                                                                                WHERE  SKD.VSL_CD = VSL.VSL_CD
                                                                                                AND    SKD.SKD_VOY_NO = VSL.SKD_VOY_NO
                                                                                                AND    SKD.SKD_DIR_CD = VSL.SKD_DIR_CD
                                                                                                --AND    VSL.SKD_STS_CD <> 'CLO'
                                                                                                AND    SKD.VSL_CD = COA.VSL_CD(+)
                                                                                                AND    SKD.SKD_VOY_NO = COA.SKD_VOY_NO(+)
                                                                                                AND    SKD.SKD_DIR_CD = COA.DIR_CD(+)
                                                                                                AND    WKY_TGT_FLG(+) ='Y'
                                                                                                #if (${trd_cd} != '')
                                                                                                   AND COA.TRD_CD = @[trd_cd]
                                                                                                #end
                                                                                                #if (${sub_trd_cd} != '')
                                                                                                   AND COA.SUB_TRD_CD = @[sub_trd_cd]
                                                                                                #end
                                                                                                #if (${vsl_slan_dir_cd} != '')
                                                                                                   AND COA.DIR_CD = @[vsl_slan_dir_cd]
                                                                                                #end
                                                                                                #if (${cost_year} != '' &&  ${dt_tp} == '1')
                                                                                                   AND COA.COST_YRMON = @[cost_yrmon]
                                                                                                #end
                                                                                                #if (${cost_wk} != '' &&  ${dt_tp} == '1')
                                                                                                   AND COA.COST_WK = @[cost_wk]
                                                                                                #end                                                                
                                                                                                ORDER BY SKD.VSL_CD || SKD.SKD_VOY_NO || SKD.SKD_DIR_CD 
                                                                                                      
                                                                                                    ) X
                                                                                                ) Y
                                                                                        ) GROUP BY RESULT
                                                                              ),'@') FROM DUAL /*JOIN*/
                                                                        ) ,'@')) /*SPLIT*/
                                                                ) XX
                                                                
                                                      ) YY
                                    ) YYY

                                  ) YYYY     

                              ) K         

              ) YY
			WHERE DECODE(VPS_PORT_CD,'OTHERS',LOD_LOCAL+LOD_IPC+LOD_TPS+LOD_EUR+LOD_MTY+DIS_LOCAL+DIS_IPC+DIS_TPS+DIS_EUR+DIS_MTY,1) > 0
        ) ZZ
    ) XXX
WHERE SLAN_CD > ' '
ORDER BY  ORDERBY,VVD_SEQ ,PORT_SEQ
) FIN			]]></sql>
			<params>
				<param name="f_cmd" type="12" value="" out="N"/>
				<param name="slan_cd" type="12" value="" out="N"/>
				<param name="vvd" type="12" value="" out="N"/>
				<param name="etd_from_dt" type="12" value="" out="N"/>
				<param name="etd_to_dt" type="12" value="" out="N"/>
				<param name="trd_cd" type="12" value="" out="N"/>
				<param name="sub_trd_cd" type="12" value="" out="N"/>
				<param name="vsl_slan_dir_cd" type="12" value="" out="N"/>
				<param name="cost_yrmon" type="12" value="" out="N"/>
				<param name="cost_wk" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
