<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="RenewalConsultationDBDAOSearchSettlementTargetListRSQL">
			<desc><![CDATA[Settlement Target List Search]]></desc>
			<sql><![CDATA[
SELECT AR.*
     , CASE WHEN (SUM(AR.CHK_EDIT_CNT) OVER (PARTITION BY AR.GRP_NO)) > 0 THEN 'N'
            ELSE 'Y'
       END AS CHK_EDIT_FLG
  FROM (
        SELECT CASE WHEN AR.STL_VVD_SEQ IS NULL THEN 'I' ELSE 'R' END AS IBFLAG
             , ROWNUM AS RNUM
             , DENSE_RANK() OVER(ORDER BY AR.RE_DIVR_CD DESC, AR.ORD_SEQ||AR.JO_CRR_CD||AR.REV_VVD||AR.RLANE_CD||AR.REV_YRMON||AR.JO_STL_JB_CD) AS GRP_NO
             , AR.RE_DIVR_CD||AR.JO_STL_ITM_CD||AR.ORD_SEQ||AR.JO_CRR_CD||AR.REV_VVD||AR.RLANE_CD||AR.REV_YRMON||AR.JO_STL_JB_CD AS GRP_KEY
             , AR.RE_DIVR_CD
             , AR.JO_STL_ITM_CD
             , AR.ORD_SEQ
             , AR.LOCL_CURR_CD
             , AR.JO_CRR_CD
             , AR.VSL_CD
             , AR.SKD_VOY_NO
             , AR.SKD_DIR_CD
             , AR.REV_DIR_CD
             , AR.REV_VVD
             , AR.RLANE_CD
             , AR.REV_YRMON
             , AR.ACT_DT
             , AR.ACCT_CD
             , AR.ST_DT
             , AR.END_DT
             , AR.SAIL_DYS
             , AR.ESTM_YRMON
             , AR.MIN_ESTM_YRMON
             , AR.MAX_ESTM_YRMON
             , AR.ESTM_DYS
             , AR.JO_STL_JB_CD
             , AR.BSA_QTY
             , AR.BSA_SLT_PRC
             , AR.ESTM_AMT
             , AR.STL_VVD_SEQ
             , AR.ACT_AMT
             , AR.STL_RMK
             , AR.FROM_ESTM_AMT
             , AR.ACT_INV_AMT
             , AR.ACT_SLIP_AMT
             , AR.ACT_APPR_AMT
             , AR.STL_TGT_FLG
             , 'SECOND' AS CHK_QTY_PRIORITY
             , 'SECOND' AS CHK_PRC_PRIORITY
             , AR.CHK_DEL_FLG
             , CASE WHEN AR.ACT_INV_AMT = AR.ACT_SLIP_AMT AND AR.ACT_INV_AMT = AR.ACT_APPR_AMT THEN 'Y'
                    ELSE 'N'
               END AS CHK_EQ_ACT_FLG
             , CASE WHEN INSTR(AR.STL_RMK, 'Delete', 1) > 0 THEN 'Y'
                    ELSE 'N'
               END AS CHK_DEL_MRK_FLG
             , CASE WHEN AR.JO_STL_ITM_CD IN ('S/H','OPR') AND (NVL(AR.ACT_AMT,0) <> 0 OR AR.CHK_DEL_FLG = 'N') THEN 1 ELSE 0 END AS CHK_EDIT_CNT
          FROM (
                SELECT STL.RE_DIVR_CD
                     , STL.JO_STL_ITM_CD
                     , SIT.ORD_SEQ
                     , STL.LOCL_CURR_CD
                     , STL.JO_CRR_CD
                     , STL.VSL_CD
                     , STL.SKD_VOY_NO
                     , STL.SKD_DIR_CD
                     , STL.REV_DIR_CD
                     , STL.VSL_CD||STL.SKD_VOY_NO||STL.SKD_DIR_CD||STL.REV_DIR_CD AS REV_VVD
                     , STL.RLANE_CD
                     , STL.REV_YRMON
                     , STL.ACCT_CD
                     , STL.ACT_DT
                     , TO_CHAR(STL.ST_DT,'YYYYMMDDHH24MI') AS ST_DT
                     , TO_CHAR(STL.END_DT,'YYYYMMDDHH24MI') AS END_DT
                     , STL.SAIL_DYS
                     , STL.ESTM_YRMON
                     , STL.ESTM_DYS
                     , STL.JO_STL_JB_CD
                     , STL.BSA_QTY
                     , STL.BSA_SLT_PRC
                     , CASE WHEN STL.JO_STL_ITM_CD = 'OPR' THEN ROUND((STL.BSA_QTY * STL.BSA_SLT_PRC * STL.ESTM_DYS), 2)
                            WHEN STL.JO_STL_ITM_CD = 'S/H' THEN ROUND((STL.BSA_QTY * STL.BSA_SLT_PRC) * ( DECODE(STL.ESTM_DYS,0,NULL,STL.ESTM_DYS) / DECODE(STL.SAIL_DYS,0,NULL,STL.SAIL_DYS)), 2)
                            ELSE 0
                       END AS ESTM_AMT
                     , CASE WHEN STL.JO_STL_ITM_CD = 'OPR' THEN ROUND((STL.BSA_QTY * STL.BSA_SLT_PRC * STL.ESTM_DYS), 2)
                            WHEN STL.JO_STL_ITM_CD = 'S/H' THEN SUM(ROUND((STL.BSA_QTY * STL.BSA_SLT_PRC) * ( DECODE(STL.ESTM_DYS,0,NULL,STL.ESTM_DYS) / DECODE(STL.SAIL_DYS,0,NULL,STL.SAIL_DYS)), 2))
                                                               OVER (PARTITION BY STL.VSL_CD, STL.SKD_VOY_NO, STL.SKD_DIR_CD, STL.REV_DIR_CD, STL.RLANE_CD, STL.REV_YRMON, STL.JO_CRR_CD, STL.RE_DIVR_CD, STL.JO_STL_ITM_CD, STL.JO_STL_JB_CD)
                            ELSE 0
                       END SUM_ESTM_AMT
                     , MIN(STL.ESTM_YRMON) OVER (PARTITION BY STL.VSL_CD, STL.SKD_VOY_NO, STL.SKD_DIR_CD, STL.REV_DIR_CD, STL.RLANE_CD, STL.REV_YRMON, STL.JO_CRR_CD, STL.RE_DIVR_CD, STL.JO_STL_ITM_CD, STL.JO_STL_JB_CD) AS MIN_ESTM_YRMON
                     , MAX(STL.ESTM_YRMON) OVER (PARTITION BY STL.VSL_CD, STL.SKD_VOY_NO, STL.SKD_DIR_CD, STL.REV_DIR_CD, STL.RLANE_CD, STL.REV_YRMON, STL.JO_CRR_CD, STL.RE_DIVR_CD, STL.JO_STL_ITM_CD, STL.JO_STL_JB_CD) AS MAX_ESTM_YRMON
                     , STL.STL_VVD_SEQ
                     , STL.ACT_AMT
                     , STL.STL_RMK
                     , NVL((SELECT SUM(EAR.ESTM_AMT)
                              FROM JOO_ESTM_ACT_RSLT    EAR
                                 , JOO_STL_ITM_ACCT     SIA
                             WHERE 1=1
                               AND EAR.EXE_YRMON = ( SELECT MAX(A.EXE_YRMON)
                                                       FROM JOO_ESTM_ACT_RSLT A
                                                      WHERE A.REV_YRMON BETWEEN REPLACE(@[fr_rev_yrmon],'-','') AND REPLACE(@[to_rev_yrmon],'-','') /* condition revenue yrmon */
                                                    )
                               AND EAR.REV_YRMON     BETWEEN REPLACE(@[fr_rev_yrmon],'-','') AND REPLACE(@[to_rev_yrmon],'-','') /* condition revenue yrmon */
                               AND EAR.ACCT_CD       = SIA.JO_ESTM_ACCT_CD
                               AND EAR.JO_STL_ITM_CD = SIA.JO_STL_ITM_CD
                               AND EAR.JO_CRR_CD     = STL.JO_CRR_CD
                               AND EAR.RLANE_CD      = STL.RLANE_CD
                               AND EAR.JO_STL_ITM_CD = STL.JO_STL_ITM_CD
                               AND EAR.JO_STL_JB_CD  = STL.JO_STL_JB_CD
                               AND SIA.RE_DIVR_CD    = STL.RE_DIVR_CD
                               AND EAR.VSL_CD        = STL.VSL_CD
                               AND EAR.SKD_VOY_NO    = STL.SKD_VOY_NO
                               AND EAR.SKD_DIR_CD    = STL.SKD_DIR_CD
                               AND EAR.REV_DIR_CD    = STL.REV_DIR_CD
                               AND EAR.ESTM_YRMON    = STL.ESTM_YRMON
                       ), 0) AS FROM_ESTM_AMT /*from estimation*/
                     , NVL(( SELECT SUM(DTL.ACT_AMT)
                               FROM JOO_INV_DTL DTL
                                  , JOO_INVOICE INV
                              WHERE 1=1
                               AND STL.VSL_CD        = DTL.VSL_CD
                               AND STL.SKD_VOY_NO    = DTL.SKD_VOY_NO
                               AND STL.SKD_DIR_CD    = DTL.SKD_DIR_CD
                               AND STL.REV_DIR_CD    = DTL.REV_DIR_CD
                               AND STL.REV_YRMON     = DTL.REV_YRMON
                               AND STL.STL_VVD_SEQ   = DTL.STL_VVD_SEQ
                               AND DTL.ACCT_YRMON    = INV.ACCT_YRMON
                               AND DTL.JO_CRR_CD     = INV.JO_CRR_CD
                               AND DTL.INV_NO        = INV.INV_NO
                               AND DTL.RE_DIVR_CD    = INV.RE_DIVR_CD
                       ), 0) AS ACT_INV_AMT /*Actual Status : Invoiced*/
                     , NVL(( SELECT SUM(DTL.ACT_AMT)
                               FROM JOO_INV_DTL DTL
                                  , JOO_INVOICE INV
                                  , JOO_CSR     CSR
                              WHERE 1=1
                               AND STL.VSL_CD        = DTL.VSL_CD
                               AND STL.SKD_VOY_NO    = DTL.SKD_VOY_NO
                               AND STL.SKD_DIR_CD    = DTL.SKD_DIR_CD
                               AND STL.REV_DIR_CD    = DTL.REV_DIR_CD
                               AND STL.REV_YRMON     = DTL.REV_YRMON
                               AND STL.STL_VVD_SEQ   = DTL.STL_VVD_SEQ
                               AND DTL.ACCT_YRMON    = INV.ACCT_YRMON
                               AND DTL.JO_CRR_CD     = INV.JO_CRR_CD
                               AND DTL.INV_NO        = INV.INV_NO
                               AND DTL.RE_DIVR_CD    = INV.RE_DIVR_CD
                               AND INV.RVS_CMB_FLG   = 'N'
                               AND INV.RJCT_CMB_FLG  = 'N'
                               AND INV.SLP_TP_CD     = CSR.SLP_TP_CD
                               AND INV.SLP_FUNC_CD   = CSR.SLP_FUNC_CD
                               AND INV.SLP_OFC_CD    = CSR.SLP_OFC_CD
                               AND INV.SLP_ISS_DT    = CSR.SLP_ISS_DT
                               AND INV.SLP_SER_NO    = CSR.SLP_SER_NO
                       ), 0) AS ACT_SLIP_AMT /* Actual Status : Slip*/
                     , NVL(( SELECT SUM(DTL.ACT_AMT)
                               FROM JOO_INV_DTL DTL
                                  , JOO_INVOICE INV
                                  , JOO_CSR     CSR
                              WHERE 1=1
                               AND STL.VSL_CD        = DTL.VSL_CD
                               AND STL.SKD_VOY_NO    = DTL.SKD_VOY_NO
                               AND STL.SKD_DIR_CD    = DTL.SKD_DIR_CD
                               AND STL.REV_DIR_CD    = DTL.REV_DIR_CD
                               AND STL.REV_YRMON     = DTL.REV_YRMON
                               AND STL.STL_VVD_SEQ   = DTL.STL_VVD_SEQ
                               AND DTL.ACCT_YRMON    = INV.ACCT_YRMON
                               AND DTL.JO_CRR_CD     = INV.JO_CRR_CD
                               AND DTL.INV_NO        = INV.INV_NO
                               AND DTL.RE_DIVR_CD    = INV.RE_DIVR_CD
                               AND INV.RVS_CMB_FLG   = 'N'
                               AND INV.RJCT_CMB_FLG  = 'N'
                               AND INV.SLP_TP_CD     = CSR.SLP_TP_CD
                               AND INV.SLP_FUNC_CD   = CSR.SLP_FUNC_CD
                               AND INV.SLP_OFC_CD    = CSR.SLP_OFC_CD
                               AND INV.SLP_ISS_DT    = CSR.SLP_ISS_DT
                               AND INV.SLP_SER_NO    = CSR.SLP_SER_NO
                               AND CSR.APRO_FLG      = 'Y'
                       ), 0) AS ACT_APPR_AMT  /* Actual Status : Slip*/
                     , (     SELECT CASE WHEN COUNT(DTL.INV_NO) > 0 THEN 'N' ELSE 'Y' END
                               FROM JOO_INV_DTL DTL
                              WHERE 1=1
                               AND STL.VSL_CD        = DTL.VSL_CD
                               AND STL.SKD_VOY_NO    = DTL.SKD_VOY_NO
                               AND STL.SKD_DIR_CD    = DTL.SKD_DIR_CD
                               AND STL.REV_DIR_CD    = DTL.REV_DIR_CD
                               AND STL.REV_YRMON     = DTL.REV_YRMON
                               AND STL.STL_VVD_SEQ   = DTL.STL_VVD_SEQ
                       ) AS CHK_DEL_FLG
                     , STL.STL_TGT_FLG
                  FROM JOO_STL_TGT STL
                     , JOO_STL_ITM SIT
                 WHERE 1=1
                   AND STL.REV_YRMON    BETWEEN REPLACE(@[fr_rev_yrmon],'-','') AND REPLACE(@[to_rev_yrmon],'-','') /* Condition Target Revenue Month*/
#if (${jo_crr_cd}!='')
                   AND STL.JO_CRR_CD    = @[jo_crr_cd]     /* Condition Carrier */
#end
#if (${trd_cd}!='')
                   /* Condition Trade */
                   AND EXISTS   (   SELECT 'X'
                                      FROM JOO_CARRIER CRR
                                     WHERE 1=1
                                       AND CRR.DELT_FLG         = 'N'
                                       AND CRR.JO_CRR_CD        = STL.JO_CRR_CD
                                       AND CRR.RLANE_CD         = STL.RLANE_CD
                                       AND CRR.TRD_CD           = @[trd_cd]
                                     )
#end
#if (${rlane_cd}!='')
                   AND STL.RLANE_CD     = @[rlane_cd]   /* Condition Lane */
#end
#if (${auth_ofc_cd}!='')
                   /* Condition Auth Office Cd */
                   AND EXISTS   (   SELECT 'X'
                                      FROM JOO_CRR_AUTH CA
                                     WHERE 1=1
                                       AND CA.DELT_FLG         = 'N'
                                       AND CA.JO_CRR_CD        = STL.JO_CRR_CD
                                       AND CA.RLANE_CD         = STL.RLANE_CD
                                       AND CA.AUTH_OFC_CD      = @[auth_ofc_cd]
                                     )
#end
#if (${re_divr_cd}!='')
                   AND STL.RE_DIVR_CD   = @[re_divr_cd]        /* Condition ALL, Revenue : R , Expense : E */
#end
#if (${rev_vvd}!='')
                   AND STL.VSL_CD||STL.SKD_VOY_NO||STL.SKD_DIR_CD||STL.REV_DIR_CD LIKE @[rev_vvd]||'%'        /* Condition VVD */
#end
#if (${jo_stl_itm_cds} != '' && ${jo_stl_itm_cds} != 'ALL')
                   /* Condition Items */
                   AND STL.JO_STL_ITM_CD IN ( #foreach($key IN ${jo_stl_itm_cds})#if($velocityCount < $jo_stl_itm_cds.size()) '$key', #else '$key' #end #end)
#end
                   AND STL.JO_STL_ITM_CD = SIT.JO_STL_ITM_CD
                 ORDER BY STL.RE_DIVR_CD DESC
                        , SIT.ORD_SEQ
                        , STL.JO_CRR_CD
                        , STL.VSL_CD
                        , STL.SKD_VOY_NO
                        , STL.SKD_DIR_CD
                        , STL.REV_DIR_CD
                        , STL.RLANE_CD
                        , STL.REV_YRMON
                        , STL.JO_STL_JB_CD
                        , STL.ST_DT
                        , STL.END_DT
                        , STL.ESTM_YRMON
               ) AR
         WHERE 1=1
         ORDER BY AR.RE_DIVR_CD DESC
             , AR.ORD_SEQ
             , AR.JO_CRR_CD
             , AR.REV_VVD
             , AR.RLANE_CD
             , AR.REV_YRMON
             , AR.JO_STL_JB_CD
             , AR.ST_DT
             , AR.END_DT
             , AR.ESTM_YRMON
       ) AR
 ORDER BY AR.RE_DIVR_CD DESC
     , AR.ORD_SEQ
     , AR.JO_CRR_CD
     , AR.REV_VVD
     , AR.RLANE_CD
     , AR.REV_YRMON
     , AR.JO_STL_JB_CD
     , AR.ST_DT
     , AR.END_DT
     , AR.ESTM_YRMON			]]></sql>
			<params>
				<param name="fr_rev_yrmon" type="12" value="" out="N"/>
				<param name="to_rev_yrmon" type="12" value="" out="N"/>
				<param name="jo_crr_cd" type="12" value="" out="N"/>
				<param name="trd_cd" type="12" value="" out="N"/>
				<param name="rlane_cd" type="12" value="" out="N"/>
				<param name="auth_ofc_cd" type="12" value="" out="N"/>
				<param name="re_divr_cd" type="12" value="" out="N"/>
				<param name="rev_vvd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
