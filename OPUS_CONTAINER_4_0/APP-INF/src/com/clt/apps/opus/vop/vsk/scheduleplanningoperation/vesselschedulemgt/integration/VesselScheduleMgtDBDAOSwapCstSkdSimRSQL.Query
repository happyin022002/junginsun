<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="VesselScheduleMgtDBDAOSwapCstSkdSimRSQL">
			<desc><![CDATA[Costal SKD Update & Simulation에 필요한 Port SKD 정보와 PF SKD 정보를 조회한다.]]></desc>
			<sql><![CDATA[
SELECT 	 T51.SEQ
       , T51.VSL_CD
       , T51.SKD_VOY_NO
       , T51.SKD_DIR_CD
       , T51.VSL_CD||T51.SKD_VOY_NO||T51.SKD_DIR_CD 		AS VVD
       , T51.VSL_SLAN_CD
	   , T51.SKD_STS_CD
       , T51.SKD_VOY_TP_CD
	   , T51.SKD_USD_IND_CD
       , T51.PF_SKD_TP_CD
	   , T51.ST_PORT_CD
	   , TO_CHAR(T51.N1ST_PORT_BRTH_DT, 'YYYYMMDDHH24MI') 	AS N1ST_PORT_BRTH_DT
       , T51.PSDO_VVD_CD
       , T51.CO_CD
       , REPLACE(T51.SKD_RMK,CHR(1),'') 					AS SKD_RMK
       , T51.CRE_USR_ID
       , TO_CHAR(T51.CRE_DT,'YYYYMMDDHH24MI') 				AS CRE_DT
       , T51.UPD_USR_ID
       , TO_CHAR(T51.UPD_DT,'YYYYMMDDHH24MISS') 			AS UPD_DT
       , T51.VPS_PORT_CD
       , T51.CLPT_IND_SEQ

       , T51.CLPT_SEQ
       , CASE	WHEN T51.TURN_PORT_IND_CD IN ('Y','N') THEN
                (SELECT    MIN(PS.CLPT_SEQ)
              	FROM      VSK_VSL_PORT_SKD      PS
              	WHERE     PS.VSL_CD             = T51.VSL_CD
              	AND       PS.SKD_VOY_NO         = T51.SKD_VOY_NO
              	AND       PS.SKD_DIR_CD         = T51.SKD_DIR_CD
              	AND       PS.TURN_SKD_VOY_NO    IS NOT NULL
              	AND       PS.TURN_PORT_IND_CD   IN ('Y','N')
              	)
              	ELSE NULL
		 END	FIRST_TURN_PORT_CLPT_SEQ 

	   , T51.SLAN_CD
       , T51.PORT_SKD_STS_CD
       , T51.YD_CD
       , DECODE(T51.YD_CD, NULL, '', SUBSTR(T51.YD_CD, 6, 2)) AS TML_CD
       , T51.CALL_YD_IND_SEQ
       , TO_CHAR(T51.PF_ETA_DT, 'YYYYMMDDHH24MI') AS PF_ETA_DT
       , TO_CHAR(T51.PF_ETB_DT, 'YYYYMMDDHH24MI') AS PF_ETB_DT
       , TO_CHAR(T51.PF_ETD_DT, 'YYYYMMDDHH24MI') AS PF_ETD_DT
       , TO_CHAR(T51.INIT_ETA_DT, 'YYYYMMDDHH24MI') AS INIT_ETA_DT
       , TO_CHAR(T51.INIT_ETB_DT, 'YYYYMMDDHH24MI') AS INIT_ETB_DT
       , TO_CHAR(T51.INIT_ETD_DT, 'YYYYMMDDHH24MI') AS INIT_ETD_DT
       , TO_CHAR(T51.VPS_ETA_DT, 'YYYYMMDDHH24MI') AS VPS_ETA_DT
       , TO_CHAR(T51.VPS_ETB_DT, 'YYYYMMDDHH24MI') AS VPS_ETB_DT
       , TO_CHAR(T51.VPS_ETD_DT, 'YYYYMMDDHH24MI') AS VPS_ETD_DT
       , T51.VSL_DLAY_RSN_CD
       , T51.VSL_DLAY_RSN_DESC
       , T51.VSL_DLAY_RSN_LOC_CD
       , T51.SHP_CALL_NO
       , T51.SHP_CALL_NO_UPD_USR_ID
       , TO_CHAR(T51.SHP_CALL_NO_UPD_DT, 'YYYYMMDDHH24MI') AS SHP_CALL_NO_UPD_DT
       , T51.TML_VSL_CD
       , T51.TML_VOY_NO
       , TO_CHAR(T51.FT_DT, 'YYYYMMDDHH24MI') AS FT_DT
       , T51.PLISM_YD_CD
       , T51.PLISM_VSL_CD
       , T51.PLISM_VOY_NO
       , T51.SKD_CNG_STS_CD
       , T51.TURN_PORT_FLG
       , T51.TURN_PORT_IND_CD
       , T51.TURN_SKD_VOY_NO
       , T51.TURN_SKD_DIR_CD
       , T51.TURN_CLPT_IND_SEQ
       , T51.IB_CGO_QTY
       , T51.OB_CGO_QTY
       , T51.VPS_RMK
       , RTRIM(REPLACE(T51.VPS_RMK, CHR(13)||CHR(10),' ')) AS WIN_RMK 	/* 화면 조회 용 */
       , T51.PHS_IO_RSN_CD
       , T51.PHS_IO_RMK
       , T51.SKD_BRTH_NO
       , T51.INIT_SKD_INP_FLG
       , T51.OFC_INP_FLG
--       , T51.NOON_RPT_INP_FLG	/* Data 불일치로 사용안함 */
       , 'N'   AS NOON_RPT_INP_FLG
--       , T51.DEP_RPT_INP_FLG	/* Data 불일치로 사용안함 */
       , T51.DEP_RPT_FLG    AS DEP_RPT_INP_FLG
       , T51.ACT_INP_FLG
       , T51.PRT_CHK_FLG
	   , T51.EDI_SND_KNT
	   , T51.PORT_SKP_TP_CD
	   , T51.PORT_SKP_RSN_CD
	   , T51.PORT_SKP_RSN_OFFR_RMK
	   , T51.TTL_DLAY_HRS
	   , T51.TS_PORT_CD
	   , T51.USD_FLG

       , T51.IB_CSSM_VOY_NO
       , T51.OB_CSSM_VOY_NO
	   , T51.CSSM_VOY_INIT_CRE_FLG

       , CASE	 WHEN T51.TURN_PORT_IND_CD IN ('Y','N') THEN
           	   (SELECT    PS.IB_CSSM_VOY_NO
            	FROM      VSK_VSL_PORT_SKD      PS
            	WHERE     PS.VSL_CD             = T51.VSL_CD
            	AND       PS.SKD_VOY_NO         = T51.TURN_SKD_VOY_NO
            	AND       PS.SKD_DIR_CD         = T51.TURN_SKD_DIR_CD
            	AND       PS.VPS_PORT_CD        = T51.VPS_PORT_CD
            	AND       PS.CLPT_IND_SEQ       = T51.TURN_CLPT_IND_SEQ
            	)
            	ELSE ''
        END TURN_IB_CSSM_VOY_NO

	   , T51.VT_ADD_CALL_FLG

       , NVL(T51.SKP_CALL_FLG, DECODE(T51.SKD_CNG_STS_CD, 'S', 'Y')) SKP_CALL_FLG
       
	   --:2016-07-08:--, NVL(T51.ADD_CALL_FLG, DECODE(T51.SKD_CNG_STS_CD, 'A', 'Y')) ADD_CALL_FLG 

	   , CASE 	WHEN T51.VT_ADD_CALL_FLG = 'Y' THEN ''
     			WHEN T51.ADD_CALL_FLG    = 'Y' OR T51.SKD_CNG_STS_CD = 'A' THEN 'Y'
     			ELSE ''
	     END 	AS ADD_CALL_FLG

       , T51.VSL_RENM_OLD_VSL_CD
       , T51.VSL_RENM_OLD_VSL_ENG_NM
       , T51.VSL_RENM_NEW_VSL_CD
       , T51.VSL_RENM_NEW_VSL_ENG_NM
       , T51.VSLD_WKS

	   , DECODE(T51.AUTO_SKD_CNG_FLG, 'Y', '1', 'N', '0', T51.AUTO_SKD_CNG_FLG) AS AUTO_SKD_CNG_FLG
       , CASE WHEN ROUND(ROUND(TO_CHAR(T51.VPS_ETD_DT - NVL(T51.PF_ETD_DT, T51.INIT_ETD_DT))*24, 1)) > 0
              THEN LPAD(TRUNC(TO_CHAR(T51.VPS_ETD_DT - NVL(T51.PF_ETD_DT, T51.INIT_ETD_DT))), 2, '0') || 'D-' || LPAD(MOD(ROUND(ROUND(TO_CHAR(T51.VPS_ETD_DT - NVL(T51.PF_ETD_DT, T51.INIT_ETD_DT))*24, 1)),24), 2, '0') || 'H'
              ELSE ''
         END AS DLAY_DATE_TEXT
       , CASE WHEN ROUND(ROUND(TO_CHAR(TO_NUMBER(T51.VPS_ETA_DT - LAG(T51.VPS_ETD_DT) OVER (ORDER BY SEQ)) 
                   - ABS(TO_NUMBER(NVL(T51.PF_ETA_DT, T51.INIT_ETA_DT) - LAG(NVL(T51.PF_ETD_DT, T51.INIT_ETD_DT)) OVER (ORDER BY SEQ))))*24, 1)) > 0
              THEN LPAD(TRUNC(TO_CHAR(TO_NUMBER(T51.VPS_ETA_DT - LAG(T51.VPS_ETD_DT) OVER (ORDER BY SEQ)) 
                   - ABS(TO_NUMBER(NVL(T51.PF_ETA_DT, T51.INIT_ETA_DT) - LAG(NVL(T51.PF_ETD_DT, T51.INIT_ETD_DT)) OVER (ORDER BY SEQ))))), 2, '0') || 'D-' || LPAD(MOD(ROUND(ROUND(TO_CHAR(TO_NUMBER(T51.VPS_ETA_DT - LAG(T51.VPS_ETD_DT) OVER (ORDER BY SEQ)) - TO_NUMBER(NVL(T51.PF_ETA_DT, T51.INIT_ETA_DT) - LAG(NVL(T51.PF_ETD_DT, T51.INIT_ETD_DT)) OVER (ORDER BY SEQ)))*24, 1)),24), 2, '0') || 'H'
              ELSE ''
         END AS SEA_DATE_TEXT
       , (
            SELECT GMT_HRS/60.0 FROM MDM_LOCATION
             WHERE LOC_CD = T51.VPS_PORT_CD
         ) AS TIME_DIFF
       , ROUND(T51.VPS_ETD_DT - T51.PF_ETD_DT, 1) AS DELAY_DATE
       , CASE WHEN ROUND(ROUND(TO_CHAR(T51.VPS_ETA_DT - T51.INIT_ETA_DT)*24, 1)) > 0
              THEN 'D'
              WHEN ROUND(ROUND(TO_CHAR(T51.VPS_ETA_DT - T51.INIT_ETA_DT)*24, 1)) < 0
              THEN 'A'
              ELSE 'X'
         END AS ETA_DELAY_FLG
       , CASE WHEN ROUND(ROUND(TO_CHAR(T51.VPS_ETB_DT - T51.INIT_ETB_DT)*24, 1)) > 0
              THEN 'D'
              WHEN ROUND(ROUND(TO_CHAR(T51.VPS_ETB_DT - T51.INIT_ETB_DT)*24, 1)) < 0
              THEN 'A'
              ELSE 'X'
         END AS ETB_DELAY_FLG
       , CASE WHEN ROUND(ROUND(TO_CHAR(T51.VPS_ETD_DT - T51.INIT_ETD_DT)*24, 1)) > 0
              THEN 'D'
              WHEN ROUND(ROUND(TO_CHAR(T51.VPS_ETD_DT - T51.INIT_ETD_DT)*24, 1)) < 0
              THEN 'A'
              ELSE 'X'
         END AS ETD_DELAY_FLG
	   , CASE WHEN T51.ACT_INP_FLG 		= 'Y' THEN 'Actual' 
	          WHEN T51.DEP_RPT_FLG 		= 'Y' THEN 'Departure'
			  --WHEN T51.NOON_RPT_INP_FLG = 'Y' THEN 'Noon'
			  WHEN T51.OFC_INP_FLG 		= 'Y' THEN 'HQ/RSO'
			  WHEN T51.INIT_SKD_INP_FLG = 'Y' THEN 'Initial'
			  ELSE ''
	     END AS UPD_STS
	   /*, NVL(T51.LNK_DIST, (
                            CASE WHEN T51.NXT_PORT = T52.NXT_PORT THEN NVL(T52.LNK_DIST, 0)
	                             ELSE 0
	                        END
	                       )
	        ) AS LNK_DIST*/
	   , NVL(T51.LNK_DIST, NVL(T52.LNK_DIST, 0)) AS LNK_DIST
       , NVL(T51.LNK_SPD, NVL(T52.LNK_SPD, 0)) AS LNK_SPD
	   , NVL(T51.SEA_BUF_HRS, NVL(T52.SEA_BUF_HRS, 0)) AS SEA_BUF_HRS
	   , NVL(T51.PORT_BUF_HRS, NVL(T52.PORT_BUF_HRS, 0)) AS PORT_BUF_HRS
	   , NVL(T51.TZTM_HRS, NVL(T52.TZTM_HRS, 0)) AS TZTM_HRS
	   , NVL(T51.PORT_WRK_HRS, NVL(T52.ACT_WRK_HRS, 0)) AS ACT_WRK_HRS
	   , NVL(T51.MNVR_OUT_HRS, NVL(T52.MNVR_OUT_HRS, 0)) AS MNVR_OUT_HRS
	   , NVL(T51.MNVR_IN_HRS, NVL(T52.MNVR_IN_HRS, 0)) AS MNVR_IN_HRS
       , NVL(T52.LNK_DIST, 0) AS PF_LNK_DIST
       , NVL(T52.LNK_SPD, 0) AS PF_LNK_SPD
       , NVL(T52.SEA_BUF_HRS, 0) AS PF_SEA_BUF_HRS
       , NVL(T52.PORT_BUF_HRS, 0) AS PF_PORT_BUF_HRS
       , NVL(T52.TZTM_HRS, 0) AS PF_TZTM_HRS
       , NVL(T52.ACT_WRK_HRS, 0) AS PF_ACT_WRK_HRS
       , NVL(T52.MNVR_OUT_HRS, 0) AS PF_MNVR_OUT_HRS
       , NVL(T52.MNVR_IN_HRS, 0) AS PF_MNVR_IN_HRS
       , T52.CRN_KNT
       , T52.TML_PROD_QTY
       --::2015-04-23::--, CASE WHEN T51.TURN_PORT_FLG = 'Y' AND T51.TURN_PORT_IND_CD = 'N' THEN 1 ELSE T52.PORT_ROTN_SEQ END PORT_ROTN_SEQ
       , CASE WHEN T51.TURN_PORT_FLG = 'Y' AND T51.TURN_PORT_IND_CD = 'N' THEN 1 
              WHEN T51.PF_ETB_DT IS NULL                                  THEN NULL
              ELSE T52.PORT_ROTN_SEQ 
         END PORT_ROTN_SEQ
       , T52.ETB_DY_CD
       , T52.ETB_DY_NO
       , T52.ETB_TM_HRMNT
       , T52.ETD_DY_CD
       , T52.ETD_DY_NO
       , T52.ETD_TM_HRMNT
       , T52.LNK_SPD AS PF_SPD
       , T52.SEA_BUF_SPD
       , T52.IB_IPCGO_QTY
       , T52.IB_OCN_CGO_QTY
       , T52.OB_IPCGO_QTY
       , T52.OB_OCN_CGO_QTY
	     --::2015-04-18::--
       , NVL(T52.PF_SVC_TP_CD,T51.PF_SKD_TP_CD)	AS PF_SVC_TP_CD
       , '' AS VSL_SIM_TP_CD
       , '' AS BOUND
       , '' AS RTV_FLG
       , '' AS DIFF_RMK
       , (
			SELECT  ROUND((FOC_HR / POWER(SPD_P, 3)) * POWER((NVL(T51.LNK_SPD, NVL(T52.LNK_SPD, 0)) / (1 - (SLIP / 100))), 3) * 24, 1)
			FROM    (
						SELECT  T1.*,
								ROUND(((SPD_P - SPD_O)/SPD_P) * 100, 1)   AS SLIP,
								ROUND(BUNK_CONS / (DIST_O / SPD_O), 2)  AS FOC_HR
						FROM    (
									SELECT  /*+INDEX_DESC(T XPKVSK_NOON_RPT) */
											NXT_PORT_CD     AS NXT_PORT_CD,
											NXT_PORT_ETA_DT AS NXT_PORT_ETA_DT,
											NVGT_DIST       AS DIST_O,
											ENG_ML_DIST     AS DIST_P,
											CRNT_ACT_SPD    AS SPD_O,
											ROUND(ENG_ML_DIST / (NVGT_DIST / CRNT_ACT_SPD),1) AS SPD_P,
											ROUND(FOIL_CSM_WGT)    AS BUNK_CONS
									FROM    VSK_NOON_RPT T
									WHERE   VSL_CD      = @[vsl_cd]
                                    AND     CRNT_ACT_SPD > 0
									AND		NVGT_DIST > 0
									AND     ENG_ML_DIST > 0
									AND     ROWNUM      = 1
								) T1
					)
        ) AS BNK_UNIT_QTY
       , (
            SELECT  ACT_PRC
            FROM    VSK_BNK_PRC T1,
                    (
                        SELECT  MAX(TO_CHAR(ACT_BRTH_DT, 'YYYYMMDD') || VPS_PORT_CD ) CURR_PORT
                        FROM    VSK_DEP_RPT
                        WHERE   VSL_CD          = @[vsl_cd]
                        AND     SPL_FOIL_WGT    > 0
                    )
            WHERE   1 = 1
            AND     PORT_CD             = SUBSTR(CURR_PORT, 9)
            AND     FOIL_DOIL_DIV_CD    = 'F'
            AND     EVNT_DT             = TO_DATE(SUBSTR(CURR_PORT, 1, 8), 'YYYYMMDD')
        ) AS BNK_UNIT_AMT
       , (
            SELECT  SUM(TTL_CHG_AMT)
			FROM    PSO_VSL_CLSS_TRF
			WHERE   BSE_YR      = TO_CHAR(T51.VPS_ETA_DT, 'YYYY')
			AND     BSE_QTR_CD  = TO_CHAR(T51.VPS_ETA_DT, 'Q')
			AND     YD_CD       = T51.YD_CD
			AND     CNTR_VSL_CLSS_CAPA = 
			        (
			            SELECT  CNTR_VSL_CLSS_CAPA
			            FROM    MDM_VSL_CNTR
			            WHERE   VSL_CD      = @[vsl_cd]
			            AND     DELT_FLG    = 'N'
			        )
        ) AS PE_USD_TTL_AMT
       , '' AS SIM_DT
       , '' AS SIM_NO
	   , '' AS CNG_LANE_CD
	   , '' AS CNG_VSL_CD
	   , '' AS CNG_SKD_VOY_NO
	   , '' AS CNG_SKD_DIR_CD
	   , '' AS ADD_BNK_CSM_QTY
	   , '' AS ADD_BNK_COST_AMT
	   , '' AS TML_HNDL_20FT_TTL_QTY
	   , '' AS TML_HNDL_40FT_TTL_QTY
	   , '' AS TML_HNDL_20FT_TTL_AMT
	   , '' AS TML_HNDL_40FT_TTL_AMT
	   , '' AS TS_20FT_TTL_QTY
	   , '' AS TS_40FT_TTL_QTY
	   , '' AS TS_20FT_TTL_AMT
	   , '' AS TS_40FT_TTL_AMT
	   , 'N' AS USR_HDN_FLG
	   /*, (
			SELECT  'X'
                    FROM    BKG_VVD S
                    WHERE   1 = 1
                    AND     S.VSL_CD           = T51.VSL_CD
                    AND     S.SKD_VOY_NO       = T51.SKD_VOY_NO
                    AND     S.SKD_DIR_CD       = T51.SKD_DIR_CD
                    AND     S.POL_CD           = T51.VPS_PORT_CD
                    AND     S.POL_CLPT_IND_SEQ = T51.CLPT_IND_SEQ
					AND 	ROWNUM = 1
		 ) AS BKG_FLG*/
	   , T51.CLPT_IND_SEQ AS NEW_CLPT_IND_SEQ
	   , (
	       SELECT  'X'
	       FROM    VSK_VSL_PORT_SKD
	       WHERE   VSL_CD           = T51.VSL_CD
	       AND     SKD_VOY_NO       = T51.SKD_VOY_NO
	       AND     SKD_DIR_CD       = T51.SKD_DIR_CD
	       AND     CLPT_SEQ         > T51.CLPT_SEQ
	       AND     ACT_INP_FLG = 'Y'
		   --AND	   PORT_SKD_STS_CD = 'D'
	       AND     ROWNUM = 1
	   	 ) AS BFR_ACT_FLG

	   , DECODE(T51.ADD_CALL_XTER_FLG,'Y','1','0')	AS ADD_CALL_XTER_FLG
	   , T51.PRIV_CALL_FLG


       , CASE	WHEN T51.TURN_PORT_IND_CD IN ('Y','N') AND T51.TURN_SKD_VOY_NO IS NOT NULL THEN ROW_NUMBER() OVER (PARTITION BY T51.VSL_CD, T51.SKD_VOY_NO, T51.SKD_DIR_CD ORDER BY DECODE(T51.TURN_SKD_VOY_NO,NULL,9,1) ASC, T51.CLPT_SEQ ASC)
        		ELSE NULL
    	 END    REAL_CLPT_SEQ
  	   , CASE	WHEN T51.TURN_PORT_IND_CD IN ('Y','N') THEN NULL
           		ELSE RANK() OVER (PARTITION BY T51.VSL_CD,T51.SKD_VOY_NO,T51.SKD_DIR_CD ORDER BY DECODE(T51.TURN_PORT_IND_CD,'F',1,'D',2,'V',2,9) ASC, T51.VPS_ETB_DT ASC) 
         END    VIR_PORT_CLPT_SEQ


  FROM (

		--===============================================================================
		--===============================================================================
		SELECT   T41.VVD_POSITION
			   , T41.LVL 										AS SEQ
			   , T41.VSL_SLAN_CD
			   , T41.SKD_STS_CD
		       , T41.SKD_VOY_TP_CD
			   , T41.SKD_USD_IND_CD
		       , T41.PF_SKD_TP_CD
			   , T41.ST_PORT_CD
			   , T41.N1ST_PORT_BRTH_DT
		       , T41.PSDO_VVD_CD
		       , T41.CO_CD
		       , T41.SKD_RMK
			   , T41.CRE_USR_ID 								AS SKD_CRE_USE_ID
			   , T41.CRE_DT AS SKD_CRE_DT
			   , T41.UPD_USR_ID 								AS SKD_UPD_USE_ID
			   , T41.UPD_DT 									AS SKD_UPD_DT
			   , T42.*
			   , LEAD(T42.VPS_PORT_CD) OVER (ORDER BY CLPT_SEQ) AS NXT_PORT
               , NVL(( /* DEPARTURE REPORT 입력 여부 */
                        SELECT  'Y'
                        FROM    VSK_DEP_RPT S
                        WHERE   S.VSL_CD        = T42.VSL_CD
                        AND     S.SKD_VOY_NO    = T42.SKD_VOY_NO
                        AND     S.SKD_DIR_CD    = T42.SKD_DIR_CD
                        AND     S.VPS_PORT_CD   = T42.VPS_PORT_CD
                        AND     S.CLPT_IND_SEQ  = T42.CLPT_IND_SEQ
                        ), 'N') AS DEP_RPT_FLG
		  FROM (
                SELECT  T31.VVD_POSITION
					,	T31.LVL
					, 	T32.*
					,	ROW_NUMBER() 	OVER (ORDER BY LVL) AS VVD_SEQ
					,	COUNT(*) 		OVER () 			AS MAX_VVD
                FROM    (

						--===============================================================================
						/* 조회 조건의 이전 항차 */
                        SELECT	DISTINCT -LEVEL 	AS LVL
							,	VSL_CD
							,	TURN_SKD_VOY_NO 	AS SKD_VOY_NO
							,	TURN_SKD_DIR_CD 	AS SKD_DIR_CD
							,	'PRE' 				AS VVD_POSITION
                        FROM 	VSK_VSL_PORT_SKD
                        WHERE 	LEVEL 				<= FLOOR(TO_NUMBER(@[bound])/2)
                        AND  	(TURN_SKD_VOY_NO 	IS NOT NULL OR TURN_SKD_DIR_CD IS NOT NULL)

                        START 	WITH VSL_CD 		= @[vsl_cd] AND SKD_VOY_NO = @[skd_voy_no] AND SKD_DIR_CD = @[skd_dir_cd] AND TURN_PORT_IND_CD IN ('Y','N')
                        CONNECT BY PRIOR TURN_SKD_VOY_NO 	= SKD_VOY_NO
                                AND PRIOR TURN_SKD_DIR_CD 	= SKD_DIR_CD  
                                AND PRIOR VSL_CD          	= VSL_CD
                        AND  	TURN_PORT_IND_CD 	IN ('Y','N')
                        AND  	LEVEL 				<= FLOOR(TO_NUMBER(@[bound])/2)

                        UNION ALL

						/* 조회 조건의 항차 */ 
                        SELECT 0 AS LVL, @[vsl_cd] AS VSL_CD, @[skd_voy_no] AS SKD_VOY_NO, @[skd_dir_cd] AS SKD_DIR_CD, 'CUR' AS VVD_POSITION FROM DUAL

                        UNION ALL

						/* 조회 조건의 이후 항차 */
                        SELECT 	DISTINCT LEVEL 		AS LVL
							,	VSL_CD
							,	TURN_SKD_VOY_NO 	AS SKD_VOY_NO
							,	TURN_SKD_DIR_CD 	AS SKD_DIR_CD
							,	'NXT' 				AS VVD_POSITION
                        FROM 	VSK_VSL_PORT_SKD
                        WHERE 	LEVEL 				<= FLOOR(TO_NUMBER(@[bound])/2)
                        AND  	(TURN_SKD_VOY_NO IS NOT NULL OR TURN_SKD_DIR_CD IS NOT NULL)
                        START 	WITH VSL_CD 		= @[vsl_cd] AND SKD_VOY_NO = @[skd_voy_no] AND SKD_DIR_CD = @[skd_dir_cd] AND TURN_PORT_IND_CD IN ('D','V','F')
                        CONNECT BY PRIOR TURN_SKD_VOY_NO  = SKD_VOY_NO 
                                AND PRIOR TURN_SKD_DIR_CD = SKD_DIR_CD
                                AND PRIOR VSL_CD          = VSL_CD
                        AND  	TURN_PORT_IND_CD 	IN ('D','V','F')
                        AND  	LEVEL 				<= FLOOR(TO_NUMBER(@[bound])/2)
						--===============================================================================
                        ) 							T31
					,	VSK_VSL_SKD 				T32
                WHERE   T31.VSL_CD      			= T32.VSL_CD
                AND     T31.SKD_VOY_NO   			= T32.SKD_VOY_NO
                AND     T31.SKD_DIR_CD   			= T32.SKD_DIR_CD      
               ) T41
			,	VSK_VSL_PORT_SKD 					T42
		WHERE 	T41.VSL_CD       					= T42.VSL_CD
		AND 	T41.SKD_VOY_NO   					= T42.SKD_VOY_NO
		AND 	T41.SKD_DIR_CD   					= T42.SKD_DIR_CD
		AND 	CASE WHEN T41.VVD_SEQ = T41.MAX_VVD THEN 1
                     ELSE 
                         CASE WHEN T42.TURN_PORT_IND_CD IN ('D','V','F') THEN 0 ELSE 1 
                         END 
                END 								= 1		/* 맨 마지막 PORT 만 Virtual 이 나오기 위한 조건 */

		--::2016-07-21:by TOP::-----------------------------------------------------------------------------------------------------------
		AND		'*'                       			= CASE 	WHEN T41.VVD_POSITION IN ('PRE','CUR') AND T42.VT_ADD_CALL_FLG = 'Y' AND FLOOR(TO_NUMBER(@[bound])/2) > 0	THEN 'N/A'
                                                  			WHEN T41.VVD_POSITION = 'NXT'		   AND T42.VT_ADD_CALL_FLG = 'Y' AND FLOOR(TO_NUMBER(@[bound])/2) > LVL THEN 'N/A'
															ELSE '*'
                                             		  END
		----------------------------------------------------------------------------------------------------------------------------------
		--===============================================================================
		--===============================================================================

			) T51
		,	(
			SELECT	T1.VSL_SLAN_CD, T1.PF_SVC_TP_CD, T1.PORT_CD, DECODE(VIRT_FLG, 'V', T1.DIR_CD2, T2.SKD_DIR_CD) AS SKD_DIR_CD
					, T1.CLPT_SEQ, T2.PORT_ROTN_SEQ, T2.YD_CD, CALL_YD_IND_SEQ, TURN_PORT_FLG, TURN_PORT_IND_CD, ETB_DY_CD, ETB_DY_NO
					, ETB_TM_HRMNT, ETD_DY_CD, ETD_DY_NO, ETD_TM_HRMNT, LNK_DIST, LNK_SPD, TZTM_HRS
					, SEA_BUF_HRS, SEA_BUF_SPD, MNVR_IN_HRS, MNVR_OUT_HRS
					, IB_IPCGO_QTY, IB_OCN_CGO_QTY, OB_IPCGO_QTY
					, OB_OCN_CGO_QTY,TML_PROD_QTY,CRN_KNT,ACT_WRK_HRS,PORT_BUF_HRS,CRE_USR_ID,CRE_DT,UPD_USR_ID,UPD_DT
					, LEAD(T1.PORT_CD) OVER (ORDER BY T1.VSL_SLAN_CD, T1.PF_SVC_TP_CD, DIR_CD2, T2.PORT_ROTN_SEQ) AS NXT_PORT
			FROM	(
					SELECT	  NVL(T3.VSL_SLAN_CD	, T1.VSL_SLAN_CD	) AS VSL_SLAN_CD
							, NVL(T3.PF_SVC_TP_CD	, T1.PF_SVC_TP_CD	) AS PF_SVC_TP_CD
							, NVL(T3.PORT_CD		, T1.PORT_CD		) AS PORT_CD
							, DECODE(T3.SKD_DIR_CD, NULL,
														(	SELECT	S.VSL_SLAN_DIR_CD
															FROM	MDM_VSL_SVC_LANE_DIR S
															WHERE	1 = 1
															AND		T1.VSL_SLAN_CD	= S.VSL_SLAN_CD
															AND		T1.SKD_DIR_CD	!= S.VSL_SLAN_DIR_CD
															AND		S.DELT_FLG		= 'N'
															AND		ROWNUM			= 1
														), 
														T1.SKD_DIR_CD) AS SKD_DIR_CD
							, DECODE(T3.CLPT_SEQ, NULL, (	SELECT	T1.CLPT_SEQ
															FROM	VSK_PF_SKD_DTL M
															WHERE	1 = 1
															AND		T1.VSL_SLAN_CD	= M.VSL_SLAN_CD
															AND		T1.PF_SVC_TP_CD	= M.PF_SVC_TP_CD
															AND		T1.SKD_DIR_CD	= 
																					(	SELECT	S.VSL_SLAN_DIR_CD
																						FROM	MDM_VSL_SVC_LANE_DIR S
																						WHERE	1 = 1
																						AND		T1.VSL_SLAN_CD	= S.VSL_SLAN_CD
																						AND		T1.SKD_DIR_CD	= S.VSL_SLAN_DIR_CD
																						AND		S.DELT_FLG		= 'N'
																					)
															AND		T1.PORT_CD		= M.PORT_CD
															AND		T1.CLPT_SEQ		= M.CLPT_SEQ
															AND     M.TURN_PORT_IND_CD != 'F'
														), T1.CLPT_SEQ) AS CLPT_SEQ
							, DECODE(T3.SKD_DIR_CD, NULL, 'V', 'N') 	AS VIRT_FLG
							, T1.SKD_DIR_CD 							AS DIR_CD2
					FROM  	VSK_PF_CALL_PORT 		T1
						,	MDM_VSL_SVC_LANE_DIR 	T2
						,	VSK_PF_SKD_DTL 			T3
					WHERE  	1	= 1
					AND		T1.VSL_SLAN_CD			= T2.VSL_SLAN_CD
					AND		T1.SKD_DIR_CD			= T2.VSL_SLAN_DIR_CD
					AND		T1.VSL_SLAN_CD			= T3.VSL_SLAN_CD 		(+)
					AND		T1.PF_SVC_TP_CD			= T3.PF_SVC_TP_CD		(+)
					AND		T1.SKD_DIR_CD			= T3.SKD_DIR_CD			(+)
					AND		T1.PORT_CD				= T3.PORT_CD			(+)
					AND		T1.CLPT_SEQ				= T3.CLPT_SEQ			(+)
					AND     T3.TURN_PORT_IND_CD(+) != 'F'
					) 								T1
				,	VSK_PF_SKD_DTL 					T2
			WHERE	1 = 1
			AND		T1.VSL_SLAN_CD 					= T2.VSL_SLAN_CD
			AND		T1.PF_SVC_TP_CD 				= T2.PF_SVC_TP_CD
			AND		T1.PORT_CD  					= T2.PORT_CD
			AND		T1.SKD_DIR_CD 					= T2.SKD_DIR_CD
			AND		T1.CLPT_SEQ  					= T2.CLPT_SEQ
			) T52
WHERE 		T51.VSL_SLAN_CD  						= T52.VSL_SLAN_CD   (+)
AND 		T51.PF_SKD_TP_CD 						= T52.PF_SVC_TP_CD 	(+)
AND 		T51.SKD_DIR_CD   						= T52.SKD_DIR_CD 	(+)
AND 		T51.VPS_PORT_CD  						= T52.PORT_CD 		(+)
AND 		T51.CLPT_IND_SEQ 						= T52.CLPT_SEQ		(+)

ORDER BY 	SEQ										ASC
		,	CLPT_SEQ								ASC
		,	VPS_ETB_DT								ASC			]]></sql>
			<params>
				<param name="vsl_cd" type="12" value="" out="N"/>
				<param name="bound" type="12" value="" out="N"/>
				<param name="skd_voy_no" type="12" value="" out="N"/>
				<param name="skd_dir_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
