<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="TerminalDepartureReportDBDAODischImportTotalVORSQL">
			<desc><![CDATA[Import Bkg Total]]></desc>
			<sql><![CDATA[
SELECT 		COM_ConstantMgr_PKG.COM_getCompanyCode_FNC() AS OPR_CD 
       	,	@[port_cd] AS POD_CD
       	
       	--,	SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, NULL), NULL), NULL)) FULL_BO_20 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 3, 1, NULL), NULL), NULL)) FULL_BO_2H 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 4, 1, NULL), NULL), NULL)) FULL_BO_40 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 5, 1, NULL), NULL), NULL)) FULL_BO_4H 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 7, 1, NULL), NULL), NULL)) FULL_BO_45 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, NULL),  NULL))) FULL_TS_20 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 3, 1, NULL),  NULL))) FULL_TS_2H 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 4, 1, NULL),  NULL))) FULL_TS_40 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 5, 1, NULL),  NULL))) FULL_TS_4H 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 7, 1, NULL),  NULL))) FULL_TS_45 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, NULL)), NULL)) ET_BO_20 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 3, 1, NULL)), NULL)) ET_BO_2H 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 4, 1, NULL)), NULL)) ET_BO_40 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 5, 1, NULL)), NULL)) ET_BO_4H 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 7, 1, NULL)), NULL)) ET_BO_45 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, NULL)))) ET_TS_20 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 3, 1, NULL)))) ET_TS_2H 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 4, 1, NULL)))) ET_TS_40 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 5, 1, NULL)))) ET_TS_4H 
       	--,	SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 7, 1, NULL)))) ET_TS_45 
       	--,	ROUND(SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), '2', CNTR_WGT, NULL)) / 1000, 1)                                WT_20 
       	--,	ROUND(SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), '3', CNTR_WGT, NULL)) / 1000, 1)                                WT_2H 
       	--,	ROUND(SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), '4', CNTR_WGT, NULL)) / 1000, 1)                                WT_40 
       	--,	ROUND(SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), '5', CNTR_WGT, NULL)) / 1000, 1)                                WT_4H 
       	--,	ROUND(SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), '7', CNTR_WGT, NULL)) / 1000, 1)                                WT_45
       	
       	,	ROUND((SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, NULL), NULL), NULL))
				+  SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 'A', 1, NULL), NULL), NULL))) ,2)	FULL_BO_20 

       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 3, 1, NULL), NULL), NULL)) 	,2)	FULL_BO_2H 

       	,	ROUND((SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 4, 1, NULL), NULL), NULL))
				+  SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 'B', 1, NULL), NULL), NULL))) ,2)	FULL_BO_40
 
       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 5, 1, NULL), NULL), NULL)) 	,2)	FULL_BO_4H 
       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 7, 1, NULL), NULL), NULL)) 	,2)	FULL_BO_45 

       	,	ROUND((SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, NULL),  NULL)))
				+  SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 'A', 1, NULL),  NULL)))),2)	FULL_TS_20 

       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 3, 1, NULL),  NULL)))	,2)	FULL_TS_2H 

       	,	ROUND((SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 4, 1, NULL),  NULL)))
				+  SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 'B', 1, NULL),  NULL)))),2)	FULL_TS_40 

       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 5, 1, NULL),  NULL)))	,2)	FULL_TS_4H 
       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 7, 1, NULL),  NULL)))	,2)	FULL_TS_45 

       	,	ROUND((SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, NULL)), NULL))
				+  SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 'A', 1, NULL)), NULL))) ,2)	ET_BO_20 

       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 3, 1, NULL)), NULL)) 	,2)	ET_BO_2H 

       	,	ROUND((SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 4, 1, NULL)), NULL))
				+  SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 'B', 1, NULL)), NULL))) ,2)	ET_BO_40 

       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 5, 1, NULL)), NULL)) 	,2)	ET_BO_4H 
       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 7, 1, NULL)), NULL)) 	,2)	ET_BO_45 

       	,	ROUND((SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, NULL))))
				+  SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 'A', 1), 2, 1, NULL))))) ,2)	ET_TS_20 

       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 3, 1, NULL)))) 	,2)	ET_TS_2H 

       	,	ROUND((SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 4, 1, NULL))))
				+  SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 'B', 1), 4, 1, NULL))))) ,2)	ET_TS_40 

       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 5, 1, NULL)))) 	,2)	ET_TS_4H 
       	,	ROUND(SUM(DECODE(VVD_POD, BKG_POD, NULL, DECODE(BKG_CGO_TP_CD, 'F', NULL, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 7, 1, NULL)))) 	,2)	ET_TS_45 

       	,	ROUND((SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), '2', CNTR_WGT, NULL)) + SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 'A', CNTR_WGT, NULL))) / 1000, 2) 	WT_20 

       	,	ROUND(SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), '3', CNTR_WGT, NULL)) / 1000, 2)                                									WT_2H 

       	,	ROUND((SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), '4', CNTR_WGT, NULL)) + SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 'B', CNTR_WGT, NULL))) / 1000, 2) 	WT_40 

       	,	ROUND(SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), '5', CNTR_WGT, NULL)) / 1000, 2)                                									WT_4H 
       	,	ROUND(SUM(DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), '7', CNTR_WGT, NULL)) / 1000, 2)                                									WT_45        	
       	
FROM   		( 
			SELECT V.POD_CD VVD_POD,  B.POD_CD BKG_POD,  B.BKG_CGO_TP_CD,  C.CNTR_TPSZ_CD,  C.CNTR_NO,  C.CNTR_WGT
         	FROM   VSK_VSL_PORT_SKD S,  BKG_VVD V,  BKG_CONTAINER C,  BKG_BOOKING B
         	WHERE  S.VSL_CD       = @[vsl_cd] 
         	AND    S.SKD_VOY_NO   = @[voy_no] 
         	AND    S.SKD_DIR_CD   = @[dir_cd] 
         	AND    S.YD_CD        = @[yd_cd] 
         	AND    S.CLPT_IND_SEQ = @[clpt_ind_seq]
         	AND    S.VSL_CD       = V.VSL_CD
         	AND    S.SKD_VOY_NO   = V.SKD_VOY_NO
         	AND    S.SKD_DIR_CD   = V.SKD_DIR_CD
         	AND    S.VPS_PORT_CD  = V.POD_CD
         	AND    S.CLPT_IND_SEQ = NVL(V.POD_CLPT_IND_SEQ, 1)
         	AND    V.BKG_NO       = C.BKG_NO
         	AND    V.BKG_NO       = B.BKG_NO
         	AND    NVL(B.BKG_STS_CD, 'N') NOT IN ('X', 'A')

         	UNION ALL

         	SELECT V.POD_CD VVD_POD,  B.POD_CD BKG_POD,  B.BKG_CGO_TP_CD,  C.CNTR_TPSZ_CD,  C.CNTR_NO,  C.CNTR_WGT
         	FROM   VSK_VSL_PORT_SKD S,  BKG_VVD V,  BKG_CONTAINER C,  BKG_BOOKING B
         	WHERE  S.VSL_CD            = @[vsl_cd] 
         	AND    S.SKD_VOY_NO        = @[voy_no] 
         	AND    S.SKD_DIR_CD        = @[dir_cd] 
         	AND    S.YD_CD             = @[yd_cd] 
         	AND    S.CLPT_IND_SEQ = @[clpt_ind_seq]
         	AND    S.TURN_PORT_FLG     = 'Y'
         	AND    S.VSL_CD            = V.VSL_CD
         	AND    S.TURN_SKD_VOY_NO   = V.SKD_VOY_NO
         	AND    S.TURN_SKD_DIR_CD   = V.SKD_DIR_CD
         	AND    S.VPS_PORT_CD       = V.POD_CD
         	AND    S.TURN_CLPT_IND_SEQ = NVL(V.POD_CLPT_IND_SEQ, 1)
         	AND    V.BKG_NO            = C.BKG_NO
         	AND    V.BKG_NO            = B.BKG_NO
         	AND    NVL(B.BKG_STS_CD, 'N') NOT IN ('X', 'A') 
       		)
ORDER BY 	OPR_CD
		, 	POD_CD
 			]]></sql>
			<params>
				<param name="port_cd" type="12" value="" out="N"/>
				<param name="vsl_cd" type="12" value="" out="N"/>
				<param name="voy_no" type="12" value="" out="N"/>
				<param name="dir_cd" type="12" value="" out="N"/>
				<param name="yd_cd" type="12" value="" out="N"/>
				<param name="clpt_ind_seq" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
