/*=========================================================
*Copyright(c) 2014 CyberLogitec
*@FileName : PerformanceDBDAOSearchFcmMasterTableInquiryRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2014.12.19
*@LastModifier : 
*@LastVersion : 1.0
* 2014.12.19 
* 1.0 Creation
=========================================================*/
package com.clt.apps.opus.vop.fcm.performance.performance.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.clt.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class PerformanceDBDAOSearchFcmMasterTableInquiryRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * Fuel Consumption Master Table Inquiry 정보를 조회합니다.
	  * 
	  * History
	  * 2015.01.23 이병훈 [CHM-201430612] Fuel Consumption Master table 개발
	  * </pre>
	  */
	public PerformanceDBDAOSearchFcmMasterTableInquiryRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("fm_yrmon",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("to_yrmon",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vsl_slan_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vsl_cd",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.clt.apps.opus.vop.fcm.performance.performance.integration").append("\n"); 
		query.append("FileName : PerformanceDBDAOSearchFcmMasterTableInquiryRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("/***** ERP & PF_SKD DATA *****/" ).append("\n"); 
		query.append("WITH ERP_DATA AS (" ).append("\n"); 
		query.append("    SELECT" ).append("\n"); 
		query.append("    REV_YEAR" ).append("\n"); 
		query.append("    ,REV_MONTH" ).append("\n"); 
		query.append("    ,REV_VESSEL" ).append("\n"); 
		query.append("    ,REV_VOYNO" ).append("\n"); 
		query.append("    ,REV_DIR" ).append("\n"); 
		query.append("    ,REV_TRADE" ).append("\n"); 
		query.append("    ,REV_LANE" ).append("\n"); 
		query.append("    ,REV_FO_QTY" ).append("\n"); 
		query.append("    ,REV_FO_PRICE" ).append("\n"); 
		query.append("    ,REV_FO_AMNT" ).append("\n"); 
		query.append("    ,REV_DO_QTY" ).append("\n"); 
		query.append("    ,REV_DO_PRICE" ).append("\n"); 
		query.append("    ,REV_DO_AMNT" ).append("\n"); 
		query.append("    ,SKED_START_PORT" ).append("\n"); 
		query.append("    ,SKED_START_ZD" ).append("\n"); 
		query.append("    ,TO_CHAR(SKED_START_ETA, 'yyyy-mm-dd hh24:mi') AS SKED_START_ETA" ).append("\n"); 
		query.append("    ,SKED_END_PORT" ).append("\n"); 
		query.append("    ,SKED_END_ZD" ).append("\n"); 
		query.append("    ,TO_CHAR(SKED_END_ETA, 'yyyy-mm-dd hh24:mi') AS SKED_END_ETA" ).append("\n"); 
		query.append("    ,SKED_VOYAGE" ).append("\n"); 
		query.append("    ,PF_TYPE" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_DISTANCE_NOTURN" ).append("\n"); 
		query.append("             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_DISTANCE_TURN" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS PF_DISTANCE" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL AND PF_SEA_TIME_NOTURN > 0 THEN ROUND((PF_DISTANCE_NOTURN / PF_SEA_TIME_NOTURN), 1)" ).append("\n"); 
		query.append("             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL AND PF_SEA_TIME_TURN > 0 THEN ROUND((PF_DISTANCE_TURN / PF_SEA_TIME_TURN), 1)" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS PF_SPD" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_SEA_TIME_NOTURN" ).append("\n"); 
		query.append("             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_SEA_TIME_TURN" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS PF_SEA_TIME" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_BUFFER_TIME_NOTURN" ).append("\n"); 
		query.append("             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_BUFFER_TIME_TURN" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS PF_BUFFER_TIME" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL AND (PF_SEA_TIME_NOTURN + PF_BUFFER_TIME_NOTURN) > 0" ).append("\n"); 
		query.append("             THEN ROUND((PF_DISTANCE_NOTURN / (PF_SEA_TIME_NOTURN + PF_BUFFER_TIME_NOTURN)), 1)" ).append("\n"); 
		query.append("             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL AND (PF_SEA_TIME_TURN + PF_BUFFER_TIME_TURN) > 0" ).append("\n"); 
		query.append("             THEN ROUND((PF_DISTANCE_TURN / (PF_SEA_TIME_TURN + PF_BUFFER_TIME_TURN)), 1)" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS PF_CSPEED" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_MANU_IN_NOTURN" ).append("\n"); 
		query.append("             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_MANU_IN_TURN" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS PF_MANU_IN" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_MANU_OUT_NOTURN" ).append("\n"); 
		query.append("             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_MANU_OUT_TURN" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS PF_MANU_OUT" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_PORT_TIME_NOTURN" ).append("\n"); 
		query.append("             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_PORT_TIME_TURN" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS PF_PORT_TIME" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TO_PORT_ROTN_SEQ_NOTURN IS NOT NULL THEN PF_SEA_TIME_NOTURN + PF_BUFFER_TIME_NOTURN + PF_MANU_IN_NOTURN + PF_MANU_OUT_NOTURN + PF_PORT_TIME_NOTURN" ).append("\n"); 
		query.append("             WHEN TO_PORT_ROTN_SEQ_TURN IS NOT NULL THEN PF_SEA_TIME_TURN + PF_BUFFER_TIME_TURN + PF_MANU_IN_TURN + PF_MANU_OUT_TURN + PF_PORT_TIME_TURN" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS PF_TTL_TIME" ).append("\n"); 
		query.append("    ,EEOI_BSA" ).append("\n"); 
		query.append("    ,EEOI_DCAPA" ).append("\n"); 
		query.append("    ,EEOI_OC" ).append("\n"); 
		query.append("    ,EEOI_GUBUN" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("        SELECT" ).append("\n"); 
		query.append("        T3.REV_YEAR" ).append("\n"); 
		query.append("        ,T3.REV_MONTH" ).append("\n"); 
		query.append("        ,T3.REV_VESSEL" ).append("\n"); 
		query.append("        ,T3.REV_VOYNO" ).append("\n"); 
		query.append("        ,T3.REV_DIR" ).append("\n"); 
		query.append("        ,T3.REV_TRADE" ).append("\n"); 
		query.append("        ,T3.REV_LANE" ).append("\n"); 
		query.append("        ,T3.REV_FO_QTY" ).append("\n"); 
		query.append("        ,T3.REV_FO_PRICE" ).append("\n"); 
		query.append("        ,T3.REV_FO_AMNT" ).append("\n"); 
		query.append("        ,T3.REV_DO_QTY" ).append("\n"); 
		query.append("        ,T3.REV_DO_PRICE" ).append("\n"); 
		query.append("        ,T3.REV_DO_AMNT" ).append("\n"); 
		query.append("        ,T3.SKED_START_PORT" ).append("\n"); 
		query.append("        ,T3.SKED_START_ZD" ).append("\n"); 
		query.append("        ,T3.SKED_START_ETA" ).append("\n"); 
		query.append("        ,T3.SKED_END_PORT" ).append("\n"); 
		query.append("        ,T3.SKED_END_ZD" ).append("\n"); 
		query.append("        ,T3.SKED_END_ETA" ).append("\n"); 
		query.append("        ,T3.SKED_VOYAGE" ).append("\n"); 
		query.append("        ,T3.PF_TYPE" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(LNK_DIST)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ" ).append("\n"); 
		query.append("            -- TTL DISTANCE 는 TO PORT의 이전 PORT 까지만" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_NOTURN" ).append("\n"); 
		query.append("        ) AS PF_DISTANCE_NOTURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(LNK_DIST)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)" ).append("\n"); 
		query.append("                -- TTL DISTANCE 는 TO PORT의 이전 PORT 까지만" ).append("\n"); 
		query.append("                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_TURN))" ).append("\n"); 
		query.append("        ) AS PF_DISTANCE_TURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(TZTM_HRS)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ" ).append("\n"); 
		query.append("            -- TTL SEA TIME 는 TO PORT의 이전 PORT 까지만" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_NOTURN" ).append("\n"); 
		query.append("        ) AS PF_SEA_TIME_NOTURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(TZTM_HRS)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)" ).append("\n"); 
		query.append("                -- TTL SEA TIME 는 TO PORT의 이전 PORT 까지만" ).append("\n"); 
		query.append("                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_TURN))" ).append("\n"); 
		query.append("        ) AS PF_SEA_TIME_TURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(SEA_BUF_HRS)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ" ).append("\n"); 
		query.append("            -- TTL SEA BUFFER TIME 는 TO PORT의 이전 PORT 까지만" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_NOTURN" ).append("\n"); 
		query.append("        ) AS PF_BUFFER_TIME_NOTURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(SEA_BUF_HRS)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)" ).append("\n"); 
		query.append("                -- TTL SEA BUFFER TIME 는 TO PORT의 이전 PORT 까지만" ).append("\n"); 
		query.append("                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_TURN))" ).append("\n"); 
		query.append("        ) AS PF_BUFFER_TIME_TURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(MNVR_IN_HRS)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ" ).append("\n"); 
		query.append("            -- TTL MANEUVERING IN TIME 는 TO PORT의 이전 PORT 까지만" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_NOTURN" ).append("\n"); 
		query.append("        ) AS PF_MANU_IN_NOTURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(MNVR_IN_HRS)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)" ).append("\n"); 
		query.append("                -- TTL MANEUVERING IN TIME 는 TO PORT의 이전 PORT 까지만" ).append("\n"); 
		query.append("                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ < T3.TO_PORT_ROTN_SEQ_TURN))" ).append("\n"); 
		query.append("        ) AS PF_MANU_IN_TURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(MNVR_OUT_HRS)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ" ).append("\n"); 
		query.append("            -- TTL MANEUVERING OUT TIME 는 TO PORT까지" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ <= T3.TO_PORT_ROTN_SEQ_NOTURN" ).append("\n"); 
		query.append("        ) AS PF_MANU_OUT_NOTURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(MNVR_OUT_HRS)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)" ).append("\n"); 
		query.append("                -- TTL MANEUVERING OUT TIME 는 TO PORT까지" ).append("\n"); 
		query.append("                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ <= T3.TO_PORT_ROTN_SEQ_TURN))" ).append("\n"); 
		query.append("        ) AS PF_MANU_OUT_TURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(ACT_WRK_HRS)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ" ).append("\n"); 
		query.append("            -- TTL PORT TIME 는 TO PORT까지" ).append("\n"); 
		query.append("            AND PORT_ROTN_SEQ <= T3.TO_PORT_ROTN_SEQ_NOTURN" ).append("\n"); 
		query.append("        ) AS PF_PORT_TIME_NOTURN" ).append("\n"); 
		query.append("        ,(" ).append("\n"); 
		query.append("            SELECT SUM(ACT_WRK_HRS)" ).append("\n"); 
		query.append("            FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("            WHERE VSL_SLAN_CD = SUBSTR(T3.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("            AND PF_SVC_TP_CD = T3.PF_TYPE" ).append("\n"); 
		query.append("            AND ((PORT_ROTN_SEQ >= T3.FR_PORT_ROTN_SEQ AND PORT_ROTN_SEQ <= MAX_PORT_ROTN_SEQ)" ).append("\n"); 
		query.append("                -- TTL PORT TIME 는 TO PORT까지" ).append("\n"); 
		query.append("                OR (PORT_ROTN_SEQ >= 1 AND PORT_ROTN_SEQ <= T3.TO_PORT_ROTN_SEQ_TURN))" ).append("\n"); 
		query.append("        ) AS PF_PORT_TIME_TURN" ).append("\n"); 
		query.append("        ,T3.EEOI_BSA" ).append("\n"); 
		query.append("        ,T3.EEOI_DCAPA" ).append("\n"); 
		query.append("        ,T3.EEOI_OC" ).append("\n"); 
		query.append("        ,T3.EEOI_GUBUN" ).append("\n"); 
		query.append("        ,T3.TO_PORT_ROTN_SEQ_NOTURN" ).append("\n"); 
		query.append("        ,T3.TO_PORT_ROTN_SEQ_TURN" ).append("\n"); 
		query.append("        FROM (" ).append("\n"); 
		query.append("            SELECT" ).append("\n"); 
		query.append("            T2.REV_YEAR" ).append("\n"); 
		query.append("            ,T2.REV_MONTH" ).append("\n"); 
		query.append("            ,T2.REV_VESSEL" ).append("\n"); 
		query.append("            ,T2.REV_VOYNO" ).append("\n"); 
		query.append("            ,T2.REV_DIR" ).append("\n"); 
		query.append("            ,T2.REV_TRADE" ).append("\n"); 
		query.append("            ,T2.REV_LANE" ).append("\n"); 
		query.append("            ,T2.REV_FO_QTY" ).append("\n"); 
		query.append("            ,T2.REV_FO_PRICE" ).append("\n"); 
		query.append("            ,T2.REV_FO_AMNT" ).append("\n"); 
		query.append("            ,T2.REV_DO_QTY" ).append("\n"); 
		query.append("            ,T2.REV_DO_PRICE" ).append("\n"); 
		query.append("            ,T2.REV_DO_AMNT" ).append("\n"); 
		query.append("            ,T2.SKED_START_PORT" ).append("\n"); 
		query.append("            ,T2.SKED_START_ZD" ).append("\n"); 
		query.append("            ,T2.SKED_START_ETA" ).append("\n"); 
		query.append("            ,T2.SKED_END_PORT" ).append("\n"); 
		query.append("            ,T2.SKED_END_ZD" ).append("\n"); 
		query.append("            ,T2.SKED_END_ETA" ).append("\n"); 
		query.append("            ,T2.SKED_VOYAGE" ).append("\n"); 
		query.append("            ,T2.PF_TYPE" ).append("\n"); 
		query.append("            ,FR_PORT_ROTN_SEQ" ).append("\n"); 
		query.append("            ,(" ).append("\n"); 
		query.append("                SELECT MIN(PORT_ROTN_SEQ)" ).append("\n"); 
		query.append("                FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("                WHERE VSL_SLAN_CD = SUBSTR(T2.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("                AND PF_SVC_TP_CD = T2.PF_TYPE" ).append("\n"); 
		query.append("                AND PORT_CD = T2.SKED_END_PORT" ).append("\n"); 
		query.append("                AND PORT_ROTN_SEQ > T2.FR_PORT_ROTN_SEQ" ).append("\n"); 
		query.append("            ) AS TO_PORT_ROTN_SEQ_NOTURN" ).append("\n"); 
		query.append("            ,(" ).append("\n"); 
		query.append("                SELECT MIN(PORT_ROTN_SEQ)" ).append("\n"); 
		query.append("                FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("                WHERE VSL_SLAN_CD = SUBSTR(T2.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("                AND PF_SVC_TP_CD = T2.PF_TYPE" ).append("\n"); 
		query.append("                AND PORT_CD = T2.SKED_END_PORT" ).append("\n"); 
		query.append("                AND PORT_ROTN_SEQ >= 1" ).append("\n"); 
		query.append("            ) AS TO_PORT_ROTN_SEQ_TURN" ).append("\n"); 
		query.append("            ,(" ).append("\n"); 
		query.append("                SELECT MAX(PORT_ROTN_SEQ)" ).append("\n"); 
		query.append("                FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("                WHERE VSL_SLAN_CD = SUBSTR(T2.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("                AND PF_SVC_TP_CD = T2.PF_TYPE" ).append("\n"); 
		query.append("            ) AS MAX_PORT_ROTN_SEQ" ).append("\n"); 
		query.append("            ,T2.EEOI_BSA" ).append("\n"); 
		query.append("            ,T2.EEOI_DCAPA" ).append("\n"); 
		query.append("            ,T2.EEOI_OC" ).append("\n"); 
		query.append("            ,(" ).append("\n"); 
		query.append("                CASE" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 13000 THEN '13,000 TEU 이상'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 10000 AND T2.EEOI_DCAPA < 13000 THEN '10,000 ~ 12,999 TEU'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 9000 AND T2.EEOI_DCAPA < 10000 THEN '9,000 ~ 9,999 TEU'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 8000 AND T2.EEOI_DCAPA < 9000 THEN '8,000 ~ 8,999 TEU'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 7000 AND T2.EEOI_DCAPA < 8000 THEN '7,000 ~ 7,999 TEU'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 6000 AND T2.EEOI_DCAPA < 7000 THEN '6,000 ~ 6,999 TEU'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 5000 AND T2.EEOI_DCAPA < 6000 THEN '5,000 ~ 5,999 TEU'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 4000 AND T2.EEOI_DCAPA < 5000 THEN '4,000 ~ 4,999 TEU'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 3000 AND T2.EEOI_DCAPA < 4000  THEN '3,000 ~ 3,999 TEU'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 2000 AND T2.EEOI_DCAPA < 3000  THEN '2,000 ~ 2,999 TEU'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA >= 1000 AND T2.EEOI_DCAPA < 2000  THEN '1,000 ~ 1,999 TEU'" ).append("\n"); 
		query.append("                    WHEN T2.EEOI_DCAPA < 1000  THEN '1,000 TEU 이하'" ).append("\n"); 
		query.append("                END" ).append("\n"); 
		query.append("            ) AS EEOI_GUBUN" ).append("\n"); 
		query.append("            FROM (" ).append("\n"); 
		query.append("                SELECT" ).append("\n"); 
		query.append("                T1.REV_YEAR" ).append("\n"); 
		query.append("                ,T1.REV_MONTH" ).append("\n"); 
		query.append("                ,T1.REV_VESSEL" ).append("\n"); 
		query.append("                ,T1.REV_VOYNO" ).append("\n"); 
		query.append("                ,T1.REV_DIR" ).append("\n"); 
		query.append("                ,T1.REV_TRADE" ).append("\n"); 
		query.append("                ,T1.REV_LANE" ).append("\n"); 
		query.append("                ,T1.REV_FO_QTY" ).append("\n"); 
		query.append("                ,T1.REV_FO_PRICE" ).append("\n"); 
		query.append("                ,T1.REV_FO_AMNT" ).append("\n"); 
		query.append("                ,T1.REV_DO_QTY" ).append("\n"); 
		query.append("                ,T1.REV_DO_PRICE" ).append("\n"); 
		query.append("                ,T1.REV_DO_AMNT" ).append("\n"); 
		query.append("                ,T1.SKED_START_PORT" ).append("\n"); 
		query.append("                ,T1.SKED_START_ZD" ).append("\n"); 
		query.append("                ,T1.SKED_START_ETA" ).append("\n"); 
		query.append("                ,T1.SKED_END_PORT" ).append("\n"); 
		query.append("                ,T1.SKED_END_ZD" ).append("\n"); 
		query.append("                ,T1.SKED_END_ETA" ).append("\n"); 
		query.append("                ,(T1.SKED_END_ETA-T1.SKED_START_ETA) * 24 - (T1.SKED_START_ZD-T1.SKED_END_ZD) AS SKED_VOYAGE" ).append("\n"); 
		query.append("                ,T1.PF_TYPE" ).append("\n"); 
		query.append("                ,(" ).append("\n"); 
		query.append("                    SELECT PORT_ROTN_SEQ" ).append("\n"); 
		query.append("                    FROM VSK_PF_SKD_DTL" ).append("\n"); 
		query.append("                    WHERE VSL_SLAN_CD = SUBSTR(T1.REV_LANE, 1, 3)" ).append("\n"); 
		query.append("                    AND PF_SVC_TP_CD = T1.PF_TYPE" ).append("\n"); 
		query.append("                    AND PORT_CD = T1.SKED_START_PORT" ).append("\n"); 
		query.append("                    AND SKD_DIR_CD = SUBSTR(T1.REV_DIR, 1, 1)" ).append("\n"); 
		query.append("                    AND CLPT_SEQ = 1" ).append("\n"); 
		query.append("                ) AS FR_PORT_ROTN_SEQ" ).append("\n"); 
		query.append("                ,(" ).append("\n"); 
		query.append("                    SELECT BSA_CAPA" ).append("\n"); 
		query.append("                    FROM BSA_VVD_MST" ).append("\n"); 
		query.append("                    WHERE TRD_CD = T1.REV_TRADE" ).append("\n"); 
		query.append("                    AND RLANE_CD = T1.REV_LANE" ).append("\n"); 
		query.append("                    AND VSL_CD = T1.REV_VESSEL" ).append("\n"); 
		query.append("                    AND SKD_VOY_NO = T1.REV_VOYNO" ).append("\n"); 
		query.append("                    AND SKD_DIR_CD = SUBSTR(T1.REV_DIR, 1, 1)" ).append("\n"); 
		query.append("                ) AS EEOI_BSA" ).append("\n"); 
		query.append("                ,(" ).append("\n"); 
		query.append("                    SELECT CNTR_DZN_CAPA" ).append("\n"); 
		query.append("                    FROM MDM_VSL_CNTR" ).append("\n"); 
		query.append("                    WHERE VSL_CD = T1.REV_VESSEL" ).append("\n"); 
		query.append("                ) AS EEOI_DCAPA" ).append("\n"); 
		query.append("                ,(" ).append("\n"); 
		query.append("                    SELECT DECODE(VSL_OWN_IND_CD, 'C', 'CHR', 'O', 'OWN')" ).append("\n"); 
		query.append("                    FROM MDM_VSL_CNTR" ).append("\n"); 
		query.append("                    WHERE VSL_CD = T1.REV_VESSEL" ).append("\n"); 
		query.append("                ) AS EEOI_OC" ).append("\n"); 
		query.append("                FROM (" ).append("\n"); 
		query.append("                    SELECT" ).append("\n"); 
		query.append("                    SUBSTR(REV_YRMON, 1, 4) AS REV_YEAR" ).append("\n"); 
		query.append("                    ,SUBSTR(REV_YRMON, 5, 2) AS REV_MONTH" ).append("\n"); 
		query.append("                    ,SUBSTR(REV_VVD_CD, 1, 4) AS REV_VESSEL" ).append("\n"); 
		query.append("                    ,SUBSTR(REV_VVD_CD, 5, 4) AS REV_VOYNO" ).append("\n"); 
		query.append("                    ,SUBSTR(REV_VVD_CD, 9, 2) AS REV_DIR" ).append("\n"); 
		query.append("                    ,SUBSTR(RLANE_CD, 4, 2) || 'S' AS REV_TRADE" ).append("\n"); 
		query.append("                    ,RLANE_CD AS REV_LANE" ).append("\n"); 
		query.append("                    ,ISS_FOIL_WGT AS REV_FO_QTY" ).append("\n"); 
		query.append("                    ,ISS_FOIL_UT_PRC AS REV_FO_PRICE" ).append("\n"); 
		query.append("                    ,ISS_FOIL_AMT AS REV_FO_AMNT" ).append("\n"); 
		query.append("                    ,ISS_DOIL_WGT AS REV_DO_QTY" ).append("\n"); 
		query.append("                    ,ISS_DOIL_UT_PRC AS REV_DO_PRICE" ).append("\n"); 
		query.append("                    ,ISS_DOIL_AMT AS REV_DO_AMNT" ).append("\n"); 
		query.append("                    ,ST_PORT_CD AS SKED_START_PORT" ).append("\n"); 
		query.append("                    ,(SELECT GMT_HRS/60 FROM MDM_LOCATION WHERE LOC_CD=ST_PORT_CD) AS SKED_START_ZD" ).append("\n"); 
		query.append("                    ,ST_PORT_ETA_DT AS SKED_START_ETA" ).append("\n"); 
		query.append("                    ,END_PORT_CD AS SKED_END_PORT" ).append("\n"); 
		query.append("                    ,(SELECT GMT_HRS/60 FROM MDM_LOCATION WHERE LOC_CD=END_PORT_CD) AS SKED_END_ZD" ).append("\n"); 
		query.append("                    ,END_PORT_ETA_DT AS SKED_END_ETA" ).append("\n"); 
		query.append("                    ,(" ).append("\n"); 
		query.append("                        SELECT PF_SKD_TP_CD " ).append("\n"); 
		query.append("                        FROM VSK_VSL_SKD" ).append("\n"); 
		query.append("                        WHERE VSL_CD = SUBSTR(REV_VVD_CD, 1, 4) " ).append("\n"); 
		query.append("                        AND SKD_VOY_NO = SUBSTR(REV_VVD_CD, 5, 4) " ).append("\n"); 
		query.append("                        AND SKD_DIR_CD = SUBSTR(REV_VVD_CD, 9, 1)" ).append("\n"); 
		query.append("                    ) PF_TYPE" ).append("\n"); 
		query.append("                    FROM FCM_MON_INVT_TJ_SMRY" ).append("\n"); 
		query.append("                    WHERE REV_YRMON BETWEEN @[fm_yrmon] AND @[to_yrmon]" ).append("\n"); 
		query.append("                    #if (${vsl_slan_cd} != '') " ).append("\n"); 
		query.append("                    AND SUBSTR(RLANE_CD, 1, 3) = @[vsl_slan_cd]" ).append("\n"); 
		query.append("                    #end" ).append("\n"); 
		query.append("                    #if (${vsl_cd} != '') " ).append("\n"); 
		query.append("                    AND SUBSTR(REV_VVD_CD, 1, 4) = @[vsl_cd]" ).append("\n"); 
		query.append("                    #end" ).append("\n"); 
		query.append("                ) T1" ).append("\n"); 
		query.append("            ) T2" ).append("\n"); 
		query.append("        ) T3" ).append("\n"); 
		query.append("    )" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/***** VSK Joined DEP_RPT DATA *****/" ).append("\n"); 
		query.append(",DEP_RPT_TMP AS (" ).append("\n"); 
		query.append("    SELECT" ).append("\n"); 
		query.append("    VSK.VSL_CD" ).append("\n"); 
		query.append("    ,VSK.SKD_VOY_NO" ).append("\n"); 
		query.append("    ,VSK.SKD_DIR_CD" ).append("\n"); 
		query.append("    ,RPT.NVGT_ML_DIST" ).append("\n"); 
		query.append("    ,RPT.ENG_ML_DIST" ).append("\n"); 
		query.append("    ,RPT.MNVR_IN_ML_DIST" ).append("\n"); 
		query.append("    ,RPT.MNVR_OUT_ML_DIST" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TO_NUMBER(NVL(RPT.AVG_SPD, '0')) > 0 THEN ROUND(RPT.NVGT_ML_DIST / RPT.AVG_SPD, 1)" ).append("\n"); 
		query.append("        ELSE 0" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS SAIL_TIME" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        NVL(PORT_MN_FOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("        + NVL(PORT_GNR_FOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("        + NVL(PORT_BLR_FOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("        + NVL(PORT_MN_LOW_SULP_FOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("        + NVL(PORT_GNR_LOW_SULP_FOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("        + NVL(PORT_BLR_LOW_SULP_FOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("    ) AS PORT_FO" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        NVL(PORT_MN_DOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("        + NVL(PORT_GNR_DOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("        + NVL(PORT_BLR_DOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("        + NVL(PORT_MN_LOW_SULP_DOIL_CSM_QTY , 0)" ).append("\n"); 
		query.append("        + NVL(PORT_GNR_LOW_SULP_DOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("        + NVL(PORT_BLR_LOW_SULP_DOIL_CSM_QTY, 0)" ).append("\n"); 
		query.append("    ) AS PORT_DO" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("        SELECT" ).append("\n"); 
		query.append("        VSL_CD" ).append("\n"); 
		query.append("        ,SKD_VOY_NO" ).append("\n"); 
		query.append("        ,SKD_DIR_CD" ).append("\n"); 
		query.append("        ,DEP_PORT_CD" ).append("\n"); 
		query.append("        ,RANK() OVER (PARTITION BY VSL_CD, SKD_VOY_NO, SKD_DIR_CD, DEP_PORT_CD ORDER BY CLPT_IND_SEQ) AS CLPT_IND_SEQ" ).append("\n"); 
		query.append("        ,NXT_PORT_CD" ).append("\n"); 
		query.append("        ,NVGT_ML_DIST" ).append("\n"); 
		query.append("        ,ENG_ML_DIST" ).append("\n"); 
		query.append("        ,MNVR_IN_ML_DIST" ).append("\n"); 
		query.append("        ,MNVR_OUT_ML_DIST" ).append("\n"); 
		query.append("        ,AVG_SPD" ).append("\n"); 
		query.append("        ,PORT_MN_FOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_GNR_FOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_BLR_FOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_MN_LOW_SULP_FOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_GNR_LOW_SULP_FOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_BLR_LOW_SULP_FOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_MN_DOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_GNR_DOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_BLR_DOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_MN_LOW_SULP_DOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_GNR_LOW_SULP_DOIL_CSM_QTY" ).append("\n"); 
		query.append("        ,PORT_BLR_LOW_SULP_DOIL_CSM_QTY" ).append("\n"); 
		query.append("        FROM FCM_DEP_RPT" ).append("\n"); 
		query.append("		#if (${vsl_cd} != '') " ).append("\n"); 
		query.append("		WHERE VSL_CD = @[vsl_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("    ) RPT" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        SELECT" ).append("\n"); 
		query.append("        VSL_CD" ).append("\n"); 
		query.append("        ,SKD_VOY_NO" ).append("\n"); 
		query.append("        ,SKD_DIR_CD" ).append("\n"); 
		query.append("        ,VPS_PORT_CD" ).append("\n"); 
		query.append("        ,CLPT_IND_SEQ" ).append("\n"); 
		query.append("        ,LEAD(VSL_CD)         OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_VSL_CD" ).append("\n"); 
		query.append("        ,LEAD(SKD_VOY_NO)     OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_SKD_VOY_NO" ).append("\n"); 
		query.append("        ,LEAD(SKD_DIR_CD)  	  OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_SKD_DIR_CD" ).append("\n"); 
		query.append("        ,LEAD(VPS_PORT_CD)    OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_PORT_CD" ).append("\n"); 
		query.append("        ,LEAD(CLPT_IND_SEQ)   OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_CLPT_IND_SEQ" ).append("\n"); 
		query.append("        ,LEAD(VPS_PORT_CD, 2) OVER (ORDER BY DECODE(SKD_CNG_STS_CD, 'S', 'X', 'A'), VSL_CD, SKD_VOY_NO, VSL_SLAN_DIR_SEQ, CLPT_SEQ) AS NXT_NXT_PORT_CD" ).append("\n"); 
		query.append("        FROM VSK_VSL_PORT_SKD T1, MDM_VSL_SVC_LANE_DIR T2" ).append("\n"); 
		query.append("        WHERE T1.SLAN_CD = T2.VSL_SLAN_CD" ).append("\n"); 
		query.append("        AND T1.SKD_DIR_CD = T2.VSL_SLAN_DIR_CD" ).append("\n"); 
		query.append("        AND T1.TURN_PORT_IND_CD NOT IN ('D', 'V', 'F')" ).append("\n"); 
		query.append("		#if (${vsl_slan_cd} != '') " ).append("\n"); 
		query.append("		AND SLAN_CD = @[vsl_slan_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("		#if (${vsl_cd} != '') " ).append("\n"); 
		query.append("		AND T1.VSL_CD = @[vsl_cd]" ).append("\n"); 
		query.append("		#end" ).append("\n"); 
		query.append("    ) VSK" ).append("\n"); 
		query.append("    WHERE RPT.VSL_CD = VSK.NXT_VSL_CD" ).append("\n"); 
		query.append("    AND RPT.SKD_VOY_NO = VSK.NXT_SKD_VOY_NO" ).append("\n"); 
		query.append("    AND RPT.SKD_DIR_CD= VSK.NXT_SKD_DIR_CD" ).append("\n"); 
		query.append("    AND RPT.DEP_PORT_CD = VSK.NXT_PORT_CD" ).append("\n"); 
		query.append("    AND RPT.CLPT_IND_SEQ = VSK.NXT_CLPT_IND_SEQ" ).append("\n"); 
		query.append("    AND RPT.NXT_PORT_CD = VSK.NXT_NXT_PORT_CD" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("/***** 여기서부터 본 쿼리 *****/" ).append("\n"); 
		query.append("SELECT" ).append("\n"); 
		query.append("    REV_YEAR" ).append("\n"); 
		query.append("    ,REV_MONTH" ).append("\n"); 
		query.append("    ,REV_VESSEL" ).append("\n"); 
		query.append("    ,REV_VOYNO" ).append("\n"); 
		query.append("    ,REV_DIR" ).append("\n"); 
		query.append("    ,REV_TRADE" ).append("\n"); 
		query.append("    ,REV_LANE" ).append("\n"); 
		query.append("    ,REV_FO_QTY" ).append("\n"); 
		query.append("    ,REV_FO_PRICE" ).append("\n"); 
		query.append("    ,REV_FO_AMNT" ).append("\n"); 
		query.append("    ,REV_DO_QTY" ).append("\n"); 
		query.append("    ,REV_DO_PRICE" ).append("\n"); 
		query.append("    ,REV_DO_AMNT" ).append("\n"); 
		query.append("    ,SKED_START_PORT" ).append("\n"); 
		query.append("    ,SKED_START_ZD" ).append("\n"); 
		query.append("    ,SKED_START_ETA" ).append("\n"); 
		query.append("    ,SKED_END_PORT" ).append("\n"); 
		query.append("    ,SKED_END_ZD" ).append("\n"); 
		query.append("    ,SKED_END_ETA" ).append("\n"); 
		query.append("    ,SKED_VOYAGE" ).append("\n"); 
		query.append("    ,PF_TYPE" ).append("\n"); 
		query.append("    ,PF_DISTANCE" ).append("\n"); 
		query.append("    ,PF_SPD" ).append("\n"); 
		query.append("    ,PF_SEA_TIME" ).append("\n"); 
		query.append("    ,PF_BUFFER_TIME" ).append("\n"); 
		query.append("    ,PF_CSPEED" ).append("\n"); 
		query.append("    ,PF_MANU_IN" ).append("\n"); 
		query.append("    ,PF_MANU_OUT" ).append("\n"); 
		query.append("    ,PF_PORT_TIME" ).append("\n"); 
		query.append("    ,PF_TTL_TIME" ).append("\n"); 
		query.append("    ,ROUND(REV_FO_QTY + REV_DO_QTY) AS CON_FO_DO" ).append("\n"); 
		query.append("    ,ROUND((REV_FO_QTY + REV_DO_QTY) - (TOTAL_PORT_FO + TOTAL_PORT_DO)) AS CON_SEA" ).append("\n"); 
		query.append("    ,(TOTAL_PORT_FO + TOTAL_PORT_DO) AS CON_PORT" ).append("\n"); 
		query.append("    ,TOTAL_OBS_MILE" ).append("\n"); 
		query.append("    ,TOTAL_MILES_ENG" ).append("\n"); 
		query.append("    ,TOTAL_MILES_IN" ).append("\n"); 
		query.append("    ,TOTAL_MILES_OUT" ).append("\n"); 
		query.append("    ,(TOTAL_OBS_MILE + TOTAL_MILES_IN + TOTAL_MILES_OUT) AS TOTAL_MILES" ).append("\n"); 
		query.append("    ,TOTAL_SAIL_TIME" ).append("\n"); 
		query.append("    ,TOTAL_PORT_FO" ).append("\n"); 
		query.append("    ,TOTAL_PORT_DO" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN TOTAL_SAIL_TIME > 0 THEN ROUND(TOTAL_OBS_MILE / TOTAL_SAIL_TIME, 1)" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS TOTAL_AVER_SPD" ).append("\n"); 
		query.append("    ,EEOI_BSA" ).append("\n"); 
		query.append("    ,EEOI_DCAPA" ).append("\n"); 
		query.append("    ,EEOI_OC" ).append("\n"); 
		query.append("    ,EEOI_GUBUN" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN (EEOI_DCAPA*TOTAL_OBS_MILE) > 0 THEN ROUND((REV_FO_QTY+REV_DO_QTY) * 1000000 / (EEOI_DCAPA*TOTAL_OBS_MILE), 1)" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS EEOI_CAL_BSA" ).append("\n"); 
		query.append("    ,(" ).append("\n"); 
		query.append("        CASE WHEN (EEOI_BSA*TOTAL_OBS_MILE) > 0 THEN ROUND((REV_FO_QTY+REV_DO_QTY) * 1000000 / (EEOI_BSA*TOTAL_OBS_MILE), 1)" ).append("\n"); 
		query.append("        END" ).append("\n"); 
		query.append("    ) AS EEOI_CAL_DCAPA" ).append("\n"); 
		query.append("FROM (" ).append("\n"); 
		query.append("    SELECT" ).append("\n"); 
		query.append("        T1.REV_YEAR" ).append("\n"); 
		query.append("        ,T1.REV_MONTH" ).append("\n"); 
		query.append("        ,T1.REV_VESSEL" ).append("\n"); 
		query.append("        ,T1.REV_VOYNO" ).append("\n"); 
		query.append("        ,T1.REV_DIR" ).append("\n"); 
		query.append("        ,T1.REV_TRADE" ).append("\n"); 
		query.append("        ,T1.REV_LANE" ).append("\n"); 
		query.append("        ,T1.REV_FO_QTY" ).append("\n"); 
		query.append("        ,T1.REV_FO_PRICE" ).append("\n"); 
		query.append("        ,T1.REV_FO_AMNT" ).append("\n"); 
		query.append("        ,T1.REV_DO_QTY" ).append("\n"); 
		query.append("        ,T1.REV_DO_PRICE" ).append("\n"); 
		query.append("        ,T1.REV_DO_AMNT" ).append("\n"); 
		query.append("        ,T1.SKED_START_PORT" ).append("\n"); 
		query.append("        ,T1.SKED_START_ZD" ).append("\n"); 
		query.append("        ,T1.SKED_START_ETA" ).append("\n"); 
		query.append("        ,T1.SKED_END_PORT" ).append("\n"); 
		query.append("        ,T1.SKED_END_ZD" ).append("\n"); 
		query.append("        ,T1.SKED_END_ETA" ).append("\n"); 
		query.append("        ,T1.SKED_VOYAGE" ).append("\n"); 
		query.append("        ,T1.PF_TYPE" ).append("\n"); 
		query.append("        ,T1.PF_DISTANCE" ).append("\n"); 
		query.append("        ,T1.PF_SPD" ).append("\n"); 
		query.append("        ,T1.PF_SEA_TIME" ).append("\n"); 
		query.append("        ,T1.PF_BUFFER_TIME" ).append("\n"); 
		query.append("        ,T1.PF_CSPEED" ).append("\n"); 
		query.append("        ,T1.PF_MANU_IN" ).append("\n"); 
		query.append("        ,T1.PF_MANU_OUT" ).append("\n"); 
		query.append("        ,T1.PF_PORT_TIME" ).append("\n"); 
		query.append("        ,T1.PF_TTL_TIME" ).append("\n"); 
		query.append("        ,SUM(T2.NVGT_ML_DIST) AS TOTAL_OBS_MILE" ).append("\n"); 
		query.append("        ,SUM(T2.ENG_ML_DIST) AS TOTAL_MILES_ENG" ).append("\n"); 
		query.append("        ,SUM(T2.MNVR_IN_ML_DIST) AS TOTAL_MILES_IN" ).append("\n"); 
		query.append("        ,SUM(T2.MNVR_OUT_ML_DIST) AS TOTAL_MILES_OUT" ).append("\n"); 
		query.append("        ,SUM(T2.SAIL_TIME) AS TOTAL_SAIL_TIME" ).append("\n"); 
		query.append("        ,SUM(T2.PORT_FO) AS TOTAL_PORT_FO" ).append("\n"); 
		query.append("        ,SUM(T2.PORT_DO) AS TOTAL_PORT_DO" ).append("\n"); 
		query.append("        ,T1.EEOI_BSA" ).append("\n"); 
		query.append("        ,T1.EEOI_DCAPA" ).append("\n"); 
		query.append("        ,T1.EEOI_OC" ).append("\n"); 
		query.append("        ,T1.EEOI_GUBUN" ).append("\n"); 
		query.append("    FROM ERP_DATA T1, DEP_RPT_TMP T2" ).append("\n"); 
		query.append("    WHERE T1.REV_VESSEL = T2.VSL_CD(+)" ).append("\n"); 
		query.append("    AND T1.REV_VOYNO = T2.SKD_VOY_NO(+)" ).append("\n"); 
		query.append("    AND SUBSTR(T1.REV_DIR, 1, 1) = T2.SKD_DIR_CD(+)" ).append("\n"); 
		query.append("    GROUP BY T1.REV_YEAR" ).append("\n"); 
		query.append("        ,T1.REV_MONTH" ).append("\n"); 
		query.append("        ,T1.REV_VESSEL" ).append("\n"); 
		query.append("        ,T1.REV_VOYNO" ).append("\n"); 
		query.append("        ,T1.REV_DIR" ).append("\n"); 
		query.append("        ,T1.REV_TRADE" ).append("\n"); 
		query.append("        ,T1.REV_LANE" ).append("\n"); 
		query.append("        ,T1.REV_FO_QTY" ).append("\n"); 
		query.append("        ,T1.REV_FO_PRICE" ).append("\n"); 
		query.append("        ,T1.REV_FO_AMNT" ).append("\n"); 
		query.append("        ,T1.REV_DO_QTY" ).append("\n"); 
		query.append("        ,T1.REV_DO_PRICE" ).append("\n"); 
		query.append("        ,T1.REV_DO_AMNT" ).append("\n"); 
		query.append("        ,T1.SKED_START_PORT" ).append("\n"); 
		query.append("        ,T1.SKED_START_ZD" ).append("\n"); 
		query.append("        ,T1.SKED_START_ETA" ).append("\n"); 
		query.append("        ,T1.SKED_END_PORT" ).append("\n"); 
		query.append("        ,T1.SKED_END_ZD" ).append("\n"); 
		query.append("        ,T1.SKED_END_ETA" ).append("\n"); 
		query.append("        ,T1.SKED_VOYAGE" ).append("\n"); 
		query.append("        ,T1.PF_TYPE" ).append("\n"); 
		query.append("        ,T1.PF_DISTANCE" ).append("\n"); 
		query.append("        ,T1.PF_SPD" ).append("\n"); 
		query.append("        ,T1.PF_SEA_TIME" ).append("\n"); 
		query.append("        ,T1.PF_BUFFER_TIME" ).append("\n"); 
		query.append("        ,T1.PF_CSPEED" ).append("\n"); 
		query.append("        ,T1.PF_MANU_IN" ).append("\n"); 
		query.append("        ,T1.PF_MANU_OUT" ).append("\n"); 
		query.append("        ,T1.PF_PORT_TIME" ).append("\n"); 
		query.append("        ,T1.PF_TTL_TIME" ).append("\n"); 
		query.append("        ,T1.EEOI_BSA" ).append("\n"); 
		query.append("        ,T1.EEOI_DCAPA" ).append("\n"); 
		query.append("        ,T1.EEOI_OC" ).append("\n"); 
		query.append("        ,T1.EEOI_GUBUN" ).append("\n"); 
		query.append(")" ).append("\n"); 
		query.append("ORDER BY REV_YEAR, REV_MONTH, REV_VESSEL, REV_VOYNO, SKED_START_ETA" ).append("\n"); 

	}
}