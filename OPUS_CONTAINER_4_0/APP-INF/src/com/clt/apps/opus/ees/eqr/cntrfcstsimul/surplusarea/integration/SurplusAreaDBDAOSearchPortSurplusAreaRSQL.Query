<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="SurplusAreaDBDAOSearchPortSurplusAreaRSQL">
			<desc><![CDATA[Surplus Area - Port 데이터를 조회함]]></desc>
			<sql><![CDATA[
WITH  
VVD_PORT AS (
    SELECT 
    --X.COST_YRWK, X.VPS_PORT_CD, X.YD_CD 
	X.COST_YRWK, X.SCC_CD
    FROM (
        SELECT 
        DISTINCT
        R.REP_TRD_CD TRD_CD, D.SUB_TRD_CD, R.RLANE_CD, D.VSL_SLAN_DIR_CD, D.FM_CONTI_CD
        , P.COST_YR||P.COST_WK AS COST_YRWK, P.SLS_FM_DT, P.SLS_TO_DT
        , V.VSL_CD, V.SKD_VOY_NO, V.SKD_DIR_CD, V.SLAN_CD, V.CLPT_SEQ, V.VPS_PORT_CD, V.YD_CD, T.SCC_CD
        , MAX(DECODE(V.TURN_PORT_FLG,'Y',V.VPS_ETD_DT,'')) OVER (PARTITION BY V.SLAN_CD,V.VSL_CD,V.SKD_VOY_NO,V.SKD_DIR_CD) MAX_VPS_ETD_DT
        FROM MDM_REV_LANE R, MDM_DTL_REV_LANE D, MDM_LOCATION L, COA_MON_VVD C, COA_WK_PRD P, VSK_VSL_PORT_SKD V, MDM_VSL_SVC_LANE M, MDM_LOCATION T
        WHERE  1=1
        AND R.RLANE_CD = D.RLANE_CD
        AND NVL(R.DELT_FLG,'N') <> 'Y' 
        AND NVL(D.DELT_FLG,'N') <> 'Y' 
        AND D.IOC_CD = CASE WHEN SUBSTR(R.REP_TRD_CD,1,1)='I' THEN 'I' ELSE 'O' END
    #if(${lane} != '')        -- Lane 콤보 조건 일 경우
        AND (
        #foreach($key IN ${arr_lane})
            #if($velocityCount > 1 )
                OR
            #end 
                (
                        D.RLANE_CD LIKE SUBSTR('$key',6,3)||'%'  -- LANE
                    AND D.SUB_TRD_CD = SUBSTR('$key',4,2)        -- SUB TRADE
                    AND R.REP_TRD_CD = SUBSTR('$key',1,3)        -- TRADE
                )
        #end
        )
            
    #elseif(${subtrade} != '') -- S.Trade 콤보 조건 일 경우
        AND (
        #foreach($key IN ${arr_subtrade})
            #if($velocityCount > 1 )
                OR
            #end 
                (
                        D.SUB_TRD_CD = SUBSTR('$key',4,2)    -- SUB TRADE
                    AND R.REP_TRD_CD = SUBSTR('$key',1,3)    -- TRADE
                )
        #end
        )

    #elseif(${trade} != '')   -- Trade 콤보 조건 일 경우
        AND (
              R.REP_TRD_CD IN (
        #foreach($key IN ${arr_trade})
            #if($velocityCount == 1 )
                                '$key'
            #else
                               ,'$key'
            #end                
        #end
                                      )
        )
    #end

        AND D.FM_CONTI_CD  = L.CONTI_CD
        AND NVL(L.DELT_FLG,'N') <> 'Y'
        AND R.REP_TRD_CD = C.TRD_CD
        AND D.SUB_TRD_CD = C.SUB_TRD_CD
        AND C.RLANE_CD = R.RLANE_CD
        AND SUBSTR(C.SLS_YRMON,1,4) = P.COST_YR
        AND C.COST_WK = P.COST_WK
        AND C.DIR_CD = D.VSL_SLAN_DIR_CD
        AND P.COST_YR||P.COST_WK BETWEEN @[fm_yrwk] AND @[to_yrwk]
        AND V.SLAN_CD =  M.VSL_SLAN_CD
        AND V.SLAN_CD = C.SLAN_CD
        AND V.VSL_CD				=  C.VSL_CD
        AND V.SKD_VOY_NO			=  C.SKD_VOY_NO
        AND V.SKD_DIR_CD			=  C.DIR_CD
        AND V.TURN_PORT_IND_CD		!= 'D'
        AND V.TURN_PORT_IND_CD		!= 'V'
        AND M.VSL_TP_CD			    =  'C'
        AND L.LOC_CD                = V.VPS_PORT_CD
        AND V.VPS_PORT_CD           = T.LOC_CD
		AND DECODE(SUBSTR(R.REP_TRD_CD,1,1),'I','X',T.CONTI_CD) <> 'A'
        AND NVL(T.DELT_FLG,'N') <> 'Y'
	#if(${subconti} != '')
        AND DECODE(SUBSTR(R.REP_TRD_CD,1,1),'I',T.SCONTI_CD,'X') = DECODE(SUBSTR(R.REP_TRD_CD,1,1),'I',@[subconti],'X')
	#end
        GROUP BY R.REP_TRD_CD, D.SUB_TRD_CD, R.RLANE_CD, D.VSL_SLAN_DIR_CD, D.FM_CONTI_CD
                 , P.COST_YR, P.COST_WK, P.SLS_FM_DT, P.SLS_TO_DT
                 , V.VSL_CD, V.SKD_VOY_NO, V.SKD_DIR_CD, V.SLAN_CD, V.CLPT_SEQ, V.VPS_PORT_CD, V.YD_CD, T.SCC_CD
                 , DECODE(V.TURN_PORT_FLG,'Y',V.VPS_ETD_DT,'')
    ) X, MDM_LOCATION A
	WHERE 1=1
	AND A.LOC_CD = X.VPS_PORT_CD
	AND NVL(A.DELT_FLG,'N') <> 'Y'
    GROUP BY X.COST_YRWK, X.SCC_CD--, X.VPS_PORT_CD, X.YD_CD 
)
,
SIM_TP_CD_DATA AS (
    SELECT 1 GRP_CD, TO_NUMBER('') SORT, 'INN' CODE, 'Initial Inventory' NAME   FROM DUAL UNION ALL
    SELECT 1 GRP_CD, 1             SORT, 'IV'  CODE, 'Inventory' NAME           FROM DUAL UNION ALL
    SELECT 1 GRP_CD, 2             SORT, 'IM'  CODE, 'Inventory Damage' NAME    FROM DUAL UNION ALL
    SELECT 1 GRP_CD, 3             SORT, 'ID'  CODE, 'Inventory Disposal' NAME  FROM DUAL UNION ALL
    SELECT 1 GRP_CD, 4             SORT, 'IS'  CODE, 'Inventory SOC' NAME       FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 0             SORT, 'INP' CODE, 'Inventory Plus (-)' NAME  FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 1             SORT, 'MG'  CODE, 'MG' NAME       	        FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 2             SORT, 'RD'  CODE, 'MT In via VD' NAME        FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 3             SORT, 'RI'  CODE, 'MT In via EN/TN' NAME     FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 4             SORT, 'OH'  CODE, 'On-hire' NAME             FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 5             SORT, 'DI'  CODE, 'Domestic In' NAME         FROM DUAL UNION ALL
    SELECT 2 GRP_CD, 6             SORT, 'SI'  CODE, 'Sublease In' NAME         FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 0             SORT, 'INM' CODE, 'Inventory Minus (-)' NAME FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 1             SORT, 'OP'  CODE, 'OP' NAME                  FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 2             SORT, 'RL'  CODE, 'MT Out via VL' NAME       FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 3             SORT, 'RO'  CODE, 'MT Out via EN/TN' NAME    FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 4             SORT, 'PL'  CODE, 'MT Loading Plan' NAME     FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 5             SORT, 'OT'  CODE, 'Off-hire / Disposal' NAME FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 6             SORT, 'DO'  CODE, 'Domestic Out' NAME        FROM DUAL UNION ALL
    SELECT 3 GRP_CD, 7             SORT, 'SO'  CODE, 'Sublease Out' NAME        FROM DUAL UNION ALL
    SELECT 4 GRP_CD, 1             SORT, 'FBB' CODE, 'Final Balance' NAME       FROM DUAL
)
,
SIM_SS_DATA AS (
    SELECT 
        S.GRP_CD, S.SORT, S.CODE, S.NAME, Q.LCC_CD, Q.SCC_CD
        , Q.CNTR_TPSZ_CD, Q.FCAST_YRWK
        , SUM(NVL(DECODE(Q.INVT_SIM_TP_CD,S.CODE,Q.QTY,0),0)) QTY
        , MAX(NVL(DECODE(Q.INVT_SIM_TP_CD,S.CODE,Q.MNL_INP,''),'')) MNL_INP
    FROM SIM_TP_CD_DATA S, (
        SELECT
            B.LCC_CD, B.SCC_CD
            , Q.INVT_SIM_TP_CD
            , Q.CNTR_TPSZ_CD, Q.FCAST_YRWK
            , SUM(NVL(Q.CNTR_QTY,0)) QTY
            , MAX(Q.MNL_INP) MNL_INP
        FROM (
            SELECT
            Q.YD_CD, 
			CASE
			WHEN Q.FCAST_YRWK >= @[curr_yrwk]
			THEN 
		    	CASE
			    WHEN SQ.FCAST_YRWK IS NOT NULL 
			    THEN Q.INVT_SIM_TP_CD
			    ELSE DECODE(Q.INVT_SIM_TP_CD,'OF','OP','OP','XX','MF','MG','MG','XX',Q.INVT_SIM_TP_CD)
			    END
			ELSE Q.INVT_SIM_TP_CD
			END INVT_SIM_TP_CD ,  
			Q.CNTR_TPSZ_CD, Q.FCAST_YRWK, NVL(SQ.CNTR_QTY,Q.CNTR_QTY) CNTR_QTY
            , CASE WHEN SQ.FCAST_YRWK IS NOT NULL THEN 'Y' ELSE '' END MNL_INP
            FROM EQR_CTRL_INVT_SIM_DTL D, EQR_CTRL_INVT_SIM_DTL_QTY Q--, VVD_PORT V
               , ( SELECT Q.FCAST_YRWK, Q.PORT_CD, Q.INVT_SIM_TP_CD, Q.CNTR_TPSZ_CD, Q.CNTR_QTY, Q.TMP_SAV_FLG, Q.CRE_DT, Q.UPD_DT  
                   FROM EQR_CTRL_INVT_PORT_SIM S, EQR_CTRL_INVT_PORT_SIM_QTY Q
                   WHERE 1=1
                   AND S.FCAST_YRWK = Q.FCAST_YRWK
                   AND S.PORT_CD = Q.PORT_CD
                   AND S.INVT_SIM_TP_CD = Q.INVT_SIM_TP_CD 
                   AND Q.FCAST_YRWK >= @[curr_yrwk]
                   AND Q.UPD_DT >= (SELECT TO_DATE(W.WK_ST_DT,'YYYYMMDD')+(1+5/24) BAT_MND FROM EQR_WK_PRD W WHERE W.PLN_YR = SUBSTR(@[curr_yrwk],1,4) AND W.PLN_WK = SUBSTR(@[curr_yrwk],5))
                 ) SQ
            WHERE 1=1
            AND D.FCAST_YRWK = Q.FCAST_YRWK
            AND D.YD_CD = Q.YD_CD
            AND D.INVT_SIM_TP_CD = Q.INVT_SIM_TP_CD
            AND D.FCAST_YRWK = Q.FCAST_YRWK
            AND Q.FCAST_YRWK BETWEEN @[fm_yrwk] AND @[to_yrwk]
            AND Q.FCAST_YRWK = SQ.FCAST_YRWK(+)
            AND SUBSTR(Q.YD_CD,1,5) = SQ.PORT_CD(+)
            AND Q.INVT_SIM_TP_CD = SQ.INVT_SIM_TP_CD(+)
            AND Q.CNTR_TPSZ_CD = SQ.CNTR_TPSZ_CD(+)
            --AND Q.FCAST_YRWK = V.COST_YRWK
            --AND Q.YD_CD = V.YD_CD
            GROUP BY Q.YD_CD, Q.INVT_SIM_TP_CD, Q.CNTR_TPSZ_CD, Q.FCAST_YRWK, NVL(SQ.CNTR_QTY,Q.CNTR_QTY), SQ.FCAST_YRWK
            UNION ALL
            SELECT 
            Q.PORT_CD, 
			Q.INVT_SIM_TP_CD INVT_SIM_TP_CD , 
			Q.CNTR_TPSZ_CD, Q.FCAST_YRWK, Q.CNTR_QTY
            , 'Y' MNL_INP
            FROM EQR_CTRL_INVT_PORT_SIM S, EQR_CTRL_INVT_PORT_SIM_QTY Q--, VVD_PORT V
            WHERE 1=1
            AND S.FCAST_YRWK = Q.FCAST_YRWK
            AND S.PORT_CD = Q.PORT_CD
            AND S.INVT_SIM_TP_CD = Q.INVT_SIM_TP_CD 
            AND S.FCAST_YRWK = Q.FCAST_YRWK
            AND Q.FCAST_YRWK >= @[curr_yrwk]
            AND Q.UPD_DT >= (SELECT TO_DATE(W.WK_ST_DT,'YYYYMMDD')+(1+5/24) BAT_MND FROM EQR_WK_PRD W WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN W.WK_ST_DT AND W.WK_END_DT)
            AND NOT EXISTS (
                SELECT 'X' 
                FROM EQR_CTRL_INVT_SIM_DTL_QTY X
                WHERE 1=1
                AND X.FCAST_YRWK = Q.FCAST_YRWK
                AND SUBSTR(X.YD_CD,1,5) = Q.PORT_CD
                AND X.INVT_SIM_TP_CD = Q.INVT_SIM_TP_CD
                AND X.CNTR_TPSZ_CD = Q.CNTR_TPSZ_CD
            )
            --AND Q.FCAST_YRWK = V.COST_YRWK
            --AND Q.PORT_CD = V.VPS_PORT_CD
            GROUP BY Q.PORT_CD, Q.INVT_SIM_TP_CD, Q.CNTR_TPSZ_CD, Q.FCAST_YRWK, Q.CNTR_QTY
        ) Q, MDM_LOCATION A, MDM_EQ_ORZ_CHT B, VVD_PORT V
        WHERE 1=1
            AND A.LOC_CD = SUBSTR(Q.YD_CD,1,5)
            AND A.SCC_CD = B.SCC_CD
            AND NVL(A.DELT_FLG,'N') <> 'Y'
            AND NVL(B.DELT_FLG,'N') <> 'Y'
			AND Q.FCAST_YRWK = V.COST_YRWK
			AND A.SCC_CD = V.SCC_CD
        GROUP BY B.LCC_CD, B.SCC_CD, Q.INVT_SIM_TP_CD, Q.CNTR_TPSZ_CD, Q.FCAST_YRWK 
    ) Q
    WHERE 1=1
    #if( ${level_cd} == '2' ) --LEVEL_CD 2 RHQ
        AND Q.LCC_CD IN (
            SELECT LCC_CD
            FROM MDM_EQ_ORZ_CHT                         
            WHERE SCC_CD IN (
                SELECT SCC_CD
                FROM MDM_LOCATION
                WHERE LOC_CD IN (SELECT DISTINCT LOC_CD
                                 FROM MDM_ORGANIZATION
                                 WHERE NVL(DELT_FLG,'N') <> 'Y'
                                 CONNECT BY NOCYCLE PRIOR OFC_CD = PRNT_OFC_CD
                                 START WITH OFC_CD = (SELECT DISTINCT AR_HD_QTR_OFC_CD FROM MDM_ORGANIZATION WHERE OFC_CD = @[ofc_cd]))
            )
        )
    #elseif( ${level_cd} == '5' ) --LEVEL_CD 5 ATLSC/PHXSC
        AND Q.LCC_CD IN (
            SELECT LCC_CD
            FROM MDM_EQ_ORZ_CHT                         
            WHERE SCC_CD IN (
                SELECT SCC_CD
                FROM MDM_LOCATION
                WHERE LOC_CD IN (SELECT DISTINCT LOC_CD
                                 FROM MDM_ORGANIZATION
                                 WHERE NVL(DELT_FLG,'N') <> 'Y'
                                 CONNECT BY NOCYCLE PRIOR OFC_CD = PRNT_OFC_CD
                                 START WITH OFC_CD = (SELECT DISTINCT AR_HD_QTR_OFC_CD FROM MDM_ORGANIZATION WHERE OFC_CD = @[ofc_cd] AND OFC_CD IN ('ATLSC','PHXSC')))
            )
        )
    #elseif( ${level_cd} == '6' ) --LEVEL_CD 6 Office
        AND Q.LCC_CD IN (
            SELECT LCC_CD
            FROM MDM_EQ_ORZ_CHT                         
            WHERE SCC_CD IN (
                SELECT SCC_CD
                FROM MDM_LOCATION
                WHERE LOC_CD IN (SELECT LOC_CD FROM MDM_ORGANIZATION WHERE NVL(DELT_FLG,'N') <> 'Y' AND OFC_CD = @[ofc_cd])
            )
        )
	#elseif( ${level_cd} == '3' || ${level_cd} == '4' ) --LEVEL_CD 3,4 Office
		AND 1=2 --조회안되야함
    #end    
    GROUP BY S.GRP_CD, S.SORT, S.CODE, S.NAME, Q.LCC_CD, Q.SCC_CD, Q.CNTR_TPSZ_CD, Q.FCAST_YRWK
)
SELECT 
A.LCC_CD, A.SCC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT
#foreach( $key in ${arrweek1}) -- 과거 3주
, DECODE(NVL(A.D2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.D2_$key,0) D2_$key
, DECODE(NVL(A.D4_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.D4_$key,0) D4_$key
, DECODE(NVL(A.D5_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.D5_$key,0) D5_$key
, DECODE(NVL(A.D7_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.D7_$key,0) D7_$key
, DECODE(NVL(A.R2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.R2_$key,0) R2_$key
, DECODE(NVL(A.R5_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.R5_$key,0) R5_$key
, DECODE(NVL(A.R9_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.R9_$key,0) R9_$key
, DECODE(NVL(A.O2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.O2_$key,0) O2_$key
, DECODE(NVL(A.O4_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.O4_$key,0) O4_$key
, DECODE(NVL(A.S2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.S2_$key,0) S2_$key
, DECODE(NVL(A.S4_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.S4_$key,0) S4_$key
, DECODE(NVL(A.F2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.F2_$key,0) F2_$key
, DECODE(NVL(A.F4_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.F4_$key,0) F4_$key
, DECODE(NVL(A.F5_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.F5_$key,0) F5_$key
, DECODE(NVL(A.A2_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.A2_$key,0) A2_$key
, DECODE(NVL(A.A4_MINUS_YN_$key,1),'Y',-1,1) * NVL(A.A4_$key,0) A4_$key
#end
#foreach( $key in ${arrweek2}) -- 현재,미래3주 
, CASE WHEN NVL(A.D2_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB') 
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.D2_$key
    #end    
                                 )/3) ELSE A.D2_$key END D2_$key
, CASE WHEN NVL(A.D4_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.D4_$key
    #end    
                                 )/3) ELSE A.D4_$key END D4_$key
, CASE WHEN NVL(A.D5_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.D5_$key
    #end    
                                 )/3) ELSE A.D5_$key END D5_$key
, CASE WHEN NVL(A.D7_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.D7_$key
    #end    
                                 )/3) ELSE A.D7_$key END D7_$key
, CASE WHEN NVL(A.R2_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.R2_$key
    #end    
                                 )/3) ELSE A.R2_$key END R2_$key
, CASE WHEN NVL(A.R5_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.R5_$key
    #end    
                                 )/3) ELSE A.R5_$key END R5_$key
, CASE WHEN NVL(A.R9_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.R9_$key
    #end    
                                 )/3) ELSE A.R9_$key END R9_$key
, CASE WHEN NVL(A.O2_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.O2_$key
    #end    
                                 )/3) ELSE A.O2_$key END O2_$key
, CASE WHEN NVL(A.O4_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.O4_$key
    #end    
                                 )/3) ELSE A.O4_$key END O4_$key
, CASE WHEN NVL(A.S2_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.S2_$key
    #end    
                                 )/3) ELSE A.S2_$key END S2_$key
, CASE WHEN NVL(A.S4_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.S4_$key
    #end    
                                 )/3) ELSE A.S4_$key END S4_$key
, CASE WHEN NVL(A.F2_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.F2_$key
    #end    
                                 )/3) ELSE A.F2_$key END F2_$key
, CASE WHEN NVL(A.F4_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.F4_$key
    #end    
                                 )/3) ELSE A.F4_$key END F4_$key
, CASE WHEN NVL(A.F5_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.F5_$key
    #end    
                                 )/3) ELSE A.F5_$key END F5_$key
, CASE WHEN NVL(A.A2_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.A2_$key
    #end    
                                 )/3) ELSE A.A2_$key END A2_$key
, CASE WHEN NVL(A.A4_B_$key,'N')<>'Y' AND A.CODE IN ('INP','RD','RI','OH','DI','SI','INM','OP','RL','RO','OT','DO','SO','FBB')
       THEN CEIL((
    #foreach( $key in ${arrweek1})
        #if($velocityCount > 1 )
                         +
        #end
                     A.A4_$key
    #end    
                                 )/3) ELSE A.A4_$key END A4_$key
#end
#foreach( $key in ${arrweek2}) -- 현재,미래3주 
, A.D2_B_$key, A.D4_B_$key, A.D5_B_$key, A.D7_B_$key, A.R2_B_$key
, A.R5_B_$key, A.R9_B_$key, A.O2_B_$key, A.O4_B_$key, A.S2_B_$key
, A.S4_B_$key, A.F2_B_$key, A.F4_B_$key, A.F5_B_$key, A.A2_B_$key
, A.A4_B_$key
#end
FROM (
SELECT
A.LCC_CD, A.SCC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT
#foreach( $key in ${arrweek}) -- 전체 7주
, MAX(ABS(A.D2_$key)) D2_$key, MAX(ABS(A.D4_$key)) D4_$key, MAX(ABS(A.D5_$key)) D5_$key, MAX(ABS(A.D7_$key)) D7_$key, MAX(ABS(A.R2_$key)) R2_$key, MAX(ABS(A.R5_$key)) R5_$key, MAX(ABS(A.R9_$key)) R9_$key
, MAX(ABS(A.O2_$key)) O2_$key, MAX(ABS(A.O4_$key)) O4_$key, MAX(ABS(A.S2_$key)) S2_$key, MAX(ABS(A.S4_$key)) S4_$key, MAX(ABS(A.F2_$key)) F2_$key, MAX(ABS(A.F4_$key)) F4_$key, MAX(ABS(A.F5_$key)) F5_$key
, MAX(ABS(A.A2_$key)) A2_$key, MAX(ABS(A.A4_$key)) A4_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.D2_$key)) <> MAX(A.D2_$key) THEN 'Y' ELSE '' END D2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.D4_$key)) <> MAX(A.D4_$key) THEN 'Y' ELSE '' END D4_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.D5_$key)) <> MAX(A.D5_$key) THEN 'Y' ELSE '' END D5_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.D7_$key)) <> MAX(A.D7_$key) THEN 'Y' ELSE '' END D7_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.R2_$key)) <> MAX(A.R2_$key) THEN 'Y' ELSE '' END R2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.R5_$key)) <> MAX(A.R5_$key) THEN 'Y' ELSE '' END R5_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.R9_$key)) <> MAX(A.R9_$key) THEN 'Y' ELSE '' END R9_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.O2_$key)) <> MAX(A.O2_$key) THEN 'Y' ELSE '' END O2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.O4_$key)) <> MAX(A.O4_$key) THEN 'Y' ELSE '' END O4_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.S2_$key)) <> MAX(A.S2_$key) THEN 'Y' ELSE '' END S2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.S4_$key)) <> MAX(A.S4_$key) THEN 'Y' ELSE '' END S4_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.F2_$key)) <> MAX(A.F2_$key) THEN 'Y' ELSE '' END F2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.F4_$key)) <> MAX(A.F4_$key) THEN 'Y' ELSE '' END F4_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.F5_$key)) <> MAX(A.F5_$key) THEN 'Y' ELSE '' END F5_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.A2_$key)) <> MAX(A.A2_$key) THEN 'Y' ELSE '' END A2_MINUS_YN_$key
, CASE WHEN A.CODE='FBB' AND MAX(ABS(A.A4_$key)) <> MAX(A.A4_$key) THEN 'Y' ELSE '' END A4_MINUS_YN_$key
#end
#foreach( $key in ${arrweek2}) -- 현재,미래3주 
, MAX(A.D2_B_$key) D2_B_$key, MAX(A.D4_B_$key) D4_B_$key, MAX(A.D5_B_$key) D5_B_$key, MAX(A.D7_B_$key) D7_B_$key, MAX(A.R2_B_$key) R2_B_$key
, MAX(A.R5_B_$key) R5_B_$key, MAX(A.R9_B_$key) R9_B_$key, MAX(A.O2_B_$key) O2_B_$key, MAX(A.O4_B_$key) O4_B_$key, MAX(A.S2_B_$key) S2_B_$key
, MAX(A.S4_B_$key) S4_B_$key, MAX(A.F2_B_$key) F2_B_$key, MAX(A.F4_B_$key) F4_B_$key, MAX(A.F5_B_$key) F5_B_$key, MAX(A.A2_B_$key) A2_B_$key
, MAX(A.A4_B_$key) A4_B_$key
#end
FROM (
SELECT
R.LCC_CD, R.SCC_CD
, R.CODE, R.NAME, R.GRP_CD, R.SORT
#foreach($key in ${arrweek2}) -- 현재,미래3주
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D2$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END D2_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D4$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END D4_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D5$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END D5_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D7$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END D7_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R2$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END R2_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R5$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END R5_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R9$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END R9_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='O2$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END O2_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='O4$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END O4_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='S2$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END S2_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='S4$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END S4_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F2$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END F2_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F4$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END F4_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F5$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END F5_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='A2$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END A2_B_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='A4$key' THEN MAX(NVL(R.MNL_INP,'')) ELSE '' END A4_B_$key
#end
#foreach($key in ${arrweek})-- 전체 7주
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D2$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END D2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D4$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END D4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D5$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END D5_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='D7$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END D7_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R2$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END R2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R5$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END R5_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='R9$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END R9_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='O2$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END O2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='O4$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END O4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='S2$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END S2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='S4$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END S4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F2$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END F2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F4$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END F4_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='F5$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END F5_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='A2$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END A2_$key
,CASE WHEN R.CNTR_TPSZ_CD||R.FCAST_YRWK='A4$key' THEN SUM(NVL(R.QTY,0)) ELSE 0 END A4_$key
#end
FROM (
    SELECT 
        X.LCC_CD, X.SCC_CD, X.CODE, X.NAME, X.GRP_CD, X.SORT, X.FCAST_YRWK, X.CNTR_TPSZ_CD, X.QTY, X.MNL_INP
    FROM (
            SELECT
                A.LCC_CD, A.SCC_CD, 
                'INN' CODE, 'Initial Inventory' NAME, A.GRP_CD, TO_NUMBER('') SORT
                , A.CNTR_TPSZ_CD
                , A.FCAST_YRWK
                , CASE 
                  WHEN A.FCAST_YRWK <= (SELECT MAX(W.PLN_YR||W.PLN_WK) CURR_WK FROM EQR_WK_PRD W WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN W.WK_ST_DT AND W.WK_END_DT) 
                  THEN SUM(NVL(DECODE(A.CODE,'IV',A.QTY,0),0)-(NVL(DECODE(A.CODE,'IM',DECODE(UPPER(@[chk_im]),'N',A.QTY,0),0),0) + NVL(DECODE(A.CODE,'ID',DECODE(UPPER(@[chk_id]),'N',A.QTY,0),0),0) + NVL(DECODE(A.CODE,'IS',DECODE(UPPER(@[chk_is]),'N',A.QTY,0),0),0)))
                  ELSE TO_NUMBER('')
                  END QTY
                , '' MNL_INP
            FROM SIM_SS_DATA A
            WHERE 1=1
            AND A.GRP_CD IN ('1')
            GROUP BY A.LCC_CD, A.SCC_CD, A.GRP_CD, A.CNTR_TPSZ_CD, A.FCAST_YRWK
            UNION ALL
            SELECT
                A.LCC_CD, A.SCC_CD,
                CASE
                WHEN A.GRP_CD = '2' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 'INP'
                WHEN A.GRP_CD = '3' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 'INM'
                ELSE A.CODE
                END CODE,        
                CASE
                WHEN A.GRP_CD = '2' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 'Inventory Plus (-)'
                WHEN A.GRP_CD = '3' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 'Inventory Minus (-)'
                ELSE A.NAME
                END NAME,
                A.GRP_CD,
                CASE
                WHEN A.GRP_CD = '2' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 0
                WHEN A.GRP_CD = '3' AND GROUPING(A.GRP_CD)='0' AND GROUPING(A.CODE)='1'
                THEN 0
                ELSE A.SORT
                END SORT
                , A.CNTR_TPSZ_CD
                , A.FCAST_YRWK
                , SUM(NVL(A.QTY,0)) QTY
                , CASE
                WHEN A.GRP_CD IN ('2','3') AND A.SORT >= '0' AND A.CODE NOT IN ('PL')
                THEN MAX(A.MNL_INP)
                ELSE ''
                END MNL_INP
            FROM SIM_SS_DATA A
            WHERE 1=1
            AND A.GRP_CD IN ('2','3')
            AND A.CODE NOT IN ('PL')
            GROUP BY GROUPING SETS ((A.LCC_CD, A.SCC_CD, A.GRP_CD, A.SORT, A.CODE, A.NAME, A.CNTR_TPSZ_CD, A.FCAST_YRWK),(A.LCC_CD, A.SCC_CD, A.GRP_CD, A.CNTR_TPSZ_CD, A.FCAST_YRWK))
            UNION ALL
            SELECT
                A.LCC_CD, A.SCC_CD,
                'FBB' CODE, 'Final Balance' NAME, 4 GRP_CD, TO_NUMBER('') SORT
                , A.CNTR_TPSZ_CD
                , A.FCAST_YRWK
                , CASE 
                  WHEN A.FCAST_YRWK <= (SELECT MAX(W.PLN_YR||W.PLN_WK) CURR_WK FROM EQR_WK_PRD W WHERE TO_CHAR(SYSDATE,'YYYYMMDD') BETWEEN W.WK_ST_DT AND W.WK_END_DT) 
                  THEN SUM(NVL(DECODE(A.CODE,'IV',A.QTY,0),0)-(NVL(DECODE(A.CODE,'IM',DECODE(UPPER(@[chk_im]),'N',A.QTY,0),0),0) + NVL(DECODE(A.CODE,'ID',DECODE(UPPER(@[chk_id]),'N',A.QTY,0),0),0) + NVL(DECODE(A.CODE,'IS',DECODE(UPPER(@[chk_is]),'N',A.QTY,0),0),0)))
                  ELSE 0
                  END +
				  SUM(NVL(DECODE(A.GRP_CD,'2',A.QTY,0),0)) - SUM(NVL(DECODE(A.GRP_CD,'3',A.QTY,0),0)) QTY
                , '' MNL_INP
            FROM SIM_SS_DATA A
            WHERE 1=1
            AND A.GRP_CD IN ('1','2','3')
            AND A.CODE NOT IN ('PL')
            GROUP BY A.LCC_CD, A.SCC_CD, A.CNTR_TPSZ_CD, A.FCAST_YRWK
            UNION ALL
            SELECT
                A.LCC_CD, A.SCC_CD,
                'PL' CODE, 'MT Loading Plan' NAME, 3 GRP_CD, 4 SORT
                , A.CNTR_TPSZ_CD, A.FCAST_YRWK
                , SUM(B.QTY) QTY
                , '' MNL_INP
            FROM (SELECT DISTINCT A.LCC_CD, A.SCC_CD, A.CNTR_TPSZ_CD, A.FCAST_YRWK FROM SIM_SS_DATA A WHERE A.GRP_CD IN ('3')) A, 
            (
                SELECT
                    B.LCC_CD, B.SCC_CD
                    , PLN.CNTR_TPSZ_CD, PLN.WK
                    , SUM(NVL(PLN.CNTR_QTY,0)) QTY
                FROM (
                    SELECT 
                        LODG.POL_YD_CD
                        ,LODG.VSL_CD
                        ,LODG.SKD_VOY_NO
                        ,LODG.SKD_DIR_CD
                        ,W.PLN_YR||W.PLN_WK WK
                        ,QTY.CNTR_TPSZ_CD
                        ,QTY.CNTR_QTY
                    FROM EQR_CTRL_MTY_LODG_PLN LODG, VSK_VSL_PORT_SKD V, EQR_WK_PRD W, EQR_CTRL_MTY_DCHG_PLN DCHG, EQR_CTRL_MTY_DCHG_PLN_QTY QTY
                    WHERE 1=1
                        AND LODG.VSL_CD = DCHG.VSL_CD
                        AND LODG.SKD_VOY_NO = DCHG.SKD_VOY_NO
                        AND LODG.SKD_DIR_CD = DCHG.SKD_DIR_CD
                        AND LODG.POL_YD_CD = DCHG.POL_YD_CD
                        AND LODG.VSL_CD = V.VSL_CD
                        AND LODG.SKD_VOY_NO = V.SKD_VOY_NO
                        AND LODG.SKD_DIR_CD = V.SKD_DIR_CD
                        AND LODG.POL_YD_CD = V.YD_CD
                        AND W.PLN_YR = TO_CHAR(V.VPS_ETA_DT,'YYYY')
                        AND V.VPS_ETA_DT BETWEEN TO_DATE(W.WK_ST_DT,'YYYYMMDD') AND TO_DATE(W.WK_END_DT,'YYYYMMDD')
                        AND DCHG.VSL_CD = QTY.VSL_CD
                        AND DCHG.SKD_VOY_NO = QTY.SKD_VOY_NO
                        AND DCHG.SKD_DIR_CD = QTY.SKD_DIR_CD
                        AND DCHG.POL_YD_CD = QTY.POL_YD_CD
                        AND DCHG.POD_YD_CD = QTY.POD_YD_CD
                ) PLN, MDM_YARD Y, MDM_LOCATION A, MDM_EQ_ORZ_CHT B
                WHERE 1=1
                    AND PLN.POL_YD_CD = Y.YD_CD
                    AND Y.LOC_CD = A.LOC_CD
                    AND A.SCC_CD = B.SCC_CD
                    AND NVL(Y.DELT_FLG,'N') <> 'Y'
                    AND NVL(A.DELT_FLG,'N') <> 'Y'
                    AND NVL(B.DELT_FLG,'N') <> 'Y'
                    GROUP BY B.LCC_CD, B.SCC_CD, PLN.CNTR_TPSZ_CD, PLN.WK
            ) B
            WHERE 1=1
                AND A.LCC_CD = B.LCC_CD(+)
                AND A.SCC_CD = B.SCC_CD(+)
                AND A.CNTR_TPSZ_CD = B.CNTR_TPSZ_CD(+)
                AND A.FCAST_YRWK = B.WK(+)
                GROUP BY A.LCC_CD, A.SCC_CD, A.CNTR_TPSZ_CD, A.FCAST_YRWK
        ) X
    WHERE 1=1
) R
GROUP BY R.LCC_CD, R.SCC_CD, R.GRP_CD, R.SORT, R.CODE, R.NAME, R.CNTR_TPSZ_CD, R.FCAST_YRWK
) A
GROUP BY A.LCC_CD, A.SCC_CD, A.CODE, A.NAME, A.GRP_CD, A.SORT
) A
ORDER BY A.LCC_CD, A.SCC_CD, A.GRP_CD, A.SORT			]]></sql>
			<params>
				<param name="fm_yrwk" type="12" value="" out="N"/>
				<param name="to_yrwk" type="12" value="" out="N"/>
				<param name="subconti" type="12" value="" out="N"/>
				<param name="curr_yrwk" type="12" value="" out="N"/>
				<param name="ofc_cd" type="12" value="" out="N"/>
				<param name="chk_im" type="12" value="" out="N"/>
				<param name="chk_id" type="12" value="" out="N"/>
				<param name="chk_is" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
