<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="ForecastReportDBDAOsearchForecastReportRSQL">
			<desc><![CDATA[searchForecastReport]]></desc>
			<sql><![CDATA[
WITH DUMMY_LOCATION AS
(

#if ( ${present_flag} == 'L') 
    SELECT DISTINCT LCC_CD LOC_CD 
#elseif( ${present_flag} == 'E' )
    SELECT DISTINCT ECC_CD LOC_CD
#else
    SELECT DISTINCT SCC_CD LOC_CD  
#end
    
    FROM MDM_EQ_ORZ_CHT MDM
#if( ${fcast_loc_flag} == 'Y' )  -- EQR_CTRL_FCAST_LOC 에 데이터 있을 경우는 그 LOC 만 보임
       , ( SELECT LOC_CD 
                , LOC_DPTH_CD 
             FROM EQR_CTRL_FCAST_LOC
            WHERE USR_ID = @[usr_id]
         ) FLOC 
#end

    WHERE RCC_CD IN ('CNSHA', 'HKHKG', 'TWTPE', 'KRSEL', 'JPTYO', 'SGSIN') -- 하드코딩
      AND DELT_FLG = 'N'

      
#if( ${condition_value} != '' ) -- RCC : ALL 일대는 쿼리 감춤
  #if(${condition_flag} == 'R')
	  AND RCC_CD = @[condition_value]
  #elseif( ${condition_flag} == 'L' )
      AND LCC_CD = @[condition_value]
  #elseif( ${condition_flag} == 'E')
	  AND ECC_CD = @[condition_value]        
  #else    --SCC
	  AND SCC_CD = @[condition_value]    
  #end
#end

#if( ${fcast_loc_flag} == 'Y' )  -- EQR_CTRL_FCAST_LOC 에 데이터 있을 경우는 그 LOC 만 보임 
#if( ${condition_value} != '' ) 
  #if(${condition_flag} == 'R')       -- R tree 클릭
     AND FLOC.LOC_CD     = MDM.LCC_CD
     AND FLOC.LOC_DPTH_CD = 'L'
  #elseif( ${condition_flag} == 'L' ) -- L tree 클릭
     AND FLOC.LOC_CD     = MDM.ECC_CD
     AND FLOC.LOC_DPTH_CD = 'E'
  #elseif( ${condition_flag} == 'E')  -- E tree 클릭
     AND FLOC.LOC_CD     = MDM.SCC_CD
     AND FLOC.LOC_DPTH_CD = 'S'
  #else                               -- S 는 펼치지 않음
     AND FLOC.LOC_DPTH_CD = ''
  #end
#else
     AND FLOC.LOC_CD     = MDM.RCC_CD
     AND FLOC.LOC_DPTH_CD = 'R'          -- ALL
#end
#end
  
    -- 지점 office 검색범위 (CDO_EQ, 지역본부 OFFICE 는 아래조건을 제거함)
#if( ${level_cd} == '3' ) 
    AND LCC_CD IN (
                      SELECT LCC_CD
                      FROM MDM_EQ_ORZ_CHT                         
                      WHERE SCC_CD IN (                                     
                                          SELECT SCC_CD                      
                                          FROM MDM_LOCATION                  
                                          WHERE LOC_CD IN ( SELECT LOC_CD FROM MDM_ORGANIZATION WHERE OFC_CD = @[ofc_cd] )                            
                                      )      
                  )
#end   
)

-- with 추가 (S)

-- REPO IN 집계 LCC 가중치 (LOCATION CODE 버젼)
,ADD_DAY AS
(
    SELECT B.LCC_CD
          ,B.ECC_CD
          ,B.SCC_CD
          ,B.LOC_CD
          ,NVL(A.REPO_ADD_DYS, 0) DAYS -- 테이블에 등록되지 않은 LCC는 0
    FROM EQR_WK_PRD_ADD_DY A,
         (                                  
             SELECT DISTINCT A.LCC_CD, A.ECC_CD, A.SCC_CD, B.LOC_CD 
             FROM MDM_EQ_ORZ_CHT A
                 ,MDM_LOCATION B
             WHERE A.SCC_CD   = B.SCC_CD            
             AND   A.DELT_FLG = 'N' 
             AND   A.RCC_CD IN ('CNSHA', 'HKHKG', 'TWTPE', 'KRSEL', 'JPTYO', 'SGSIN') -- 하드코딩
         #if( ${condition_value} != '' ) -- RCC : ALL 일대는 쿼리 감춤
           #if(${condition_flag} == 'R')
             AND   A.RCC_CD = @[condition_value]
           #elseif( ${condition_flag} == 'L' )
             AND   A.LCC_CD = @[condition_value]
           #elseif( ${condition_flag} == 'E')
             AND   A.ECC_CD = @[condition_value]        
           #else    --SCC
             AND   A.SCC_CD = @[condition_value]    
           #end
         #end                                                                                                          
         ) B
    WHERE A.LCC_CD(+) = B.LCC_CD -- 테이블에 등록되지 않은 LCC 0으로 조회                
)

-- REPO IN 집계 LCC 가중치 (YARD CODE 버젼)
,ADD_DAY_YARD AS
(
    SELECT B.LCC_CD
          ,B.ECC_CD
          ,B.SCC_CD
          ,B.LOC_CD
          ,B.YD_CD
          ,NVL(A.REPO_ADD_DYS, 0) DAYS -- 테이블에 등록되지 않은 LCC는 0
    FROM EQR_WK_PRD_ADD_DY A,
         (                                  
             SELECT DISTINCT A.LCC_CD, A.ECC_CD, A.SCC_CD, B.LOC_CD, C.YD_CD 
             FROM MDM_EQ_ORZ_CHT A,
                  MDM_LOCATION B,
                  MDM_YARD C
             WHERE A.SCC_CD = B.SCC_CD 
             AND   B.LOC_CD = C.LOC_CD             
             AND   A.DELT_FLG = 'N' 
             AND   A.RCC_CD IN ('CNSHA', 'HKHKG', 'TWTPE', 'KRSEL', 'JPTYO', 'SGSIN') -- 하드코딩
         #if( ${condition_value} != '' ) -- RCC : ALL 일대는 쿼리 감춤
           #if(${condition_flag} == 'R')
             AND   A.RCC_CD = @[condition_value]
           #elseif( ${condition_flag} == 'L' )
             AND   A.LCC_CD = @[condition_value]
           #elseif( ${condition_flag} == 'E')
             AND   A.ECC_CD = @[condition_value]        
           #else    --SCC
             AND   A.SCC_CD = @[condition_value]    
           #end
         #end      
                                                                                                    
         ) B
    WHERE A.LCC_CD(+) = B.LCC_CD -- 테이블에 등록되지 않은 LCC 0으로 조회                
)

,DUMMY_YARD AS 
(
    SELECT C.YD_CD, A.SCC_CD
    FROM MDM_EQ_ORZ_CHT A
        ,MDM_LOCATION B
        ,MDM_YARD C 

    WHERE 1=1
#if( ${condition_value} != '' ) -- RCC : ALL 일대는 쿼리 감춤
  #if(${condition_flag} == 'R')
    AND   A.RCC_CD = @[condition_value]
  #elseif( ${condition_flag} == 'L' )
    AND   A.LCC_CD = @[condition_value]
  #elseif( ${condition_flag} == 'E')
    AND   A.ECC_CD = @[condition_value]        
  #else    --SCC
    AND   A.SCC_CD = @[condition_value]    
  #end
#end     	                 	     
    AND   A.SCC_CD = B.SCC_CD
    AND   B.LOC_CD = C.LOC_CD
) 
-- with 추가 (E)

-- BA, SP 는 화면에서 계산, ST 는 LOC_CD 와 1대1 매치
-- ST (EQ Suppply Ratio (Target)) 위해 한번 더 감쌈 (S)
SELECT A.LOC_CD
      ,A.LOC_GRP_CD
      ,A.CODE
      ,A.NAME
      ,A.SORT
      ,A.TREE
      ,A.ORI_LOC_CD         
      ,A.ORI_ORI_LOC_CD     
      ,A.ORI_ORI_ORI_LOC_CD 	
      ,P2   
      ,P1   
      ,C0   
      ,F1   
      ,F2   
      ,F3   
      ,F4   
      ,F5   
      ,F6   
      ,F7   
      ,P2_F   
      ,P1_F   
      ,C0_F   
      ,F1_F   
      ,F2_F   
      ,F3_F   
      ,F4_F   
      ,F5_F   
      ,F6_F   
      ,F7_F 
      	  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.P2_D2_SPL_RTO,A.P2_D2) P2_D2  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.P2_D4_SPL_RTO,A.P2_D4) P2_D4
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.P2_D5_SPL_RTO,A.P2_D5) P2_D5
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.P2_D7_SPL_RTO,A.P2_D7) P2_D7
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_R2) P2_R2                            
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_R5) P2_R5
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_R9) P2_R9
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_O2) P2_O2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_S2) P2_S2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_O4) P2_O4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_S4) P2_S4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_F2) P2_F2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_A2) P2_A2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_F4) P2_F4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_A4) P2_A4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_F5) P2_F5  
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P2_O5) P2_O5  
      ,P2_D2_D	-- Y : 적색표시, N:은 아무표시 없음, X : BOLD 로 표시함
      ,P2_D4_D
      ,P2_D5_D
      ,P2_D7_D
      ,P2_R2_D
      ,P2_R5_D
      ,P2_R9_D
      ,P2_O2_D
      ,P2_S2_D
      ,P2_O4_D
      ,P2_S4_D
      ,P2_F2_D
      ,P2_A2_D
      ,P2_F4_D
      ,P2_A4_D
      ,P2_F5_D
      ,P2_O5_D
      
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.P1_D2_SPL_RTO,A.P1_D2) P1_D2  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.P1_D4_SPL_RTO,A.P1_D4) P1_D4
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.P1_D5_SPL_RTO,A.P1_D5) P1_D5
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.P1_D7_SPL_RTO,A.P1_D7) P1_D7
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_R2) P1_R2                            
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_R5) P1_R5
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_R9) P1_R9
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_O2) P1_O2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_S2) P1_S2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_O4) P1_O4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_S4) P1_S4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_F2) P1_F2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_A2) P1_A2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_F4) P1_F4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_A4) P1_A4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_F5) P1_F5  	   
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.P1_O5) P1_O5  	
      ,P1_D2_D	--del 버튼 여부(글씨 색)
      ,P1_D4_D
      ,P1_D5_D
      ,P1_D7_D
      ,P1_R2_D
      ,P1_R5_D
      ,P1_R9_D
      ,P1_O2_D
      ,P1_S2_D
      ,P1_O4_D
      ,P1_S4_D
      ,P1_F2_D
      ,P1_A2_D
      ,P1_F4_D
      ,P1_A4_D
      ,P1_F5_D      
      ,P1_O5_D  
      
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.C0_D2_SPL_RTO,A.C0_D2) C0_D2  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.C0_D4_SPL_RTO,A.C0_D4) C0_D4
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.C0_D5_SPL_RTO,A.C0_D5) C0_D5
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.C0_D7_SPL_RTO,A.C0_D7) C0_D7
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_R2) C0_R2                            
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_R5) C0_R5
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_R9) C0_R9
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_O2) C0_O2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_S2) C0_S2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_O4) C0_O4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_S4) C0_S4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_F2) C0_F2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_A2) C0_A2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_F4) C0_F4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_A4) C0_A4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_F5) C0_F5  
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.C0_O5) C0_O5  
      ,C0_D2_D	--del 버튼 여부(글씨 색)
      ,C0_D4_D
      ,C0_D5_D
      ,C0_D7_D
      ,C0_R2_D
      ,C0_R5_D
      ,C0_R9_D
      ,C0_O2_D
      ,C0_S2_D
      ,C0_O4_D
      ,C0_S4_D
      ,C0_F2_D
      ,C0_A2_D
      ,C0_F4_D
      ,C0_A4_D
      ,C0_F5_D     
      ,C0_O5_D     
      
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F1_D2_SPL_RTO,A.F1_D2) F1_D2  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F1_D4_SPL_RTO,A.F1_D4) F1_D4
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F1_D5_SPL_RTO,A.F1_D5) F1_D5
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F1_D7_SPL_RTO,A.F1_D7) F1_D7
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_R2) F1_R2                            
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_R5) F1_R5
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_R9) F1_R9
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_O2) F1_O2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_S2) F1_S2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_O4) F1_O4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_S4) F1_S4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_F2) F1_F2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_A2) F1_A2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_F4) F1_F4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_A4) F1_A4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_F5) F1_F5   
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F1_O5) F1_O5   
      ,F1_D2_D	--del 버튼 여부(글씨 색)
      ,F1_D4_D
      ,F1_D5_D
      ,F1_D7_D
      ,F1_R2_D
      ,F1_R5_D
      ,F1_R9_D
      ,F1_O2_D
      ,F1_S2_D
      ,F1_O4_D
      ,F1_S4_D
      ,F1_F2_D
      ,F1_A2_D
      ,F1_F4_D
      ,F1_A4_D
      ,F1_F5_D      
      ,F1_O5_D  
      
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F2_D2_SPL_RTO,A.F2_D2) F2_D2  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F2_D4_SPL_RTO,A.F2_D4) F2_D4
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F2_D5_SPL_RTO,A.F2_D5) F2_D5
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F2_D7_SPL_RTO,A.F2_D7) F2_D7
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_R2) F2_R2                            
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_R5) F2_R5
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_R9) F2_R9
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_O2) F2_O2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_S2) F2_S2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_O4) F2_O4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_S4) F2_S4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_F2) F2_F2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_A2) F2_A2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_F4) F2_F4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_A4) F2_A4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_F5) F2_F5   
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F2_O5) F2_O5   
      ,F2_D2_D	--del 버튼 여부(글씨 색)
      ,F2_D4_D
      ,F2_D5_D
      ,F2_D7_D
      ,F2_R2_D
      ,F2_R5_D
      ,F2_R9_D
      ,F2_O2_D
      ,F2_S2_D
      ,F2_O4_D
      ,F2_S4_D
      ,F2_F2_D
      ,F2_A2_D
      ,F2_F4_D
      ,F2_A4_D
      ,F2_F5_D   
      ,F2_O5_D         

      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F3_D2_SPL_RTO,A.F3_D2) F3_D2  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F3_D4_SPL_RTO,A.F3_D4) F3_D4
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F3_D5_SPL_RTO,A.F3_D5) F3_D5
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F3_D7_SPL_RTO,A.F3_D7) F3_D7
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_R2) F3_R2                            
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_R5) F3_R5
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_R9) F3_R9
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_O2) F3_O2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_S2) F3_S2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_O4) F3_O4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_S4) F3_S4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_F2) F3_F2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_A2) F3_A2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_F4) F3_F4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_A4) F3_A4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_F5) F3_F5   
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F3_O5) F3_O5   
      ,F3_D2_D	--del 버튼 여부(글씨 색)
      ,F3_D4_D
      ,F3_D5_D
      ,F3_D7_D
      ,F3_R2_D
      ,F3_R5_D
      ,F3_R9_D
      ,F3_O2_D
      ,F3_S2_D
      ,F3_O4_D
      ,F3_S4_D
      ,F3_F2_D
      ,F3_A2_D
      ,F3_F4_D
      ,F3_A4_D
      ,F3_F5_D    
      ,F3_O5_D    
      
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F4_D2_SPL_RTO,A.F4_D2) F4_D2  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F4_D4_SPL_RTO,A.F4_D4) F4_D4
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F4_D5_SPL_RTO,A.F4_D5) F4_D5
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F4_D7_SPL_RTO,A.F4_D7) F4_D7
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_R2) F4_R2                            
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_R5) F4_R5
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_R9) F4_R9
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_O2) F4_O2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_S2) F4_S2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_O4) F4_O4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_S4) F4_S4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_F2) F4_F2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_A2) F4_A2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_F4) F4_F4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_A4) F4_A4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_F5) F4_F5    
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F4_O5) F4_O5   
      ,F4_D2_D	--del 버튼 여부(글씨 색)
      ,F4_D4_D
      ,F4_D5_D
      ,F4_D7_D
      ,F4_R2_D
      ,F4_R5_D
      ,F4_R9_D
      ,F4_O2_D
      ,F4_S2_D
      ,F4_O4_D
      ,F4_S4_D
      ,F4_F2_D
      ,F4_A2_D
      ,F4_F4_D
      ,F4_A4_D
      ,F4_F5_D    
      ,F4_O5_D    
      
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F5_D2_SPL_RTO,A.F5_D2) F5_D2  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F5_D4_SPL_RTO,A.F5_D4) F5_D4
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F5_D5_SPL_RTO,A.F5_D5) F5_D5
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F5_D7_SPL_RTO,A.F5_D7) F5_D7
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_R2) F5_R2                            
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_R5) F5_R5
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_R9) F5_R9
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_O2) F5_O2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_S2) F5_S2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_O4) F5_O4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_S4) F5_S4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_F2) F5_F2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_A2) F5_A2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_F4) F5_F4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_A4) F5_A4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_F5) F5_F5     
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F5_O5) F5_O5    
      ,F5_D2_D	--del 버튼 여부(글씨 색)
      ,F5_D4_D
      ,F5_D5_D
      ,F5_D7_D
      ,F5_R2_D
      ,F5_R5_D
      ,F5_R9_D
      ,F5_O2_D
      ,F5_S2_D
      ,F5_O4_D
      ,F5_S4_D
      ,F5_F2_D
      ,F5_A2_D
      ,F5_F4_D
      ,F5_A4_D
      ,F5_F5_D      
      ,F5_O5_D    
      
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F6_D2_SPL_RTO,A.F6_D2) F6_D2  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F6_D4_SPL_RTO,A.F6_D4) F6_D4
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F6_D5_SPL_RTO,A.F6_D5) F6_D5
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F6_D7_SPL_RTO,A.F6_D7) F6_D7
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_R2) F6_R2                            
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_R5) F6_R5
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_R9) F6_R9
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_O2) F6_O2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_S2) F6_S2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_O4) F6_O4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_S4) F6_S4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_F2) F6_F2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_A2) F6_A2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_F4) F6_F4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_A4) F6_A4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_F5) F6_F5     
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F6_O5) F6_O5     
      ,F6_D2_D	--del 버튼 여부(글씨 색)
      ,F6_D4_D
      ,F6_D5_D
      ,F6_D7_D
      ,F6_R2_D
      ,F6_R5_D
      ,F6_R9_D
      ,F6_O2_D
      ,F6_S2_D
      ,F6_O4_D
      ,F6_S4_D
      ,F6_F2_D
      ,F6_A2_D
      ,F6_F4_D
      ,F6_A4_D
      ,F6_F5_D  
      ,F6_O5_D  
      
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F7_D2_SPL_RTO,A.F7_D2) F7_D2  
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F7_D4_SPL_RTO,A.F7_D4) F7_D4
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F7_D5_SPL_RTO,A.F7_D5) F7_D5
      ,DECODE(A.CODE,'BA','','SP','','ST',RTO.F7_D7_SPL_RTO,A.F7_D7) F7_D7
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_R2) F7_R2                            
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_R5) F7_R5
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_R9) F7_R9
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_O2) F7_O2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_S2) F7_S2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_O4) F7_O4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_S4) F7_S4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_F2) F7_F2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_A2) F7_A2
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_F4) F7_F4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_A4) F7_A4
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_F5) F7_F5  
      ,DECODE(A.CODE,'BA','','SP','','ST','',A.F7_O5) F7_O5  
      ,F7_D2_D	--del 버튼 여부(글씨 색)
      ,F7_D4_D
      ,F7_D5_D
      ,F7_D7_D
      ,F7_R2_D
      ,F7_R5_D
      ,F7_R9_D
      ,F7_O2_D
      ,F7_S2_D
      ,F7_O4_D
      ,F7_S4_D
      ,F7_F2_D
      ,F7_A2_D
      ,F7_F4_D
      ,F7_A4_D
      ,F7_F5_D        
      ,F7_O5_D    

FROM -- EQ Suppply Ratio (Target) 위해 한번더 감쌈 (E)
(
SELECT CASE WHEN LOC_CD IS NULL THEN 'TOTAL'
			ELSE LOC_CD||'('||LOC_GRP_CD||')' END  LOC_CD
	  ,LOC_GRP_CD
	  ,CODE
  	  ,NAME
	  ,SORT
	  ,CASE WHEN LOC_CD IS NULL THEN NULL
			ELSE '+' END TREE
	  ,@[condition_value] ORI_LOC_CD        -- RCC_CD
	  ,@[ori_loc_cd] ORI_ORI_LOC_CD         -- LCC_CD
	  ,@[ori_ori_loc_cd] ORI_ORI_ORI_LOC_CD -- ECC_CD	
--      ,골뱅[head_week] HEAD_WEEK  
      ,P2   
      ,P1   
      ,C0   
      ,F1   
      ,F2   
      ,F3   
      ,F4   
      ,F5   
      ,F6   
      ,F7   
      ,P2_F   
      ,P1_F   
      ,C0_F   
      ,F1_F   
      ,F2_F   
      ,F3_F   
      ,F4_F   
      ,F5_F   
      ,F6_F   
      ,F7_F 

	  ,P2_D2
      ,P2_D4
      ,P2_D5
      ,P2_D7
      ,P2_R2
      ,P2_R5
      ,P2_R9
      ,P2_O2
      ,P2_S2
      ,P2_O4
      ,P2_S4
      ,P2_F2
      ,P2_A2
      ,P2_F4
      ,P2_A4
      ,P2_F5   
      ,P2_O5  
      ,P2_D2_D	-- Y : 적색표시, N:은 아무표시 없음, X : BOLD 로 표시함
      ,P2_D4_D
      ,P2_D5_D
      ,P2_D7_D
      ,P2_R2_D
      ,P2_R5_D
      ,P2_R9_D
      ,P2_O2_D
      ,P2_S2_D
      ,P2_O4_D
      ,P2_S4_D
      ,P2_F2_D
      ,P2_A2_D
      ,P2_F4_D
      ,P2_A4_D
      ,P2_F5_D
      ,P2_O5_D
      
	  ,P1_D2
      ,P1_D4
      ,P1_D5
      ,P1_D7
      ,P1_R2
      ,P1_R5
      ,P1_R9
      ,P1_O2
      ,P1_S2
      ,P1_O4
      ,P1_S4
      ,P1_F2
      ,P1_A2
      ,P1_F4
      ,P1_A4
      ,P1_F5   
      ,P1_O5   
      ,P1_D2_D	--del 버튼 여부(글씨 색)
      ,P1_D4_D
      ,P1_D5_D
      ,P1_D7_D
      ,P1_R2_D
      ,P1_R5_D
      ,P1_R9_D
      ,P1_O2_D
      ,P1_S2_D
      ,P1_O4_D
      ,P1_S4_D
      ,P1_F2_D
      ,P1_A2_D
      ,P1_F4_D
      ,P1_A4_D
      ,P1_F5_D      
      ,P1_O5_D    
      
	  ,C0_D2
      ,C0_D4
      ,C0_D5
      ,C0_D7
      ,C0_R2
      ,C0_R5
      ,C0_R9
      ,C0_O2
      ,C0_S2
      ,C0_O4
      ,C0_S4
      ,C0_F2
      ,C0_A2
      ,C0_F4
      ,C0_A4
      ,C0_F5   
      ,C0_O5   
      ,C0_D2_D	--del 버튼 여부(글씨 색)
      ,C0_D4_D
      ,C0_D5_D
      ,C0_D7_D
      ,C0_R2_D
      ,C0_R5_D
      ,C0_R9_D
      ,C0_O2_D
      ,C0_S2_D
      ,C0_O4_D
      ,C0_S4_D
      ,C0_F2_D
      ,C0_A2_D
      ,C0_F4_D
      ,C0_A4_D
      ,C0_F5_D     
      ,C0_O5_D     
      
	  ,F1_D2
      ,F1_D4
      ,F1_D5
      ,F1_D7
      ,F1_R2
      ,F1_R5
      ,F1_R9
      ,F1_O2
      ,F1_S2
      ,F1_O4
      ,F1_S4
      ,F1_F2
      ,F1_A2
      ,F1_F4
      ,F1_A4
      ,F1_F5   
      ,F1_O5   
      ,F1_D2_D	--del 버튼 여부(글씨 색)
      ,F1_D4_D
      ,F1_D5_D
      ,F1_D7_D
      ,F1_R2_D
      ,F1_R5_D
      ,F1_R9_D
      ,F1_O2_D
      ,F1_S2_D
      ,F1_O4_D
      ,F1_S4_D
      ,F1_F2_D
      ,F1_A2_D
      ,F1_F4_D
      ,F1_A4_D
      ,F1_F5_D      
      ,F1_O5_D   
      
	  ,F2_D2
      ,F2_D4
      ,F2_D5
      ,F2_D7
      ,F2_R2
      ,F2_R5
      ,F2_R9
      ,F2_O2
      ,F2_S2
      ,F2_O4
      ,F2_S4
      ,F2_F2
      ,F2_A2
      ,F2_F4
      ,F2_A4
      ,F2_F5   
      ,F2_O5   
      ,F2_D2_D	--del 버튼 여부(글씨 색)
      ,F2_D4_D
      ,F2_D5_D
      ,F2_D7_D
      ,F2_R2_D
      ,F2_R5_D
      ,F2_R9_D
      ,F2_O2_D
      ,F2_S2_D
      ,F2_O4_D
      ,F2_S4_D
      ,F2_F2_D
      ,F2_A2_D
      ,F2_F4_D
      ,F2_A4_D
      ,F2_F5_D   
      ,F2_O5_D   
      
	  ,F3_D2
      ,F3_D4
      ,F3_D5
      ,F3_D7
      ,F3_R2
      ,F3_R5
      ,F3_R9
      ,F3_O2
      ,F3_S2
      ,F3_O4
      ,F3_S4
      ,F3_F2
      ,F3_A2
      ,F3_F4
      ,F3_A4
      ,F3_F5   
      ,F3_O5   
      ,F3_D2_D	--del 버튼 여부(글씨 색)
      ,F3_D4_D
      ,F3_D5_D
      ,F3_D7_D
      ,F3_R2_D
      ,F3_R5_D
      ,F3_R9_D
      ,F3_O2_D
      ,F3_S2_D
      ,F3_O4_D
      ,F3_S4_D
      ,F3_F2_D
      ,F3_A2_D
      ,F3_F4_D
      ,F3_A4_D
      ,F3_F5_D    
      ,F3_O5_D    
      
	  ,F4_D2
      ,F4_D4
      ,F4_D5
      ,F4_D7
      ,F4_R2
      ,F4_R5
      ,F4_R9
      ,F4_O2
      ,F4_S2
      ,F4_O4
      ,F4_S4
      ,F4_F2
      ,F4_A2
      ,F4_F4
      ,F4_A4
      ,F4_F5   
      ,F4_O5   
      ,F4_D2_D	--del 버튼 여부(글씨 색)
      ,F4_D4_D
      ,F4_D5_D
      ,F4_D7_D
      ,F4_R2_D
      ,F4_R5_D
      ,F4_R9_D
      ,F4_O2_D
      ,F4_S2_D
      ,F4_O4_D
      ,F4_S4_D
      ,F4_F2_D
      ,F4_A2_D
      ,F4_F4_D
      ,F4_A4_D
      ,F4_F5_D    
      ,F4_O5_D    
      
	  ,F5_D2
      ,F5_D4
      ,F5_D5
      ,F5_D7
      ,F5_R2
      ,F5_R5
      ,F5_R9
      ,F5_O2
      ,F5_S2
      ,F5_O4
      ,F5_S4
      ,F5_F2
      ,F5_A2
      ,F5_F4
      ,F5_A4
      ,F5_F5   
      ,F5_O5   
      ,F5_D2_D	--del 버튼 여부(글씨 색)
      ,F5_D4_D
      ,F5_D5_D
      ,F5_D7_D
      ,F5_R2_D
      ,F5_R5_D
      ,F5_R9_D
      ,F5_O2_D
      ,F5_S2_D
      ,F5_O4_D
      ,F5_S4_D
      ,F5_F2_D
      ,F5_A2_D
      ,F5_F4_D
      ,F5_A4_D
      ,F5_F5_D      
      ,F5_O5_D     
      
	  ,F6_D2
      ,F6_D4
      ,F6_D5
      ,F6_D7
      ,F6_R2
      ,F6_R5
      ,F6_R9
      ,F6_O2
      ,F6_S2
      ,F6_O4
      ,F6_S4
      ,F6_F2
      ,F6_A2
      ,F6_F4
      ,F6_A4
      ,F6_F5   
      ,F6_O5   
      ,F6_D2_D	--del 버튼 여부(글씨 색)
      ,F6_D4_D
      ,F6_D5_D
      ,F6_D7_D
      ,F6_R2_D
      ,F6_R5_D
      ,F6_R9_D
      ,F6_O2_D
      ,F6_S2_D
      ,F6_O4_D
      ,F6_S4_D
      ,F6_F2_D
      ,F6_A2_D
      ,F6_F4_D
      ,F6_A4_D
      ,F6_F5_D  
      ,F6_O5_D  
      
	  ,F7_D2
      ,F7_D4
      ,F7_D5
      ,F7_D7
      ,F7_R2
      ,F7_R5
      ,F7_R9
      ,F7_O2
      ,F7_S2
      ,F7_O4
      ,F7_S4
      ,F7_F2
      ,F7_A2
      ,F7_F4
      ,F7_A4
      ,F7_F5   
      ,F7_O5   
      ,F7_D2_D	--del 버튼 여부(글씨 색)
      ,F7_D4_D
      ,F7_D5_D
      ,F7_D7_D
      ,F7_R2_D
      ,F7_R5_D
      ,F7_R9_D
      ,F7_O2_D
      ,F7_S2_D
      ,F7_O4_D
      ,F7_S4_D
      ,F7_F2_D
      ,F7_A2_D
      ,F7_F4_D
      ,F7_A4_D
      ,F7_F5_D                                                  
      ,F7_O5_D    

FROM
(
    -- RCC : ALL일때 표현 (RCC : ALL)
#if ( ${condition_value} == '' && ${present_flag} == 'L' )

SELECT A.RCC_CD LOC_CD
      ,'R' LOC_GRP_CD
      ,A.CODE
      ,A.NAME
      ,A.SORT
      --,A.WEEK  
      ,MAX(P2)   P2   
      ,MAX(P1)   P1   
      ,MAX(C0)   C0   
      ,MAX(F1)   F1   
      ,MAX(F2)   F2   
      ,MAX(F3)   F3   
      ,MAX(F4)   F4   
      ,MAX(F5)   F5   
      ,MAX(F6)   F6   
      ,MAX(F7)   F7   
      
      ,MAX(P2_F) P2_F   
      ,MAX(P1_F) P1_F   
      ,MAX(C0_F) C0_F   
      ,MAX(F1_F) F1_F   
      ,MAX(F2_F) F2_F   
      ,MAX(F3_F) F3_F   
      ,MAX(F4_F) F4_F   
      ,MAX(F5_F) F5_F   
      ,MAX(F6_F) F6_F   
      ,MAX(F7_F) F7_F           
      
      ,SUM(P2_D2) P2_D2
      ,SUM(P2_D4) P2_D4
      ,SUM(P2_D5) P2_D5
      ,SUM(P2_D7) P2_D7
      ,SUM(P2_R2) P2_R2
      ,SUM(P2_R5) P2_R5
      ,SUM(P2_R9) P2_R9
      ,SUM(P2_O2) P2_O2
      ,SUM(P2_S2) P2_S2
      ,SUM(P2_O4) P2_O4
      ,SUM(P2_S4) P2_S4
      ,SUM(P2_F2) P2_F2
      ,SUM(P2_A2) P2_A2
      ,SUM(P2_F4) P2_F4
      ,SUM(P2_A4) P2_A4
      ,SUM(P2_F5) P2_F5 
      ,SUM(P2_O5) P2_O5 
      ,MAX(P2_D2_D) P2_D2_D
      ,MAX(P2_D4_D) P2_D4_D
      ,MAX(P2_D5_D) P2_D5_D
      ,MAX(P2_D7_D) P2_D7_D
      ,MAX(P2_R2_D) P2_R2_D
      ,MAX(P2_R5_D) P2_R5_D
      ,MAX(P2_R9_D) P2_R9_D
      ,MAX(P2_O2_D) P2_O2_D
      ,MAX(P2_S2_D) P2_S2_D
      ,MAX(P2_O4_D) P2_O4_D
      ,MAX(P2_S4_D) P2_S4_D
      ,MAX(P2_F2_D) P2_F2_D
      ,MAX(P2_A2_D) P2_A2_D
      ,MAX(P2_F4_D) P2_F4_D
      ,MAX(P2_A4_D) P2_A4_D
      ,MAX(P2_F5_D) P2_F5_D 
      ,MAX(P2_O5_D) P2_O5_D 

      ,SUM(P1_D2) P1_D2
      ,SUM(P1_D4) P1_D4
      ,SUM(P1_D5) P1_D5
      ,SUM(P1_D7) P1_D7
      ,SUM(P1_R2) P1_R2
      ,SUM(P1_R5) P1_R5
      ,SUM(P1_R9) P1_R9
      ,SUM(P1_O2) P1_O2
      ,SUM(P1_S2) P1_S2
      ,SUM(P1_O4) P1_O4
      ,SUM(P1_S4) P1_S4
      ,SUM(P1_F2) P1_F2
      ,SUM(P1_A2) P1_A2
      ,SUM(P1_F4) P1_F4
      ,SUM(P1_A4) P1_A4
      ,SUM(P1_F5) P1_F5     
      ,SUM(P1_O5) P1_O5     
      ,MAX(P1_D2_D) P1_D2_D
      ,MAX(P1_D4_D) P1_D4_D
      ,MAX(P1_D5_D) P1_D5_D
      ,MAX(P1_D7_D) P1_D7_D
      ,MAX(P1_R2_D) P1_R2_D
      ,MAX(P1_R5_D) P1_R5_D
      ,MAX(P1_R9_D) P1_R9_D
      ,MAX(P1_O2_D) P1_O2_D
      ,MAX(P1_S2_D) P1_S2_D
      ,MAX(P1_O4_D) P1_O4_D
      ,MAX(P1_S4_D) P1_S4_D
      ,MAX(P1_F2_D) P1_F2_D
      ,MAX(P1_A2_D) P1_A2_D
      ,MAX(P1_F4_D) P1_F4_D
      ,MAX(P1_A4_D) P1_A4_D
      ,MAX(P1_F5_D) P1_F5_D
      ,MAX(P1_O5_D) P1_O5_D

      ,SUM(C0_D2) C0_D2
      ,SUM(C0_D4) C0_D4
      ,SUM(C0_D5) C0_D5
      ,SUM(C0_D7) C0_D7
      ,SUM(C0_R2) C0_R2
      ,SUM(C0_R5) C0_R5
      ,SUM(C0_R9) C0_R9
      ,SUM(C0_O2) C0_O2
      ,SUM(C0_S2) C0_S2
      ,SUM(C0_O4) C0_O4
      ,SUM(C0_S4) C0_S4
      ,SUM(C0_F2) C0_F2
      ,SUM(C0_A2) C0_A2
      ,SUM(C0_F4) C0_F4
      ,SUM(C0_A4) C0_A4
      ,SUM(C0_F5) C0_F5
      ,SUM(C0_O5) C0_O5
      ,MAX(C0_D2_D) C0_D2_D
      ,MAX(C0_D4_D) C0_D4_D
      ,MAX(C0_D5_D) C0_D5_D
      ,MAX(C0_D7_D) C0_D7_D
      ,MAX(C0_R2_D) C0_R2_D
      ,MAX(C0_R5_D) C0_R5_D
      ,MAX(C0_R9_D) C0_R9_D
      ,MAX(C0_O2_D) C0_O2_D
      ,MAX(C0_S2_D) C0_S2_D
      ,MAX(C0_O4_D) C0_O4_D
      ,MAX(C0_S4_D) C0_S4_D
      ,MAX(C0_F2_D) C0_F2_D
      ,MAX(C0_A2_D) C0_A2_D
      ,MAX(C0_F4_D) C0_F4_D
      ,MAX(C0_A4_D) C0_A4_D
      ,MAX(C0_F5_D) C0_F5_D  
      ,MAX(C0_O5_D) C0_O5_D  

      ,SUM(F1_D2) F1_D2
      ,SUM(F1_D4) F1_D4
      ,SUM(F1_D5) F1_D5
      ,SUM(F1_D7) F1_D7
      ,SUM(F1_R2) F1_R2
      ,SUM(F1_R5) F1_R5
      ,SUM(F1_R9) F1_R9
      ,SUM(F1_O2) F1_O2
      ,SUM(F1_S2) F1_S2
      ,SUM(F1_O4) F1_O4
      ,SUM(F1_S4) F1_S4
      ,SUM(F1_F2) F1_F2
      ,SUM(F1_A2) F1_A2
      ,SUM(F1_F4) F1_F4
      ,SUM(F1_A4) F1_A4
      ,SUM(F1_F5) F1_F5
      ,SUM(F1_O5) F1_O5
      ,MAX(F1_D2_D) F1_D2_D
      ,MAX(F1_D4_D) F1_D4_D
      ,MAX(F1_D5_D) F1_D5_D
      ,MAX(F1_D7_D) F1_D7_D
      ,MAX(F1_R2_D) F1_R2_D
      ,MAX(F1_R5_D) F1_R5_D
      ,MAX(F1_R9_D) F1_R9_D
      ,MAX(F1_O2_D) F1_O2_D
      ,MAX(F1_S2_D) F1_S2_D
      ,MAX(F1_O4_D) F1_O4_D
      ,MAX(F1_S4_D) F1_S4_D
      ,MAX(F1_F2_D) F1_F2_D
      ,MAX(F1_A2_D) F1_A2_D
      ,MAX(F1_F4_D) F1_F4_D
      ,MAX(F1_A4_D) F1_A4_D
      ,MAX(F1_F5_D) F1_F5_D  
      ,MAX(F1_O5_D) F1_O5_D  

      ,SUM(F2_D2)   F2_D2
      ,SUM(F2_D4)   F2_D4
      ,SUM(F2_D5)   F2_D5
      ,SUM(F2_D7)   F2_D7
      ,SUM(F2_R2)   F2_R2
      ,SUM(F2_R5)   F2_R5
      ,SUM(F2_R9)   F2_R9
      ,SUM(F2_O2)   F2_O2
      ,SUM(F2_S2)   F2_S2
      ,SUM(F2_O4)   F2_O4
      ,SUM(F2_S4)   F2_S4
      ,SUM(F2_F2)   F2_F2
      ,SUM(F2_A2)   F2_A2
      ,SUM(F2_F4)   F2_F4
      ,SUM(F2_A4)   F2_A4
      ,SUM(F2_F5)   F2_F5
      ,SUM(F2_O5)   F2_O5
      ,MAX(F2_D2_D) F2_D2_D
      ,MAX(F2_D4_D) F2_D4_D
      ,MAX(F2_D5_D) F2_D5_D
      ,MAX(F2_D7_D) F2_D7_D
      ,MAX(F2_R2_D) F2_R2_D
      ,MAX(F2_R5_D) F2_R5_D
      ,MAX(F2_R9_D) F2_R9_D
      ,MAX(F2_O2_D) F2_O2_D
      ,MAX(F2_S2_D) F2_S2_D
      ,MAX(F2_O4_D) F2_O4_D
      ,MAX(F2_S4_D) F2_S4_D
      ,MAX(F2_F2_D) F2_F2_D
      ,MAX(F2_A2_D) F2_A2_D
      ,MAX(F2_F4_D) F2_F4_D
      ,MAX(F2_A4_D) F2_A4_D
      ,MAX(F2_F5_D) F2_F5_D  
      ,MAX(F2_O5_D) F2_O5_D  

      ,SUM(F3_D2)   F3_D2
      ,SUM(F3_D4)   F3_D4
      ,SUM(F3_D5)   F3_D5
      ,SUM(F3_D7)   F3_D7
      ,SUM(F3_R2)   F3_R2
      ,SUM(F3_R5)   F3_R5
      ,SUM(F3_R9)   F3_R9
      ,SUM(F3_O2)   F3_O2
      ,SUM(F3_S2)   F3_S2
      ,SUM(F3_O4)   F3_O4
      ,SUM(F3_S4)   F3_S4
      ,SUM(F3_F2)   F3_F2
      ,SUM(F3_A2)   F3_A2
      ,SUM(F3_F4)   F3_F4
      ,SUM(F3_A4)   F3_A4
      ,SUM(F3_F5)   F3_F5
      ,SUM(F3_O5)   F3_O5
      ,MAX(F3_D2_D) F3_D2_D
      ,MAX(F3_D4_D) F3_D4_D
      ,MAX(F3_D5_D) F3_D5_D
      ,MAX(F3_D7_D) F3_D7_D
      ,MAX(F3_R2_D) F3_R2_D
      ,MAX(F3_R5_D) F3_R5_D
      ,MAX(F3_R9_D) F3_R9_D
      ,MAX(F3_O2_D) F3_O2_D
      ,MAX(F3_S2_D) F3_S2_D
      ,MAX(F3_O4_D) F3_O4_D
      ,MAX(F3_S4_D) F3_S4_D
      ,MAX(F3_F2_D) F3_F2_D
      ,MAX(F3_A2_D) F3_A2_D
      ,MAX(F3_F4_D) F3_F4_D
      ,MAX(F3_A4_D) F3_A4_D
      ,MAX(F3_F5_D) F3_F5_D
      ,MAX(F3_O5_D) F3_O5_D

      ,SUM(F4_D2)   F4_D2
      ,SUM(F4_D4)   F4_D4
      ,SUM(F4_D5)   F4_D5
      ,SUM(F4_D7)   F4_D7
      ,SUM(F4_R2)   F4_R2
      ,SUM(F4_R5)   F4_R5
      ,SUM(F4_R9)   F4_R9
      ,SUM(F4_O2)   F4_O2
      ,SUM(F4_S2)   F4_S2
      ,SUM(F4_O4)   F4_O4
      ,SUM(F4_S4)   F4_S4
      ,SUM(F4_F2)   F4_F2
      ,SUM(F4_A2)   F4_A2
      ,SUM(F4_F4)   F4_F4
      ,SUM(F4_A4)   F4_A4
      ,SUM(F4_F5)   F4_F5
      ,SUM(F4_O5)   F4_O5
      ,MAX(F4_D2_D) F4_D2_D
      ,MAX(F4_D4_D) F4_D4_D
      ,MAX(F4_D5_D) F4_D5_D
      ,MAX(F4_D7_D) F4_D7_D
      ,MAX(F4_R2_D) F4_R2_D
      ,MAX(F4_R5_D) F4_R5_D
      ,MAX(F4_R9_D) F4_R9_D
      ,MAX(F4_O2_D) F4_O2_D
      ,MAX(F4_S2_D) F4_S2_D
      ,MAX(F4_O4_D) F4_O4_D
      ,MAX(F4_S4_D) F4_S4_D
      ,MAX(F4_F2_D) F4_F2_D
      ,MAX(F4_A2_D) F4_A2_D
      ,MAX(F4_F4_D) F4_F4_D
      ,MAX(F4_A4_D) F4_A4_D
      ,MAX(F4_F5_D) F4_F5_D 
      ,MAX(F4_O5_D) F4_O5_D 

      ,SUM(F5_D2)   F5_D2
      ,SUM(F5_D4)   F5_D4
      ,SUM(F5_D5)   F5_D5
      ,SUM(F5_D7)   F5_D7
      ,SUM(F5_R2)   F5_R2
      ,SUM(F5_R5)   F5_R5
      ,SUM(F5_R9)   F5_R9
      ,SUM(F5_O2)   F5_O2
      ,SUM(F5_S2)   F5_S2
      ,SUM(F5_O4)   F5_O4
      ,SUM(F5_S4)   F5_S4
      ,SUM(F5_F2)   F5_F2
      ,SUM(F5_A2)   F5_A2
      ,SUM(F5_F4)   F5_F4
      ,SUM(F5_A4)   F5_A4
      ,SUM(F5_F5)   F5_F5
      ,SUM(F5_O5)   F5_O5
      ,MAX(F5_D2_D) F5_D2_D
      ,MAX(F5_D4_D) F5_D4_D
      ,MAX(F5_D5_D) F5_D5_D
      ,MAX(F5_D7_D) F5_D7_D
      ,MAX(F5_R2_D) F5_R2_D
      ,MAX(F5_R5_D) F5_R5_D
      ,MAX(F5_R9_D) F5_R9_D
      ,MAX(F5_O2_D) F5_O2_D
      ,MAX(F5_S2_D) F5_S2_D
      ,MAX(F5_O4_D) F5_O4_D
      ,MAX(F5_S4_D) F5_S4_D
      ,MAX(F5_F2_D) F5_F2_D
      ,MAX(F5_A2_D) F5_A2_D
      ,MAX(F5_F4_D) F5_F4_D
      ,MAX(F5_A4_D) F5_A4_D
      ,MAX(F5_F5_D) F5_F5_D  
      ,MAX(F5_O5_D) F5_O5_D  

      ,SUM(F6_D2)   F6_D2
      ,SUM(F6_D4)   F6_D4
      ,SUM(F6_D5)   F6_D5
      ,SUM(F6_D7)   F6_D7
      ,SUM(F6_R2)   F6_R2
      ,SUM(F6_R5)   F6_R5
      ,SUM(F6_R9)   F6_R9
      ,SUM(F6_O2)   F6_O2
      ,SUM(F6_S2)   F6_S2
      ,SUM(F6_O4)   F6_O4
      ,SUM(F6_S4)   F6_S4
      ,SUM(F6_F2)   F6_F2
      ,SUM(F6_A2)   F6_A2
      ,SUM(F6_F4)   F6_F4
      ,SUM(F6_A4)   F6_A4
      ,SUM(F6_F5)   F6_F5
      ,SUM(F6_O5)   F6_O5
      ,MAX(F6_D2_D) F6_D2_D
      ,MAX(F6_D4_D) F6_D4_D
      ,MAX(F6_D5_D) F6_D5_D
      ,MAX(F6_D7_D) F6_D7_D
      ,MAX(F6_R2_D) F6_R2_D
      ,MAX(F6_R5_D) F6_R5_D
      ,MAX(F6_R9_D) F6_R9_D
      ,MAX(F6_O2_D) F6_O2_D
      ,MAX(F6_S2_D) F6_S2_D
      ,MAX(F6_O4_D) F6_O4_D
      ,MAX(F6_S4_D) F6_S4_D
      ,MAX(F6_F2_D) F6_F2_D
      ,MAX(F6_A2_D) F6_A2_D
      ,MAX(F6_F4_D) F6_F4_D
      ,MAX(F6_A4_D) F6_A4_D
      ,MAX(F6_F5_D) F6_F5_D  
      ,MAX(F6_O5_D) F6_O5_D  

      ,SUM(F7_D2)   F7_D2
      ,SUM(F7_D4)   F7_D4
      ,SUM(F7_D5)   F7_D5
      ,SUM(F7_D7)   F7_D7
      ,SUM(F7_R2)   F7_R2
      ,SUM(F7_R5)   F7_R5
      ,SUM(F7_R9)   F7_R9
      ,SUM(F7_O2)   F7_O2
      ,SUM(F7_S2)   F7_S2
      ,SUM(F7_O4)   F7_O4
      ,SUM(F7_S4)   F7_S4
      ,SUM(F7_F2)   F7_F2
      ,SUM(F7_A2)   F7_A2
      ,SUM(F7_F4)   F7_F4
      ,SUM(F7_A4)   F7_A4
      ,SUM(F7_F5)   F7_F5
      ,SUM(F7_O5)   F7_O5
      ,MAX(F7_D2_D) F7_D2_D
      ,MAX(F7_D4_D) F7_D4_D
      ,MAX(F7_D5_D) F7_D5_D
      ,MAX(F7_D7_D) F7_D7_D
      ,MAX(F7_R2_D) F7_R2_D
      ,MAX(F7_R5_D) F7_R5_D
      ,MAX(F7_R9_D) F7_R9_D
      ,MAX(F7_O2_D) F7_O2_D
      ,MAX(F7_S2_D) F7_S2_D
      ,MAX(F7_O4_D) F7_O4_D
      ,MAX(F7_S4_D) F7_S4_D
      ,MAX(F7_F2_D) F7_F2_D
      ,MAX(F7_A2_D) F7_A2_D
      ,MAX(F7_F4_D) F7_F4_D
      ,MAX(F7_A4_D) F7_A4_D
      ,MAX(F7_F5_D) F7_F5_D 
      ,MAX(F7_O5_D) F7_O5_D 
FROM
(
#end
    SELECT LOC_CD
          ,(SELECT DISTINCT RCC_CD FROM MDM_EQ_ORZ_CHT X WHERE X.LCC_CD = LOC_CD) RCC_CD
          ,LOC_GRP_CD
          ,CODE
          ,NAME
          ,SORT
          ,P2   
          ,P1   
          ,C0   
          ,F1   
          ,F2   
          ,F3   
          ,F4   
          ,F5   
          ,F6   
          ,F7   
          ,P2_F   
          ,P1_F   
          ,C0_F   
          ,F1_F   
          ,F2_F   
          ,F3_F   
          ,F4_F   
          ,F5_F   
          ,F6_F   
          ,F7_F        
   
          ,SUM(P2_D2) P2_D2
          ,SUM(P2_D4) P2_D4
          ,SUM(P2_D5) P2_D5
          ,SUM(P2_D7) P2_D7
          ,SUM(P2_R2) P2_R2
          ,SUM(P2_R5) P2_R5
          ,SUM(P2_R9) P2_R9
          ,SUM(P2_O2) P2_O2
          ,SUM(P2_S2) P2_S2
          ,SUM(P2_O4) P2_O4
          ,SUM(P2_S4) P2_S4
          ,SUM(P2_F2) P2_F2
          ,SUM(P2_A2) P2_A2
          ,SUM(P2_F4) P2_F4
          ,SUM(P2_A4) P2_A4
          ,SUM(P2_F5) P2_F5
          ,SUM(P2_O5) P2_O5
    
          ,MAX(P2_D2_D) P2_D2_D
          ,MAX(P2_D4_D) P2_D4_D
          ,MAX(P2_D5_D) P2_D5_D
          ,MAX(P2_D7_D) P2_D7_D
          ,MAX(P2_R2_D) P2_R2_D
          ,MAX(P2_R5_D) P2_R5_D
          ,MAX(P2_R9_D) P2_R9_D
          ,MAX(P2_O2_D) P2_O2_D
          ,MAX(P2_S2_D) P2_S2_D
          ,MAX(P2_O4_D) P2_O4_D
          ,MAX(P2_S4_D) P2_S4_D
          ,MAX(P2_F2_D) P2_F2_D
          ,MAX(P2_A2_D) P2_A2_D
          ,MAX(P2_F4_D) P2_F4_D
          ,MAX(P2_A4_D) P2_A4_D
          ,MAX(P2_F5_D) P2_F5_D  
          ,MAX(P2_O5_D) P2_O5_D  
          
          ,SUM(P1_D2) P1_D2
          ,SUM(P1_D4) P1_D4
          ,SUM(P1_D5) P1_D5
          ,SUM(P1_D7) P1_D7
          ,SUM(P1_R2) P1_R2
          ,SUM(P1_R5) P1_R5
          ,SUM(P1_R9) P1_R9
          ,SUM(P1_O2) P1_O2
          ,SUM(P1_S2) P1_S2
          ,SUM(P1_O4) P1_O4
          ,SUM(P1_S4) P1_S4
          ,SUM(P1_F2) P1_F2
          ,SUM(P1_A2) P1_A2
          ,SUM(P1_F4) P1_F4
          ,SUM(P1_A4) P1_A4
          ,SUM(P1_F5) P1_F5
          ,SUM(P1_O5) P1_O5
    
          ,MAX(P1_D2_D) P1_D2_D
          ,MAX(P1_D4_D) P1_D4_D
          ,MAX(P1_D5_D) P1_D5_D
          ,MAX(P1_D7_D) P1_D7_D
          ,MAX(P1_R2_D) P1_R2_D
          ,MAX(P1_R5_D) P1_R5_D
          ,MAX(P1_R9_D) P1_R9_D
          ,MAX(P1_O2_D) P1_O2_D
          ,MAX(P1_S2_D) P1_S2_D
          ,MAX(P1_O4_D) P1_O4_D
          ,MAX(P1_S4_D) P1_S4_D
          ,MAX(P1_F2_D) P1_F2_D
          ,MAX(P1_A2_D) P1_A2_D
          ,MAX(P1_F4_D) P1_F4_D
          ,MAX(P1_A4_D) P1_A4_D
          ,MAX(P1_F5_D) P1_F5_D        
          ,MAX(P1_O5_D) P1_O5_D     
          
          ,SUM(C0_D2) C0_D2
          ,SUM(C0_D4) C0_D4
          ,SUM(C0_D5) C0_D5
          ,SUM(C0_D7) C0_D7
          ,SUM(C0_R2) C0_R2
          ,SUM(C0_R5) C0_R5
          ,SUM(C0_R9) C0_R9
          ,SUM(C0_O2) C0_O2
          ,SUM(C0_S2) C0_S2
          ,SUM(C0_O4) C0_O4
          ,SUM(C0_S4) C0_S4
          ,SUM(C0_F2) C0_F2
          ,SUM(C0_A2) C0_A2
          ,SUM(C0_F4) C0_F4
          ,SUM(C0_A4) C0_A4
          ,SUM(C0_F5) C0_F5
          ,SUM(C0_O5) C0_O5
    
          ,MAX(C0_D2_D) C0_D2_D
          ,MAX(C0_D4_D) C0_D4_D
          ,MAX(C0_D5_D) C0_D5_D
          ,MAX(C0_D7_D) C0_D7_D
          ,MAX(C0_R2_D) C0_R2_D
          ,MAX(C0_R5_D) C0_R5_D
          ,MAX(C0_R9_D) C0_R9_D
          ,MAX(C0_O2_D) C0_O2_D
          ,MAX(C0_S2_D) C0_S2_D
          ,MAX(C0_O4_D) C0_O4_D
          ,MAX(C0_S4_D) C0_S4_D
          ,MAX(C0_F2_D) C0_F2_D
          ,MAX(C0_A2_D) C0_A2_D
          ,MAX(C0_F4_D) C0_F4_D
          ,MAX(C0_A4_D) C0_A4_D
          ,MAX(C0_F5_D) C0_F5_D      
          ,MAX(C0_O5_D) C0_O5_D  
          
          ,SUM(F1_D2)   F1_D2
          ,SUM(F1_D4)   F1_D4
          ,SUM(F1_D5)   F1_D5
          ,SUM(F1_D7)   F1_D7
          ,SUM(F1_R2)   F1_R2
          ,SUM(F1_R5)   F1_R5
          ,SUM(F1_R9)   F1_R9
          ,SUM(F1_O2)   F1_O2
          ,SUM(F1_S2)   F1_S2
          ,SUM(F1_O4)   F1_O4
          ,SUM(F1_S4)   F1_S4
          ,SUM(F1_F2)   F1_F2
          ,SUM(F1_A2)   F1_A2
          ,SUM(F1_F4)   F1_F4
          ,SUM(F1_A4)   F1_A4
          ,SUM(F1_F5)   F1_F5    
          ,SUM(F1_O5)   F1_O5    
          ,MAX(F1_D2_D) F1_D2_D
          ,MAX(F1_D4_D) F1_D4_D
          ,MAX(F1_D5_D) F1_D5_D
          ,MAX(F1_D7_D) F1_D7_D
          ,MAX(F1_R2_D) F1_R2_D
          ,MAX(F1_R5_D) F1_R5_D
          ,MAX(F1_R9_D) F1_R9_D
          ,MAX(F1_O2_D) F1_O2_D
          ,MAX(F1_S2_D) F1_S2_D
          ,MAX(F1_O4_D) F1_O4_D
          ,MAX(F1_S4_D) F1_S4_D
          ,MAX(F1_F2_D) F1_F2_D
          ,MAX(F1_A2_D) F1_A2_D
          ,MAX(F1_F4_D) F1_F4_D
          ,MAX(F1_A4_D) F1_A4_D
          ,MAX(F1_F5_D) F1_F5_D   
          ,MAX(F1_O5_D) F1_O5_D   
          
          ,SUM(F2_D2)   F2_D2
          ,SUM(F2_D4)   F2_D4
          ,SUM(F2_D5)   F2_D5
          ,SUM(F2_D7)   F2_D7
          ,SUM(F2_R2)   F2_R2
          ,SUM(F2_R5)   F2_R5
          ,SUM(F2_R9)   F2_R9
          ,SUM(F2_O2)   F2_O2
          ,SUM(F2_S2)   F2_S2
          ,SUM(F2_O4)   F2_O4
          ,SUM(F2_S4)   F2_S4
          ,SUM(F2_F2)   F2_F2
          ,SUM(F2_A2)   F2_A2
          ,SUM(F2_F4)   F2_F4
          ,SUM(F2_A4)   F2_A4
          ,SUM(F2_F5)   F2_F5    
          ,SUM(F2_O5)   F2_O5    
          ,MAX(F2_D2_D) F2_D2_D
          ,MAX(F2_D4_D) F2_D4_D
          ,MAX(F2_D5_D) F2_D5_D
          ,MAX(F2_D7_D) F2_D7_D
          ,MAX(F2_R2_D) F2_R2_D
          ,MAX(F2_R5_D) F2_R5_D
          ,MAX(F2_R9_D) F2_R9_D
          ,MAX(F2_O2_D) F2_O2_D
          ,MAX(F2_S2_D) F2_S2_D
          ,MAX(F2_O4_D) F2_O4_D
          ,MAX(F2_S4_D) F2_S4_D
          ,MAX(F2_F2_D) F2_F2_D
          ,MAX(F2_A2_D) F2_A2_D
          ,MAX(F2_F4_D) F2_F4_D
          ,MAX(F2_A4_D) F2_A4_D
          ,MAX(F2_F5_D) F2_F5_D     
          ,MAX(F2_O5_D) F2_O5_D     
          
          ,SUM(F3_D2)   F3_D2
          ,SUM(F3_D4)   F3_D4
          ,SUM(F3_D5)   F3_D5
          ,SUM(F3_D7)   F3_D7
          ,SUM(F3_R2)   F3_R2
          ,SUM(F3_R5)   F3_R5
          ,SUM(F3_R9)   F3_R9
          ,SUM(F3_O2)   F3_O2
          ,SUM(F3_S2)   F3_S2
          ,SUM(F3_O4)   F3_O4
          ,SUM(F3_S4)   F3_S4
          ,SUM(F3_F2)   F3_F2
          ,SUM(F3_A2)   F3_A2
          ,SUM(F3_F4)   F3_F4
          ,SUM(F3_A4)   F3_A4
          ,SUM(F3_F5)   F3_F5    
          ,SUM(F3_O5)   F3_O5    
          ,MAX(F3_D2_D) F3_D2_D
          ,MAX(F3_D4_D) F3_D4_D
          ,MAX(F3_D5_D) F3_D5_D
          ,MAX(F3_D7_D) F3_D7_D
          ,MAX(F3_R2_D) F3_R2_D
          ,MAX(F3_R5_D) F3_R5_D
          ,MAX(F3_R9_D) F3_R9_D
          ,MAX(F3_O2_D) F3_O2_D
          ,MAX(F3_S2_D) F3_S2_D
          ,MAX(F3_O4_D) F3_O4_D
          ,MAX(F3_S4_D) F3_S4_D
          ,MAX(F3_F2_D) F3_F2_D
          ,MAX(F3_A2_D) F3_A2_D
          ,MAX(F3_F4_D) F3_F4_D
          ,MAX(F3_A4_D) F3_A4_D
          ,MAX(F3_F5_D) F3_F5_D       
          ,MAX(F3_O5_D) F3_O5_D          
          
          ,SUM(F4_D2)   F4_D2
          ,SUM(F4_D4)   F4_D4
          ,SUM(F4_D5)   F4_D5
          ,SUM(F4_D7)   F4_D7
          ,SUM(F4_R2)   F4_R2
          ,SUM(F4_R5)   F4_R5
          ,SUM(F4_R9)   F4_R9
          ,SUM(F4_O2)   F4_O2
          ,SUM(F4_S2)   F4_S2
          ,SUM(F4_O4)   F4_O4
          ,SUM(F4_S4)   F4_S4
          ,SUM(F4_F2)   F4_F2
          ,SUM(F4_A2)   F4_A2
          ,SUM(F4_F4)   F4_F4
          ,SUM(F4_A4)   F4_A4
          ,SUM(F4_F5)   F4_F5    
          ,SUM(F4_O5)   F4_O5   
          ,MAX(F4_D2_D) F4_D2_D
          ,MAX(F4_D4_D) F4_D4_D
          ,MAX(F4_D5_D) F4_D5_D
          ,MAX(F4_D7_D) F4_D7_D
          ,MAX(F4_R2_D) F4_R2_D
          ,MAX(F4_R5_D) F4_R5_D
          ,MAX(F4_R9_D) F4_R9_D
          ,MAX(F4_O2_D) F4_O2_D
          ,MAX(F4_S2_D) F4_S2_D
          ,MAX(F4_O4_D) F4_O4_D
          ,MAX(F4_S4_D) F4_S4_D
          ,MAX(F4_F2_D) F4_F2_D
          ,MAX(F4_A2_D) F4_A2_D
          ,MAX(F4_F4_D) F4_F4_D
          ,MAX(F4_A4_D) F4_A4_D
          ,MAX(F4_F5_D) F4_F5_D  
          ,MAX(F4_O5_D) F4_O5_D  
          
          ,SUM(F5_D2)   F5_D2
          ,SUM(F5_D4)   F5_D4
          ,SUM(F5_D5)   F5_D5
          ,SUM(F5_D7)   F5_D7
          ,SUM(F5_R2)   F5_R2
          ,SUM(F5_R5)   F5_R5
          ,SUM(F5_R9)   F5_R9
          ,SUM(F5_O2)   F5_O2
          ,SUM(F5_S2)   F5_S2
          ,SUM(F5_O4)   F5_O4
          ,SUM(F5_S4)   F5_S4
          ,SUM(F5_F2)   F5_F2
          ,SUM(F5_A2)   F5_A2
          ,SUM(F5_F4)   F5_F4
          ,SUM(F5_A4)   F5_A4
          ,SUM(F5_F5)   F5_F5    
          ,SUM(F5_O5)   F5_O5   
          ,MAX(F5_D2_D) F5_D2_D
          ,MAX(F5_D4_D) F5_D4_D
          ,MAX(F5_D5_D) F5_D5_D
          ,MAX(F5_D7_D) F5_D7_D
          ,MAX(F5_R2_D) F5_R2_D
          ,MAX(F5_R5_D) F5_R5_D
          ,MAX(F5_R9_D) F5_R9_D
          ,MAX(F5_O2_D) F5_O2_D
          ,MAX(F5_S2_D) F5_S2_D
          ,MAX(F5_O4_D) F5_O4_D
          ,MAX(F5_S4_D) F5_S4_D
          ,MAX(F5_F2_D) F5_F2_D
          ,MAX(F5_A2_D) F5_A2_D
          ,MAX(F5_F4_D) F5_F4_D
          ,MAX(F5_A4_D) F5_A4_D
          ,MAX(F5_F5_D) F5_F5_D    
          ,MAX(F5_O5_D) F5_O5_D    
          
          ,SUM(F6_D2)   F6_D2
          ,SUM(F6_D4)   F6_D4
          ,SUM(F6_D5)   F6_D5
          ,SUM(F6_D7)   F6_D7
          ,SUM(F6_R2)   F6_R2
          ,SUM(F6_R5)   F6_R5
          ,SUM(F6_R9)   F6_R9
          ,SUM(F6_O2)   F6_O2
          ,SUM(F6_S2)   F6_S2
          ,SUM(F6_O4)   F6_O4
          ,SUM(F6_S4)   F6_S4
          ,SUM(F6_F2)   F6_F2
          ,SUM(F6_A2)   F6_A2
          ,SUM(F6_F4)   F6_F4
          ,SUM(F6_A4)   F6_A4
          ,SUM(F6_F5)   F6_F5    
          ,SUM(F6_O5)   F6_O5    
          ,MAX(F6_D2_D) F6_D2_D
          ,MAX(F6_D4_D) F6_D4_D
          ,MAX(F6_D5_D) F6_D5_D
          ,MAX(F6_D7_D) F6_D7_D
          ,MAX(F6_R2_D) F6_R2_D
          ,MAX(F6_R5_D) F6_R5_D
          ,MAX(F6_R9_D) F6_R9_D
          ,MAX(F6_O2_D) F6_O2_D
          ,MAX(F6_S2_D) F6_S2_D
          ,MAX(F6_O4_D) F6_O4_D
          ,MAX(F6_S4_D) F6_S4_D
          ,MAX(F6_F2_D) F6_F2_D
          ,MAX(F6_A2_D) F6_A2_D
          ,MAX(F6_F4_D) F6_F4_D
          ,MAX(F6_A4_D) F6_A4_D
          ,MAX(F6_F5_D) F6_F5_D       
          ,MAX(F6_O5_D) F6_O5_D              

          ,SUM(F7_D2)   F7_D2
          ,SUM(F7_D4)   F7_D4
          ,SUM(F7_D5)   F7_D5
          ,SUM(F7_D7)   F7_D7
          ,SUM(F7_R2)   F7_R2
          ,SUM(F7_R5)   F7_R5
          ,SUM(F7_R9)   F7_R9
          ,SUM(F7_O2)   F7_O2
          ,SUM(F7_S2)   F7_S2
          ,SUM(F7_O4)   F7_O4
          ,SUM(F7_S4)   F7_S4
          ,SUM(F7_F2)   F7_F2
          ,SUM(F7_A2)   F7_A2
          ,SUM(F7_F4)   F7_F4
          ,SUM(F7_A4)   F7_A4
          ,SUM(F7_F5)   F7_F5    
          ,SUM(F7_O5)   F7_O5   
          ,MAX(F7_D2_D) F7_D2_D
          ,MAX(F7_D4_D) F7_D4_D
          ,MAX(F7_D5_D) F7_D5_D
          ,MAX(F7_D7_D) F7_D7_D
          ,MAX(F7_R2_D) F7_R2_D
          ,MAX(F7_R5_D) F7_R5_D
          ,MAX(F7_R9_D) F7_R9_D
          ,MAX(F7_O2_D) F7_O2_D
          ,MAX(F7_S2_D) F7_S2_D
          ,MAX(F7_O4_D) F7_O4_D
          ,MAX(F7_S4_D) F7_S4_D
          ,MAX(F7_F2_D) F7_F2_D
          ,MAX(F7_A2_D) F7_A2_D
          ,MAX(F7_F4_D) F7_F4_D
          ,MAX(F7_A4_D) F7_A4_D
          ,MAX(F7_F5_D) F7_F5_D        
          ,MAX(F7_O5_D) F7_O5_D                                                                       
    FROM 
    (      

        SELECT B.LOC_CD
              ,B.LOC_GRP_CD
              ,B.CODE
              ,B.NAME
              ,B.SORT                  
              ,@[p2]   P2     
              ,@[p1]   P1  
              ,@[c0]   C0  
              ,@[f1]   F1  
              ,@[f2]   F2  
              ,@[f3]   F3  
              ,@[f4]   F4  
              ,@[f5]   F5  
              ,@[f6]   F6  
              ,@[f7]   F7  
              ,@[p2_f] P2_F  
              ,@[p1_f] P1_F  
              ,@[c0_f] C0_F  
              ,@[f1_f] F1_F  
              ,@[f2_f] F2_F  
              ,@[f3_f] F3_F  
              ,@[f4_f] F4_F  
              ,@[f5_f] F5_F  
              ,@[f6_f] F6_F  
              ,@[f7_f] F7_F              
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'D2', A.CNTR_QTY))),0)      P2_D2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'D4', A.CNTR_QTY))),0)      P2_D4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'D5', A.CNTR_QTY))),0)      P2_D5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'D7', A.CNTR_QTY))),0)      P2_D7
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'R2', A.CNTR_QTY))),0)      P2_R2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'R5', A.CNTR_QTY))),0)      P2_R5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'R9', A.CNTR_QTY))),0)      P2_R9
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'O2', A.CNTR_QTY))),0)      P2_O2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'S2', A.CNTR_QTY))),0)      P2_S2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'O4', A.CNTR_QTY))),0)      P2_O4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'S4', A.CNTR_QTY))),0)      P2_S4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'F2', A.CNTR_QTY))),0)      P2_F2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'A2', A.CNTR_QTY))),0)      P2_A2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'F4', A.CNTR_QTY))),0)      P2_F4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'A4', A.CNTR_QTY))),0)      P2_A4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'F5', A.CNTR_QTY))),0)      P2_F5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'O5', A.CNTR_QTY))),0)      P2_O5
           
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'D2', A.TMP_SAV_FLG))),'N') P2_D2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'D4', A.TMP_SAV_FLG))),'N') P2_D4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'D5', A.TMP_SAV_FLG))),'N') P2_D5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'D7', A.TMP_SAV_FLG))),'N') P2_D7_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'R2', A.TMP_SAV_FLG))),'N') P2_R2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'R5', A.TMP_SAV_FLG))),'N') P2_R5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'R9', A.TMP_SAV_FLG))),'N') P2_R9_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'O2', A.TMP_SAV_FLG))),'N') P2_O2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'S2', A.TMP_SAV_FLG))),'N') P2_S2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'O4', A.TMP_SAV_FLG))),'N') P2_O4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'S4', A.TMP_SAV_FLG))),'N') P2_S4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'F2', A.TMP_SAV_FLG))),'N') P2_F2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'A2', A.TMP_SAV_FLG))),'N') P2_A2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'F4', A.TMP_SAV_FLG))),'N') P2_F4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'A4', A.TMP_SAV_FLG))),'N') P2_A4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'F5', A.TMP_SAV_FLG))),'N') P2_F5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p2], DECODE(A.CNTR_TPSZ_CD, 'O5', A.TMP_SAV_FLG))),'N') P2_O5_D
              
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'D2', A.CNTR_QTY))),0)      P1_D2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'D4', A.CNTR_QTY))),0)      P1_D4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'D5', A.CNTR_QTY))),0)      P1_D5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'D7', A.CNTR_QTY))),0)      P1_D7
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'R2', A.CNTR_QTY))),0)      P1_R2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'R5', A.CNTR_QTY))),0)      P1_R5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'R9', A.CNTR_QTY))),0)      P1_R9
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'O2', A.CNTR_QTY))),0)      P1_O2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'S2', A.CNTR_QTY))),0)      P1_S2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'O4', A.CNTR_QTY))),0)      P1_O4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'S4', A.CNTR_QTY))),0)      P1_S4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'F2', A.CNTR_QTY))),0)      P1_F2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'A2', A.CNTR_QTY))),0)      P1_A2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'F4', A.CNTR_QTY))),0)      P1_F4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'A4', A.CNTR_QTY))),0)      P1_A4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'F5', A.CNTR_QTY))),0)      P1_F5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'O5', A.CNTR_QTY))),0)      P1_O5
                                                                  
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'D2', A.TMP_SAV_FLG))),'N') P1_D2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'D4', A.TMP_SAV_FLG))),'N') P1_D4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'D5', A.TMP_SAV_FLG))),'N') P1_D5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'D7', A.TMP_SAV_FLG))),'N') P1_D7_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'R2', A.TMP_SAV_FLG))),'N') P1_R2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'R5', A.TMP_SAV_FLG))),'N') P1_R5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'R9', A.TMP_SAV_FLG))),'N') P1_R9_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'O2', A.TMP_SAV_FLG))),'N') P1_O2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'S2', A.TMP_SAV_FLG))),'N') P1_S2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'O4', A.TMP_SAV_FLG))),'N') P1_O4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'S4', A.TMP_SAV_FLG))),'N') P1_S4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'F2', A.TMP_SAV_FLG))),'N') P1_F2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'A2', A.TMP_SAV_FLG))),'N') P1_A2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'F4', A.TMP_SAV_FLG))),'N') P1_F4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'A4', A.TMP_SAV_FLG))),'N') P1_A4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'F5', A.TMP_SAV_FLG))),'N') P1_F5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[p1], DECODE(A.CNTR_TPSZ_CD, 'O5', A.TMP_SAV_FLG))),'N') P1_O5_D
                            
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'D2', A.CNTR_QTY))),0)      C0_D2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'D4', A.CNTR_QTY))),0)      C0_D4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'D5', A.CNTR_QTY))),0)      C0_D5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'D7', A.CNTR_QTY))),0)      C0_D7
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'R2', A.CNTR_QTY))),0)      C0_R2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'R5', A.CNTR_QTY))),0)      C0_R5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'R9', A.CNTR_QTY))),0)      C0_R9
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'O2', A.CNTR_QTY))),0)      C0_O2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'S2', A.CNTR_QTY))),0)      C0_S2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'O4', A.CNTR_QTY))),0)      C0_O4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'S4', A.CNTR_QTY))),0)      C0_S4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'F2', A.CNTR_QTY))),0)      C0_F2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'A2', A.CNTR_QTY))),0)      C0_A2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'F4', A.CNTR_QTY))),0)      C0_F4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'A4', A.CNTR_QTY))),0)      C0_A4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'F5', A.CNTR_QTY))),0)      C0_F5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'O5', A.CNTR_QTY))),0)      C0_O5
                                                                  
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'D2', A.TMP_SAV_FLG))),'N') C0_D2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'D4', A.TMP_SAV_FLG))),'N') C0_D4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'D5', A.TMP_SAV_FLG))),'N') C0_D5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'D7', A.TMP_SAV_FLG))),'N') C0_D7_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'R2', A.TMP_SAV_FLG))),'N') C0_R2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'R5', A.TMP_SAV_FLG))),'N') C0_R5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'R9', A.TMP_SAV_FLG))),'N') C0_R9_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'O2', A.TMP_SAV_FLG))),'N') C0_O2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'S2', A.TMP_SAV_FLG))),'N') C0_S2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'O4', A.TMP_SAV_FLG))),'N') C0_O4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'S4', A.TMP_SAV_FLG))),'N') C0_S4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'F2', A.TMP_SAV_FLG))),'N') C0_F2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'A2', A.TMP_SAV_FLG))),'N') C0_A2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'F4', A.TMP_SAV_FLG))),'N') C0_F4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'A4', A.TMP_SAV_FLG))),'N') C0_A4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'F5', A.TMP_SAV_FLG))),'N') C0_F5_D   
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[c0], DECODE(A.CNTR_TPSZ_CD, 'O5', A.TMP_SAV_FLG))),'N') C0_O5_D           
                          
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'D2', A.CNTR_QTY))),0)      F1_D2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'D4', A.CNTR_QTY))),0)      F1_D4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'D5', A.CNTR_QTY))),0)      F1_D5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'D7', A.CNTR_QTY))),0)      F1_D7
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'R2', A.CNTR_QTY))),0)      F1_R2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'R5', A.CNTR_QTY))),0)      F1_R5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'R9', A.CNTR_QTY))),0)      F1_R9
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'O2', A.CNTR_QTY))),0)      F1_O2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'S2', A.CNTR_QTY))),0)      F1_S2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'O4', A.CNTR_QTY))),0)      F1_O4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'S4', A.CNTR_QTY))),0)      F1_S4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'F2', A.CNTR_QTY))),0)      F1_F2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'A2', A.CNTR_QTY))),0)      F1_A2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'F4', A.CNTR_QTY))),0)      F1_F4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'A4', A.CNTR_QTY))),0)      F1_A4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'F5', A.CNTR_QTY))),0)      F1_F5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'O5', A.CNTR_QTY))),0)      F1_O5
                                                                  
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'D2', A.TMP_SAV_FLG))),'N') F1_D2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'D4', A.TMP_SAV_FLG))),'N') F1_D4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'D5', A.TMP_SAV_FLG))),'N') F1_D5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'D7', A.TMP_SAV_FLG))),'N') F1_D7_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'R2', A.TMP_SAV_FLG))),'N') F1_R2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'R5', A.TMP_SAV_FLG))),'N') F1_R5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'R9', A.TMP_SAV_FLG))),'N') F1_R9_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'O2', A.TMP_SAV_FLG))),'N') F1_O2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'S2', A.TMP_SAV_FLG))),'N') F1_S2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'O4', A.TMP_SAV_FLG))),'N') F1_O4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'S4', A.TMP_SAV_FLG))),'N') F1_S4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'F2', A.TMP_SAV_FLG))),'N') F1_F2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'A2', A.TMP_SAV_FLG))),'N') F1_A2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'F4', A.TMP_SAV_FLG))),'N') F1_F4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'A4', A.TMP_SAV_FLG))),'N') F1_A4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'F5', A.TMP_SAV_FLG))),'N') F1_F5_D  
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f1], DECODE(A.CNTR_TPSZ_CD, 'O5', A.TMP_SAV_FLG))),'N') F1_O5_D  
              
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'D2', A.CNTR_QTY))),0)      F2_D2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'D4', A.CNTR_QTY))),0)      F2_D4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'D5', A.CNTR_QTY))),0)      F2_D5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'D7', A.CNTR_QTY))),0)      F2_D7
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'R2', A.CNTR_QTY))),0)      F2_R2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'R5', A.CNTR_QTY))),0)      F2_R5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'R9', A.CNTR_QTY))),0)      F2_R9
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'O2', A.CNTR_QTY))),0)      F2_O2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'S2', A.CNTR_QTY))),0)      F2_S2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'O4', A.CNTR_QTY))),0)      F2_O4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'S4', A.CNTR_QTY))),0)      F2_S4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'F2', A.CNTR_QTY))),0)      F2_F2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'A2', A.CNTR_QTY))),0)      F2_A2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'F4', A.CNTR_QTY))),0)      F2_F4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'A4', A.CNTR_QTY))),0)      F2_A4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'F5', A.CNTR_QTY))),0)      F2_F5        
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'O5', A.CNTR_QTY))),0)      F2_O5    
                                                          
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'D2', A.TMP_SAV_FLG))),'N') F2_D2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'D4', A.TMP_SAV_FLG))),'N') F2_D4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'D5', A.TMP_SAV_FLG))),'N') F2_D5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'D7', A.TMP_SAV_FLG))),'N') F2_D7_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'R2', A.TMP_SAV_FLG))),'N') F2_R2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'R5', A.TMP_SAV_FLG))),'N') F2_R5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'R9', A.TMP_SAV_FLG))),'N') F2_R9_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'O2', A.TMP_SAV_FLG))),'N') F2_O2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'S2', A.TMP_SAV_FLG))),'N') F2_S2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'O4', A.TMP_SAV_FLG))),'N') F2_O4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'S4', A.TMP_SAV_FLG))),'N') F2_S4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'F2', A.TMP_SAV_FLG))),'N') F2_F2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'A2', A.TMP_SAV_FLG))),'N') F2_A2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'F4', A.TMP_SAV_FLG))),'N') F2_F4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'A4', A.TMP_SAV_FLG))),'N') F2_A4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'F5', A.TMP_SAV_FLG))),'N') F2_F5_D    
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f2], DECODE(A.CNTR_TPSZ_CD, 'O5', A.TMP_SAV_FLG))),'N') F2_O5_D    
              
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'D2', A.CNTR_QTY))),0)      F3_D2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'D4', A.CNTR_QTY))),0)      F3_D4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'D5', A.CNTR_QTY))),0)      F3_D5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'D7', A.CNTR_QTY))),0)      F3_D7
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'R2', A.CNTR_QTY))),0)      F3_R2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'R5', A.CNTR_QTY))),0)      F3_R5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'R9', A.CNTR_QTY))),0)      F3_R9
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'O2', A.CNTR_QTY))),0)      F3_O2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'S2', A.CNTR_QTY))),0)      F3_S2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'O4', A.CNTR_QTY))),0)      F3_O4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'S4', A.CNTR_QTY))),0)      F3_S4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'F2', A.CNTR_QTY))),0)      F3_F2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'A2', A.CNTR_QTY))),0)      F3_A2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'F4', A.CNTR_QTY))),0)      F3_F4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'A4', A.CNTR_QTY))),0)      F3_A4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'F5', A.CNTR_QTY))),0)      F3_F5    
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'O5', A.CNTR_QTY))),0)      F3_O5   
                                                              
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'D2', A.TMP_SAV_FLG))),'N') F3_D2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'D4', A.TMP_SAV_FLG))),'N') F3_D4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'D5', A.TMP_SAV_FLG))),'N') F3_D5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'D7', A.TMP_SAV_FLG))),'N') F3_D7_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'R2', A.TMP_SAV_FLG))),'N') F3_R2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'R5', A.TMP_SAV_FLG))),'N') F3_R5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'R9', A.TMP_SAV_FLG))),'N') F3_R9_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'O2', A.TMP_SAV_FLG))),'N') F3_O2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'S2', A.TMP_SAV_FLG))),'N') F3_S2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'O4', A.TMP_SAV_FLG))),'N') F3_O4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'S4', A.TMP_SAV_FLG))),'N') F3_S4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'F2', A.TMP_SAV_FLG))),'N') F3_F2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'A2', A.TMP_SAV_FLG))),'N') F3_A2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'F4', A.TMP_SAV_FLG))),'N') F3_F4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'A4', A.TMP_SAV_FLG))),'N') F3_A4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'F5', A.TMP_SAV_FLG))),'N') F3_F5_D  
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f3], DECODE(A.CNTR_TPSZ_CD, 'O5', A.TMP_SAV_FLG))),'N') F3_O5_D  
              
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'D2', A.CNTR_QTY))),0)      F4_D2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'D4', A.CNTR_QTY))),0)      F4_D4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'D5', A.CNTR_QTY))),0)      F4_D5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'D7', A.CNTR_QTY))),0)      F4_D7
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'R2', A.CNTR_QTY))),0)      F4_R2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'R5', A.CNTR_QTY))),0)      F4_R5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'R9', A.CNTR_QTY))),0)      F4_R9
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'O2', A.CNTR_QTY))),0)      F4_O2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'S2', A.CNTR_QTY))),0)      F4_S2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'O4', A.CNTR_QTY))),0)      F4_O4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'S4', A.CNTR_QTY))),0)      F4_S4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'F2', A.CNTR_QTY))),0)      F4_F2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'A2', A.CNTR_QTY))),0)      F4_A2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'F4', A.CNTR_QTY))),0)      F4_F4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'A4', A.CNTR_QTY))),0)      F4_A4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'F5', A.CNTR_QTY))),0)      F4_F5     
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'O5', A.CNTR_QTY))),0)      F4_O5  
                                                             
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'D2', A.TMP_SAV_FLG))),'N') F4_D2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'D4', A.TMP_SAV_FLG))),'N') F4_D4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'D5', A.TMP_SAV_FLG))),'N') F4_D5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'D7', A.TMP_SAV_FLG))),'N') F4_D7_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'R2', A.TMP_SAV_FLG))),'N') F4_R2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'R5', A.TMP_SAV_FLG))),'N') F4_R5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'R9', A.TMP_SAV_FLG))),'N') F4_R9_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'O2', A.TMP_SAV_FLG))),'N') F4_O2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'S2', A.TMP_SAV_FLG))),'N') F4_S2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'O4', A.TMP_SAV_FLG))),'N') F4_O4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'S4', A.TMP_SAV_FLG))),'N') F4_S4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'F2', A.TMP_SAV_FLG))),'N') F4_F2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'A2', A.TMP_SAV_FLG))),'N') F4_A2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'F4', A.TMP_SAV_FLG))),'N') F4_F4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'A4', A.TMP_SAV_FLG))),'N') F4_A4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'F5', A.TMP_SAV_FLG))),'N') F4_F5_D    
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f4], DECODE(A.CNTR_TPSZ_CD, 'O5', A.TMP_SAV_FLG))),'N') F4_O5_D                                         
                   
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'D2', A.CNTR_QTY))),0)      F5_D2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'D4', A.CNTR_QTY))),0)      F5_D4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'D5', A.CNTR_QTY))),0)      F5_D5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'D7', A.CNTR_QTY))),0)      F5_D7
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'R2', A.CNTR_QTY))),0)      F5_R2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'R5', A.CNTR_QTY))),0)      F5_R5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'R9', A.CNTR_QTY))),0)      F5_R9
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'O2', A.CNTR_QTY))),0)      F5_O2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'S2', A.CNTR_QTY))),0)      F5_S2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'O4', A.CNTR_QTY))),0)      F5_O4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'S4', A.CNTR_QTY))),0)      F5_S4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'F2', A.CNTR_QTY))),0)      F5_F2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'A2', A.CNTR_QTY))),0)      F5_A2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'F4', A.CNTR_QTY))),0)      F5_F4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'A4', A.CNTR_QTY))),0)      F5_A4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'F5', A.CNTR_QTY))),0)      F5_F5      
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'O5', A.CNTR_QTY))),0)      F5_O5    
                                                            
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'D2', A.TMP_SAV_FLG))),'N') F5_D2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'D4', A.TMP_SAV_FLG))),'N') F5_D4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'D5', A.TMP_SAV_FLG))),'N') F5_D5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'D7', A.TMP_SAV_FLG))),'N') F5_D7_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'R2', A.TMP_SAV_FLG))),'N') F5_R2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'R5', A.TMP_SAV_FLG))),'N') F5_R5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'R9', A.TMP_SAV_FLG))),'N') F5_R9_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'O2', A.TMP_SAV_FLG))),'N') F5_O2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'S2', A.TMP_SAV_FLG))),'N') F5_S2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'O4', A.TMP_SAV_FLG))),'N') F5_O4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'S4', A.TMP_SAV_FLG))),'N') F5_S4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'F2', A.TMP_SAV_FLG))),'N') F5_F2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'A2', A.TMP_SAV_FLG))),'N') F5_A2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'F4', A.TMP_SAV_FLG))),'N') F5_F4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'A4', A.TMP_SAV_FLG))),'N') F5_A4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'F5', A.TMP_SAV_FLG))),'N') F5_F5_D                          
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f5], DECODE(A.CNTR_TPSZ_CD, 'O5', A.TMP_SAV_FLG))),'N') F5_O5_D 
              
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'D2', A.CNTR_QTY))),0)      F6_D2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'D4', A.CNTR_QTY))),0)      F6_D4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'D5', A.CNTR_QTY))),0)      F6_D5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'D7', A.CNTR_QTY))),0)      F6_D7
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'R2', A.CNTR_QTY))),0)      F6_R2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'R5', A.CNTR_QTY))),0)      F6_R5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'R9', A.CNTR_QTY))),0)      F6_R9
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'O2', A.CNTR_QTY))),0)      F6_O2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'S2', A.CNTR_QTY))),0)      F6_S2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'O4', A.CNTR_QTY))),0)      F6_O4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'S4', A.CNTR_QTY))),0)      F6_S4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'F2', A.CNTR_QTY))),0)      F6_F2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'A2', A.CNTR_QTY))),0)      F6_A2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'F4', A.CNTR_QTY))),0)      F6_F4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'A4', A.CNTR_QTY))),0)      F6_A4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'F5', A.CNTR_QTY))),0)      F6_F5    
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'O5', A.CNTR_QTY))),0)      F6_O5  
                                                              
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'D2', A.TMP_SAV_FLG))),'N') F6_D2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'D4', A.TMP_SAV_FLG))),'N') F6_D4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'D5', A.TMP_SAV_FLG))),'N') F6_D5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'D7', A.TMP_SAV_FLG))),'N') F6_D7_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'R2', A.TMP_SAV_FLG))),'N') F6_R2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'R5', A.TMP_SAV_FLG))),'N') F6_R5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'R9', A.TMP_SAV_FLG))),'N') F6_R9_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'O2', A.TMP_SAV_FLG))),'N') F6_O2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'S2', A.TMP_SAV_FLG))),'N') F6_S2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'O4', A.TMP_SAV_FLG))),'N') F6_O4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'S4', A.TMP_SAV_FLG))),'N') F6_S4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'F2', A.TMP_SAV_FLG))),'N') F6_F2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'A2', A.TMP_SAV_FLG))),'N') F6_A2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'F4', A.TMP_SAV_FLG))),'N') F6_F4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'A4', A.TMP_SAV_FLG))),'N') F6_A4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'F5', A.TMP_SAV_FLG))),'N') F6_F5_D    
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f6], DECODE(A.CNTR_TPSZ_CD, 'O5', A.TMP_SAV_FLG))),'N') F6_O5_D   
                     
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'D2', A.CNTR_QTY))),0)      F7_D2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'D4', A.CNTR_QTY))),0)      F7_D4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'D5', A.CNTR_QTY))),0)      F7_D5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'D7', A.CNTR_QTY))),0)      F7_D7
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'R2', A.CNTR_QTY))),0)      F7_R2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'R5', A.CNTR_QTY))),0)      F7_R5
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'R9', A.CNTR_QTY))),0)      F7_R9
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'O2', A.CNTR_QTY))),0)      F7_O2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'S2', A.CNTR_QTY))),0)      F7_S2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'O4', A.CNTR_QTY))),0)      F7_O4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'S4', A.CNTR_QTY))),0)      F7_S4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'F2', A.CNTR_QTY))),0)      F7_F2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'A2', A.CNTR_QTY))),0)      F7_A2
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'F4', A.CNTR_QTY))),0)      F7_F4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'A4', A.CNTR_QTY))),0)      F7_A4
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'F5', A.CNTR_QTY))),0)      F7_F5      
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'O5', A.CNTR_QTY))),0)      F7_O5  
                                                            
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'D2', A.TMP_SAV_FLG))),'N') F7_D2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'D4', A.TMP_SAV_FLG))),'N') F7_D4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'D5', A.TMP_SAV_FLG))),'N') F7_D5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'D7', A.TMP_SAV_FLG))),'N') F7_D7_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'R2', A.TMP_SAV_FLG))),'N') F7_R2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'R5', A.TMP_SAV_FLG))),'N') F7_R5_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'R9', A.TMP_SAV_FLG))),'N') F7_R9_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'O2', A.TMP_SAV_FLG))),'N') F7_O2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'S2', A.TMP_SAV_FLG))),'N') F7_S2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'O4', A.TMP_SAV_FLG))),'N') F7_O4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'S4', A.TMP_SAV_FLG))),'N') F7_S4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'F2', A.TMP_SAV_FLG))),'N') F7_F2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'A2', A.TMP_SAV_FLG))),'N') F7_A2_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'F4', A.TMP_SAV_FLG))),'N') F7_F4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'A4', A.TMP_SAV_FLG))),'N') F7_A4_D
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'F5', A.TMP_SAV_FLG))),'N') F7_F5_D      
              ,NVL(DECODE(A.WKY_SIM_TP_CD, B.CODE, DECODE(A.WEEK, @[f7], DECODE(A.CNTR_TPSZ_CD, 'O5', A.TMP_SAV_FLG))),'N') F7_O5_D     
                                                         
        FROM (	  
    	  	  
                -- INVENTORY ----------------------------------------------------------------------------
                -- INVENTORY (-2~-1주차)
                SELECT A.FCAST_YRWK WEEK
                      ,A.LOC_GRP_CD        
                      ,A.LOC_CD
                      ,A.WKY_SIM_TP_CD
                      ,A.CNTR_TPSZ_CD
                      ,A.CNTR_QTY
                      ,'N' TMP_SAV_FLG              
                FROM EQR_CTRL_MTY_WKY_SIM A
                    ,DUMMY_LOCATION B
                WHERE A.FCAST_YRWK BETWEEN @[p2] AND @[p1]   -- -2WEEK~-1WEEK
                AND   A.LOC_GRP_CD    = @[present_flag]  
                AND   A.WKY_SIM_TP_CD = 'IN' -- 하드코딩, INVENTORY
                AND   A.LOC_CD        = B.LOC_CD
                
                -- INVENTORY (0~+7주차)     
                UNION ALL
                        
                SELECT A.BSE_DT WEEK   
                      ,A.LOC_GRP_CD             
                      ,A.LOC_CD                  
                      ,'IN' WKY_SIM_TP_CD         
                      ,A.CNTR_TPSZ_CD
                      ,A.CNTR_QTY 
                      ,'N' TMP_SAV_FLG                          
                FROM  CIM_ETC_INVT A
                     ,DUMMY_LOCATION B
                WHERE A.CO_CD          = 'H'  -- 하드코딩
                AND   A.INVT_USE_TP_CD = '1'  -- 하드코딩
                AND   A.BSE_DT         BETWEEN @[c0] AND @[f7]  -- -2WEEK~+7WEEK
                AND   A.LOC_CD         = B.LOC_CD
                AND   A.LOC_GRP_CD     = @[present_flag]  -- E:ECC, L:LCC, S:SCC 
                
                
                
                
                -- REPO IN ------------------------------------------------------------------
                UNION ALL
                SELECT WEEK
                      ,LOC_GRP_CD
                      ,LOC_CD
                      ,WKY_SIM_TP_CD
                      ,CNTR_TPSZ_CD
                      ,NVL(SUM(CNTR_QTY),0) CNTR_QTY
                      ,TMP_SAV_FLG                      
                FROM
                (
                
                
                -- 과거주차 실적 -2~-1WEEK
                SELECT A.FCAST_YRWK WEEK
                      ,A.LOC_CD
                      ,A.LOC_GRP_CD
                      ,'RI' WKY_SIM_TP_CD
                      ,A.CNTR_TPSZ_CD
                      ,A.CNTR_QTY
                      ,'N' TMP_SAV_FLG
                FROM EQR_CTRL_MTY_WKY_SIM A
                    ,DUMMY_LOCATION B   

                WHERE A.FCAST_YRWK BETWEEN @[p2] AND @[p1] -- -2WEEK~-1WEEK 
                AND   A.LOC_GRP_CD    = @[present_flag] --L/E/S
                AND   A.WKY_SIM_TP_CD IN ('RI','MR')  -- REPOSITION IN (MR+RI)
                AND   A.LOC_CD        = B.LOC_CD     
                
                UNION ALL                 
                -- 현재주차
-- REPO IN DETAIL(팝업 수기입력) 은 적색으로 표시됨.
                -- Current Week 에서만 사용 (VD 동일지역 이송을 뺀 로직이 추가됨)
                -- Repo In (PLUS OTHER +COD SIMULATION - 동일지역 VD이송 제거 )
				SELECT A.WEEK
                     #if ( ${present_flag} == 'L')
                      ,C.LCC_CD LOC_CD
                     #elseif( ${present_flag} == 'E')
                      ,C.ECC_CD LOC_CD    
                     #else  --'S'
                      ,C.SCC_CD LOC_CD                          
                     #end
			          ,@[present_flag] LOC_GRP_CD
			          ,'RI' WKY_SIM_TP_CD
			          ,A.CNTR_TPSZ_CD
			          ,NVL(SUM(A.CNTR_QTY),0) CNTR_QTY
			          ,'Y' TMP_SAV_FLG -- 0보다 큰 값만 추출
    			FROM 
    			(
    				SELECT (SELECT PLN_YR||PLN_WK FROM EQR_WK_PRD WHERE TO_CHAR(A.ETD_DT+Y.DAYS, 'YYYYMMDD') BETWEEN WK_ST_DT AND WK_END_DT ) WEEK  
				          ,Y.LOC_CD
                          ,B.INTG_CD_VAL_CTNT CNTR_TPSZ_CD 
                          ,CASE WHEN B.INTG_CD_VAL_CTNT='D2' THEN NVL(A.D2_FCAST_QTY,0) 
                                WHEN B.INTG_CD_VAL_CTNT='D4' THEN NVL(A.D4_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='D5' THEN NVL(A.D5_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='D7' THEN NVL(A.D7_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='R2' THEN NVL(A.R2_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='R5' THEN NVL(A.R5_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='R9' THEN NVL(A.R9_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='O2' THEN NVL(A.O2_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='O4' THEN NVL(A.O4_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='S2' THEN NVL(A.S2_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='S4' THEN NVL(A.S4_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='F2' THEN NVL(A.F2_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='F4' THEN NVL(A.F4_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='F5' THEN NVL(A.F5_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='A2' THEN NVL(A.A2_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='A4' THEN NVL(A.A4_FCAST_QTY,0)       
                                END CNTR_QTY                           
    				FROM EQR_CTRL_BAL_RPT_DCHG_MNL A
 				        ,COM_INTG_CD_DTL B
 				        ,ADD_DAY Y
    				WHERE B.INTG_CD_ID        = 'CD00830'  
    				AND   A.ETD_DT BETWEEN (SELECT TO_DATE(WK_ST_DT, 'YYYYMMDD') - Y.DAYS  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[c0]) 
    				               AND     (SELECT TO_DATE(WK_END_DT, 'YYYYMMDD')- Y.DAYS  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[f7])   
    				AND   A.LOC_CD = Y.LOC_CD                    
    			) A,
                (
                    SELECT A.LCC_CD, A.ECC_CD, A.SCC_CD, B.LOC_CD
                    FROM MDM_EQ_ORZ_CHT A
                        ,MDM_LOCATION B
                    WHERE A.SCC_CD = B.SCC_CD     
                ) C
                WHERE A.LOC_CD(+)  = C.LOC_CD
    			GROUP BY A.WEEK 
                     #if ( ${present_flag} == 'L' )
                        ,C.LCC_CD 
                     #elseif ( ${present_flag} == 'E' )
                        ,C.ECC_CD 
                     #else  --'E'
                        ,C.SCC_CD                             
                     #end  
                        ,A.CNTR_TPSZ_CD
    			HAVING  NVL(SUM(A.CNTR_QTY),0) > 0                

                UNION ALL
                -- PLUS OTHER +COD SIMULATION - 동일지역 VD이송 제거
                SELECT A.WEEK WEEK
                      ,A.LOC_CD                                          
                      ,@[present_flag] LOC_GRP_CD
                      ,'RI' WKY_SIM_TP_CD
                      ,A.CNTR_TPSZ_CD
                      ,SUM(A.CNTR_QTY) CNTR_QTY
                      ,'N' TMP_SAV_FLG                   
                FROM 
                (   
                    -- PLUS OTHER 
                    -- INP_YRWK가 -1WEEK 가 곧 현재주차에 사용된다.
                    SELECT A.FCAST_YRWK WEEK
                          ,A.LOC_CD
                          ,B.INTG_CD_VAL_CTNT CNTR_TPSZ_CD 
                          ,CASE WHEN B.INTG_CD_VAL_CTNT='D2' THEN NVL(A.D2_FCAST_QTY,0) 
                                WHEN B.INTG_CD_VAL_CTNT='D4' THEN NVL(A.D4_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='D5' THEN NVL(A.D5_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='D7' THEN NVL(A.D7_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='R2' THEN NVL(A.R2_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='R5' THEN NVL(A.R5_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='R9' THEN NVL(A.R9_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='O2' THEN NVL(A.O2_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='O4' THEN NVL(A.O4_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='S2' THEN NVL(A.S2_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='S4' THEN NVL(A.S4_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='F2' THEN NVL(A.F2_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='F4' THEN NVL(A.F4_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='F5' THEN NVL(A.F5_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='A2' THEN NVL(A.A2_FCAST_QTY,0)       
                                WHEN B.INTG_CD_VAL_CTNT='A4' THEN NVL(A.A4_FCAST_QTY,0)       
                                END CNTR_QTY
                    FROM EQR_CTRL_MTY_BAL_RPT_OTR A
                        ,COM_INTG_CD_DTL B
                        ,DUMMY_LOCATION C   
                    WHERE B.INTG_CD_ID        = 'CD00830'                            
                    AND (
                           (A.INP_YRWK = @[p1] AND A.FCAST_YRWK = @[c0]) -- CURRENT WEEK
                        OR (A.INP_YRWK = @[c0] AND A.FCAST_YRWK = @[f1]) -- 1WEEK
                        OR (A.INP_YRWK = @[f1] AND A.FCAST_YRWK = @[f2]) -- 2WEEK
                        OR (A.INP_YRWK = @[f2] AND A.FCAST_YRWK = @[f3]) -- 3WEEK 
                        OR (A.INP_YRWK = @[f3] AND A.FCAST_YRWK = @[f4]) -- 4WEEK 
                        OR (A.INP_YRWK = @[f4] AND A.FCAST_YRWK = @[f5]) -- 5WEEK
                        OR (A.INP_YRWK = @[f5] AND A.FCAST_YRWK = @[f6]) -- 6WEEK  
                        OR (A.INP_YRWK = @[f6] AND A.FCAST_YRWK = @[f7]) -- 6WEEK                                                                                                            
                        )
                 
                    AND   A.LOC_CD            = C.LOC_CD
                    AND   A.LOC_GRP_CD        = @[present_flag]
                    AND   A.MTY_BAL_OTR_TP_CD = 2 -- PLUS OTHER (REPO IN 에 포함)

                    UNION ALL
					-- COD SIMULATION - 동일지역 VD 데이터

                    SELECT A.WEEK WEEK
                         #if ( ${present_flag} == 'L' )
                          ,C.LCC_CD LOC_CD
                         #elseif( ${present_flag} == 'E' )
                          ,C.ECC_CD LOC_CD    
                         #else  --'S'
                          ,C.SCC_CD LOC_CD                          
                         #end                            
                          ,A.CNTR_TPSZ_CD
                          ,SUM(A.CNTR_QTY) CNTR_QTY                
                    FROM 
                    ( 
                        SELECT B.WEEK WEEK
                              ,B.VSL_CD
                              ,B.SKD_VOY_NO
                              ,B.SKD_DIR_CD
                              ,B.SLAN_CD
                              ,B.YD_CD    
                              ,B.CNTR_TPSZ_CD               
                              -- RI 수량 - VD 수량 빼기(결과값이 0보다 작으면 0처리) -- 현재 주차만 데이터 존재함.                                                                 
                              ,CASE WHEN SUM(NVL(B.CNTR_QTY,0)-NVL(A.CNTR_QTY,0)) < 0 THEN 0 ELSE SUM(NVL(B.CNTR_QTY,0)-NVL(A.CNTR_QTY,0)) END CNTR_QTY         
                        FROM
                        (   
                            -- MVMT VD  ( LCC별 시작일부터 이번주 월요일까지 )
                            SELECT (SELECT PLN_YR||PLN_WK FROM EQR_WK_PRD WHERE TO_CHAR(A.ETD_DT, 'YYYYMMDD') BETWEEN WK_ST_DT AND WK_END_DT ) WEEK
                                  ,A.VSL_CD
                                  ,A.SKD_VOY_NO
                                  ,A.SKD_DIR_CD
                                  ,A.VSL_LANE_CD 
                                  ,A.YD_CD
                                  ,A.ETD_DT ETB_DT
				        		  ,A.CNTR_TPSZ_CD
				        		  ,SUM(A.CNTR_QTY) CNTR_QTY                                                                       
                            FROM EQR_CTRL_BAL_RPT_DCHG_SNAP A           
                                ,ADD_DAY_YARD Y                                      
                            WHERE A.ETD_DT BETWEEN (SELECT TO_DATE(WK_ST_DT, 'YYYYMMDD') - Y.DAYS  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[c0]) 
    				                       AND     (SELECT TO_DATE(WK_END_DT, 'YYYYMMDD')- Y.DAYS  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[f7])                                                                
                            AND   A.YD_CD  = Y.YD_CD  
		                	GROUP BY A.VSL_CD
                                    ,A.SKD_VOY_NO
                                    ,A.SKD_DIR_CD
                                    ,A.VSL_LANE_CD
                                    ,A.YD_CD
                                    ,A.ETD_DT
                                    ,A.CNTR_TPSZ_CD
                        
                        ) A
				        ,(
                            -- COD SIMULATION                 
                            SELECT A.WEEK
                                  ,A.VSL_CD
                                  ,A.SKD_VOY_NO
                                  ,A.SKD_DIR_CD
                                  ,A.SLAN_CD
                                  ,A.YD_CD          
                                  ,A.CNTR_TPSZ_CD
                                  ,SUM(A.CNTR_QTY) CNTR_QTY                
                            FROM 
                            (                                  
                                 SELECT A.VSL_LANE_CD SLAN_CD
                                       ,A.VSL_CD
                                       ,A.SKD_VOY_NO
                                       ,A.SKD_DIR_CD
                                       ,A.YD_CD
                                       ,A.ETB_DT                   
                                       ,(SELECT PLN_YR||PLN_WK FROM EQR_WK_PRD WHERE TO_CHAR(A.ETB_DT + Y.DAYS, 'YYYYMMDD') BETWEEN WK_ST_DT AND WK_END_DT ) WEEK
                                 
                                               ,B.INTG_CD_VAL_CTNT CNTR_TPSZ_CD 
                                               ,CASE WHEN B.INTG_CD_VAL_CTNT='D2' THEN NVL(A.D2_FCAST_QTY,0) 
                                                     WHEN B.INTG_CD_VAL_CTNT='D4' THEN NVL(A.D4_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='D5' THEN NVL(A.D5_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='D7' THEN NVL(A.D7_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='R2' THEN NVL(A.R2_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='R5' THEN NVL(A.R5_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='R9' THEN NVL(A.R9_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='O2' THEN NVL(A.O2_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='O4' THEN NVL(A.O4_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='S2' THEN NVL(A.S2_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='S4' THEN NVL(A.S4_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='F2' THEN NVL(A.F2_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='F4' THEN NVL(A.F4_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='F5' THEN NVL(A.F5_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='A2' THEN NVL(A.A2_FCAST_QTY,0)       
                                                     WHEN B.INTG_CD_VAL_CTNT='A4' THEN NVL(A.A4_FCAST_QTY,0)       
                                                     END CNTR_QTY
                                                                               
                                 FROM EQR_CTRL_REPO_SNAP A
                                      ,COM_INTG_CD_DTL B
                                      ,ADD_DAY_YARD Y                               
                                 WHERE B.INTG_CD_ID        = 'CD00830'     
                                 AND   A.YD_CD = Y.YD_CD    
                                             
                                 AND   A.ETB_DT BETWEEN  (SELECT TO_DATE(WK_ST_DT, 'YYYYMMDD') -Y.DAYS         FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[c0]) -- 0번째 week
                                                AND      (SELECT TO_DATE(WK_END_DT, 'YYYYMMDD')-Y.DAYS+0.9999  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[f7]) -- 0번째 week  
                            ) A
                            GROUP BY A.WEEK
                                  ,A.VSL_CD
                                  ,A.SKD_VOY_NO
                                  ,A.SKD_DIR_CD
                                  ,A.SLAN_CD
                                  ,A.YD_CD          
                                  ,A.CNTR_TPSZ_CD
                        )  B   
                        WHERE  A.VSL_CD      (+) = B.VSL_CD
                        AND    A.SKD_VOY_NO  (+) = B.SKD_VOY_NO
                        AND    A.SKD_DIR_CD  (+) = B.SKD_DIR_CD
                        AND    A.VSL_LANE_CD (+) = B.SLAN_CD
                        AND    A.YD_CD       (+) = B.YD_CD
				        AND    A.CNTR_TPSZ_CD(+) = B.CNTR_TPSZ_CD	                
                        
                        GROUP BY B.WEEK
                                ,B.VSL_CD
                                ,B.SKD_VOY_NO
                                ,B.SKD_DIR_CD
                                ,B.SLAN_CD
                                ,B.YD_CD  
                                ,B.CNTR_TPSZ_CD 
				    ) A
                    ,(
                        SELECT A.LCC_CD, A.ECC_CD, A.SCC_CD, B.LOC_CD, C.YD_CD
                        FROM MDM_EQ_ORZ_CHT A
                            ,MDM_LOCATION B
                            ,MDM_YARD C
                        WHERE A.SCC_CD = B.SCC_CD
                        AND   B.LOC_CD = C.LOC_CD  
                    ) C
                    WHERE A.YD_CD  = C.YD_CD
                    
                    GROUP BY A.WEEK                 
                         #if( ${present_flag} == 'L' )
                            ,C.LCC_CD 
                         #elseif( ${present_flag} == 'E')
                            ,C.ECC_CD 
                         #else    --SCC
                            ,C.SCC_CD                             
                         #end  
                            ,A.CNTR_TPSZ_CD
                    
                ) A  -- PLUS OTHER + COD SIMULATION(-동일지역 VD)
                GROUP BY A.WEEK
                        ,A.LOC_CD                                          
                        ,A.CNTR_TPSZ_CD                                        
                                
                -- 미래주차           
                
                )  
                GROUP BY WEEK
                        ,LOC_GRP_CD
                        ,LOC_CD
                        ,WKY_SIM_TP_CD
                        ,CNTR_TPSZ_CD
                        ,TMP_SAV_FLG   
                
                -- PLANNED REPO IN ----------------------------------------------------------

                UNION ALL
SELECT A.WEEK
      ,@[present_flag] LOC_GRP_CD        
     #if ( ${present_flag} == 'L')
        ,C.LCC_CD LOC_CD
     #elseif( ${present_flag} == 'E')
      ,C.ECC_CD LOC_CD    
     #else  --'S'
      ,C.SCC_CD LOC_CD                          
     #end
      ,'PI' WKY_SIM_TP_CD
      ,A.CNTR_TPSZ_CD
      ,NVL(SUM(A.CNTR_QTY),0) CNTR_QTY
      ,MAX(TMP_SAV_FLG) TMP_SAV_FLG
FROM                      
(                      
    -- PLANNED REPO IN <MANUAL 조회> -----------------------------------
        SELECT A.FCAST_YRWK        WEEK
              ,A.PLN_REPO_STS_CD   STS 
              ,A.VSL_LANE_CD       LANE
              ,A.VSL_CD      
              ,A.SKD_VOY_NO  
              ,A.SKD_DIR_CD        
              ,A.POD_YD_CD         YARD
              ,A.TO_ETB_DT         ETB
              ,B.CNTR_TPSZ_CD
              ,NVL(SUM(B.CNTR_QTY),0) CNTR_QTY   
              ,'Y' TMP_SAV_FLG 
        FROM EQR_CTRL_PLN_REPO_IN A
            ,EQR_CTRL_PLN_REPO_IN_QTY B
            ,DUMMY_YARD C
            ,ADD_DAY_YARD Y
          
        WHERE   A.TO_ETB_DT BETWEEN  (SELECT TO_DATE(WK_ST_DT, 'YYYYMMDD') -Y.DAYS         FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[c0]) -- 0번째 week
                            AND      (SELECT TO_DATE(WK_END_DT, 'YYYYMMDD')-Y.DAYS+0.9999  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[f7]) -- 7번째 week
                                                                  
        AND   A.POD_YD_CD       = C.YD_CD      
        AND   A.POD_YD_CD       = Y.YD_CD          
        AND   A.FCAST_YRWK      = B.FCAST_YRWK
        AND   A.VSL_CD          = B.VSL_CD
        AND   A.SKD_VOY_NO      = B.SKD_VOY_NO
        AND   A.SKD_DIR_CD      = B.SKD_DIR_CD
        AND   A.PLN_REPO_STS_CD = B.PLN_REPO_STS_CD
        AND   A.POD_YD_CD       = B.POD_YD_CD
        AND   A.TO_ETB_DT       = B.TO_ETB_DT
        AND   A.PLN_REPO_STS_CD = 'M' -- MANUAL
        GROUP BY A.FCAST_YRWK      
                ,A.PLN_REPO_STS_CD  
                ,A.VSL_LANE_CD     
                ,A.VSL_CD
                ,A.SKD_VOY_NO
                ,A.SKD_DIR_CD 
                ,A.POD_YD_CD     
                ,A.TO_ETB_DT
                ,B.CNTR_TPSZ_CD
        HAVING  NVL(SUM(B.CNTR_QTY),0) > 0

        UNION ALL      
    
        -- <MANUAL 조회(P+G) > (PLAN > GUIDELINE) > ----------------------------------------------------------------------- 
        SELECT WEEK
              ,STS
              ,LANE
              ,VSL_CD
              ,SKD_VOY_NO
              ,SKD_DIR_CD
              ,YARD
              ,ETB
              ,CNTR_TPSZ_CD
              ,NVL(SUM(CNTR_QTY),0) CNTR_QTY        
              ,MAX(CHK_FLG) TMP_SAV_FLG      
        FROM
        (             
            SELECT ROW_NUMBER() OVER (PARTITION BY WEEK, VSL_CD, SKD_VOY_NO, SKD_DIR_CD, YARD, ETB, CNTR_TPSZ_CD ORDER BY DP_SEQ ASC) FIN_SEQ -- MANUAL 조회(P+G) > (PLAN > GUIDELINE)
                  ,WEEK
                  ,STS
                  ,LANE
                  ,VSL_CD
                  ,SKD_VOY_NO
                  ,SKD_DIR_CD
                  ,YARD
                  ,ETB
                  ,CNTR_TPSZ_CD
                  ,CNTR_QTY
                  ,CHK_FLG
            FROM
            (
                -- <MANUAL 조회 (P+G) > ----------------------------------------------------------------------------------------- 
                SELECT 1                                    DP_SEQ  -- 우선순위 구분자
                      ,A.FCAST_YRWK                         WEEK
                      ,A.PLN_REPO_STS_CD                    STS 
                      ,A.VSL_LANE_CD                        LANE
                      ,A.VSL_CD        
                      ,A.SKD_VOY_NO  
                      ,A.SKD_DIR_CD        
                      ,A.POD_YD_CD                          YARD
                      ,A.TO_ETB_DT                          ETB
                      ,B.CNTR_TPSZ_CD
                      ,NVL(B.CNTR_QTY, 0) CNTR_QTY
                      ,'Y' CHK_FLG -- 적색표시
                FROM EQR_CTRL_PLN_REPO_IN A
                    ,EQR_CTRL_PLN_REPO_IN_QTY B
--                    ,DUMMY_YARD C
--                -- LCC 별 FM_DT, TO_DT 의 ADD DAY 적용된 조건임.    
--                WHERE A.TO_ETB_DT BETWEEN  TO_DATE(:wk_st_dt,'YYYYMMDD') AND TO_DATE(:wk_end_dt,'YYYYMMDD')+0.9999  
                
                    ,DUMMY_YARD C
                    ,ADD_DAY_YARD Y
          
                WHERE   A.TO_ETB_DT BETWEEN  (SELECT TO_DATE(WK_ST_DT, 'YYYYMMDD') -Y.DAYS         FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[c0]) -- 0번째 week
                                    AND      (SELECT TO_DATE(WK_END_DT, 'YYYYMMDD')-Y.DAYS+0.9999  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[f7]) -- 7번째 week
                                                                  
                AND   A.POD_YD_CD       = C.YD_CD      
                AND   A.POD_YD_CD       = Y.YD_CD  
                                  
 
                AND   A.FCAST_YRWK      = B.FCAST_YRWK
                AND   A.VSL_CD          = B.VSL_CD
                AND   A.SKD_VOY_NO      = B.SKD_VOY_NO
                AND   A.SKD_DIR_CD      = B.SKD_DIR_CD
                AND   A.PLN_REPO_STS_CD = B.PLN_REPO_STS_CD
                AND   A.POD_YD_CD       = B.POD_YD_CD
                AND   A.TO_ETB_DT       = B.TO_ETB_DT
                AND   A.PLN_REPO_STS_CD IN ('P', 'G') -- P, G 수동입력
                
                -- < PLAN 조회 > ----------------------------------------------------------------------------------------- 
                -- PLAN, GUIDE LINE 중에 PLAN > GUIDELINE 순으로 집계
                UNION ALL
                SELECT 2 DP_SEQ  -- MANUAL P/G이 1순위이고 PLAN-GUIDELINE은 2순위
                      ,(SELECT PLN_YR||PLN_WK FROM EQR_WK_PRD WHERE TO_CHAR(VPS_ETB_DT + Y.DAYS, 'YYYYMMDD') BETWEEN WK_ST_DT AND WK_END_DT ) WEEK
                      ,PLN_REPO_STS_CD STS
                      ,SLAN_CD         LANE      
                      ,VSL_CD      
                      ,SKD_VOY_NO  
                      ,SKD_DIR_CD  
                      ,POD_YD_CD       YARD
                      ,VPS_ETB_DT      ETB  
                      ,CNTR_TPSZ_CD
                      ,CNTR_QTY 
                      ,'N' CHK_FLG -- 적색표시
                FROM
                (         
                    SELECT ROW_NUMBER() OVER (PARTITION BY VSL_CD, SKD_VOY_NO, SKD_DIR_CD, POD_YD_CD, CNTR_TPSZ_CD, VPS_ETB_DT ORDER BY DP_SEQ ASC) SEL_CD -- PLAN > GUIDELINE
                          ,PLN_REPO_STS_CD
                          ,VSL_CD      
                          ,SKD_VOY_NO  
                          ,SKD_DIR_CD  
                          ,POD_YD_CD   
                          ,CNTR_TPSZ_CD
                          ,CNTR_QTY 
                          ,SLAN_CD
                          ,VPS_PORT_CD
                          ,VPS_ETB_DT   
                    FROM
                    (         
                        --- < PLAN > --------------------------  
                        SELECT 1 DP_SEQ
                              ,'P' PLN_REPO_STS_CD 
                              ,B.VSL_CD      
                              ,B.SKD_VOY_NO  
                              ,B.SKD_DIR_CD  
                              ,B.POD_YD_CD   
                              ,B.CNTR_TPSZ_CD
                              ,NVL(SUM(B.CNTR_QTY),0) CNTR_QTY 
                              ,A.SLAN_CD
                              ,A.VPS_PORT_CD
                              ,A.VPS_ETB_DT   
                        FROM VSK_VSL_PORT_SKD A
                            ,(
                                SELECT A.VSL_CD
                                      ,A.SKD_VOY_NO
                                      ,A.SKD_DIR_CD
                                      ,A.POL_YD_CD
                                      ,A.POD_YD_CD
                                      ,B.CNTR_TPSZ_CD           
                                      ,B.CNTR_QTY
                                FROM EQR_CTRL_MTY_DCHG_PLN A
                                    ,EQR_CTRL_MTY_DCHG_PLN_QTY B
                                    ,VSK_VSL_PORT_SKD C
                                    ,DUMMY_YARD D
                                    ,ADD_DAY_YARD Y                                       

                                                                  
                                WHERE A.POD_YD_CD       = D.YD_CD      
                                AND   A.POD_YD_CD       = Y.YD_CD  
                                                                                                            
                                AND   A.VSL_CD          = B.VSL_CD
                                AND   A.SKD_VOY_NO      = B.SKD_VOY_NO
                                AND   A.SKD_DIR_CD      = B.SKD_DIR_CD
                                AND   A.POL_YD_CD       = B.POL_YD_CD 
                                AND   A.POD_YD_CD       = B.POD_YD_CD  
                                AND   A.MTY_PLN_SHW_FLG = 'Y'   -- 하드코딩 
                                
                                -- VSK SKD 과의 JOIN
                                AND   B.VSL_CD          = C.VSL_CD
                                AND   B.SKD_VOY_NO      = C.SKD_VOY_NO
                                AND   B.SKD_DIR_CD      = C.SKD_DIR_CD
                                AND   B.POD_YD_CD       = C.YD_CD
                                
                                AND   C.VPS_ETB_DT BETWEEN  (SELECT TO_DATE(WK_ST_DT, 'YYYYMMDD') -Y.DAYS         FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[c0]) -- 0번째 week
                                                   AND      (SELECT TO_DATE(WK_END_DT, 'YYYYMMDD')-Y.DAYS+0.9999  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[f7]) -- 7번째 week                                
                            ) B
                                   
                                    
                        WHERE A.VSL_CD(+)     = B.VSL_CD
                        AND   A.SKD_VOY_NO(+) = B.SKD_VOY_NO
                        AND   A.SKD_DIR_CD(+) = B.SKD_DIR_CD  
                        AND   A.YD_CD(+)      = B.POD_YD_CD
                        AND   A.CLPT_IND_SEQ = '1'  -- 하드코딩    
                        GROUP BY B.VSL_CD      
                                ,B.SKD_VOY_NO  
                                ,B.SKD_DIR_CD  
                                ,B.POD_YD_CD   
                                ,B.CNTR_TPSZ_CD
                                ,A.SLAN_CD
                                ,A.VPS_PORT_CD
                                ,A.VPS_ETB_DT  
                            -- < GUIDELINE 조회 > -----------------------------------------------------------------------------------------
                        UNION ALL         
                        SELECT 2 DP_SEQ
                              ,'G' PLN_REPO_STS_CD 
                              ,B.VSL_CD      
                              ,B.SKD_VOY_NO  
                              ,B.SKD_DIR_CD  
                              ,B.POD_YD_CD   
                              ,B.CNTR_TPSZ_CD
                              ,B.CNTR_QTY 
                              ,A.SLAN_CD
                              ,A.VPS_PORT_CD
                              ,A.VPS_ETB_DT   

                        FROM VSK_VSL_PORT_SKD A
                            ,(
                                SELECT A.VSL_CD
                                      ,A.SKD_VOY_NO
                                      ,A.SKD_DIR_CD
                                      ,A.POD_YD_CD
                                      ,B.CNTR_TPSZ_CD           
                                      ,B.CNTR_QTY
                                FROM EQR_CTRL_PLN_SNAP A
                                    ,EQR_CTRL_PLN_SNAP_QTY B
                                    ,DUMMY_YARD C
                                    ,ADD_DAY_YARD Y
          
                                WHERE A.TO_ETB_DT BETWEEN  (SELECT TO_DATE(WK_ST_DT, 'YYYYMMDD') -Y.DAYS         FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[c0]) -- 0번째 week
                                                  AND      (SELECT TO_DATE(WK_END_DT, 'YYYYMMDD')-Y.DAYS+0.9999  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[f7]) -- 7번째 week
                                                                  
                                AND   A.POD_YD_CD  = C.YD_CD      
                                AND   A.POD_YD_CD  = Y.YD_CD                                                         
                                AND   A.VSL_CD     = B.VSL_CD
                                AND   A.SKD_VOY_NO = B.SKD_VOY_NO
                                AND   A.SKD_DIR_CD = B.SKD_DIR_CD
                                AND   A.POD_YD_CD  = B.POD_YD_CD  
                                AND   A.TO_ETB_DT  = B.TO_ETB_DT
                            ) B
                        WHERE A.VSL_CD(+)     = B.VSL_CD
                        AND   A.SKD_VOY_NO(+) = B.SKD_VOY_NO
                        AND   A.SKD_DIR_CD(+) = B.SKD_DIR_CD  
                        AND   A.YD_CD(+)      = B.POD_YD_CD
                        AND   A.CLPT_IND_SEQ  = '1'  -- 하드코딩    
                    )      
                )
               ,ADD_DAY_YARD Y
                WHERE POD_YD_CD = Y.YD_CD
                AND   SEL_CD = 1  -- PLAN, GUIDE LINE 중에 PLAN > GUIDELINE 순으로 집계
            )
        )
        WHERE FIN_SEQ = 1
        GROUP BY WEEK
                  ,STS
                  ,LANE
                  ,VSL_CD
                  ,SKD_VOY_NO
                  ,SKD_DIR_CD
                  ,YARD
                  ,ETB
                  ,CNTR_TPSZ_CD


) A
,(
    SELECT A.LCC_CD, A.ECC_CD, A.SCC_CD, B.LOC_CD, C.YD_CD
    FROM MDM_EQ_ORZ_CHT A
        ,MDM_LOCATION B
        ,MDM_YARD C
    WHERE A.SCC_CD = B.SCC_CD     
    AND   B.LOC_CD = C.LOC_CD
) C
WHERE A.YARD  = C.YD_CD
AND   A.CNTR_QTY > 0  -- 0보다 큰 데이터만 수집
AND  ( A.VSL_CD, A.SKD_VOY_NO, A.SKD_DIR_CD, A.WEEK ) NOT IN -- REPO IN 과 중복되는 VVD, WEEK 는 데이터 산출에서 제외함(,   )
               (
                    -- REPO IN VVD 검색
                    SELECT DISTINCT A.VSL_CD
                          ,A.SKD_VOY_NO
                          ,A.SKD_DIR_CD                  
                          ,(SELECT PLN_YR||PLN_WK FROM EQR_WK_PRD WHERE TO_CHAR(A.ETB_DT + Y.DAYS, 'YYYYMMDD') BETWEEN WK_ST_DT AND WK_END_DT ) WEEK                                         
                    FROM EQR_CTRL_REPO_SNAP A
                         ,ADD_DAY_YARD Y                               
                    WHERE A.YD_CD = Y.YD_CD                                                 
                    AND   A.ETB_DT BETWEEN  (SELECT TO_DATE(WK_ST_DT,  'YYYYMMDD') -Y.DAYS        FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[c0]) -- 0번째 week
                                   AND      (SELECT TO_DATE(WK_END_DT, 'YYYYMMDD')-Y.DAYS+0.9999  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[f7]) -- 0번째 week
                                                
                    UNION 
                    -- 수기입력 REPO IN VVD 검색
    				SELECT DISTINCT A.VSL_CD
				          ,A.SKD_VOY_NO
				          ,A.SKD_DIR_CD   
				          ,(SELECT PLN_YR||PLN_WK FROM EQR_WK_PRD WHERE TO_CHAR(A.ETD_DT+Y.DAYS, 'YYYYMMDD') BETWEEN WK_ST_DT AND WK_END_DT ) WEEK  
    				FROM EQR_CTRL_BAL_RPT_DCHG_MNL A
 				        ,ADD_DAY Y
    				WHERE A.ETD_DT BETWEEN (SELECT TO_DATE(WK_ST_DT,  'YYYYMMDD') - Y.DAYS FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[c0]) 
    				               AND     (SELECT TO_DATE(WK_END_DT, 'YYYYMMDD')- Y.DAYS  FROM EQR_WK_PRD WHERE PLN_YR||PLN_WK = @[f7])   
    				AND   A.LOC_CD = Y.LOC_CD

               )

GROUP BY              A.WEEK   
 
                    #if ( ${present_flag} == 'L' )
                     ,C.LCC_CD 
                    #elseif ( ${present_flag} == 'E' )
                     ,C.ECC_CD 
                    #else  --'E'
                     ,C.SCC_CD                             
                    #end  
                     
                     ,A.CNTR_TPSZ_CD

                 
                -- LT/ST/OW -----------------------------------------------------------------
                UNION ALL
                SELECT WEEK
                      ,LOC_GRP_CD
                      ,LOC_CD
                      ,WKY_SIM_TP_CD
                      ,CNTR_TPSZ_CD
                      ,NVL(SUM(CNTR_QTY),0) CNTR_QTY
                      ,TMP_SAV_FLG                      
                FROM
                (
                     -- 과거실적
                     SELECT A.FCAST_YRWK WEEK
                           ,A.LOC_GRP_CD                
                           ,A.LOC_CD
                           ,A.WKY_SIM_TP_CD
                           ,A.CNTR_TPSZ_CD
                           ,A.CNTR_QTY
                           ,A.TMP_SAV_FLG         
                     FROM EQR_CTRL_MTY_WKY_SIM A
                         ,DUMMY_LOCATION B
                     WHERE A.FCAST_YRWK BETWEEN @[p2] AND @[p1]   -- -2WEEK~-1WEEK
                     AND   A.LOC_GRP_CD    = @[present_flag]  
                     AND   A.WKY_SIM_TP_CD = 'OT' -- LT/ST/OW
                     AND   A.LOC_CD        = B.LOC_CD 
                  
--                 -- 현재~ 미래 
                 #if ( ${present_flag} == 'L')  -- LCC 단위만 조회 가능               
                     UNION ALL
                     SELECT A.ONH_PKUP_YRWK WEEK  -- PLAN WEEK --> PICKUP WEEK 로 기준변경, 2013-12-18, 
                           ,@[present_flag] LOC_GRP_CD                
                           ,A.LCC_CD LOC_CD  -- 항상 LCC
                           ,'OT' WKY_SIM_TP_CD
                           ,B.CNTR_TPSZ_CD
                           ,B.CNTR_QTY
                           ,'N' TMP_SAV_FLG   
                     FROM EQR_CTRL_ONH_PLN_APRO A
                         ,EQR_CTRL_ONH_PLN_APRO_QTY B
                         ,DUMMY_LOCATION C
                     WHERE A.ONH_PLN_YRWK = B.ONH_PLN_YRWK     
                     AND   A.LCC_CD       = B.LCC_CD
                     AND   A.EQ_LSTM_CD   = B.EQ_LSTM_CD
                     AND   A.LSE_PLN_SEQ  = B.LSE_PLN_SEQ
                     AND   A.ONH_PKUP_YRWK BETWEEN @[c0] AND @[f7]   -- 0WEEK~7WEEK (PLAN WEEK --> PICKUP WEEK 로 기준변경, 2013-12-18, )
                     AND   A.LCC_CD       = C.LOC_CD
                  #end   
                     
                     
                )  
                GROUP BY WEEK
                        ,LOC_GRP_CD
                        ,LOC_CD
                        ,WKY_SIM_TP_CD
                        ,CNTR_TPSZ_CD
                        ,TMP_SAV_FLG          
                                
                -- MG FORECAST ------------------------------------------------------------------                
                UNION ALL
                SELECT WEEK
                      ,LOC_GRP_CD        
                      ,LOC_CD
                      ,WKY_SIM_TP_CD
                      ,CNTR_TPSZ_CD
                      ,NVL(SUM(CNTR_QTY),0) CNTR_QTY
                      ,TMP_SAV_FLG
                FROM
                (
                    SELECT ROW_NUMBER() OVER (PARTITION BY WEEK, LOC_CD, CNTR_TPSZ_CD ORDER BY TMP_SAV_FLG DESC) DP_SEQ
                          ,WEEK
                          ,LOC_CD
                          ,LOC_GRP_CD
                          ,WKY_SIM_TP_CD
                          ,CNTR_TPSZ_CD
                          ,CNTR_QTY
                          ,TMP_SAV_FLG
                    FROM
                    (      
                        -- -2주차~+7주차 수동입력
                        SELECT A.FCAST_YRWK WEEK
                              ,A.LOC_CD
                              ,A.LOC_GRP_CD
                              ,A.WKY_SIM_TP_CD
                              ,A.CNTR_TPSZ_CD
                              ,A.CNTR_QTY
                              ,A.TMP_SAV_FLG
                        FROM EQR_CTRL_MTY_WKY_SIM A 
                            ,DUMMY_LOCATION B   
                        WHERE A.FCAST_YRWK BETWEEN @[p2] AND @[f7] -- -2주차~+7주차      
                        AND   A.LOC_GRP_CD      = @[present_flag] -- L/E/S
                        AND   A.WKY_SIM_TP_CD   = 'IF'        -- 하드코딩,MG FORECAST
                        AND   A.LOC_CD          = B.LOC_CD
                        
                        -- OP/MG 의 데이터
                        UNION ALL                                 
                        SELECT FCAST_YRWK
                              ,LOC_CD
                              ,LOC_GRP_CD
                              ,'IF' WKY_SIM_TP_CD
                              ,CNTR_TPSZ_CD
                              ,CNTR_QTY   
                              ,FLAG TMP_SAV_FLG                           
                        FROM        
                        ( 
                           -- 동일한 FCAST_YRWK 중에 가장 최근 INP_YRWK 의 데이터 를 찾음 
                           SELECT ROW_NUMBER() OVER(PARTITION BY FCAST_YRWK, LOC_CD, LOC_GRP_CD, CNTR_TPSZ_CD ORDER BY INP_YRWK DESC) RN
                                 ,DECODE(INP_YRWK,@[p1],'N','X') FLAG -- N:은 아무표시 없음, X : BOLD 로 표시함
                                 ,INP_YRWK     
                                 ,FCAST_YRWK
                                 ,LOC_CD
                                 ,LOC_GRP_CD
                                 ,CNTR_TPSZ_CD
                                 ,CNTR_QTY
                           FROM
                           (      
                                SELECT A.INP_YRWK
                                      ,A.FCAST_YRWK
                                      ,A.LOC_CD
                                      ,A.LOC_GRP_CD
                                      ,B.INTG_CD_VAL_CTNT CNTR_TPSZ_CD                       
                                      ,CASE WHEN B.INTG_CD_VAL_CTNT='D2' THEN NVL(SUM(D2_FCAST_QTY),0) 
                                            WHEN B.INTG_CD_VAL_CTNT='D4' THEN NVL(SUM(D4_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='D5' THEN NVL(SUM(D5_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='D7' THEN NVL(SUM(D7_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='R2' THEN NVL(SUM(R2_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='R5' THEN NVL(SUM(R5_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='R9' THEN NVL(SUM(R9_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='O2' THEN NVL(SUM(O2_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='O4' THEN NVL(SUM(O4_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='S2' THEN NVL(SUM(S2_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='S4' THEN NVL(SUM(S4_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='F2' THEN NVL(SUM(F2_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='F4' THEN NVL(SUM(F4_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='F5' THEN NVL(SUM(F5_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='A2' THEN NVL(SUM(A2_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='A4' THEN NVL(SUM(A4_FCAST_QTY),0)   
                                            WHEN B.INTG_CD_VAL_CTNT='O5' THEN NVL(SUM(O5_FCAST_QTY),0)    
                                            END CNTR_QTY          
                                FROM EQR_CTRL_MTY_BAL_RPT A
                                    ,COM_INTG_CD_DTL B 
                                    ,DUMMY_LOCATION  C          
                                WHERE A.CO_CD         = 'H'
                                AND   A.LOC_GRP_CD    = @[present_flag] --L/E/S
                                AND   A.MTY_BAL_TP_CD = '1' --IF FORECAST
                                AND   A.LOC_CD        = C.LOC_CD 
                                AND   A.FCAST_YRWK      BETWEEN @[c0] AND @[f7]  -- -1WEEK~+7WEEK
                                AND   B.INTG_CD_ID    = 'CD00830'
                                  
                                GROUP BY A.FCAST_YRWK
                                        ,A.INP_YRWK 
                                        ,A.LOC_CD
                                        ,A.LOC_GRP_CD
                                        ,B.INTG_CD_VAL_CTNT    
                            ) 
                            WHERE CNTR_QTY > 0                                                      
                        )    
                        WHERE   RN = 1  -- 동일한 FCAST_YRWK 중에 가장 최근 INP_YRWK 의 데이터 를 찾음                                              
                
		        	            )
                )
                WHERE DP_SEQ = 1 -- 수정 데이터를 우선으로 추출
                GROUP BY WEEK
                        ,LOC_CD        
                        ,LOC_GRP_CD
                        ,WKY_SIM_TP_CD
                        ,CNTR_TPSZ_CD
                        ,TMP_SAV_FLG
                        
                -- OP FORECAST ------------------------------------------------------------------       
                UNION ALL
                SELECT WEEK
                      ,LOC_GRP_CD        
                      ,LOC_CD
                      ,WKY_SIM_TP_CD
                      ,CNTR_TPSZ_CD
                      ,NVL(SUM(CNTR_QTY),0) CNTR_QTY
                      ,TMP_SAV_FLG
                FROM
                (
                    SELECT ROW_NUMBER() OVER (PARTITION BY WEEK, LOC_CD, CNTR_TPSZ_CD ORDER BY TMP_SAV_FLG DESC) DP_SEQ
                          ,WEEK
                          ,LOC_CD
                          ,LOC_GRP_CD
                          ,WKY_SIM_TP_CD
                          ,CNTR_TPSZ_CD
                          ,CNTR_QTY
                          ,TMP_SAV_FLG
                    FROM
                    (      
                        -- -2주차~+7주차 수동입력
                        SELECT A.FCAST_YRWK WEEK
                              ,A.LOC_CD
                              ,A.LOC_GRP_CD
                              ,A.WKY_SIM_TP_CD
                              ,A.CNTR_TPSZ_CD
                              ,A.CNTR_QTY
                              ,A.TMP_SAV_FLG
                        FROM EQR_CTRL_MTY_WKY_SIM A 
                            ,DUMMY_LOCATION B   
                        WHERE A.FCAST_YRWK BETWEEN @[p2] AND @[f7] -- -2주차~+7주차      
                        AND   A.LOC_GRP_CD      = @[present_flag] -- L/E/S
                        AND   A.WKY_SIM_TP_CD   = 'OF'        -- 하드코딩,MG FORECAST
                        AND   A.LOC_CD          = B.LOC_CD
                        
                        -- OP/MG 의 OP FORECAST 데이터
                        UNION ALL                                 
                        SELECT FCAST_YRWK
                              ,LOC_CD
                              ,LOC_GRP_CD
                              ,'OF' WKY_SIM_TP_CD
                              ,CNTR_TPSZ_CD
                              ,CNTR_QTY   
                              ,FLAG TMP_SAV_FLG                           
                        FROM        
                        ( 
                           -- 동일한 FCAST_YRWK 중에 가장 최근 INP_YRWK 의 데이터 를 찾음 
                           SELECT ROW_NUMBER() OVER(PARTITION BY FCAST_YRWK, LOC_CD, LOC_GRP_CD, CNTR_TPSZ_CD ORDER BY INP_YRWK DESC) RN
                                 ,DECODE(INP_YRWK,@[p1],'N','X') FLAG -- N:은 아무표시 없음, X : BOLD 로 표시함
                                 ,INP_YRWK     
                                 ,FCAST_YRWK
                                 ,LOC_CD
                                 ,LOC_GRP_CD
                                 ,CNTR_TPSZ_CD
                                 ,CNTR_QTY
                           FROM
                           (      
                                SELECT A.INP_YRWK
                                      ,A.FCAST_YRWK
                                      ,A.LOC_CD
                                      ,A.LOC_GRP_CD
                                      ,B.INTG_CD_VAL_CTNT CNTR_TPSZ_CD                       
                                      ,CASE WHEN B.INTG_CD_VAL_CTNT='D2' THEN NVL(SUM(D2_FCAST_QTY),0) 
                                            WHEN B.INTG_CD_VAL_CTNT='D4' THEN NVL(SUM(D4_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='D5' THEN NVL(SUM(D5_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='D7' THEN NVL(SUM(D7_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='R2' THEN NVL(SUM(R2_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='R5' THEN NVL(SUM(R5_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='R9' THEN NVL(SUM(R9_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='O2' THEN NVL(SUM(O2_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='O4' THEN NVL(SUM(O4_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='S2' THEN NVL(SUM(S2_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='S4' THEN NVL(SUM(S4_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='F2' THEN NVL(SUM(F2_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='F4' THEN NVL(SUM(F4_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='F5' THEN NVL(SUM(F5_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='A2' THEN NVL(SUM(A2_FCAST_QTY),0)       
                                            WHEN B.INTG_CD_VAL_CTNT='A4' THEN NVL(SUM(A4_FCAST_QTY),0)   
                                            WHEN B.INTG_CD_VAL_CTNT='O5' THEN NVL(SUM(O5_FCAST_QTY),0)    
                                            END CNTR_QTY          
                                FROM EQR_CTRL_MTY_BAL_RPT A
                                    ,COM_INTG_CD_DTL B 
                                    ,DUMMY_LOCATION  C          
                                WHERE A.CO_CD         = 'H'
                                AND   A.LOC_GRP_CD    = @[present_flag] --L/E/S
                                AND   A.MTY_BAL_TP_CD = '3' --OUT FORECAST
                                AND   A.LOC_CD        = C.LOC_CD 
                                AND   A.FCAST_YRWK      BETWEEN @[c0] AND @[f7]
                                AND   B.INTG_CD_ID    = 'CD00830'
                                  
                                GROUP BY A.FCAST_YRWK
                                        ,A.INP_YRWK 
                                        ,A.LOC_CD
                                        ,A.LOC_GRP_CD
                                        ,B.INTG_CD_VAL_CTNT    
                            ) 
                            WHERE CNTR_QTY > 0                                                      
                        )    
                        WHERE   RN = 1  -- 동일한 FCAST_YRWK 중에 가장 최근 INP_YRWK 의 데이터 를 찾음                                              
                
		        	            )
                )
                WHERE DP_SEQ = 1 -- 수정 데이터를 우선으로 추출
                GROUP BY WEEK
                        ,LOC_CD        
                        ,LOC_GRP_CD
                        ,WKY_SIM_TP_CD
                        ,CNTR_TPSZ_CD
                        ,TMP_SAV_FLG
                        
                -- REPO OUT ------------------------------------------------------------------
                -- REPO OUT (-2~-1주차)
                UNION ALL
                SELECT WEEK              
                      ,LOC_GRP_CD
                      ,LOC_CD
                      ,WKY_SIM_TP_CD
                      ,CNTR_TPSZ_CD
                      ,NVL(SUM(CNTR_QTY),0) CNTR_QTY
                      ,TMP_SAV_FLG 
                FROM
                (
                    SELECT ROW_NUMBER() OVER (PARTITION BY WEEK, LOC_CD, CNTR_TPSZ_CD ORDER BY TMP_SAV_FLG DESC) DP_SEQ
                          ,WEEK
                          ,LOC_CD
                          ,LOC_GRP_CD
                          ,WKY_SIM_TP_CD
                          ,CNTR_TPSZ_CD
                          ,CNTR_QTY
                          ,TMP_SAV_FLG
                    FROM
                    (      
                        -- -1주차~+4주차 수동입력
                        SELECT A.FCAST_YRWK WEEK
                              ,A.LOC_CD
                              ,A.LOC_GRP_CD
                              ,A.WKY_SIM_TP_CD
                              ,A.CNTR_TPSZ_CD
                              ,A.CNTR_QTY
                              ,A.TMP_SAV_FLG
                        FROM EQR_CTRL_MTY_WKY_SIM A
                            ,DUMMY_LOCATION B   
                        WHERE A.FCAST_YRWK BETWEEN @[p2] AND @[f7] -- -2주차~+7주차    
                        AND   A.LOC_GRP_CD    = @[present_flag]  -- L/E/S
                        AND   A.WKY_SIM_TP_CD = 'RO'      -- REPO OUT
                        AND   A.LOC_CD        = B.LOC_CD             
                                
                        UNION ALL
                
		        		SELECT WEEK
                              ,LOC_CD
                              ,LOC_GRP_CD
                              ,WKY_SIM_TP_CD
                              ,CNTR_TPSZ_CD
                              ,SUM(CNTR_QTY) AS CNTR_QTY
                              ,TMP_SAV_FLG
                              
		        		FROM
                        (                      
                            -- EQR_CTRL_BAL_RPT_REPO_OUT
                        	-- 0주차~+4주차 REPO OUT 데이터
                        	SELECT A.FCAST_YRWK WEEK
                        	      ,A.LOC_CD
                        	      ,A.LOC_GRP_CD
                        	      ,'RO' WKY_SIM_TP_CD
                       	          ,B.INTG_CD_VAL_CTNT CNTR_TPSZ_CD 
                       	          ,CASE WHEN B.INTG_CD_VAL_CTNT='D2' THEN NVL(SUM(A.D2_FCAST_QTY),0)
                                        WHEN B.INTG_CD_VAL_CTNT='D4' THEN NVL(SUM(A.D4_FCAST_QTY),0)       
                       	                WHEN B.INTG_CD_VAL_CTNT='D5' THEN NVL(SUM(A.D5_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='D7' THEN NVL(SUM(A.D7_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='R2' THEN NVL(SUM(A.R2_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='R5' THEN NVL(SUM(A.R5_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='R9' THEN NVL(SUM(A.R9_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='O2' THEN NVL(SUM(A.O2_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='O4' THEN NVL(SUM(A.O4_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='S2' THEN NVL(SUM(A.S2_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='S4' THEN NVL(SUM(A.S4_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='F2' THEN NVL(SUM(A.F2_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='F4' THEN NVL(SUM(A.F4_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='F5' THEN NVL(SUM(A.F5_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='A2' THEN NVL(SUM(A.A2_FCAST_QTY),0)       
                                        WHEN B.INTG_CD_VAL_CTNT='A4' THEN NVL(SUM(A.A4_FCAST_QTY),0)       
                                        END CNTR_QTY
                                  ,'N' TMP_SAV_FLG      
                            FROM EQR_CTRL_BAL_RPT_REPO_OUT A
                                ,COM_INTG_CD_DTL B   
                                ,DUMMY_LOCATION C      
                            WHERE A.LOC_GRP_CD    = @[present_flag] --L/E/S
                            AND   A.LOC_CD        = C.LOC_CD
                            AND   A.INP_YRWK      = @[p1]  -- 1주차 
                            AND   B.INTG_CD_ID    = 'CD00830'
                            GROUP BY A.FCAST_YRWK 
                                    ,A.LOC_CD
                                    ,A.LOC_GRP_CD
                                    ,B.INTG_CD_VAL_CTNT                                                 
                                
		        		)
                        GROUP BY WEEK
                                ,LOC_CD
                                ,LOC_GRP_CD
                                ,WKY_SIM_TP_CD
                                ,CNTR_TPSZ_CD
                                ,TMP_SAV_FLG               
                    )
                )
                WHERE DP_SEQ = 1 -- 수정 데이터를 우선으로 추출
                GROUP BY WEEK
                        ,LOC_CD        
                        ,LOC_GRP_CD
                        ,WKY_SIM_TP_CD
                        ,CNTR_TPSZ_CD
                        ,TMP_SAV_FLG
                        
                -- IC ------------------------------------------------------------------
                -- IC (-2~+7WEEK)       
                UNION ALL
                SELECT A.FCAST_YRWK WEEK
                      ,A.LOC_GRP_CD        
                      ,A.LOC_CD
                      ,A.WKY_SIM_TP_CD
                      ,A.CNTR_TPSZ_CD
                      ,A.CNTR_QTY
                      ,'N' TMP_SAV_FLG                     
                FROM EQR_CTRL_MTY_WKY_SIM A
                    ,DUMMY_LOCATION B
                WHERE A.FCAST_YRWK    BETWEEN @[p2] AND @[f7]  -- -2~+7WEEK      
                AND   A.LOC_GRP_CD    = @[present_flag] 
                AND   A.WKY_SIM_TP_CD = 'IC' -- IC
                AND   A.LOC_CD        = B.LOC_CD                           
                                        
                                   
                -- -- ------------------------------------------------------------------
            ) A        
           ,(
               SELECT A.LOC_CD
                     ,B.CODE
                     ,B.NAME
                     ,B.SORT
                     ,@[present_flag] LOC_GRP_CD -- 변수인가
               FROM      
               (
      #if( ${present_flag} == 'L'  )  -- ALL
                   SELECT DISTINCT LCC_CD LOC_CD
      #elseif( ${present_flag} == 'E' )   
                   SELECT DISTINCT ECC_CD LOC_CD  
      #else  --SCC일때
                   SELECT DISTINCT SCC_CD LOC_CD   
      #end     
                   FROM MDM_EQ_ORZ_CHT
                   WHERE RCC_CD IN ('CNSHA', 'HKHKG', 'TWTPE', 'KRSEL', 'JPTYO', 'SGSIN') -- 하드코딩
                   AND  DELT_FLG = 'N'
                   -- 지점 office 검색범위 (CDO_EQ, 지역본부 OFFICE 는 아래조건을 제거함)                   
#if( ${level_cd} == '3' ) 
                   AND LCC_CD IN (
                         SELECT LCC_CD
                         FROM MDM_EQ_ORZ_CHT                         
                         WHERE SCC_CD IN (                                     
                                             SELECT SCC_CD                      
                                             FROM MDM_LOCATION                  
                                             WHERE LOC_CD IN ( SELECT LOC_CD FROM MDM_ORGANIZATION WHERE OFC_CD = @[ofc_cd] )                            
                                          )      
                      )
#end     
#if( ${condition_value} != '' ) -- RCC : ALL 일대는 쿼리 감춤
  #if(${condition_flag} == 'R')
	               AND   RCC_CD = @[condition_value]

 #elseif( ${condition_flag} == 'L' )
     #if    ( ${condition_value} == 'CNSZP' )
                   AND   ECC_CD IN ('CNCWN','CNSHU','CNYIT')
     #elseif( ${condition_value} == 'JPTYO' )
                   AND   ECC_CD IN ('JPTYO','JPYOK')
     #elseif( ${condition_value} == 'JPOSA' )
                   AND   ECC_CD IN ('JPOSA','JPUKB','JPNGO')
     #else
                   AND   LCC_CD = @[condition_value]
     #end

 #elseif( ${condition_flag} == 'E')
     #if    ( ${condition_value} == 'CNCWN' )
                   AND   SCC_CD = 'CNCWN'
     #elseif( ${condition_value} == 'KRPUS' )
                   AND   SCC_CD = 'KRPUS'
     #elseif( ${condition_value} == 'KRKAN' )
                   AND   SCC_CD = 'KRKAN'
     #else
	               AND   ECC_CD = @[condition_value]        
     #end 

 #else    --SCC
	               AND   SCC_CD = @[condition_value]    
 #end
#end
        
               ) A,
               (
                   SELECT 'IN' CODE, 'Inventory'                NAME, 1  SORT FROM DUAL UNION ALL
                   SELECT 'RI' CODE, 'Reposition In'            NAME, 2  SORT FROM DUAL UNION ALL
                   SELECT 'PI' CODE, 'Planned Repo-In'          NAME, 3  SORT FROM DUAL UNION ALL
                   SELECT 'OT' CODE, 'Other(LT/ST/OW)'          NAME, 4  SORT FROM DUAL UNION ALL
                   SELECT 'IF' CODE, 'MG Forecast'              NAME, 5  SORT FROM DUAL UNION ALL
                   SELECT 'OF' CODE, 'OP Forecast'              NAME, 6  SORT FROM DUAL UNION ALL
                   SELECT 'RO' CODE, 'Reposition Out'           NAME, 7  SORT FROM DUAL UNION ALL
                   SELECT 'IC' CODE, 'IC'                       NAME, 8  SORT FROM DUAL UNION ALL  
                   SELECT 'BA' CODE, 'Balance'                  NAME, 9  SORT FROM DUAL UNION ALL
                   SELECT 'SP' CODE, 'EQ Supply Ratio (PFMC)'   NAME, 10 SORT FROM DUAL UNION ALL
                   SELECT 'ST' CODE, 'EQ Supply Ratio (Target)' NAME, 11 SORT FROM DUAL
         
               ) B
               ORDER BY LOC_CD,SORT
           ) B
       
        WHERE A.LOC_CD(+)        = B.LOC_CD
        AND   A.WKY_SIM_TP_CD(+) = B.CODE 
           
    )

#if( ${fcast_loc_flag} == 'Y' )  -- EQR_CTRL_FCAST_LOC 에 데이터 있을 경우는 그 LOC 만 보임
, ( SELECT 'TOTAL' FLOC_LOC_CD
      FROM DUAL
    UNION ALL
    SELECT LOC_CD  FLOC_LOC_CD
      FROM EQR_CTRL_FCAST_LOC
     WHERE USR_ID = @[usr_id]
  #if( ${condition_value} != '' )       
    #if(${present_flag} == 'L')       -- L
       AND LOC_DPTH_CD = 'L'
    #elseif( ${present_flag} == 'E' ) -- E
       AND LOC_DPTH_CD = 'E'
    #elseif( ${present_flag} == 'S')  -- S
       AND LOC_DPTH_CD = 'S'
    #else                             
       AND LOC_DPTH_CD = ''
    #end
  #else
       AND LOC_DPTH_CD = 'L'          -- ALL
  #end
) FLOC
  WHERE LOC_CD = FLOC.FLOC_LOC_CD
#end

-- RCC : ALL일때 표현 (RCC : ALL)
#if ( ${condition_value} == '' && ${present_flag} == 'L')  
GROUP BY LOC_CD -- LOC CD 별 전체합
#else
GROUP BY ROLLUP(LOC_CD) -- LOC CD 별 전체합
#end
            ,LOC_GRP_CD
            ,CODE
            ,NAME
            ,SORT   
            ,P2   
            ,P1   
            ,C0   
            ,F1   
            ,F2   
            ,F3   
            ,F4   
            ,F5   
            ,F6   
            ,F7   
            ,P2_F   
            ,P1_F   
            ,C0_F   
            ,F1_F   
            ,F2_F   
            ,F3_F   
            ,F4_F   
            ,F5_F   
            ,F6_F   
            ,F7_F        
-- RCC : ALL일때 표현 (RCC : ALL)
#if ( ${condition_value} == '' && ${present_flag} == 'L')        
) A
GROUP BY ROLLUP(A.RCC_CD) -- RCC CD 별 전체합
        ,A.LOC_GRP_CD
        ,A.CODE
        ,A.NAME
        ,A.SORT
        ,A.P2   
        ,A.P1   
        ,A.C0   
        ,A.F1   
        ,A.F2   
        ,A.F3   
        ,A.F4   
        ,A.F5   
        ,A.F6   
        ,A.F7   
        ,A.P2_F   
        ,A.P1_F   
        ,A.C0_F   
        ,A.F1_F   
        ,A.F2_F   
        ,A.F3_F   
        ,A.F4_F   
        ,A.F5_F   
        ,A.F6_F   
        ,A.F7_F 

#end       
ORDER BY CASE WHEN LOC_CD = 'TOTAL' THEN 2 ELSE 1 END
        ,1
        ,SORT
)) A,

(
SELECT LOC_GRP_CD
     , LOC_CD
     , MAX(P2_D2_SPL_RTO) P2_D2_SPL_RTO
     , MAX(P2_D4_SPL_RTO) P2_D4_SPL_RTO
     , MAX(P2_D5_SPL_RTO) P2_D5_SPL_RTO
     , MAX(P2_D7_SPL_RTO) P2_D7_SPL_RTO
     , MAX(P1_D2_SPL_RTO) P1_D2_SPL_RTO
     , MAX(P1_D4_SPL_RTO) P1_D4_SPL_RTO
     , MAX(P1_D5_SPL_RTO) P1_D5_SPL_RTO
     , MAX(P1_D7_SPL_RTO) P1_D7_SPL_RTO
     , MAX(C0_D2_SPL_RTO) C0_D2_SPL_RTO
     , MAX(C0_D4_SPL_RTO) C0_D4_SPL_RTO
     , MAX(C0_D5_SPL_RTO) C0_D5_SPL_RTO
     , MAX(C0_D7_SPL_RTO) C0_D7_SPL_RTO
     , MAX(F1_D2_SPL_RTO) F1_D2_SPL_RTO
     , MAX(F1_D4_SPL_RTO) F1_D4_SPL_RTO
     , MAX(F1_D5_SPL_RTO) F1_D5_SPL_RTO
     , MAX(F1_D7_SPL_RTO) F1_D7_SPL_RTO
     , MAX(F2_D2_SPL_RTO) F2_D2_SPL_RTO
     , MAX(F2_D4_SPL_RTO) F2_D4_SPL_RTO
     , MAX(F2_D5_SPL_RTO) F2_D5_SPL_RTO
     , MAX(F2_D7_SPL_RTO) F2_D7_SPL_RTO
     , MAX(F3_D2_SPL_RTO) F3_D2_SPL_RTO
     , MAX(F3_D4_SPL_RTO) F3_D4_SPL_RTO
     , MAX(F3_D5_SPL_RTO) F3_D5_SPL_RTO
     , MAX(F3_D7_SPL_RTO) F3_D7_SPL_RTO
     , MAX(F4_D2_SPL_RTO) F4_D2_SPL_RTO
     , MAX(F4_D4_SPL_RTO) F4_D4_SPL_RTO
     , MAX(F4_D5_SPL_RTO) F4_D5_SPL_RTO
     , MAX(F4_D7_SPL_RTO) F4_D7_SPL_RTO
     , MAX(F5_D2_SPL_RTO) F5_D2_SPL_RTO
     , MAX(F5_D4_SPL_RTO) F5_D4_SPL_RTO
     , MAX(F5_D5_SPL_RTO) F5_D5_SPL_RTO
     , MAX(F5_D7_SPL_RTO) F5_D7_SPL_RTO
     , MAX(F6_D2_SPL_RTO) F6_D2_SPL_RTO
     , MAX(F6_D4_SPL_RTO) F6_D4_SPL_RTO
     , MAX(F6_D5_SPL_RTO) F6_D5_SPL_RTO
     , MAX(F6_D7_SPL_RTO) F6_D7_SPL_RTO
     , MAX(F7_D2_SPL_RTO) F7_D2_SPL_RTO
     , MAX(F7_D4_SPL_RTO) F7_D4_SPL_RTO
     , MAX(F7_D5_SPL_RTO) F7_D5_SPL_RTO
     , MAX(F7_D7_SPL_RTO) F7_D7_SPL_RTO
 FROM       
       
     ( SELECT WK
            , LOC_GRP_CD
            , LOC_CD
            , DECODE(WK,@[p2],D2_SPL_RTO,'') P2_D2_SPL_RTO
            , DECODE(WK,@[p2],D4_SPL_RTO,'') P2_D4_SPL_RTO
            , DECODE(WK,@[p2],D5_SPL_RTO,'') P2_D5_SPL_RTO
            , DECODE(WK,@[p2],D7_SPL_RTO,'') P2_D7_SPL_RTO
            , DECODE(WK,@[p1],D2_SPL_RTO,'') P1_D2_SPL_RTO
            , DECODE(WK,@[p1],D4_SPL_RTO,'') P1_D4_SPL_RTO
            , DECODE(WK,@[p1],D5_SPL_RTO,'') P1_D5_SPL_RTO
            , DECODE(WK,@[p1],D7_SPL_RTO,'') P1_D7_SPL_RTO
            , DECODE(WK,@[c0],D2_SPL_RTO,'') C0_D2_SPL_RTO
            , DECODE(WK,@[c0],D4_SPL_RTO,'') C0_D4_SPL_RTO
            , DECODE(WK,@[c0],D5_SPL_RTO,'') C0_D5_SPL_RTO
            , DECODE(WK,@[c0],D7_SPL_RTO,'') C0_D7_SPL_RTO  
            , DECODE(WK,@[f1],D2_SPL_RTO,'') F1_D2_SPL_RTO
            , DECODE(WK,@[f1],D4_SPL_RTO,'') F1_D4_SPL_RTO
            , DECODE(WK,@[f1],D5_SPL_RTO,'') F1_D5_SPL_RTO
            , DECODE(WK,@[f1],D7_SPL_RTO,'') F1_D7_SPL_RTO      
            , DECODE(WK,@[f2],D2_SPL_RTO,'') F2_D2_SPL_RTO
            , DECODE(WK,@[f2],D4_SPL_RTO,'') F2_D4_SPL_RTO
            , DECODE(WK,@[f2],D5_SPL_RTO,'') F2_D5_SPL_RTO
            , DECODE(WK,@[f2],D7_SPL_RTO,'') F2_D7_SPL_RTO     
            , DECODE(WK,@[f3],D2_SPL_RTO,'') F3_D2_SPL_RTO
            , DECODE(WK,@[f3],D4_SPL_RTO,'') F3_D4_SPL_RTO
            , DECODE(WK,@[f3],D5_SPL_RTO,'') F3_D5_SPL_RTO
            , DECODE(WK,@[f3],D7_SPL_RTO,'') F3_D7_SPL_RTO
            , DECODE(WK,@[f4],D2_SPL_RTO,'') F4_D2_SPL_RTO
            , DECODE(WK,@[f4],D4_SPL_RTO,'') F4_D4_SPL_RTO
            , DECODE(WK,@[f4],D5_SPL_RTO,'') F4_D5_SPL_RTO
            , DECODE(WK,@[f4],D7_SPL_RTO,'') F4_D7_SPL_RTO
            , DECODE(WK,@[f5],D2_SPL_RTO,'') F5_D2_SPL_RTO
            , DECODE(WK,@[f5],D4_SPL_RTO,'') F5_D4_SPL_RTO
            , DECODE(WK,@[f5],D5_SPL_RTO,'') F5_D5_SPL_RTO
            , DECODE(WK,@[f5],D7_SPL_RTO,'') F5_D7_SPL_RTO
            , DECODE(WK,@[f6],D2_SPL_RTO,'') F6_D2_SPL_RTO
            , DECODE(WK,@[f6],D4_SPL_RTO,'') F6_D4_SPL_RTO
            , DECODE(WK,@[f6],D5_SPL_RTO,'') F6_D5_SPL_RTO
            , DECODE(WK,@[f6],D7_SPL_RTO,'') F6_D7_SPL_RTO
            , DECODE(WK,@[f7],D2_SPL_RTO,'') F7_D2_SPL_RTO
            , DECODE(WK,@[f7],D4_SPL_RTO,'') F7_D4_SPL_RTO
            , DECODE(WK,@[f7],D5_SPL_RTO,'') F7_D5_SPL_RTO
            , DECODE(WK,@[f7],D7_SPL_RTO,'') F7_D7_SPL_RTO
         FROM
            ( SELECT B.PLN_YR||B.PLN_WK WK
                   , A.LOC_GRP_CD
                   , A.LOC_CD
                   , D2_SPL_RTO
                   , D4_SPL_RTO
                   , D5_SPL_RTO
                   , D7_SPL_RTO
                FROM EQR_CTRL_SPL_RTO A
                   , EQR_WK_PRD B
               WHERE B.PLN_YR||B.PLN_WK BETWEEN A.FM_YRWK AND A.TO_YRWK
                 AND A.SPL_RTO_SEQ = (SELECT MAX(SPL_RTO_SEQ) FROM EQR_CTRL_SPL_RTO) -- 최대 SPL_RTO_SEQ 를 사용
             ) 
        WHERE WK BETWEEN @[p2] AND @[f7] -- WEEK  일때
      ) 
GROUP BY LOC_GRP_CD, LOC_CD
) RTO



WHERE SUBSTR(A.LOC_CD,1,5) = RTO.LOC_CD(+)
  AND SUBSTR(A.LOC_CD,7,1) = RTO.LOC_GRP_CD(+)

ORDER BY CASE WHEN LOC_CD = 'TOTAL' THEN 2 ELSE 1 END
        ,1
        ,SORT			]]></sql>
			<params>
				<param name="usr_id" type="12" value="" out="N"/>
				<param name="condition_value" type="12" value="" out="N"/>
				<param name="ofc_cd" type="12" value="" out="N"/>
				<param name="ori_loc_cd" type="12" value="" out="N"/>
				<param name="ori_ori_loc_cd" type="12" value="" out="N"/>
				<param name="p2" type="12" value="" out="N"/>
				<param name="p1" type="12" value="" out="N"/>
				<param name="c0" type="12" value="" out="N"/>
				<param name="f1" type="12" value="" out="N"/>
				<param name="f2" type="12" value="" out="N"/>
				<param name="f3" type="12" value="" out="N"/>
				<param name="f4" type="12" value="" out="N"/>
				<param name="f5" type="12" value="" out="N"/>
				<param name="f6" type="12" value="" out="N"/>
				<param name="f7" type="12" value="" out="N"/>
				<param name="p2_f" type="12" value="" out="N"/>
				<param name="p1_f" type="12" value="" out="N"/>
				<param name="c0_f" type="12" value="" out="N"/>
				<param name="f1_f" type="12" value="" out="N"/>
				<param name="f2_f" type="12" value="" out="N"/>
				<param name="f3_f" type="12" value="" out="N"/>
				<param name="f4_f" type="12" value="" out="N"/>
				<param name="f5_f" type="12" value="" out="N"/>
				<param name="f6_f" type="12" value="" out="N"/>
				<param name="f7_f" type="12" value="" out="N"/>
				<param name="present_flag" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
