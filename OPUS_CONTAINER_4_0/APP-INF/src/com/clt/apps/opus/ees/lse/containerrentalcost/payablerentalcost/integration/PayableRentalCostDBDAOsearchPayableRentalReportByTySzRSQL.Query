<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="PayableRentalCostDBDAOsearchPayableRentalReportByTySzRSQL">
			<desc><![CDATA[Payable Invoice 한 결과에 대하여 TP/SZ & Month 별로 실적을 조회
Grouping 되는 항목의 Order by 구문 수정
total 부분의 avaerage 로직 에러 수정(==> total amout / total vol)]]></desc>
			<sql><![CDATA[
WITH PARAM AS (
    SELECT 
            @[report_type]  AS REPORT_TYPE,
            @[period_stdt]  AS PERIOD_STDT,
            @[period_eddt]  AS PERIOD_EDDT,
            @[period_year]  AS PERIOD_YEAR,
            @[status]       AS STATUS,
            @[payable]      AS PAYABLE,
            @[agmt_cty_cd]  AS AGMT_CTY_CD,
            @[agmt_seq]     AS AGMT_SEQ,
            @[vndr_seq]     AS VNDR_SEQ,
            @[loc_tp]       AS LOC_TP,
            @[loc_cd]       AS LOC_CD
            
    FROM    DUAL
), 
XXX AS (
         SELECT
                CNTR_TPSZ_CD ,  
                DECODE( DIV  , 1 ,'VOL' , 2 , 'AMT' , 3 , 'AVG' ) DIV ,
				CURR_CD ,
                SUM(DECODE(COST_YRMON, '01', FF, 0))  JAN,
                SUM(DECODE(COST_YRMON, '02', FF, 0))  FEB,
                SUM(DECODE(COST_YRMON, '03', FF, 0))  MAR,  
                CASE WHEN DIV = 3 THEN
                DECODE(SUM(SUM(DECODE(COST_YRMON, '01', FF, 0))+ 
                           SUM(DECODE(COST_YRMON, '02', FF, 0))+ 
                           SUM(DECODE(COST_YRMON, '03', FF, 0)))     OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
                          ROUND(
                           SUM(SUM(DECODE(COST_YRMON, '01', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '02', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '03', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                           SUM(SUM(DECODE(COST_YRMON, '01', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '02', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '03', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 2))
                ELSE
                (SUM(DECODE(COST_YRMON, '01', FF, 0))+ 
                 SUM(DECODE(COST_YRMON, '02', FF, 0))+ 
                 SUM(DECODE(COST_YRMON, '03', FF, 0)))
                END                                   TTL_1, 
                SUM(DECODE(COST_YRMON, '04', FF, 0))  APR,
                SUM(DECODE(COST_YRMON, '05', FF, 0))  MAY,
                SUM(DECODE(COST_YRMON, '06', FF, 0))  JUN,
                CASE WHEN DIV = 3 THEN
                DECODE(SUM(SUM(DECODE(COST_YRMON, '04', FF, 0))+ 
                           SUM(DECODE(COST_YRMON, '05', FF, 0))+ 
                           SUM(DECODE(COST_YRMON, '06', FF, 0)))     OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
                          ROUND(
                           SUM(SUM(DECODE(COST_YRMON, '04', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '05', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '06', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                           SUM(SUM(DECODE(COST_YRMON, '04', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '05', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '06', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 2))
                ELSE
                (SUM(DECODE(COST_YRMON, '04', FF, 0))+ 
                 SUM(DECODE(COST_YRMON, '05', FF, 0))+ 
                 SUM(DECODE(COST_YRMON, '06', FF, 0)))
                END                                   TTL_2,  
                SUM(DECODE(COST_YRMON, '07', FF, 0))  JUL,
                SUM(DECODE(COST_YRMON, '08', FF, 0))  AUG,
                SUM(DECODE(COST_YRMON, '09', FF, 0))  SEP,
                CASE WHEN DIV = 3 THEN
                DECODE(SUM(SUM(DECODE(COST_YRMON, '07', FF, 0))+ 
                           SUM(DECODE(COST_YRMON, '08', FF, 0))+ 
                           SUM(DECODE(COST_YRMON, '09', FF, 0)))     OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
                          ROUND(
                           SUM(SUM(DECODE(COST_YRMON, '07', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '08', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '09', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                           SUM(SUM(DECODE(COST_YRMON, '07', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '08', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '09', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 2))
                ELSE
                (SUM(DECODE(COST_YRMON, '07', FF, 0))+ 
                 SUM(DECODE(COST_YRMON, '08', FF, 0))+ 
                 SUM(DECODE(COST_YRMON, '09', FF, 0)))
                END                                   TTL_3, 
                SUM(DECODE(COST_YRMON, '10', FF, 0))  OCT,
                SUM(DECODE(COST_YRMON, '11', FF, 0))  NOV,
                SUM(DECODE(COST_YRMON, '12', FF, 0))  DEC,
                CASE WHEN DIV = 3 THEN
                DECODE(SUM(SUM(DECODE(COST_YRMON, '10', FF, 0))+ 
                           SUM(DECODE(COST_YRMON, '11', FF, 0))+ 
                           SUM(DECODE(COST_YRMON, '12', FF, 0)))     OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
                          ROUND(
                           SUM(SUM(DECODE(COST_YRMON, '10', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '11', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '12', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                           SUM(SUM(DECODE(COST_YRMON, '10', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '11', FF, 0))+ 
                               SUM(DECODE(COST_YRMON, '12', FF, 0))) OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 2))
                ELSE
                (SUM(DECODE(COST_YRMON, '10', FF, 0))+ 
                 SUM(DECODE(COST_YRMON, '11', FF, 0))+ 
                 SUM(DECODE(COST_YRMON, '12', FF, 0)))
                END                                    TTL_4,
               CASE WHEN DIV = 3 THEN
                  DECODE(SUM(SUM(DECODE(COST_YRMON, '01', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '02', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '03', FF, 0))+
                    SUM(DECODE(COST_YRMON, '04', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '05', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '06', FF, 0))+
                    SUM(DECODE(COST_YRMON, '07', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '08', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '09', FF, 0))+
                    SUM(DECODE(COST_YRMON, '10', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '11', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '12', FF, 0)))
                    OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 0, 0,
                  ROUND(
                   SUM(SUM(DECODE(COST_YRMON, '01', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '02', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '03', FF, 0))+
                    SUM(DECODE(COST_YRMON, '04', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '05', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '06', FF, 0))+
                    SUM(DECODE(COST_YRMON, '07', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '08', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '09', FF, 0))+
                    SUM(DECODE(COST_YRMON, '10', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '11', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '12', FF, 0)))
                    OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 1 PRECEDING AND 1 PRECEDING) /
                    SUM(SUM(DECODE(COST_YRMON, '01', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '02', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '03', FF, 0))+
                    SUM(DECODE(COST_YRMON, '04', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '05', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '06', FF, 0))+
                    SUM(DECODE(COST_YRMON, '07', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '08', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '09', FF, 0))+
                    SUM(DECODE(COST_YRMON, '10', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '11', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '12', FF, 0)))
                    OVER (PARTITION BY CNTR_TPSZ_CD,CURR_CD ORDER BY CNTR_TPSZ_CD, DIV ROWS BETWEEN 2 PRECEDING AND 2 PRECEDING), 2))
               ELSE
                   (SUM(DECODE(COST_YRMON, '01', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '02', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '03', FF, 0))+
                    SUM(DECODE(COST_YRMON, '04', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '05', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '06', FF, 0))+
                    SUM(DECODE(COST_YRMON, '07', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '08', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '09', FF, 0))+
                    SUM(DECODE(COST_YRMON, '10', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '11', FF, 0))+ 
                    SUM(DECODE(COST_YRMON, '12', FF, 0)))
                END G_TTL ,
                DIV DIV_SEQ
FROM( 
SELECT
         V1.CNTR_TPSZ_CD,
		 V1.CURR_CD,
         V1.COST_YRMON ,
         V2.DIV_SEQ DIV,
         CASE V2.DIV_SEQ
              WHEN 1 THEN NVL(V1.F1,0)
              WHEN 2 THEN NVL(V1.F2,0)
              WHEN 3 THEN NVL(V1.F3,0) 
              WHEN 4 THEN NVL(V1.F1,0) + NVL(V1.F2,0) + NVL(V1.F3,0) 
         END AS FF
FROM( 
                             SELECT CNTR_TPSZ_CD,
                                    LTMP.CURR_CD,
                                    SUBSTR(CHG_COST_YRMON, 5, 2) AS COST_YRMON,              
                                    COUNT(DISTINCT CNTR_NO) F1,
                                    SUM(DECODE(P.PAYABLE, 'S', LTC.DSCR_COST_AMT+LTC.CR_AMT, LTC.TTL_COST_AMT+LTC.CR_AMT)) F2,
                                    ROUND( (SUM(DECODE(P.PAYABLE, 'S', LTC.DSCR_COST_AMT+LTC.CR_AMT, LTC.TTL_COST_AMT+LTC.CR_AMT)) / COUNT(DISTINCT CNTR_NO)) * 100 ) / 100 F3
                             FROM   LSE_PAY_RNTL_CHG_DTL LTC
                                  , LSE_PAY_RNTL_CHG LTMP
                                  , PARAM P
                             WHERE  1=1
#if(${search_tp} == 'Cost')
					AND LTMP.CHG_COST_YRMON BETWEEN  P.PERIOD_STDT AND P.PERIOD_EDDT
#elseif(${search_tp} == 'Revenue')
			        AND  LTMP.INV_NO     IN (SELECT API.INV_NO FROM AP_PAY_INV API  WHERE 1=1
        			AND  API.INV_SUB_SYS_CD = 'LSE'
        			AND  LTMP.IF_RGST_NO  = DECODE(LTMP.IF_RGST_NO, NULL, NULL, API.INV_RGST_NO)
					AND TO_CHAR(API.INV_EFF_DT,'YYYYMM') BETWEEN P.PERIOD_STDT AND P.PERIOD_EDDT)
#elseif(${search_tp} == 'Payment')
					AND  LTMP.INV_NO     IN (SELECT   API.INV_NO FROM AP_PAY_INV  API WHERE 1=1 
        			AND  API.INV_SUB_SYS_CD = 'LSE'
        			AND  API.INV_STS_CD = 'D'
        			AND TO_CHAR(API.UPD_DT,'YYYYMM') BETWEEN P.PERIOD_STDT AND P.PERIOD_EDDT)
#end
                               AND  LTMP.LSE_PAY_RNTL_STS_CD = DECODE(P.PAYABLE, 'S', 'I', LTMP.LSE_PAY_RNTL_STS_CD)
#if (${vndr_seq} != '')
                               AND  LTMP.VNDR_SEQ = P.VNDR_SEQ
#end
#if (${lstm_cd_str} != '')
                               AND  LTMP.LSTM_CD IN (
       #foreach($key IN ${lstm_cd})
         #if($velocityCount < $lstm_cd.size())
                                                     '$key',
         #else
                                                     '$key'
         #end
      #end
                                                    )
#end
#if (${agmt_seq} != '' )
                               AND  LTMP.AGMT_CTY_CD  = P.AGMT_CTY_CD
                               AND  LTMP.AGMT_SEQ     = P.AGMT_SEQ
#end
                               AND  LTMP.CHG_SEQ     = LTC.CHG_SEQ
                               AND  LTMP.AGMT_CTY_CD = LTC.AGMT_CTY_CD
                               AND  LTMP.AGMT_SEQ    = LTC.AGMT_SEQ
#if (${payable} == 'S')
                               AND  NVL(LTC.CNTR_AUD_STS_CD, 'A') = 'A' -- Invoice Amount ( P.PAYABLE = 'S' )
#end
#if (${cntr_tpsz_cd_str} != '')
                               AND  LTC.CNTR_TPSZ_CD IN (
	        #foreach($key IN ${cntr_tpsz_cd})
		        #if($velocityCount < $cntr_tpsz_cd.size())
			                                                   '$key',
		        #else
			                                                   '$key'
		        #end
	        #end
				                                                )
#end
#if (${loc_cd} != '')
   #if (${loc_tp} == 'R')
                               AND  LTC.ONH_LOC_CD IN (SELECT RCC_CD FROM MDM_EQ_ORZ_CHT WHERE RCC_CD = P.LOC_CD)
   #elseif (${loc_tp} == 'L')
                               AND  LTC.ONH_LOC_CD IN (SELECT LCC_CD FROM MDM_EQ_ORZ_CHT WHERE LCC_CD = P.LOC_CD)
   #elseif (${loc_tp} == 'S')
                               AND  LTC.ONH_LOC_CD IN (SELECT SCC_CD FROM MDM_EQ_ORZ_CHT WHERE SCC_CD = P.LOC_CD)
   #elseif (${loc_tp} == 'C')
                               AND  SUBSTR(LTC.ONH_LOC_CD, 0 , 2 ) = P.LOC_CD
   #end
#end
#if (${charge_type_cd_str} != '')
                               AND  LTC.LSE_PAY_CHG_TP_CD IN (
      #foreach($key IN ${charge_type_cd})
        #if($velocityCount < $charge_type_cd.size())
                                                              '$key',
        #else
                                                              '$key'
        #end
      #end
                                                             )
#end
#if (${lse_pay_tp_cd} != 'ALL')
                              AND EXISTS (SELECT 'X'
                                            FROM LSE_AGREEMENT LA
                                           WHERE LTMP.AGMT_CTY_CD = LA.AGMT_CTY_CD
                                             AND LTMP.AGMT_SEQ    = LA.AGMT_SEQ
                                             AND LA.LSE_PAY_TP_CD = @[lse_pay_tp_cd]
                                             AND ROWNUM           = 1)
#end
                             GROUP BY CNTR_TPSZ_CD, SUBSTR(CHG_COST_YRMON, 5, 2), LTMP.CURR_CD
                             UNION ALL
                             SELECT LTC.CNTR_TPSZ_CD,
                                    LTC.CURR_CD,
                                    SUBSTR(LTC.SKD_VOY_NO, 3, 2) AS COST_YRMON,              
                                    SUM(LTC.OP_LSE_QTY) F1,
                                    SUM(LTC.PAY_AMT) F2,
                                    DECODE(SIGN(SUM(LTC.OP_LSE_QTY)), 1, ROUND((SUM(LTC.PAY_AMT) / SUM(LTC.OP_LSE_QTY)) * 100 ) / 100) F3
                             FROM   LSE_OP_LSE LTC
                                  , LSE_AGREEMENT LTMP
                                  , PARAM P
                             WHERE  1=1
#if(${search_tp} == 'Cost')
					AND LTC.SKD_VOY_NO BETWEEN SUBSTR(P.PERIOD_STDT, 3, 4) AND SUBSTR(P.PERIOD_EDDT, 3, 4)
#elseif(${search_tp} == 'Revenue')
					AND  LTC.INV_NO     IN (SELECT   API.INV_NO FROM AP_PAY_INV  API WHERE 1=1 
        			AND  API.INV_SUB_SYS_CD = 'LSE'
        			AND  LTC.IF_RGST_NO  = DECODE(LTC.IF_RGST_NO, NULL, NULL, API.INV_RGST_NO)
					AND TO_CHAR(API.INV_EFF_DT,'YYYYMM') BETWEEN P.PERIOD_STDT AND P.PERIOD_EDDT)
#elseif(${search_tp} == 'Payment')
					AND  LTC.INV_NO     IN (SELECT   API.INV_NO FROM AP_PAY_INV  API WHERE 1=1 
        			AND  API.INV_SUB_SYS_CD = 'LSE'
        			AND  API.INV_STS_CD = 'D'
        			AND TO_CHAR(API.UPD_DT,'YYYYMM') BETWEEN P.PERIOD_STDT AND P.PERIOD_EDDT)
#end

                               AND  P.PAYABLE   = 'S'
#if (${vndr_seq} != '')
                               AND  LTMP.VNDR_SEQ = P.VNDR_SEQ
#end
#if (${lstm_cd_str} != '')
                               AND  LTMP.LSTM_CD IN (
       #foreach($key IN ${lstm_cd})
         #if($velocityCount < $lstm_cd.size())
                                                     '$key',
         #else
                                                     '$key'
         #end
      #end
                                                    )
#end
#if (${agmt_seq} != '' )
                               AND  LTC.AGMT_CTY_CD  = P.AGMT_CTY_CD
                               AND  LTC.AGMT_SEQ     = P.AGMT_SEQ
#end
                               AND  LTMP.AGMT_CTY_CD = LTC.AGMT_CTY_CD
                               AND  LTMP.AGMT_SEQ    = LTC.AGMT_SEQ
#if (${cntr_tpsz_cd_str} != '')
                               AND  LTC.CNTR_TPSZ_CD IN (
	        #foreach($key IN ${cntr_tpsz_cd})
		        #if($velocityCount < $cntr_tpsz_cd.size())
			                                                   '$key',
		        #else
			                                                   '$key'
		        #end
	        #end
				                                                )
#end
#if (${loc_cd} != '')
             AND 'A' = 'B'
#end
#if (${charge_type_cd_str} != '')
             AND  'OPL' IN (
      #foreach($key IN ${charge_type_cd})
        #if($velocityCount < $charge_type_cd.size())
                                                              '$key',
        #else
                                                              '$key'
        #end
      #end
                                                             )
#end
#if (${lse_pay_tp_cd} != 'ALL')
            AND EXISTS (SELECT 'X'
                          FROM LSE_AGREEMENT LA
                         WHERE LTC.AGMT_CTY_CD = LA.AGMT_CTY_CD
                           AND LTC.AGMT_SEQ    = LA.AGMT_SEQ
                           AND LA.LSE_PAY_TP_CD = @[lse_pay_tp_cd]
                           AND ROWNUM           = 1)
#end
            GROUP BY LTC.CNTR_TPSZ_CD, SUBSTR(LTC.SKD_VOY_NO, 3, 2), LTC.CURR_CD) V1,
           ( SELECT 1 AS DIV_SEQ FROM DUAL
             UNION
             SELECT 2 AS DIV_SEQ FROM DUAL
             UNION
             SELECT 3 AS DIV_SEQ FROM DUAL ) V2 )
GROUP BY CNTR_TPSZ_CD ,  DIV, CURR_CD   
ORDER BY  CNTR_TPSZ_CD , DIV_SEQ )

SELECT
  CNTR_TPSZ_CD ,
  DIV,
  DECODE( DIV  ,'VOL' , 1  , 'AMT' , 2  , 'AVG', 3  ) DIV_ORDER,
  CURR_CD,
  JAN,
  FEB,
  MAR,
  TTL_1,
  APR,
  MAY,
  JUN,
  TTL_2,
  JUL,
  AUG,
  SEP,
  TTL_3,
  OCT,
  NOV,
  DEC,
  TTL_4,
  G_TTL
FROM (SELECT 
         XXX.CNTR_TPSZ_CD ,
         XXX.DIV,
		 XXX.CURR_CD,
         XXX.JAN,
         XXX.FEB,
         XXX.MAR,
         XXX.TTL_1,
         XXX.APR,
         XXX.MAY,
         XXX.JUN,
         XXX.TTL_2,
         XXX.JUL,
         XXX.AUG,
         XXX.SEP,
         XXX.TTL_3,
         XXX.OCT,
         XXX.NOV,
         XXX.DEC,
         XXX.TTL_4,
         XXX.G_TTL,
         TTT.RPT_DP_SEQ
FROM XXX , (SELECT CNTR_TPSZ_CD,
                      CNTR_SZ_CD,
                      CNTR_TP_CD,
                      CNTR_TPSZ_DESC,
                      CNTR_TPSZ_RMK,
                      CNTR_TPSZ_ISO_CD,
                      CNTR_TPSZ_GRP_CD,
                      RPT_DP_SEQ
                   FROM MDM_CNTR_TP_SZ
                   WHERE DELT_FLG='N'
                   AND ACIAC_DIV_CD='A'
                   ORDER BY RPT_DP_SEQ) TTT
WHERE  XXX.CNTR_TPSZ_CD = TTT.CNTR_TPSZ_CD(+)
ORDER BY  TTT.RPT_DP_SEQ ,XXX.CNTR_TPSZ_CD, XXX.CURR_CD, XXX.DIV_SEQ )
UNION ALL
SELECT   
   CNTR_TPSZ_CD ,
   DIV,
   DECODE( DIV  ,'VOL' , 1  , 'AMT' , 2  , 'AVG', 3  ) DIV_ORDER,
   CURR_CD,
   JAN,   
   FEB,   
   MAR,   
   TTL_1, 
   APR,   
   MAY,   
   JUN,   
   TTL_2, 
   JUL,   
   AUG,   
   SEP,   
   TTL_3, 
   OCT,   
   NOV,   
   DEC,   
   TTL_4, 
   G_TTL   
FROM
(
SELECT   
   CNTR_TPSZ_CD ,
   DIV,
   DIV_ORDER,
   CURR_CD,
   JAN,   
   FEB,   
   MAR,   
   TTL_1, 
   APR,   
   MAY,   
   JUN,   
   TTL_2, 
   JUL,   
   AUG,   
   SEP,   
   TTL_3, 
   OCT,   
   NOV,   
   DEC,   
   TTL_4, 
   G_TTL   
FROM
(SELECT
 DIV_SEQ,
 'G.TTL' CNTR_TPSZ_CD ,
 DIV,
 DECODE( DIV  ,'VOL' , 1  , 'AMT' , 2  ) DIV_ORDER,
 CURR_CD,
 SUM(JAN) JAN,
 SUM(FEB) FEB,
 SUM(MAR) MAR,
 SUM(TTL_1) TTL_1,
 SUM(APR) APR,
 SUM(MAY) MAY,
 SUM(JUN) JUN,
 SUM(TTL_2) TTL_2,
 SUM(JUL) JUL,
 SUM(AUG) AUG,
 SUM(SEP) SEP,
 SUM(TTL_3) TTL_3,
 SUM(OCT) OCT,
 SUM(NOV) NOV,
 SUM(DEC) DEC,
 SUM(TTL_4) TTL_4,
 SUM(G_TTL) G_TTL
FROM XXX
WHERE DIV_SEQ <> 3
GROUP BY DIV , DIV_SEQ, CURR_CD
ORDER BY DIV_SEQ)
UNION ALL
SELECT
   'G.TTL' CNTR_TPSZ_CD,
   'AVG' DIV ,  
   3 DIV_ORDER,
   A.CURR_CD , 
   CASE WHEN A.JAN      > 0 AND V.JAN   > 0 THEN ROUND((A.JAN   / V.JAN     ) * 100 ) / 100  ELSE 0 END JAN ,                                                                                               
   CASE WHEN A.FEB      > 0 AND V.FEB   > 0 THEN ROUND((A.FEB   / V.FEB     ) * 100 ) / 100  ELSE 0 END FEB ,   
   CASE WHEN A.MAR      > 0 AND V.MAR   > 0 THEN ROUND((A.MAR   / V.MAR     ) * 100 ) / 100  ELSE 0 END MAR ,   
   CASE WHEN A.TTL_1    > 0 AND V.TTL_1 > 0 THEN ROUND((A.TTL_1 / V.TTL_1   ) * 100 ) / 100  ELSE 0 END TTL_1 ,   
   CASE WHEN A.APR      > 0 AND V.APR   > 0 THEN ROUND((A.APR   / V.APR     ) * 100 ) / 100  ELSE 0 END APR ,   
   CASE WHEN A.MAY      > 0 AND V.MAY   > 0 THEN ROUND((A.MAY   / V.MAY     ) * 100 ) / 100  ELSE 0 END MAY ,   
   CASE WHEN A.JUN      > 0 AND V.JUN   > 0 THEN ROUND((A.JUN   / V.JUN     ) * 100 ) / 100  ELSE 0 END JUN ,     
   CASE WHEN A.TTL_2    > 0 AND V.TTL_2 > 0 THEN ROUND((A.TTL_2 / V.TTL_2   ) * 100 ) / 100  ELSE 0 END TTL_2 ,   
   CASE WHEN A.JUL      > 0 AND V.JUL   > 0 THEN ROUND((A.JUL   / V.JUL     ) * 100 ) / 100  ELSE 0 END JUL ,   
   CASE WHEN A.AUG      > 0 AND V.AUG   > 0 THEN ROUND((A.AUG   / V.AUG     ) * 100 ) / 100  ELSE 0 END AUG ,   
   CASE WHEN A.SEP      > 0 AND V.SEP   > 0 THEN ROUND((A.SEP   / V.SEP     ) * 100 ) / 100  ELSE 0 END SEP ,   
   CASE WHEN A.TTL_3    > 0 AND V.TTL_3 > 0 THEN ROUND((A.TTL_3 / V.TTL_3   ) * 100 ) / 100  ELSE 0 END TTL_3 ,   
   CASE WHEN A.OCT      > 0 AND V.OCT   > 0 THEN ROUND((A.OCT   / V.OCT     ) * 100 ) / 100  ELSE 0 END OCT ,   
   CASE WHEN A.NOV      > 0 AND V.NOV   > 0 THEN ROUND((A.NOV   / V.NOV     ) * 100 ) / 100  ELSE 0 END NOV ,   
   CASE WHEN A.DEC      > 0 AND V.DEC   > 0 THEN ROUND((A.DEC   / V.DEC     ) * 100 ) / 100  ELSE 0 END DEC ,
   CASE WHEN A.TTL_4    > 0 AND V.TTL_4 > 0 THEN ROUND((A.TTL_4 / V.TTL_4   ) * 100 ) / 100  ELSE 0 END TTL_4 ,                                                                                               
   CASE WHEN A.G_TTL    > 0 AND V.G_TTL > 0 THEN ROUND((A.G_TTL / V.G_TTL   ) * 100 ) / 100  ELSE 0 END G_TTL 
FROM ( SELECT           
           'G.TTL' CNTR_TPSZ_CD ,    
       	   CURR_CD ,   
           SUM(JAN) JAN ,   
           SUM(FEB) FEB ,   
           SUM(MAR) MAR ,   
           SUM(TTL_1) TTL_1 , 
           SUM(APR) APR ,   
           SUM(MAY) MAY ,   
           SUM(JUN) JUN ,   
           SUM(TTL_2) TTL_2 , 
           SUM(JUL) JUL ,   
           SUM(AUG) AUG ,   
           SUM(SEP) SEP ,   
           SUM(TTL_3) TTL_3 , 
           SUM(OCT) OCT ,   
           SUM(NOV) NOV ,   
           SUM(DEC) DEC ,   
           SUM(TTL_4) TTL_4 , 
           SUM(G_TTL) G_TTL 
       FROM XXX 
       WHERE DIV = 'VOL'
       GROUP BY CURR_CD) V , 
     ( SELECT           
           'G.TTL' CNTR_TPSZ_CD ,   
           CURR_CD ,        
           SUM(JAN) JAN ,   
           SUM(FEB) FEB ,   
           SUM(MAR) MAR ,   
           SUM(TTL_1) TTL_1 , 
           SUM(APR) APR ,   
           SUM(MAY) MAY ,   
           SUM(JUN) JUN ,   
           SUM(TTL_2) TTL_2 , 
           SUM(JUL) JUL ,   
           SUM(AUG) AUG ,   
           SUM(SEP) SEP ,   
           SUM(TTL_3) TTL_3 , 
           SUM(OCT) OCT ,   
           SUM(NOV) NOV ,   
           SUM(DEC) DEC ,   
           SUM(TTL_4) TTL_4 , 
           SUM(G_TTL) G_TTL 
       FROM XXX 
       WHERE DIV = 'AMT'
GROUP BY CURR_CD) A 
WHERE  V.CNTR_TPSZ_CD = A.CNTR_TPSZ_CD
AND V.CURR_CD=A.CURR_CD    
ORDER BY CURR_CD , DIV_ORDER, DIV DESC
)			]]></sql>
			<params>
				<param name="report_type" type="12" value="" out="N"/>
				<param name="period_stdt" type="12" value="" out="N"/>
				<param name="period_eddt" type="12" value="" out="N"/>
				<param name="period_year" type="12" value="" out="N"/>
				<param name="status" type="12" value="" out="N"/>
				<param name="payable" type="12" value="" out="N"/>
				<param name="agmt_cty_cd" type="12" value="" out="N"/>
				<param name="agmt_seq" type="12" value="" out="N"/>
				<param name="vndr_seq" type="12" value="" out="N"/>
				<param name="loc_tp" type="12" value="" out="N"/>
				<param name="loc_cd" type="12" value="" out="N"/>
				<param name="lse_pay_tp_cd" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
