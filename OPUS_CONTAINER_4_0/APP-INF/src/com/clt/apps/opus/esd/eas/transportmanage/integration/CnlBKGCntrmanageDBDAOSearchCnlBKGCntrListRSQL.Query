<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="CnlBKGCntrmanageDBDAOSearchCnlBKGCntrListRSQL">
			<desc><![CDATA[searchCnlBKGCntrList SELECT]]></desc>
			<sql><![CDATA[
SELECT 
TRSO.BKG_NO,
NVL(TRSO.BL_NO,'-') BL_NO,
NVL(TRO.por_cd,TRSO.por_cd) por_cd,
NVL(TRO.pol_cd,TRSO.pol_cd) pol_cd,
NVL(TRO.pod_cd,TRSO.pod_cd) pod_cd,
NVL(TRO.del_cd,TRSO.del_cd) del_cd,
NVL(AR_INV.sc_no,'-') SC_NO,
NVL(AR_INV.rfa_no,'-') RFA_NO,
NVL(TRO.CNTR_NO,'-') CNTR_NO,
TRO.CNTR_QTY CNTR_QTY,
NVL(TRO.IO_BND_CD,TRSO.TRSP_BND_CD) BND,
NVL(TRO.DE_TERM_CD,'-') term,
NVL(TRO.TRO_OFC,'-') TRO_OFC,
NVL(TRO.LOC_CD,'-') TRO_LOC,
TRSO.QTY tro_qty,
TRO.tro_rev tro_amt,
TRSO.inv_amt exp_inv,
case when AR_INV.ar_rev < 0 then 0 else AR_INV.ar_rev end ar_rev,
case when AR_INV.ar_rev < 0 then 0 - TRSO.inv_amt else AR_INV.ar_rev - TRSO.inv_amt end rev_exp,
AR_INV.CLT_OFC_CD cct_ofc,
TRSO.ex_rate,
TRO.TRO_ID,
TRSO.SO_OFC,
TRSO.SO_ID,
AR_INV.AR_OFC_CD rating_ofc,
AR_INV.rating_id,
NVL(TRO.bkg_sts_cd,TRSO.bkg_sts_cd) sts,
TRO.EUR_TRNS_TP_CD trm_type,
DECODE((SELECT 'Y' FROM TRS_EXPN_AUD_RMK RMK WHERE RMK.BKG_NO = TRSO.BKG_NO AND RMK.EAS_EXPN_TP_CD = 'CA' AND RMK.RMK_CTNT_SEQ = 1),'Y','Yes','No') rmk_ctnt
FROM 
/********* SO 부분 ************/
(SELECT
BK.TO_BKG_NO BKG_NO, SO.BL_NO, NVL(SO.TRSP_BND_CD,'X') TRSP_BND_CD,  
SUM(DECODE(SO.TRSP_SO_TP_CD,'Y',1,0)) QTY,
MAX(SO.CRE_OFC_CD) SO_OFC,
MAX(SO.CRE_USR_ID) SO_ID,
MAX(a.usd_locl_xch_rt) ex_rate,
MAX(BK.bkg_sts_cd) bkg_sts_cd,
MAX(BK.por_cd) por_cd,
MAX(BK.pol_cd) pol_cd,
MAX(BK.pod_cd) pod_cd,
MAX(BK.del_cd) del_cd,
MAX(BK.DE_TERM_CD) DE_TERM_CD,
round(SUM(trs_common_pkg.GET_CONVERSION_EUR_AMT_FNC( 'USD', round( (SO.inv_bzc_amt + SO.inv_etc_add_amt)/ a.usd_locl_xch_rt , 2), to_char(SO.cre_dt, 'YYYYMM' ) )), 2) INV_AMT
FROM TRS_TRSP_SVC_ORD SO,gl_mon_xch_rt a, BKG_BOOKING BK
WHERE 1=1
#if( ${str_bkgno} != '' )
AND BK.BKG_NO = @[str_bkgno]
#end
#if( ${str_blno} != '' )
AND BK.BL_NO  = @[str_blno]
#end
AND BK.TO_BKG_NO = SO.BKG_NO(+)
AND NVL(SO.trsp_cost_dtl_mod_cd,'DR') IN('DR','CY')
AND NVL(SO.DELT_FLG,'N') = 'N'
and a.acct_xch_rt_lvl = 1  --- SO 환율 적용
and a.curr_cd = NVL(SO.inv_curr_cd,'EUR')
and a.acct_xch_rt_yrmon = to_char(NVL(SO.cre_dt,SYSDATE), 'YYYYMM' )
GROUP BY BK.TO_BKG_NO, SO.BL_NO, SO.TRSP_BND_CD
) TRSO,
/********* TRO 부분 ************/
(SELECT  
BKG.TO_BKG_NO BKG_NO, NVL(TRO.IO_BND_CD,'X') IO_BND_CD,
1 CNTR_QTY,
-- case when tro.cntr_no is null then 'N/A' else tro.cntr_no end cntr_no,
(SELECT EQ_NO FROM TRS_TRSP_SVC_ORD SO WHERE SO.BKG_NO = BKG.TO_BKG_NO AND SO.TRO_SEQ = NVL(TRO.TRO_SEQ,'1')) cntr_no,
MAX(BKG.bkg_sts_cd) bkg_sts_cd,
MAX(BKG.por_cd) por_cd,
MAX(BKG.pol_cd) pol_cd,
MAX(BKG.pod_cd) pod_cd,
MAX(BKG.del_cd) del_cd,
MAX(BKG.DE_TERM_CD) DE_TERM_CD,
MAX(tro.cre_ofc_cd) tro_ofc,
MAX(tro.upd_usr_id) tro_id,
MAX(tro.EUR_TRNS_TP_CD) EUR_TRNS_TP_CD,
MAX(troa.LOC_CD) LOC_CD,
round(SUM(trs_common_pkg.GET_CONVERSION_EUR_AMT_FNC( 'USD', round( (NVL(TRO.TRNS_REV_AMT,0)+NVL(TRO.NMF_TRNS_REV_AMT,0))/ B.usd_locl_xch_rt , 2) , to_char(NVL(tro.cre_dt,TRO.UPD_DT), 'YYYYMM' ))), 2)  tro_rev
FROM BKG_EUR_TRO TRO, BKG_EUR_TRO_DTL TROA, bkg_booking BKG, gl_mon_xch_rt B
WHERE 1=1
#if( ${str_bkgno} != '' )
AND BKG.bkg_no       = @[str_bkgno]
#end
#if( ${str_blno} != '' )
AND BKG.bl_no        = @[str_blno]
#end
AND BKG.TO_BKG_NO = TRO.BKG_NO(+)
AND BKG.TO_BKG_NO = TROA.BKG_NO(+)
AND NVL(TROA.io_bnd_cd,'I') = NVL(TRO.io_bnd_cd,'I')
AND NVL(TROA.tro_seq,'1') = NVL(TRO.tro_seq,'1')
AND NVL(TROA.tro_sub_seq,'1') = 1
AND B.acct_xch_rt_lvl = 1  --- TRO 환율 적용
AND B.curr_cd = nvl(DECODE(tro.curr_cd,'   ','',tro.curr_cd), 'EUR')
AND B.acct_xch_rt_yrmon = to_char(NVL(tro.cre_dt,SYSDATE), 'YYYYMM' )
GROUP BY  BKG.TO_BKG_NO, TRO.IO_BND_CD,TRO.CNTR_NO,TRO.TRO_SEQ 
) TRO,
/********* AR INV 부분 ************/
(SELECT 
BK.TO_BKG_NO BKG_NO, NVL(AR_MN.IO_BND_CD,'X') IO_BND_CD,
MAX(BR.CLT_OFC_CD) CLT_OFC_CD,
MAX(AR_MN.sc_no) sc_no,
MAX(AR_MN.rfa_no) rfa_no,
case when AR_MN.IO_BND_CD = 'O'
then round( sum( trs_common_pkg.GET_CONVERSION_EUR_AMT_FNC( 'USD', round( decode( AR_CHG.CHG_CD, 'OIH', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'MSC', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'WHC', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'OAR', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'LWS', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'HWS', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'PCS', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'WJC', AR_CHG.CHG_AMT/c.usd_locl_xch_rt , 0 ) , 2), to_char(AR_MN.CRE_DT, 'YYYYMM' ) ) ), 2)
else round( sum( trs_common_pkg.GET_CONVERSION_EUR_AMT_FNC( 'USD', round( decode( AR_CHG.CHG_CD, 'DIH', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'MSC', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'WHC', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'DDC', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'DIC', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'DAR', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'LWS', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'HWS', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'PCS', AR_CHG.CHG_AMT/c.usd_locl_xch_rt ,
'WJC', AR_CHG.CHG_AMT/c.usd_locl_xch_rt , 0 ) , 2), to_char(AR_MN.CRE_DT, 'YYYYMM' ) ) ), 2)
end ar_rev,
MIN(AR_MN.AR_OFC_CD) AR_OFC_CD,
MAX(AR_MN.ACT_CUST_CNT_CD||AR_MN.ACT_CUST_SEQ) rating_id
FROM INV_AR_MN AR_MN, INV_AR_CHG AR_CHG, BKG_RATE BR,gl_mon_xch_rt C, BKG_BOOKING BK
WHERE 1=1
#if( ${str_bkgno} != '' )
AND BK.BKG_NO        = @[str_bkgno]
#end
#if( ${str_blno} != '' )
AND BK.BL_NO         = @[str_blno]
#end
AND AR_MN.AR_IF_NO = AR_CHG.AR_IF_NO
AND BK.TO_BKG_NO = BR.BKG_NO(+)
AND BK.TO_BKG_NO = AR_MN.BKG_NO(+)
and c.acct_xch_rt_lvl = 1
and c.curr_cd = AR_CHG.CURR_CD --환율.
and c.acct_xch_rt_yrmon = to_char(NVL(AR_MN.CRE_DT,SYSDATE), 'YYYYMM') -- 환율 적용 월
GROUP BY  BK.TO_BKG_NO, AR_MN.IO_BND_CD ) AR_INV

WHERE 1=1
AND TRSO.BKG_NO = TRO.BKG_NO
AND TRSO.BKG_NO = AR_INV.BKG_NO
AND TRSO.TRSP_BND_CD = DECODE(TRSO.TRSP_BND_CD,'X','X',TRO.IO_BND_CD)
AND TRSO.TRSP_BND_CD = DECODE(TRSO.TRSP_BND_CD,'X','X',AR_INV.IO_BND_CD)			]]></sql>
			<params>
				<param name="str_bkgno" type="12" value="" out="N"/>
				<param name="str_blno" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
