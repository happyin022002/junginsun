<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="MarineTerminalStorageInvoiceManageDBDAOVerifyStorageInvoiceVolumneRSQL">
			<desc><![CDATA[VerifyStorageInvoiceVolumne]]></desc>
			<sql><![CDATA[
SELECT X.* 
FROM (
	SELECT DENSE_RANK() OVER (PARTITION BY Z.TML_SO_TMP_SEQ, Z.CNTR_NO ORDER BY Z.GT_IN_DT_DIFF ASC) DIFF_RANK,
			Z.CNTR_NO,
			Z.CNTR_TPSZ_CD,
			TO_CHAR(Z.INV_GATE_IN_DT, 'YYYYMMDDHH24MI') INV_GATE_IN_DT,
			TO_CHAR(Z.INV_GATE_OUT_DT, 'YYYYMMDDHH24MI') INV_GATE_OUT_DT,
			TO_CHAR(Z.MVMT_GATE_IN_DT, 'YYYYMMDDHH24MI') MVMT_GATE_IN_DT,
			TO_CHAR(Z.MVMT_GATE_OUT_DT, 'YYYYMMDDHH24MI') MVMT_GATE_OUT_DT,
			TRUNC(Z.MVMT_GATE_IN_DT - Z.INV_GATE_IN_DT) GATE_IN_TD_DYS,
			TRUNC(DECODE(Z.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), Z.MVMT_GATE_OUT_DT) - Z.INV_GATE_OUT_DT) GATE_OUT_TD_DYS,
			TRUNC(DECODE(Z.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), Z.MVMT_GATE_OUT_DT) - Z.MVMT_GATE_IN_DT) MVMT_STAY_DYS,
			TRUNC(Z.INV_GATE_OUT_DT - Z.INV_GATE_IN_DT) INV_STAY_DYS,
			TRUNC((DECODE(Z.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), Z.MVMT_GATE_OUT_DT) - Z.MVMT_GATE_IN_DT)) - TRUNC(Z.INV_GATE_OUT_DT - Z.INV_GATE_IN_DT) STAY_DIFF_DYS,
			Z.CNTR_STY_CD,
			Z.IO_BND_CD,
			Z.LOCL_TS_IND_CD,
			Z.DCGO_CLSS_CD,
			Z.BB_CGO_FLG,
			Z.RC_FLG,
			Z.AWK_CGO_FLG,
			Z.DSCR_IND_CD,
			REPLACE(Z.BKG_NO,'OSCAR') BKG_NO,
			Z.BL_NO,
			Z.BL_NO_TP,
			Z.VSL_CD,
			Z.SKD_VOY_NO,
			Z.SKD_DIR_CD,
			CASE 
			WHEN Z.DSCR_IND_CD IN ('DT','DE','DS', 'DP', 'HO', 'PD', 'NH', 'DB', 'DF', 'NN') 
			THEN 'DC' 
			ELSE 'CO' 
			END VRFY_RSLT_IND_CD,
			CASE 
			WHEN Z.DSCR_IND_CD IS NULL 
			THEN 'Y' 
			ELSE '' 
			END CO_FLG,
			CASE 
			WHEN Z.DSCR_IND_CD IS NOT NULL 
			THEN 'Y' 
			ELSE '' 
			END DC_FLG, 
			CASE 
			WHEN Z.DSCR_IND_CD = 'DB' 
			THEN  (
                     
                        SELECT  'Double billing Inv : '||INV_NO
                        FROM
                        (
                            SELECT   BB.CNTR_NO, BB.CNTR_STY_CD, MAX(BB.INV_NO) INV_NO
                            FROM
                            (
                                SELECT A.COST_CODE, C.CNTR_NO 
                                FROM(

                                    SELECT DISTINCT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE
                                    FROM ( SELECT COUNT(T.LGS_COST_CD) CNT,
                                         T.LGS_COST_CD TP,
                                         T.THRP_LGS_COST_CD CD,
                                         H.TML_AGMT_OFC_CTY_CD CTY,
                                         H.TML_AGMT_SEQ SEQ,
                                         H.TML_AGMT_VER_NO NO
                                        FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T
                                        WHERE  H.YD_CD            = @[yd_cd]
                                        AND    H.VNDR_SEQ         = @[vndr_seq]
                                        AND    H.TML_AGMT_STS_CD = 'C'
                                        AND    H.DELT_FLG        = 'N'

                                        AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice 
                                        AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice 

                                        AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)
                                                                     FROM   TES_TML_AGMT_HDR M
                                                                     WHERE  M.YD_CD               = @[yd_cd]
                                                                     AND    M.VNDR_SEQ            = @[vndr_seq]
                                                                     AND    M.TML_AGMT_STS_CD     = 'C'
                                                                     AND    M.DELT_FLG            = 'N'

                                                                     AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice 
                                                                     AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-')) -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice 

                                        AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)
                                        AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)
                                        AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)
                                        GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO,
                                        T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D
                                    WHERE  C.COST_CALC_MZD_CD = 'A'
                                    AND    C.TML_AGMT_MGMT_CD = 'A'

									AND    C.STO_INV_FLG = 'Y'  -- Marine Storage Invoice 

                                    AND    D.TML_AGMT_OFC_CTY_CD = A.CTY
                                    AND    D.TML_AGMT_SEQ = A.SEQ
                                    AND    D.TML_AGMT_VER_NO  = A.NO
                                    AND    C.LGS_COST_CD = D.LGS_COST_CD
                                    AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' 
                                    AND    D.THRP_COST_CD_FLG IS NULL

                                ) A,
                                (
                                    SELECT ltrim(regexp_substr((select COST_CD_FTR_RMK
                                                                  from tes_tml_so_hdr
                                                                 where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '[^|]+', 1, level ) ,'|') as COST_CODE
                                     FROM dual
                                     connect by level<= ( length((select COST_CD_FTR_RMK
                                                                    from tes_tml_so_hdr
                                                                   where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]))+1 - length(replace((select COST_CD_FTR_RMK
                                                                                                                    from tes_tml_so_hdr
                                                                                                                   where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '|')) ) / length('|')
                                )B,
                                (
                                    SELECT * FROM TES_FILE_IMP_TMP
                                    WHERE 1=1
                                    AND TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]
         
                                ) C

    #if (${cost_cd_ftr_rmk} == '') 
        WHERE A.COST_CODE=B.COST_CODE(+)
    #else 
        WHERE A.COST_CODE=B.COST_CODE -- hdr정보에 데이터 있으면 inner 없음 outter
    #end
                                
                            ) AA,
                            (
                            SELECT DISTINCT H.INV_NO, H.YD_CD, H.VNDR_SEQ, D.LGS_COST_CD, L.CNTR_NO, L.CNTR_STY_CD
                             FROM   TES_TML_SO_HDR H, TES_TML_SO_DTL D, TES_TML_SO_CNTR_LIST L
                             WHERE  H.YD_CD             = @[yd_cd]
                             AND    H.VNDR_SEQ           = @[vndr_seq]
                             AND    H.TML_SO_OFC_CTY_CD   = D.TML_SO_OFC_CTY_CD
                             AND    H.TML_SO_SEQ          = D.TML_SO_SEQ
                             AND    H.TML_SO_OFC_CTY_CD   = L.TML_SO_OFC_CTY_CD
                             AND    H.TML_SO_SEQ          = L.TML_SO_SEQ

                             AND    NVL(H.DELT_FLG,'N')   <> 'Y'
                             AND    D.CALC_TP_CD          = 'A'
                             AND    L.VRFY_RSLT_IND_CD    = 'CO'
							 AND 	H.TML_INV_RJCT_STS_CD <> 'RJ'
							 AND    H.TML_INV_TP_CD      = 'ST'
                             AND    NVL(L.CNTR_TPSZ_CD,'N')  = NVL(D.CNTR_TPSZ_CD,'N')
                             AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IO_BND_CD,'N'),'ON',NVL(L.IO_BND_CD,'N'),'OF','N','ST','N')
                                 = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IO_BND_CD,'N'),'ON',NVL(D.IO_BND_CD,'N'),'OF','N','ST','N')
                             AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IOC_CD,'N'),'ON',NVL(L.IOC_CD,'N'),'OF','N','ST','N')
                                 = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IOC_CD,'N'),'ON',NVL(D.IOC_CD,'N'),'OF','N','ST','N')
                             AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.LANE_CD,'N'),'ON',NVL(L.LANE_CD,'N'),'OF','N','ST','N')
                                 = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.LANE_CD,'N'),'ON',NVL(D.LANE_CD,'N'),'OF','N','ST','N')
                             AND    DECODE(H.TML_INV_TP_CD,'TM',
                                DECODE(L.BB_CGO_FLG,'Y','BB',DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F','TS','TM'),DECODE(L.CNTR_STY_CD,'F','FL','MT'))),
                                'ON',DECODE(L.CNTR_STY_CD,'F','F','M'),'OF',DECODE(L.CNTR_STY_CD,'F','FL','MT'),'ST',DECODE(L.LOCL_TS_IND_CD,'T','TS',DECODE(L.CNTR_STY_CD,'F','FL','MT')))
                                 = DECODE(H.TML_INV_TP_CD,'TM',SUBSTR(D.LGS_COST_CD,5,2),'ON',SUBSTR(D.LGS_COST_CD,6,1),'OF',SUBSTR(D.LGS_COST_CD,5,2),
                                'ST',SUBSTR(D.LGS_COST_CD,5,2))
                             AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.DCGO_CLSS_CD,'N'),'ON',NVL(L.DCGO_CLSS_CD,'N'),'OF','N','ST','N')
                                 = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.DCGO_IND_CD,'N'),'ON',NVL(D.DCGO_IND_CD,'N'),'OF','N','ST','N')
                             AND    DECODE(H.TML_INV_TP_CD,'TM',DECODE(D.TML_TRNS_MOD_CD,'','S','S','S',NVL(L.TML_TRNS_MOD_CD,'S')),'N')
                                 = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.TML_TRNS_MOD_CD,'S'),'N')
                             AND    DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS','F','N'),'N')
                                 = DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS',L.CNTR_STY_CD,'N'),'N')
                             --AND    DECODE(H.TML_INV_TP_CD,'TM','Y',L.VSL_CD) <> DECODE(H.TML_INV_TP_CD,'TM','N','CNTC')
                            ) BB
                            WHERE AA.CNTR_NO = BB.CNTR_NO
                            AND AA.COST_CODE = BB.LGS_COST_CD
                            group by BB.CNTR_NO, BB.CNTR_STY_CD
                        )
                        WHERE ROWNUM =1
                      ) 
            WHEN Z.BKG_NO = 'OSCAR' THEN 'This is OSCAR BKG'    
			ELSE '' 
			END CNTR_RMK
    FROM (
            SELECT    ORG.CNTR_NO,
                      MC.CNTR_TPSZ_CD CNTR_TPSZ_CD,
                      ORG.INV_GATE_IN_DT,
                      ORG.INV_GATE_OUT_DT,
                      ORG.MIN_INV_GATE_IN_DT,
                      CASE
                      WHEN DB2.CNTR_NO IS NOT NULL THEN 'DB'  
                      WHEN ORG.CNTR_STY_CD = 'F'
                        AND CALC.CNTR_NO IS NULL
                        AND CALC.CNTR_TP IS NULL 
                      THEN 'NN'           
                      WHEN ORG.CNTR_STY_CD = 'F'
                        AND CALC.CNTR_STY_CD IS NULL 
                      THEN 'NH'           
                      WHEN ORG.CNTR_STY_CD = 'M'
                        AND CALC.MVMT_GATE_IN_DT IS NULL
                         --OR CALC.MVMT_GATE_OUT_DT IS NULL) /** ZZ상태의 G.O없는 CNTR때문에 comment처리함 2015.03.15 **/
                      THEN 'NN'                          
#if (${sto_dys_ind_cd} == 'IO') 
					  WHEN TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD')-ORG.TO_PRD_DT>0 
					  THEN 'PD'
#end                      
                      WHEN ABS(TO_CHAR(CALC.MVMT_GATE_IN_DT,'YYYYMMDD')-TO_CHAR(ORG.INV_GATE_IN_DT,'YYYYMMDD'))>=1 AND ABS(DECODE(TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD'), NULL, TO_CHAR(TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'),'YYYYMMDD'), TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD'))-TO_CHAR(ORG.INV_GATE_OUT_DT,'YYYYMMDD'))>=1 
                      THEN 'DT' 
                      WHEN ABS(TO_CHAR(CALC.MVMT_GATE_IN_DT,'YYYYMMDD')-TO_CHAR(ORG.INV_GATE_IN_DT,'YYYYMMDD'))>=1
                      THEN 'DE' 
                      WHEN ABS(DECODE(TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD'), NULL, TO_CHAR(TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'),'YYYYMMDD'), TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD'))-TO_CHAR(ORG.INV_GATE_OUT_DT,'YYYYMMDD'))>=1 
                      THEN 'DS' 
                      ELSE '' 
                      END DSCR_IND_CD,
                      ORG.TML_SO_TMP_SEQ,
                      ORG.YD_CD,
                      ORG.VNDR_SEQ,
                      ORG.RCV_DT,
                      CALC.RC_FLG,
                      CALC.AWK_CGO_FLG,
                      CALC.MVMT_GATE_IN_DT,
                      CALC.MVMT_GATE_OUT_DT,
                      ORG.CNTR_STY_CD,
                      CALC.IO_BND_CD,
                      CALC.LOCL_TS_IND_CD,
                      CALC.DCGO_CLSS_CD,
                      CALC.BB_CGO_FLG,
                      CALC.BKG_NO,
                      CALC.BL_NO,
                      CALC.BL_NO_TP,
                      CALC.VSL_CD,
                      CALC.SKD_VOY_NO,
                      CALC.SKD_DIR_CD,
                      ABS(ORG.INV_GATE_IN_DT - CALC.MVMT_GATE_IN_DT) GT_IN_DT_DIFF,
                      ABS(ORG.INV_GATE_OUT_DT - CALC.MVMT_GATE_OUT_DT) GT_OUT_DT_DIFF
            FROM (
                    SELECT M3.BKG_NO,
                           M3.CNMV_CYC_NO,
                           M3.CNTR_TP,
                           M3.CNTR_STY_CD,
                           M3.DCGO_CLSS_CD,
                           M3.BB_CGO_FLG,
                           M3.RC_FLG,
                           M3.AWK_CGO_FLG,
                           M3.BL_NO,
                           M3.BL_NO_TP,
                           M3.VSL_CD,
                           M3.SKD_VOY_NO,
                           M3.SKD_DIR_CD,
                           M3.POL,
                           M3.CNTR_NO,
                           M3.CNMV_SEQ, 
                           M3.MVMT_GATE_IN_DT,
                           M3.MVMT_GATE_OUT_DT,
                           M3.STY,
                           M3.TML_SO_TMP_SEQ,
                           M3.YD_CD,
                           M3.MVMT_FM,
                           CASE WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'OP'
                                THEN 'O'
                                WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'VL'
                                THEN 'O'     
                                WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'ID'
                                THEN 'I'
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'OP'
                                THEN 'O'  
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'VL'
                                THEN 'O'
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'ID'
                                THEN 'I'
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'TN'
                                THEN 'O'
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'EN'
                                THEN 'O'
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'XX'
                                THEN 'O'
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'OP'
                                THEN 'O'  
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'VL'
                                THEN 'O'
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'ID'
                                THEN 'I'
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'TN'
                                THEN 'I'
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'EN'
                                THEN 'I'
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'XX'
                                THEN 'I'            
                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'OP'
                                THEN 'O'
                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'VL'
                                THEN 'O'     
                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'ID'
                                THEN 'I'      
								WHEN M3.MI_STS = 'VD' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I'  
                                WHEN M3.MI_STS = 'EN' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'ID' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'OP' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'TN' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'VL' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'XX' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'VD' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I'  
                                WHEN M3.MI_STS = 'EN' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'ID' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'OP' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'TN' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'VL' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I' 
                                WHEN M3.MI_STS = 'XX' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가
                                THEN 'I'        
                                WHEN M3.MI_STS = 'VD' AND M3.MO_STS = 'MT'
                                THEN 'I'      
                           		ELSE ''
                           END IO_BND_CD,
                                  
                           CASE WHEN M3.MI_STS = 'TS' OR M3.MO_STS = 'TS'
                                THEN 'T'
                           		ELSE 'L'
                           END  LOCL_TS_IND_CD
                    FROM (
                            SELECT DECODE(M2.BKG_NO,'OSCAR','OSCAR',C.BKG_NO) BKG_NO,
                                   C.CNMV_CYC_NO ,
                                   C.CNTR_TPSZ_CD CNTR_TP,
                                   DECODE(B.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M') CNTR_STY_CD,
                                   MIN(NVL(SUBSTR(D.IMDG_CLSS_CD, 1, 1), 'N')) DCGO_CLSS_CD,
                                   NVL(C.BB_CGO_FLG, 'N') BB_CGO_FLG,
                                   NVL(C.RC_FLG, 'N') RC_FLG,
                                   NVL(C.AWK_CGO_FLG, 'N') AWK_CGO_FLG,                            
                                   B.BL_NO BL_NO,
                                   B.BL_NO_TP BL_NO_TP,
                                   B.VSL_CD VSL_CD,
                                   B.SKD_VOY_NO SKD_VOY_NO,
                                   B.SKD_DIR_CD SKD_DIR_CD,
                                   B.POL_CD POL,
                                   M2.CNTR_NO,
                                   M2.CNMV_SEQ, 
                                   M2.GATE_IN MVMT_GATE_IN_DT,
                                   M2.GATE_OUT MVMT_GATE_OUT_DT,
                                   M2.STY,
                                   M2.TML_SO_TMP_SEQ,
                                   M2.YD_CD,
                                   MVMT_FM,
                                   M2.MI_STS,
                                   M2.MO_STS
                            FROM (SELECT	DISTINCT MIO.MVMT_FM,
                      						MIO.CNTR_NO CNTR_NO,
                     				 		MIO.CNMV_SEQ CNMV_SEQ,
                      						CASE WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNTR_TP WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNTR_TP END CNTR_TPSZ_CD,
                      						CASE WHEN MIO.MVMT_STS_CD||MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')
                      						    THEN MIO.CNMV_EVNT_DT 
                      						    ELSE MIO.PREV_EVNT_DT
                      						END GATE_IN,
--											MIO.PREV_EVNT_DT GATE_IN,
--                      					MIO.CNMV_EVNT_DT GATE_OUT,
										   CASE	WHEN MIO.MVMT_STS_CD||MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')
												THEN NULL
												ELSE MIO.CNMV_EVNT_DT
										   END GATE_OUT,
                      						MIO.CNTR_STY_CD STY,
                      						CASE WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNMV_CYC_NO 
                                                 WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNMV_CYC_NO 
                                            END CYC,
                      						MIO.TML_SO_TMP_SEQ,
                      						MIO.YD_CD,
                      						CASE WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.BKG_NO 
                                                 WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.BKG_NO 
                                                 WHEN LENGTH(BKG_NO) = 10 THEN 'OSCAR' 
                                            END BKG_NO,
                      						MIO.CNTR_STY_CD,
                      						MIO.PREV_MVMT_STS MI_STS,
                      						MIO.MVMT_STS_CD MO_STS
                                  FROM (SELECT M1.PREV_MVMT_STS,M1.MVMT_STS_CD,M1.NEXT_MVMT_STS,
#if (${sto_dys_ind_cd} == 'IO')    
                                               M1.PREV_EVNT_DT,
                                               M1.CNMV_EVNT_DT,                                                
#else
											   NVL(M1.PREV_EVNT_DT,M1.CNMV_EVNT_DT) PREV_EVNT_DT,
											   NVL(M1.CNMV_EVNT_DT,TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')) CNMV_EVNT_DT,
#end                                        
                                               M1.NEXT_EVNT_DT,
                                               M1.CNTR_NO,M1.CNMV_YR,M1.CNMV_SEQ,M1.CNTR_STY_CD,P2.TML_SO_TMP_SEQ,M1.YD_CD,M1.BKG_NO,
                                               M1.CNMV_SPLIT_NO,M1.MVMT_FM,M1.CNTR_TP,M1.CNMV_CYC_NO,M1.BKG_CGO_TP_CD 
                                        FROM
                                        (SELECT PREV_MVMT_STS,MVMT_STS_CD,NEXT_MVMT_STS,
											   NVL(PREV_EVNT_DT,CNMV_EVNT_DT) PREV_EVNT_DT,
											   NVL(CNMV_EVNT_DT,TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')) CNMV_EVNT_DT,
                                               NEXT_EVNT_DT,
                                               CNTR_NO,CNMV_YR,CNMV_SEQ,CNTR_STY_CD,TML_SO_TMP_SEQ,YD_CD,BKG_NO,CNMV_SPLIT_NO,MVMT_FM,CNTR_TP,CNMV_CYC_NO,BKG_CGO_TP_CD 
                                        FROM	(
                    					  SELECT M.PREV_MVMT_STS,
                                                 M.MVMT_STS_CD,
                                          		 DECODE(M.NEXT_MVMT_STS,'',DECODE((SELECT MVMT_STS_CD FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND CNMV_EVNT_DT > M.CNMV_EVNT_DT  AND ROWNUM=1),'','ZZ',(SELECT MVMT_STS_CD FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND CNMV_EVNT_DT > M.CNMV_EVNT_DT AND ROWNUM=1)),M.NEXT_MVMT_STS) NEXT_MVMT_STS, 
                                         		 M.PREV_EVNT_DT,
                                        		 M.CNMV_EVNT_DT,
                                          		 M.NEXT_EVNT_DT,
                                         		 M.CNTR_NO,
                                         		 M.CNMV_YR,
                                         		 M.CNMV_SEQ,
                                         		 M.CNTR_STY_CD,
                                         		 M.TML_SO_TMP_SEQ,
                                         		 M.YD_CD,
                                         		 NVL(M.BKG_NO,M.BKG_NO2) AS BKG_NO,
                                         		 M.CNMV_SPLIT_NO,
                                         		 M.MVMT_FM,
                                         		 M.CNTR_TP,
                                         		 M.CNMV_CYC_NO,
                                         		 M.BKG_CGO_TP_CD
                                        FROM (
                    							SELECT  LAG(M.MVMT_STS_CD)  OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) PREV_MVMT_STS,
                      									M.MVMT_STS_CD,
                      									LEAD(M.MVMT_STS_CD) OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) NEXT_MVMT_STS,
                      									LAG(M.CNMV_EVNT_DT) OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) PREV_EVNT_DT,  
                      									M.CNMV_EVNT_DT,
                      									LEAD(M.CNMV_EVNT_DT)OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) NEXT_EVNT_DT,
                      									M.CNTR_NO,
                      									M.CNMV_YR,
                     									M.CNMV_SEQ,
                      									P.CNTR_STY_CD,                      
                      									P.TML_SO_TMP_SEQ,
                      									P.YD_CD,
                      									(SELECT TO_BKG_NO FROM BKG_BOOKING WHERE BKG_NO = M.BKG_NO AND BKG_STS_CD = 'X') BKG_NO,
                                				        M.BKG_NO AS BKG_NO2,
                      									M.CNMV_SPLIT_NO,
                      									DECODE(M.FCNTR_FLG, 'N', 'M', 'F') MVMT_FM,
                      									M.CNTR_TPSZ_CD CNTR_TP,
                      									M.CNMV_CYC_NO,
                      									B.BKG_CGO_TP_CD
                       	     		           FROM TES_FILE_IMP_TMP P, CTM_MOVEMENT M, BKG_BOOKING B
                       	   		              WHERE P.TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]
                         			            AND P.TML_SO_SEQ = @[tml_so_seq]
                      	 	              		AND M.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')-730 ) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')+730)+ 0.99999421
                         	              		AND M.CNTR_NO = P.CNTR_NO
                         	              		AND M.ORG_YD_CD = P.YD_CD
                                                AND DECODE(M.FCNTR_FLG, 'N', 'M', 'F') = P.CNTR_STY_CD
                         	              		AND M.BKG_NO = B.BKG_NO(+)
                         	                    ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ ASC, M.CNMV_SPLIT_NO ) M ))M1, TES_FILE_IMP_TMP P2
                         	                    WHERE M1.CNTR_NO = P2.CNTR_NO
                                	AND M1.CNTR_STY_CD = P2.CNTR_STY_CD
                                	AND (TO_CHAR(M1.PREV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_IN_DT,'YYYYMMDD') OR TO_CHAR(M1.CNMV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_IN_DT,'YYYYMMDD') OR TO_CHAR(M1.PREV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_OUT_DT,'YYYYMMDD') OR TO_CHAR(M1.CNMV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_OUT_DT,'YYYYMMDD'))
                                	ORDER BY M1.CNTR_NO, M1.PREV_EVNT_DT, M1.CNMV_SEQ, M1.CNMV_SPLIT_NO) MIO
#if (${sto_dys_ind_cd} == 'IO') 
                       	                WHERE	(MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')
                         	            AND		MIO.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421)
#else
                                        WHERE	((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')
												-- GATE OUT이 없고 GATE IN만 있는 경우 조건 추가 - 2014-11-05
												OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )
												AND		(MIO.PREV_EVNT_DT >= TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))
												AND		(MIO.CNMV_EVNT_DT <= TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')+ 0.99999421))
										OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')
												OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )
												AND		(MIO.PREV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))
												AND		(MIO.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421))
										OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')
												OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )
												AND		(MIO.PREV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421)
												AND		(MIO.CNMV_EVNT_DT > TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')))
										OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')
												OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )
												AND		(MIO.PREV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))
												AND		(MIO.CNMV_EVNT_DT > TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')))
                                        OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX',
                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX',
                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX',
                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')
												OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )
												AND		(MIO.NEXT_EVNT_DT IS NULL)
												AND		(MIO.CNMV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')))
#end
									) M2,
                                    BKG_CONTAINER C,
                                    BKG_BOOKING B,
                                    BKG_DG_CGO D
                            WHERE 1=1
                            AND M2.CNTR_NO = C.CNTR_NO(+)                            
                            AND SUBSTR(M2.BKG_NO,1,10) = SUBSTR(C.BKG_NO(+),1,10) --20161012 split booking가져올 수 있도록 10자리만 비교함. xinyi 요청
                            AND C.BKG_NO   = B.BKG_NO(+)
                            AND B.BKG_NO   = D.BKG_NO(+)
                            AND M2.CYC     = C.CNMV_CYC_NO(+)
                            GROUP BY   C.BKG_NO,
                                       C.CNMV_CYC_NO,
                                       C.CNTR_TPSZ_CD, 
                                       DECODE(B.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M'),
                                       NVL(C.BB_CGO_FLG, 'N'),
                                       NVL(C.RC_FLG, 'N'),
                                       NVL(C.AWK_CGO_FLG, 'N'),
                                       B.BL_NO,
                                       B.BL_NO_TP,
                                       B.VSL_CD,
                                       B.SKD_VOY_NO,
                                       B.SKD_DIR_CD,
                                       B.POL_CD,
                                       M2.CNTR_NO,
                                       M2.CNMV_SEQ,
                                       M2.GATE_IN,
                                       M2.GATE_OUT,
                                       M2.STY,
                                       M2.TML_SO_TMP_SEQ,
                                       M2.YD_CD,
                                       MVMT_FM,
                                       M2.MI_STS,
                                       M2.MO_STS,
                                       M2.BKG_NO) M3) CALC,              
                        (SELECT CNTR_NO,
                                CNTR_TPSZ_CD,
                                INV_GATE_IN_DT,
                                INV_GATE_OUT_DT,
                                CNTR_STY_CD,
                                TML_SO_TMP_SEQ,
                                YD_CD,
                                VNDR_SEQ,
                                RCV_DT,
                                FM_PRD_DT,
                                TO_PRD_DT ,
                                (SELECT MIN(INV_GATE_IN_DT)
                                   FROM TES_FILE_IMP_TMP
                                  WHERE TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]
                                    AND TML_SO_SEQ = @[tml_so_seq] ) MIN_INV_GATE_IN_DT
                          FROM TES_FILE_IMP_TMP
                         WHERE TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]
                           AND TML_SO_SEQ = @[tml_so_seq]) ORG,
                         MST_CONTAINER MC,
						 (
                                SELECT CNTR_NO
                                FROM
                                (
                                    SELECT   BB.CNTR_NO, BB.CNTR_STY_CD, MAX(BB.INV_NO) INV_NO
                                    FROM
                                    (
                                        SELECT A.COST_CODE, C.CNTR_NO 
                                        FROM(
                                            SELECT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE
                                            FROM ( SELECT COUNT(T.LGS_COST_CD) CNT,
                                                 T.LGS_COST_CD TP,
                                                 T.THRP_LGS_COST_CD CD,
                                                 H.TML_AGMT_OFC_CTY_CD CTY,
                                                 H.TML_AGMT_SEQ SEQ,
                                                 H.TML_AGMT_VER_NO NO
                                                FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T
                                                WHERE  H.YD_CD            = @[yd_cd]
                                                AND    H.VNDR_SEQ         = @[vndr_seq]
                                                AND    H.TML_AGMT_STS_CD = 'C'
                                                AND    H.DELT_FLG        = 'N'

                                                AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice 
                                                AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice 

                                                AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)
                                                                             FROM   TES_TML_AGMT_HDR M
                                                                             WHERE  M.YD_CD               = @[yd_cd]
                                                                             AND    M.VNDR_SEQ            = @[vndr_seq]
                                                                             AND    M.TML_AGMT_STS_CD     = 'C'
                                                                             AND    M.DELT_FLG            = 'N'

                                                                             AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice 
                                                                             AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-')) -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice 

                                                AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)
                                                AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)
                                                AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)
                                                GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO,
                                                T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D
                                            WHERE  C.COST_CALC_MZD_CD = 'A'
                                            AND    C.TML_AGMT_MGMT_CD = 'A'

											AND    C.STO_INV_FLG = 'Y'  -- Marine Storage Invoice 

                                            AND    D.TML_AGMT_OFC_CTY_CD = A.CTY
                                            AND    D.TML_AGMT_SEQ = A.SEQ
                                            AND    D.TML_AGMT_VER_NO  = A.NO
                                            AND    C.LGS_COST_CD = D.LGS_COST_CD
                                            AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' 
                                            AND    D.THRP_COST_CD_FLG IS NULL
                                            GROUP BY DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD))

                                        ) A,
                                        (
                                            SELECT ltrim(regexp_substr((select COST_CD_FTR_RMK
                                                                          from tes_tml_so_hdr
                                                                         where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '[^|]+', 1, level ) ,'|') as COST_CODE
                                             FROM dual
                                             connect by level<= ( length((select COST_CD_FTR_RMK
                                                                            from tes_tml_so_hdr
                                                                           where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]))+1 - length(replace((select COST_CD_FTR_RMK
                                                                                                                            from tes_tml_so_hdr
                                                                                                                           where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '|')) ) / length('|')
                                        )B,
                                        (
                                            SELECT CNTR_NO FROM TES_FILE_IMP_TMP
                                            WHERE 1=1
                                            AND TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]
                 
                                        ) C

            #if (${cost_cd_ftr_rmk} == '') 
                WHERE A.COST_CODE=B.COST_CODE(+)
            #else 
                WHERE A.COST_CODE=B.COST_CODE -- hdr정보에 데이터 있으면 inner 없음 outter
            #end
                                        
                                    ) AA,
                                    (
                                    SELECT /*+ ORDERED USE_NL(CNTR L D) USE_HASH(H) */ H.INV_NO, H.YD_CD, H.VNDR_SEQ, D.LGS_COST_CD, L.CNTR_NO, L.CNTR_STY_CD
                                     FROM   ( 
                                                SELECT DISTINCT CNTR_NO 
                                                FROM TES_FILE_IMP_TMP  
                                                WHERE 1=1
                                                AND TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]
                                            ) CNTR, TES_TML_SO_HDR H, TES_TML_SO_DTL D, TES_TML_SO_CNTR_LIST L
                                     WHERE  H.YD_CD             = @[yd_cd]
                                     AND    H.VNDR_SEQ           = @[vndr_seq]
                                     AND    H.TML_SO_OFC_CTY_CD   = D.TML_SO_OFC_CTY_CD
                                     AND    H.TML_SO_SEQ          = D.TML_SO_SEQ
                                     AND    H.TML_SO_OFC_CTY_CD   = L.TML_SO_OFC_CTY_CD
                                     AND    H.TML_SO_SEQ          = L.TML_SO_SEQ
                                     AND    L.CNTR_NO = CNTR.CNTR_NO
				                     AND    (TO_DATE(H.FM_PRD_DT,'YYYYMMDD') BETWEEN TO_DATE(REPLACE(@[fm_prd_dt],'-'),'YYYYMMDD') AND TO_DATE(REPLACE(@[to_prd_dt],'-'),'YYYYMMDD')
                                            OR  TO_DATE(H.TO_PRD_DT,'YYYYMMDD') BETWEEN TO_DATE(REPLACE(@[fm_prd_dt],'-'),'YYYYMMDD') AND TO_DATE(REPLACE(@[to_prd_dt],'-'),'YYYYMMDD'))
                                     AND    NVL(H.DELT_FLG,'N')   <> 'Y'
                                     AND    D.CALC_TP_CD          = 'A'
                                     AND    L.VRFY_RSLT_IND_CD    = 'CO'
                                     AND    NVL(L.CNTR_TPSZ_CD,'N')  = NVL(D.CNTR_TPSZ_CD,'N')
                                     AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IO_BND_CD,'N'),'ON',NVL(L.IO_BND_CD,'N'),'OF','N','ST','N')
                                         = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IO_BND_CD,'N'),'ON',NVL(D.IO_BND_CD,'N'),'OF','N','ST','N')
                                     AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IOC_CD,'N'),'ON',NVL(L.IOC_CD,'N'),'OF','N','ST','N')
                                         = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IOC_CD,'N'),'ON',NVL(D.IOC_CD,'N'),'OF','N','ST','N')
                                     AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.LANE_CD,'N'),'ON',NVL(L.LANE_CD,'N'),'OF','N','ST','N')
                                         = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.LANE_CD,'N'),'ON',NVL(D.LANE_CD,'N'),'OF','N','ST','N')
                                     AND    DECODE(H.TML_INV_TP_CD,'TM',
                                        DECODE(L.BB_CGO_FLG,'Y','BB',DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F','TS','TM'),DECODE(L.CNTR_STY_CD,'F','FL','MT'))),
                                        'ON',DECODE(L.CNTR_STY_CD,'F','F','M'),'OF',DECODE(L.CNTR_STY_CD,'F','FL','MT'),'ST',DECODE(L.LOCL_TS_IND_CD,'T','TS',DECODE(L.CNTR_STY_CD,'F','FL','MT')))
                                         = DECODE(H.TML_INV_TP_CD,'TM',SUBSTR(D.LGS_COST_CD,5,2),'ON',SUBSTR(D.LGS_COST_CD,6,1),'OF',SUBSTR(D.LGS_COST_CD,5,2),
                                        'ST',SUBSTR(D.LGS_COST_CD,5,2))
                                     AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.DCGO_CLSS_CD,'N'),'ON',NVL(L.DCGO_CLSS_CD,'N'),'OF','N','ST','N')
                                         = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.DCGO_IND_CD,'N'),'ON',NVL(D.DCGO_IND_CD,'N'),'OF','N','ST','N')
                                     AND    DECODE(H.TML_INV_TP_CD,'TM',DECODE(D.TML_TRNS_MOD_CD,'','S','S','S',NVL(L.TML_TRNS_MOD_CD,'S')),'N')
                                         = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.TML_TRNS_MOD_CD,'S'),'N')
                                     AND    DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS','F','N'),'N')
                                         = DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS',L.CNTR_STY_CD,'N'),'N')
                                     --AND    DECODE(H.TML_INV_TP_CD,'TM','Y',L.VSL_CD) <> DECODE(H.TML_INV_TP_CD,'TM','N','CNTC')
                                    ) BB
                                    WHERE AA.CNTR_NO = BB.CNTR_NO
                                    AND AA.COST_CODE = BB.LGS_COST_CD
                                    group by BB.CNTR_NO, BB.CNTR_STY_CD
                                )     
                             ) DB2
            WHERE ORG.CNTR_NO = CALC.CNTR_NO(+)
              AND ORG.CNTR_NO = MC.CNTR_NO(+)
              AND ORG.CNTR_NO = DB2.CNTR_NO(+)
              AND ORG.TML_SO_TMP_SEQ = CALC.TML_SO_TMP_SEQ(+)
              --and ORG.CNTR_STY_CD = CALC.MVMT_FM(+)
              ) Z ) X
WHERE DIFF_RANK = 1			]]></sql>
			<params>
				<param name="to_prd_dt" type="12" value="" out="N"/>
				<param name="yd_cd" type="12" value="" out="N"/>
				<param name="vndr_seq" type="12" value="" out="N"/>
				<param name="fm_prd_dt" type="12" value="" out="N"/>
				<param name="tml_so_ofc_cty_cd" type="12" value="" out="N"/>
				<param name="tml_so_seq" type="2" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
