/*=========================================================
*Copyright(c) 2017 CyberLogitec
*@FileName : OffdockCYInvoiceManageDBDAOVerifyOffdockCYInvoiceVolumeRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2017.01.13
*@LastModifier : 
*@LastVersion : 1.0
* 2017.01.13 
* 1.0 Creation
=========================================================*/
package com.clt.apps.opus.esd.tes.serviceproviderinvoicemanage.offdockcyinvoicemanage.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.clt.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class OffdockCYInvoiceManageDBDAOVerifyOffdockCYInvoiceVolumeRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * VerifyOffdockCYInvoiceVolume
	  * </pre>
	  */
	public OffdockCYInvoiceManageDBDAOVerifyOffdockCYInvoiceVolumeRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vndr_seq",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("tml_so_ofc_cty_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.NUMERIC + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("tml_so_seq",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("to_prd_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("yd_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("fm_prd_dt",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.clt.apps.opus.esd.tes.serviceproviderinvoicemanage.offdockcyinvoicemanage.integration").append("\n"); 
		query.append("FileName : OffdockCYInvoiceManageDBDAOVerifyOffdockCYInvoiceVolumeRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("SELECT 'I' IBFLAG, X.*" ).append("\n"); 
		query.append(" FROM ( SELECT DENSE_RANK() OVER (PARTITION BY Z.TML_SO_TMP_SEQ, Z.CNTR_NO ORDER BY Z.GT_IN_DT_DIFF ASC) DIFF_RANK," ).append("\n"); 
		query.append("               Z.AWK_CGO_FLG, NVL(DECODE(Z.RC_FLG,'Y','Y','N'),'N') RC_FLG," ).append("\n"); 
		query.append("               Z.CNTR_NO, Z.CNTR_TPSZ_CD, TO_CHAR(Z.INV_GATE_IN_DT,'YYYYMMDDHH24MI') INV_GATE_IN_DT, TO_CHAR(Z.INV_GATE_OUT_DT,'YYYYMMDDHH24MI') INV_GATE_OUT_DT, " ).append("\n"); 
		query.append("               TO_CHAR(Z.MVMT_GATE_IN_DT,'YYYYMMDDHH24MI') MVMT_GATE_IN_DT," ).append("\n"); 
		query.append("               TO_CHAR(Z.MVMT_GATE_OUT_DT,'YYYYMMDDHH24MI') MVMT_GATE_OUT_DT," ).append("\n"); 
		query.append("               TRUNC(Z.MVMT_GATE_IN_DT  - Z.INV_GATE_IN_DT) GATE_IN_TD_DYS, " ).append("\n"); 
		query.append("               TRUNC(Z.MVMT_GATE_OUT_DT - Z.INV_GATE_OUT_DT) GATE_OUT_TD_DYS," ).append("\n"); 
		query.append("               TRUNC(Z.MVMT_GATE_OUT_DT - Z.MVMT_GATE_IN_DT) MVMT_STAY_DYS," ).append("\n"); 
		query.append("               TRUNC(Z.INV_GATE_OUT_DT - Z.INV_GATE_IN_DT) INV_STAY_DYS," ).append("\n"); 
		query.append("               TRUNC((Z.MVMT_GATE_OUT_DT - Z.MVMT_GATE_IN_DT)) -" ).append("\n"); 
		query.append("               TRUNC(Z.INV_GATE_OUT_DT - Z.INV_GATE_IN_DT) STAY_DIFF_DYS," ).append("\n"); 
		query.append("               Z.CNTR_STY_CD, Z.IO_BND_CD, Z.LOCL_TS_IND_CD, Z.DCGO_CLSS_CD, Z.BB_CGO_FLG," ).append("\n"); 
		query.append("               Z.DSCR_IND_CD, REPLACE(Z.BKG_NO,'OSCAR') BKG_NO, Z.BL_NO, Z.BL_NO_TP, Z.VSL_CD, Z.SKD_VOY_NO, Z.SKD_DIR_CD," ).append("\n"); 
		query.append("               CASE WHEN Z.DSCR_IND_CD IN ('DT','DE','DS','DP','HO','PD','NH','DB','DF','NN') THEN 'DC'" ).append("\n"); 
		query.append("                    ELSE 'CO'" ).append("\n"); 
		query.append("               END VRFY_RSLT_IND_CD," ).append("\n"); 
		query.append("               CASE WHEN Z.DSCR_IND_CD IS NULL THEN 'Y'" ).append("\n"); 
		query.append("                    ELSE ''" ).append("\n"); 
		query.append("               END CO_FLG," ).append("\n"); 
		query.append("               CASE WHEN Z.DSCR_IND_CD IS NOT NULL THEN 'Y'" ).append("\n"); 
		query.append("                    ELSE ''" ).append("\n"); 
		query.append("               END DC_FLG," ).append("\n"); 
		query.append("  /* 2008-05-08: 김기영 부장님의 요청으로 Double Billing의 조건에 FM_PRD_DT ~ TO_PRD_DT와 겹치는 Invoice만 대상으로 변경한다.   */" ).append("\n"); 
		query.append("               CASE WHEN Z.DSCR_IND_CD = 'DB' THEN" ).append("\n"); 
		query.append("                     (" ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                        SELECT 'Double billing Inv : '||INV_NO" ).append("\n"); 
		query.append("                        FROM" ).append("\n"); 
		query.append("                        (" ).append("\n"); 
		query.append("                            SELECT   BB.CNTR_NO, BB.CNTR_STY_CD, MAX(BB.INV_NO) INV_NO" ).append("\n"); 
		query.append("                            FROM" ).append("\n"); 
		query.append("                            (" ).append("\n"); 
		query.append("                                SELECT A.COST_CODE, C.CNTR_NO " ).append("\n"); 
		query.append("                                FROM(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    SELECT DISTINCT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE" ).append("\n"); 
		query.append("                                    FROM ( SELECT COUNT(T.LGS_COST_CD) CNT," ).append("\n"); 
		query.append("                                         T.LGS_COST_CD TP," ).append("\n"); 
		query.append("                                         T.THRP_LGS_COST_CD CD," ).append("\n"); 
		query.append("                                         H.TML_AGMT_OFC_CTY_CD CTY," ).append("\n"); 
		query.append("                                         H.TML_AGMT_SEQ SEQ," ).append("\n"); 
		query.append("                                         H.TML_AGMT_VER_NO NO" ).append("\n"); 
		query.append("                                        FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T" ).append("\n"); 
		query.append("                                        WHERE  H.YD_CD            = @[yd_cd]" ).append("\n"); 
		query.append("                                        AND    H.VNDR_SEQ         = @[vndr_seq]" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_STS_CD = 'C'" ).append("\n"); 
		query.append("                                        AND    H.DELT_FLG        = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    #if (${agmt_ftr_inv_tp_cd} == 'OS')" ).append("\n"); 
		query.append("                                           AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                           AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    #elseif (${agmt_ftr_inv_tp_cd} == 'OT' || ${agmt_ftr_inv_tp_cd} == 'OFON' || ${agmt_ftr_inv_tp_cd} == 'OTOS')" ).append("\n"); 
		query.append("                                           AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[to_prd_dt],'-') -- To Period Date([to_prd_dt]) ==> OFF Dock Terminal Invoice (ON Dock 비용계산시)" ).append("\n"); 
		query.append("                                           AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[to_prd_dt],'-') -- To Period Date([to_prd_dt]) ==> OFF Dock Terminal Invoice (ON Dock 비용계산시)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    #end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)" ).append("\n"); 
		query.append("                                             FROM   TES_TML_AGMT_HDR M" ).append("\n"); 
		query.append("                                             WHERE  M.YD_CD               = @[yd_cd]" ).append("\n"); 
		query.append("                                             AND    M.VNDR_SEQ            = @[vndr_seq]" ).append("\n"); 
		query.append("                                             AND    M.TML_AGMT_STS_CD     = 'C'" ).append("\n"); 
		query.append("                                             AND    M.DELT_FLG            = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    #if (${agmt_ftr_inv_tp_cd} == 'OS')" ).append("\n"); 
		query.append("                                                AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                                AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-')) -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    #elseif (${agmt_ftr_inv_tp_cd} == 'OT' || ${agmt_ftr_inv_tp_cd} == 'OFON' || ${agmt_ftr_inv_tp_cd} == 'OTOS')" ).append("\n"); 
		query.append("                                                AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[to_prd_dt],'-') -- To Period Date([to_prd_dt]) ==> OFF Dock Terminal Invoice (ON Dock 비용계산시)" ).append("\n"); 
		query.append("                                                AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[to_prd_dt],'-')) -- To Period Date([to_prd_dt]) ==> OFF Dock Terminal Invoice (ON Dock 비용계산시)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    #else" ).append("\n"); 
		query.append("                                                AND 1=2 )" ).append("\n"); 
		query.append("                                    #end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("                                        GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO," ).append("\n"); 
		query.append("                                        T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("                                    WHERE  C.COST_CALC_MZD_CD = 'A'" ).append("\n"); 
		query.append("                                    AND    C.TML_AGMT_MGMT_CD = 'A'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    #if (${agmt_ftr_inv_tp_cd} == 'OT' || ${agmt_ftr_inv_tp_cd} == 'OTOS' )" ).append("\n"); 
		query.append("                                    AND    C.FDCK_CY_TML_FLG = 'Y' -- OFF Dock Terminal Invoice" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    #elseif (${agmt_ftr_inv_tp_cd} == 'OS')" ).append("\n"); 
		query.append("                                    AND    C.FDCK_CY_STO_FLG = 'Y' -- OFF Dock Storage Invoice" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    #elseif (${agmt_ftr_inv_tp_cd} == 'OFON')" ).append("\n"); 
		query.append("                                    AND    C.MRN_TML_FLG = 'Y' AND C.LGS_COST_CD LIKE 'TMND%'  -- OFF Dock 화면에서 ON Dock 비용계산시" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    #end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    AND    D.TML_AGMT_OFC_CTY_CD = A.CTY" ).append("\n"); 
		query.append("                                    AND    D.TML_AGMT_SEQ = A.SEQ" ).append("\n"); 
		query.append("                                    AND    D.TML_AGMT_VER_NO  = A.NO" ).append("\n"); 
		query.append("                                    AND    C.LGS_COST_CD = D.LGS_COST_CD" ).append("\n"); 
		query.append("                                    AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' " ).append("\n"); 
		query.append("                                    AND    D.THRP_COST_CD_FLG IS NULL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                        --OTOS이면 OS용" ).append("\n"); 
		query.append("                        #if (${agmt_ftr_inv_tp_cd} == 'OTOS') " ).append("\n"); 
		query.append("                                   UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    SELECT DISTINCT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE" ).append("\n"); 
		query.append("                                    FROM ( SELECT COUNT(T.LGS_COST_CD) CNT," ).append("\n"); 
		query.append("                                         T.LGS_COST_CD TP," ).append("\n"); 
		query.append("                                         T.THRP_LGS_COST_CD CD," ).append("\n"); 
		query.append("                                         H.TML_AGMT_OFC_CTY_CD CTY," ).append("\n"); 
		query.append("                                         H.TML_AGMT_SEQ SEQ," ).append("\n"); 
		query.append("                                         H.TML_AGMT_VER_NO NO" ).append("\n"); 
		query.append("                                        FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T" ).append("\n"); 
		query.append("                                        WHERE  H.YD_CD            = @[yd_cd]" ).append("\n"); 
		query.append("                                        AND    H.VNDR_SEQ         = @[vndr_seq]" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_STS_CD = 'C'" ).append("\n"); 
		query.append("                                        AND    H.DELT_FLG        = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                        AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                        AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)" ).append("\n"); 
		query.append("                                             FROM   TES_TML_AGMT_HDR M" ).append("\n"); 
		query.append("                                             WHERE  M.YD_CD               = @[yd_cd]" ).append("\n"); 
		query.append("                                             AND    M.VNDR_SEQ            = @[vndr_seq]" ).append("\n"); 
		query.append("                                             AND    M.TML_AGMT_STS_CD     = 'C'" ).append("\n"); 
		query.append("                                             AND    M.DELT_FLG            = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                             AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                             AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-')) -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("                                        GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO," ).append("\n"); 
		query.append("                                        T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("                                    WHERE  C.COST_CALC_MZD_CD = 'A'" ).append("\n"); 
		query.append("                                    AND    C.TML_AGMT_MGMT_CD = 'A'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    AND    C.FDCK_CY_STO_FLG = 'Y' -- OFF Dock Storage Invoice" ).append("\n"); 
		query.append("                                    AND    D.TML_AGMT_OFC_CTY_CD = A.CTY" ).append("\n"); 
		query.append("                                    AND    D.TML_AGMT_SEQ = A.SEQ" ).append("\n"); 
		query.append("                                    AND    D.TML_AGMT_VER_NO  = A.NO" ).append("\n"); 
		query.append("                                    AND    C.LGS_COST_CD = D.LGS_COST_CD" ).append("\n"); 
		query.append("                                    AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' " ).append("\n"); 
		query.append("                                    AND    D.THRP_COST_CD_FLG IS NULL" ).append("\n"); 
		query.append("                            #end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                ) A," ).append("\n"); 
		query.append("                                (" ).append("\n"); 
		query.append("                                    SELECT ltrim(regexp_substr((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                  from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                 where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '[^|]+', 1, level ) ,'|') as COST_CODE" ).append("\n"); 
		query.append("                                     FROM dual" ).append("\n"); 
		query.append("                                     connect by level<= ( length((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                    from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                   where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]))+1 - length(replace((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                                                                    from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                                                                   where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '|')) ) / length('|')" ).append("\n"); 
		query.append("                                )B," ).append("\n"); 
		query.append("                                (" ).append("\n"); 
		query.append("                                    SELECT * FROM TES_FILE_IMP_TMP" ).append("\n"); 
		query.append("                                    WHERE 1=1" ).append("\n"); 
		query.append("                                    AND TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]" ).append("\n"); 
		query.append("         " ).append("\n"); 
		query.append("                                ) C" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("    #if (${cost_cd_ftr_rmk} == '') " ).append("\n"); 
		query.append("        WHERE A.COST_CODE=B.COST_CODE(+)" ).append("\n"); 
		query.append("    #else " ).append("\n"); 
		query.append("        WHERE A.COST_CODE=B.COST_CODE -- hdr정보에 데이터 있으면 inner 없음 outter" ).append("\n"); 
		query.append("    #end" ).append("\n"); 
		query.append("                                " ).append("\n"); 
		query.append("                            ) AA," ).append("\n"); 
		query.append("                            (SELECT DISTINCT H.INV_NO" ).append("\n"); 
		query.append("                                           , H.YD_CD" ).append("\n"); 
		query.append("                                           , H.VNDR_SEQ" ).append("\n"); 
		query.append("                                           ," ).append("\n"); 
		query.append("                                             (SELECT LGS_COST_CD" ).append("\n"); 
		query.append("                                               FROM TES_TML_SO_DTL D" ).append("\n"); 
		query.append("                                              WHERE 1=1" ).append("\n"); 
		query.append("                                                    AND H.TML_SO_OFC_CTY_CD = D.TML_SO_OFC_CTY_CD" ).append("\n"); 
		query.append("                                                    AND H.TML_SO_SEQ = D.TML_SO_SEQ" ).append("\n"); 
		query.append("                                                    AND D.CALC_TP_CD = 'A'" ).append("\n"); 
		query.append("                                                    AND NVL(L.CNTR_TPSZ_CD,'N') = NVL(D.CNTR_TPSZ_CD,'N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IO_BND_CD,'N'),'ON',NVL(L.IO_BND_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IO_BND_CD,'N'),'ON',NVL(D.IO_BND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IOC_CD,'N'),'ON',NVL(L.IOC_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IOC_CD,'N'),'ON',NVL(D.IOC_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.LANE_CD,'N'),'ON',NVL(L.LANE_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.LANE_CD,'N'),'ON',NVL(D.LANE_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM', DECODE(L.BB_CGO_FLG,'Y','BB',DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F','TS','TM'),DECODE(L.CNTR_STY_CD,'F','FL','MT'))), 'ON',DECODE(L.CNTR_STY_CD,'F','F','M'),'OF',DECODE(L.CNTR_STY_CD,'F','FL','MT'),'ST',DECODE(L.LOCL_TS_IND_CD,'T','TS',DECODE(L.CNTR_STY_CD,'F','FL','MT'))) = DECODE(H.TML_INV_TP_CD,'TM',SUBSTR(D.LGS_COST_CD,5,2),'ON',SUBSTR(D.LGS_COST_CD,6,1),'OF',SUBSTR(D.LGS_COST_CD,5,2), 'ST',SUBSTR(D.LGS_COST_CD,5,2))" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.DCGO_CLSS_CD,'N'),'ON',NVL(L.DCGO_CLSS_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.DCGO_IND_CD,'N'),'ON',NVL(D.DCGO_IND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',DECODE(D.TML_TRNS_MOD_CD,'','S','S','S',NVL(L.TML_TRNS_MOD_CD,'S')),'N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.TML_TRNS_MOD_CD,'S'),'N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS','F','N'),'N') = DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS',L.CNTR_STY_CD,'N'),'N')" ).append("\n"); 
		query.append("                                                    AND ROWNUM = 1" ).append("\n"); 
		query.append("                                             ) AS LGS_COST_CD" ).append("\n"); 
		query.append("                                           , L.CNTR_NO" ).append("\n"); 
		query.append("                                           , L.CNTR_STY_CD" ).append("\n"); 
		query.append("                                        FROM TES_TML_SO_HDR H" ).append("\n"); 
		query.append("                                           , TES_TML_SO_CNTR_LIST L" ).append("\n"); 
		query.append("                                       WHERE H.YD_CD = @[yd_cd]" ).append("\n"); 
		query.append("                                             AND H.VNDR_SEQ = @[vndr_seq]" ).append("\n"); 
		query.append("                                             AND H.TML_SO_OFC_CTY_CD = L.TML_SO_OFC_CTY_CD" ).append("\n"); 
		query.append("                                             AND H.TML_SO_SEQ = L.TML_SO_SEQ" ).append("\n"); 
		query.append("                                             AND NVL(H.DELT_FLG,'N') <> 'Y'" ).append("\n"); 
		query.append("                                             AND L.VRFY_RSLT_IND_CD = 'CO'" ).append("\n"); 
		query.append("                                             AND H.TML_INV_TP_CD = 'OF'" ).append("\n"); 
		query.append("                                             AND H.TML_INV_RJCT_STS_CD <> 'RJ'" ).append("\n"); 
		query.append("                                             AND EXISTS" ).append("\n"); 
		query.append("                                             (SELECT '1'" ).append("\n"); 
		query.append("                                               FROM TES_TML_SO_DTL D" ).append("\n"); 
		query.append("                                              WHERE 1=1" ).append("\n"); 
		query.append("                                                    AND H.TML_SO_OFC_CTY_CD = D.TML_SO_OFC_CTY_CD" ).append("\n"); 
		query.append("                                                    AND H.TML_SO_SEQ = D.TML_SO_SEQ" ).append("\n"); 
		query.append("                                                    AND D.CALC_TP_CD = 'A'" ).append("\n"); 
		query.append("                                                    AND NVL(L.CNTR_TPSZ_CD,'N') = NVL(D.CNTR_TPSZ_CD,'N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IO_BND_CD,'N'),'ON',NVL(L.IO_BND_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IO_BND_CD,'N'),'ON',NVL(D.IO_BND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IOC_CD,'N'),'ON',NVL(L.IOC_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IOC_CD,'N'),'ON',NVL(D.IOC_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.LANE_CD,'N'),'ON',NVL(L.LANE_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.LANE_CD,'N'),'ON',NVL(D.LANE_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM', DECODE(L.BB_CGO_FLG,'Y','BB',DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F','TS','TM'),DECODE(L.CNTR_STY_CD,'F','FL','MT'))), 'ON',DECODE(L.CNTR_STY_CD,'F','F','M'),'OF',DECODE(L.CNTR_STY_CD,'F','FL','MT'),'ST',DECODE(L.LOCL_TS_IND_CD,'T','TS',DECODE(L.CNTR_STY_CD,'F','FL','MT'))) = DECODE(H.TML_INV_TP_CD,'TM',SUBSTR(D.LGS_COST_CD,5,2),'ON',SUBSTR(D.LGS_COST_CD,6,1),'OF',SUBSTR(D.LGS_COST_CD,5,2), 'ST',SUBSTR(D.LGS_COST_CD,5,2))" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.DCGO_CLSS_CD,'N'),'ON',NVL(L.DCGO_CLSS_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.DCGO_IND_CD,'N'),'ON',NVL(D.DCGO_IND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',DECODE(D.TML_TRNS_MOD_CD,'','S','S','S',NVL(L.TML_TRNS_MOD_CD,'S')),'N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.TML_TRNS_MOD_CD,'S'),'N')" ).append("\n"); 
		query.append("                                                    AND DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS','F','N'),'N') = DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS',L.CNTR_STY_CD,'N'),'N')" ).append("\n"); 
		query.append("                                             )" ).append("\n"); 
		query.append("                                     ) BB" ).append("\n"); 
		query.append("                            WHERE AA.CNTR_NO = BB.CNTR_NO" ).append("\n"); 
		query.append("                            AND AA.COST_CODE = BB.LGS_COST_CD" ).append("\n"); 
		query.append("                            group by BB.CNTR_NO, BB.CNTR_STY_CD" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                        WHERE ROWNUM =1 AND CNTR_NO = Z.CNTR_NO" ).append("\n"); 
		query.append("                      " ).append("\n"); 
		query.append("                      )" ).append("\n"); 
		query.append("                   WHEN Z.BKG_NO = 'OSCAR' THEN 'This is OSCAR BKG'" ).append("\n"); 
		query.append("                   ELSE ''" ).append("\n"); 
		query.append("               END CNTR_RMK, Z.TML_TRNS_MOD_CD" ).append("\n"); 
		query.append("        FROM ( SELECT ORG.CNTR_NO, MC.CNTR_TPSZ_CD CNTR_TPSZ_CD, ORG.INV_GATE_IN_DT, ORG.INV_GATE_OUT_DT, NVL(CALC.AWK_CGO_FLG,'N') AWK_CGO_FLG, NVL(CALC.RC_FLG,'N') RC_FLG," ).append("\n"); 
		query.append("                      CASE" ).append("\n"); 
		query.append("                           WHEN DB2.CNTR_NO IS NOT NULL THEN 'DB'" ).append("\n"); 
		query.append("                           WHEN CALC.CNTR_NO IS NULL AND CALC.CNTR_TP IS NULL THEN 'NN'" ).append("\n"); 
		query.append("                           --WHEN CALC.CNTR_STY_CD = 'F' AND CALC.BKG_NO IS NULL THEN 'NH'" ).append("\n"); 
		query.append("                           WHEN ORG.CNTR_STY_CD = 'F' AND CALC.CNTR_STY_CD IS NULL THEN 'NH'" ).append("\n"); 
		query.append("#if (${tml_calc_ind_cd} != '' and ${tml_calc_ind_cd}=='TP') " ).append("\n"); 
		query.append("       WHEN TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD')-ORG.TO_PRD_DT > 0 THEN 'PD'" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("                           --WHEN ABS(CALC.MVMT_GATE_IN_DT-ORG.INV_GATE_IN_DT) >= 2 OR ABS(CALC.MVMT_GATE_OUT_DT-ORG.INV_GATE_OUT_DT) >=2  THEN 'DD'" ).append("\n"); 
		query.append("						   --WHEN ABS(CALC.MVMT_GATE_IN_DT-ORG.INV_GATE_IN_DT) > 0 OR ABS(NVL(CALC.MVMT_GATE_OUT_DT,TO_DATE('99991231 0000','yyyymmdd hh24mi'))-ORG.INV_GATE_OUT_DT) > 0 then 'DD' -- YYYYMMDD까지 일치하면 통과로 수정.시간, 초까지 맞을 필요없음 2016.01.18" ).append("\n"); 
		query.append("                             WHEN ABS(TO_CHAR(CALC.MVMT_GATE_IN_DT,'YYYYMMDD')-TO_CHAR(ORG.INV_GATE_IN_DT,'YYYYMMDD')) >= 1 AND ABS(NVL(TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD'),TO_CHAR(TO_DATE('99991231 0000','yyyymmdd hh24mi'),'YYYYMMDD'))-TO_CHAR(ORG.INV_GATE_OUT_DT,'YYYYMMDD')) >= 1 " ).append("\n"); 
		query.append("                             THEN 'DT'" ).append("\n"); 
		query.append("                             WHEN ABS(TO_CHAR(CALC.MVMT_GATE_IN_DT,'YYYYMMDD')-TO_CHAR(ORG.INV_GATE_IN_DT,'YYYYMMDD')) >= 1 " ).append("\n"); 
		query.append("                             THEN 'DE'" ).append("\n"); 
		query.append("                             WHEN ABS(NVL(TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD'),TO_CHAR(TO_DATE('99991231 0000','yyyymmdd hh24mi'),'YYYYMMDD'))-TO_CHAR(ORG.INV_GATE_OUT_DT,'YYYYMMDD')) >= 1 " ).append("\n"); 
		query.append("                             THEN 'DS'" ).append("\n"); 
		query.append("                           ELSE ''" ).append("\n"); 
		query.append("                      END DSCR_IND_CD, ORG.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                      ORG.YD_CD, ORG.VNDR_SEQ, ORG.RCV_DT,  --// 2007-07-09 DB INV_NO 출력으로 추가합니다" ).append("\n"); 
		query.append("                      CALC.MVMT_GATE_IN_DT, CALC.MVMT_GATE_OUT_DT, ORG.CNTR_STY_CD, CALC.IO_BND_CD, CALC.LOCL_TS_IND_CD, CALC.DCGO_CLSS_CD, CALC. BB_CGO_FLG," ).append("\n"); 
		query.append("                      CALC.BKG_NO, CALC.BL_NO, CALC.BL_NO_TP, CALC.VSL_CD, CALC.SKD_VOY_NO, CALC.SKD_DIR_CD," ).append("\n"); 
		query.append("                      ABS(ORG.INV_GATE_IN_DT - CALC.MVMT_GATE_IN_DT) GT_IN_DT_DIFF," ).append("\n"); 
		query.append("                      ABS(ORG.INV_GATE_OUT_DT - CALC.MVMT_GATE_OUT_DT) GT_OUT_DT_DIFF," ).append("\n"); 
		query.append("                      CALC.TML_TRNS_MOD_CD" ).append("\n"); 
		query.append("               FROM   ( SELECT L.CNTR_TPSZ_CD2," ).append("\n"); 
		query.append("                               L.CNTR_NO, L.CNTR_TP, L.MVMT_GATE_IN_DT, L.MVMT_GATE_OUT_DT," ).append("\n"); 
		query.append("                               L.BKG_NO," ).append("\n"); 
		query.append("                               L.BL_NO," ).append("\n"); 
		query.append("                               L.BL_NO_TP," ).append("\n"); 
		query.append("                               L.VSL_CD," ).append("\n"); 
		query.append("                               L.SKD_VOY_NO," ).append("\n"); 
		query.append("                               L.SKD_DIR_CD," ).append("\n"); 
		query.append("                               L.CNTR_STY_CD," ).append("\n"); 
		query.append("                               L.IO_BND_CD," ).append("\n"); 
		query.append("                               L.LOCL_TS_IND_CD," ).append("\n"); 
		query.append("                               L.DCGO_CLSS_CD," ).append("\n"); 
		query.append("                               L.BB_CGO_FLG," ).append("\n"); 
		query.append("                               L.AWK_CGO_FLG," ).append("\n"); 
		query.append("                               L.RC_FLG," ).append("\n"); 
		query.append("                               L.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                               DECODE(DECODE(L.PCTL_IO_BND_CD,'T',DECODE(R.TRSP_MOD_CD||O.TRSP_MOD_CD," ).append("\n"); 
		query.append("											'WDVD','T', 'VDWD','T', 'WDWD','T','VDVD','T', DECODE(L.CNTR_STY_CD,'M','L','L')),'L')," ).append("\n"); 
		query.append("									                          'L', DECODE(L.CNTR_STY_CD, 'F',DECODE(L.IO_BND_CD, 'O',DECODE(R.TRSP_MOD_CD,'TD','T','RD','R','WD','B','T')," ).append("\n"); 
		query.append("																		                     DECODE(RL,0,DECODE(TR,'RD','R','WD','B','TD','T','T'),'R'))," ).append("\n"); 
		query.append("													                                     'M',DECODE(O.TRSP_MOD_CD,'TD','T','RD','R','WD','B','T'),'T')," ).append("\n"); 
		query.append("									 VSL_TP) TML_TRNS_MOD_CD" ).append("\n"); 
		query.append("                    FROM (SELECT DISTINCT C.CNTR_TPSZ_CD CNTR_TPSZ_CD2," ).append("\n"); 
		query.append("                               M.CNTR_NO, M.CNTR_TP, M.MVMT_GATE_IN_DT, M.MVMT_GATE_OUT_DT," ).append("\n"); 
		query.append("                               --NVL(MIN(C.BKG_NO),'OSCAR') BKG_NO," ).append("\n"); 
		query.append("                               --DECODE(M.BKG_NO,'OSCAR','OSCAR',MIN(C.BKG_NO)) BKG_NO," ).append("\n"); 
		query.append("                               DECODE(M.BKG_NO,'OSCAR','OSCAR',DECODE(B.BKG_STS_CD,'X',B.TO_BKG_NO,MIN(C.BKG_NO))) BKG_NO, -- 20161110 split후 cancel bkg이 CSR생성시 SAC_TRUNK_VVD_TRD_FNC에서 문제 발생하여 TO_BKG_NO보도록 수정함." ).append("\n"); 
		query.append("                               --MIN(B.BL_NO) BL_NO," ).append("\n"); 
		query.append("                               DECODE(B.BKG_STS_CD,'X',B.TO_BKG_NO,MIN(B.BL_NO)) BL_NO," ).append("\n"); 
		query.append("                               MIN(B.BL_NO_TP) BL_NO_TP," ).append("\n"); 
		query.append("                               B.VSL_CD," ).append("\n"); 
		query.append("                               B.SKD_VOY_NO," ).append("\n"); 
		query.append("                               B.SKD_DIR_CD," ).append("\n"); 
		query.append("                               DECODE(B.BKG_CGO_TP_CD,'F','F','B','F','R','R',NULL,NULL,'M') CNTR_STY_CD," ).append("\n"); 
		query.append("                               DECODE(L.CONTI_CD,BR.CONTI_CD,'O','I') IO_BND_CD," ).append("\n"); 
		query.append("                               --DECODE(NVL(B.PRE_RLY_PORT_CD,NVL(PST_RLY_PORT_CD,'L')),'L','L','T') LOCL_TS_IND_CD," ).append("\n"); 
		query.append("                               DECODE(G.PCTL_IO_BND_CD,'T','T','L') LOCL_TS_IND_CD," ).append("\n"); 
		query.append("                               MIN(NVL(SUBSTR(D.IMDG_CLSS_CD,1,1),'N')) DCGO_CLSS_CD," ).append("\n"); 
		query.append("                               NVL(C.BB_CGO_FLG,'N') BB_CGO_FLG," ).append("\n"); 
		query.append("                               NVL(C.AWK_CGO_FLG,'N') AWK_CGO_FLG," ).append("\n"); 
		query.append("                               NVL(C.RC_FLG,'N') RC_FLG," ).append("\n"); 
		query.append("                               M.TML_SO_TMP_SEQ,   " ).append("\n"); 
		query.append("                               DECODE((SELECT CRR_CD FROM MDM_VSL_CNTR  WHERE VSL_CD = B.VSL_CD),'NYK','V','F') VSL_TP," ).append("\n"); 
		query.append("                               ( SELECT MIN(TRSP_CRR_MOD_CD)" ).append("\n"); 
		query.append("									FROM   TRS_TRSP_SVC_ORD" ).append("\n"); 
		query.append("									WHERE  ( FM_NOD_CD = M.YD_CD OR TO_NOD_CD = M.YD_CD )" ).append("\n"); 
		query.append("									AND    EQ_NO = M.CNTR_NO" ).append("\n"); 
		query.append("									AND    NVL(DELT_FLG,'N') <> 'Y'" ).append("\n"); 
		query.append("--									AND    CRE_DT < P.ATB_DT + 15 " ).append("\n"); 
		query.append("									) TR," ).append("\n"); 
		query.append("								  ( SELECT COUNT(*)" ).append("\n"); 
		query.append("									FROM   TRS_TRSP_RAIL_BIL_ORD" ).append("\n"); 
		query.append("									WHERE  ( FM_NOD_CD = M.YD_CD OR TO_NOD_CD = M.YD_CD )" ).append("\n"); 
		query.append("									AND    EQ_NO = M.CNTR_NO" ).append("\n"); 
		query.append("									AND    NVL(DELT_FLG,'N') <> 'Y'" ).append("\n"); 
		query.append("--									AND    CRE_DT < P.ATB_DT + 15 " ).append("\n"); 
		query.append("									) RL," ).append("\n"); 
		query.append("                               MIN(G.PCTL_NO)       COP_NO,   --chooga                          " ).append("\n"); 
		query.append("                               MIN(( SELECT  MAX(PCTL_SEQ)" ).append("\n"); 
		query.append("								  FROM    SCE_COP_HDR HD, PRD_PROD_CTL_ROUT_DTL GD" ).append("\n"); 
		query.append("								  WHERE   H.CNTR_NO         = HD.CNTR_NO" ).append("\n"); 
		query.append("								  AND     H.BKG_NO          = HD.BKG_NO" ).append("\n"); 
		query.append("								  AND     HD.PCTL_NO         = GD.PCTL_NO" ).append("\n"); 
		query.append("								  AND     GD.NOD_LNK_DIV_CD = 'L'" ).append("\n"); 
		query.append("								  AND     GD.PCTL_SEQ < G.PCTL_SEQ )) R_SEQ, --chooga" ).append("\n"); 
		query.append("						       MAX(( SELECT MIN(PCTL_SEQ)" ).append("\n"); 
		query.append("								  FROM    SCE_COP_HDR OD, PRD_PROD_CTL_ROUT_DTL OG" ).append("\n"); 
		query.append("								  WHERE   OD.CNTR_NO        = H.CNTR_NO" ).append("\n"); 
		query.append("								  AND     OD.BKG_NO         = H.BKG_NO" ).append("\n"); 
		query.append("								  AND     OD.PCTL_NO         = OG.PCTL_NO" ).append("\n"); 
		query.append("								  AND     OG.NOD_LNK_DIV_CD = 'L'" ).append("\n"); 
		query.append("								  AND     OG.PCTL_SEQ > G.PCTL_SEQ )) O_SEQ, --chooga" ).append("\n"); 
		query.append("							   MAX((SELECT NVL(X.PCTL_IO_BND_CD,'') PCTL_IO_BND_CD" ).append("\n"); 
		query.append("                                FROM PRD_PROD_CTL_ROUT_DTL X" ).append("\n"); 
		query.append("                                WHERE 1=1" ).append("\n"); 
		query.append("                                AND X.PCTL_NO = G.PCTL_NO" ).append("\n"); 
		query.append("                                AND X.PCTL_SEQ = ( SELECT " ).append("\n"); 
		query.append("                                                        CASE" ).append("\n"); 
		query.append("                                                        WHEN ORG_NOD_CD = @[yd_cd]" ).append("\n"); 
		query.append("                                                        THEN PCTL_SEQ-1" ).append("\n"); 
		query.append("                                                        WHEN DEST_NOD_CD = @[yd_cd] " ).append("\n"); 
		query.append("                                                        THEN PCTL_SEQ+1" ).append("\n"); 
		query.append("                                                        END CUR_PCTL_SEQ" ).append("\n"); 
		query.append("                                                    FROM PRD_PROD_CTL_ROUT_DTL X" ).append("\n"); 
		query.append("                                                    WHERE 1=1" ).append("\n"); 
		query.append("                                                    AND X.PCTL_NO = G.PCTL_NO" ).append("\n"); 
		query.append("                                                    AND X.VSL_CD = B.VSL_CD" ).append("\n"); 
		query.append("                                                    AND X.SKD_VOY_NO = B.SKD_VOY_NO" ).append("\n"); 
		query.append("                                                    AND X.SKD_DIR_CD = B.SKD_DIR_CD" ).append("\n"); 
		query.append("                                                    AND ROWNUM = 1 ))) PCTL_IO_BND_CD --chooga" ).append("\n"); 
		query.append("                        FROM   ( SELECT	MIO.CNTR_NO CNTR_NO," ).append("\n"); 
		query.append("                                        MIO.CNMV_SEQ CNMV_SEQ," ).append("\n"); 
		query.append("                                	    MIO.CNTR_TP," ).append("\n"); 
		query.append("                                	    MIO.CNTR_TPSZ_CD," ).append("\n"); 
		query.append("                                	CASE WHEN MIO.MVMT_STS_CD||MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')" ).append("\n"); 
		query.append("                                	    THEN MIO.CNMV_EVNT_DT " ).append("\n"); 
		query.append("                                	    ELSE MIO.PREV_EVNT_DT" ).append("\n"); 
		query.append("                                	END MVMT_GATE_IN_DT," ).append("\n"); 
		query.append("                                   CASE	WHEN MIO.MVMT_STS_CD||MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')" ).append("\n"); 
		query.append("                                		THEN NULL" ).append("\n"); 
		query.append("                                		ELSE MIO.CNMV_EVNT_DT" ).append("\n"); 
		query.append("                                   END MVMT_GATE_OUT_DT," ).append("\n"); 
		query.append("                                	MIO.CNTR_STY_CD," ).append("\n"); 
		query.append("                                	MIO.CNMV_CYC_NO CYC," ).append("\n"); 
		query.append("                                	MIO.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                                	MIO.YD_CD," ).append("\n"); 
		query.append("                                	--MIO.BKG_NO" ).append("\n"); 
		query.append("                                    CASE WHEN LENGTH(MIO.BKG_NO) = 10 " ).append("\n"); 
		query.append("                                	     THEN 'OSCAR'  " ).append("\n"); 
		query.append("                                	ELSE MIO.BKG_NO" ).append("\n"); 
		query.append("                                	END BKG_NO" ).append("\n"); 
		query.append("                                FROM (SELECT PREV_MVMT_STS,MVMT_STS_CD,NEXT_MVMT_STS," ).append("\n"); 
		query.append("#if (${tml_calc_ind_cd} == 'TP')    " ).append("\n"); 
		query.append("                                       PREV_EVNT_DT," ).append("\n"); 
		query.append("                                       CNMV_EVNT_DT,                                                " ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("                                	   NVL(PREV_EVNT_DT,CNMV_EVNT_DT) PREV_EVNT_DT," ).append("\n"); 
		query.append("                                       --NVL(PREV_EVNT_DT,TO_DATE([fm_prd_dt], 'YYYY-MM-DD')) PREV_EVNT_DT," ).append("\n"); 
		query.append("                                	   NVL(CNMV_EVNT_DT,TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')) CNMV_EVNT_DT," ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("                                       NEXT_EVNT_DT," ).append("\n"); 
		query.append("                                       CNTR_NO,CNMV_YR,CNMV_SEQ,CNTR_STY_CD,TML_SO_TMP_SEQ,YD_CD,BKG_NO,CNMV_SPLIT_NO,MVMT_FM,CNTR_TP,CNTR_TPSZ_CD,CNMV_CYC_NO " ).append("\n"); 
		query.append("                                FROM	(" ).append("\n"); 
		query.append("                                  SELECT M.PREV_MVMT_STS," ).append("\n"); 
		query.append("                                         M.MVMT_STS_CD," ).append("\n"); 
		query.append("                                  		-- GATE OUT이 없고 GATE IN만 있는 경우 조건 추가. " ).append("\n"); 
		query.append("                                 		 DECODE(M.NEXT_MVMT_STS,'',DECODE((SELECT MVMT_STS_CD FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND CNMV_EVNT_DT > M.CNMV_EVNT_DT  AND ROWNUM=1),'','ZZ',(SELECT MVMT_STS_CD FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND CNMV_EVNT_DT > M.CNMV_EVNT_DT AND ROWNUM=1)),M.NEXT_MVMT_STS) NEXT_MVMT_STS, " ).append("\n"); 
		query.append("                                 		 M.PREV_EVNT_DT," ).append("\n"); 
		query.append("                                		 M.CNMV_EVNT_DT," ).append("\n"); 
		query.append("                                  		 M.NEXT_EVNT_DT," ).append("\n"); 
		query.append("                                 		 M.CNTR_NO," ).append("\n"); 
		query.append("                                 		 M.CNMV_YR," ).append("\n"); 
		query.append("                                 		 M.CNMV_SEQ," ).append("\n"); 
		query.append("                                 		 M.CNTR_STY_CD," ).append("\n"); 
		query.append("                                 		 M.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                                 		 M.YD_CD," ).append("\n"); 
		query.append("                                 		 M.BKG_NO," ).append("\n"); 
		query.append("                                 		 M.CNMV_SPLIT_NO," ).append("\n"); 
		query.append("                                 		 M.MVMT_FM," ).append("\n"); 
		query.append("                                 		 M.CNTR_TP," ).append("\n"); 
		query.append("                                 		 M.CNTR_TPSZ_CD," ).append("\n"); 
		query.append("                                 		 M.CNMV_CYC_NO" ).append("\n"); 
		query.append("                                FROM (SELECT M2.PREV_MVMT_STS," ).append("\n"); 
		query.append("                                       M2.MVMT_STS_CD," ).append("\n"); 
		query.append("                                       M2.NEXT_MVMT_STS," ).append("\n"); 
		query.append("                                       M2.PREV_EVNT_DT," ).append("\n"); 
		query.append("                                       M2.CNMV_EVNT_DT," ).append("\n"); 
		query.append("                                       M2.NEXT_EVNT_DT," ).append("\n"); 
		query.append("                                       M2.CNTR_NO," ).append("\n"); 
		query.append("                                       M2.CNMV_YR," ).append("\n"); 
		query.append("                                       M2.CNMV_SEQ," ).append("\n"); 
		query.append("                                       M2.CNTR_STY_CD," ).append("\n"); 
		query.append("                                       P2.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                                       M2.YD_CD," ).append("\n"); 
		query.append("                                       M2.BKG_NO," ).append("\n"); 
		query.append("                                       M2.CNMV_SPLIT_NO," ).append("\n"); 
		query.append("                                       M2.MVMT_FM," ).append("\n"); 
		query.append("                                       M2.CNTR_TP," ).append("\n"); 
		query.append("                                       M2.CNTR_TPSZ_CD," ).append("\n"); 
		query.append("                                       M2.CNMV_CYC_NO" ).append("\n"); 
		query.append("                                FROM " ).append("\n"); 
		query.append("                                  (SELECT --M.PREV_MVMT_STS," ).append("\n"); 
		query.append("                                         DECODE(M.PREV_MVMT_STS,'',DECODE((SELECT MVMT_STS_CD FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND CNMV_EVNT_DT < M.CNMV_EVNT_DT AND ORG_YD_CD = M.YD_CD AND ROWNUM=1),'','WW',(SELECT MVMT_STS_CD FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND CNMV_EVNT_DT < M.CNMV_EVNT_DT AND ORG_YD_CD = M.YD_CD AND ROWNUM=1)),M.PREV_MVMT_STS) PREV_MVMT_STS," ).append("\n"); 
		query.append("                                         M.MVMT_STS_CD," ).append("\n"); 
		query.append("                                 		 DECODE(M.NEXT_MVMT_STS,'',DECODE((SELECT MVMT_STS_CD FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND CNMV_EVNT_DT > M.CNMV_EVNT_DT  AND ROWNUM=1),'','ZZ',(SELECT MVMT_STS_CD FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND CNMV_EVNT_DT > M.CNMV_EVNT_DT AND ROWNUM=1)),M.NEXT_MVMT_STS) NEXT_MVMT_STS, " ).append("\n"); 
		query.append("                                 		 M.PREV_EVNT_DT," ).append("\n"); 
		query.append("                                		 M.CNMV_EVNT_DT," ).append("\n"); 
		query.append("                                  		 M.NEXT_EVNT_DT," ).append("\n"); 
		query.append("                                 		 M.CNTR_NO," ).append("\n"); 
		query.append("                                 		 M.CNMV_YR," ).append("\n"); 
		query.append("                                 		 M.CNMV_SEQ," ).append("\n"); 
		query.append("                                 		 M.CNTR_STY_CD," ).append("\n"); 
		query.append("                                 		 M.YD_CD," ).append("\n"); 
		query.append("                                 		 --NVL(M.BKG_NO,M.BKG_NO2) AS BKG_NO," ).append("\n"); 
		query.append("                                         COALESCE(M.BKG_NO,M.BKG_NO2,(SELECT BKG_NO FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND YD_CD = M.YD_CD AND (CNMV_EVNT_DT = M.CNMV_EVNT_DT OR CNMV_EVNT_DT = M.PREV_EVNT_DT) AND BKG_NO IS NOT NULL AND ROWNUM=1)) AS BKG_NO," ).append("\n"); 
		query.append("                                 		 M.CNMV_SPLIT_NO," ).append("\n"); 
		query.append("                                 		 M.MVMT_FM," ).append("\n"); 
		query.append("                                 		 M.CNTR_TP," ).append("\n"); 
		query.append("                                 		 M.CNTR_TPSZ_CD," ).append("\n"); 
		query.append("                                 		 M.CNMV_CYC_NO" ).append("\n"); 
		query.append("                                FROM (" ).append("\n"); 
		query.append("                                		SELECT  /*+ ORDERED */LAG(M.MVMT_STS_CD)  OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) PREV_MVMT_STS," ).append("\n"); 
		query.append("                                				M.MVMT_STS_CD," ).append("\n"); 
		query.append("                                				LEAD(M.MVMT_STS_CD) OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) NEXT_MVMT_STS," ).append("\n"); 
		query.append("                                				LAG(M.CNMV_EVNT_DT) OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) PREV_EVNT_DT,  " ).append("\n"); 
		query.append("                                				M.CNMV_EVNT_DT," ).append("\n"); 
		query.append("                                				LEAD(M.CNMV_EVNT_DT)OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) NEXT_EVNT_DT," ).append("\n"); 
		query.append("                                				M.CNTR_NO," ).append("\n"); 
		query.append("                                				M.CNMV_YR," ).append("\n"); 
		query.append("                                				M.CNMV_SEQ," ).append("\n"); 
		query.append("                                				P.CNTR_STY_CD,                      " ).append("\n"); 
		query.append("                                				P.YD_CD," ).append("\n"); 
		query.append("                                				(SELECT TO_BKG_NO FROM BKG_BOOKING WHERE BKG_NO = M.BKG_NO AND BKG_STS_CD = 'X') BKG_NO," ).append("\n"); 
		query.append("                                				M.BKG_NO AS BKG_NO2," ).append("\n"); 
		query.append("                                				M.CNMV_SPLIT_NO," ).append("\n"); 
		query.append("                                				DECODE(M.FCNTR_FLG, 'N', 'M', 'F') MVMT_FM," ).append("\n"); 
		query.append("                                				M.CNTR_TPSZ_CD CNTR_TP," ).append("\n"); 
		query.append("                                				P.CNTR_TPSZ_CD," ).append("\n"); 
		query.append("                                				M.CNMV_CYC_NO" ).append("\n"); 
		query.append("                                       FROM TES_FILE_IMP_TMP P, CTM_MOVEMENT M" ).append("\n"); 
		query.append("                                      WHERE P.TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]" ).append("\n"); 
		query.append("                                        AND P.TML_SO_SEQ = @[tml_so_seq]" ).append("\n"); 
		query.append("                                  		AND M.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')-730) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')+730)+ 0.99999421" ).append("\n"); 
		query.append("                                  		AND M.CNTR_NO = P.CNTR_NO" ).append("\n"); 
		query.append("                                  		AND M.ORG_YD_CD = P.YD_CD" ).append("\n"); 
		query.append("                                        --AND NVL(M.MVMT_CRE_TP_CD, 'N') <> 'C'" ).append("\n"); 
		query.append("                                	ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ ASC, M.CNMV_SPLIT_NO ) M )M2, TES_FILE_IMP_TMP P2" ).append("\n"); 
		query.append("                                	WHERE M2.CNTR_NO = P2.CNTR_NO" ).append("\n"); 
		query.append("                                	AND M2.CNTR_STY_CD = P2.CNTR_STY_CD" ).append("\n"); 
		query.append("                                	--AND (TO_CHAR(M2.PREV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_IN_DT,'YYYYMMDD') OR TO_CHAR(M2.PREV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_OUT_DT,'YYYYMMDD'))" ).append("\n"); 
		query.append("                                    --AND (NVL(TO_CHAR(M2.PREV_EVNT_DT,'YYYYMMDD'),TO_CHAR(M2.CNMV_EVNT_DT,'YYYYMMDD')) = TO_CHAR(P2.INV_GATE_IN_DT,'YYYYMMDD') OR NVL(TO_CHAR(M2.PREV_EVNT_DT,'YYYYMMDD'),TO_CHAR(M2.CNMV_EVNT_DT,'YYYYMMDD')) = TO_CHAR(P2.INV_GATE_OUT_DT,'YYYYMMDD'))" ).append("\n"); 
		query.append("                                    AND (TO_CHAR(M2.PREV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_IN_DT,'YYYYMMDD') OR TO_CHAR(M2.CNMV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_IN_DT,'YYYYMMDD') OR TO_CHAR(M2.PREV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_OUT_DT,'YYYYMMDD') OR TO_CHAR(M2.CNMV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_OUT_DT,'YYYYMMDD'))" ).append("\n"); 
		query.append("                                	ORDER BY M2.CNTR_NO, M2.PREV_EVNT_DT, M2.CNMV_SEQ, M2.CNMV_SPLIT_NO) M )) MIO" ).append("\n"); 
		query.append("#if (${tml_calc_ind_cd} == 'TP') " ).append("\n"); 
		query.append("                                    WHERE	(MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                                		                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                                	                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                				               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("                                    AND		MIO.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421)" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("                                    WHERE	((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                                	                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                                                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                			               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("                                		-- GATE OUT이 없고 GATE IN만 있는 경우 조건 추가 " ).append("\n"); 
		query.append("                                		OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )" ).append("\n"); 
		query.append("                                		AND		(MIO.PREV_EVNT_DT >= TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))" ).append("\n"); 
		query.append("                                		AND		(MIO.CNMV_EVNT_DT <= TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')+ 0.99999421))" ).append("\n"); 
		query.append("                                        OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                                	                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                                                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                			               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("                                		OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )" ).append("\n"); 
		query.append("                                		AND		(MIO.PREV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))" ).append("\n"); 
		query.append("                                		AND		(MIO.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421))" ).append("\n"); 
		query.append("                                        OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                                	                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                                                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                			               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("                                		OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )" ).append("\n"); 
		query.append("                                		AND		(MIO.PREV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421)" ).append("\n"); 
		query.append("                                		AND		(MIO.CNMV_EVNT_DT > TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')))" ).append("\n"); 
		query.append("                                        OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                                	                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                                                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                			               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("                                		OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )" ).append("\n"); 
		query.append("                                		AND		(MIO.PREV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))" ).append("\n"); 
		query.append("                                		AND		(MIO.CNMV_EVNT_DT > TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')))" ).append("\n"); 
		query.append("                                        OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                                	                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                                                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                			               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("                                		OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )" ).append("\n"); 
		query.append("                                		AND		(MIO.NEXT_EVNT_DT IS NULL)" ).append("\n"); 
		query.append("                                		AND		(MIO.CNMV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')))" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("                                        ) M," ).append("\n"); 
		query.append("                               BKG_CONTAINER C, BKG_BOOKING B, BKG_DG_CGO D, " ).append("\n"); 
		query.append("                               MDM_LOCATION L, MDM_LOCATION BR, SCE_COP_HDR H, PRD_PROD_CTL_ROUT_DTL G " ).append("\n"); 
		query.append("                        WHERE  M.CNTR_NO        = C.CNTR_NO(+)" ).append("\n"); 
		query.append("                        AND    M.CYC            = C.CNMV_CYC_NO(+)" ).append("\n"); 
		query.append("                        --AND  SUBSTR(M.BKG_NO,1,10) = SUBSTR(C.BKG_NO(+),1,10) --20161012 split booking가져올 수 있도록 10자리만 비교함. xinyi 요청" ).append("\n"); 
		query.append("                        --AND  DECODE(B.BKG_STS_CD,'X',SUBSTR(M.BKG_NO,1,10),M.BKG_NO) = DECODE(B.BKG_STS_CD,'X',SUBSTR(C.BKG_NO,1,10),C.BKG_NO)" ).append("\n"); 
		query.append("                        AND    M.BKG_NO = C.BKG_NO(+)" ).append("\n"); 
		query.append("                        AND    C.BKG_NO         = B.BKG_NO(+)" ).append("\n"); 
		query.append("                        AND    B.BKG_NO         = D.BKG_NO(+)" ).append("\n"); 
		query.append("                        AND    M.CNTR_NO        = H.CNTR_NO(+) " ).append("\n"); 
		query.append("						AND    M.BKG_NO         = H.BKG_NO(+) " ).append("\n"); 
		query.append("						AND    H.COP_STS_CD(+) <> 'X' " ).append("\n"); 
		query.append("						AND    H.PCTL_NO              = G.PCTL_NO(+)" ).append("\n"); 
		query.append("						AND    G.NOD_LNK_DIV_CD(+)   = 'N' " ).append("\n"); 
		query.append("						AND    SUBSTR(G.ORG_NOD_CD(+),1,5)   = SUBSTR(@[yd_cd],1,5)  " ).append("\n"); 
		query.append("                        AND    L.LOC_CD         = SUBSTR(M.YD_CD,1,5)" ).append("\n"); 
		query.append("                        AND    B.POR_CD         = BR.LOC_CD(+)" ).append("\n"); 
		query.append("                        GROUP BY C.CNTR_TPSZ_CD, M.CNTR_NO, M.CNTR_TP, M.MVMT_GATE_IN_DT, M.MVMT_GATE_OUT_DT," ).append("\n"); 
		query.append("                                  B.VSL_CD, B.SKD_VOY_NO, B.SKD_DIR_CD," ).append("\n"); 
		query.append("                                 DECODE(B.BKG_CGO_TP_CD,'F','F','B','F','R','R',NULL,NULL,'M')," ).append("\n"); 
		query.append("                                 DECODE(L.CONTI_CD,BR.CONTI_CD,'O','I')," ).append("\n"); 
		query.append("                                 --DECODE(NVL(B.PRE_RLY_PORT_CD,NVL(PST_RLY_PORT_CD,'L')),'L','L','T')," ).append("\n"); 
		query.append("                                 NVL(C.BB_CGO_FLG,'N'), B.BKG_STS_CD, B.TO_BKG_NO," ).append("\n"); 
		query.append("                                 NVL(C.AWK_CGO_FLG,'N'), NVL(C.RC_FLG,'N'), M.TML_SO_TMP_SEQ,M.YD_CD,M.BKG_NO,DECODE(G.PCTL_IO_BND_CD,'T','T','L'))L, PRD_PROD_CTL_ROUT_DTL R, PRD_PROD_CTL_ROUT_DTL O" ).append("\n"); 
		query.append("			         WHERE  L.COP_NO              = R.PCTL_NO(+)" ).append("\n"); 
		query.append("			         AND    R.NOD_LNK_DIV_CD(+)   = 'L'" ).append("\n"); 
		query.append("			         AND    L.R_SEQ               = R.PCTL_SEQ(+)" ).append("\n"); 
		query.append("			         AND    L.COP_NO              = O.PCTL_NO(+)" ).append("\n"); 
		query.append("			         AND    O.NOD_LNK_DIV_CD(+)   = 'L'" ).append("\n"); 
		query.append("			         AND    L.O_SEQ               = O.PCTL_SEQ(+)) CALC," ).append("\n"); 
		query.append("                        ( SELECT CNTR_NO, CNTR_TPSZ_CD, INV_GATE_IN_DT, INV_GATE_OUT_DT, CNTR_STY_CD, TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                                 YD_CD, VNDR_SEQ, RCV_DT, TO_PRD_DT" ).append("\n"); 
		query.append("                          FROM   TES_FILE_IMP_TMP" ).append("\n"); 
		query.append("                          WHERE  TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]" ).append("\n"); 
		query.append("                          AND    TML_SO_SEQ = @[tml_so_seq] ) ORG" ).append("\n"); 
		query.append("                          , MST_CONTAINER MC" ).append("\n"); 
		query.append("						  , (" ).append("\n"); 
		query.append("                                SELECT CNTR_NO" ).append("\n"); 
		query.append("                                FROM" ).append("\n"); 
		query.append("                                (" ).append("\n"); 
		query.append("                                    SELECT   BB.CNTR_NO, BB.CNTR_STY_CD, MAX(BB.INV_NO) INV_NO" ).append("\n"); 
		query.append("                                    FROM" ).append("\n"); 
		query.append("                                    (" ).append("\n"); 
		query.append("                                        SELECT A.COST_CODE, C.CNTR_NO " ).append("\n"); 
		query.append("                                        FROM(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            SELECT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE" ).append("\n"); 
		query.append("                                            FROM ( SELECT COUNT(T.LGS_COST_CD) CNT," ).append("\n"); 
		query.append("                                                 T.LGS_COST_CD TP," ).append("\n"); 
		query.append("                                                 T.THRP_LGS_COST_CD CD," ).append("\n"); 
		query.append("                                                 H.TML_AGMT_OFC_CTY_CD CTY," ).append("\n"); 
		query.append("                                                 H.TML_AGMT_SEQ SEQ," ).append("\n"); 
		query.append("                                                 H.TML_AGMT_VER_NO NO" ).append("\n"); 
		query.append("                                                FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T" ).append("\n"); 
		query.append("                                                WHERE  H.YD_CD            = @[yd_cd]" ).append("\n"); 
		query.append("                                                AND    H.VNDR_SEQ         = @[vndr_seq]" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_STS_CD = 'C'" ).append("\n"); 
		query.append("                                                AND    H.DELT_FLG        = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            #if (${agmt_ftr_inv_tp_cd} == 'OS')" ).append("\n"); 
		query.append("                                                   AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                                   AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            #elseif (${agmt_ftr_inv_tp_cd} == 'OT' || ${agmt_ftr_inv_tp_cd} == 'OFON' || ${agmt_ftr_inv_tp_cd} == 'OTOS')" ).append("\n"); 
		query.append("                                                   AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[to_prd_dt],'-') -- To Period Date([to_prd_dt]) ==> OFF Dock Terminal Invoice (ON Dock 비용계산시)" ).append("\n"); 
		query.append("                                                   AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[to_prd_dt],'-') -- To Period Date([to_prd_dt]) ==> OFF Dock Terminal Invoice (ON Dock 비용계산시)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            #end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)" ).append("\n"); 
		query.append("                                                     FROM   TES_TML_AGMT_HDR M" ).append("\n"); 
		query.append("                                                     WHERE  M.YD_CD               = @[yd_cd]" ).append("\n"); 
		query.append("                                                     AND    M.VNDR_SEQ            = @[vndr_seq]" ).append("\n"); 
		query.append("                                                     AND    M.TML_AGMT_STS_CD     = 'C'" ).append("\n"); 
		query.append("                                                     AND    M.DELT_FLG            = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            #if (${agmt_ftr_inv_tp_cd} == 'OS')" ).append("\n"); 
		query.append("                                                        AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                                        AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-')) -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            #elseif (${agmt_ftr_inv_tp_cd} == 'OT' || ${agmt_ftr_inv_tp_cd} == 'OFON' || ${agmt_ftr_inv_tp_cd} == 'OTOS')" ).append("\n"); 
		query.append("                                                        AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[to_prd_dt],'-') -- To Period Date([to_prd_dt]) ==> OFF Dock Terminal Invoice (ON Dock 비용계산시)" ).append("\n"); 
		query.append("                                                        AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[to_prd_dt],'-')) -- To Period Date([to_prd_dt]) ==> OFF Dock Terminal Invoice (ON Dock 비용계산시)" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            #else" ).append("\n"); 
		query.append("                                                        AND 1=2 )" ).append("\n"); 
		query.append("                                            #end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("                                                GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO," ).append("\n"); 
		query.append("                                                T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("                                            WHERE  C.COST_CALC_MZD_CD = 'A'" ).append("\n"); 
		query.append("                                            AND    C.TML_AGMT_MGMT_CD = 'A'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            #if (${agmt_ftr_inv_tp_cd} == 'OT' || ${agmt_ftr_inv_tp_cd} == 'OTOS' )" ).append("\n"); 
		query.append("                                            AND    C.FDCK_CY_TML_FLG = 'Y' -- OFF Dock Terminal Invoice" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            #elseif (${agmt_ftr_inv_tp_cd} == 'OS')" ).append("\n"); 
		query.append("                                            AND    C.FDCK_CY_STO_FLG = 'Y' -- OFF Dock Storage Invoice" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            #elseif (${agmt_ftr_inv_tp_cd} == 'OFON')" ).append("\n"); 
		query.append("                                            AND    C.MRN_TML_FLG = 'Y' AND C.LGS_COST_CD LIKE 'TMND%'  -- OFF Dock 화면에서 ON Dock 비용계산시" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            #end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            AND    D.TML_AGMT_OFC_CTY_CD = A.CTY" ).append("\n"); 
		query.append("                                            AND    D.TML_AGMT_SEQ = A.SEQ" ).append("\n"); 
		query.append("                                            AND    D.TML_AGMT_VER_NO  = A.NO" ).append("\n"); 
		query.append("                                            AND    C.LGS_COST_CD = D.LGS_COST_CD" ).append("\n"); 
		query.append("                                            AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' " ).append("\n"); 
		query.append("                                            AND    D.THRP_COST_CD_FLG IS NULL" ).append("\n"); 
		query.append("											GROUP BY DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD))" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                --OTOS이면 OS용" ).append("\n"); 
		query.append("                                #if (${agmt_ftr_inv_tp_cd} == 'OTOS') " ).append("\n"); 
		query.append("                                           UNION ALL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            SELECT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE" ).append("\n"); 
		query.append("                                            FROM ( SELECT COUNT(T.LGS_COST_CD) CNT," ).append("\n"); 
		query.append("                                                 T.LGS_COST_CD TP," ).append("\n"); 
		query.append("                                                 T.THRP_LGS_COST_CD CD," ).append("\n"); 
		query.append("                                                 H.TML_AGMT_OFC_CTY_CD CTY," ).append("\n"); 
		query.append("                                                 H.TML_AGMT_SEQ SEQ," ).append("\n"); 
		query.append("                                                 H.TML_AGMT_VER_NO NO" ).append("\n"); 
		query.append("                                                FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T" ).append("\n"); 
		query.append("                                                WHERE  H.YD_CD            = @[yd_cd]" ).append("\n"); 
		query.append("                                                AND    H.VNDR_SEQ         = @[vndr_seq]" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_STS_CD = 'C'" ).append("\n"); 
		query.append("                                                AND    H.DELT_FLG        = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                                AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)" ).append("\n"); 
		query.append("                                                     FROM   TES_TML_AGMT_HDR M" ).append("\n"); 
		query.append("                                                     WHERE  M.YD_CD               = @[yd_cd]" ).append("\n"); 
		query.append("                                                     AND    M.VNDR_SEQ            = @[vndr_seq]" ).append("\n"); 
		query.append("                                                     AND    M.TML_AGMT_STS_CD     = 'C'" ).append("\n"); 
		query.append("                                                     AND    M.DELT_FLG            = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                     AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                                     AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-')) -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("                                                GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO," ).append("\n"); 
		query.append("                                                T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("                                            WHERE  C.COST_CALC_MZD_CD = 'A'" ).append("\n"); 
		query.append("                                            AND    C.TML_AGMT_MGMT_CD = 'A'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            AND    C.FDCK_CY_STO_FLG = 'Y' -- OFF Dock Storage Invoice" ).append("\n"); 
		query.append("                                            AND    D.TML_AGMT_OFC_CTY_CD = A.CTY" ).append("\n"); 
		query.append("                                            AND    D.TML_AGMT_SEQ = A.SEQ" ).append("\n"); 
		query.append("                                            AND    D.TML_AGMT_VER_NO  = A.NO" ).append("\n"); 
		query.append("                                            AND    C.LGS_COST_CD = D.LGS_COST_CD" ).append("\n"); 
		query.append("                                            AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' " ).append("\n"); 
		query.append("                                            AND    D.THRP_COST_CD_FLG IS NULL" ).append("\n"); 
		query.append("											GROUP BY DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD))" ).append("\n"); 
		query.append("                                    #end" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                        ) A," ).append("\n"); 
		query.append("                                        (" ).append("\n"); 
		query.append("                                            SELECT ltrim(regexp_substr((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                          from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                         where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '[^|]+', 1, level ) ,'|') as COST_CODE" ).append("\n"); 
		query.append("                                             FROM dual" ).append("\n"); 
		query.append("                                             connect by level<= ( length((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                            from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                           where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]))+1 - length(replace((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                                                                            from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                                                                           where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '|')) ) / length('|')" ).append("\n"); 
		query.append("                                        )B," ).append("\n"); 
		query.append("                                        (" ).append("\n"); 
		query.append("                                            SELECT CNTR_NO FROM TES_FILE_IMP_TMP" ).append("\n"); 
		query.append("                                            WHERE 1=1" ).append("\n"); 
		query.append("                                            AND TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]" ).append("\n"); 
		query.append("                 " ).append("\n"); 
		query.append("                                        ) C" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("            #if (${cost_cd_ftr_rmk} == '') " ).append("\n"); 
		query.append("                WHERE A.COST_CODE=B.COST_CODE(+)" ).append("\n"); 
		query.append("            #else " ).append("\n"); 
		query.append("                WHERE A.COST_CODE=B.COST_CODE -- hdr정보에 데이터 있으면 inner 없음 outter" ).append("\n"); 
		query.append("            #end" ).append("\n"); 
		query.append("                                        " ).append("\n"); 
		query.append("                                    ) AA," ).append("\n"); 
		query.append("                                    	(SELECT HDR.INV_NO" ).append("\n"); 
		query.append("                                               , HDR.YD_CD" ).append("\n"); 
		query.append("                                               , HDR.VNDR_SEQ" ).append("\n"); 
		query.append("                                               , HDR.LGS_COST_CD" ).append("\n"); 
		query.append("                                               , HDR.CNTR_NO" ).append("\n"); 
		query.append("                                               , HDR.CNTR_STY_CD" ).append("\n"); 
		query.append("                                            FROM" ).append("\n"); 
		query.append("                                                 (SELECT DISTINCT CNTR_NO" ).append("\n"); 
		query.append("                                                   FROM TES_FILE_IMP_TMP" ).append("\n"); 
		query.append("                                                  WHERE 1=1" ).append("\n"); 
		query.append("                                                        AND TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd]" ).append("\n"); 
		query.append("                                                        AND TML_SO_SEQ=@[tml_so_seq]" ).append("\n"); 
		query.append("                                                 ) CNTR" ).append("\n"); 
		query.append("                                               ," ).append("\n"); 
		query.append("                                                 (SELECT DISTINCT H.INV_NO" ).append("\n"); 
		query.append("                                                      , H.YD_CD" ).append("\n"); 
		query.append("                                                      , H.VNDR_SEQ" ).append("\n"); 
		query.append("                                                      ," ).append("\n"); 
		query.append("                                                        (SELECT LGS_COST_CD" ).append("\n"); 
		query.append("                                                          FROM TES_TML_SO_DTL D" ).append("\n"); 
		query.append("                                                         WHERE 1=1" ).append("\n"); 
		query.append("                                                               AND H.TML_SO_OFC_CTY_CD = D.TML_SO_OFC_CTY_CD" ).append("\n"); 
		query.append("                                                               AND H.TML_SO_SEQ = D.TML_SO_SEQ" ).append("\n"); 
		query.append("                                                               AND D.CALC_TP_CD = 'A'" ).append("\n"); 
		query.append("                                                               AND NVL(L.CNTR_TPSZ_CD,'N') = NVL(D.CNTR_TPSZ_CD,'N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IO_BND_CD,'N'),'ON',NVL(L.IO_BND_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IO_BND_CD,'N'),'ON',NVL(D.IO_BND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IOC_CD,'N'),'ON',NVL(L.IOC_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IOC_CD,'N'),'ON',NVL(D.IOC_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.LANE_CD,'N'),'ON',NVL(L.LANE_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.LANE_CD,'N'),'ON',NVL(D.LANE_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM', DECODE(L.BB_CGO_FLG,'Y','BB',DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F','TS','TM'),DECODE(L.CNTR_STY_CD,'F','FL','MT'))), 'ON',DECODE(L.CNTR_STY_CD,'F','F','M'),'OF',DECODE(L.CNTR_STY_CD,'F','FL','MT'),'ST',DECODE(L.LOCL_TS_IND_CD,'T','TS',DECODE(L.CNTR_STY_CD,'F','FL','MT'))) = DECODE(H.TML_INV_TP_CD,'TM',SUBSTR(D.LGS_COST_CD,5,2),'ON',SUBSTR(D.LGS_COST_CD,6,1),'OF',SUBSTR(D.LGS_COST_CD,5,2), 'ST',SUBSTR(D.LGS_COST_CD,5,2))" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.DCGO_CLSS_CD,'N'),'ON',NVL(L.DCGO_CLSS_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.DCGO_IND_CD,'N'),'ON',NVL(D.DCGO_IND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',DECODE(D.TML_TRNS_MOD_CD,'','S','S','S',NVL(L.TML_TRNS_MOD_CD,'S')),'N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.TML_TRNS_MOD_CD,'S'),'N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS','F','N'),'N') = DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS',L.CNTR_STY_CD,'N'),'N')" ).append("\n"); 
		query.append("                                                               AND ROWNUM = 1" ).append("\n"); 
		query.append("                                                        ) AS LGS_COST_CD" ).append("\n"); 
		query.append("                                                      , L.CNTR_NO" ).append("\n"); 
		query.append("                                                      , L.CNTR_STY_CD" ).append("\n"); 
		query.append("                                                   FROM TES_TML_SO_HDR H" ).append("\n"); 
		query.append("                                                      , TES_TML_SO_CNTR_LIST L" ).append("\n"); 
		query.append("                                                  WHERE H.YD_CD = @[yd_cd]" ).append("\n"); 
		query.append("                                                        AND H.VNDR_SEQ = @[vndr_seq]" ).append("\n"); 
		query.append("                                                        AND H.TML_SO_OFC_CTY_CD = L.TML_SO_OFC_CTY_CD" ).append("\n"); 
		query.append("                                                        AND H.TML_SO_SEQ = L.TML_SO_SEQ" ).append("\n"); 
		query.append("                                                        AND NVL(H.DELT_FLG,'N') <> 'Y'" ).append("\n"); 
		query.append("                                                        AND L.VRFY_RSLT_IND_CD = 'CO'" ).append("\n"); 
		query.append("                                                        AND H.TML_INV_TP_CD = 'OF'" ).append("\n"); 
		query.append("                                                        AND H.TML_INV_RJCT_STS_CD <> 'RJ'" ).append("\n"); 
		query.append("                                                        AND" ).append("\n"); 
		query.append("                                                        (TO_DATE(H.FM_PRD_DT,'YYYYMMDD') BETWEEN TO_DATE(REPLACE(@[fm_prd_dt],'-'),'YYYYMMDD') AND TO_DATE(REPLACE(@[to_prd_dt],'-'),'YYYYMMDD')" ).append("\n"); 
		query.append("                                                         OR TO_DATE(H.TO_PRD_DT,'YYYYMMDD') BETWEEN TO_DATE(REPLACE(@[fm_prd_dt],'-'),'YYYYMMDD') AND TO_DATE(REPLACE(@[to_prd_dt],'-'),'YYYYMMDD'))" ).append("\n"); 
		query.append("                                                        AND EXISTS" ).append("\n"); 
		query.append("                                                        (SELECT '1'" ).append("\n"); 
		query.append("                                                          FROM TES_TML_SO_DTL D" ).append("\n"); 
		query.append("                                                         WHERE 1=1" ).append("\n"); 
		query.append("                                                               AND H.TML_SO_OFC_CTY_CD = D.TML_SO_OFC_CTY_CD" ).append("\n"); 
		query.append("                                                               AND H.TML_SO_SEQ = D.TML_SO_SEQ" ).append("\n"); 
		query.append("                                                               AND D.CALC_TP_CD = 'A'" ).append("\n"); 
		query.append("                                                               AND NVL(L.CNTR_TPSZ_CD,'N') = NVL(D.CNTR_TPSZ_CD,'N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IO_BND_CD,'N'),'ON',NVL(L.IO_BND_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IO_BND_CD,'N'),'ON',NVL(D.IO_BND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IOC_CD,'N'),'ON',NVL(L.IOC_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IOC_CD,'N'),'ON',NVL(D.IOC_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.LANE_CD,'N'),'ON',NVL(L.LANE_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.LANE_CD,'N'),'ON',NVL(D.LANE_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM', DECODE(L.BB_CGO_FLG,'Y','BB',DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F','TS','TM'),DECODE(L.CNTR_STY_CD,'F','FL','MT'))), 'ON',DECODE(L.CNTR_STY_CD,'F','F','M'),'OF',DECODE(L.CNTR_STY_CD,'F','FL','MT'),'ST',DECODE(L.LOCL_TS_IND_CD,'T','TS',DECODE(L.CNTR_STY_CD,'F','FL','MT'))) = DECODE(H.TML_INV_TP_CD,'TM',SUBSTR(D.LGS_COST_CD,5,2),'ON',SUBSTR(D.LGS_COST_CD,6,1),'OF',SUBSTR(D.LGS_COST_CD,5,2), 'ST',SUBSTR(D.LGS_COST_CD,5,2))" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',NVL(L.DCGO_CLSS_CD,'N'),'ON',NVL(L.DCGO_CLSS_CD,'N'),'OF','N','ST','N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.DCGO_IND_CD,'N'),'ON',NVL(D.DCGO_IND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',DECODE(D.TML_TRNS_MOD_CD,'','S','S','S',NVL(L.TML_TRNS_MOD_CD,'S')),'N') = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.TML_TRNS_MOD_CD,'S'),'N')" ).append("\n"); 
		query.append("                                                               AND DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS','F','N'),'N') = DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS',L.CNTR_STY_CD,'N'),'N')" ).append("\n"); 
		query.append("                                                        )" ).append("\n"); 
		query.append("                                                 ) HDR" ).append("\n"); 
		query.append("                                           WHERE 1=1" ).append("\n"); 
		query.append("                                                 AND HDR.CNTR_NO = CNTR.CNTR_NO" ).append("\n"); 
		query.append("                                           GROUP BY HDR.INV_NO" ).append("\n"); 
		query.append("                                               , HDR.YD_CD" ).append("\n"); 
		query.append("                                               , HDR.VNDR_SEQ" ).append("\n"); 
		query.append("                                               , HDR.LGS_COST_CD" ).append("\n"); 
		query.append("                                               , HDR.CNTR_NO" ).append("\n"); 
		query.append("                                               , HDR.CNTR_STY_CD" ).append("\n"); 
		query.append("                                      ) BB" ).append("\n"); 
		query.append("                                    WHERE AA.CNTR_NO = BB.CNTR_NO" ).append("\n"); 
		query.append("                                    AND AA.COST_CODE = BB.LGS_COST_CD" ).append("\n"); 
		query.append("                                    group by BB.CNTR_NO, BB.CNTR_STY_CD" ).append("\n"); 
		query.append("                                )                                 " ).append("\n"); 
		query.append("                               ) DB2" ).append("\n"); 
		query.append("        WHERE ORG.CNTR_NO        = CALC.CNTR_NO(+)" ).append("\n"); 
		query.append("        AND   ORG.CNTR_NO        = MC.CNTR_NO(+)" ).append("\n"); 
		query.append("        AND   ORG.CNTR_NO        = DB2.CNTR_NO(+)" ).append("\n"); 
		query.append("        AND   ORG.TML_SO_TMP_SEQ = CALC.TML_SO_TMP_SEQ(+) ) Z ) X" ).append("\n"); 
		query.append("        WHERE DIFF_RANK = 1" ).append("\n"); 

	}
}