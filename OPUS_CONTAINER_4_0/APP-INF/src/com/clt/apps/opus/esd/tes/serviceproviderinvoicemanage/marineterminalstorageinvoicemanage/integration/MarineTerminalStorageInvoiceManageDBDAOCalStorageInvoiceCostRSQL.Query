<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="MarineTerminalStorageInvoiceManageDBDAOCalStorageInvoiceCostRSQL">
			<desc><![CDATA[CalStorageInvoiceCost]]></desc>
			<sql><![CDATA[
#if (${agmt_cost_yn} == 'Y') 
WITH AGMTCOST AS
(
SELECT ltrim(regexp_substr((select COST_CD_FTR_RMK
                            from tes_tml_so_hdr
                            where TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd] AND TML_SO_SEQ = @[tml_so_seq]), '[^|]+', 1, level ) ,'|') as cost_cd
 FROM dual
 connect by level<= ( length((select COST_CD_FTR_RMK
                                from tes_tml_so_hdr
                               where TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd] AND TML_SO_SEQ = @[tml_so_seq]))+1 - length(replace((select COST_CD_FTR_RMK
                                                                                from tes_tml_so_hdr
                                                                               where TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd] AND TML_SO_SEQ = @[tml_so_seq]), '|')) ) / length('|')
)
SELECT A.* FROM 
(
#end

    SELECT IBFLAG,
            CALC_TP_CD,
            CALC_COST_GRP_CD,
            LGS_COST_CD,
            CNTR_NO, 
            CNTR_TPSZ_CD,
            IO_BND_CD,
            DCGO_IND_CD,
            CNTR_STY_CD,
            STAY_DYS,
            FREE_DYS,
            PAID_DAY,
            FREE_DY_XCLD_DYS,	
            DECODE(SIGN(CALC_PDYS_CALC_AMT), 1, OVR_DYS - PAID_DYS, OVR_DYS) OVR_DYS,  -- PAY_DYS는 CALC_PDYS_CALC_AMT가 (+)면 (+), (-)면 (-)이다
            DECODE(SIGN(CALC_PDYS_CALC_AMT), 1, OVR_DYS2 - PAID_DYS, OVR_DYS2) OVR_DYS2,
            VOL_TR_UT_CD,
            CTRT_RT,
            ROUND(DECODE(SIGN(CALC_PDYS_CALC_AMT), 1, NEW_CALC_AMT - CALC_PDYS_CALC_AMT, NEW_CALC_AMT)*INV_XCH_RT,2) CALC_AMT,  --Paid Day에 대한 Rate를 구한 값(CALC_PDYS_CALC_AMT)이 0이나 (-)금액이 아닌 경우에만 Over Day+Paid Day에서 빼준다. 
            ROUND(DECODE(SIGN(CALC_PDYS_INV_AMT ), 1, NEW_INV_AMT  - CALC_PDYS_INV_AMT , NEW_INV_AMT )*INV_XCH_RT,2) INV_AMT,   --Paid 된 값을 뺀 나머지에 대한 Tier Rate를 구하기 위해 수정했음
            CURR_CHK,
            CURR_CD,
            INV_XCH_RT,
            ACCT_CD,
            TML_AGMT_OFC_CTY_CD,
            TML_AGMT_SEQ,
            TML_AGMT_VER_NO,
            TO_DAY
    FROM
    (SELECT IBFLAG,
      CALC_TP_CD,
      CALC_COST_GRP_CD,
      LGS_COST_CD,
      CNTR_NO,
      CNTR_TPSZ_CD,
      IO_BND_CD,
      DCGO_IND_CD,
      CNTR_STY_CD,
      STAY_DYS,
      FREE_DYS,
      PAID_DAY,
      EXD_DAY FREE_DY_XCLD_DYS,
      (new_TO_DAY - FM_DAY)+1 OVR_DYS,
      (new_TO_DAY - FM_DAY)+1 OVR_DYS2,
      (calc_PDYS  - FM_DAY)+1 PAID_DYS,  -- Paid된 일수에 대한 Tier별 일수를 구한다.
      VOL_TR_UT_CD,
      MAX(RATE) CTRT_RT,
      (DECODE(SIGN(TODYS-((new_TO_DAY - FM_DAY)+1)), -1, ((new_TO_DAY - FM_DAY)+1)-TODYS, ((new_TO_DAY - FM_DAY)+1)) * RATE) * DECODE(VOL_TR_UT_CD, 'T', DECODE(CNTR_TPSZ_CD, 'D7', 2.25, 'D8', 2.4, 'D9', 2.4, 'DW', 2.65, 'DX', 2.25, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, 2)), 1) NEW_CALC_AMT,    -- OVER DAY와 Paid DAY를 합쳐서 RATE 산출
      (DECODE(SIGN(TODYS-((new_TO_DAY - FM_DAY)+1)), -1, ((new_TO_DAY - FM_DAY)+1)-TODYS, ((new_TO_DAY - FM_DAY)+1)) * RATE) * DECODE(VOL_TR_UT_CD, 'T', DECODE(CNTR_TPSZ_CD, 'D7', 2.25, 'D8', 2.4, 'D9', 2.4, 'DW', 2.65, 'DX', 2.25, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, 2)), 1) NEW_INV_AMT,
      (DECODE(SIGN(TODYS-((calc_PDYS - FM_DAY)+1)), -1, ((calc_PDYS - FM_DAY)+1)-TODYS, ((calc_PDYS - FM_DAY)+1)) * RATE) * DECODE(VOL_TR_UT_CD, 'T', DECODE(CNTR_TPSZ_CD, 'D7', 2.25, 'D8', 2.4, 'D9', 2.4, 'DW', 2.65, 'DX', 2.25, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, 2)), 1) CALC_PDYS_CALC_AMT, -- Paid DAY의 RATE를 산출(위에서 뺄것임, 단 양수의 값일 경우만..)
      (DECODE(SIGN(TODYS-((calc_PDYS - FM_DAY)+1)), -1, ((calc_PDYS - FM_DAY)+1)-TODYS, ((calc_PDYS - FM_DAY)+1)) * RATE) * DECODE(VOL_TR_UT_CD, 'T', DECODE(CNTR_TPSZ_CD, 'D7', 2.25, 'D8', 2.4, 'D9', 2.4, 'DW', 2.65, 'DX', 2.25, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, 2)), 1) CALC_PDYS_INV_AMT,
      CURR_CHK,
      CURR_CD,
      INV_XCH_RT,
      ACCT_CD,
      TML_AGMT_OFC_CTY_CD,
      TML_AGMT_SEQ,
      TML_AGMT_VER_NO,
      TO_DAY
    FROM (
        SELECT 'I' IBFLAG,
          'A' CALC_TP_CD,
          'SD' CALC_COST_GRP_CD,
          COST_CODE LGS_COST_CD,
          CNTR_NO,
          TPSZ CNTR_TPSZ_CD,
          IO IO_BND_CD,
          DG DCGO_IND_CD,
          CNTR_STY_CD,
          STAY_DAY STAY_DYS,
          FDYS FREE_DYS,
          PDYS PAID_DAY,
          EDAY EXD_DAY,
          OVER_DAY,
          FMDYS,
          TODYS,
          ( CASE WHEN 0 >= NVL(FMDYS, 1) THEN 0 + 1 ELSE NVL(FMDYS, 1) END ) FM_DAY,
          ( CASE WHEN OVER_DAY <= NVL(TODYS, 999) THEN OVER_DAY ELSE NVL(TODYS, 999) END ) TO_DAY,
          ( CASE WHEN OVER_DAY+PDYS <= NVL(TODYS, 999) THEN OVER_DAY+PDYS ELSE NVL(TODYS, 999) END ) new_TO_DAY, -- OVER DAY와 PDYS를 합쳐서 구한다.
          ( CASE WHEN PDYS <= NVL(TODYS, 999) THEN PDYS ELSE NVL(TODYS, 999) END ) calc_PDYS, -- PDYS 의 Rate를 구하기 위함. 위에서 OVER DAY+PDYS에서 이 값을 뺄꺼다.
          UOM VOL_TR_UT_CD,
          RATE,
          CURR_CHK,
          CURR CURR_CD,
          INV_XCH_RT,
          DECODE(L.COST_CODE,'SRNDTS',DECODE(L.CNTR_STY_CD,'F','512213','512222'),C.ACCT_CD) AS ACCT_CD,
          L.TML_AGMT_OFC_CTY_CD,
          L.TML_AGMT_SEQ,
          L.TML_AGMT_VER_NO
        FROM (SELECT COST_CODE, 
                     CNTR_NO,
                     TPSZ,
                     IO,
                     DG,
                     CNTR_STY_CD,
                     DECODE(PDYS,0,STAY_DAY,STAY_DAY2) STAY_DAY,
                     STAY_DAY2,
                     FDYS,
                     PDYS, 
                     EDAY,
                     DECODE(PDYS,0,DECODE(SIGN(STAY_DAY - FDYS - EDAY),-1,0,0,0,(STAY_DAY - FDYS - EDAY)),(STAY_DAY2 - EDAY)) OVER_DAY,
                     UOM,
                     RATE,
                     FMDYS,
                     TODYS,
                     CURR_CHK,
                     CURR,
                     INV_XCH_RT,
                     TML_AGMT_OFC_CTY_CD,
                     TML_AGMT_SEQ,
                     TML_AGMT_VER_NO
              FROM (
            SELECT COST_CODE,
              CNTR_NO,
              TPSZ,
              IO,
              DG,
              CNTR_STY_CD,
              STAY_DAY,
              STAY_DAY2,
              FDYS,
              --DECODE(SIGN(PDYS), 1, PDYS, 0, 0, -1, 0) PDYS,
              DECODE(@[sto_dys_ind_cd], 'IO', 0, DECODE(SIGN(PDYS), 1, PDYS, 0, 0, -1, 0)) PDYS,
              --DECODE(DECODE(SIGN(PDYS), 1, PDYS, 0, 0, -1, 0), 0, GIO_EDAY, INV_DT_EDAY) EDAY,
              DECODE(@[sto_dys_ind_cd], 'IO', GIO_EDAY , INV_DT_EDAY) EDAY,                                      
              UOM,
              RATE, 
              FMDYS,
              TODYS,
              DECODE(@[curr_cd], CURR, 'Y', 'N') CURR_CHK,
              CURR,
              ROUND((SELECT USD_LOCL_XCH_RT FROM GL_MON_XCH_RT WHERE ACCT_XCH_RT_YRMON = SUBSTR(REPLACE(@[to_prd_dt],'-'),1,6) AND CURR_CD =@[curr_cd])/(select USD_LOCL_XCH_RT from GL_MON_XCH_RT where ACCT_XCH_RT_YRMON = SUBSTR(REPLACE(@[to_prd_dt],'-'),1,6) and CURR_CD = CURR),4) INV_XCH_RT,
              TML_AGMT_OFC_CTY_CD,
              TML_AGMT_SEQ,
              TML_AGMT_VER_NO
            FROM (
                SELECT FF.PDYS-(DECODE(FF.SAT_FLG, 'Y', NVL(FF.PDYS_SAT,0), 0)+DECODE(FF.SUN_FLG, 'Y', NVL(FF.PDYS_SUN,0), 0)+DECODE(FF.HOL_FLG, 'Y', NVL(FF.PDYS_HOL,0), 0)) PDYS,    --PDYS 기간내의 토일휴 를 뺀다.
                       DECODE(FF.SAT_FLG, 'Y', FF.GIO_SAT, 0)+DECODE(FF.SUN_FLG, 'Y', FF.GIO_SUN, 0)+DECODE(FF.HOL_FLG, 'Y', FF.GIO_HOL, 0) GIO_EDAY,             --GI/GO Exclude day
                       DECODE(FF.SAT_FLG, 'Y', FF.INV_DT_SAT, 0)+DECODE(FF.SUN_FLG, 'Y', FF.INV_DT_SUN, 0)+DECODE(FF.HOL_FLG, 'Y', FF.INV_DT_HOL, 0) INV_DT_EDAY, --Invoice period Exclude day
                       FF.COST_CODE,
                       FF.CNTR_NO,
                       FF.TPSZ,
                       FF.IO,
                       FF.DG,
                       FF.CNTR_STY_CD,
                       FF.STAY_DAY,
                       FF.FDYS,
                       FF.UOM,
                       FF.RATE,
                       FF.FMDYS,
                       FF.TODYS,
                       FF.CURR_CHK,
                       FF.CURR,
                       FF.STAY_DAY2,
                       FF.AGMT_DY,
                       FF.SAT_FLG,
                       FF.SUN_FLG,
                       FF.HOL_FLG,
                       FF.GI,
                       FF.GO,
                       FF.TML_AGMT_OFC_CTY_CD,
                       FF.TML_AGMT_SEQ,
                       FF.TML_AGMT_VER_NO
                FROM (
                SELECT F.COST_CODE,
                  F.CNTR_NO,
                  F.TPSZ,
                  F.IO,
                  F.DG,
                  F.CNTR_STY_CD,
                  F.STAY_DAY,
                  F.FDYS,
                  DECODE(SIGN(F.PDYS-F.FDYS),-1,0,0,0,1,F.PDYS-F.FDYS) PDYS, 
                  F.UOM,
                  F.RATE,
                  F.FMDYS,
                  F.TODYS,
                  DECODE(@[curr_cd], F.CURR, 'Y', 'N') CURR_CHK,
                  F.CURR,
                  F.STAY_DAY2,
                  F.AGMT_DY,
                  TES_WE_CNT_FNC ('SUN',     '', F.GIO_I-1,    F.GIO_O+1) GIO_SUN,  -- GI/GO 에 따른 excl day계산
                  TES_WE_CNT_FNC ('SAT',     '', F.GIO_I-1,    F.GIO_O+1) GIO_SAT,  -- GI/GO 에 따른 excl day계산
                  TES_HOL_CNT_FNC(@[yd_cd],  F.GIO_I,    F.GIO_O) GIO_HOL,  -- GI/GO 에 따른 excl day계산
                  
                  TES_WE_CNT_FNC ('SUN',     '', DECODE(SIGN((F.GIO_I-1)-(F.INV_DT_I-1)),-1,F.INV_DT_I-1,F.GIO_I-1), DECODE(SIGN((F.GIO_O+1)-(F.INV_DT_O+1)),-1,F.GIO_O+1,F.INV_DT_O+1)) INV_DT_SUN, -- inv period 에 따른 excl day계산
                  TES_WE_CNT_FNC ('SAT',     '', DECODE(SIGN((F.GIO_I-1)-(F.INV_DT_I-1)),-1,F.INV_DT_I-1,F.GIO_I-1), DECODE(SIGN((F.GIO_O+1)-(F.INV_DT_O+1)),-1,F.GIO_O+1,F.INV_DT_O+1)) INV_DT_SAT,           
                  TES_HOL_CNT_FNC(@[yd_cd],  DECODE(SIGN(F.GIO_I-F.INV_DT_I),-1,F.INV_DT_I,F.GIO_I), DECODE(SIGN(F.GIO_O-F.INV_DT_O),-1,F.GIO_O,F.INV_DT_O)) INV_DT_HOL,
                  
                  CASE WHEN TES_WE_CNT_FNC ('SUN',     '', F.INV_DT_I-1, F.GIO_I+1   ) < 0
                       THEN TES_WE_CNT_FNC ('SUN',     '', F.GIO_I-1,    F.INV_DT_I+1)
                       ELSE TES_WE_CNT_FNC ('SUN',     '', F.INV_DT_I-1, F.GIO_I+1   )
                  END PDYS_SUN,  -- PDYS 휴일계산
                  CASE WHEN TES_WE_CNT_FNC ('SAT',     '', F.INV_DT_I-1, F.GIO_I+1   ) < 0
                       THEN TES_WE_CNT_FNC ('SAT',     '', F.GIO_I-1,    F.INV_DT_I+1)
                       ELSE TES_WE_CNT_FNC ('SAT',     '', F.INV_DT_I-1, F.GIO_I+1   )
                  END PDYS_SAT,  -- PDYS 휴일계산      
                  CASE WHEN TES_HOL_CNT_FNC(@[yd_cd],  F.INV_DT_I, F.GIO_I   ) <= 0
                       THEN TES_HOL_CNT_FNC(@[yd_cd],  F.GIO_I,    F.INV_DT_I)
                       ELSE TES_HOL_CNT_FNC(@[yd_cd],  F.INV_DT_I, F.GIO_I   )
                  END PDYS_HOL,  -- PDYS 휴일계산
                   
                  F.SAT_FLG,
                  F.SUN_FLG,
                  F.HOL_FLG,
                  F.GI,
                  F.GO,
                  F.TML_AGMT_OFC_CTY_CD,
                  F.TML_AGMT_SEQ,
                  F.TML_AGMT_VER_NO
                FROM (
                    SELECT I.COST_CODE COST_CODE,
                      I.CNTR_NO CNTR_NO,
                      I.TPSZ TPSZ,
                      I.IO IO,
                      I.DG DG,
                      I.CNTR_STY_CD,
                      DECODE(@[sto_dys_ind_cd], 'IO', TO_DATE(SUBSTR(TO_CHAR(I.GO, 'YYYYMMDD'), 1, 8), 'YYYYMMDD'), DECODE(I.GO, NULL, TO_DATE(replace(@[to_prd_dt], '-'), 'YYYYMMDD'), DECODE(SIGN(replace(@[to_prd_dt],'-')-TO_CHAR(I.GO,'YYYYMMDD')),-1,TO_DATE(replace(@[to_prd_dt],'-'),'YYYYMMDD'),TO_DATE(SUBSTR(TO_CHAR(I.GO, 'YYYYMMDD'), 1, 8), 'YYYYMMDD')))) - TO_DATE(SUBSTR(TO_CHAR(I.GI, 'YYYYMMDD'), 1, 8), 'YYYYMMDD') + DECODE(D.CMNC_HRMNT, '2400', 1, '0000', 0, DECODE(SIGN(TO_NUMBER(D.CMNC_HRMNT) - TO_NUMBER(SUBSTR(TO_CHAR(I.GI, 'YYYYMMDDHH24MI'), 9, 4))), -1, 0, 0, 0, 1)) STAY_DAY,
                      DECODE(I.GO, NULL, TO_DATE(replace(@[to_prd_dt], '-'), 'YYYYMMDD'), I.GO)  GIO_O,
                      I.GI + DECODE(D.CMNC_HRMNT, '2400', 1, '0000', 0, DECODE(SIGN(TO_NUMBER(D.CMNC_HRMNT) - TO_NUMBER(SUBSTR(TO_CHAR(I.GI, 'YYYYMMDDHH24MI'), 9, 4))), -1, 0, 0, 0, 1)) GIO_I,
                      DECODE(@[sto_dys_ind_cd], 'IO', I.GO, DECODE(I.GO, NULL, TO_DATE(replace(@[to_prd_dt], '-'), 'YYYYMMDD'), DECODE(SIGN(replace(@[to_prd_dt],'-')-TO_CHAR(I.GO,'YYYYMMDD')),-1,TO_DATE(replace(@[to_prd_dt],'-'),'YYYYMMDD'), I.GO))) INV_DT_O,
                      TO_DATE(replace(@[fm_prd_dt], '-'), 'YYYYMMDD') + DECODE(D.CMNC_HRMNT, '2400', 1, '0000', 0, DECODE(SIGN(TO_NUMBER(D.CMNC_HRMNT) - TO_NUMBER(SUBSTR(TO_CHAR(I.GI, 'YYYYMMDDHH24MI'), 9, 4))), -1, 0, 0, 0, 1)) INV_DT_I, -- 2012.05.21 수정
                      DECODE(I.GO, NULL, TO_DATE(replace(@[to_prd_dt], '-'), 'YYYYMMDD'), DECODE(@[sto_dys_ind_cd],'IO',TO_DATE(SUBSTR(TO_CHAR(I.GO, 'YYYYMMDD'), 1, 8), 'YYYYMMDD'),DECODE(SIGN(replace(@[to_prd_dt],'-')-TO_CHAR(I.GO,'YYYYMMDD')),-1,TO_DATE(replace(@[to_prd_dt],'-'),'YYYYMMDD'),TO_DATE(SUBSTR(TO_CHAR(I.GO, 'YYYYMMDD'), 1, 8), 'YYYYMMDD')))) - TO_DATE(SUBSTR(TO_CHAR(TO_DATE(replace(@[fm_prd_dt], '-'), 'YYYYMMDD'), 'YYYYMMDD'), 1, 8), 'YYYYMMDD') + DECODE(D.CMNC_HRMNT, '2400', 1, '0000', 0, DECODE(SIGN(TO_NUMBER(D.CMNC_HRMNT) - TO_NUMBER(SUBSTR(TO_CHAR(I.GI, 'YYYYMMDDHH24MI'), 9, 4))), -1, 0, 0, 0, 1)) STAY_DAY2,
                      NVL(DECODE(DC.AGMT_DYS, NULL, D.FT_DYS, 0, D.FT_DYS, DC.AGMT_DYS), 0) FDYS,
                      DECODE(@[sto_dys_ind_cd], 'IO', 0, TO_DATE(replace(@[fm_prd_dt], '-'), 'YYYYMMDD') - TO_DATE(TO_CHAR(I.GI, 'YYYYMMDD'), 'YYYYMMDD')) PDYS,
                      RD.TML_AGMT_VOL_UT_CD UOM,
                      DECODE(RD.TML_AGMT_VOL_UT_CD, 'C', RC.AGMT_RT, RD.AGMT_UT_RT) RATE,
                      RD.FM_TR_DYS FMDYS,
                      RD.TO_TR_DYS TODYS,
                      I.GI GI,
                      I.GO GO,
                      E.SAT_FLG SAT_FLG,
                      E.SUN_FLG SUN_FLG,
                      E.HOL_FLG HOL_FLG,
                      D.CMNC_HRMNT CMNC,
                      DC.AGMT_DYS AGMT_DY,
                      H.TML_AGMT_OFC_CTY_CD,
                      H.TML_AGMT_SEQ,
                      H.TML_AGMT_VER_NO,
                      D.CURR_CD CURR,
                      I.RC_FLG
                    FROM (
                        SELECT DECODE(LOCL_TS_IND_CD, 'T', DECODE(SUBSTR(C.COST_CODE, 5, 2), 'TS', C.COST_CODE), -- 수정(20070522)
                              DECODE(CNTR_STY_CD, 'F', DECODE(SUBSTR(C.COST_CODE, 5, 2), 'FL', C.COST_CODE), -- 수정(20070522)
                                  DECODE(SUBSTR(C.COST_CODE, 5, 2), 'MT', C.COST_CODE))) COST_CODE,-- 수정(20070522)
                          L.CNTR_NO CNTR_NO,
                          L.CNTR_TPSZ_CD TPSZ,
                          L.IO_BND_CD IO,
                          NVL(L.DCGO_CLSS_CD, 'N') DG,
                          H.VNDR_SEQ VNDR,
                          H.YD_CD YD,
                          L.INV_GATE_OUT_DT GO,
                          L.INV_GATE_IN_DT GI,
                          L.RC_FLG,
                          NVL(L.AWK_CGO_FLG, 'N') AWK_CGO_FLG,
                          L.CNTR_STY_CD
                        FROM TES_TML_SO_CNTR_LIST L,
                          TES_TML_SO_HDR H,
                          (
                            SELECT C.LGS_COST_CD COST_CODE
                            FROM TES_TML_SO_COST C
                            WHERE C.STO_INV_FLG = 'Y'
                              AND C.COST_CALC_MZD_CD = 'A' ) C
                        WHERE VRFY_RSLT_IND_CD = 'CO'
                          AND L.TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]
                          AND L.TML_SO_SEQ = @[tml_so_seq]
                          AND DECODE(LOCL_TS_IND_CD, 'T', 'TS', DECODE(CNTR_STY_CD, 'F', 'FL', 'MT')) = SUBSTR(C.COST_CODE, 5, 2) -- 수정(20070522)
                          AND L.TML_SO_OFC_CTY_CD = H.TML_SO_OFC_CTY_CD
                          AND L.TML_SO_SEQ = H.TML_SO_SEQ
                          AND DECODE(@[sto_dys_ind_cd], 'IO', DECODE(L.INV_GATE_OUT_DT, NULL, 'DT', 'IO'), 'DT') = DECODE(@[sto_dys_ind_cd], 'IO', 'IO', 'DT') ) I,
                      TES_TML_AGMT_HDR H,
                      TES_TML_AGMT_DTL D,
                      TES_TML_AGMT_TP_SZ DC,
                      TES_TML_AGMT_APLY_DY E,
                      TES_TML_AGMT_DG_CGO_CLSS G,
                      TES_TML_AGMT_DTL RD,
                      TES_TML_AGMT_TP_SZ RC,
                      TES_TML_AGMT_DG_CGO_CLSS R
                    WHERE H.YD_CD = @[yd_cd]
                      AND H.VNDR_SEQ = @[vndr_seq]
                      AND H.TML_AGMT_STS_CD = 'C'
                      AND H.DELT_FLG = 'N'
                      AND TO_CHAR(H.EFF_FM_DT, 'YYYYMMDD') <= replace(@[fm_prd_dt], '-')
                      AND TO_CHAR(H.EFF_TO_DT, 'YYYYMMDD') >= replace(@[fm_prd_dt], '-')
                      AND H.TML_AGMT_VER_NO = (
                        SELECT MAX(M.TML_AGMT_VER_NO)
                        FROM TES_TML_AGMT_HDR M
                        WHERE M.YD_CD = @[yd_cd]
                          AND M.VNDR_SEQ = @[vndr_seq]
                          AND M.TML_AGMT_STS_CD = 'C'
                          AND M.DELT_FLG = 'N'
                          AND TO_CHAR(M.EFF_FM_DT, 'YYYYMMDD') <= replace(@[fm_prd_dt], '-')
                          AND TO_CHAR(M.EFF_TO_DT, 'YYYYMMDD') >= replace(@[fm_prd_dt], '-') )
                      AND H.TML_AGMT_OFC_CTY_CD = D.TML_AGMT_OFC_CTY_CD
                      AND H.TML_AGMT_SEQ = D.TML_AGMT_SEQ
                      AND H.TML_AGMT_VER_NO = D.TML_AGMT_VER_NO
                      AND I.COST_CODE = D.LGS_COST_CD
                      AND D.TML_AGMT_TP_CD = 'S'
                      AND D.AUTO_CALC_FLG = 'Y'
                      AND D.TML_STO_AGMT_TP_CD = 'FD'
                      AND D.TML_FREE_DYS_TP_CD = 'D'
                      AND D.TML_AGMT_OFC_CTY_CD = DC.TML_AGMT_OFC_CTY_CD(+)
                      AND D.TML_AGMT_SEQ = DC.TML_AGMT_SEQ(+)
                      AND D.TML_AGMT_VER_NO = DC.TML_AGMT_VER_NO(+)
                      AND D.TML_AGMT_DTL_SEQ = DC.TML_AGMT_DTL_SEQ(+)
                      AND DC.CNTR_TPSZ_CD = DECODE(I.CNTR_STY_CD, 'F', DECODE(SUBSTR(I.TPSZ, 1, 1), 'R', DECODE(I.RC_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), 'T', DECODE(I.RC_FLG,'Y','R'||SUBSTR(I.TPSZ,2,1),I.TPSZ), 'O', DECODE(I.AWK_CGO_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), 'F', DECODE(I.AWK_CGO_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), 'P', DECODE(I.AWK_CGO_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), 'A', DECODE(I.AWK_CGO_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), 'S', DECODE(I.AWK_CGO_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), I.TPSZ), I.TPSZ)
                      AND DC.CNTR_APLY_TP_CD(+) = 'D'
                      AND NVL(D.IO_BND_CD, 'N') = DECODE(NVL(D.IO_BND_CD, 'N'), 'N', 'N', 'S', 'S', I.IO)
                      AND NVL(D.TML_CNTR_STY_CD,'N') = DECODE(NVL(D.TML_CNTR_STY_CD,'N'),'N','N','S','S',I.CNTR_STY_CD)
                      AND D.TML_AGMT_OFC_CTY_CD = E.TML_AGMT_OFC_CTY_CD(+)
                      AND D.TML_AGMT_SEQ = E.TML_AGMT_SEQ(+)
                      AND D.TML_AGMT_VER_NO = E.TML_AGMT_VER_NO(+)
                      AND D.TML_AGMT_DTL_SEQ = E.TML_AGMT_DTL_SEQ(+)
                      AND D.TML_AGMT_OFC_CTY_CD = G.TML_AGMT_OFC_CTY_CD(+)
                      AND D.TML_AGMT_SEQ = G.TML_AGMT_SEQ(+)
                      AND D.TML_AGMT_VER_NO = G.TML_AGMT_VER_NO(+)
                      AND D.TML_AGMT_DTL_SEQ = G.TML_AGMT_DTL_SEQ(+)
                      AND DECODE(NVL(D.DCGO_APLY_TP_CD, 'N'), 'N', 'N', G.DCGO_APLY_TP_CD) = DECODE(NVL(D.DCGO_APLY_TP_CD, 'N'), 'N', 'N', 'D')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'A', DECODE(I.DG, 'N', 'N', G.DCGO_SAM_CLSS_FLG), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'A', DECODE(I.DG, 'N', 'N', 'Y'), 'N')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'A', DECODE(I.DG, 'N', G.DCGO_NON_CLSS_FLG, 'N'), 'S', DECODE(I.DG, 'N', G.DCGO_NON_CLSS_FLG, 'N'), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'A', DECODE(I.DG, 'N', 'Y', 'N'), 'S', DECODE(I.DG, 'N', 'Y', 'N'), 'N')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '1', G.DCGO_N1ST_CLSS_FLG, 'N'), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '1', 'Y', 'N'), 'N')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '2', G.DCGO_N2ND_CLSS_FLG, 'N'), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '2', 'Y', 'N'), 'N')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '3', G.DCGO_N3RD_CLSS_FLG, 'N'), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '3', 'Y', 'N'), 'N')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '4', G.DCGO_N4TH_CLSS_FLG, 'N'), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '4', 'Y', 'N'), 'N')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '5', G.DCGO_N5TH_CLSS_FLG, 'N'), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '5', 'Y', 'N'), 'N')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '6', G.DCGO_N6TH_CLSS_FLG, 'N'), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '6', 'Y', 'N'), 'N')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '7', G.DCGO_N7TH_CLSS_FLG, 'N'), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '7', 'Y', 'N'), 'N')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '8', G.DCGO_N8TH_CLSS_FLG, 'N'), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '8', 'Y', 'N'), 'N')
                      AND DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '9', G.DCGO_N9TH_CLSS_FLG, 'N'), 'N') = DECODE(D.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '9', 'Y', 'N'), 'N')
                      AND H.TML_AGMT_OFC_CTY_CD = RD.TML_AGMT_OFC_CTY_CD
                      AND H.TML_AGMT_SEQ = RD.TML_AGMT_SEQ
                      AND H.TML_AGMT_VER_NO = RD.TML_AGMT_VER_NO
                      AND I.COST_CODE = RD.LGS_COST_CD
                      AND RD.TML_AGMT_TP_CD = 'S'
                      AND RD.AUTO_CALC_FLG = 'Y'
                      AND RD.TML_STO_AGMT_TP_CD = 'FD'
                      AND RD.TML_FREE_DYS_TP_CD = 'R'
                      AND I.COST_CODE = RD.LGS_COST_CD
                      AND NVL(RD.IO_BND_CD, 'N') = DECODE(NVL(RD.IO_BND_CD, 'N'), 'N', 'N', 'S', 'S', I.IO)
                      AND NVL(RD.TML_CNTR_STY_CD,'N') = DECODE(NVL(RD.TML_CNTR_STY_CD,'N'),'N','N','S','S',I.CNTR_STY_CD)
                      AND RD.TML_AGMT_OFC_CTY_CD = RC.TML_AGMT_OFC_CTY_CD(+)
                      AND RD.TML_AGMT_SEQ = RC.TML_AGMT_SEQ(+)
                      AND RD.TML_AGMT_VER_NO = RC.TML_AGMT_VER_NO(+)
                      AND RD.TML_AGMT_DTL_SEQ = RC.TML_AGMT_DTL_SEQ(+)
                      AND DECODE(RD.TML_AGMT_VOL_UT_CD, 'C', RC.CNTR_TPSZ_CD, 'N') = DECODE(RD.TML_AGMT_VOL_UT_CD, 'C', DECODE(I.CNTR_STY_CD, 'F', DECODE(SUBSTR(I.TPSZ, 1, 1), 'R', DECODE(I.RC_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), 'T',DECODE(I.RC_FLG,'Y','R'||SUBSTR(I.TPSZ,2,1),I.TPSZ), 'O', DECODE(I.AWK_CGO_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), 'F', DECODE(I.AWK_CGO_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), 'P', DECODE(I.AWK_CGO_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), 'A', DECODE(I.AWK_CGO_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), 'S', DECODE(I.AWK_CGO_FLG, 'Y', I.TPSZ, 'D'||SUBSTR(I.TPSZ, 2, 1)), I.TPSZ) , I.TPSZ) , 'N')
                      AND RD.TML_AGMT_OFC_CTY_CD = R.TML_AGMT_OFC_CTY_CD(+)
                      AND RD.TML_AGMT_SEQ = R.TML_AGMT_SEQ(+)
                      AND RD.TML_AGMT_VER_NO = R.TML_AGMT_VER_NO(+)
                      AND RD.TML_AGMT_DTL_SEQ = R.TML_AGMT_DTL_SEQ(+)
                      AND DECODE(NVL(RD.DCGO_APLY_TP_CD, 'N'), 'N', 'N', R.DCGO_APLY_TP_CD) = DECODE(NVL(RD.DCGO_APLY_TP_CD, 'N'), 'N', 'N', 'R')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'A', DECODE(I.DG, 'N', 'N', R.DCGO_SAM_CLSS_FLG), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'A', DECODE(I.DG, 'N', 'N', 'Y'), 'N')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'A', DECODE(I.DG, 'N', R.DCGO_NON_CLSS_FLG, 'N'), 'S', DECODE(I.DG, 'N', R.DCGO_NON_CLSS_FLG, 'N'), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'A', DECODE(I.DG, 'N', 'Y', 'N'), 'S', DECODE(I.DG, 'N', 'Y', 'N'), 'N')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '1', R.DCGO_N1ST_CLSS_FLG, 'N'), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '1', 'Y', 'N'), 'N')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '2', R.DCGO_N2ND_CLSS_FLG, 'N'), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '2', 'Y', 'N'), 'N')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '3', R.DCGO_N3RD_CLSS_FLG, 'N'), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '3', 'Y', 'N'), 'N')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '4', R.DCGO_N4TH_CLSS_FLG, 'N'), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '4', 'Y', 'N'), 'N')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '5', R.DCGO_N5TH_CLSS_FLG, 'N'), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '5', 'Y', 'N'), 'N')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '6', R.DCGO_N6TH_CLSS_FLG, 'N'), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '6', 'Y', 'N'), 'N')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '7', R.DCGO_N7TH_CLSS_FLG, 'N'), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '7', 'Y', 'N'), 'N')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '8', R.DCGO_N8TH_CLSS_FLG, 'N'), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '8', 'Y', 'N'), 'N')
                      AND DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '9', R.DCGO_N9TH_CLSS_FLG, 'N'), 'N') = DECODE(RD.DCGO_APLY_TP_CD, 'S', DECODE(I.DG, '9', 'Y', 'N'), 'N') ) F )FF ) ) ) L,
          TES_LGS_COST C
        WHERE L.COST_CODE = C.LGS_COST_CD(+) )
    WHERE ( NVL(FMDYS, 1) >= FM_DAY
          OR NVL(TODYS, 999) <= TO_DAY
          OR NVL(TODYS, 999) >= TO_DAY )
      AND new_TO_DAY - FM_DAY >= 0
    GROUP BY IBFLAG, CALC_TP_CD, CALC_COST_GRP_CD, LGS_COST_CD, CNTR_NO, CNTR_TPSZ_CD, IO_BND_CD, DCGO_IND_CD, CNTR_STY_CD, STAY_DYS, FREE_DYS, PAID_DAY, EXD_DAY, (new_TO_DAY - FM_DAY)+1, (calc_PDYS - FM_DAY)+1, VOL_TR_UT_CD, 
             (DECODE(SIGN(TODYS-((new_TO_DAY - FM_DAY)+1)), -1, ((new_TO_DAY - FM_DAY)+1)-TODYS, ((new_TO_DAY - FM_DAY)+1)) * RATE) * DECODE(VOL_TR_UT_CD, 'T', DECODE(CNTR_TPSZ_CD, 'D7', 2.25, 'D8', 2.4, 'D9', 2.4, 'DW', 2.65, 'DX', 2.25, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, 2)), 1),
             (DECODE(SIGN(TODYS-((calc_PDYS - FM_DAY)+1)), -1, ((calc_PDYS - FM_DAY)+1)-TODYS, ((calc_PDYS - FM_DAY)+1)) * RATE) * DECODE(VOL_TR_UT_CD, 'T', DECODE(CNTR_TPSZ_CD, 'D7', 2.25, 'D8', 2.4, 'D9', 2.4, 'DW', 2.65, 'DX', 2.25, DECODE(SUBSTR(CNTR_TPSZ_CD, 2, 1), 2, 1, 2)), 1),
             CURR_CHK, CURR_CD, INV_XCH_RT, ACCT_CD, TML_AGMT_OFC_CTY_CD, TML_AGMT_SEQ, TML_AGMT_VER_NO, TO_DAY
    ORDER BY LGS_COST_CD ASC, CNTR_NO ASC, CNTR_TPSZ_CD ASC, IO_BND_CD ASC, CTRT_RT ASC )
    WHERE DECODE(SIGN(CALC_PDYS_CALC_AMT), 1, NEW_CALC_AMT - CALC_PDYS_CALC_AMT, NEW_CALC_AMT) > 0

#if (${agmt_cost_yn} == 'Y') 
) A, AGMTCOST B
WHERE A.LGS_COST_CD = B.COST_CD
#end			]]></sql>
			<params>
				<param name="tml_so_ofc_cty_cd" type="12" value="" out="N"/>
				<param name="tml_so_seq" type="12" value="" out="N"/>
				<param name="sto_dys_ind_cd" type="12" value="" out="N"/>
				<param name="curr_cd" type="12" value="" out="N"/>
				<param name="to_prd_dt" type="12" value="" out="N"/>
				<param name="yd_cd" type="12" value="" out="N"/>
				<param name="fm_prd_dt" type="12" value="" out="N"/>
				<param name="vndr_seq" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
