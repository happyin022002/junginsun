/*=========================================================
*Copyright(c) 2016 CyberLogitec
*@FileName : MarineTerminalStorageInvoiceManageDBDAOVerifyStorageInvoiceVolumneRSQL.java
*@FileTitle : 
*Open Issues :
*Change history :
*@LastModifyDate : 2016.11.16
*@LastModifier : 
*@LastVersion : 1.0
* 2016.11.16 
* 1.0 Creation
=========================================================*/
package com.clt.apps.opus.esd.tes.serviceproviderinvoicemanage.marineterminalstorageinvoicemanage.integration;

import java.util.HashMap;
import org.apache.log4j.Logger;
import com.clt.framework.support.db.ISQLTemplate;

/**
 *
 * @author 
 * @see DAO 참조
 * @since J2EE 1.6
 */

public class MarineTerminalStorageInvoiceManageDBDAOVerifyStorageInvoiceVolumneRSQL implements ISQLTemplate{

	private StringBuffer query = new StringBuffer();
	
	Logger log =Logger.getLogger(this.getClass());
	
	/** Parameters definition in params/param elements */
	private HashMap<String,String[]> params = null;
	
	/**
	  * <pre>
	  * VerifyStorageInvoiceVolumne
	  * </pre>
	  */
	public MarineTerminalStorageInvoiceManageDBDAOVerifyStorageInvoiceVolumneRSQL(){
		setQuery();
		params = new HashMap<String,String[]>();
		String tmp = null;
		String[] arrTmp = null;
		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("vndr_seq",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("tml_so_ofc_cty_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.NUMERIC + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("tml_so_seq",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("to_prd_dt",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("yd_cd",new String[]{arrTmp[0],arrTmp[1]});

		tmp = java.sql.Types.VARCHAR + ",N";
		arrTmp = tmp.split(",");
		if(arrTmp.length !=2){
			throw new IllegalArgumentException();
		}
		params.put("fm_prd_dt",new String[]{arrTmp[0],arrTmp[1]});

		query.append("/*").append("\n"); 
		query.append("Path : com.clt.apps.opus.esd.tes.serviceproviderinvoicemanage.marineterminalstorageinvoicemanage.integration").append("\n"); 
		query.append("FileName : MarineTerminalStorageInvoiceManageDBDAOVerifyStorageInvoiceVolumneRSQL").append("\n"); 
		query.append("*/").append("\n"); 
	}
	
	public String getSQL(){
		return query.toString();
	}
	
	public HashMap<String,String[]> getParams() {
		return params;
	}

	/**
	 * Query 생성
	 */
	public void setQuery(){
		query.append("SELECT X.* " ).append("\n"); 
		query.append("FROM (" ).append("\n"); 
		query.append("	SELECT DENSE_RANK() OVER (PARTITION BY Z.TML_SO_TMP_SEQ, Z.CNTR_NO ORDER BY Z.GT_IN_DT_DIFF ASC) DIFF_RANK," ).append("\n"); 
		query.append("			Z.CNTR_NO," ).append("\n"); 
		query.append("			Z.CNTR_TPSZ_CD," ).append("\n"); 
		query.append("			TO_CHAR(Z.INV_GATE_IN_DT, 'YYYYMMDDHH24MI') INV_GATE_IN_DT," ).append("\n"); 
		query.append("			TO_CHAR(Z.INV_GATE_OUT_DT, 'YYYYMMDDHH24MI') INV_GATE_OUT_DT," ).append("\n"); 
		query.append("			TO_CHAR(Z.MVMT_GATE_IN_DT, 'YYYYMMDDHH24MI') MVMT_GATE_IN_DT," ).append("\n"); 
		query.append("			TO_CHAR(Z.MVMT_GATE_OUT_DT, 'YYYYMMDDHH24MI') MVMT_GATE_OUT_DT," ).append("\n"); 
		query.append("			TRUNC(Z.MVMT_GATE_IN_DT - Z.INV_GATE_IN_DT) GATE_IN_TD_DYS," ).append("\n"); 
		query.append("			TRUNC(DECODE(Z.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), Z.MVMT_GATE_OUT_DT) - Z.INV_GATE_OUT_DT) GATE_OUT_TD_DYS," ).append("\n"); 
		query.append("			TRUNC(DECODE(Z.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), Z.MVMT_GATE_OUT_DT) - Z.MVMT_GATE_IN_DT) MVMT_STAY_DYS," ).append("\n"); 
		query.append("			TRUNC(Z.INV_GATE_OUT_DT - Z.INV_GATE_IN_DT) INV_STAY_DYS," ).append("\n"); 
		query.append("			TRUNC((DECODE(Z.MVMT_GATE_OUT_DT, NULL, TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'), Z.MVMT_GATE_OUT_DT) - Z.MVMT_GATE_IN_DT)) - TRUNC(Z.INV_GATE_OUT_DT - Z.INV_GATE_IN_DT) STAY_DIFF_DYS," ).append("\n"); 
		query.append("			Z.CNTR_STY_CD," ).append("\n"); 
		query.append("			Z.IO_BND_CD," ).append("\n"); 
		query.append("			Z.LOCL_TS_IND_CD," ).append("\n"); 
		query.append("			Z.DCGO_CLSS_CD," ).append("\n"); 
		query.append("			Z.BB_CGO_FLG," ).append("\n"); 
		query.append("			Z.RC_FLG," ).append("\n"); 
		query.append("			Z.AWK_CGO_FLG," ).append("\n"); 
		query.append("			Z.DSCR_IND_CD," ).append("\n"); 
		query.append("			REPLACE(Z.BKG_NO,'OSCAR') BKG_NO," ).append("\n"); 
		query.append("			Z.BL_NO," ).append("\n"); 
		query.append("			Z.BL_NO_TP," ).append("\n"); 
		query.append("			Z.VSL_CD," ).append("\n"); 
		query.append("			Z.SKD_VOY_NO," ).append("\n"); 
		query.append("			Z.SKD_DIR_CD," ).append("\n"); 
		query.append("			CASE " ).append("\n"); 
		query.append("			WHEN Z.DSCR_IND_CD IN ('DT','DE','DS', 'DP', 'HO', 'PD', 'NH', 'DB', 'DF', 'NN') " ).append("\n"); 
		query.append("			THEN 'DC' " ).append("\n"); 
		query.append("			ELSE 'CO' " ).append("\n"); 
		query.append("			END VRFY_RSLT_IND_CD," ).append("\n"); 
		query.append("			CASE " ).append("\n"); 
		query.append("			WHEN Z.DSCR_IND_CD IS NULL " ).append("\n"); 
		query.append("			THEN 'Y' " ).append("\n"); 
		query.append("			ELSE '' " ).append("\n"); 
		query.append("			END CO_FLG," ).append("\n"); 
		query.append("			CASE " ).append("\n"); 
		query.append("			WHEN Z.DSCR_IND_CD IS NOT NULL " ).append("\n"); 
		query.append("			THEN 'Y' " ).append("\n"); 
		query.append("			ELSE '' " ).append("\n"); 
		query.append("			END DC_FLG, " ).append("\n"); 
		query.append("			CASE " ).append("\n"); 
		query.append("			WHEN Z.DSCR_IND_CD = 'DB' " ).append("\n"); 
		query.append("			THEN  (" ).append("\n"); 
		query.append("                     " ).append("\n"); 
		query.append("                        SELECT  'Double billing Inv : '||INV_NO" ).append("\n"); 
		query.append("                        FROM" ).append("\n"); 
		query.append("                        (" ).append("\n"); 
		query.append("                            SELECT   BB.CNTR_NO, BB.CNTR_STY_CD, MAX(BB.INV_NO) INV_NO" ).append("\n"); 
		query.append("                            FROM" ).append("\n"); 
		query.append("                            (" ).append("\n"); 
		query.append("                                SELECT A.COST_CODE, C.CNTR_NO " ).append("\n"); 
		query.append("                                FROM(" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    SELECT DISTINCT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE" ).append("\n"); 
		query.append("                                    FROM ( SELECT COUNT(T.LGS_COST_CD) CNT," ).append("\n"); 
		query.append("                                         T.LGS_COST_CD TP," ).append("\n"); 
		query.append("                                         T.THRP_LGS_COST_CD CD," ).append("\n"); 
		query.append("                                         H.TML_AGMT_OFC_CTY_CD CTY," ).append("\n"); 
		query.append("                                         H.TML_AGMT_SEQ SEQ," ).append("\n"); 
		query.append("                                         H.TML_AGMT_VER_NO NO" ).append("\n"); 
		query.append("                                        FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T" ).append("\n"); 
		query.append("                                        WHERE  H.YD_CD            = @[yd_cd]" ).append("\n"); 
		query.append("                                        AND    H.VNDR_SEQ         = @[vndr_seq]" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_STS_CD = 'C'" ).append("\n"); 
		query.append("                                        AND    H.DELT_FLG        = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                        AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                        AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)" ).append("\n"); 
		query.append("                                                                     FROM   TES_TML_AGMT_HDR M" ).append("\n"); 
		query.append("                                                                     WHERE  M.YD_CD               = @[yd_cd]" ).append("\n"); 
		query.append("                                                                     AND    M.VNDR_SEQ            = @[vndr_seq]" ).append("\n"); 
		query.append("                                                                     AND    M.TML_AGMT_STS_CD     = 'C'" ).append("\n"); 
		query.append("                                                                     AND    M.DELT_FLG            = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                                     AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                                                     AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-')) -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("                                        AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("                                        GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO," ).append("\n"); 
		query.append("                                        T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("                                    WHERE  C.COST_CALC_MZD_CD = 'A'" ).append("\n"); 
		query.append("                                    AND    C.TML_AGMT_MGMT_CD = 'A'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("									AND    C.STO_INV_FLG = 'Y'  -- Marine Storage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                    AND    D.TML_AGMT_OFC_CTY_CD = A.CTY" ).append("\n"); 
		query.append("                                    AND    D.TML_AGMT_SEQ = A.SEQ" ).append("\n"); 
		query.append("                                    AND    D.TML_AGMT_VER_NO  = A.NO" ).append("\n"); 
		query.append("                                    AND    C.LGS_COST_CD = D.LGS_COST_CD" ).append("\n"); 
		query.append("                                    AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' " ).append("\n"); 
		query.append("                                    AND    D.THRP_COST_CD_FLG IS NULL" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                ) A," ).append("\n"); 
		query.append("                                (" ).append("\n"); 
		query.append("                                    SELECT ltrim(regexp_substr((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                  from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                 where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '[^|]+', 1, level ) ,'|') as COST_CODE" ).append("\n"); 
		query.append("                                     FROM dual" ).append("\n"); 
		query.append("                                     connect by level<= ( length((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                    from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                   where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]))+1 - length(replace((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                                                                    from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                                                                   where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '|')) ) / length('|')" ).append("\n"); 
		query.append("                                )B," ).append("\n"); 
		query.append("                                (" ).append("\n"); 
		query.append("                                    SELECT * FROM TES_FILE_IMP_TMP" ).append("\n"); 
		query.append("                                    WHERE 1=1" ).append("\n"); 
		query.append("                                    AND TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]" ).append("\n"); 
		query.append("         " ).append("\n"); 
		query.append("                                ) C" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("    #if (${cost_cd_ftr_rmk} == '') " ).append("\n"); 
		query.append("        WHERE A.COST_CODE=B.COST_CODE(+)" ).append("\n"); 
		query.append("    #else " ).append("\n"); 
		query.append("        WHERE A.COST_CODE=B.COST_CODE -- hdr정보에 데이터 있으면 inner 없음 outter" ).append("\n"); 
		query.append("    #end" ).append("\n"); 
		query.append("                                " ).append("\n"); 
		query.append("                            ) AA," ).append("\n"); 
		query.append("                            (" ).append("\n"); 
		query.append("                            SELECT DISTINCT H.INV_NO, H.YD_CD, H.VNDR_SEQ, D.LGS_COST_CD, L.CNTR_NO, L.CNTR_STY_CD" ).append("\n"); 
		query.append("                             FROM   TES_TML_SO_HDR H, TES_TML_SO_DTL D, TES_TML_SO_CNTR_LIST L" ).append("\n"); 
		query.append("                             WHERE  H.YD_CD             = @[yd_cd]" ).append("\n"); 
		query.append("                             AND    H.VNDR_SEQ           = @[vndr_seq]" ).append("\n"); 
		query.append("                             AND    H.TML_SO_OFC_CTY_CD   = D.TML_SO_OFC_CTY_CD" ).append("\n"); 
		query.append("                             AND    H.TML_SO_SEQ          = D.TML_SO_SEQ" ).append("\n"); 
		query.append("                             AND    H.TML_SO_OFC_CTY_CD   = L.TML_SO_OFC_CTY_CD" ).append("\n"); 
		query.append("                             AND    H.TML_SO_SEQ          = L.TML_SO_SEQ" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                             AND    NVL(H.DELT_FLG,'N')   <> 'Y'" ).append("\n"); 
		query.append("                             AND    D.CALC_TP_CD          = 'A'" ).append("\n"); 
		query.append("                             AND    L.VRFY_RSLT_IND_CD    = 'CO'" ).append("\n"); 
		query.append("							 AND 	H.TML_INV_RJCT_STS_CD <> 'RJ'" ).append("\n"); 
		query.append("							 AND    H.TML_INV_TP_CD      = 'ST'" ).append("\n"); 
		query.append("                             AND    NVL(L.CNTR_TPSZ_CD,'N')  = NVL(D.CNTR_TPSZ_CD,'N')" ).append("\n"); 
		query.append("                             AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IO_BND_CD,'N'),'ON',NVL(L.IO_BND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                 = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IO_BND_CD,'N'),'ON',NVL(D.IO_BND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                             AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IOC_CD,'N'),'ON',NVL(L.IOC_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                 = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IOC_CD,'N'),'ON',NVL(D.IOC_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                             AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.LANE_CD,'N'),'ON',NVL(L.LANE_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                 = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.LANE_CD,'N'),'ON',NVL(D.LANE_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                             AND    DECODE(H.TML_INV_TP_CD,'TM'," ).append("\n"); 
		query.append("                                DECODE(L.BB_CGO_FLG,'Y','BB',DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F','TS','TM'),DECODE(L.CNTR_STY_CD,'F','FL','MT')))," ).append("\n"); 
		query.append("                                'ON',DECODE(L.CNTR_STY_CD,'F','F','M'),'OF',DECODE(L.CNTR_STY_CD,'F','FL','MT'),'ST',DECODE(L.LOCL_TS_IND_CD,'T','TS',DECODE(L.CNTR_STY_CD,'F','FL','MT')))" ).append("\n"); 
		query.append("                                 = DECODE(H.TML_INV_TP_CD,'TM',SUBSTR(D.LGS_COST_CD,5,2),'ON',SUBSTR(D.LGS_COST_CD,6,1),'OF',SUBSTR(D.LGS_COST_CD,5,2)," ).append("\n"); 
		query.append("                                'ST',SUBSTR(D.LGS_COST_CD,5,2))" ).append("\n"); 
		query.append("                             AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.DCGO_CLSS_CD,'N'),'ON',NVL(L.DCGO_CLSS_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                 = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.DCGO_IND_CD,'N'),'ON',NVL(D.DCGO_IND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                             AND    DECODE(H.TML_INV_TP_CD,'TM',DECODE(D.TML_TRNS_MOD_CD,'','S','S','S',NVL(L.TML_TRNS_MOD_CD,'S')),'N')" ).append("\n"); 
		query.append("                                 = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.TML_TRNS_MOD_CD,'S'),'N')" ).append("\n"); 
		query.append("                             AND    DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS','F','N'),'N')" ).append("\n"); 
		query.append("                                 = DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS',L.CNTR_STY_CD,'N'),'N')" ).append("\n"); 
		query.append("                             --AND    DECODE(H.TML_INV_TP_CD,'TM','Y',L.VSL_CD) <> DECODE(H.TML_INV_TP_CD,'TM','N','CNTC')" ).append("\n"); 
		query.append("                            ) BB" ).append("\n"); 
		query.append("                            WHERE AA.CNTR_NO = BB.CNTR_NO" ).append("\n"); 
		query.append("                            AND AA.COST_CODE = BB.LGS_COST_CD" ).append("\n"); 
		query.append("                            group by BB.CNTR_NO, BB.CNTR_STY_CD" ).append("\n"); 
		query.append("                        )" ).append("\n"); 
		query.append("                        WHERE ROWNUM =1" ).append("\n"); 
		query.append("                      ) " ).append("\n"); 
		query.append("            WHEN Z.BKG_NO = 'OSCAR' THEN 'This is OSCAR BKG'    " ).append("\n"); 
		query.append("			ELSE '' " ).append("\n"); 
		query.append("			END CNTR_RMK" ).append("\n"); 
		query.append("    FROM (" ).append("\n"); 
		query.append("            SELECT    ORG.CNTR_NO," ).append("\n"); 
		query.append("                      MC.CNTR_TPSZ_CD CNTR_TPSZ_CD," ).append("\n"); 
		query.append("                      ORG.INV_GATE_IN_DT," ).append("\n"); 
		query.append("                      ORG.INV_GATE_OUT_DT," ).append("\n"); 
		query.append("                      ORG.MIN_INV_GATE_IN_DT," ).append("\n"); 
		query.append("                      CASE" ).append("\n"); 
		query.append("                      WHEN DB2.CNTR_NO IS NOT NULL THEN 'DB'  " ).append("\n"); 
		query.append("                      WHEN ORG.CNTR_STY_CD = 'F'" ).append("\n"); 
		query.append("                        AND CALC.CNTR_NO IS NULL" ).append("\n"); 
		query.append("                        AND CALC.CNTR_TP IS NULL " ).append("\n"); 
		query.append("                      THEN 'NN'           " ).append("\n"); 
		query.append("                      WHEN ORG.CNTR_STY_CD = 'F'" ).append("\n"); 
		query.append("                        AND CALC.CNTR_STY_CD IS NULL " ).append("\n"); 
		query.append("                      THEN 'NH'           " ).append("\n"); 
		query.append("                      WHEN ORG.CNTR_STY_CD = 'M'" ).append("\n"); 
		query.append("                        AND CALC.MVMT_GATE_IN_DT IS NULL" ).append("\n"); 
		query.append("                         --OR CALC.MVMT_GATE_OUT_DT IS NULL) /** ZZ상태의 G.O없는 CNTR때문에 comment처리함 2015.03.15 **/" ).append("\n"); 
		query.append("                      THEN 'NN'                          " ).append("\n"); 
		query.append("#if (${sto_dys_ind_cd} == 'IO') " ).append("\n"); 
		query.append("					  WHEN TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD')-ORG.TO_PRD_DT>0 " ).append("\n"); 
		query.append("					  THEN 'PD'" ).append("\n"); 
		query.append("#end                      " ).append("\n"); 
		query.append("                      WHEN ABS(TO_CHAR(CALC.MVMT_GATE_IN_DT,'YYYYMMDD')-TO_CHAR(ORG.INV_GATE_IN_DT,'YYYYMMDD'))>=1 AND ABS(DECODE(TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD'), NULL, TO_CHAR(TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'),'YYYYMMDD'), TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD'))-TO_CHAR(ORG.INV_GATE_OUT_DT,'YYYYMMDD'))>=1 " ).append("\n"); 
		query.append("                      THEN 'DT' " ).append("\n"); 
		query.append("                      WHEN ABS(TO_CHAR(CALC.MVMT_GATE_IN_DT,'YYYYMMDD')-TO_CHAR(ORG.INV_GATE_IN_DT,'YYYYMMDD'))>=1" ).append("\n"); 
		query.append("                      THEN 'DE' " ).append("\n"); 
		query.append("                      WHEN ABS(DECODE(TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD'), NULL, TO_CHAR(TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'),'YYYYMMDD'), TO_CHAR(CALC.MVMT_GATE_OUT_DT,'YYYYMMDD'))-TO_CHAR(ORG.INV_GATE_OUT_DT,'YYYYMMDD'))>=1 " ).append("\n"); 
		query.append("                      THEN 'DS' " ).append("\n"); 
		query.append("                      ELSE '' " ).append("\n"); 
		query.append("                      END DSCR_IND_CD," ).append("\n"); 
		query.append("                      ORG.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                      ORG.YD_CD," ).append("\n"); 
		query.append("                      ORG.VNDR_SEQ," ).append("\n"); 
		query.append("                      ORG.RCV_DT," ).append("\n"); 
		query.append("                      CALC.RC_FLG," ).append("\n"); 
		query.append("                      CALC.AWK_CGO_FLG," ).append("\n"); 
		query.append("                      CALC.MVMT_GATE_IN_DT," ).append("\n"); 
		query.append("                      CALC.MVMT_GATE_OUT_DT," ).append("\n"); 
		query.append("                      ORG.CNTR_STY_CD," ).append("\n"); 
		query.append("                      CALC.IO_BND_CD," ).append("\n"); 
		query.append("                      CALC.LOCL_TS_IND_CD," ).append("\n"); 
		query.append("                      CALC.DCGO_CLSS_CD," ).append("\n"); 
		query.append("                      CALC.BB_CGO_FLG," ).append("\n"); 
		query.append("                      CALC.BKG_NO," ).append("\n"); 
		query.append("                      CALC.BL_NO," ).append("\n"); 
		query.append("                      CALC.BL_NO_TP," ).append("\n"); 
		query.append("                      CALC.VSL_CD," ).append("\n"); 
		query.append("                      CALC.SKD_VOY_NO," ).append("\n"); 
		query.append("                      CALC.SKD_DIR_CD," ).append("\n"); 
		query.append("                      ABS(ORG.INV_GATE_IN_DT - CALC.MVMT_GATE_IN_DT) GT_IN_DT_DIFF," ).append("\n"); 
		query.append("                      ABS(ORG.INV_GATE_OUT_DT - CALC.MVMT_GATE_OUT_DT) GT_OUT_DT_DIFF" ).append("\n"); 
		query.append("            FROM (" ).append("\n"); 
		query.append("                    SELECT M3.BKG_NO," ).append("\n"); 
		query.append("                           M3.CNMV_CYC_NO," ).append("\n"); 
		query.append("                           M3.CNTR_TP," ).append("\n"); 
		query.append("                           M3.CNTR_STY_CD," ).append("\n"); 
		query.append("                           M3.DCGO_CLSS_CD," ).append("\n"); 
		query.append("                           M3.BB_CGO_FLG," ).append("\n"); 
		query.append("                           M3.RC_FLG," ).append("\n"); 
		query.append("                           M3.AWK_CGO_FLG," ).append("\n"); 
		query.append("                           M3.BL_NO," ).append("\n"); 
		query.append("                           M3.BL_NO_TP," ).append("\n"); 
		query.append("                           M3.VSL_CD," ).append("\n"); 
		query.append("                           M3.SKD_VOY_NO," ).append("\n"); 
		query.append("                           M3.SKD_DIR_CD," ).append("\n"); 
		query.append("                           M3.POL," ).append("\n"); 
		query.append("                           M3.CNTR_NO," ).append("\n"); 
		query.append("                           M3.CNMV_SEQ, " ).append("\n"); 
		query.append("                           M3.MVMT_GATE_IN_DT," ).append("\n"); 
		query.append("                           M3.MVMT_GATE_OUT_DT," ).append("\n"); 
		query.append("                           M3.STY," ).append("\n"); 
		query.append("                           M3.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                           M3.YD_CD," ).append("\n"); 
		query.append("                           M3.MVMT_FM," ).append("\n"); 
		query.append("                           CASE WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'OP'" ).append("\n"); 
		query.append("                                THEN 'O'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'VL'" ).append("\n"); 
		query.append("                                THEN 'O'     " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'ID'" ).append("\n"); 
		query.append("                                THEN 'I'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'OP'" ).append("\n"); 
		query.append("                                THEN 'O'  " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'VL'" ).append("\n"); 
		query.append("                                THEN 'O'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'ID'" ).append("\n"); 
		query.append("                                THEN 'I'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'TN'" ).append("\n"); 
		query.append("                                THEN 'O'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'EN'" ).append("\n"); 
		query.append("                                THEN 'O'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'XX'" ).append("\n"); 
		query.append("                                THEN 'O'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'OP'" ).append("\n"); 
		query.append("                                THEN 'O'  " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'VL'" ).append("\n"); 
		query.append("                                THEN 'O'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'ID'" ).append("\n"); 
		query.append("                                THEN 'I'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'TN'" ).append("\n"); 
		query.append("                                THEN 'I'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'EN'" ).append("\n"); 
		query.append("                                THEN 'I'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'XX'" ).append("\n"); 
		query.append("                                THEN 'I'            " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'OP'" ).append("\n"); 
		query.append("                                THEN 'O'" ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'VL'" ).append("\n"); 
		query.append("                                THEN 'O'     " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'ID'" ).append("\n"); 
		query.append("                                THEN 'I'      " ).append("\n"); 
		query.append("								WHEN M3.MI_STS = 'VD' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I'  " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'EN' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'ID' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'OC' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'OP' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'TN' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'VL' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'XX' AND M3.MO_STS = 'IC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'VD' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I'  " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'EN' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'ID' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'MT' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'IC' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'OP' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'TN' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'TS' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'VL' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I' " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'XX' AND M3.MO_STS = 'OC' -- Gate In으로만 verify했을때 I/O 누락방지를 위해 추가" ).append("\n"); 
		query.append("                                THEN 'I'        " ).append("\n"); 
		query.append("                                WHEN M3.MI_STS = 'VD' AND M3.MO_STS = 'MT'" ).append("\n"); 
		query.append("                                THEN 'I'      " ).append("\n"); 
		query.append("                           		ELSE ''" ).append("\n"); 
		query.append("                           END IO_BND_CD," ).append("\n"); 
		query.append("                                  " ).append("\n"); 
		query.append("                           CASE WHEN M3.MI_STS = 'TS' OR M3.MO_STS = 'TS'" ).append("\n"); 
		query.append("                                THEN 'T'" ).append("\n"); 
		query.append("                           		ELSE 'L'" ).append("\n"); 
		query.append("                           END  LOCL_TS_IND_CD" ).append("\n"); 
		query.append("                    FROM (" ).append("\n"); 
		query.append("                            SELECT DECODE(M2.BKG_NO,'OSCAR','OSCAR',C.BKG_NO) BKG_NO," ).append("\n"); 
		query.append("                                   C.CNMV_CYC_NO ," ).append("\n"); 
		query.append("                                   C.CNTR_TPSZ_CD CNTR_TP," ).append("\n"); 
		query.append("                                   DECODE(B.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M') CNTR_STY_CD," ).append("\n"); 
		query.append("                                   MIN(NVL(SUBSTR(D.IMDG_CLSS_CD, 1, 1), 'N')) DCGO_CLSS_CD," ).append("\n"); 
		query.append("                                   NVL(C.BB_CGO_FLG, 'N') BB_CGO_FLG," ).append("\n"); 
		query.append("                                   NVL(C.RC_FLG, 'N') RC_FLG," ).append("\n"); 
		query.append("                                   NVL(C.AWK_CGO_FLG, 'N') AWK_CGO_FLG,                            " ).append("\n"); 
		query.append("                                   B.BL_NO BL_NO," ).append("\n"); 
		query.append("                                   B.BL_NO_TP BL_NO_TP," ).append("\n"); 
		query.append("                                   B.VSL_CD VSL_CD," ).append("\n"); 
		query.append("                                   B.SKD_VOY_NO SKD_VOY_NO," ).append("\n"); 
		query.append("                                   B.SKD_DIR_CD SKD_DIR_CD," ).append("\n"); 
		query.append("                                   B.POL_CD POL," ).append("\n"); 
		query.append("                                   M2.CNTR_NO," ).append("\n"); 
		query.append("                                   M2.CNMV_SEQ, " ).append("\n"); 
		query.append("                                   M2.GATE_IN MVMT_GATE_IN_DT," ).append("\n"); 
		query.append("                                   M2.GATE_OUT MVMT_GATE_OUT_DT," ).append("\n"); 
		query.append("                                   M2.STY," ).append("\n"); 
		query.append("                                   M2.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                                   M2.YD_CD," ).append("\n"); 
		query.append("                                   MVMT_FM," ).append("\n"); 
		query.append("                                   M2.MI_STS," ).append("\n"); 
		query.append("                                   M2.MO_STS" ).append("\n"); 
		query.append("                            FROM (SELECT	DISTINCT MIO.MVMT_FM," ).append("\n"); 
		query.append("                      						MIO.CNTR_NO CNTR_NO," ).append("\n"); 
		query.append("                     				 		MIO.CNMV_SEQ CNMV_SEQ," ).append("\n"); 
		query.append("                      						CASE WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNTR_TP WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNTR_TP END CNTR_TPSZ_CD," ).append("\n"); 
		query.append("                      						CASE WHEN MIO.MVMT_STS_CD||MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')" ).append("\n"); 
		query.append("                      						    THEN MIO.CNMV_EVNT_DT " ).append("\n"); 
		query.append("                      						    ELSE MIO.PREV_EVNT_DT" ).append("\n"); 
		query.append("                      						END GATE_IN," ).append("\n"); 
		query.append("--											MIO.PREV_EVNT_DT GATE_IN," ).append("\n"); 
		query.append("--                      					MIO.CNMV_EVNT_DT GATE_OUT," ).append("\n"); 
		query.append("										   CASE	WHEN MIO.MVMT_STS_CD||MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')" ).append("\n"); 
		query.append("												THEN NULL" ).append("\n"); 
		query.append("												ELSE MIO.CNMV_EVNT_DT" ).append("\n"); 
		query.append("										   END GATE_OUT," ).append("\n"); 
		query.append("                      						MIO.CNTR_STY_CD STY," ).append("\n"); 
		query.append("                      						CASE WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNMV_CYC_NO " ).append("\n"); 
		query.append("                                                 WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.CNMV_CYC_NO " ).append("\n"); 
		query.append("                                            END CYC," ).append("\n"); 
		query.append("                      						MIO.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                      						MIO.YD_CD," ).append("\n"); 
		query.append("                      						CASE WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.BKG_NO " ).append("\n"); 
		query.append("                                                 WHEN DECODE(MIO.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')=MIO.CNTR_STY_CD THEN MIO.BKG_NO " ).append("\n"); 
		query.append("                                                 WHEN LENGTH(BKG_NO) = 10 THEN 'OSCAR' " ).append("\n"); 
		query.append("                                            END BKG_NO," ).append("\n"); 
		query.append("                      						MIO.CNTR_STY_CD," ).append("\n"); 
		query.append("                      						MIO.PREV_MVMT_STS MI_STS," ).append("\n"); 
		query.append("                      						MIO.MVMT_STS_CD MO_STS" ).append("\n"); 
		query.append("                                  FROM (SELECT M1.PREV_MVMT_STS,M1.MVMT_STS_CD,M1.NEXT_MVMT_STS," ).append("\n"); 
		query.append("#if (${sto_dys_ind_cd} == 'IO')    " ).append("\n"); 
		query.append("                                               M1.PREV_EVNT_DT," ).append("\n"); 
		query.append("                                               M1.CNMV_EVNT_DT,                                                " ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("											   NVL(M1.PREV_EVNT_DT,M1.CNMV_EVNT_DT) PREV_EVNT_DT," ).append("\n"); 
		query.append("											   NVL(M1.CNMV_EVNT_DT,TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')) CNMV_EVNT_DT," ).append("\n"); 
		query.append("#end                                        " ).append("\n"); 
		query.append("                                               M1.NEXT_EVNT_DT," ).append("\n"); 
		query.append("                                               M1.CNTR_NO,M1.CNMV_YR,M1.CNMV_SEQ,M1.CNTR_STY_CD,P2.TML_SO_TMP_SEQ,M1.YD_CD,M1.BKG_NO," ).append("\n"); 
		query.append("                                               M1.CNMV_SPLIT_NO,M1.MVMT_FM,M1.CNTR_TP,M1.CNMV_CYC_NO,M1.BKG_CGO_TP_CD " ).append("\n"); 
		query.append("                                        FROM" ).append("\n"); 
		query.append("                                        (SELECT PREV_MVMT_STS,MVMT_STS_CD,NEXT_MVMT_STS," ).append("\n"); 
		query.append("											   NVL(PREV_EVNT_DT,CNMV_EVNT_DT) PREV_EVNT_DT," ).append("\n"); 
		query.append("											   NVL(CNMV_EVNT_DT,TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')) CNMV_EVNT_DT," ).append("\n"); 
		query.append("                                               NEXT_EVNT_DT," ).append("\n"); 
		query.append("                                               CNTR_NO,CNMV_YR,CNMV_SEQ,CNTR_STY_CD,TML_SO_TMP_SEQ,YD_CD,BKG_NO,CNMV_SPLIT_NO,MVMT_FM,CNTR_TP,CNMV_CYC_NO,BKG_CGO_TP_CD " ).append("\n"); 
		query.append("                                        FROM	(" ).append("\n"); 
		query.append("                    					  SELECT M.PREV_MVMT_STS," ).append("\n"); 
		query.append("                                                 M.MVMT_STS_CD," ).append("\n"); 
		query.append("                                          		 DECODE(M.NEXT_MVMT_STS,'',DECODE((SELECT MVMT_STS_CD FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND CNMV_EVNT_DT > M.CNMV_EVNT_DT  AND ROWNUM=1),'','ZZ',(SELECT MVMT_STS_CD FROM CTM_MOVEMENT WHERE CNTR_NO = M.CNTR_NO AND CNMV_EVNT_DT > M.CNMV_EVNT_DT AND ROWNUM=1)),M.NEXT_MVMT_STS) NEXT_MVMT_STS, " ).append("\n"); 
		query.append("                                         		 M.PREV_EVNT_DT," ).append("\n"); 
		query.append("                                        		 M.CNMV_EVNT_DT," ).append("\n"); 
		query.append("                                          		 M.NEXT_EVNT_DT," ).append("\n"); 
		query.append("                                         		 M.CNTR_NO," ).append("\n"); 
		query.append("                                         		 M.CNMV_YR," ).append("\n"); 
		query.append("                                         		 M.CNMV_SEQ," ).append("\n"); 
		query.append("                                         		 M.CNTR_STY_CD," ).append("\n"); 
		query.append("                                         		 M.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                                         		 M.YD_CD," ).append("\n"); 
		query.append("                                         		 NVL(M.BKG_NO,M.BKG_NO2) AS BKG_NO," ).append("\n"); 
		query.append("                                         		 M.CNMV_SPLIT_NO," ).append("\n"); 
		query.append("                                         		 M.MVMT_FM," ).append("\n"); 
		query.append("                                         		 M.CNTR_TP," ).append("\n"); 
		query.append("                                         		 M.CNMV_CYC_NO," ).append("\n"); 
		query.append("                                         		 M.BKG_CGO_TP_CD" ).append("\n"); 
		query.append("                                        FROM (" ).append("\n"); 
		query.append("                    							SELECT  LAG(M.MVMT_STS_CD)  OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) PREV_MVMT_STS," ).append("\n"); 
		query.append("                      									M.MVMT_STS_CD," ).append("\n"); 
		query.append("                      									LEAD(M.MVMT_STS_CD) OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) NEXT_MVMT_STS," ).append("\n"); 
		query.append("                      									LAG(M.CNMV_EVNT_DT) OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) PREV_EVNT_DT,  " ).append("\n"); 
		query.append("                      									M.CNMV_EVNT_DT," ).append("\n"); 
		query.append("                      									LEAD(M.CNMV_EVNT_DT)OVER (PARTITION BY M.CNTR_NO ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ, M.CNMV_SPLIT_NO) NEXT_EVNT_DT," ).append("\n"); 
		query.append("                      									M.CNTR_NO," ).append("\n"); 
		query.append("                      									M.CNMV_YR," ).append("\n"); 
		query.append("                     									M.CNMV_SEQ," ).append("\n"); 
		query.append("                      									P.CNTR_STY_CD,                      " ).append("\n"); 
		query.append("                      									P.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                      									P.YD_CD," ).append("\n"); 
		query.append("                      									(SELECT TO_BKG_NO FROM BKG_BOOKING WHERE BKG_NO = M.BKG_NO AND BKG_STS_CD = 'X') BKG_NO," ).append("\n"); 
		query.append("                                				        M.BKG_NO AS BKG_NO2," ).append("\n"); 
		query.append("                      									M.CNMV_SPLIT_NO," ).append("\n"); 
		query.append("                      									DECODE(M.FCNTR_FLG, 'N', 'M', 'F') MVMT_FM," ).append("\n"); 
		query.append("                      									M.CNTR_TPSZ_CD CNTR_TP," ).append("\n"); 
		query.append("                      									M.CNMV_CYC_NO," ).append("\n"); 
		query.append("                      									B.BKG_CGO_TP_CD" ).append("\n"); 
		query.append("                       	     		           FROM TES_FILE_IMP_TMP P, CTM_MOVEMENT M, BKG_BOOKING B" ).append("\n"); 
		query.append("                       	   		              WHERE P.TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]" ).append("\n"); 
		query.append("                         			            AND P.TML_SO_SEQ = @[tml_so_seq]" ).append("\n"); 
		query.append("                      	 	              		AND M.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')-730 ) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')+730)+ 0.99999421" ).append("\n"); 
		query.append("                         	              		AND M.CNTR_NO = P.CNTR_NO" ).append("\n"); 
		query.append("                         	              		AND M.ORG_YD_CD = P.YD_CD" ).append("\n"); 
		query.append("                                                AND DECODE(M.FCNTR_FLG, 'N', 'M', 'F') = P.CNTR_STY_CD" ).append("\n"); 
		query.append("                         	              		AND M.BKG_NO = B.BKG_NO(+)" ).append("\n"); 
		query.append("                         	                    ORDER BY M.CNTR_NO, M.CNMV_EVNT_DT, M.CNMV_SEQ ASC, M.CNMV_SPLIT_NO ) M ))M1, TES_FILE_IMP_TMP P2" ).append("\n"); 
		query.append("                         	                    WHERE M1.CNTR_NO = P2.CNTR_NO" ).append("\n"); 
		query.append("                                	AND M1.CNTR_STY_CD = P2.CNTR_STY_CD" ).append("\n"); 
		query.append("                                	AND (TO_CHAR(M1.PREV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_IN_DT,'YYYYMMDD') OR TO_CHAR(M1.CNMV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_IN_DT,'YYYYMMDD') OR TO_CHAR(M1.PREV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_OUT_DT,'YYYYMMDD') OR TO_CHAR(M1.CNMV_EVNT_DT,'YYYYMMDD') = TO_CHAR(P2.INV_GATE_OUT_DT,'YYYYMMDD'))" ).append("\n"); 
		query.append("                                	ORDER BY M1.CNTR_NO, M1.PREV_EVNT_DT, M1.CNMV_SEQ, M1.CNMV_SPLIT_NO) MIO" ).append("\n"); 
		query.append("#if (${sto_dys_ind_cd} == 'IO') " ).append("\n"); 
		query.append("                       	                WHERE	(MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("                         	            AND		MIO.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421)" ).append("\n"); 
		query.append("#else" ).append("\n"); 
		query.append("                                        WHERE	((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("												-- GATE OUT이 없고 GATE IN만 있는 경우 조건 추가 - 2014-11-05" ).append("\n"); 
		query.append("												OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )" ).append("\n"); 
		query.append("												AND		(MIO.PREV_EVNT_DT >= TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))" ).append("\n"); 
		query.append("												AND		(MIO.CNMV_EVNT_DT <= TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')+ 0.99999421))" ).append("\n"); 
		query.append("										OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("												OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )" ).append("\n"); 
		query.append("												AND		(MIO.PREV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))" ).append("\n"); 
		query.append("												AND		(MIO.CNMV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421))" ).append("\n"); 
		query.append("										OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("												OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )" ).append("\n"); 
		query.append("												AND		(MIO.PREV_EVNT_DT BETWEEN (TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')) AND (TO_DATE(@[to_prd_dt], 'YYYY-MM-DD'))+ 0.99999421)" ).append("\n"); 
		query.append("												AND		(MIO.CNMV_EVNT_DT > TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')))" ).append("\n"); 
		query.append("										OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("												OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )" ).append("\n"); 
		query.append("												AND		(MIO.PREV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD'))" ).append("\n"); 
		query.append("												AND		(MIO.CNMV_EVNT_DT > TO_DATE(@[to_prd_dt], 'YYYY-MM-DD')))" ).append("\n"); 
		query.append("                                        OR		((MIO.PREV_MVMT_STS||MIO.MVMT_STS_CD IN ('MTOP','MTVL','MTID','MTTN','MTEN','MTXX'," ).append("\n"); 
		query.append("                           					                        	              'OCOP','OCVL','OCID','OCTN','OCEN','OCXX'," ).append("\n"); 
		query.append("                       					                            	              'ICOP','ICVL','ICID','ICTN','ICEN','ICXX'," ).append("\n"); 
		query.append("                                  					               	                  'TSOP','TSVL','TSID','TSTN','TSEN','TSXX')" ).append("\n"); 
		query.append("												OR (MIO.MVMT_STS_CD || MIO.NEXT_MVMT_STS IN ('MTZZ', 'OCZZ', 'ICZZ', 'TSZZ')) )" ).append("\n"); 
		query.append("												AND		(MIO.NEXT_EVNT_DT IS NULL)" ).append("\n"); 
		query.append("												AND		(MIO.CNMV_EVNT_DT < TO_DATE(@[fm_prd_dt], 'YYYY-MM-DD')))" ).append("\n"); 
		query.append("#end" ).append("\n"); 
		query.append("									) M2," ).append("\n"); 
		query.append("                                    BKG_CONTAINER C," ).append("\n"); 
		query.append("                                    BKG_BOOKING B," ).append("\n"); 
		query.append("                                    BKG_DG_CGO D" ).append("\n"); 
		query.append("                            WHERE 1=1" ).append("\n"); 
		query.append("                            AND M2.CNTR_NO = C.CNTR_NO(+)                            " ).append("\n"); 
		query.append("                            AND SUBSTR(M2.BKG_NO,1,10) = SUBSTR(C.BKG_NO(+),1,10) --20161012 split booking가져올 수 있도록 10자리만 비교함. xinyi 요청" ).append("\n"); 
		query.append("                            AND C.BKG_NO   = B.BKG_NO(+)" ).append("\n"); 
		query.append("                            AND B.BKG_NO   = D.BKG_NO(+)" ).append("\n"); 
		query.append("                            AND M2.CYC     = C.CNMV_CYC_NO(+)" ).append("\n"); 
		query.append("                            GROUP BY   C.BKG_NO," ).append("\n"); 
		query.append("                                       C.CNMV_CYC_NO," ).append("\n"); 
		query.append("                                       C.CNTR_TPSZ_CD, " ).append("\n"); 
		query.append("                                       DECODE(B.BKG_CGO_TP_CD, 'F', 'F', 'B', 'F', 'R', 'R', NULL, NULL, 'M')," ).append("\n"); 
		query.append("                                       NVL(C.BB_CGO_FLG, 'N')," ).append("\n"); 
		query.append("                                       NVL(C.RC_FLG, 'N')," ).append("\n"); 
		query.append("                                       NVL(C.AWK_CGO_FLG, 'N')," ).append("\n"); 
		query.append("                                       B.BL_NO," ).append("\n"); 
		query.append("                                       B.BL_NO_TP," ).append("\n"); 
		query.append("                                       B.VSL_CD," ).append("\n"); 
		query.append("                                       B.SKD_VOY_NO," ).append("\n"); 
		query.append("                                       B.SKD_DIR_CD," ).append("\n"); 
		query.append("                                       B.POL_CD," ).append("\n"); 
		query.append("                                       M2.CNTR_NO," ).append("\n"); 
		query.append("                                       M2.CNMV_SEQ," ).append("\n"); 
		query.append("                                       M2.GATE_IN," ).append("\n"); 
		query.append("                                       M2.GATE_OUT," ).append("\n"); 
		query.append("                                       M2.STY," ).append("\n"); 
		query.append("                                       M2.TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                                       M2.YD_CD," ).append("\n"); 
		query.append("                                       MVMT_FM," ).append("\n"); 
		query.append("                                       M2.MI_STS," ).append("\n"); 
		query.append("                                       M2.MO_STS," ).append("\n"); 
		query.append("                                       M2.BKG_NO) M3) CALC,              " ).append("\n"); 
		query.append("                        (SELECT CNTR_NO," ).append("\n"); 
		query.append("                                CNTR_TPSZ_CD," ).append("\n"); 
		query.append("                                INV_GATE_IN_DT," ).append("\n"); 
		query.append("                                INV_GATE_OUT_DT," ).append("\n"); 
		query.append("                                CNTR_STY_CD," ).append("\n"); 
		query.append("                                TML_SO_TMP_SEQ," ).append("\n"); 
		query.append("                                YD_CD," ).append("\n"); 
		query.append("                                VNDR_SEQ," ).append("\n"); 
		query.append("                                RCV_DT," ).append("\n"); 
		query.append("                                FM_PRD_DT," ).append("\n"); 
		query.append("                                TO_PRD_DT ," ).append("\n"); 
		query.append("                                (SELECT MIN(INV_GATE_IN_DT)" ).append("\n"); 
		query.append("                                   FROM TES_FILE_IMP_TMP" ).append("\n"); 
		query.append("                                  WHERE TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]" ).append("\n"); 
		query.append("                                    AND TML_SO_SEQ = @[tml_so_seq] ) MIN_INV_GATE_IN_DT" ).append("\n"); 
		query.append("                          FROM TES_FILE_IMP_TMP" ).append("\n"); 
		query.append("                         WHERE TML_SO_OFC_CTY_CD = @[tml_so_ofc_cty_cd]" ).append("\n"); 
		query.append("                           AND TML_SO_SEQ = @[tml_so_seq]) ORG," ).append("\n"); 
		query.append("                         MST_CONTAINER MC," ).append("\n"); 
		query.append("						 (" ).append("\n"); 
		query.append("                                SELECT CNTR_NO" ).append("\n"); 
		query.append("                                FROM" ).append("\n"); 
		query.append("                                (" ).append("\n"); 
		query.append("                                    SELECT   BB.CNTR_NO, BB.CNTR_STY_CD, MAX(BB.INV_NO) INV_NO" ).append("\n"); 
		query.append("                                    FROM" ).append("\n"); 
		query.append("                                    (" ).append("\n"); 
		query.append("                                        SELECT A.COST_CODE, C.CNTR_NO " ).append("\n"); 
		query.append("                                        FROM(" ).append("\n"); 
		query.append("                                            SELECT DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD)) COST_CODE" ).append("\n"); 
		query.append("                                            FROM ( SELECT COUNT(T.LGS_COST_CD) CNT," ).append("\n"); 
		query.append("                                                 T.LGS_COST_CD TP," ).append("\n"); 
		query.append("                                                 T.THRP_LGS_COST_CD CD," ).append("\n"); 
		query.append("                                                 H.TML_AGMT_OFC_CTY_CD CTY," ).append("\n"); 
		query.append("                                                 H.TML_AGMT_SEQ SEQ," ).append("\n"); 
		query.append("                                                 H.TML_AGMT_VER_NO NO" ).append("\n"); 
		query.append("                                                FROM   TES_TML_AGMT_HDR H, TES_TML_AGMT_THRP_COST T" ).append("\n"); 
		query.append("                                                WHERE  H.YD_CD            = @[yd_cd]" ).append("\n"); 
		query.append("                                                AND    H.VNDR_SEQ         = @[vndr_seq]" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_STS_CD = 'C'" ).append("\n"); 
		query.append("                                                AND    H.DELT_FLG        = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                AND    TO_CHAR(H.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                                AND    TO_CHAR(H.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_VER_NO = ( SELECT MAX(M.TML_AGMT_VER_NO)" ).append("\n"); 
		query.append("                                                                             FROM   TES_TML_AGMT_HDR M" ).append("\n"); 
		query.append("                                                                             WHERE  M.YD_CD               = @[yd_cd]" ).append("\n"); 
		query.append("                                                                             AND    M.VNDR_SEQ            = @[vndr_seq]" ).append("\n"); 
		query.append("                                                                             AND    M.TML_AGMT_STS_CD     = 'C'" ).append("\n"); 
		query.append("                                                                             AND    M.DELT_FLG            = 'N'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                                             AND    TO_CHAR(M.EFF_FM_DT,'YYYYMMDD') <= REPLACE(@[fm_prd_dt],'-') -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("                                                                             AND    TO_CHAR(M.EFF_TO_DT,'YYYYMMDD') >= REPLACE(@[fm_prd_dt],'-')) -- From Period Date([fm_prd_dt]) ==> Marine Storage/OFF Dock Sotrage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_OFC_CTY_CD = T.TML_AGMT_OFC_CTY_CD(+)" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_SEQ        = T.TML_AGMT_SEQ(+)" ).append("\n"); 
		query.append("                                                AND    H.TML_AGMT_VER_NO     = T.TML_AGMT_VER_NO(+)" ).append("\n"); 
		query.append("                                                GROUP BY H.TML_AGMT_OFC_CTY_CD, H.TML_AGMT_SEQ, H.TML_AGMT_VER_NO," ).append("\n"); 
		query.append("                                                T.LGS_COST_CD, T.THRP_LGS_COST_CD ) A, TES_TML_SO_COST C, TES_TML_AGMT_DTL D" ).append("\n"); 
		query.append("                                            WHERE  C.COST_CALC_MZD_CD = 'A'" ).append("\n"); 
		query.append("                                            AND    C.TML_AGMT_MGMT_CD = 'A'" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("											AND    C.STO_INV_FLG = 'Y'  -- Marine Storage Invoice " ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                            AND    D.TML_AGMT_OFC_CTY_CD = A.CTY" ).append("\n"); 
		query.append("                                            AND    D.TML_AGMT_SEQ = A.SEQ" ).append("\n"); 
		query.append("                                            AND    D.TML_AGMT_VER_NO  = A.NO" ).append("\n"); 
		query.append("                                            AND    C.LGS_COST_CD = D.LGS_COST_CD" ).append("\n"); 
		query.append("                                            AND    DECODE(A.CNT,0,DECODE(SUBSTR(C.LGS_COST_CD,1,2),'TP','N','Y'),'Y') = 'Y' " ).append("\n"); 
		query.append("                                            AND    D.THRP_COST_CD_FLG IS NULL" ).append("\n"); 
		query.append("                                            GROUP BY DECODE(1,0,C.LGS_COST_CD,DECODE(C.LGS_COST_CD,CD,TP,C.LGS_COST_CD))" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("                                        ) A," ).append("\n"); 
		query.append("                                        (" ).append("\n"); 
		query.append("                                            SELECT ltrim(regexp_substr((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                          from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                         where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '[^|]+', 1, level ) ,'|') as COST_CODE" ).append("\n"); 
		query.append("                                             FROM dual" ).append("\n"); 
		query.append("                                             connect by level<= ( length((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                            from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                           where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]))+1 - length(replace((select COST_CD_FTR_RMK" ).append("\n"); 
		query.append("                                                                                                                            from tes_tml_so_hdr" ).append("\n"); 
		query.append("                                                                                                                           where TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]), '|')) ) / length('|')" ).append("\n"); 
		query.append("                                        )B," ).append("\n"); 
		query.append("                                        (" ).append("\n"); 
		query.append("                                            SELECT CNTR_NO FROM TES_FILE_IMP_TMP" ).append("\n"); 
		query.append("                                            WHERE 1=1" ).append("\n"); 
		query.append("                                            AND TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]" ).append("\n"); 
		query.append("                 " ).append("\n"); 
		query.append("                                        ) C" ).append("\n"); 
		query.append("" ).append("\n"); 
		query.append("            #if (${cost_cd_ftr_rmk} == '') " ).append("\n"); 
		query.append("                WHERE A.COST_CODE=B.COST_CODE(+)" ).append("\n"); 
		query.append("            #else " ).append("\n"); 
		query.append("                WHERE A.COST_CODE=B.COST_CODE -- hdr정보에 데이터 있으면 inner 없음 outter" ).append("\n"); 
		query.append("            #end" ).append("\n"); 
		query.append("                                        " ).append("\n"); 
		query.append("                                    ) AA," ).append("\n"); 
		query.append("                                    (" ).append("\n"); 
		query.append("                                    SELECT /*+ ORDERED USE_NL(CNTR L D) USE_HASH(H) */ H.INV_NO, H.YD_CD, H.VNDR_SEQ, D.LGS_COST_CD, L.CNTR_NO, L.CNTR_STY_CD" ).append("\n"); 
		query.append("                                     FROM   ( " ).append("\n"); 
		query.append("                                                SELECT DISTINCT CNTR_NO " ).append("\n"); 
		query.append("                                                FROM TES_FILE_IMP_TMP  " ).append("\n"); 
		query.append("                                                WHERE 1=1" ).append("\n"); 
		query.append("                                                AND TML_SO_OFC_CTY_CD=@[tml_so_ofc_cty_cd] AND TML_SO_SEQ=@[tml_so_seq]" ).append("\n"); 
		query.append("                                            ) CNTR, TES_TML_SO_HDR H, TES_TML_SO_DTL D, TES_TML_SO_CNTR_LIST L" ).append("\n"); 
		query.append("                                     WHERE  H.YD_CD             = @[yd_cd]" ).append("\n"); 
		query.append("                                     AND    H.VNDR_SEQ           = @[vndr_seq]" ).append("\n"); 
		query.append("                                     AND    H.TML_SO_OFC_CTY_CD   = D.TML_SO_OFC_CTY_CD" ).append("\n"); 
		query.append("                                     AND    H.TML_SO_SEQ          = D.TML_SO_SEQ" ).append("\n"); 
		query.append("                                     AND    H.TML_SO_OFC_CTY_CD   = L.TML_SO_OFC_CTY_CD" ).append("\n"); 
		query.append("                                     AND    H.TML_SO_SEQ          = L.TML_SO_SEQ" ).append("\n"); 
		query.append("                                     AND    L.CNTR_NO = CNTR.CNTR_NO" ).append("\n"); 
		query.append("				                     AND    (TO_DATE(H.FM_PRD_DT,'YYYYMMDD') BETWEEN TO_DATE(REPLACE(@[fm_prd_dt],'-'),'YYYYMMDD') AND TO_DATE(REPLACE(@[to_prd_dt],'-'),'YYYYMMDD')" ).append("\n"); 
		query.append("                                            OR  TO_DATE(H.TO_PRD_DT,'YYYYMMDD') BETWEEN TO_DATE(REPLACE(@[fm_prd_dt],'-'),'YYYYMMDD') AND TO_DATE(REPLACE(@[to_prd_dt],'-'),'YYYYMMDD'))" ).append("\n"); 
		query.append("                                     AND    NVL(H.DELT_FLG,'N')   <> 'Y'" ).append("\n"); 
		query.append("                                     AND    D.CALC_TP_CD          = 'A'" ).append("\n"); 
		query.append("                                     AND    L.VRFY_RSLT_IND_CD    = 'CO'" ).append("\n"); 
		query.append("                                     AND    NVL(L.CNTR_TPSZ_CD,'N')  = NVL(D.CNTR_TPSZ_CD,'N')" ).append("\n"); 
		query.append("                                     AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IO_BND_CD,'N'),'ON',NVL(L.IO_BND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                         = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IO_BND_CD,'N'),'ON',NVL(D.IO_BND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                     AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.IOC_CD,'N'),'ON',NVL(L.IOC_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                         = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.IOC_CD,'N'),'ON',NVL(D.IOC_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                     AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.LANE_CD,'N'),'ON',NVL(L.LANE_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                         = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.LANE_CD,'N'),'ON',NVL(D.LANE_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                     AND    DECODE(H.TML_INV_TP_CD,'TM'," ).append("\n"); 
		query.append("                                        DECODE(L.BB_CGO_FLG,'Y','BB',DECODE(L.LOCL_TS_IND_CD,'T',DECODE(L.CNTR_STY_CD,'F','TS','TM'),DECODE(L.CNTR_STY_CD,'F','FL','MT')))," ).append("\n"); 
		query.append("                                        'ON',DECODE(L.CNTR_STY_CD,'F','F','M'),'OF',DECODE(L.CNTR_STY_CD,'F','FL','MT'),'ST',DECODE(L.LOCL_TS_IND_CD,'T','TS',DECODE(L.CNTR_STY_CD,'F','FL','MT')))" ).append("\n"); 
		query.append("                                         = DECODE(H.TML_INV_TP_CD,'TM',SUBSTR(D.LGS_COST_CD,5,2),'ON',SUBSTR(D.LGS_COST_CD,6,1),'OF',SUBSTR(D.LGS_COST_CD,5,2)," ).append("\n"); 
		query.append("                                        'ST',SUBSTR(D.LGS_COST_CD,5,2))" ).append("\n"); 
		query.append("                                     AND    DECODE(H.TML_INV_TP_CD,'TM',NVL(L.DCGO_CLSS_CD,'N'),'ON',NVL(L.DCGO_CLSS_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                         = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.DCGO_IND_CD,'N'),'ON',NVL(D.DCGO_IND_CD,'N'),'OF','N','ST','N')" ).append("\n"); 
		query.append("                                     AND    DECODE(H.TML_INV_TP_CD,'TM',DECODE(D.TML_TRNS_MOD_CD,'','S','S','S',NVL(L.TML_TRNS_MOD_CD,'S')),'N')" ).append("\n"); 
		query.append("                                         = DECODE(H.TML_INV_TP_CD,'TM',NVL(D.TML_TRNS_MOD_CD,'S'),'N')" ).append("\n"); 
		query.append("                                     AND    DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS','F','N'),'N')" ).append("\n"); 
		query.append("                                         = DECODE(H.TML_INV_TP_CD,'TM',DECODE(SUBSTR(D.LGS_COST_CD,5,2),'TS',L.CNTR_STY_CD,'N'),'N')" ).append("\n"); 
		query.append("                                     --AND    DECODE(H.TML_INV_TP_CD,'TM','Y',L.VSL_CD) <> DECODE(H.TML_INV_TP_CD,'TM','N','CNTC')" ).append("\n"); 
		query.append("                                    ) BB" ).append("\n"); 
		query.append("                                    WHERE AA.CNTR_NO = BB.CNTR_NO" ).append("\n"); 
		query.append("                                    AND AA.COST_CODE = BB.LGS_COST_CD" ).append("\n"); 
		query.append("                                    group by BB.CNTR_NO, BB.CNTR_STY_CD" ).append("\n"); 
		query.append("                                )     " ).append("\n"); 
		query.append("                             ) DB2" ).append("\n"); 
		query.append("            WHERE ORG.CNTR_NO = CALC.CNTR_NO(+)" ).append("\n"); 
		query.append("              AND ORG.CNTR_NO = MC.CNTR_NO(+)" ).append("\n"); 
		query.append("              AND ORG.CNTR_NO = DB2.CNTR_NO(+)" ).append("\n"); 
		query.append("              AND ORG.TML_SO_TMP_SEQ = CALC.TML_SO_TMP_SEQ(+)" ).append("\n"); 
		query.append("              --and ORG.CNTR_STY_CD = CALC.MVMT_FM(+)" ).append("\n"); 
		query.append("              ) Z ) X" ).append("\n"); 
		query.append("WHERE DIFF_RANK = 1" ).append("\n"); 

	}
}