<?xml version="1.0" encoding="UTF-8"?>
<sqls>
	<querys>
		<query name="GEMPlanningPerformanceDBDAOSearchDetailByYearlyExpenseRSQL">
			<desc><![CDATA[CPS_GEM_0019화면의 DownExcel 버튼 클릭시 Yearly Expense 정보를 조회]]></desc>
			<sql><![CDATA[
SELECT  X.PLN_YRMON 
	   ,X.LVL1_CODE
	   ,X.LVL1_NAME
	   ,X.LVL2_CODE
	   ,X.LVL2_NAME
	   ,X.LVL4_CODE
	   ,X.LVL4_NAME
	   ,X.GEN_EXPN_ITM_NO
	   ,X.GEN_EXPN_ITM_DESC
	   ,X.LVL4_TIC
	   ,X.OFC_CD
	   ,X.RHQ
	   ,X.LOCL_CURR_CD
	   ,X.RQST_UT_VAL 
	   ,X.SALY_FLG 
	   ,X.OFC_CO_DIV_CD
	   ,X.JAN
	   ,X.FEB
	   ,X.MAR
	   ,X.APR
	   ,X.MAY
	   ,X.JUN
	   ,X.JUL
	   ,X.AUG               
	   ,X.SEP
	   ,X.OCT               
	   ,X.NOV
	   ,X.DEC
	   ,X.INT_TTL 
	   ,X.ADD_TTL 
	   ,X.TRN_TTL
	   ,X.GRD_TTL
	   ,X.CAL_BASIS
	   ,X.RQST_OPIN_RMK
FROM (
    SELECT A.PLN_YRMON 
          ,C.GEM_EXPN_GRP_CD1  LVL1_CODE
          ,DECODE(@[sch_lang], 'E', C.ENG_ABBR_NM_1, 'K', C.KRN_ABBR_NM_1) LVL1_NAME
          ,C.GEM_EXPN_GRP_CD2 LVL2_CODE
          ,DECODE(@[sch_lang], 'E', C.ENG_ABBR_NM_2, 'K', C.KRN_ABBR_NM_2) LVL2_NAME
          ,C.GEN_EXPN_CD LVL4_CODE
          ,DECODE(@[sch_lang], 'E', C.ENG_ABBR_NM, 'K', C.KRN_ABBR_NM) LVL4_NAME
          ,A.GEN_EXPN_ITM_NO
          ,A.GEN_EXPN_ITM_DESC
          ,C.TIC_CD LVL4_TIC
          ,A.OFC_CD
          ,CASE WHEN B.GEN_EXPN_OFC_LVL = '4' AND A.OFC_CD <> B.PRNT_OFC_CD THEN B.PRNT_OFC_CD END RHQ
		  ,DECODE(@[sch_cur], 'LCL', B.LOCL_CURR_CD
                   , 'KRW', 'KRW'
                   , 'USD', 'USD' ) LOCL_CURR_CD
      	  ,DECODE(@[sch_cur], 'LCL', B.RQST_UT_VAL
                   , 'KRW', '1000'
                   , 'USD', '1' ) RQST_UT_VAL
          ,C.SALY_FLG 
          ,B.OFC_CO_DIV_CD
          ,A.JAN_AMT JAN
          ,A.FEB_AMT FEB
          ,A.MAR_AMT MAR
          ,A.APR_AMT APR
          ,A.MAY_AMT MAY
          ,A.JUN_AMT JUN
          ,A.JUL_AMT JUL
          ,A.AUG_AMT AUG               
          ,A.SEP_AMT SEP
          ,A.OCT_AMT OCT               
          ,A.NOV_AMT NOV
          ,A.DEC_AMT DEC
          ,A.INT_TTL 
          ,A.ADD_TTL 
          ,A.TRN_TTL
          ,(A.INT_TTL + A.ADD_TTL + A.TRN_TTL) GRD_TTL
          ,A.GEN_EXPN_CALC_BSS_DESC CAL_BASIS
          ,A.RQST_OPIN_RMK
      FROM (
    SELECT A.OFC_CD
          ,A.GEN_EXPN_CD
          ,A.GEN_EXPN_ITM_NO
          ,SUM(DECODE(@[sch_cur], 'LCL', A.JAN_AMT
                       , 'USD', (A.JAN_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.JAN_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) JAN_AMT   
          ,SUM(DECODE(@[sch_cur], 'LCL', A.FEB_AMT
                       , 'USD', (A.FEB_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.FEB_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) FEB_AMT   
          ,SUM(DECODE(@[sch_cur], 'LCL', A.MAR_AMT
                       , 'USD', (A.MAR_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.MAR_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) MAR_AMT   
          ,SUM(DECODE(@[sch_cur], 'LCL', A.APR_AMT
                       , 'USD', (A.APR_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.APR_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) APR_AMT   
          ,SUM(DECODE(@[sch_cur], 'LCL', A.MAY_AMT
                       , 'USD', (A.MAY_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.MAY_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) MAY_AMT   
          ,SUM(DECODE(@[sch_cur], 'LCL', A.JUN_AMT
                       , 'USD', (A.JUN_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.JUN_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) JUN_AMT
          ,SUM(DECODE(@[sch_cur], 'LCL', A.JUL_AMT
                       , 'USD', (A.JUL_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.JUL_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) JUL_AMT
          ,SUM(DECODE(@[sch_cur], 'LCL', A.AUG_AMT
                       , 'USD', (A.AUG_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.AUG_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) AUG_AMT                   
          ,SUM(DECODE(@[sch_cur], 'LCL', A.SEP_AMT
                       , 'USD', (A.SEP_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.SEP_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) SEP_AMT
          ,SUM(DECODE(@[sch_cur], 'LCL', A.OCT_AMT
                       , 'USD', (A.OCT_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.OCT_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) OCT_AMT                   
          ,SUM(DECODE(@[sch_cur], 'LCL', A.NOV_AMT
                       , 'USD', (A.NOV_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.NOV_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) NOV_AMT
          ,SUM(DECODE(@[sch_cur], 'LCL', A.DEC_AMT
                       , 'USD', (A.DEC_AMT*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.DEC_AMT*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) DEC_AMT
          ,SUM(DECODE(@[sch_cur], 'LCL', A.INT_TTL
                       , 'USD', (A.INT_TTL*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.INT_TTL*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) INT_TTL
          ,SUM(DECODE(@[sch_cur], 'LCL', A.ADD_TTL
                       , 'USD', (A.ADD_TTL*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.ADD_TTL*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) ADD_TTL
          ,SUM(DECODE(@[sch_cur], 'LCL', A.TRN_TTL
                       , 'USD', (A.TRN_TTL*B.RQST_UT_VAL)/C.USD_LOCL_XCH_RT
                       , 'KRW', (((A.TRN_TTL*B.RQST_UT_VAL)/1000)/C.USD_LOCL_XCH_RT)*C.USD_KRW_XCH_RT )) TRN_TTL
          ,MAX(A.GEN_EXPN_ITM_DESC) GEN_EXPN_ITM_DESC
          ,MAX(A.GEN_EXPN_CALC_BSS_DESC) GEN_EXPN_CALC_BSS_DESC
          ,MAX(A.RQST_OPIN_RMK) RQST_OPIN_RMK
          ,MAX(SUBSTR(A.PLN_YRMON,1,4)) PLN_YRMON
      FROM (
            SELECT C.OFC_CD
                  ,C.GEN_EXPN_CD
                  ,C.GEN_EXPN_ITM_NO
                  ,C.JAN_AMT
                  ,C.FEB_AMT
                  ,C.MAR_AMT
                  ,C.APR_AMT
                  ,C.MAY_AMT
                  ,C.JUN_AMT
                  ,C.JUL_AMT
                  ,C.AUG_AMT
                  ,C.SEP_AMT
                  ,C.OCT_AMT
                  ,C.NOV_AMT
                  ,C.DEC_AMT
                  ,DECODE(A.GEN_EXPN_RQST_TP_CD, 'EI', C.JAN_AMT + C.FEB_AMT + C.MAR_AMT + C.APR_AMT + C.MAY_AMT + C.JUN_AMT + C.JUL_AMT + C.AUG_AMT + C.SEP_AMT + C.OCT_AMT + C.NOV_AMT + C.DEC_AMT, 0) INT_TTL
                  ,DECODE(A.GEN_EXPN_RQST_TP_CD, 'EA', C.JAN_AMT + C.FEB_AMT + C.MAR_AMT + C.APR_AMT + C.MAY_AMT + C.JUN_AMT + C.JUL_AMT + C.AUG_AMT + C.SEP_AMT + C.OCT_AMT + C.NOV_AMT + C.DEC_AMT, 0) ADD_TTL
                  ,DECODE(A.GEN_EXPN_RQST_TP_CD, 'ET', C.JAN_AMT + C.FEB_AMT + C.MAR_AMT + C.APR_AMT + C.MAY_AMT + C.JUN_AMT + C.JUL_AMT + C.AUG_AMT + C.SEP_AMT + C.OCT_AMT + C.NOV_AMT + C.DEC_AMT, 0) TRN_TTL
                  ,B.GEN_EXPN_ITM_DESC
                  ,B.GEN_EXPN_CALC_BSS_DESC
                  ,B.RQST_OPIN_RMK
                  ,A.PLN_YRMON
              FROM (
                    SELECT GEN_EXPN_RQST_NO
                          ,GEN_EXPN_RQST_TP_CD
                          ,SUBSTR(PLN_YRMON,1,4)||'00' PLN_YRMON
                      FROM GEM_REQUEST
                     WHERE PLN_YRMON LIKE @[sch_yrmon]||'%'
					   #if(${sch_target} != 'PE')
                       AND GEN_EXPN_RQST_TP_CD = @[sch_target]
					   #end
                   ) A
                  ,GEM_ITEM B
                  ,GEM_APRO_STEP C
             WHERE A.GEN_EXPN_RQST_NO = B.GEN_EXPN_RQST_NO
               AND B.CRNT_GEN_EXPN_APRO_STEP_CD = 'CO'
               AND B.CRNT_GEN_EXPN_APSTS_CD = 'AP'
               AND B.GEN_EXPN_RQST_NO = C.GEN_EXPN_RQST_NO
               AND B.OFC_CD = C.OFC_CD
               AND B.GEN_EXPN_CD = C.GEN_EXPN_CD
               AND B.GEN_EXPN_ITM_NO = C.GEN_EXPN_ITM_NO
               AND B.GEN_EXPN_TRNS_DIV_CD = C.GEN_EXPN_TRNS_DIV_CD
               AND B.GEN_EXPN_RQST_SEQ = C.GEN_EXPN_RQST_SEQ
               AND B.CRNT_GEN_EXPN_APRO_STEP_CD = C.GEN_EXPN_APRO_STEP_CD
           ) A
          ,GEM_OFFICE B
          ,GEM_XCH_RT C
     WHERE A.OFC_CD = B.OFC_CD
       AND B.LOCL_CURR_CD = C.CURR_CD
       AND C.ACCT_XCH_RT_YRMON = A.PLN_YRMON
       AND C.GEN_EXPN_XCH_RT_DIV_CD = 'I'
     GROUP BY A.OFC_CD
             ,A.GEN_EXPN_CD
             ,A.GEN_EXPN_ITM_NO
      ) A
     ,GEM_OFFICE B
     ,GEM_EXPN_GRP_V C
    WHERE A.OFC_CD = B.OFC_CD
      AND A.GEN_EXPN_CD = C.GEN_EXPN_CD
#if(${auth_flg} == 'YNYN')
   AND (A.OFC_CD = @[auth_ofc_cd] OR C.TIC_CD = @[auth_ofc_cd])
#end

#if(${auth_flg} == 'YYYN')
   AND ( A.OFC_CD IN ( SELECT L_4 FROM GEM_OFC_LEVEL_V WHERE L_3 = @[auth_ofc_cd]) OR C.TIC_CD = @[auth_ofc_cd])
#end

) X
WHERE 1=1
AND   X.OFC_CD IN (SELECT     OFC_CD
                   FROM       GEM_OFC_HIS
                   START WITH OFC_CD IN (SELECT DISTINCT L_4 CODE
                                         FROM            GEM_OFC_LEVEL_V
                                         WHERE           1 = 1
										 #if(${sch_hohq_gbn} != '')
                                         AND             RGN_OFC_FLG = @[sch_hohq_gbn]
                                         #end            
                                         #if(${sch_lvl3} != '' && ${ofc_expn_cd} != '') AND L_4 = @[sch_lvl3] #end	
                                         #if(${sch_lvl1} != '' && ${sch_lvl2} != '' && ${sch_lvl3} != '' && ${ofc_expn_cd} == '' ) AND L_4 = @[sch_lvl3] #end
                                         #if(${sch_lvl1} != '' && ${sch_lvl2} != '' && ${sch_lvl3} == '') AND L_3 = @[sch_lvl2] #end
                                         #if(${sch_lvl1} != '' && ${sch_lvl2} == '' && ${sch_lvl3} == '') AND L_2 = @[sch_lvl1] #end	
                                         #if(${sch_lvl3} == '' && ${ofc_expn_cd} != '') AND L_4 = @[ofc_expn_cd] #end	        
                                      )
                   CONNECT BY PRIOR OFC_CD = BFR_OFC_CD)
AND   X.LVL4_CODE IN (SELECT L_4
                        FROM   GEM_EXPN_LEVEL_V
                        WHERE  1 = 1
						AND    L_4 BETWEEN DECODE (@[sch_expense_from], '', '111111', @[sch_expense_from]) AND DECODE (@[sch_expense_to], '', '999999', @[sch_expense_to])
                        #if (${sch_expense_group} != '')
						AND    L_1 IN (${sch_expense_group})
						#end
                       )
#if (${sch_tic_cd} != '')
AND   X.LVL4_TIC = @[sch_tic_cd]
#end
#if (${sch_slay_flg} != '')
AND   X.SALY_FLG = @[sch_slay_flg]
#end
#if(${sch_com_div} != '')
AND   X.OFC_CO_DIV_CD = @[sch_com_div]
#end
ORDER BY X.LVL4_CODE			]]></sql>
			<params>
				<param name="sch_lang" type="12" value="" out="N"/>
				<param name="sch_cur" type="12" value="" out="N"/>
				<param name="sch_yrmon" type="12" value="" out="N"/>
				<param name="sch_target" type="12" value="" out="N"/>
				<param name="auth_ofc_cd" type="12" value="" out="N"/>
				<param name="sch_hohq_gbn" type="12" value="" out="N"/>
				<param name="sch_lvl3" type="12" value="" out="N"/>
				<param name="sch_lvl2" type="12" value="" out="N"/>
				<param name="sch_lvl1" type="12" value="" out="N"/>
				<param name="ofc_expn_cd" type="12" value="" out="N"/>
				<param name="sch_expense_from" type="12" value="" out="N"/>
				<param name="sch_expense_to" type="12" value="" out="N"/>
				<param name="sch_tic_cd" type="12" value="" out="N"/>
				<param name="sch_slay_flg" type="12" value="" out="N"/>
				<param name="sch_com_div" type="12" value="" out="N"/>
			</params>
		</query>
	</querys>
</sqls>
